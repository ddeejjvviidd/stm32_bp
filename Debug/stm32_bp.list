
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8c8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800da84  0800da84  0000ea84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db3c  0800db3c  0000f10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800db3c  0800db3c  0000eb3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db44  0800db44  0000f10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db44  0800db44  0000eb44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db48  0800db48  0000eb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800db4c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005084  2000010c  0800dc58  0000f10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005190  0800dc58  0000f190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002469f  00000000  00000000  0000f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e41  00000000  00000000  000337db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  00038620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015f9  00000000  00000000  0003a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff2b  00000000  00000000  0003b871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002381e  00000000  00000000  0006b79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d8ee  00000000  00000000  0008efba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ac8a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000777c  00000000  00000000  001ac8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b4068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800da6c 	.word	0x0800da6c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800da6c 	.word	0x0800da6c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <MX_ADC1_Init+0xe0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000530:	2200      	movs	r2, #0
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800056a:	f001 fcbd 	bl	8001ee8 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 feb7 	bl	80012e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0xe4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000596:	f002 f839 	bl	800260c <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 fea1 	bl	80012e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_ADC1_Init+0xe8>)
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a8:	230c      	movs	r3, #12
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 80005b2:	f002 f82b 	bl	800260c <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 fe93 	bl	80012e6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000128 	.word	0x20000128
 80005cc:	50040000 	.word	0x50040000
 80005d0:	c7520000 	.word	0xc7520000
 80005d4:	04300002 	.word	0x04300002

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0ae      	sub	sp, #184	@ 0xb8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2294      	movs	r2, #148	@ 0x94
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00d f9fd 	bl	800d9f8 <memset>
  if(adcHandle->Instance==ADC1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <HAL_ADC_MspInit+0x12c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d179      	bne.n	80006fc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fde3 	bl	8006204 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000644:	f000 fe4f 	bl	80012e6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2e      	ldr	r2, [pc, #184]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800067e:	230b      	movs	r3, #11
 8000680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068e:	4619      	mov	r1, r3
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0x134>)
 8000692:	f003 fa77 	bl	8003b84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_ADC_MspInit+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 800069e:	2205      	movs	r2, #5
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006d2:	f002 fee1 	bl	8003498 <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006dc:	f000 fe03 	bl	80012e6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2012      	movs	r0, #18
 80006f2:	f002 fe9a 	bl	800342a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f002 feb3 	bl	8003462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	37b8      	adds	r7, #184	@ 0xb8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	20000190 	.word	0x20000190
 8000714:	40020008 	.word	0x40020008

08000718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_DMA_Init+0xac>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <MX_DMA_Init+0xac>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_DMA_Init+0xb4>)
 8000752:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800075c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000760:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800077c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800078c:	f002 fe84 	bl	8003498 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000796:	f000 fda6 	bl	80012e6 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200b      	movs	r0, #11
 80007a0:	f002 fe43 	bl	800342a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a4:	200b      	movs	r0, #11
 80007a6:	f002 fe5c 	bl	8003462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f002 fe3b 	bl	800342a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f002 fe54 	bl	8003462 <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	4002001c 	.word	0x4002001c

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b55      	ldr	r3, [pc, #340]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a54      	ldr	r2, [pc, #336]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a4e      	ldr	r2, [pc, #312]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a48      	ldr	r2, [pc, #288]	@ (800093c <MX_GPIO_Init+0x16c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b46      	ldr	r3, [pc, #280]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x16c>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800085e:	f004 fde9 	bl	8005434 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a35      	ldr	r2, [pc, #212]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000880:	482f      	ldr	r0, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x170>)
 8000882:	f003 fb11 	bl	8003ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	482e      	ldr	r0, [pc, #184]	@ (8000944 <MX_GPIO_Init+0x174>)
 800088c:	f003 fb0c 	bl	8003ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	482c      	ldr	r0, [pc, #176]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000896:	f003 fb07 	bl	8003ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4825      	ldr	r0, [pc, #148]	@ (8000948 <MX_GPIO_Init+0x178>)
 80008b2:	f003 f967 	bl	8003b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	@ (8000940 <MX_GPIO_Init+0x170>)
 80008d0:	f003 f958 	bl	8003b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <MX_GPIO_Init+0x174>)
 80008e8:	f003 f94c 	bl	8003b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_GPIO_Init+0x174>)
 8000904:	f003 f93e 	bl	8003b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000920:	f003 f930 	bl	8003b84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2028      	movs	r0, #40	@ 0x28
 800092a:	f002 fd7e 	bl	800342a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f002 fd97 	bl	8003462 <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	@ 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	48001800 	.word	0x48001800
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d125      	bne.n	80009aa <HAL_GPIO_EXTI_Callback+0x5e>
		static bool previous;
		if(previous == false){
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000974:	f003 fa98 	bl	8003ea8 <HAL_GPIO_WritePin>
			previous = true;
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e008      	b.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
		} else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000986:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000988:	f003 fa8e 	bl	8003ea8 <HAL_GPIO_WritePin>
			previous = false;
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
		}

		int test = 1984;
 8000992:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000996:	60fb      	str	r3, [r7, #12]
		comms_append_int32(10, 1, &test);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	461a      	mov	r2, r3
 800099e:	2101      	movs	r1, #1
 80009a0:	200a      	movs	r0, #10
 80009a2:	f000 f89b 	bl	8000adc <comms_append_int32>
		comms_send();
 80009a6:	f000 f911 	bl	8000bcc <comms_send>
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000250 	.word	0x20000250
 80009b8:	48000400 	.word	0x48000400

080009bc <comms_reset_active_buffer>:
	DataValue data[255];
} CommsData;

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);

void comms_reset_active_buffer() {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_active_buffer)) = START_HEADER; // start bits
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <comms_reset_active_buffer+0x38>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 80009c8:	801a      	strh	r2, [r3, #0]
	comms_active_buffer[2] = 0; // buffer id
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <comms_reset_active_buffer+0x38>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3302      	adds	r3, #2
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	*((uint16_t*) (comms_active_buffer + 3)) = 0; // num of elements
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <comms_reset_active_buffer+0x38>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3303      	adds	r3, #3
 80009da:	2200      	movs	r2, #0
 80009dc:	801a      	strh	r2, [r3, #0]
	comms_active_wr_pointer = comms_active_buffer + 5; // first empty position for data
 80009de:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <comms_reset_active_buffer+0x38>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3305      	adds	r3, #5
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <comms_reset_active_buffer+0x3c>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000a54 	.word	0x20000a54
 80009f8:	20000a58 	.word	0x20000a58

080009fc <comms_uart_init>:

void comms_uart_init() {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_buffer1,
 8000a02:	2203      	movs	r2, #3
 8000a04:	4904      	ldr	r1, [pc, #16]	@ (8000a18 <comms_uart_init+0x1c>)
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <comms_uart_init+0x20>)
 8000a08:	f006 fef0 	bl	80077ec <HAL_UART_Receive_IT>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	71fb      	strb	r3, [r7, #7]
			3);
	UNUSED(rcode);
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000e60 	.word	0x20000e60
 8000a1c:	20003458 	.word	0x20003458

08000a20 <comms_init>:

void comms_init() {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	comms_active_buffer = comms_tx_buffer1;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <comms_init+0x30>)
 8000a26:	4a0b      	ldr	r2, [pc, #44]	@ (8000a54 <comms_init+0x34>)
 8000a28:	601a      	str	r2, [r3, #0]
	comms_prepared_buffer = comms_tx_buffer2;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <comms_init+0x38>)
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a5c <comms_init+0x3c>)
 8000a2e:	601a      	str	r2, [r3, #0]

	comms_reset_active_buffer();
 8000a30:	f7ff ffc4 	bl	80009bc <comms_reset_active_buffer>
	comms_prepared_wr_pointer = comms_prepared_buffer + 5;
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <comms_init+0x38>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3305      	adds	r3, #5
 8000a3a:	4a09      	ldr	r2, [pc, #36]	@ (8000a60 <comms_init+0x40>)
 8000a3c:	6013      	str	r3, [r2, #0]

	if (comms_selected_interface == COMMS_UART){
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <comms_init+0x44>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d101      	bne.n	8000a4a <comms_init+0x2a>
		comms_uart_init();
 8000a46:	f7ff ffd9 	bl	80009fc <comms_uart_init>
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000a54 	.word	0x20000a54
 8000a54:	20000254 	.word	0x20000254
 8000a58:	20000a5c 	.word	0x20000a5c
 8000a5c:	20000654 	.word	0x20000654
 8000a60:	20000a60 	.word	0x20000a60
 8000a64:	2000126c 	.word	0x2000126c

08000a68 <comms_purge_id_register>:

void comms_purge_id_register() {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	memset(comms_id_register, NULL, sizeof(comms_id_register));
 8000a6c:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000a70:	2100      	movs	r1, #0
 8000a72:	4802      	ldr	r0, [pc, #8]	@ (8000a7c <comms_purge_id_register+0x14>)
 8000a74:	f00c ffc0 	bl	800d9f8 <memset>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000a64 	.word	0x20000a64

08000a80 <comms_find_existing_data>:

void* comms_find_existing_data(uint8_t data_id) {
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	if (comms_id_register[data_id] != NULL) {
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <comms_find_existing_data+0x30>)
 8000a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d004      	beq.n	8000aa0 <comms_find_existing_data+0x20>
		return comms_id_register[data_id];
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <comms_find_existing_data+0x30>)
 8000a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9e:	e000      	b.n	8000aa2 <comms_find_existing_data+0x22>
	}
	return NULL;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000a64 	.word	0x20000a64

08000ab4 <comms_increment_active_buffer_data>:

void comms_increment_active_buffer_data() {
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_active_buffer + 3)) += 1;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <comms_increment_active_buffer_data+0x24>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3303      	adds	r3, #3
 8000abe:	881a      	ldrh	r2, [r3, #0]
 8000ac0:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <comms_increment_active_buffer_data+0x24>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3303      	adds	r3, #3
 8000ac6:	3201      	adds	r2, #1
 8000ac8:	b292      	uxth	r2, r2
 8000aca:	801a      	strh	r2, [r3, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000a54 	.word	0x20000a54

08000adc <comms_append_int32>:

int comms_append_int32(uint8_t data_id, uint8_t data_count, int *data) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	603a      	str	r2, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	71bb      	strb	r3, [r7, #6]
	// dissable interrupts
//	uint32_t primask = __get_PRIMASK();
//	__disable_irq();

	//check tx_register for same data id, return if existing
	if (comms_find_existing_data(data_id) != NULL) {
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ffc6 	bl	8000a80 <comms_find_existing_data>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <comms_append_int32+0x22>
		return 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e02d      	b.n	8000b5a <comms_append_int32+0x7e>
	}

	if (wr_status) {
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <comms_append_int32+0x88>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <comms_append_int32+0x2e>
		return COMMS_WR_LOCKED;
 8000b06:	2305      	movs	r3, #5
 8000b08:	e027      	b.n	8000b5a <comms_append_int32+0x7e>
	}
	else {
		wr_status = COMMS_INPROGRESS;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <comms_append_int32+0x88>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
	}

	// save the pointer to new data to register
	comms_id_register[data_id] = (void*) comms_active_wr_pointer;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4a15      	ldr	r2, [pc, #84]	@ (8000b68 <comms_append_int32+0x8c>)
 8000b14:	6812      	ldr	r2, [r2, #0]
 8000b16:	4915      	ldr	r1, [pc, #84]	@ (8000b6c <comms_append_int32+0x90>)
 8000b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// increment total data in buffer
	comms_increment_active_buffer_data();
 8000b1c:	f7ff ffca 	bl	8000ab4 <comms_increment_active_buffer_data>

	// write id, bytes and count
	*comms_active_wr_pointer = data_id;
 8000b20:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <comms_append_int32+0x8c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	79fa      	ldrb	r2, [r7, #7]
 8000b26:	701a      	strb	r2, [r3, #0]
	*(comms_active_wr_pointer + 1) = (uint8_t) sizeof(*data);
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <comms_append_int32+0x8c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	2204      	movs	r2, #4
 8000b30:	701a      	strb	r2, [r3, #0]
	*(comms_active_wr_pointer + 2) = data_count;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <comms_append_int32+0x8c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3302      	adds	r3, #2
 8000b38:	79ba      	ldrb	r2, [r7, #6]
 8000b3a:	701a      	strb	r2, [r3, #0]

	// write integer as 4 uint8_t to tx_buffer
	*((int*) (comms_active_wr_pointer + 3)) = *data;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <comms_append_int32+0x8c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3303      	adds	r3, #3
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	601a      	str	r2, [r3, #0]

	// move pointer comms_tx_buffer_wr_pointer
	comms_active_wr_pointer = (comms_active_wr_pointer + 3 + sizeof(*data));
 8000b48:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <comms_append_int32+0x8c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	3307      	adds	r3, #7
 8000b4e:	4a06      	ldr	r2, [pc, #24]	@ (8000b68 <comms_append_int32+0x8c>)
 8000b50:	6013      	str	r3, [r2, #0]

	wr_status = COMMS_READY;
 8000b52:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <comms_append_int32+0x88>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]

	// restore interrupts
//	__set_PRIMASK(primask);

	return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000126d 	.word	0x2000126d
 8000b68:	20000a58 	.word	0x20000a58
 8000b6c:	20000a64 	.word	0x20000a64

08000b70 <comms_switch_buffers>:

void comms_switch_buffers() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b76:	f3ef 8310 	mrs	r3, PRIMASK
 8000b7a:	603b      	str	r3, [r7, #0]
  return(result);
 8000b7c:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000b7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
	__disable_irq();

	// switch buffers
	uint8_t *_temp = comms_prepared_buffer;
 8000b84:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <comms_switch_buffers+0x4c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60bb      	str	r3, [r7, #8]
	comms_prepared_buffer = comms_active_buffer;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <comms_switch_buffers+0x50>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000bbc <comms_switch_buffers+0x4c>)
 8000b90:	6013      	str	r3, [r2, #0]
	comms_active_buffer = _temp;
 8000b92:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc0 <comms_switch_buffers+0x50>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	6013      	str	r3, [r2, #0]

	// set pointer to the end of prepared buffer data
	comms_prepared_wr_pointer = comms_active_wr_pointer;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <comms_switch_buffers+0x54>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <comms_switch_buffers+0x58>)
 8000b9e:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_buffer();
 8000ba0:	f7ff ff0c 	bl	80009bc <comms_reset_active_buffer>
	comms_purge_id_register();
 8000ba4:	f7ff ff60 	bl	8000a68 <comms_purge_id_register>
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f383 8810 	msr	PRIMASK, r3
}
 8000bb2:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000a5c 	.word	0x20000a5c
 8000bc0:	20000a54 	.word	0x20000a54
 8000bc4:	20000a58 	.word	0x20000a58
 8000bc8:	20000a60 	.word	0x20000a60

08000bcc <comms_send>:

int comms_send() {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

	if (tx_status > 0) {
 8000bd2:	4b32      	ldr	r3, [pc, #200]	@ (8000c9c <comms_send+0xd0>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <comms_send+0x12>
		return COMMS_TX_LOCKED;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	e059      	b.n	8000c92 <comms_send+0xc6>
	}

	tx_status = COMMS_INPROGRESS;
 8000bde:	4b2f      	ldr	r3, [pc, #188]	@ (8000c9c <comms_send+0xd0>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]

	// need to switch buffers
	comms_switch_buffers();
 8000be4:	f7ff ffc4 	bl	8000b70 <comms_switch_buffers>

	// terminator at the end
	*comms_prepared_wr_pointer = END_CR;
 8000be8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca0 <comms_send+0xd4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	220d      	movs	r2, #13
 8000bee:	701a      	strb	r2, [r3, #0]
	*(comms_prepared_wr_pointer + 1) = END_LF;
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca0 <comms_send+0xd4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	220a      	movs	r2, #10
 8000bf8:	701a      	strb	r2, [r3, #0]
	comms_prepared_wr_pointer += 2;
 8000bfa:	4b29      	ldr	r3, [pc, #164]	@ (8000ca0 <comms_send+0xd4>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3302      	adds	r3, #2
 8000c00:	4a27      	ldr	r2, [pc, #156]	@ (8000ca0 <comms_send+0xd4>)
 8000c02:	6013      	str	r3, [r2, #0]

	// buffer is empty
	if (comms_prepared_buffer[3] == 0) {
 8000c04:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <comms_send+0xd8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3303      	adds	r3, #3
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d109      	bne.n	8000c24 <comms_send+0x58>
		++empty; //DEBUG
 8000c10:	4b25      	ldr	r3, [pc, #148]	@ (8000ca8 <comms_send+0xdc>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	3301      	adds	r3, #1
 8000c16:	4a24      	ldr	r2, [pc, #144]	@ (8000ca8 <comms_send+0xdc>)
 8000c18:	6013      	str	r3, [r2, #0]
		tx_status = COMMS_READY;
 8000c1a:	4b20      	ldr	r3, [pc, #128]	@ (8000c9c <comms_send+0xd0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
		return COMMS_TX_BUFFER_EMPTY;
 8000c20:	2303      	movs	r3, #3
 8000c22:	e036      	b.n	8000c92 <comms_send+0xc6>
	} else {
		full++;
 8000c24:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <comms_send+0xe0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	4a20      	ldr	r2, [pc, #128]	@ (8000cac <comms_send+0xe0>)
 8000c2c:	6013      	str	r3, [r2, #0]
	}

	// send data
	USBD_StatusTypeDef cdc_return = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_return = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71bb      	strb	r3, [r7, #6]

	if(comms_selected_interface == COMMS_USB_OTG){
 8000c36:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb0 <comms_send+0xe4>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d10d      	bne.n	8000c5a <comms_send+0x8e>
		cdc_return = CDC_Transmit_FS(comms_prepared_buffer, comms_prepared_wr_pointer - comms_prepared_buffer);
 8000c3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <comms_send+0xd8>)
 8000c40:	6818      	ldr	r0, [r3, #0]
 8000c42:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <comms_send+0xd4>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <comms_send+0xd8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f00c f932 	bl	800ceb8 <CDC_Transmit_FS>
 8000c54:	4603      	mov	r3, r0
 8000c56:	71fb      	strb	r3, [r7, #7]
 8000c58:	e00d      	b.n	8000c76 <comms_send+0xaa>
	} else {
		uart_return = HAL_UART_Transmit(&hlpuart1, comms_prepared_buffer, comms_prepared_wr_pointer - comms_prepared_buffer, 100);
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <comms_send+0xd8>)
 8000c5c:	6819      	ldr	r1, [r3, #0]
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <comms_send+0xd4>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <comms_send+0xd8>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	2364      	movs	r3, #100	@ 0x64
 8000c6c:	4811      	ldr	r0, [pc, #68]	@ (8000cb4 <comms_send+0xe8>)
 8000c6e:	f006 fd2f 	bl	80076d0 <HAL_UART_Transmit>
 8000c72:	4603      	mov	r3, r0
 8000c74:	71bb      	strb	r3, [r7, #6]
	}

	tx_status = COMMS_READY;
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <comms_send+0xd0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]

	if (cdc_return) {
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <comms_send+0xba>
		return COMMS_TX_CDC_FAIL;
 8000c82:	2302      	movs	r3, #2
 8000c84:	e005      	b.n	8000c92 <comms_send+0xc6>
	}

	if (uart_return) {
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <comms_send+0xc4>
		return COMMS_TX_UART_FAIL;
 8000c8c:	2306      	movs	r3, #6
 8000c8e:	e000      	b.n	8000c92 <comms_send+0xc6>
	}

	return COMMS_SUCCESS;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2000126e 	.word	0x2000126e
 8000ca0:	20000a60 	.word	0x20000a60
 8000ca4:	20000a5c 	.word	0x20000a5c
 8000ca8:	20001264 	.word	0x20001264
 8000cac:	20001268 	.word	0x20001268
 8000cb0:	2000126c 	.word	0x2000126c
 8000cb4:	20003458 	.word	0x20003458

08000cb8 <comms_cdc_rx_callback>:

void comms_cdc_rx_callback(uint8_t *buffer, uint32_t length) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
	// call this func inside of usbd_cdc_if.c in CDC_Receive_FS()

	if (rx_status) {
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <comms_cdc_rx_callback+0x44>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d111      	bne.n	8000cee <comms_cdc_rx_callback+0x36>
		// not ready yet
		return;
	}

	if (length < 3) {
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d910      	bls.n	8000cf2 <comms_cdc_rx_callback+0x3a>
		// invalid
		return;
	}

	rx_status = COMMS_INPROGRESS;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <comms_cdc_rx_callback+0x44>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]

	//comms_rx_buffer = buffer;
	memcpy(comms_rx_buffer1, buffer, length);
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	4809      	ldr	r0, [pc, #36]	@ (8000d00 <comms_cdc_rx_callback+0x48>)
 8000cdc:	f00c feb8 	bl	800da50 <memcpy>
	comms_rx_read_pointer = comms_rx_buffer1 + 3;
 8000ce0:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <comms_cdc_rx_callback+0x4c>)
 8000ce2:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <comms_cdc_rx_callback+0x50>)
 8000ce4:	601a      	str	r2, [r3, #0]

	rx_status = COMMS_RECEIVED;
 8000ce6:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <comms_cdc_rx_callback+0x44>)
 8000ce8:	2202      	movs	r2, #2
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	e002      	b.n	8000cf4 <comms_cdc_rx_callback+0x3c>
		return;
 8000cee:	bf00      	nop
 8000cf0:	e000      	b.n	8000cf4 <comms_cdc_rx_callback+0x3c>
		return;
 8000cf2:	bf00      	nop
}
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000126f 	.word	0x2000126f
 8000d00:	20000e60 	.word	0x20000e60
 8000d04:	20000e63 	.word	0x20000e63
 8000d08:	20001260 	.word	0x20001260

08000d0c <comms_data_handler>:

__weak void comms_data_handler(CommsData *data) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

	if (data == NULL) {
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00c      	beq.n	8000d34 <comms_data_handler+0x28>
		return;
	}

	switch (data->data_id) {
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	d10a      	bne.n	8000d38 <comms_data_handler+0x2c>
	case 5:
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
				(GPIO_PinState) (data->data[0].u8));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	791b      	ldrb	r3, [r3, #4]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
 8000d26:	461a      	mov	r2, r3
 8000d28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d2c:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <comms_data_handler+0x34>)
 8000d2e:	f003 f8bb 	bl	8003ea8 <HAL_GPIO_WritePin>
		break;
 8000d32:	e002      	b.n	8000d3a <comms_data_handler+0x2e>
		return;
 8000d34:	bf00      	nop
 8000d36:	e000      	b.n	8000d3a <comms_data_handler+0x2e>
	default:
		break;
 8000d38:	bf00      	nop
	}

}
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	48000400 	.word	0x48000400

08000d44 <comms_rx_process>:

void comms_rx_process() {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8000d4a:	af00      	add	r7, sp, #0
	if (!rx_status) {
 8000d4c:	4b4f      	ldr	r3, [pc, #316]	@ (8000e8c <comms_rx_process+0x148>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 8093 	beq.w	8000e7c <comms_rx_process+0x138>
		// no data yet
		return;
	}

	if (comms_rx_buffer1[0] == 0) {
 8000d56:	4b4e      	ldr	r3, [pc, #312]	@ (8000e90 <comms_rx_process+0x14c>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f040 808a 	bne.w	8000e74 <comms_rx_process+0x130>
		uint16_t elements = *((uint16_t*) (comms_rx_buffer1 + 1));
 8000d60:	4b4b      	ldr	r3, [pc, #300]	@ (8000e90 <comms_rx_process+0x14c>)
 8000d62:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000d66:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406

		for (; elements > 0; --elements) {
 8000d6a:	e07e      	b.n	8000e6a <comms_rx_process+0x126>
			CommsData data;
			data.data_id = *comms_rx_read_pointer;
 8000d6c:	4b49      	ldr	r3, [pc, #292]	@ (8000e94 <comms_rx_process+0x150>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	781a      	ldrb	r2, [r3, #0]
 8000d72:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d76:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d7a:	701a      	strb	r2, [r3, #0]
			data.data_size = *(comms_rx_read_pointer + 1);
 8000d7c:	4b45      	ldr	r3, [pc, #276]	@ (8000e94 <comms_rx_process+0x150>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	785a      	ldrb	r2, [r3, #1]
 8000d82:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d86:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d8a:	705a      	strb	r2, [r3, #1]
			data.data_count = *(comms_rx_read_pointer + 2);
 8000d8c:	4b41      	ldr	r3, [pc, #260]	@ (8000e94 <comms_rx_process+0x150>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	789a      	ldrb	r2, [r3, #2]
 8000d92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d96:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d9a:	709a      	strb	r2, [r3, #2]

			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000da2:	e03d      	b.n	8000e20 <comms_rx_process+0xdc>
				switch (data.data_size) {
 8000da4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000da8:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000dac:	785b      	ldrb	r3, [r3, #1]
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	d023      	beq.n	8000dfa <comms_rx_process+0xb6>
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	dc64      	bgt.n	8000e80 <comms_rx_process+0x13c>
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d002      	beq.n	8000dc0 <comms_rx_process+0x7c>
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d00e      	beq.n	8000ddc <comms_rx_process+0x98>
				case 4:
					data.data[x].u32 =
							*((uint32_t*) (comms_rx_read_pointer + 3));
					break;
				default:
					return;
 8000dbe:	e05f      	b.n	8000e80 <comms_rx_process+0x13c>
					data.data[x].u8 = *(comms_rx_read_pointer + 3);
 8000dc0:	4b34      	ldr	r3, [pc, #208]	@ (8000e94 <comms_rx_process+0x150>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000dc8:	78d1      	ldrb	r1, [r2, #3]
 8000dca:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000dce:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	460a      	mov	r2, r1
 8000dd8:	711a      	strb	r2, [r3, #4]
					break;
 8000dda:	e01c      	b.n	8000e16 <comms_rx_process+0xd2>
					data.data[x].u16 =
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8000e94 <comms_rx_process+0x150>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000de4:	f8b2 1003 	ldrh.w	r1, [r2, #3]
 8000de8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000dec:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	460a      	mov	r2, r1
 8000df6:	809a      	strh	r2, [r3, #4]
					break;
 8000df8:	e00d      	b.n	8000e16 <comms_rx_process+0xd2>
					data.data[x].u32 =
 8000dfa:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <comms_rx_process+0x150>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000e02:	f8d2 2003 	ldr.w	r2, [r2, #3]
 8000e06:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8000e0a:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	440b      	add	r3, r1
 8000e12:	605a      	str	r2, [r3, #4]
					break;
 8000e14:	bf00      	nop
			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000e16:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000e20:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000e24:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	f897 2405 	ldrb.w	r2, [r7, #1029]	@ 0x405
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d3b8      	bcc.n	8000da4 <comms_rx_process+0x60>
				}
			}

			comms_data_handler(&data);
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff69 	bl	8000d0c <comms_data_handler>

			comms_rx_read_pointer = (comms_rx_read_pointer + 3
					+ (data.data_size * data.data_count));
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <comms_rx_process+0x150>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000e42:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000e46:	785b      	ldrb	r3, [r3, #1]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000e4e:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000e52:	789b      	ldrb	r3, [r3, #2]
 8000e54:	fb01 f303 	mul.w	r3, r1, r3
 8000e58:	3303      	adds	r3, #3
 8000e5a:	4413      	add	r3, r2
			comms_rx_read_pointer = (comms_rx_read_pointer + 3
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <comms_rx_process+0x150>)
 8000e5e:	6013      	str	r3, [r2, #0]
		for (; elements > 0; --elements) {
 8000e60:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000e64:	3b01      	subs	r3, #1
 8000e66:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406
 8000e6a:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f47f af7c 	bne.w	8000d6c <comms_rx_process+0x28>
		}
	}

	rx_status = COMMS_READY;
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <comms_rx_process+0x148>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e002      	b.n	8000e82 <comms_rx_process+0x13e>
		return;
 8000e7c:	bf00      	nop
 8000e7e:	e000      	b.n	8000e82 <comms_rx_process+0x13e>
					return;
 8000e80:	bf00      	nop
}
 8000e82:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000126f 	.word	0x2000126f
 8000e90:	20000e60 	.word	0x20000e60
 8000e94:	20001260 	.word	0x20001260

08000e98 <comms_lpuart_rx_callback>:


void comms_lpuart_rx_callback(UART_HandleTypeDef *huart) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	// FOR ELEMENT LOOP:
	//		load packet head
	//		load data based on that parameters
	static uint16_t elements = 0;

}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	// user defined __weak callback from stm32l4xx_hal_uart.c
	// uart loaded data
	if (huart == &hlpuart1) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ecc <HAL_UART_RxCpltCallback+0x20>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d102      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0x16>
		comms_lpuart_rx_callback(huart);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ffeb 	bl	8000e98 <comms_lpuart_rx_callback>
	}
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20003458 	.word	0x20003458

08000ed0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a0e      	ldr	r2, [pc, #56]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d10d      	bne.n	8000efc <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ee0:	2180      	movs	r1, #128	@ 0x80
 8000ee2:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ee4:	f002 fff8 	bl	8003ed8 <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ef0:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		comms_append_int32(1, 1, &periodical);
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff fdf0 	bl	8000adc <comms_append_int32>
	}

	if (htim == &htim3) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a08      	ldr	r2, [pc, #32]	@ (8000f20 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d103      	bne.n	8000f0c <HAL_TIM_PeriodElapsedCallback+0x3c>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000f04:	2180      	movs	r1, #128	@ 0x80
 8000f06:	4807      	ldr	r0, [pc, #28]	@ (8000f24 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f08:	f002 ffe6 	bl	8003ed8 <HAL_GPIO_TogglePin>
		}
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000340c 	.word	0x2000340c
 8000f18:	48000400 	.word	0x48000400
 8000f1c:	20001270 	.word	0x20001270
 8000f20:	20003374 	.word	0x20003374
 8000f24:	48000800 	.word	0x48000800

08000f28 <myDmaFunction>:

char testdata[10];

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8000f30:	4b07      	ldr	r3, [pc, #28]	@ (8000f50 <myDmaFunction+0x28>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f36:	4a07      	ldr	r2, [pc, #28]	@ (8000f54 <myDmaFunction+0x2c>)
 8000f38:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8000f3a:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <myDmaFunction+0x28>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f40:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <myDmaFunction+0x30>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	200033c0 	.word	0x200033c0
 8000f54:	2000127c 	.word	0x2000127c
 8000f58:	20001280 	.word	0x20001280

08000f5c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f68:	485a      	ldr	r0, [pc, #360]	@ (80010d4 <HAL_ADC_ConvCpltCallback+0x178>)
 8000f6a:	f002 ffb5 	bl	8003ed8 <HAL_GPIO_TogglePin>

    ++call_count;
 8000f6e:	4b5a      	ldr	r3, [pc, #360]	@ (80010d8 <HAL_ADC_ConvCpltCallback+0x17c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	4a58      	ldr	r2, [pc, #352]	@ (80010d8 <HAL_ADC_ConvCpltCallback+0x17c>)
 8000f76:	6013      	str	r3, [r2, #0]

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 8000f78:	4b58      	ldr	r3, [pc, #352]	@ (80010dc <HAL_ADC_ConvCpltCallback+0x180>)
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
    adcIn1 = 0.0f;
 8000f80:	4b57      	ldr	r3, [pc, #348]	@ (80010e0 <HAL_ADC_ConvCpltCallback+0x184>)
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 10; i++) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e027      	b.n	8000fde <HAL_ADC_ConvCpltCallback+0x82>
        adcValue += dma_data_buffer[i + 10]; // Použití druhé poloviny DMA bufferu
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	330a      	adds	r3, #10
 8000f92:	4a54      	ldr	r2, [pc, #336]	@ (80010e4 <HAL_ADC_ConvCpltCallback+0x188>)
 8000f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa0:	4b4e      	ldr	r3, [pc, #312]	@ (80010dc <HAL_ADC_ConvCpltCallback+0x180>)
 8000fa2:	edd3 7a00 	vldr	s15, [r3]
 8000fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000faa:	4b4c      	ldr	r3, [pc, #304]	@ (80010dc <HAL_ADC_ConvCpltCallback+0x180>)
 8000fac:	edc3 7a00 	vstr	s15, [r3]
        adcIn1 += dma_data_buffer[i + 1 + 10];
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	330b      	adds	r3, #11
 8000fb4:	4a4b      	ldr	r2, [pc, #300]	@ (80010e4 <HAL_ADC_ConvCpltCallback+0x188>)
 8000fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc2:	4b47      	ldr	r3, [pc, #284]	@ (80010e0 <HAL_ADC_ConvCpltCallback+0x184>)
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fcc:	4b44      	ldr	r3, [pc, #272]	@ (80010e0 <HAL_ADC_ConvCpltCallback+0x184>)
 8000fce:	edc3 7a00 	vstr	s15, [r3]
        i++;
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 10; i++) {
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2b09      	cmp	r3, #9
 8000fe2:	ddd4      	ble.n	8000f8e <HAL_ADC_ConvCpltCallback+0x32>
    }
    adcValue /= 50.0f;
 8000fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80010dc <HAL_ADC_ConvCpltCallback+0x180>)
 8000fe6:	ed93 7a00 	vldr	s14, [r3]
 8000fea:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80010e8 <HAL_ADC_ConvCpltCallback+0x18c>
 8000fee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80010dc <HAL_ADC_ConvCpltCallback+0x180>)
 8000ff4:	edc3 7a00 	vstr	s15, [r3]
    adcIn1 /= 50.0f;
 8000ff8:	4b39      	ldr	r3, [pc, #228]	@ (80010e0 <HAL_ADC_ConvCpltCallback+0x184>)
 8000ffa:	ed93 7a00 	vldr	s14, [r3]
 8000ffe:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80010e8 <HAL_ADC_ConvCpltCallback+0x18c>
 8001002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001006:	4b36      	ldr	r3, [pc, #216]	@ (80010e0 <HAL_ADC_ConvCpltCallback+0x184>)
 8001008:	edc3 7a00 	vstr	s15, [r3]

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 800100c:	4b33      	ldr	r3, [pc, #204]	@ (80010dc <HAL_ADC_ConvCpltCallback+0x180>)
 800100e:	ed93 7a00 	vldr	s14, [r3]
 8001012:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80010ec <HAL_ADC_ConvCpltCallback+0x190>
 8001016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80010f0 <HAL_ADC_ConvCpltCallback+0x194>
 800101e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001022:	edc7 7a04 	vstr	s15, [r7, #16]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 8001026:	4b33      	ldr	r3, [pc, #204]	@ (80010f4 <HAL_ADC_ConvCpltCallback+0x198>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001032:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80010ec <HAL_ADC_ConvCpltCallback+0x190>
 8001036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80010f0 <HAL_ADC_ConvCpltCallback+0x194>
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	edc7 7a03 	vstr	s15, [r7, #12]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 8001046:	4b2c      	ldr	r3, [pc, #176]	@ (80010f8 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001052:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80010ec <HAL_ADC_ConvCpltCallback+0x190>
 8001056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80010f0 <HAL_ADC_ConvCpltCallback+0x194>
 800105e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001062:	edc7 7a02 	vstr	s15, [r7, #8]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 8001066:	ed97 7a04 	vldr	s14, [r7, #16]
 800106a:	edd7 7a03 	vldr	s15, [r7, #12]
 800106e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001072:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80010fc <HAL_ADC_ConvCpltCallback+0x1a0>
 8001076:	ee67 7a87 	vmul.f32	s15, s15, s14
 800107a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800107e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001082:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001084:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;
    numOfCalling++;
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <HAL_ADC_ConvCpltCallback+0x1a8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	4a1d      	ldr	r2, [pc, #116]	@ (8001104 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001090:	6013      	str	r3, [r2, #0]

    // Odeslání teploty jako integer
    temperatureInt = (int)temperature;
 8001092:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109c:	ee17 2a90 	vmov	r2, s15
 80010a0:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <HAL_ADC_ConvCpltCallback+0x1ac>)
 80010a2:	601a      	str	r2, [r3, #0]

    adcIn1Int = (int)adcIn1;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <HAL_ADC_ConvCpltCallback+0x184>)
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ae:	ee17 2a90 	vmov	r2, s15
 80010b2:	4b16      	ldr	r3, [pc, #88]	@ (800110c <HAL_ADC_ConvCpltCallback+0x1b0>)
 80010b4:	601a      	str	r2, [r3, #0]

    full_adc++;
 80010b6:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <HAL_ADC_ConvCpltCallback+0x1b4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a14      	ldr	r2, [pc, #80]	@ (8001110 <HAL_ADC_ConvCpltCallback+0x1b4>)
 80010be:	6013      	str	r3, [r2, #0]

    //comms_append_int32(2, 1, &temperatureInt);
    comms_append_int32(23, 1, &adcIn1Int);
 80010c0:	4a12      	ldr	r2, [pc, #72]	@ (800110c <HAL_ADC_ConvCpltCallback+0x1b0>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	2017      	movs	r0, #23
 80010c6:	f7ff fd09 	bl	8000adc <comms_append_int32>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	48000400 	.word	0x48000400
 80010d8:	2000336c 	.word	0x2000336c
 80010dc:	20003354 	.word	0x20003354
 80010e0:	2000335c 	.word	0x2000335c
 80010e4:	200031c4 	.word	0x200031c4
 80010e8:	42480000 	.word	0x42480000
 80010ec:	45800000 	.word	0x45800000
 80010f0:	40533333 	.word	0x40533333
 80010f4:	1fff75a8 	.word	0x1fff75a8
 80010f8:	1fff75ca 	.word	0x1fff75ca
 80010fc:	42a00000 	.word	0x42a00000
 8001100:	20003358 	.word	0x20003358
 8001104:	20003360 	.word	0x20003360
 8001108:	20003364 	.word	0x20003364
 800110c:	20003368 	.word	0x20003368
 8001110:	20003370 	.word	0x20003370

08001114 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
//		adcValue = adcValue + dma_data_buffer[i];
//	}
//	adcValue = adcValue / 100;
//	adcValueInt = (int) adcValue;

}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112e:	f000 fc2e 	bl	800198e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001132:	f000 f885 	bl	8001240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001136:	f7ff fb4b 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800113a:	f7ff faed 	bl	8000718 <MX_DMA_Init>
  MX_TIM6_Init();
 800113e:	f000 fa29 	bl	8001594 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8001142:	f00b fdf5 	bl	800cd30 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8001146:	f000 f9d7 	bl	80014f8 <MX_TIM5_Init>
  MX_ADC1_Init();
 800114a:	f7ff f9cf 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 800114e:	f000 f985 	bl	800145c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001152:	f000 faf9 	bl	8001748 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8001156:	f000 faab 	bl	80016b0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2180      	movs	r1, #128	@ 0x80
 800115e:	482b      	ldr	r0, [pc, #172]	@ (800120c <main+0xe4>)
 8001160:	f002 fea2 	bl	8003ea8 <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 8001164:	482a      	ldr	r0, [pc, #168]	@ (8001210 <main+0xe8>)
 8001166:	f005 fe25 	bl	8006db4 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 800116a:	482a      	ldr	r0, [pc, #168]	@ (8001214 <main+0xec>)
 800116c:	f005 fdba 	bl	8006ce4 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	e00d      	b.n	8001192 <main+0x6a>
		dma[i] = i;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001180:	4a25      	ldr	r2, [pc, #148]	@ (8001218 <main+0xf0>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3301      	adds	r3, #1
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001198:	dbed      	blt.n	8001176 <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 800119a:	4a20      	ldr	r2, [pc, #128]	@ (800121c <main+0xf4>)
 800119c:	2100      	movs	r1, #0
 800119e:	4820      	ldr	r0, [pc, #128]	@ (8001220 <main+0xf8>)
 80011a0:	f002 fc08 	bl	80039b4 <HAL_DMA_RegisterCallback>
 80011a4:	4603      	mov	r3, r0
 80011a6:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <main+0xec>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <main+0xfc>)
 80011b0:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 80011b2:	4919      	ldr	r1, [pc, #100]	@ (8001218 <main+0xf0>)
 80011b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001228 <main+0x100>)
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	4819      	ldr	r0, [pc, #100]	@ (8001220 <main+0xf8>)
 80011bc:	f002 fa14 	bl	80035e8 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 80011c0:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <main+0xec>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c6:	4a19      	ldr	r2, [pc, #100]	@ (800122c <main+0x104>)
 80011c8:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <main+0xec>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d0:	4a17      	ldr	r2, [pc, #92]	@ (8001230 <main+0x108>)
 80011d2:	6013      	str	r3, [r2, #0]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80011d4:	217f      	movs	r1, #127	@ 0x7f
 80011d6:	4817      	ldr	r0, [pc, #92]	@ (8001234 <main+0x10c>)
 80011d8:	f001 ffba 	bl	8003150 <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 80011dc:	2032      	movs	r0, #50	@ 0x32
 80011de:	f000 fc4b 	bl	8001a78 <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 20);
 80011e2:	2214      	movs	r2, #20
 80011e4:	4914      	ldr	r1, [pc, #80]	@ (8001238 <main+0x110>)
 80011e6:	4813      	ldr	r0, [pc, #76]	@ (8001234 <main+0x10c>)
 80011e8:	f000 ffc4 	bl	8002174 <HAL_ADC_Start_DMA>
 80011ec:	4603      	mov	r3, r0
 80011ee:	70bb      	strb	r3, [r7, #2]

	HAL_TIM_Base_Start_IT(&htim3);
 80011f0:	4812      	ldr	r0, [pc, #72]	@ (800123c <main+0x114>)
 80011f2:	f005 fddf 	bl	8006db4 <HAL_TIM_Base_Start_IT>

	comms_init();
 80011f6:	f7ff fc13 	bl	8000a20 <comms_init>
	comms_uart_init();
 80011fa:	f7ff fbff 	bl	80009fc <comms_uart_init>
//	    comms_append_int32(2, 1, &temperatureInt);

//	    comms_send();

		//load_CPU();
		comms_send();
 80011fe:	f7ff fce5 	bl	8000bcc <comms_send>
		comms_rx_process();
 8001202:	f7ff fd9f 	bl	8000d44 <comms_rx_process>
		comms_send();
 8001206:	bf00      	nop
 8001208:	e7f9      	b.n	80011fe <main+0xd6>
 800120a:	bf00      	nop
 800120c:	48000800 	.word	0x48000800
 8001210:	2000340c 	.word	0x2000340c
 8001214:	200033c0 	.word	0x200033c0
 8001218:	20001284 	.word	0x20001284
 800121c:	08000f29 	.word	0x08000f29
 8001220:	200001f0 	.word	0x200001f0
 8001224:	20001274 	.word	0x20001274
 8001228:	20002224 	.word	0x20002224
 800122c:	20001280 	.word	0x20001280
 8001230:	20001278 	.word	0x20001278
 8001234:	20000128 	.word	0x20000128
 8001238:	200031c4 	.word	0x200031c4
 800123c:	20003374 	.word	0x20003374

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b096      	sub	sp, #88	@ 0x58
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	2244      	movs	r2, #68	@ 0x44
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f00c fbd2 	bl	800d9f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001262:	2000      	movs	r0, #0
 8001264:	f004 f832 	bl	80052cc <HAL_PWREx_ControlVoltageScaling>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800126e:	f000 f83a 	bl	80012e6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001272:	2322      	movs	r3, #34	@ 0x22
 8001274:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001276:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800127a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001280:	2340      	movs	r3, #64	@ 0x40
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
 8001286:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001288:	2302      	movs	r3, #2
 800128a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800128c:	2302      	movs	r3, #2
 800128e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001290:	231e      	movs	r3, #30
 8001292:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001294:	2302      	movs	r3, #2
 8001296:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001298:	2302      	movs	r3, #2
 800129a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800129c:	2302      	movs	r3, #2
 800129e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4618      	mov	r0, r3
 80012a6:	f004 f8d5 	bl	8005454 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80012b0:	f000 f819 	bl	80012e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b8:	2303      	movs	r3, #3
 80012ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	2105      	movs	r1, #5
 80012ce:	4618      	mov	r0, r3
 80012d0:	f004 fcda 	bl	8005c88 <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012da:	f000 f804 	bl	80012e6 <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	3758      	adds	r7, #88	@ 0x58
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012ea:	b672      	cpsid	i
}
 80012ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012ee:	bf00      	nop
 80012f0:	e7fd      	b.n	80012ee <Error_Handler+0x8>
	...

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <HAL_MspInit+0x44>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001338 <HAL_MspInit+0x44>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6613      	str	r3, [r2, #96]	@ 0x60
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <HAL_MspInit+0x44>)
 8001308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_MspInit+0x44>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <HAL_MspInit+0x44>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131c:	6593      	str	r3, [r2, #88]	@ 0x58
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_MspInit+0x44>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <NMI_Handler+0x4>

08001344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <MemManage_Handler+0x4>

08001354 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <UsageFault_Handler+0x4>

08001364 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001392:	f000 fb51 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <DMA1_Channel1_IRQHandler+0x10>)
 80013a2:	f002 fa57 	bl	8003854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000190 	.word	0x20000190

080013b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 80013b4:	4802      	ldr	r0, [pc, #8]	@ (80013c0 <DMA1_Channel2_IRQHandler+0x10>)
 80013b6:	f002 fa4d 	bl	8003854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200001f0 	.word	0x200001f0

080013c4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <ADC1_IRQHandler+0x10>)
 80013ca:	f000 ff57 	bl	800227c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000128 	.word	0x20000128

080013d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013dc:	4802      	ldr	r0, [pc, #8]	@ (80013e8 <TIM3_IRQHandler+0x10>)
 80013de:	f005 fd59 	bl	8006e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20003374 	.word	0x20003374

080013ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013f4:	f002 fd8a 	bl	8003f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <TIM6_DAC_IRQHandler+0x10>)
 8001402:	f005 fd47 	bl	8006e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000340c 	.word	0x2000340c

08001410 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <OTG_FS_IRQHandler+0x10>)
 8001416:	f002 fee4 	bl	80041e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20004a64 	.word	0x20004a64

08001424 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <LPUART1_IRQHandler+0x10>)
 800142a:	f006 fa2b 	bl	8007884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20003458 	.word	0x20003458

08001438 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <SystemInit+0x20>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <SystemInit+0x20>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800147a:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <MX_TIM3_Init+0x94>)
 800147c:	4a1d      	ldr	r2, [pc, #116]	@ (80014f4 <MX_TIM3_Init+0x98>)
 800147e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <MX_TIM3_Init+0x94>)
 8001482:	22c7      	movs	r2, #199	@ 0xc7
 8001484:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <MX_TIM3_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <MX_TIM3_Init+0x94>)
 800148e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001492:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <MX_TIM3_Init+0x94>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <MX_TIM3_Init+0x94>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014a0:	4813      	ldr	r0, [pc, #76]	@ (80014f0 <MX_TIM3_Init+0x94>)
 80014a2:	f005 fbc7 	bl	8006c34 <HAL_TIM_Base_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80014ac:	f7ff ff1b 	bl	80012e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	4619      	mov	r1, r3
 80014bc:	480c      	ldr	r0, [pc, #48]	@ (80014f0 <MX_TIM3_Init+0x94>)
 80014be:	f005 fdeb 	bl	8007098 <HAL_TIM_ConfigClockSource>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014c8:	f7ff ff0d 	bl	80012e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014cc:	2320      	movs	r3, #32
 80014ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_TIM3_Init+0x94>)
 80014da:	f006 f803 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014e4:	f7ff feff 	bl	80012e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20003374 	.word	0x20003374
 80014f4:	40000400 	.word	0x40000400

080014f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001516:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <MX_TIM5_Init+0x94>)
 8001518:	4a1d      	ldr	r2, [pc, #116]	@ (8001590 <MX_TIM5_Init+0x98>)
 800151a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <MX_TIM5_Init+0x94>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <MX_TIM5_Init+0x94>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <MX_TIM5_Init+0x94>)
 800152a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800152e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001530:	4b16      	ldr	r3, [pc, #88]	@ (800158c <MX_TIM5_Init+0x94>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <MX_TIM5_Init+0x94>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800153c:	4813      	ldr	r0, [pc, #76]	@ (800158c <MX_TIM5_Init+0x94>)
 800153e:	f005 fb79 	bl	8006c34 <HAL_TIM_Base_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001548:	f7ff fecd 	bl	80012e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001550:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4619      	mov	r1, r3
 8001558:	480c      	ldr	r0, [pc, #48]	@ (800158c <MX_TIM5_Init+0x94>)
 800155a:	f005 fd9d 	bl	8007098 <HAL_TIM_ConfigClockSource>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001564:	f7ff febf 	bl	80012e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_TIM5_Init+0x94>)
 8001576:	f005 ffb5 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001580:	f7ff feb1 	bl	80012e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200033c0 	.word	0x200033c0
 8001590:	40000c00 	.word	0x40000c00

08001594 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <MX_TIM6_Init+0x68>)
 80015a6:	4a16      	ldr	r2, [pc, #88]	@ (8001600 <MX_TIM6_Init+0x6c>)
 80015a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <MX_TIM6_Init+0x68>)
 80015ac:	f242 7210 	movw	r2, #10000	@ 0x2710
 80015b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <MX_TIM6_Init+0x68>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 80015b8:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <MX_TIM6_Init+0x68>)
 80015ba:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80015be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <MX_TIM6_Init+0x68>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015c6:	480d      	ldr	r0, [pc, #52]	@ (80015fc <MX_TIM6_Init+0x68>)
 80015c8:	f005 fb34 	bl	8006c34 <HAL_TIM_Base_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80015d2:	f7ff fe88 	bl	80012e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015d6:	2320      	movs	r3, #32
 80015d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4806      	ldr	r0, [pc, #24]	@ (80015fc <MX_TIM6_Init+0x68>)
 80015e4:	f005 ff7e 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80015ee:	f7ff fe7a 	bl	80012e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000340c 	.word	0x2000340c
 8001600:	40001000 	.word	0x40001000

08001604 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a23      	ldr	r2, [pc, #140]	@ (80016a0 <HAL_TIM_Base_MspInit+0x9c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d114      	bne.n	8001640 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001616:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	4a22      	ldr	r2, [pc, #136]	@ (80016a4 <HAL_TIM_Base_MspInit+0xa0>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6593      	str	r3, [r2, #88]	@ 0x58
 8001622:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	201d      	movs	r0, #29
 8001634:	f001 fef9 	bl	800342a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001638:	201d      	movs	r0, #29
 800163a:	f001 ff12 	bl	8003462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800163e:	e02a      	b.n	8001696 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a18      	ldr	r2, [pc, #96]	@ (80016a8 <HAL_TIM_Base_MspInit+0xa4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10c      	bne.n	8001664 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800164a:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <HAL_TIM_Base_MspInit+0xa0>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164e:	4a15      	ldr	r2, [pc, #84]	@ (80016a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	6593      	str	r3, [r2, #88]	@ 0x58
 8001656:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
}
 8001662:	e018      	b.n	8001696 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a10      	ldr	r2, [pc, #64]	@ (80016ac <HAL_TIM_Base_MspInit+0xa8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d113      	bne.n	8001696 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800166e:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001672:	4a0c      	ldr	r2, [pc, #48]	@ (80016a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001674:	f043 0310 	orr.w	r3, r3, #16
 8001678:	6593      	str	r3, [r2, #88]	@ 0x58
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_TIM_Base_MspInit+0xa0>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2036      	movs	r0, #54	@ 0x36
 800168c:	f001 fecd 	bl	800342a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001690:	2036      	movs	r0, #54	@ 0x36
 8001692:	f001 fee6 	bl	8003462 <HAL_NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40000400 	.word	0x40000400
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40000c00 	.word	0x40000c00
 80016ac:	40001000 	.word	0x40001000

080016b0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016b4:	4b22      	ldr	r3, [pc, #136]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 80016b6:	4a23      	ldr	r2, [pc, #140]	@ (8001744 <MX_LPUART1_UART_Init+0x94>)
 80016b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80016ba:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 80016bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e0:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016e6:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ec:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80016f2:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016f8:	4811      	ldr	r0, [pc, #68]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 80016fa:	f005 ff99 	bl	8007630 <HAL_UART_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001704:	f7ff fdef 	bl	80012e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001708:	2100      	movs	r1, #0
 800170a:	480d      	ldr	r0, [pc, #52]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 800170c:	f007 fff3 	bl	80096f6 <HAL_UARTEx_SetTxFifoThreshold>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001716:	f7ff fde6 	bl	80012e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171a:	2100      	movs	r1, #0
 800171c:	4808      	ldr	r0, [pc, #32]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 800171e:	f008 f828 	bl	8009772 <HAL_UARTEx_SetRxFifoThreshold>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001728:	f7ff fddd 	bl	80012e6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800172c:	4804      	ldr	r0, [pc, #16]	@ (8001740 <MX_LPUART1_UART_Init+0x90>)
 800172e:	f007 ffa9 	bl	8009684 <HAL_UARTEx_DisableFifoMode>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001738:	f7ff fdd5 	bl	80012e6 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20003458 	.word	0x20003458
 8001744:	40008000 	.word	0x40008000

08001748 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800174c:	4b22      	ldr	r3, [pc, #136]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 800174e:	4a23      	ldr	r2, [pc, #140]	@ (80017dc <MX_USART3_UART_Init+0x94>)
 8001750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001752:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 8001754:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001758:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001766:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800177e:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001784:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800178a:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001790:	4811      	ldr	r0, [pc, #68]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 8001792:	f005 ff4d 	bl	8007630 <HAL_UART_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800179c:	f7ff fda3 	bl	80012e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a0:	2100      	movs	r1, #0
 80017a2:	480d      	ldr	r0, [pc, #52]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 80017a4:	f007 ffa7 	bl	80096f6 <HAL_UARTEx_SetTxFifoThreshold>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017ae:	f7ff fd9a 	bl	80012e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4808      	ldr	r0, [pc, #32]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 80017b6:	f007 ffdc 	bl	8009772 <HAL_UARTEx_SetRxFifoThreshold>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017c0:	f7ff fd91 	bl	80012e6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	@ (80017d8 <MX_USART3_UART_Init+0x90>)
 80017c6:	f007 ff5d 	bl	8009684 <HAL_UARTEx_DisableFifoMode>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017d0:	f7ff fd89 	bl	80012e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200034ec 	.word	0x200034ec
 80017dc:	40004800 	.word	0x40004800

080017e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0b0      	sub	sp, #192	@ 0xc0
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	2294      	movs	r2, #148	@ 0x94
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f00c f8f9 	bl	800d9f8 <memset>
  if(uartHandle->Instance==LPUART1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a47      	ldr	r2, [pc, #284]	@ (8001928 <HAL_UART_MspInit+0x148>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d146      	bne.n	800189e <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001810:	2320      	movs	r3, #32
 8001812:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001814:	2300      	movs	r3, #0
 8001816:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001818:	f107 0318 	add.w	r3, r7, #24
 800181c:	4618      	mov	r0, r3
 800181e:	f004 fcf1 	bl	8006204 <HAL_RCCEx_PeriphCLKConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001828:	f7ff fd5d 	bl	80012e6 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800182c:	4b3f      	ldr	r3, [pc, #252]	@ (800192c <HAL_UART_MspInit+0x14c>)
 800182e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001830:	4a3e      	ldr	r2, [pc, #248]	@ (800192c <HAL_UART_MspInit+0x14c>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001838:	4b3c      	ldr	r3, [pc, #240]	@ (800192c <HAL_UART_MspInit+0x14c>)
 800183a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001844:	4b39      	ldr	r3, [pc, #228]	@ (800192c <HAL_UART_MspInit+0x14c>)
 8001846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001848:	4a38      	ldr	r2, [pc, #224]	@ (800192c <HAL_UART_MspInit+0x14c>)
 800184a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800184e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001850:	4b36      	ldr	r3, [pc, #216]	@ (800192c <HAL_UART_MspInit+0x14c>)
 8001852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 800185c:	f003 fdea 	bl	8005434 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001860:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800187a:	2308      	movs	r3, #8
 800187c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001880:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001884:	4619      	mov	r1, r3
 8001886:	482a      	ldr	r0, [pc, #168]	@ (8001930 <HAL_UART_MspInit+0x150>)
 8001888:	f002 f97c 	bl	8003b84 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	2046      	movs	r0, #70	@ 0x46
 8001892:	f001 fdca 	bl	800342a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001896:	2046      	movs	r0, #70	@ 0x46
 8001898:	f001 fde3 	bl	8003462 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800189c:	e040      	b.n	8001920 <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART3)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a24      	ldr	r2, [pc, #144]	@ (8001934 <HAL_UART_MspInit+0x154>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d13b      	bne.n	8001920 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018a8:	2304      	movs	r3, #4
 80018aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b0:	f107 0318 	add.w	r3, r7, #24
 80018b4:	4618      	mov	r0, r3
 80018b6:	f004 fca5 	bl	8006204 <HAL_RCCEx_PeriphCLKConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 80018c0:	f7ff fd11 	bl	80012e6 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018c4:	4b19      	ldr	r3, [pc, #100]	@ (800192c <HAL_UART_MspInit+0x14c>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c8:	4a18      	ldr	r2, [pc, #96]	@ (800192c <HAL_UART_MspInit+0x14c>)
 80018ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d0:	4b16      	ldr	r3, [pc, #88]	@ (800192c <HAL_UART_MspInit+0x14c>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <HAL_UART_MspInit+0x14c>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e0:	4a12      	ldr	r2, [pc, #72]	@ (800192c <HAL_UART_MspInit+0x14c>)
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_UART_MspInit+0x14c>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800190e:	2307      	movs	r3, #7
 8001910:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001914:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001918:	4619      	mov	r1, r3
 800191a:	4807      	ldr	r0, [pc, #28]	@ (8001938 <HAL_UART_MspInit+0x158>)
 800191c:	f002 f932 	bl	8003b84 <HAL_GPIO_Init>
}
 8001920:	bf00      	nop
 8001922:	37c0      	adds	r7, #192	@ 0xc0
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40008000 	.word	0x40008000
 800192c:	40021000 	.word	0x40021000
 8001930:	48001800 	.word	0x48001800
 8001934:	40004800 	.word	0x40004800
 8001938:	48000c00 	.word	0x48000c00

0800193c <Reset_Handler>:
 800193c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001974 <LoopForever+0x2>
 8001940:	f7ff fd7a 	bl	8001438 <SystemInit>
 8001944:	480c      	ldr	r0, [pc, #48]	@ (8001978 <LoopForever+0x6>)
 8001946:	490d      	ldr	r1, [pc, #52]	@ (800197c <LoopForever+0xa>)
 8001948:	4a0d      	ldr	r2, [pc, #52]	@ (8001980 <LoopForever+0xe>)
 800194a:	2300      	movs	r3, #0
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:
 800194e:	58d4      	ldr	r4, [r2, r3]
 8001950:	50c4      	str	r4, [r0, r3]
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:
 8001954:	18c4      	adds	r4, r0, r3
 8001956:	428c      	cmp	r4, r1
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
 800195a:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <LoopForever+0x12>)
 800195c:	4c0a      	ldr	r4, [pc, #40]	@ (8001988 <LoopForever+0x16>)
 800195e:	2300      	movs	r3, #0
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:
 8001966:	42a2      	cmp	r2, r4
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>
 800196a:	f00c f84d 	bl	800da08 <__libc_init_array>
 800196e:	f7ff fbdb 	bl	8001128 <main>

08001972 <LoopForever>:
 8001972:	e7fe      	b.n	8001972 <LoopForever>
 8001974:	200a0000 	.word	0x200a0000
 8001978:	20000000 	.word	0x20000000
 800197c:	2000010c 	.word	0x2000010c
 8001980:	0800db4c 	.word	0x0800db4c
 8001984:	2000010c 	.word	0x2000010c
 8001988:	20005190 	.word	0x20005190

0800198c <CAN1_RX0_IRQHandler>:
 800198c:	e7fe      	b.n	800198c <CAN1_RX0_IRQHandler>

0800198e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001998:	2003      	movs	r0, #3
 800199a:	f001 fd3b 	bl	8003414 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800199e:	2000      	movs	r0, #0
 80019a0:	f000 f80e 	bl	80019c0 <HAL_InitTick>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	71fb      	strb	r3, [r7, #7]
 80019ae:	e001      	b.n	80019b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019b0:	f7ff fca0 	bl	80012f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019b4:	79fb      	ldrb	r3, [r7, #7]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019cc:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <HAL_InitTick+0x6c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d023      	beq.n	8001a1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019d4:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <HAL_InitTick+0x70>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <HAL_InitTick+0x6c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f001 fd47 	bl	800347e <HAL_SYSTICK_Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10f      	bne.n	8001a16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d809      	bhi.n	8001a10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a04:	f001 fd11 	bl	800342a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a08:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <HAL_InitTick+0x74>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e007      	b.n	8001a20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	e004      	b.n	8001a20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	73fb      	strb	r3, [r7, #15]
 8001a1a:	e001      	b.n	8001a20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <HAL_IncTick+0x20>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_IncTick+0x24>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <HAL_IncTick+0x24>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	20003580 	.word	0x20003580

08001a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20003580 	.word	0x20003580

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff ffee 	bl	8001a60 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a90:	d005      	beq.n	8001a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <HAL_Delay+0x44>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9e:	bf00      	nop
 8001aa0:	f7ff ffde 	bl	8001a60 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d8f7      	bhi.n	8001aa0 <HAL_Delay+0x28>
  {
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000008 	.word	0x20000008

08001ac0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	609a      	str	r2, [r3, #8]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	3360      	adds	r3, #96	@ 0x60
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <LL_ADC_SetOffset+0x44>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	4313      	orrs	r3, r2
 8001b58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b60:	bf00      	nop
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	03fff000 	.word	0x03fff000

08001b70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3360      	adds	r3, #96	@ 0x60
 8001b7e:	461a      	mov	r2, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3360      	adds	r3, #96	@ 0x60
 8001bac:	461a      	mov	r2, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bc6:	bf00      	nop
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	615a      	str	r2, [r3, #20]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b087      	sub	sp, #28
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3330      	adds	r3, #48	@ 0x30
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	4413      	add	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	211f      	movs	r1, #31
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	401a      	ands	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0e9b      	lsrs	r3, r3, #26
 8001c56:	f003 011f 	and.w	r1, r3, #31
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	431a      	orrs	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c6a:	bf00      	nop
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3314      	adds	r3, #20
 8001cac:	461a      	mov	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	0e5b      	lsrs	r3, r3, #25
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	4413      	add	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	0d1b      	lsrs	r3, r3, #20
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	2107      	movs	r1, #7
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	0d1b      	lsrs	r3, r3, #20
 8001cd6:	f003 031f 	and.w	r3, r3, #31
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ce6:	bf00      	nop
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	401a      	ands	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0318 	and.w	r3, r3, #24
 8001d16:	4908      	ldr	r1, [pc, #32]	@ (8001d38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d18:	40d9      	lsrs	r1, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	400b      	ands	r3, r1
 8001d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d22:	431a      	orrs	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	0007ffff 	.word	0x0007ffff

08001d3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6093      	str	r3, [r2, #8]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d74:	d101      	bne.n	8001d7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001dc4:	d101      	bne.n	8001dca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001de8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e14:	f043 0202 	orr.w	r2, r3, #2
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <LL_ADC_IsEnabled+0x18>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <LL_ADC_IsEnabled+0x1a>
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d101      	bne.n	8001e66 <LL_ADC_IsDisableOngoing+0x18>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <LL_ADC_IsDisableOngoing+0x1a>
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e88:	f043 0204 	orr.w	r2, r3, #4
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d101      	bne.n	8001eb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d101      	bne.n	8001eda <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e129      	b.n	8002156 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7fe fb61 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff19 	bl	8001d60 <LL_ADC_IsDeepPowerDownEnabled>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff feff 	bl	8001d3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff34 	bl	8001db0 <LL_ADC_IsInternalRegulatorEnabled>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d115      	bne.n	8001f7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff18 	bl	8001d88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f58:	4b81      	ldr	r3, [pc, #516]	@ (8002160 <HAL_ADC_Init+0x278>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	4a81      	ldr	r2, [pc, #516]	@ (8002164 <HAL_ADC_Init+0x27c>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	3301      	adds	r3, #1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f6c:	e002      	b.n	8001f74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f9      	bne.n	8001f6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff16 	bl	8001db0 <LL_ADC_IsInternalRegulatorEnabled>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10d      	bne.n	8001fa6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8e:	f043 0210 	orr.w	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff76 	bl	8001e9c <LL_ADC_REG_IsConversionOngoing>
 8001fb0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f040 80c2 	bne.w	8002144 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 80be 	bne.w	8002144 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fcc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001fd0:	f043 0202 	orr.w	r2, r3, #2
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff23 	bl	8001e28 <LL_ADC_IsEnabled>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10b      	bne.n	8002000 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fe8:	485f      	ldr	r0, [pc, #380]	@ (8002168 <HAL_ADC_Init+0x280>)
 8001fea:	f7ff ff1d 	bl	8001e28 <LL_ADC_IsEnabled>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	485c      	ldr	r0, [pc, #368]	@ (800216c <HAL_ADC_Init+0x284>)
 8001ffc:	f7ff fd60 	bl	8001ac0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7e5b      	ldrb	r3, [r3, #25]
 8002004:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800200a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002010:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002016:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800201e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d106      	bne.n	800203c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002032:	3b01      	subs	r3, #1
 8002034:	045b      	lsls	r3, r3, #17
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002048:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	4b44      	ldr	r3, [pc, #272]	@ (8002170 <HAL_ADC_Init+0x288>)
 8002060:	4013      	ands	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	69b9      	ldr	r1, [r7, #24]
 8002068:	430b      	orrs	r3, r1
 800206a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff26 	bl	8001ec2 <LL_ADC_INJ_IsConversionOngoing>
 8002076:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d140      	bne.n	8002100 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d13d      	bne.n	8002100 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7e1b      	ldrb	r3, [r3, #24]
 800208c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800208e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002096:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020a6:	f023 0306 	bic.w	r3, r3, #6
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	69b9      	ldr	r1, [r7, #24]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d118      	bne.n	80020f0 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80020c8:	f023 0304 	bic.w	r3, r3, #4
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020d4:	4311      	orrs	r1, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020e0:	430a      	orrs	r2, r1
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
 80020ec:	611a      	str	r2, [r3, #16]
 80020ee:	e007      	b.n	8002100 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0201 	bic.w	r2, r2, #1
 80020fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d10c      	bne.n	8002122 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	f023 010f 	bic.w	r1, r3, #15
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002120:	e007      	b.n	8002132 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 020f 	bic.w	r2, r2, #15
 8002130:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002136:	f023 0303 	bic.w	r3, r3, #3
 800213a:	f043 0201 	orr.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	659a      	str	r2, [r3, #88]	@ 0x58
 8002142:	e007      	b.n	8002154 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002148:	f043 0210 	orr.w	r2, r3, #16
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002154:	7ffb      	ldrb	r3, [r7, #31]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000000 	.word	0x20000000
 8002164:	053e2d63 	.word	0x053e2d63
 8002168:	50040000 	.word	0x50040000
 800216c:	50040300 	.word	0x50040300
 8002170:	fff0c007 	.word	0xfff0c007

08002174 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fe89 	bl	8001e9c <LL_ADC_REG_IsConversionOngoing>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d167      	bne.n	8002260 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_ADC_Start_DMA+0x2a>
 800219a:	2302      	movs	r3, #2
 800219c:	e063      	b.n	8002266 <HAL_ADC_Start_DMA+0xf2>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fe2c 	bl	8002e04 <ADC_Enable>
 80021ac:	4603      	mov	r3, r0
 80021ae:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d14f      	bne.n	8002256 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d006      	beq.n	80021e4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021da:	f023 0206 	bic.w	r2, r3, #6
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021e2:	e002      	b.n	80021ea <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ee:	4a20      	ldr	r2, [pc, #128]	@ (8002270 <HAL_ADC_Start_DMA+0xfc>)
 80021f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002274 <HAL_ADC_Start_DMA+0x100>)
 80021f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002278 <HAL_ADC_Start_DMA+0x104>)
 8002200:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	221c      	movs	r2, #28
 8002208:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0210 	orr.w	r2, r2, #16
 8002220:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3340      	adds	r3, #64	@ 0x40
 800223c:	4619      	mov	r1, r3
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f001 f9d1 	bl	80035e8 <HAL_DMA_Start_IT>
 8002246:	4603      	mov	r3, r0
 8002248:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fe10 	bl	8001e74 <LL_ADC_REG_StartConversion>
 8002254:	e006      	b.n	8002264 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800225e:	e001      	b.n	8002264 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002260:	2302      	movs	r3, #2
 8002262:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002264:	7dfb      	ldrb	r3, [r7, #23]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	08002fcf 	.word	0x08002fcf
 8002274:	080030a7 	.word	0x080030a7
 8002278:	080030c3 	.word	0x080030c3

0800227c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d017      	beq.n	80022d2 <HAL_ADC_IRQHandler+0x56>
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d012      	beq.n	80022d2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022bc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 ffcb 	bl	8003260 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2202      	movs	r2, #2
 80022d0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d004      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x6a>
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d05e      	beq.n	80023ae <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d059      	beq.n	80023ae <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b00      	cmp	r3, #0
 8002304:	d105      	bne.n	8002312 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fc6e 	bl	8001bf8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d03e      	beq.n	80023a0 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d135      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b08      	cmp	r3, #8
 8002340:	d12e      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fda8 	bl	8001e9c <LL_ADC_REG_IsConversionOngoing>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11a      	bne.n	8002388 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 020c 	bic.w	r2, r2, #12
 8002360:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002366:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d112      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	659a      	str	r2, [r3, #88]	@ 0x58
 8002386:	e00b      	b.n	80023a0 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238c:	f043 0210 	orr.w	r2, r3, #16
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7fe fddb 	bl	8000f5c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	220c      	movs	r2, #12
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <HAL_ADC_IRQHandler+0x146>
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d072      	beq.n	80024b2 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d06d      	beq.n	80024b2 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d105      	bne.n	80023ee <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fc3f 	bl	8001c76 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80023f8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fbfa 	bl	8001bf8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002404:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d047      	beq.n	80024a4 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <HAL_ADC_IRQHandler+0x1b2>
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d03f      	beq.n	80024a4 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800242a:	2b00      	cmp	r3, #0
 800242c:	d13a      	bne.n	80024a4 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002438:	2b40      	cmp	r3, #64	@ 0x40
 800243a:	d133      	bne.n	80024a4 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d12e      	bne.n	80024a4 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fd39 	bl	8001ec2 <LL_ADC_INJ_IsConversionOngoing>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11a      	bne.n	800248c <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002464:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247a:	2b00      	cmp	r3, #0
 800247c:	d112      	bne.n	80024a4 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	659a      	str	r2, [r3, #88]	@ 0x58
 800248a:	e00b      	b.n	80024a4 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002490:	f043 0210 	orr.w	r2, r3, #16
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 feb3 	bl	8003210 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2260      	movs	r2, #96	@ 0x60
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d011      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x264>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00c      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f886 	bl	80025e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2280      	movs	r2, #128	@ 0x80
 80024de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d012      	beq.n	8002510 <HAL_ADC_IRQHandler+0x294>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00d      	beq.n	8002510 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fe99 	bl	8003238 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800250e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002516:	2b00      	cmp	r3, #0
 8002518:	d012      	beq.n	8002540 <HAL_ADC_IRQHandler+0x2c4>
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00d      	beq.n	8002540 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fe8b 	bl	800324c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	d02a      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x324>
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	d025      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800255c:	2301      	movs	r3, #1
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	e008      	b.n	8002574 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002570:	2301      	movs	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d10e      	bne.n	8002598 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258a:	f043 0202 	orr.w	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f830 	bl	80025f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2210      	movs	r2, #16
 800259e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d018      	beq.n	80025dc <HAL_ADC_IRQHandler+0x360>
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d013      	beq.n	80025dc <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c4:	f043 0208 	orr.w	r2, r3, #8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025d4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fe24 	bl	8003224 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80025dc:	bf00      	nop
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b0b6      	sub	sp, #216	@ 0xd8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x22>
 800262a:	2302      	movs	r3, #2
 800262c:	e3d5      	b.n	8002dda <HAL_ADC_ConfigChannel+0x7ce>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fc2e 	bl	8001e9c <LL_ADC_REG_IsConversionOngoing>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 83ba 	bne.w	8002dbc <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b05      	cmp	r3, #5
 8002656:	d824      	bhi.n	80026a2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	3b02      	subs	r3, #2
 800265e:	2b03      	cmp	r3, #3
 8002660:	d81b      	bhi.n	800269a <HAL_ADC_ConfigChannel+0x8e>
 8002662:	a201      	add	r2, pc, #4	@ (adr r2, 8002668 <HAL_ADC_ConfigChannel+0x5c>)
 8002664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002668:	08002679 	.word	0x08002679
 800266c:	08002681 	.word	0x08002681
 8002670:	08002689 	.word	0x08002689
 8002674:	08002691 	.word	0x08002691
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002678:	230c      	movs	r3, #12
 800267a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800267e:	e010      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002680:	2312      	movs	r3, #18
 8002682:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002686:	e00c      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002688:	2318      	movs	r3, #24
 800268a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800268e:	e008      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002698:	e003      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800269a:	2306      	movs	r3, #6
 800269c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80026a0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80026b0:	f7ff fab5 	bl	8001c1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fbef 	bl	8001e9c <LL_ADC_REG_IsConversionOngoing>
 80026be:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fbfb 	bl	8001ec2 <LL_ADC_INJ_IsConversionOngoing>
 80026cc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f040 81bf 	bne.w	8002a58 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 81ba 	bne.w	8002a58 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026ec:	d10f      	bne.n	800270e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2200      	movs	r2, #0
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7ff facf 	bl	8001c9c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fa63 	bl	8001bd2 <LL_ADC_SetSamplingTimeCommonConfig>
 800270c:	e00e      	b.n	800272c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6819      	ldr	r1, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	461a      	mov	r2, r3
 800271c:	f7ff fabe 	bl	8001c9c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fa53 	bl	8001bd2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	08db      	lsrs	r3, r3, #3
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b04      	cmp	r3, #4
 800274c:	d00a      	beq.n	8002764 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6919      	ldr	r1, [r3, #16]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800275e:	f7ff f9e3 	bl	8001b28 <LL_ADC_SetOffset>
 8002762:	e179      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fa00 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x184>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f9f5 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	f003 021f 	and.w	r2, r3, #31
 800278e:	e01e      	b.n	80027ce <HAL_ADC_ConfigChannel+0x1c2>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff f9ea 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80027be:	2320      	movs	r3, #32
 80027c0:	e004      	b.n	80027cc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80027c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x1da>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	e018      	b.n	8002818 <HAL_ADC_ConfigChannel+0x20c>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80027fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002802:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e004      	b.n	8002818 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800280e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002818:	429a      	cmp	r2, r3
 800281a:	d106      	bne.n	800282a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff f9b9 	bl	8001b9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff f99d 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x24a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff f992 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	0e9b      	lsrs	r3, r3, #26
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	e01e      	b.n	8002894 <HAL_ADC_ConfigChannel+0x288>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2101      	movs	r1, #1
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff f987 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002874:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002878:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800287c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002884:	2320      	movs	r3, #32
 8002886:	e004      	b.n	8002892 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002888:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x2a0>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	e018      	b.n	80028de <HAL_ADC_ConfigChannel+0x2d2>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80028c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80028c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80028d0:	2320      	movs	r3, #32
 80028d2:	e004      	b.n	80028de <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80028d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028de:	429a      	cmp	r2, r3
 80028e0:	d106      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2200      	movs	r2, #0
 80028e8:	2101      	movs	r1, #1
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff f956 	bl	8001b9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2102      	movs	r1, #2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff f93a 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <HAL_ADC_ConfigChannel+0x310>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2102      	movs	r1, #2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff f92f 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	0e9b      	lsrs	r3, r3, #26
 8002916:	f003 021f 	and.w	r2, r3, #31
 800291a:	e01e      	b.n	800295a <HAL_ADC_ConfigChannel+0x34e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2102      	movs	r1, #2
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f924 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800293a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800293e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002942:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800294a:	2320      	movs	r3, #32
 800294c:	e004      	b.n	8002958 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800294e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002962:	2b00      	cmp	r3, #0
 8002964:	d105      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x366>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0e9b      	lsrs	r3, r3, #26
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	e014      	b.n	800299c <HAL_ADC_ConfigChannel+0x390>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002980:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002982:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002986:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800298e:	2320      	movs	r3, #32
 8002990:	e004      	b.n	800299c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002992:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800299c:	429a      	cmp	r2, r3
 800299e:	d106      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2200      	movs	r2, #0
 80029a6:	2102      	movs	r1, #2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff f8f7 	bl	8001b9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2103      	movs	r1, #3
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff f8db 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_ADC_ConfigChannel+0x3ce>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2103      	movs	r1, #3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff f8d0 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 80029d0:	4603      	mov	r3, r0
 80029d2:	0e9b      	lsrs	r3, r3, #26
 80029d4:	f003 021f 	and.w	r2, r3, #31
 80029d8:	e017      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x3fe>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2103      	movs	r1, #3
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff f8c5 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80029f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029f4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80029f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80029fc:	2320      	movs	r3, #32
 80029fe:	e003      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002a00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d105      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x416>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	0e9b      	lsrs	r3, r3, #26
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	e011      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x43a>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002a30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a32:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002a34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	e003      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002a3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d106      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2103      	movs	r1, #3
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff f8a2 	bl	8001b9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff f9e3 	bl	8001e28 <LL_ADC_IsEnabled>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f040 813f 	bne.w	8002ce8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6819      	ldr	r1, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	461a      	mov	r2, r3
 8002a78:	f7ff f93c 	bl	8001cf4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a8e      	ldr	r2, [pc, #568]	@ (8002cbc <HAL_ADC_ConfigChannel+0x6b0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	f040 8130 	bne.w	8002ce8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10b      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x4a4>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0e9b      	lsrs	r3, r3, #26
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	2b09      	cmp	r3, #9
 8002aa6:	bf94      	ite	ls
 8002aa8:	2301      	movls	r3, #1
 8002aaa:	2300      	movhi	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e019      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x4d8>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002ac8:	2320      	movs	r3, #32
 8002aca:	e003      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002acc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	2b09      	cmp	r3, #9
 8002adc:	bf94      	ite	ls
 8002ade:	2301      	movls	r3, #1
 8002ae0:	2300      	movhi	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d079      	beq.n	8002bdc <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d107      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x4f8>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0e9b      	lsrs	r3, r3, #26
 8002afa:	3301      	adds	r3, #1
 8002afc:	069b      	lsls	r3, r3, #26
 8002afe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b02:	e015      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x524>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b14:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002b16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	e003      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	3301      	adds	r3, #1
 8002b2a:	069b      	lsls	r3, r3, #26
 8002b2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d109      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x544>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	3301      	adds	r3, #1
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	2101      	movs	r1, #1
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	e017      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x574>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b60:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002b62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	e003      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	3301      	adds	r3, #1
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b80:	ea42 0103 	orr.w	r1, r2, r3
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x59a>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	0e9b      	lsrs	r3, r3, #26
 8002b96:	3301      	adds	r3, #1
 8002b98:	f003 021f 	and.w	r2, r3, #31
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	051b      	lsls	r3, r3, #20
 8002ba4:	e018      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x5cc>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002bbe:	2320      	movs	r3, #32
 8002bc0:	e003      	b.n	8002bca <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f003 021f 	and.w	r2, r3, #31
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	e080      	b.n	8002cde <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d107      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x5ec>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	0e9b      	lsrs	r3, r3, #26
 8002bee:	3301      	adds	r3, #1
 8002bf0:	069b      	lsls	r3, r3, #26
 8002bf2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bf6:	e015      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x618>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002c10:	2320      	movs	r3, #32
 8002c12:	e003      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	069b      	lsls	r3, r3, #26
 8002c20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x638>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	0e9b      	lsrs	r3, r3, #26
 8002c36:	3301      	adds	r3, #1
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	e017      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x668>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	61bb      	str	r3, [r7, #24]
  return result;
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	e003      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	3301      	adds	r3, #1
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	2101      	movs	r1, #1
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	ea42 0103 	orr.w	r1, r2, r3
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10d      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x694>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0e9b      	lsrs	r3, r3, #26
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f003 021f 	and.w	r2, r3, #31
 8002c90:	4613      	mov	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	3b1e      	subs	r3, #30
 8002c98:	051b      	lsls	r3, r3, #20
 8002c9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c9e:	e01d      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x6d0>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	60fb      	str	r3, [r7, #12]
  return result;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002cb8:	2320      	movs	r3, #32
 8002cba:	e005      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x6bc>
 8002cbc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f003 021f 	and.w	r2, r3, #31
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3b1e      	subs	r3, #30
 8002cd6:	051b      	lsls	r3, r3, #20
 8002cd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cdc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f7fe ffda 	bl	8001c9c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b3d      	ldr	r3, [pc, #244]	@ (8002de4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d06c      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cf4:	483c      	ldr	r0, [pc, #240]	@ (8002de8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cf6:	f7fe ff09 	bl	8001b0c <LL_ADC_GetCommonPathInternalCh>
 8002cfa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a3a      	ldr	r2, [pc, #232]	@ (8002dec <HAL_ADC_ConfigChannel+0x7e0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d127      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d121      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a35      	ldr	r2, [pc, #212]	@ (8002df0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d157      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d26:	4619      	mov	r1, r3
 8002d28:	482f      	ldr	r0, [pc, #188]	@ (8002de8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d2a:	f7fe fedc 	bl	8001ae6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d2e:	4b31      	ldr	r3, [pc, #196]	@ (8002df4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	4a30      	ldr	r2, [pc, #192]	@ (8002df8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	099b      	lsrs	r3, r3, #6
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d48:	e002      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f9      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d56:	e03a      	b.n	8002dce <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a27      	ldr	r2, [pc, #156]	@ (8002dfc <HAL_ADC_ConfigChannel+0x7f0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d113      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10d      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1f      	ldr	r2, [pc, #124]	@ (8002df0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d12a      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d80:	4619      	mov	r1, r3
 8002d82:	4819      	ldr	r0, [pc, #100]	@ (8002de8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d84:	f7fe feaf 	bl	8001ae6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d88:	e021      	b.n	8002dce <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e00 <HAL_ADC_ConfigChannel+0x7f4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d11c      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d116      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a12      	ldr	r2, [pc, #72]	@ (8002df0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d111      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002db2:	4619      	mov	r1, r3
 8002db4:	480c      	ldr	r0, [pc, #48]	@ (8002de8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002db6:	f7fe fe96 	bl	8001ae6 <LL_ADC_SetCommonPathInternalCh>
 8002dba:	e008      	b.n	8002dce <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc0:	f043 0220 	orr.w	r2, r3, #32
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002dd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	37d8      	adds	r7, #216	@ 0xd8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	80080000 	.word	0x80080000
 8002de8:	50040300 	.word	0x50040300
 8002dec:	c7520000 	.word	0xc7520000
 8002df0:	50040000 	.word	0x50040000
 8002df4:	20000000 	.word	0x20000000
 8002df8:	053e2d63 	.word	0x053e2d63
 8002dfc:	cb840000 	.word	0xcb840000
 8002e00:	80000001 	.word	0x80000001

08002e04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff f807 	bl	8001e28 <LL_ADC_IsEnabled>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d169      	bne.n	8002ef4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	4b36      	ldr	r3, [pc, #216]	@ (8002f00 <ADC_Enable+0xfc>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00d      	beq.n	8002e4a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e32:	f043 0210 	orr.w	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3e:	f043 0201 	orr.w	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e055      	b.n	8002ef6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe ffc2 	bl	8001dd8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e54:	482b      	ldr	r0, [pc, #172]	@ (8002f04 <ADC_Enable+0x100>)
 8002e56:	f7fe fe59 	bl	8001b0c <LL_ADC_GetCommonPathInternalCh>
 8002e5a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e64:	4b28      	ldr	r3, [pc, #160]	@ (8002f08 <ADC_Enable+0x104>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	4a28      	ldr	r2, [pc, #160]	@ (8002f0c <ADC_Enable+0x108>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e7e:	e002      	b.n	8002e86 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f9      	bne.n	8002e80 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fde8 	bl	8001a60 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e92:	e028      	b.n	8002ee6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe ffc5 	bl	8001e28 <LL_ADC_IsEnabled>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d104      	bne.n	8002eae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe ff95 	bl	8001dd8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002eae:	f7fe fdd7 	bl	8001a60 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d914      	bls.n	8002ee6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d00d      	beq.n	8002ee6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	f043 0210 	orr.w	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eda:	f043 0201 	orr.w	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e007      	b.n	8002ef6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d1cf      	bne.n	8002e94 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	8000003f 	.word	0x8000003f
 8002f04:	50040300 	.word	0x50040300
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	053e2d63 	.word	0x053e2d63

08002f10 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe ff96 	bl	8001e4e <LL_ADC_IsDisableOngoing>
 8002f22:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe ff7d 	bl	8001e28 <LL_ADC_IsEnabled>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d047      	beq.n	8002fc4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d144      	bne.n	8002fc4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030d 	and.w	r3, r3, #13
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d10c      	bne.n	8002f62 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe ff57 	bl	8001e00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2203      	movs	r2, #3
 8002f58:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f5a:	f7fe fd81 	bl	8001a60 <HAL_GetTick>
 8002f5e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f60:	e029      	b.n	8002fb6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f66:	f043 0210 	orr.w	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f72:	f043 0201 	orr.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e023      	b.n	8002fc6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f7e:	f7fe fd6f 	bl	8001a60 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d914      	bls.n	8002fb6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00d      	beq.n	8002fb6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9e:	f043 0210 	orr.w	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e007      	b.n	8002fc6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1dc      	bne.n	8002f7e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d14b      	bne.n	8003080 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d021      	beq.n	8003046 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe fdf6 	bl	8001bf8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d032      	beq.n	8003078 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d12b      	bne.n	8003078 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003024:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003030:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d11f      	bne.n	8003078 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	659a      	str	r2, [r3, #88]	@ 0x58
 8003044:	e018      	b.n	8003078 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d111      	bne.n	8003078 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003058:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d105      	bne.n	8003078 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003070:	f043 0201 	orr.w	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7fd ff6f 	bl	8000f5c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800307e:	e00e      	b.n	800309e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f7ff fab3 	bl	80025f8 <HAL_ADC_ErrorCallback>
}
 8003092:	e004      	b.n	800309e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4798      	blx	r3
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7fe f82d 	bl	8001114 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e0:	f043 0204 	orr.w	r2, r3, #4
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f7ff fa85 	bl	80025f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <LL_ADC_StartCalibration>:
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003108:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003112:	4313      	orrs	r3, r2
 8003114:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	609a      	str	r2, [r3, #8]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_IsCalibrationOnGoing>:
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003138:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800313c:	d101      	bne.n	8003142 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_ADCEx_Calibration_Start+0x1c>
 8003168:	2302      	movs	r3, #2
 800316a:	e04d      	b.n	8003208 <HAL_ADCEx_Calibration_Start+0xb8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fecb 	bl	8002f10 <ADC_Disable>
 800317a:	4603      	mov	r3, r0
 800317c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d136      	bne.n	80031f2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800318c:	f023 0302 	bic.w	r3, r3, #2
 8003190:	f043 0202 	orr.w	r2, r3, #2
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6839      	ldr	r1, [r7, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ffa9 	bl	80030f6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031a4:	e014      	b.n	80031d0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	3301      	adds	r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80031b2:	d30d      	bcc.n	80031d0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b8:	f023 0312 	bic.w	r3, r3, #18
 80031bc:	f043 0210 	orr.w	r2, r3, #16
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e01b      	b.n	8003208 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ffa7 	bl	8003128 <LL_ADC_IsCalibrationOnGoing>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e2      	bne.n	80031a6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e4:	f023 0303 	bic.w	r3, r3, #3
 80031e8:	f043 0201 	orr.w	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80031f0:	e005      	b.n	80031fe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f6:	f043 0210 	orr.w	r2, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003284:	4b0c      	ldr	r3, [pc, #48]	@ (80032b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003290:	4013      	ands	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800329c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032a6:	4a04      	ldr	r2, [pc, #16]	@ (80032b8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	60d3      	str	r3, [r2, #12]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032c0:	4b04      	ldr	r3, [pc, #16]	@ (80032d4 <__NVIC_GetPriorityGrouping+0x18>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	0a1b      	lsrs	r3, r3, #8
 80032c6:	f003 0307 	and.w	r3, r3, #7
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	db0b      	blt.n	8003302 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	f003 021f 	and.w	r2, r3, #31
 80032f0:	4907      	ldr	r1, [pc, #28]	@ (8003310 <__NVIC_EnableIRQ+0x38>)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	2001      	movs	r0, #1
 80032fa:	fa00 f202 	lsl.w	r2, r0, r2
 80032fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	e000e100 	.word	0xe000e100

08003314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	6039      	str	r1, [r7, #0]
 800331e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003324:	2b00      	cmp	r3, #0
 8003326:	db0a      	blt.n	800333e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	b2da      	uxtb	r2, r3
 800332c:	490c      	ldr	r1, [pc, #48]	@ (8003360 <__NVIC_SetPriority+0x4c>)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	0112      	lsls	r2, r2, #4
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	440b      	add	r3, r1
 8003338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800333c:	e00a      	b.n	8003354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4908      	ldr	r1, [pc, #32]	@ (8003364 <__NVIC_SetPriority+0x50>)
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	3b04      	subs	r3, #4
 800334c:	0112      	lsls	r2, r2, #4
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	440b      	add	r3, r1
 8003352:	761a      	strb	r2, [r3, #24]
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000e100 	.word	0xe000e100
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	@ 0x24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f1c3 0307 	rsb	r3, r3, #7
 8003382:	2b04      	cmp	r3, #4
 8003384:	bf28      	it	cs
 8003386:	2304      	movcs	r3, #4
 8003388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	3304      	adds	r3, #4
 800338e:	2b06      	cmp	r3, #6
 8003390:	d902      	bls.n	8003398 <NVIC_EncodePriority+0x30>
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	3b03      	subs	r3, #3
 8003396:	e000      	b.n	800339a <NVIC_EncodePriority+0x32>
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43da      	mvns	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	401a      	ands	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ba:	43d9      	mvns	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c0:	4313      	orrs	r3, r2
         );
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3724      	adds	r7, #36	@ 0x24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3b01      	subs	r3, #1
 80033dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033e0:	d301      	bcc.n	80033e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033e2:	2301      	movs	r3, #1
 80033e4:	e00f      	b.n	8003406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003410 <SysTick_Config+0x40>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ee:	210f      	movs	r1, #15
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033f4:	f7ff ff8e 	bl	8003314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <SysTick_Config+0x40>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033fe:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <SysTick_Config+0x40>)
 8003400:	2207      	movs	r2, #7
 8003402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	e000e010 	.word	0xe000e010

08003414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff ff29 	bl	8003274 <__NVIC_SetPriorityGrouping>
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b086      	sub	sp, #24
 800342e:	af00      	add	r7, sp, #0
 8003430:	4603      	mov	r3, r0
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800343c:	f7ff ff3e 	bl	80032bc <__NVIC_GetPriorityGrouping>
 8003440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	6978      	ldr	r0, [r7, #20]
 8003448:	f7ff ff8e 	bl	8003368 <NVIC_EncodePriority>
 800344c:	4602      	mov	r2, r0
 800344e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff5d 	bl	8003314 <__NVIC_SetPriority>
}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff31 	bl	80032d8 <__NVIC_EnableIRQ>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ffa2 	bl	80033d0 <SysTick_Config>
 800348c:	4603      	mov	r3, r0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e08d      	b.n	80035c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	4b47      	ldr	r3, [pc, #284]	@ (80035d0 <HAL_DMA_Init+0x138>)
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d80f      	bhi.n	80034d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	4b45      	ldr	r3, [pc, #276]	@ (80035d4 <HAL_DMA_Init+0x13c>)
 80034be:	4413      	add	r3, r2
 80034c0:	4a45      	ldr	r2, [pc, #276]	@ (80035d8 <HAL_DMA_Init+0x140>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	091b      	lsrs	r3, r3, #4
 80034c8:	009a      	lsls	r2, r3, #2
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a42      	ldr	r2, [pc, #264]	@ (80035dc <HAL_DMA_Init+0x144>)
 80034d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80034d4:	e00e      	b.n	80034f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	4b40      	ldr	r3, [pc, #256]	@ (80035e0 <HAL_DMA_Init+0x148>)
 80034de:	4413      	add	r3, r2
 80034e0:	4a3d      	ldr	r2, [pc, #244]	@ (80035d8 <HAL_DMA_Init+0x140>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	009a      	lsls	r2, r3, #2
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a3c      	ldr	r2, [pc, #240]	@ (80035e4 <HAL_DMA_Init+0x14c>)
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800350a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800350e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003518:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003524:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003530:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 faba 	bl	8003ac0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003554:	d102      	bne.n	800355c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003570:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d010      	beq.n	800359c <HAL_DMA_Init+0x104>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b04      	cmp	r3, #4
 8003580:	d80c      	bhi.n	800359c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fada 	bl	8003b3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	e008      	b.n	80035ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40020407 	.word	0x40020407
 80035d4:	bffdfff8 	.word	0xbffdfff8
 80035d8:	cccccccd 	.word	0xcccccccd
 80035dc:	40020000 	.word	0x40020000
 80035e0:	bffdfbf8 	.word	0xbffdfbf8
 80035e4:	40020400 	.word	0x40020400

080035e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_DMA_Start_IT+0x20>
 8003604:	2302      	movs	r3, #2
 8003606:	e066      	b.n	80036d6 <HAL_DMA_Start_IT+0xee>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d155      	bne.n	80036c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f9ff 	bl	8003a44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 020e 	orr.w	r2, r2, #14
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e00f      	b.n	8003680 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0204 	bic.w	r2, r2, #4
 800366e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 020a 	orr.w	r2, r2, #10
 800367e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003698:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800369c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036b4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e005      	b.n	80036d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
 80036d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d008      	beq.n	8003708 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2204      	movs	r2, #4
 80036fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e040      	b.n	800378a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 020e 	bic.w	r2, r2, #14
 8003716:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003722:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003726:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373c:	f003 021c 	and.w	r2, r3, #28
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	2101      	movs	r1, #1
 8003746:	fa01 f202 	lsl.w	r2, r1, r2
 800374a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003754:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00c      	beq.n	8003778 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003768:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800376c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003776:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003788:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d005      	beq.n	80037ba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2204      	movs	r2, #4
 80037b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	e047      	b.n	800384a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 020e 	bic.w	r2, r2, #14
 80037c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	f003 021c 	and.w	r2, r3, #28
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2101      	movs	r1, #1
 80037f8:	fa01 f202 	lsl.w	r2, r1, r2
 80037fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003806:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00c      	beq.n	800382a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800381e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003828:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4798      	blx	r3
    }
  }
  return status;
 800384a:	7bfb      	ldrb	r3, [r7, #15]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003870:	f003 031c 	and.w	r3, r3, #28
 8003874:	2204      	movs	r2, #4
 8003876:	409a      	lsls	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d026      	beq.n	80038ce <HAL_DMA_IRQHandler+0x7a>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d021      	beq.n	80038ce <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d107      	bne.n	80038a8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0204 	bic.w	r2, r2, #4
 80038a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ac:	f003 021c 	and.w	r2, r3, #28
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	2104      	movs	r1, #4
 80038b6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ba:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d071      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80038cc:	e06c      	b.n	80039a8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	f003 031c 	and.w	r3, r3, #28
 80038d6:	2202      	movs	r2, #2
 80038d8:	409a      	lsls	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4013      	ands	r3, r2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d02e      	beq.n	8003940 <HAL_DMA_IRQHandler+0xec>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d029      	beq.n	8003940 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 020a 	bic.w	r2, r2, #10
 8003908:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003916:	f003 021c 	and.w	r2, r3, #28
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	2102      	movs	r1, #2
 8003920:	fa01 f202 	lsl.w	r2, r1, r2
 8003924:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d038      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800393e:	e033      	b.n	80039a8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003944:	f003 031c 	and.w	r3, r3, #28
 8003948:	2208      	movs	r2, #8
 800394a:	409a      	lsls	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d02a      	beq.n	80039aa <HAL_DMA_IRQHandler+0x156>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d025      	beq.n	80039aa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 020e 	bic.w	r2, r2, #14
 800396c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	f003 021c 	and.w	r2, r3, #28
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	2101      	movs	r1, #1
 800397c:	fa01 f202 	lsl.w	r2, r1, r2
 8003980:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800399c:	2b00      	cmp	r3, #0
 800399e:	d004      	beq.n	80039aa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
}
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	460b      	mov	r3, r1
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_DMA_RegisterCallback+0x20>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e031      	b.n	8003a38 <HAL_DMA_RegisterCallback+0x84>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d120      	bne.n	8003a2a <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 80039e8:	7afb      	ldrb	r3, [r7, #11]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d81a      	bhi.n	8003a24 <HAL_DMA_RegisterCallback+0x70>
 80039ee:	a201      	add	r2, pc, #4	@ (adr r2, 80039f4 <HAL_DMA_RegisterCallback+0x40>)
 80039f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f4:	08003a05 	.word	0x08003a05
 80039f8:	08003a0d 	.word	0x08003a0d
 80039fc:	08003a15 	.word	0x08003a15
 8003a00:	08003a1d 	.word	0x08003a1d
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003a0a:	e010      	b.n	8003a2e <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8003a12:	e00c      	b.n	8003a2e <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003a1a:	e008      	b.n	8003a2e <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003a22:	e004      	b.n	8003a2e <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	75fb      	strb	r3, [r7, #23]
        break;
 8003a28:	e001      	b.n	8003a2e <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a5a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d004      	beq.n	8003a6e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a6c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a72:	f003 021c 	and.w	r2, r3, #28
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d108      	bne.n	8003aa4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003aa2:	e007      	b.n	8003ab4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	60da      	str	r2, [r3, #12]
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	4b17      	ldr	r3, [pc, #92]	@ (8003b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d80a      	bhi.n	8003aea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad8:	089b      	lsrs	r3, r3, #2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ae0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6493      	str	r3, [r2, #72]	@ 0x48
 8003ae8:	e007      	b.n	8003afa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aee:	089b      	lsrs	r3, r3, #2
 8003af0:	009a      	lsls	r2, r3, #2
 8003af2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003af4:	4413      	add	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	3b08      	subs	r3, #8
 8003b02:	4a0c      	ldr	r2, [pc, #48]	@ (8003b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b10:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	2201      	movs	r2, #1
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	40020407 	.word	0x40020407
 8003b30:	4002081c 	.word	0x4002081c
 8003b34:	cccccccd 	.word	0xcccccccd
 8003b38:	40020880 	.word	0x40020880

08003b3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	461a      	mov	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a08      	ldr	r2, [pc, #32]	@ (8003b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b5e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	2201      	movs	r2, #1
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	1000823f 	.word	0x1000823f
 8003b80:	40020940 	.word	0x40020940

08003b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b92:	e166      	b.n	8003e62 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	2101      	movs	r1, #1
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8158 	beq.w	8003e5c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d005      	beq.n	8003bc4 <HAL_GPIO_Init+0x40>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d130      	bne.n	8003c26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	2203      	movs	r2, #3
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	f003 0201 	and.w	r2, r3, #1
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d017      	beq.n	8003c62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d123      	bne.n	8003cb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	08da      	lsrs	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3208      	adds	r2, #8
 8003c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	220f      	movs	r2, #15
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	08da      	lsrs	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3208      	adds	r2, #8
 8003cb0:	6939      	ldr	r1, [r7, #16]
 8003cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 0203 	and.w	r2, r3, #3
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 80b2 	beq.w	8003e5c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cf8:	4b61      	ldr	r3, [pc, #388]	@ (8003e80 <HAL_GPIO_Init+0x2fc>)
 8003cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfc:	4a60      	ldr	r2, [pc, #384]	@ (8003e80 <HAL_GPIO_Init+0x2fc>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d04:	4b5e      	ldr	r3, [pc, #376]	@ (8003e80 <HAL_GPIO_Init+0x2fc>)
 8003d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d10:	4a5c      	ldr	r2, [pc, #368]	@ (8003e84 <HAL_GPIO_Init+0x300>)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	089b      	lsrs	r3, r3, #2
 8003d16:	3302      	adds	r3, #2
 8003d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	220f      	movs	r2, #15
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d3a:	d02b      	beq.n	8003d94 <HAL_GPIO_Init+0x210>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a52      	ldr	r2, [pc, #328]	@ (8003e88 <HAL_GPIO_Init+0x304>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d025      	beq.n	8003d90 <HAL_GPIO_Init+0x20c>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a51      	ldr	r2, [pc, #324]	@ (8003e8c <HAL_GPIO_Init+0x308>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d01f      	beq.n	8003d8c <HAL_GPIO_Init+0x208>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a50      	ldr	r2, [pc, #320]	@ (8003e90 <HAL_GPIO_Init+0x30c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d019      	beq.n	8003d88 <HAL_GPIO_Init+0x204>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a4f      	ldr	r2, [pc, #316]	@ (8003e94 <HAL_GPIO_Init+0x310>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d013      	beq.n	8003d84 <HAL_GPIO_Init+0x200>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a4e      	ldr	r2, [pc, #312]	@ (8003e98 <HAL_GPIO_Init+0x314>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00d      	beq.n	8003d80 <HAL_GPIO_Init+0x1fc>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a4d      	ldr	r2, [pc, #308]	@ (8003e9c <HAL_GPIO_Init+0x318>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d007      	beq.n	8003d7c <HAL_GPIO_Init+0x1f8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a4c      	ldr	r2, [pc, #304]	@ (8003ea0 <HAL_GPIO_Init+0x31c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d101      	bne.n	8003d78 <HAL_GPIO_Init+0x1f4>
 8003d74:	2307      	movs	r3, #7
 8003d76:	e00e      	b.n	8003d96 <HAL_GPIO_Init+0x212>
 8003d78:	2308      	movs	r3, #8
 8003d7a:	e00c      	b.n	8003d96 <HAL_GPIO_Init+0x212>
 8003d7c:	2306      	movs	r3, #6
 8003d7e:	e00a      	b.n	8003d96 <HAL_GPIO_Init+0x212>
 8003d80:	2305      	movs	r3, #5
 8003d82:	e008      	b.n	8003d96 <HAL_GPIO_Init+0x212>
 8003d84:	2304      	movs	r3, #4
 8003d86:	e006      	b.n	8003d96 <HAL_GPIO_Init+0x212>
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e004      	b.n	8003d96 <HAL_GPIO_Init+0x212>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e002      	b.n	8003d96 <HAL_GPIO_Init+0x212>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_GPIO_Init+0x212>
 8003d94:	2300      	movs	r3, #0
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	f002 0203 	and.w	r2, r2, #3
 8003d9c:	0092      	lsls	r2, r2, #2
 8003d9e:	4093      	lsls	r3, r2
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003da6:	4937      	ldr	r1, [pc, #220]	@ (8003e84 <HAL_GPIO_Init+0x300>)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	3302      	adds	r3, #2
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003db4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea4 <HAL_GPIO_Init+0x320>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dd8:	4a32      	ldr	r2, [pc, #200]	@ (8003ea4 <HAL_GPIO_Init+0x320>)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dde:	4b31      	ldr	r3, [pc, #196]	@ (8003ea4 <HAL_GPIO_Init+0x320>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4013      	ands	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e02:	4a28      	ldr	r2, [pc, #160]	@ (8003ea4 <HAL_GPIO_Init+0x320>)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e08:	4b26      	ldr	r3, [pc, #152]	@ (8003ea4 <HAL_GPIO_Init+0x320>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4013      	ands	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea4 <HAL_GPIO_Init+0x320>)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e32:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea4 <HAL_GPIO_Init+0x320>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e56:	4a13      	ldr	r2, [pc, #76]	@ (8003ea4 <HAL_GPIO_Init+0x320>)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f47f ae91 	bne.w	8003b94 <HAL_GPIO_Init+0x10>
  }
}
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40010000 	.word	0x40010000
 8003e88:	48000400 	.word	0x48000400
 8003e8c:	48000800 	.word	0x48000800
 8003e90:	48000c00 	.word	0x48000c00
 8003e94:	48001000 	.word	0x48001000
 8003e98:	48001400 	.word	0x48001400
 8003e9c:	48001800 	.word	0x48001800
 8003ea0:	48001c00 	.word	0x48001c00
 8003ea4:	40010400 	.word	0x40010400

08003ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	807b      	strh	r3, [r7, #2]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb8:	787b      	ldrb	r3, [r7, #1]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ebe:	887a      	ldrh	r2, [r7, #2]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ec4:	e002      	b.n	8003ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ec6:	887a      	ldrh	r2, [r7, #2]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	041a      	lsls	r2, r3, #16
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	43d9      	mvns	r1, r3
 8003ef6:	887b      	ldrh	r3, [r7, #2]
 8003ef8:	400b      	ands	r3, r1
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	619a      	str	r2, [r3, #24]
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f16:	4b08      	ldr	r3, [pc, #32]	@ (8003f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d006      	beq.n	8003f30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f22:	4a05      	ldr	r2, [pc, #20]	@ (8003f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc fd0e 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40010400 	.word	0x40010400

08003f3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3e:	b08f      	sub	sp, #60	@ 0x3c
 8003f40:	af0a      	add	r7, sp, #40	@ 0x28
 8003f42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e116      	b.n	800417c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f009 f8ff 	bl	800d16c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2203      	movs	r2, #3
 8003f72:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d102      	bne.n	8003f88 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f005 fd56 	bl	8009a3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	687e      	ldr	r6, [r7, #4]
 8003f9a:	466d      	mov	r5, sp
 8003f9c:	f106 0410 	add.w	r4, r6, #16
 8003fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fac:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fb0:	1d33      	adds	r3, r6, #4
 8003fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fb4:	6838      	ldr	r0, [r7, #0]
 8003fb6:	f005 fc69 	bl	800988c <USB_CoreInit>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0d7      	b.n	800417c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f005 fd44 	bl	8009a60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	73fb      	strb	r3, [r7, #15]
 8003fdc:	e04a      	b.n	8004074 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	333d      	adds	r3, #61	@ 0x3d
 8003fee:	2201      	movs	r2, #1
 8003ff0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ff2:	7bfa      	ldrb	r2, [r7, #15]
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	333c      	adds	r3, #60	@ 0x3c
 8004002:	7bfa      	ldrb	r2, [r7, #15]
 8004004:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004006:	7bfa      	ldrb	r2, [r7, #15]
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	b298      	uxth	r0, r3
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	3356      	adds	r3, #86	@ 0x56
 800401a:	4602      	mov	r2, r0
 800401c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800401e:	7bfa      	ldrb	r2, [r7, #15]
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	3340      	adds	r3, #64	@ 0x40
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	3344      	adds	r3, #68	@ 0x44
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004046:	7bfa      	ldrb	r2, [r7, #15]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	3348      	adds	r3, #72	@ 0x48
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800405a:	7bfa      	ldrb	r2, [r7, #15]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	334c      	adds	r3, #76	@ 0x4c
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	3301      	adds	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
 8004074:	7bfa      	ldrb	r2, [r7, #15]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	429a      	cmp	r2, r3
 800407c:	d3af      	bcc.n	8003fde <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800407e:	2300      	movs	r3, #0
 8004080:	73fb      	strb	r3, [r7, #15]
 8004082:	e044      	b.n	800410e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004084:	7bfa      	ldrb	r2, [r7, #15]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800409a:	7bfa      	ldrb	r2, [r7, #15]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80040ac:	7bfa      	ldrb	r2, [r7, #15]
 80040ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040b0:	7bfa      	ldrb	r2, [r7, #15]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040c6:	7bfa      	ldrb	r2, [r7, #15]
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040dc:	7bfa      	ldrb	r2, [r7, #15]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040f2:	7bfa      	ldrb	r2, [r7, #15]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	3301      	adds	r3, #1
 800410c:	73fb      	strb	r3, [r7, #15]
 800410e:	7bfa      	ldrb	r2, [r7, #15]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	429a      	cmp	r2, r3
 8004116:	d3b5      	bcc.n	8004084 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	687e      	ldr	r6, [r7, #4]
 8004120:	466d      	mov	r5, sp
 8004122:	f106 0410 	add.w	r4, r6, #16
 8004126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800412a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800412c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800412e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004132:	e885 0003 	stmia.w	r5, {r0, r1}
 8004136:	1d33      	adds	r3, r6, #4
 8004138:	cb0e      	ldmia	r3, {r1, r2, r3}
 800413a:	6838      	ldr	r0, [r7, #0]
 800413c:	f005 fcdc 	bl	8009af8 <USB_DevInit>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2202      	movs	r2, #2
 800414a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e014      	b.n	800417c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004166:	2b01      	cmp	r3, #1
 8004168:	d102      	bne.n	8004170 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f001 f86a 	bl	8005244 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f006 fc8a 	bl	800aa8e <USB_DevDisconnect>

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004184 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_PCD_Start+0x1c>
 800419c:	2302      	movs	r3, #2
 800419e:	e01c      	b.n	80041da <HAL_PCD_Start+0x56>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f005 fc2b 	bl	8009a1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f006 fc3e 	bl	800aa4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041e2:	b590      	push	{r4, r7, lr}
 80041e4:	b08d      	sub	sp, #52	@ 0x34
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f006 fcfc 	bl	800abf6 <USB_GetMode>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	f040 847e 	bne.w	8004b02 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f006 fc60 	bl	800aad0 <USB_ReadInterrupts>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8474 	beq.w	8004b00 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f006 fc4d 	bl	800aad0 <USB_ReadInterrupts>
 8004236:	4603      	mov	r3, r0
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b02      	cmp	r3, #2
 800423e:	d107      	bne.n	8004250 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f002 0202 	and.w	r2, r2, #2
 800424e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f006 fc3b 	bl	800aad0 <USB_ReadInterrupts>
 800425a:	4603      	mov	r3, r0
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b10      	cmp	r3, #16
 8004262:	d161      	bne.n	8004328 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0210 	bic.w	r2, r2, #16
 8004272:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	f003 020f 	and.w	r2, r3, #15
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	4413      	add	r3, r2
 8004290:	3304      	adds	r3, #4
 8004292:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	0c5b      	lsrs	r3, r3, #17
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	2b02      	cmp	r3, #2
 800429e:	d124      	bne.n	80042ea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d035      	beq.n	8004318 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80042b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	6a38      	ldr	r0, [r7, #32]
 80042c0:	f006 fa72 	bl	800a7a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	091b      	lsrs	r3, r3, #4
 80042cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042d0:	441a      	add	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042e2:	441a      	add	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	615a      	str	r2, [r3, #20]
 80042e8:	e016      	b.n	8004318 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	0c5b      	lsrs	r3, r3, #17
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	2b06      	cmp	r3, #6
 80042f4:	d110      	bne.n	8004318 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80042fc:	2208      	movs	r2, #8
 80042fe:	4619      	mov	r1, r3
 8004300:	6a38      	ldr	r0, [r7, #32]
 8004302:	f006 fa51 	bl	800a7a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	091b      	lsrs	r3, r3, #4
 800430e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004312:	441a      	add	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0210 	orr.w	r2, r2, #16
 8004326:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f006 fbcf 	bl	800aad0 <USB_ReadInterrupts>
 8004332:	4603      	mov	r3, r0
 8004334:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004338:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800433c:	f040 80a7 	bne.w	800448e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f006 fbd4 	bl	800aaf6 <USB_ReadDevAllOutEpInterrupt>
 800434e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004350:	e099      	b.n	8004486 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 808e 	beq.w	800447a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f006 fbf8 	bl	800ab5e <USB_ReadDevOutEPInterrupt>
 800436e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00c      	beq.n	8004394 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004386:	461a      	mov	r2, r3
 8004388:	2301      	movs	r3, #1
 800438a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800438c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fe7e 	bl	8005090 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00c      	beq.n	80043b8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043aa:	461a      	mov	r2, r3
 80043ac:	2308      	movs	r3, #8
 80043ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80043b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 feba 	bl	800512c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d008      	beq.n	80043d4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ce:	461a      	mov	r2, r3
 80043d0:	2310      	movs	r3, #16
 80043d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d030      	beq.n	8004440 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e6:	2b80      	cmp	r3, #128	@ 0x80
 80043e8:	d109      	bne.n	80043fe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043fc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80043fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	4413      	add	r3, r2
 8004410:	3304      	adds	r3, #4
 8004412:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	78db      	ldrb	r3, [r3, #3]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d108      	bne.n	800442e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2200      	movs	r2, #0
 8004420:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	b2db      	uxtb	r3, r3
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f008 fff5 	bl	800d418 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443a:	461a      	mov	r2, r3
 800443c:	2302      	movs	r3, #2
 800443e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d008      	beq.n	800445c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004456:	461a      	mov	r2, r3
 8004458:	2320      	movs	r3, #32
 800445a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004472:	461a      	mov	r2, r3
 8004474:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004478:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	3301      	adds	r3, #1
 800447e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004488:	2b00      	cmp	r3, #0
 800448a:	f47f af62 	bne.w	8004352 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f006 fb1c 	bl	800aad0 <USB_ReadInterrupts>
 8004498:	4603      	mov	r3, r0
 800449a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800449e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044a2:	f040 80a4 	bne.w	80045ee <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f006 fb3d 	bl	800ab2a <USB_ReadDevAllInEpInterrupt>
 80044b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80044b6:	e096      	b.n	80045e6 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80044b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 808b 	beq.w	80045da <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	4611      	mov	r1, r2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f006 fb63 	bl	800ab9a <USB_ReadDevInEPInterrupt>
 80044d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d020      	beq.n	8004522 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	2201      	movs	r2, #1
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	69f9      	ldr	r1, [r7, #28]
 80044fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004500:	4013      	ands	r3, r2
 8004502:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004510:	461a      	mov	r2, r3
 8004512:	2301      	movs	r3, #1
 8004514:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	b2db      	uxtb	r3, r3
 800451a:	4619      	mov	r1, r3
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f008 fee6 	bl	800d2ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004538:	461a      	mov	r2, r3
 800453a:	2308      	movs	r3, #8
 800453c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004554:	461a      	mov	r2, r3
 8004556:	2310      	movs	r3, #16
 8004558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004570:	461a      	mov	r2, r3
 8004572:	2340      	movs	r3, #64	@ 0x40
 8004574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d023      	beq.n	80045c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004582:	6a38      	ldr	r0, [r7, #32]
 8004584:	f005 fbfa 	bl	8009d7c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800458a:	4613      	mov	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	3338      	adds	r3, #56	@ 0x38
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	4413      	add	r3, r2
 8004598:	3304      	adds	r3, #4
 800459a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	78db      	ldrb	r3, [r3, #3]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d108      	bne.n	80045b6 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2200      	movs	r2, #0
 80045a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	4619      	mov	r1, r3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f008 ff43 	bl	800d43c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045c2:	461a      	mov	r2, r3
 80045c4:	2302      	movs	r3, #2
 80045c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80045d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fcd2 	bl	8004f7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	3301      	adds	r3, #1
 80045de:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80045e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80045e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f47f af65 	bne.w	80044b8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f006 fa6c 	bl	800aad0 <USB_ReadInterrupts>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004602:	d122      	bne.n	800464a <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800461e:	2b01      	cmp	r3, #1
 8004620:	d108      	bne.n	8004634 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800462a:	2100      	movs	r1, #0
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f009 f977 	bl	800d920 <HAL_PCDEx_LPM_Callback>
 8004632:	e002      	b.n	800463a <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f008 fec7 	bl	800d3c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004648:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f006 fa3e 	bl	800aad0 <USB_ReadInterrupts>
 8004654:	4603      	mov	r3, r0
 8004656:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800465a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800465e:	d112      	bne.n	8004686 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b01      	cmp	r3, #1
 800466e:	d102      	bne.n	8004676 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f008 fe83 	bl	800d37c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004684:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f006 fa20 	bl	800aad0 <USB_ReadInterrupts>
 8004690:	4603      	mov	r3, r0
 8004692:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800469a:	d121      	bne.n	80046e0 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695a      	ldr	r2, [r3, #20]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80046aa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d111      	bne.n	80046da <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c4:	089b      	lsrs	r3, r3, #2
 80046c6:	f003 020f 	and.w	r2, r3, #15
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80046d0:	2101      	movs	r1, #1
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f009 f924 	bl	800d920 <HAL_PCDEx_LPM_Callback>
 80046d8:	e002      	b.n	80046e0 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f008 fe4e 	bl	800d37c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f006 f9f3 	bl	800aad0 <USB_ReadInterrupts>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f4:	f040 80b5 	bne.w	8004862 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2110      	movs	r1, #16
 8004712:	4618      	mov	r0, r3
 8004714:	f005 fb32 	bl	8009d7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004718:	2300      	movs	r3, #0
 800471a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800471c:	e046      	b.n	80047ac <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800472a:	461a      	mov	r2, r3
 800472c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004730:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800474c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004750:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800475e:	461a      	mov	r2, r3
 8004760:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004764:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004776:	0151      	lsls	r1, r2, #5
 8004778:	69fa      	ldr	r2, [r7, #28]
 800477a:	440a      	add	r2, r1
 800477c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004780:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004784:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004796:	0151      	lsls	r1, r2, #5
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	440a      	add	r2, r1
 800479c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80047a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a8:	3301      	adds	r3, #1
 80047aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d3b3      	bcc.n	800471e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047c4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80047c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d016      	beq.n	8004800 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047e2:	f043 030b 	orr.w	r3, r3, #11
 80047e6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047f8:	f043 030b 	orr.w	r3, r3, #11
 80047fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80047fe:	e015      	b.n	800482c <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800480e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004812:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004816:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004826:	f043 030b 	orr.w	r3, r3, #11
 800482a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800483a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800483e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f006 fa03 	bl	800ac58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695a      	ldr	r2, [r3, #20]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004860:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f006 f932 	bl	800aad0 <USB_ReadInterrupts>
 800486c:	4603      	mov	r3, r0
 800486e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004876:	d124      	bne.n	80048c2 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f006 f9c8 	bl	800ac12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f005 faf5 	bl	8009e76 <USB_GetDevSpeed>
 800488c:	4603      	mov	r3, r0
 800488e:	461a      	mov	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681c      	ldr	r4, [r3, #0]
 8004898:	f001 fbbc 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 800489c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	4620      	mov	r0, r4
 80048a8:	f005 f81c 	bl	80098e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f008 fd46 	bl	800d33e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695a      	ldr	r2, [r3, #20]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80048c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f006 f902 	bl	800aad0 <USB_ReadInterrupts>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d10a      	bne.n	80048ec <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f008 fd23 	bl	800d322 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f002 0208 	and.w	r2, r2, #8
 80048ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f006 f8ed 	bl	800aad0 <USB_ReadInterrupts>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fc:	2b80      	cmp	r3, #128	@ 0x80
 80048fe:	d122      	bne.n	8004946 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800490c:	2301      	movs	r3, #1
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004910:	e014      	b.n	800493c <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004916:	4613      	mov	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d105      	bne.n	8004936 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	b2db      	uxtb	r3, r3
 800492e:	4619      	mov	r1, r3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 faf3 	bl	8004f1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	3301      	adds	r3, #1
 800493a:	627b      	str	r3, [r7, #36]	@ 0x24
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004942:	429a      	cmp	r2, r3
 8004944:	d3e5      	bcc.n	8004912 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f006 f8c0 	bl	800aad0 <USB_ReadInterrupts>
 8004950:	4603      	mov	r3, r0
 8004952:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004956:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800495a:	d13b      	bne.n	80049d4 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800495c:	2301      	movs	r3, #1
 800495e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004960:	e02b      	b.n	80049ba <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004976:	4613      	mov	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	3340      	adds	r3, #64	@ 0x40
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d115      	bne.n	80049b4 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004988:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800498a:	2b00      	cmp	r3, #0
 800498c:	da12      	bge.n	80049b4 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004992:	4613      	mov	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	333f      	adds	r3, #63	@ 0x3f
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	4619      	mov	r1, r3
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fab4 	bl	8004f1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b6:	3301      	adds	r3, #1
 80049b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d3ce      	bcc.n	8004962 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695a      	ldr	r2, [r3, #20]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80049d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f006 f879 	bl	800aad0 <USB_ReadInterrupts>
 80049de:	4603      	mov	r3, r0
 80049e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049e8:	d155      	bne.n	8004a96 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049ea:	2301      	movs	r3, #1
 80049ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ee:	e045      	b.n	8004a7c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80049f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a04:	4613      	mov	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d12e      	bne.n	8004a76 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	da2b      	bge.n	8004a76 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004a2a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d121      	bne.n	8004a76 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a36:	4613      	mov	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004a44:	2201      	movs	r2, #1
 8004a46:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a72:	6053      	str	r3, [r2, #4]
            break;
 8004a74:	e007      	b.n	8004a86 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	3301      	adds	r3, #1
 8004a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d3b4      	bcc.n	80049f0 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f006 f818 	bl	800aad0 <USB_ReadInterrupts>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aaa:	d10a      	bne.n	8004ac2 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f008 fcd7 	bl	800d460 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f006 f802 	bl	800aad0 <USB_ReadInterrupts>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d115      	bne.n	8004b02 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f008 fcc7 	bl	800d47c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6859      	ldr	r1, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	e000      	b.n	8004b02 <HAL_PCD_IRQHandler+0x920>
      return;
 8004b00:	bf00      	nop
    }
  }
}
 8004b02:	3734      	adds	r7, #52	@ 0x34
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd90      	pop	{r4, r7, pc}

08004b08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_PCD_SetAddress+0x1a>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e013      	b.n	8004b4a <HAL_PCD_SetAddress+0x42>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	78fa      	ldrb	r2, [r7, #3]
 8004b38:	4611      	mov	r1, r2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f005 ff60 	bl	800aa00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	4608      	mov	r0, r1
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4603      	mov	r3, r0
 8004b62:	70fb      	strb	r3, [r7, #3]
 8004b64:	460b      	mov	r3, r1
 8004b66:	803b      	strh	r3, [r7, #0]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	da0f      	bge.n	8004b98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	f003 020f 	and.w	r2, r3, #15
 8004b7e:	4613      	mov	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	3338      	adds	r3, #56	@ 0x38
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	705a      	strb	r2, [r3, #1]
 8004b96:	e00f      	b.n	8004bb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	f003 020f 	and.w	r2, r3, #15
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	4413      	add	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4413      	add	r3, r2
 8004bae:	3304      	adds	r3, #4
 8004bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004bc4:	883a      	ldrh	r2, [r7, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	78ba      	ldrb	r2, [r7, #2]
 8004bce:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	785b      	ldrb	r3, [r3, #1]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d004      	beq.n	8004be2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004be2:	78bb      	ldrb	r3, [r7, #2]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d102      	bne.n	8004bee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_PCD_EP_Open+0xaa>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e00e      	b.n	8004c1a <HAL_PCD_EP_Open+0xc8>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68f9      	ldr	r1, [r7, #12]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f005 f952 	bl	8009eb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004c18:	7afb      	ldrb	r3, [r7, #11]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	da0f      	bge.n	8004c56 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	f003 020f 	and.w	r2, r3, #15
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	3338      	adds	r3, #56	@ 0x38
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	4413      	add	r3, r2
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	705a      	strb	r2, [r3, #1]
 8004c54:	e00f      	b.n	8004c76 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c56:	78fb      	ldrb	r3, [r7, #3]
 8004c58:	f003 020f 	and.w	r2, r3, #15
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c76:	78fb      	ldrb	r3, [r7, #3]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_PCD_EP_Close+0x6e>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e00e      	b.n	8004cae <HAL_PCD_EP_Close+0x8c>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68f9      	ldr	r1, [r7, #12]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f005 f990 	bl	8009fc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b086      	sub	sp, #24
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cc6:	7afb      	ldrb	r3, [r7, #11]
 8004cc8:	f003 020f 	and.w	r2, r3, #15
 8004ccc:	4613      	mov	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4413      	add	r3, r2
 8004cdc:	3304      	adds	r3, #4
 8004cde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cf8:	7afb      	ldrb	r3, [r7, #11]
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6979      	ldr	r1, [r7, #20]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f005 fa36 	bl	800a17c <USB_EPStartXfer>

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	f003 020f 	and.w	r2, r3, #15
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004d3c:	681b      	ldr	r3, [r3, #0]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b086      	sub	sp, #24
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
 8004d56:	460b      	mov	r3, r1
 8004d58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d5a:	7afb      	ldrb	r3, [r7, #11]
 8004d5c:	f003 020f 	and.w	r2, r3, #15
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	3338      	adds	r3, #56	@ 0x38
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3304      	adds	r3, #4
 8004d70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2200      	movs	r2, #0
 8004d82:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2201      	movs	r2, #1
 8004d88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d8a:	7afb      	ldrb	r3, [r7, #11]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6979      	ldr	r1, [r7, #20]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f005 f9ed 	bl	800a17c <USB_EPStartXfer>

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	f003 020f 	and.w	r2, r3, #15
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d901      	bls.n	8004dca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e04e      	b.n	8004e68 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	da0f      	bge.n	8004df2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	f003 020f 	and.w	r2, r3, #15
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	3338      	adds	r3, #56	@ 0x38
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	3304      	adds	r3, #4
 8004de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	705a      	strb	r2, [r3, #1]
 8004df0:	e00d      	b.n	8004e0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004df2:	78fa      	ldrb	r2, [r7, #3]
 8004df4:	4613      	mov	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	4413      	add	r3, r2
 8004e04:	3304      	adds	r3, #4
 8004e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_PCD_EP_SetStall+0x82>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e01c      	b.n	8004e68 <HAL_PCD_EP_SetStall+0xbc>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f005 fd0b 	bl	800a858 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d108      	bne.n	8004e5e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004e56:	4619      	mov	r1, r3
 8004e58:	4610      	mov	r0, r2
 8004e5a:	f005 fefd 	bl	800ac58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	f003 020f 	and.w	r2, r3, #15
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d901      	bls.n	8004e8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e042      	b.n	8004f14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	da0f      	bge.n	8004eb6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e96:	78fb      	ldrb	r3, [r7, #3]
 8004e98:	f003 020f 	and.w	r2, r3, #15
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	3338      	adds	r3, #56	@ 0x38
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3304      	adds	r3, #4
 8004eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	705a      	strb	r2, [r3, #1]
 8004eb4:	e00f      	b.n	8004ed6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	f003 020f 	and.w	r2, r3, #15
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	4413      	add	r3, r2
 8004ecc:	3304      	adds	r3, #4
 8004ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_PCD_EP_ClrStall+0x86>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e00e      	b.n	8004f14 <HAL_PCD_EP_ClrStall+0xa4>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68f9      	ldr	r1, [r7, #12]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f005 fd15 	bl	800a934 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	da0c      	bge.n	8004f4a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	f003 020f 	and.w	r2, r3, #15
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	3338      	adds	r3, #56	@ 0x38
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	4413      	add	r3, r2
 8004f44:	3304      	adds	r3, #4
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	e00c      	b.n	8004f64 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	f003 020f 	and.w	r2, r3, #15
 8004f50:	4613      	mov	r3, r2
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	4413      	add	r3, r2
 8004f60:	3304      	adds	r3, #4
 8004f62:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68f9      	ldr	r1, [r7, #12]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f005 fb38 	bl	800a5e0 <USB_EPStopXfer>
 8004f70:	4603      	mov	r3, r0
 8004f72:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f74:	7afb      	ldrb	r3, [r7, #11]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b088      	sub	sp, #32
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	3338      	adds	r3, #56	@ 0x38
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d901      	bls.n	8004fb6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e067      	b.n	8005086 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d902      	bls.n	8004fd2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	3303      	adds	r3, #3
 8004fd6:	089b      	lsrs	r3, r3, #2
 8004fd8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fda:	e026      	b.n	800502a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d902      	bls.n	8004ff8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	3303      	adds	r3, #3
 8004ffc:	089b      	lsrs	r3, r3, #2
 8004ffe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	68d9      	ldr	r1, [r3, #12]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	b2da      	uxtb	r2, r3
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	b29b      	uxth	r3, r3
 800500c:	6978      	ldr	r0, [r7, #20]
 800500e:	f005 fb91 	bl	800a734 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	441a      	add	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	695a      	ldr	r2, [r3, #20]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	441a      	add	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	429a      	cmp	r2, r3
 800503e:	d809      	bhi.n	8005054 <PCD_WriteEmptyTxFifo+0xd6>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	695a      	ldr	r2, [r3, #20]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005048:	429a      	cmp	r2, r3
 800504a:	d203      	bcs.n	8005054 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1c3      	bne.n	8004fdc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	429a      	cmp	r2, r3
 800505e:	d811      	bhi.n	8005084 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	2201      	movs	r2, #1
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	43db      	mvns	r3, r3
 800507a:	6939      	ldr	r1, [r7, #16]
 800507c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005080:	4013      	ands	r3, r2
 8005082:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	333c      	adds	r3, #60	@ 0x3c
 80050a8:	3304      	adds	r3, #4
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4a19      	ldr	r2, [pc, #100]	@ (8005128 <PCD_EP_OutXfrComplete_int+0x98>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d124      	bne.n	8005110 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050dc:	461a      	mov	r2, r3
 80050de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050e2:	6093      	str	r3, [r2, #8]
 80050e4:	e01a      	b.n	800511c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fc:	461a      	mov	r2, r3
 80050fe:	2320      	movs	r3, #32
 8005100:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	4619      	mov	r1, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f008 f8d5 	bl	800d2b8 <HAL_PCD_DataOutStageCallback>
 800510e:	e005      	b.n	800511c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f008 f8ce 	bl	800d2b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	4f54310a 	.word	0x4f54310a

0800512c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	333c      	adds	r3, #60	@ 0x3c
 8005144:	3304      	adds	r3, #4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4a0c      	ldr	r2, [pc, #48]	@ (8005190 <PCD_EP_OutSetupPacket_int+0x64>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d90e      	bls.n	8005180 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005168:	2b00      	cmp	r3, #0
 800516a:	d009      	beq.n	8005180 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005178:	461a      	mov	r2, r3
 800517a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800517e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f008 f887 	bl	800d294 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	4f54300a 	.word	0x4f54300a

08005194 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
 80051a0:	4613      	mov	r3, r2
 80051a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d107      	bne.n	80051c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80051b2:	883b      	ldrh	r3, [r7, #0]
 80051b4:	0419      	lsls	r1, r3, #16
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	430a      	orrs	r2, r1
 80051be:	629a      	str	r2, [r3, #40]	@ 0x28
 80051c0:	e028      	b.n	8005214 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c8:	0c1b      	lsrs	r3, r3, #16
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	4413      	add	r3, r2
 80051ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]
 80051d4:	e00d      	b.n	80051f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	3340      	adds	r3, #64	@ 0x40
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	0c1b      	lsrs	r3, r3, #16
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	4413      	add	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
 80051ee:	3301      	adds	r3, #1
 80051f0:	73fb      	strb	r3, [r7, #15]
 80051f2:	7bfa      	ldrb	r2, [r7, #15]
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d3ec      	bcc.n	80051d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80051fc:	883b      	ldrh	r3, [r7, #0]
 80051fe:	0418      	lsls	r0, r3, #16
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6819      	ldr	r1, [r3, #0]
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	3b01      	subs	r3, #1
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	4302      	orrs	r2, r0
 800520c:	3340      	adds	r3, #64	@ 0x40
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	460b      	mov	r3, r1
 800522c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	887a      	ldrh	r2, [r7, #2]
 8005234:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005276:	f043 0303 	orr.w	r3, r3, #3
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005290:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529c:	d102      	bne.n	80052a4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800529e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052a2:	e00b      	b.n	80052bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80052a4:	4b08      	ldr	r3, [pc, #32]	@ (80052c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80052a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052b2:	d102      	bne.n	80052ba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80052b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052b8:	e000      	b.n	80052bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80052ba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80052bc:	4618      	mov	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40007000 	.word	0x40007000

080052cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d141      	bne.n	800535e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052da:	4b4b      	ldr	r3, [pc, #300]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e6:	d131      	bne.n	800534c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052e8:	4b47      	ldr	r3, [pc, #284]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ee:	4a46      	ldr	r2, [pc, #280]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052f8:	4b43      	ldr	r3, [pc, #268]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005300:	4a41      	ldr	r2, [pc, #260]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005302:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005306:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005308:	4b40      	ldr	r3, [pc, #256]	@ (800540c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2232      	movs	r2, #50	@ 0x32
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	4a3f      	ldr	r2, [pc, #252]	@ (8005410 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	0c9b      	lsrs	r3, r3, #18
 800531a:	3301      	adds	r3, #1
 800531c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800531e:	e002      	b.n	8005326 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3b01      	subs	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005326:	4b38      	ldr	r3, [pc, #224]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800532e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005332:	d102      	bne.n	800533a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f2      	bne.n	8005320 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800533a:	4b33      	ldr	r3, [pc, #204]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005346:	d158      	bne.n	80053fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e057      	b.n	80053fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800534c:	4b2e      	ldr	r3, [pc, #184]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800534e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005352:	4a2d      	ldr	r2, [pc, #180]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800535c:	e04d      	b.n	80053fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005364:	d141      	bne.n	80053ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005366:	4b28      	ldr	r3, [pc, #160]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800536e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005372:	d131      	bne.n	80053d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005374:	4b24      	ldr	r3, [pc, #144]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800537a:	4a23      	ldr	r2, [pc, #140]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800537c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005380:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005384:	4b20      	ldr	r3, [pc, #128]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800538c:	4a1e      	ldr	r2, [pc, #120]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800538e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005392:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005394:	4b1d      	ldr	r3, [pc, #116]	@ (800540c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2232      	movs	r2, #50	@ 0x32
 800539a:	fb02 f303 	mul.w	r3, r2, r3
 800539e:	4a1c      	ldr	r2, [pc, #112]	@ (8005410 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80053a0:	fba2 2303 	umull	r2, r3, r2, r3
 80053a4:	0c9b      	lsrs	r3, r3, #18
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053aa:	e002      	b.n	80053b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053b2:	4b15      	ldr	r3, [pc, #84]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053be:	d102      	bne.n	80053c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f2      	bne.n	80053ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053c6:	4b10      	ldr	r3, [pc, #64]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053d2:	d112      	bne.n	80053fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e011      	b.n	80053fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053de:	4a0a      	ldr	r2, [pc, #40]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80053e8:	e007      	b.n	80053fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053ea:	4b07      	ldr	r3, [pc, #28]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053f2:	4a05      	ldr	r2, [pc, #20]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053f8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	40007000 	.word	0x40007000
 800540c:	20000000 	.word	0x20000000
 8005410:	431bde83 	.word	0x431bde83

08005414 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005418:	4b05      	ldr	r3, [pc, #20]	@ (8005430 <HAL_PWREx_EnableVddUSB+0x1c>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	4a04      	ldr	r2, [pc, #16]	@ (8005430 <HAL_PWREx_EnableVddUSB+0x1c>)
 800541e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005422:	6053      	str	r3, [r2, #4]
}
 8005424:	bf00      	nop
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40007000 	.word	0x40007000

08005434 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005438:	4b05      	ldr	r3, [pc, #20]	@ (8005450 <HAL_PWREx_EnableVddIO2+0x1c>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	4a04      	ldr	r2, [pc, #16]	@ (8005450 <HAL_PWREx_EnableVddIO2+0x1c>)
 800543e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005442:	6053      	str	r3, [r2, #4]
}
 8005444:	bf00      	nop
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40007000 	.word	0x40007000

08005454 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d102      	bne.n	8005468 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	f000 bc08 	b.w	8005c78 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005468:	4b96      	ldr	r3, [pc, #600]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 030c 	and.w	r3, r3, #12
 8005470:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005472:	4b94      	ldr	r3, [pc, #592]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80e4 	beq.w	8005652 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <HAL_RCC_OscConfig+0x4c>
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b0c      	cmp	r3, #12
 8005494:	f040 808b 	bne.w	80055ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2b01      	cmp	r3, #1
 800549c:	f040 8087 	bne.w	80055ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054a0:	4b88      	ldr	r3, [pc, #544]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <HAL_RCC_OscConfig+0x64>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e3df      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1a      	ldr	r2, [r3, #32]
 80054bc:	4b81      	ldr	r3, [pc, #516]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d004      	beq.n	80054d2 <HAL_RCC_OscConfig+0x7e>
 80054c8:	4b7e      	ldr	r3, [pc, #504]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054d0:	e005      	b.n	80054de <HAL_RCC_OscConfig+0x8a>
 80054d2:	4b7c      	ldr	r3, [pc, #496]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80054d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054d8:	091b      	lsrs	r3, r3, #4
 80054da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054de:	4293      	cmp	r3, r2
 80054e0:	d223      	bcs.n	800552a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fdcc 	bl	8006084 <RCC_SetFlashLatencyFromMSIRange>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e3c0      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054f6:	4b73      	ldr	r3, [pc, #460]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a72      	ldr	r2, [pc, #456]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80054fc:	f043 0308 	orr.w	r3, r3, #8
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	4b70      	ldr	r3, [pc, #448]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	496d      	ldr	r1, [pc, #436]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005510:	4313      	orrs	r3, r2
 8005512:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005514:	4b6b      	ldr	r3, [pc, #428]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	021b      	lsls	r3, r3, #8
 8005522:	4968      	ldr	r1, [pc, #416]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005524:	4313      	orrs	r3, r2
 8005526:	604b      	str	r3, [r1, #4]
 8005528:	e025      	b.n	8005576 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800552a:	4b66      	ldr	r3, [pc, #408]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a65      	ldr	r2, [pc, #404]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005530:	f043 0308 	orr.w	r3, r3, #8
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	4b63      	ldr	r3, [pc, #396]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	4960      	ldr	r1, [pc, #384]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005544:	4313      	orrs	r3, r2
 8005546:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005548:	4b5e      	ldr	r3, [pc, #376]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	495b      	ldr	r1, [pc, #364]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005558:	4313      	orrs	r3, r2
 800555a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fd8c 	bl	8006084 <RCC_SetFlashLatencyFromMSIRange>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e380      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005576:	f000 fcc1 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 800557a:	4602      	mov	r2, r0
 800557c:	4b51      	ldr	r3, [pc, #324]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	091b      	lsrs	r3, r3, #4
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	4950      	ldr	r1, [pc, #320]	@ (80056c8 <HAL_RCC_OscConfig+0x274>)
 8005588:	5ccb      	ldrb	r3, [r1, r3]
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	fa22 f303 	lsr.w	r3, r2, r3
 8005592:	4a4e      	ldr	r2, [pc, #312]	@ (80056cc <HAL_RCC_OscConfig+0x278>)
 8005594:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005596:	4b4e      	ldr	r3, [pc, #312]	@ (80056d0 <HAL_RCC_OscConfig+0x27c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f7fc fa10 	bl	80019c0 <HAL_InitTick>
 80055a0:	4603      	mov	r3, r0
 80055a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d052      	beq.n	8005650 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	e364      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d032      	beq.n	800561c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055b6:	4b43      	ldr	r3, [pc, #268]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a42      	ldr	r2, [pc, #264]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80055bc:	f043 0301 	orr.w	r3, r3, #1
 80055c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055c2:	f7fc fa4d 	bl	8001a60 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055ca:	f7fc fa49 	bl	8001a60 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e34d      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055dc:	4b39      	ldr	r3, [pc, #228]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0f0      	beq.n	80055ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055e8:	4b36      	ldr	r3, [pc, #216]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a35      	ldr	r2, [pc, #212]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80055ee:	f043 0308 	orr.w	r3, r3, #8
 80055f2:	6013      	str	r3, [r2, #0]
 80055f4:	4b33      	ldr	r3, [pc, #204]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	4930      	ldr	r1, [pc, #192]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005606:	4b2f      	ldr	r3, [pc, #188]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	492b      	ldr	r1, [pc, #172]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005616:	4313      	orrs	r3, r2
 8005618:	604b      	str	r3, [r1, #4]
 800561a:	e01a      	b.n	8005652 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800561c:	4b29      	ldr	r3, [pc, #164]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a28      	ldr	r2, [pc, #160]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005628:	f7fc fa1a 	bl	8001a60 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005630:	f7fc fa16 	bl	8001a60 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e31a      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005642:	4b20      	ldr	r3, [pc, #128]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x1dc>
 800564e:	e000      	b.n	8005652 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005650:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d073      	beq.n	8005746 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b08      	cmp	r3, #8
 8005662:	d005      	beq.n	8005670 <HAL_RCC_OscConfig+0x21c>
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	2b0c      	cmp	r3, #12
 8005668:	d10e      	bne.n	8005688 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b03      	cmp	r3, #3
 800566e:	d10b      	bne.n	8005688 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005670:	4b14      	ldr	r3, [pc, #80]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d063      	beq.n	8005744 <HAL_RCC_OscConfig+0x2f0>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d15f      	bne.n	8005744 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e2f7      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005690:	d106      	bne.n	80056a0 <HAL_RCC_OscConfig+0x24c>
 8005692:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a0b      	ldr	r2, [pc, #44]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 8005698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	e025      	b.n	80056ec <HAL_RCC_OscConfig+0x298>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056a8:	d114      	bne.n	80056d4 <HAL_RCC_OscConfig+0x280>
 80056aa:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a05      	ldr	r2, [pc, #20]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80056b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	4b03      	ldr	r3, [pc, #12]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a02      	ldr	r2, [pc, #8]	@ (80056c4 <HAL_RCC_OscConfig+0x270>)
 80056bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e013      	b.n	80056ec <HAL_RCC_OscConfig+0x298>
 80056c4:	40021000 	.word	0x40021000
 80056c8:	0800dacc 	.word	0x0800dacc
 80056cc:	20000000 	.word	0x20000000
 80056d0:	20000004 	.word	0x20000004
 80056d4:	4ba0      	ldr	r3, [pc, #640]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a9f      	ldr	r2, [pc, #636]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 80056da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	4b9d      	ldr	r3, [pc, #628]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a9c      	ldr	r2, [pc, #624]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 80056e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d013      	beq.n	800571c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7fc f9b4 	bl	8001a60 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056fc:	f7fc f9b0 	bl	8001a60 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b64      	cmp	r3, #100	@ 0x64
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e2b4      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800570e:	4b92      	ldr	r3, [pc, #584]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0x2a8>
 800571a:	e014      	b.n	8005746 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571c:	f7fc f9a0 	bl	8001a60 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005724:	f7fc f99c 	bl	8001a60 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b64      	cmp	r3, #100	@ 0x64
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e2a0      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005736:	4b88      	ldr	r3, [pc, #544]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0x2d0>
 8005742:	e000      	b.n	8005746 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d060      	beq.n	8005814 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	2b04      	cmp	r3, #4
 8005756:	d005      	beq.n	8005764 <HAL_RCC_OscConfig+0x310>
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	2b0c      	cmp	r3, #12
 800575c:	d119      	bne.n	8005792 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b02      	cmp	r3, #2
 8005762:	d116      	bne.n	8005792 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005764:	4b7c      	ldr	r3, [pc, #496]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <HAL_RCC_OscConfig+0x328>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e27d      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577c:	4b76      	ldr	r3, [pc, #472]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	061b      	lsls	r3, r3, #24
 800578a:	4973      	ldr	r1, [pc, #460]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 800578c:	4313      	orrs	r3, r2
 800578e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005790:	e040      	b.n	8005814 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d023      	beq.n	80057e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800579a:	4b6f      	ldr	r3, [pc, #444]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a6e      	ldr	r2, [pc, #440]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 80057a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a6:	f7fc f95b 	bl	8001a60 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ae:	f7fc f957 	bl	8001a60 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e25b      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057c0:	4b65      	ldr	r3, [pc, #404]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f0      	beq.n	80057ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057cc:	4b62      	ldr	r3, [pc, #392]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	061b      	lsls	r3, r3, #24
 80057da:	495f      	ldr	r1, [pc, #380]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	604b      	str	r3, [r1, #4]
 80057e0:	e018      	b.n	8005814 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a5c      	ldr	r2, [pc, #368]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 80057e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ee:	f7fc f937 	bl	8001a60 <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057f6:	f7fc f933 	bl	8001a60 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e237      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005808:	4b53      	ldr	r3, [pc, #332]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f0      	bne.n	80057f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b00      	cmp	r3, #0
 800581e:	d03c      	beq.n	800589a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01c      	beq.n	8005862 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005828:	4b4b      	ldr	r3, [pc, #300]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 800582a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800582e:	4a4a      	ldr	r2, [pc, #296]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 8005830:	f043 0301 	orr.w	r3, r3, #1
 8005834:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005838:	f7fc f912 	bl	8001a60 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005840:	f7fc f90e 	bl	8001a60 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e212      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005852:	4b41      	ldr	r3, [pc, #260]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 8005854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0ef      	beq.n	8005840 <HAL_RCC_OscConfig+0x3ec>
 8005860:	e01b      	b.n	800589a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005862:	4b3d      	ldr	r3, [pc, #244]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 8005864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005868:	4a3b      	ldr	r2, [pc, #236]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 800586a:	f023 0301 	bic.w	r3, r3, #1
 800586e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005872:	f7fc f8f5 	bl	8001a60 <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800587a:	f7fc f8f1 	bl	8001a60 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e1f5      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800588c:	4b32      	ldr	r3, [pc, #200]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 800588e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1ef      	bne.n	800587a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80a6 	beq.w	80059f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058a8:	2300      	movs	r3, #0
 80058aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80058ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 80058ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10d      	bne.n	80058d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b8:	4b27      	ldr	r3, [pc, #156]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 80058ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058bc:	4a26      	ldr	r2, [pc, #152]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 80058be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80058c4:	4b24      	ldr	r3, [pc, #144]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 80058c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058cc:	60bb      	str	r3, [r7, #8]
 80058ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058d0:	2301      	movs	r3, #1
 80058d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058d4:	4b21      	ldr	r3, [pc, #132]	@ (800595c <HAL_RCC_OscConfig+0x508>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d118      	bne.n	8005912 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058e0:	4b1e      	ldr	r3, [pc, #120]	@ (800595c <HAL_RCC_OscConfig+0x508>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1d      	ldr	r2, [pc, #116]	@ (800595c <HAL_RCC_OscConfig+0x508>)
 80058e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ec:	f7fc f8b8 	bl	8001a60 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f4:	f7fc f8b4 	bl	8001a60 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e1b8      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005906:	4b15      	ldr	r3, [pc, #84]	@ (800595c <HAL_RCC_OscConfig+0x508>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d108      	bne.n	800592c <HAL_RCC_OscConfig+0x4d8>
 800591a:	4b0f      	ldr	r3, [pc, #60]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 800591c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005920:	4a0d      	ldr	r2, [pc, #52]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800592a:	e029      	b.n	8005980 <HAL_RCC_OscConfig+0x52c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b05      	cmp	r3, #5
 8005932:	d115      	bne.n	8005960 <HAL_RCC_OscConfig+0x50c>
 8005934:	4b08      	ldr	r3, [pc, #32]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593a:	4a07      	ldr	r2, [pc, #28]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 800593c:	f043 0304 	orr.w	r3, r3, #4
 8005940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005944:	4b04      	ldr	r3, [pc, #16]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 8005946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594a:	4a03      	ldr	r2, [pc, #12]	@ (8005958 <HAL_RCC_OscConfig+0x504>)
 800594c:	f043 0301 	orr.w	r3, r3, #1
 8005950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005954:	e014      	b.n	8005980 <HAL_RCC_OscConfig+0x52c>
 8005956:	bf00      	nop
 8005958:	40021000 	.word	0x40021000
 800595c:	40007000 	.word	0x40007000
 8005960:	4b9d      	ldr	r3, [pc, #628]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005966:	4a9c      	ldr	r2, [pc, #624]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005968:	f023 0301 	bic.w	r3, r3, #1
 800596c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005970:	4b99      	ldr	r3, [pc, #612]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005976:	4a98      	ldr	r2, [pc, #608]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005978:	f023 0304 	bic.w	r3, r3, #4
 800597c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d016      	beq.n	80059b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005988:	f7fc f86a 	bl	8001a60 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800598e:	e00a      	b.n	80059a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005990:	f7fc f866 	bl	8001a60 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599e:	4293      	cmp	r3, r2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e168      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059a6:	4b8c      	ldr	r3, [pc, #560]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 80059a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0ed      	beq.n	8005990 <HAL_RCC_OscConfig+0x53c>
 80059b4:	e015      	b.n	80059e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b6:	f7fc f853 	bl	8001a60 <HAL_GetTick>
 80059ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059bc:	e00a      	b.n	80059d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059be:	f7fc f84f 	bl	8001a60 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d901      	bls.n	80059d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e151      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059d4:	4b80      	ldr	r3, [pc, #512]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1ed      	bne.n	80059be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059e2:	7ffb      	ldrb	r3, [r7, #31]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d105      	bne.n	80059f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e8:	4b7b      	ldr	r3, [pc, #492]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 80059ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ec:	4a7a      	ldr	r2, [pc, #488]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 80059ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d03c      	beq.n	8005a7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01c      	beq.n	8005a42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a08:	4b73      	ldr	r3, [pc, #460]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a0e:	4a72      	ldr	r2, [pc, #456]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005a10:	f043 0301 	orr.w	r3, r3, #1
 8005a14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a18:	f7fc f822 	bl	8001a60 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a20:	f7fc f81e 	bl	8001a60 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e122      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a32:	4b69      	ldr	r3, [pc, #420]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005a34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0ef      	beq.n	8005a20 <HAL_RCC_OscConfig+0x5cc>
 8005a40:	e01b      	b.n	8005a7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a42:	4b65      	ldr	r3, [pc, #404]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a48:	4a63      	ldr	r2, [pc, #396]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a52:	f7fc f805 	bl	8001a60 <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a5a:	f7fc f801 	bl	8001a60 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e105      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a6c:	4b5a      	ldr	r3, [pc, #360]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1ef      	bne.n	8005a5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 80f9 	beq.w	8005c76 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	f040 80cf 	bne.w	8005c2c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a8e:	4b52      	ldr	r3, [pc, #328]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f003 0203 	and.w	r2, r3, #3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d12c      	bne.n	8005afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aac:	3b01      	subs	r3, #1
 8005aae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d123      	bne.n	8005afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005abe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d11b      	bne.n	8005afc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ace:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d113      	bne.n	8005afc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ade:	085b      	lsrs	r3, r3, #1
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d109      	bne.n	8005afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	3b01      	subs	r3, #1
 8005af6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d071      	beq.n	8005be0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b0c      	cmp	r3, #12
 8005b00:	d068      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b02:	4b35      	ldr	r3, [pc, #212]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d105      	bne.n	8005b1a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005b0e:	4b32      	ldr	r3, [pc, #200]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e0ac      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a2d      	ldr	r2, [pc, #180]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005b24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b2a:	f7fb ff99 	bl	8001a60 <HAL_GetTick>
 8005b2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b30:	e008      	b.n	8005b44 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b32:	f7fb ff95 	bl	8001a60 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e099      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b44:	4b24      	ldr	r3, [pc, #144]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1f0      	bne.n	8005b32 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b50:	4b21      	ldr	r3, [pc, #132]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	4b21      	ldr	r3, [pc, #132]	@ (8005bdc <HAL_RCC_OscConfig+0x788>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b60:	3a01      	subs	r2, #1
 8005b62:	0112      	lsls	r2, r2, #4
 8005b64:	4311      	orrs	r1, r2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b6a:	0212      	lsls	r2, r2, #8
 8005b6c:	4311      	orrs	r1, r2
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b72:	0852      	lsrs	r2, r2, #1
 8005b74:	3a01      	subs	r2, #1
 8005b76:	0552      	lsls	r2, r2, #21
 8005b78:	4311      	orrs	r1, r2
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005b7e:	0852      	lsrs	r2, r2, #1
 8005b80:	3a01      	subs	r2, #1
 8005b82:	0652      	lsls	r2, r2, #25
 8005b84:	4311      	orrs	r1, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b8a:	06d2      	lsls	r2, r2, #27
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	4912      	ldr	r1, [pc, #72]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b94:	4b10      	ldr	r3, [pc, #64]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a0f      	ldr	r2, [pc, #60]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005ba6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005baa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bac:	f7fb ff58 	bl	8001a60 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb4:	f7fb ff54 	bl	8001a60 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e058      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bc6:	4b04      	ldr	r3, [pc, #16]	@ (8005bd8 <HAL_RCC_OscConfig+0x784>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bd2:	e050      	b.n	8005c76 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e04f      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005be0:	4b27      	ldr	r3, [pc, #156]	@ (8005c80 <HAL_RCC_OscConfig+0x82c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d144      	bne.n	8005c76 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005bec:	4b24      	ldr	r3, [pc, #144]	@ (8005c80 <HAL_RCC_OscConfig+0x82c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a23      	ldr	r2, [pc, #140]	@ (8005c80 <HAL_RCC_OscConfig+0x82c>)
 8005bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bf8:	4b21      	ldr	r3, [pc, #132]	@ (8005c80 <HAL_RCC_OscConfig+0x82c>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	4a20      	ldr	r2, [pc, #128]	@ (8005c80 <HAL_RCC_OscConfig+0x82c>)
 8005bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c04:	f7fb ff2c 	bl	8001a60 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c0c:	f7fb ff28 	bl	8001a60 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e02c      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c1e:	4b18      	ldr	r3, [pc, #96]	@ (8005c80 <HAL_RCC_OscConfig+0x82c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0f0      	beq.n	8005c0c <HAL_RCC_OscConfig+0x7b8>
 8005c2a:	e024      	b.n	8005c76 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	2b0c      	cmp	r3, #12
 8005c30:	d01f      	beq.n	8005c72 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c32:	4b13      	ldr	r3, [pc, #76]	@ (8005c80 <HAL_RCC_OscConfig+0x82c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a12      	ldr	r2, [pc, #72]	@ (8005c80 <HAL_RCC_OscConfig+0x82c>)
 8005c38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3e:	f7fb ff0f 	bl	8001a60 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c46:	f7fb ff0b 	bl	8001a60 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e00f      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c58:	4b09      	ldr	r3, [pc, #36]	@ (8005c80 <HAL_RCC_OscConfig+0x82c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f0      	bne.n	8005c46 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c64:	4b06      	ldr	r3, [pc, #24]	@ (8005c80 <HAL_RCC_OscConfig+0x82c>)
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	4905      	ldr	r1, [pc, #20]	@ (8005c80 <HAL_RCC_OscConfig+0x82c>)
 8005c6a:	4b06      	ldr	r3, [pc, #24]	@ (8005c84 <HAL_RCC_OscConfig+0x830>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	60cb      	str	r3, [r1, #12]
 8005c70:	e001      	b.n	8005c76 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3720      	adds	r7, #32
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40021000 	.word	0x40021000
 8005c84:	feeefffc 	.word	0xfeeefffc

08005c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e11d      	b.n	8005edc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ca0:	4b90      	ldr	r3, [pc, #576]	@ (8005ee4 <HAL_RCC_ClockConfig+0x25c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d910      	bls.n	8005cd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cae:	4b8d      	ldr	r3, [pc, #564]	@ (8005ee4 <HAL_RCC_ClockConfig+0x25c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f023 020f 	bic.w	r2, r3, #15
 8005cb6:	498b      	ldr	r1, [pc, #556]	@ (8005ee4 <HAL_RCC_ClockConfig+0x25c>)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cbe:	4b89      	ldr	r3, [pc, #548]	@ (8005ee4 <HAL_RCC_ClockConfig+0x25c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d001      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e105      	b.n	8005edc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d010      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	4b81      	ldr	r3, [pc, #516]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d908      	bls.n	8005cfe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cec:	4b7e      	ldr	r3, [pc, #504]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	497b      	ldr	r1, [pc, #492]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d079      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d11e      	bne.n	8005d50 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d12:	4b75      	ldr	r3, [pc, #468]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e0dc      	b.n	8005edc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005d22:	f000 fa09 	bl	8006138 <RCC_GetSysClockFreqFromPLLSource>
 8005d26:	4603      	mov	r3, r0
 8005d28:	4a70      	ldr	r2, [pc, #448]	@ (8005eec <HAL_RCC_ClockConfig+0x264>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d946      	bls.n	8005dbc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005d2e:	4b6e      	ldr	r3, [pc, #440]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d140      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d3a:	4b6b      	ldr	r3, [pc, #428]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d42:	4a69      	ldr	r2, [pc, #420]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d4a:	2380      	movs	r3, #128	@ 0x80
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	e035      	b.n	8005dbc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d107      	bne.n	8005d68 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d58:	4b63      	ldr	r3, [pc, #396]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d115      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e0b9      	b.n	8005edc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d107      	bne.n	8005d80 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d70:	4b5d      	ldr	r3, [pc, #372]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d109      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e0ad      	b.n	8005edc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d80:	4b59      	ldr	r3, [pc, #356]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0a5      	b.n	8005edc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005d90:	f000 f8b4 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 8005d94:	4603      	mov	r3, r0
 8005d96:	4a55      	ldr	r2, [pc, #340]	@ (8005eec <HAL_RCC_ClockConfig+0x264>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d90f      	bls.n	8005dbc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005d9c:	4b52      	ldr	r3, [pc, #328]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d109      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005da8:	4b4f      	ldr	r3, [pc, #316]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005db0:	4a4d      	ldr	r2, [pc, #308]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005db6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005db8:	2380      	movs	r3, #128	@ 0x80
 8005dba:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dbc:	4b4a      	ldr	r3, [pc, #296]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f023 0203 	bic.w	r2, r3, #3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	4947      	ldr	r1, [pc, #284]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dce:	f7fb fe47 	bl	8001a60 <HAL_GetTick>
 8005dd2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd4:	e00a      	b.n	8005dec <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd6:	f7fb fe43 	bl	8001a60 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e077      	b.n	8005edc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dec:	4b3e      	ldr	r3, [pc, #248]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f003 020c 	and.w	r2, r3, #12
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d1eb      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b80      	cmp	r3, #128	@ 0x80
 8005e02:	d105      	bne.n	8005e10 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005e04:	4b38      	ldr	r3, [pc, #224]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	4a37      	ldr	r2, [pc, #220]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005e0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e0e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d010      	beq.n	8005e3e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	4b31      	ldr	r3, [pc, #196]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d208      	bcs.n	8005e3e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	492b      	ldr	r1, [pc, #172]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e3e:	4b29      	ldr	r3, [pc, #164]	@ (8005ee4 <HAL_RCC_ClockConfig+0x25c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d210      	bcs.n	8005e6e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ee4 <HAL_RCC_ClockConfig+0x25c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f023 020f 	bic.w	r2, r3, #15
 8005e54:	4923      	ldr	r1, [pc, #140]	@ (8005ee4 <HAL_RCC_ClockConfig+0x25c>)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5c:	4b21      	ldr	r3, [pc, #132]	@ (8005ee4 <HAL_RCC_ClockConfig+0x25c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d001      	beq.n	8005e6e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e036      	b.n	8005edc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	4918      	ldr	r1, [pc, #96]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d009      	beq.n	8005eac <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e98:	4b13      	ldr	r3, [pc, #76]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	4910      	ldr	r1, [pc, #64]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005eac:	f000 f826 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee8 <HAL_RCC_ClockConfig+0x260>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	091b      	lsrs	r3, r3, #4
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	490c      	ldr	r1, [pc, #48]	@ (8005ef0 <HAL_RCC_ClockConfig+0x268>)
 8005ebe:	5ccb      	ldrb	r3, [r1, r3]
 8005ec0:	f003 031f 	and.w	r3, r3, #31
 8005ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8005ef4 <HAL_RCC_ClockConfig+0x26c>)
 8005eca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef8 <HAL_RCC_ClockConfig+0x270>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fb fd75 	bl	80019c0 <HAL_InitTick>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	73fb      	strb	r3, [r7, #15]

  return status;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40022000 	.word	0x40022000
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	04c4b400 	.word	0x04c4b400
 8005ef0:	0800dacc 	.word	0x0800dacc
 8005ef4:	20000000 	.word	0x20000000
 8005ef8:	20000004 	.word	0x20000004

08005efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b089      	sub	sp, #36	@ 0x24
 8005f00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	61fb      	str	r3, [r7, #28]
 8005f06:	2300      	movs	r3, #0
 8005f08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006004 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
 8005f12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f14:	4b3b      	ldr	r3, [pc, #236]	@ (8006004 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_RCC_GetSysClockFreq+0x34>
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2b0c      	cmp	r3, #12
 8005f28:	d121      	bne.n	8005f6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d11e      	bne.n	8005f6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f30:	4b34      	ldr	r3, [pc, #208]	@ (8006004 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0308 	and.w	r3, r3, #8
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d107      	bne.n	8005f4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f3c:	4b31      	ldr	r3, [pc, #196]	@ (8006004 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f42:	0a1b      	lsrs	r3, r3, #8
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	61fb      	str	r3, [r7, #28]
 8005f4a:	e005      	b.n	8005f58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8006004 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	091b      	lsrs	r3, r3, #4
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f58:	4a2b      	ldr	r2, [pc, #172]	@ (8006008 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10d      	bne.n	8005f84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f6c:	e00a      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d102      	bne.n	8005f7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f74:	4b25      	ldr	r3, [pc, #148]	@ (800600c <HAL_RCC_GetSysClockFreq+0x110>)
 8005f76:	61bb      	str	r3, [r7, #24]
 8005f78:	e004      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d101      	bne.n	8005f84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f80:	4b23      	ldr	r3, [pc, #140]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2b0c      	cmp	r3, #12
 8005f88:	d134      	bne.n	8005ff4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8006004 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d003      	beq.n	8005fa2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d003      	beq.n	8005fa8 <HAL_RCC_GetSysClockFreq+0xac>
 8005fa0:	e005      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800600c <HAL_RCC_GetSysClockFreq+0x110>)
 8005fa4:	617b      	str	r3, [r7, #20]
      break;
 8005fa6:	e005      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005fa8:	4b19      	ldr	r3, [pc, #100]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x114>)
 8005faa:	617b      	str	r3, [r7, #20]
      break;
 8005fac:	e002      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	617b      	str	r3, [r7, #20]
      break;
 8005fb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fb4:	4b13      	ldr	r3, [pc, #76]	@ (8006004 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	091b      	lsrs	r3, r3, #4
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005fc2:	4b10      	ldr	r3, [pc, #64]	@ (8006004 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	0a1b      	lsrs	r3, r3, #8
 8005fc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	fb03 f202 	mul.w	r2, r3, r2
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fda:	4b0a      	ldr	r3, [pc, #40]	@ (8006004 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	0e5b      	lsrs	r3, r3, #25
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3724      	adds	r7, #36	@ 0x24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40021000 	.word	0x40021000
 8006008:	0800dae4 	.word	0x0800dae4
 800600c:	00f42400 	.word	0x00f42400
 8006010:	007a1200 	.word	0x007a1200

08006014 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006018:	4b03      	ldr	r3, [pc, #12]	@ (8006028 <HAL_RCC_GetHCLKFreq+0x14>)
 800601a:	681b      	ldr	r3, [r3, #0]
}
 800601c:	4618      	mov	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000000 	.word	0x20000000

0800602c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006030:	f7ff fff0 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 8006034:	4602      	mov	r2, r0
 8006036:	4b06      	ldr	r3, [pc, #24]	@ (8006050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	0a1b      	lsrs	r3, r3, #8
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	4904      	ldr	r1, [pc, #16]	@ (8006054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006042:	5ccb      	ldrb	r3, [r1, r3]
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800604c:	4618      	mov	r0, r3
 800604e:	bd80      	pop	{r7, pc}
 8006050:	40021000 	.word	0x40021000
 8006054:	0800dadc 	.word	0x0800dadc

08006058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800605c:	f7ff ffda 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 8006060:	4602      	mov	r2, r0
 8006062:	4b06      	ldr	r3, [pc, #24]	@ (800607c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	0adb      	lsrs	r3, r3, #11
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	4904      	ldr	r1, [pc, #16]	@ (8006080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800606e:	5ccb      	ldrb	r3, [r1, r3]
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006078:	4618      	mov	r0, r3
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40021000 	.word	0x40021000
 8006080:	0800dadc 	.word	0x0800dadc

08006084 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800608c:	2300      	movs	r3, #0
 800608e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006090:	4b27      	ldr	r3, [pc, #156]	@ (8006130 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800609c:	f7ff f8f6 	bl	800528c <HAL_PWREx_GetVoltageRange>
 80060a0:	6178      	str	r0, [r7, #20]
 80060a2:	e014      	b.n	80060ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060a4:	4b22      	ldr	r3, [pc, #136]	@ (8006130 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80060a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a8:	4a21      	ldr	r2, [pc, #132]	@ (8006130 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80060aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80060b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006130 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80060b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060bc:	f7ff f8e6 	bl	800528c <HAL_PWREx_GetVoltageRange>
 80060c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006130 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80060c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c6:	4a1a      	ldr	r2, [pc, #104]	@ (8006130 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80060c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060d4:	d10b      	bne.n	80060ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b80      	cmp	r3, #128	@ 0x80
 80060da:	d913      	bls.n	8006104 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2ba0      	cmp	r3, #160	@ 0xa0
 80060e0:	d902      	bls.n	80060e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060e2:	2302      	movs	r3, #2
 80060e4:	613b      	str	r3, [r7, #16]
 80060e6:	e00d      	b.n	8006104 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060e8:	2301      	movs	r3, #1
 80060ea:	613b      	str	r3, [r7, #16]
 80060ec:	e00a      	b.n	8006104 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80060f2:	d902      	bls.n	80060fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80060f4:	2302      	movs	r3, #2
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	e004      	b.n	8006104 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b70      	cmp	r3, #112	@ 0x70
 80060fe:	d101      	bne.n	8006104 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006100:	2301      	movs	r3, #1
 8006102:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006104:	4b0b      	ldr	r3, [pc, #44]	@ (8006134 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f023 020f 	bic.w	r2, r3, #15
 800610c:	4909      	ldr	r1, [pc, #36]	@ (8006134 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006114:	4b07      	ldr	r3, [pc, #28]	@ (8006134 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	429a      	cmp	r2, r3
 8006120:	d001      	beq.n	8006126 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40021000 	.word	0x40021000
 8006134:	40022000 	.word	0x40022000

08006138 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800613e:	4b2d      	ldr	r3, [pc, #180]	@ (80061f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b03      	cmp	r3, #3
 800614c:	d00b      	beq.n	8006166 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b03      	cmp	r3, #3
 8006152:	d825      	bhi.n	80061a0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d008      	beq.n	800616c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d11f      	bne.n	80061a0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006160:	4b25      	ldr	r3, [pc, #148]	@ (80061f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006162:	613b      	str	r3, [r7, #16]
    break;
 8006164:	e01f      	b.n	80061a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006166:	4b25      	ldr	r3, [pc, #148]	@ (80061fc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006168:	613b      	str	r3, [r7, #16]
    break;
 800616a:	e01c      	b.n	80061a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800616c:	4b21      	ldr	r3, [pc, #132]	@ (80061f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	2b00      	cmp	r3, #0
 8006176:	d107      	bne.n	8006188 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006178:	4b1e      	ldr	r3, [pc, #120]	@ (80061f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800617a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800617e:	0a1b      	lsrs	r3, r3, #8
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	e005      	b.n	8006194 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006188:	4b1a      	ldr	r3, [pc, #104]	@ (80061f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	091b      	lsrs	r3, r3, #4
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006194:	4a1a      	ldr	r2, [pc, #104]	@ (8006200 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619c:	613b      	str	r3, [r7, #16]
    break;
 800619e:	e002      	b.n	80061a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	613b      	str	r3, [r7, #16]
    break;
 80061a4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061a6:	4b13      	ldr	r3, [pc, #76]	@ (80061f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	091b      	lsrs	r3, r3, #4
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	3301      	adds	r3, #1
 80061b2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80061b4:	4b0f      	ldr	r3, [pc, #60]	@ (80061f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	0a1b      	lsrs	r3, r3, #8
 80061ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	fb03 f202 	mul.w	r2, r3, r2
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ca:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061cc:	4b09      	ldr	r3, [pc, #36]	@ (80061f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	0e5b      	lsrs	r3, r3, #25
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	3301      	adds	r3, #1
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80061e6:	683b      	ldr	r3, [r7, #0]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	40021000 	.word	0x40021000
 80061f8:	00f42400 	.word	0x00f42400
 80061fc:	007a1200 	.word	0x007a1200
 8006200:	0800dae4 	.word	0x0800dae4

08006204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800620c:	2300      	movs	r3, #0
 800620e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006210:	2300      	movs	r3, #0
 8006212:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800621c:	2b00      	cmp	r3, #0
 800621e:	d040      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006224:	2b80      	cmp	r3, #128	@ 0x80
 8006226:	d02a      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006228:	2b80      	cmp	r3, #128	@ 0x80
 800622a:	d825      	bhi.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800622c:	2b60      	cmp	r3, #96	@ 0x60
 800622e:	d026      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006230:	2b60      	cmp	r3, #96	@ 0x60
 8006232:	d821      	bhi.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006234:	2b40      	cmp	r3, #64	@ 0x40
 8006236:	d006      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006238:	2b40      	cmp	r3, #64	@ 0x40
 800623a:	d81d      	bhi.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006240:	2b20      	cmp	r3, #32
 8006242:	d010      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006244:	e018      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006246:	4b89      	ldr	r3, [pc, #548]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	4a88      	ldr	r2, [pc, #544]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800624c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006250:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006252:	e015      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3304      	adds	r3, #4
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fb02 	bl	8006864 <RCCEx_PLLSAI1_Config>
 8006260:	4603      	mov	r3, r0
 8006262:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006264:	e00c      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3320      	adds	r3, #32
 800626a:	2100      	movs	r1, #0
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fbed 	bl	8006a4c <RCCEx_PLLSAI2_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006276:	e003      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	74fb      	strb	r3, [r7, #19]
      break;
 800627c:	e000      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800627e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006280:	7cfb      	ldrb	r3, [r7, #19]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10b      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006286:	4b79      	ldr	r3, [pc, #484]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006288:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800628c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006294:	4975      	ldr	r1, [pc, #468]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006296:	4313      	orrs	r3, r2
 8006298:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800629c:	e001      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629e:	7cfb      	ldrb	r3, [r7, #19]
 80062a0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d047      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062b6:	d030      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80062b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062bc:	d82a      	bhi.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80062be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062c2:	d02a      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80062c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062c8:	d824      	bhi.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80062ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ce:	d008      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80062d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062d4:	d81e      	bhi.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80062da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062de:	d010      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80062e0:	e018      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062e2:	4b62      	ldr	r3, [pc, #392]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	4a61      	ldr	r2, [pc, #388]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ec:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062ee:	e015      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3304      	adds	r3, #4
 80062f4:	2100      	movs	r1, #0
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fab4 	bl	8006864 <RCCEx_PLLSAI1_Config>
 80062fc:	4603      	mov	r3, r0
 80062fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006300:	e00c      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3320      	adds	r3, #32
 8006306:	2100      	movs	r1, #0
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fb9f 	bl	8006a4c <RCCEx_PLLSAI2_Config>
 800630e:	4603      	mov	r3, r0
 8006310:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006312:	e003      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	74fb      	strb	r3, [r7, #19]
      break;
 8006318:	e000      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800631a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800631c:	7cfb      	ldrb	r3, [r7, #19]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10b      	bne.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006322:	4b52      	ldr	r3, [pc, #328]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006324:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006328:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006330:	494e      	ldr	r1, [pc, #312]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006338:	e001      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633a:	7cfb      	ldrb	r3, [r7, #19]
 800633c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 809f 	beq.w	800648a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800634c:	2300      	movs	r3, #0
 800634e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006350:	4b46      	ldr	r3, [pc, #280]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800635c:	2301      	movs	r3, #1
 800635e:	e000      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006360:	2300      	movs	r3, #0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00d      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006366:	4b41      	ldr	r3, [pc, #260]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636a:	4a40      	ldr	r2, [pc, #256]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800636c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006370:	6593      	str	r3, [r2, #88]	@ 0x58
 8006372:	4b3e      	ldr	r3, [pc, #248]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800637a:	60bb      	str	r3, [r7, #8]
 800637c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800637e:	2301      	movs	r3, #1
 8006380:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006382:	4b3b      	ldr	r3, [pc, #236]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a3a      	ldr	r2, [pc, #232]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800638c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800638e:	f7fb fb67 	bl	8001a60 <HAL_GetTick>
 8006392:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006394:	e009      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006396:	f7fb fb63 	bl	8001a60 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d902      	bls.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	74fb      	strb	r3, [r7, #19]
        break;
 80063a8:	e005      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80063aa:	4b31      	ldr	r3, [pc, #196]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0ef      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80063b6:	7cfb      	ldrb	r3, [r7, #19]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d15b      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063bc:	4b2b      	ldr	r3, [pc, #172]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063c6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d01f      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d019      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063da:	4b24      	ldr	r3, [pc, #144]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063e6:	4b21      	ldr	r3, [pc, #132]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ec:	4a1f      	ldr	r2, [pc, #124]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063f6:	4b1d      	ldr	r3, [pc, #116]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063fc:	4a1b      	ldr	r2, [pc, #108]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006402:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006406:	4a19      	ldr	r2, [pc, #100]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d016      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006418:	f7fb fb22 	bl	8001a60 <HAL_GetTick>
 800641c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800641e:	e00b      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006420:	f7fb fb1e 	bl	8001a60 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800642e:	4293      	cmp	r3, r2
 8006430:	d902      	bls.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	74fb      	strb	r3, [r7, #19]
            break;
 8006436:	e006      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006438:	4b0c      	ldr	r3, [pc, #48]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0ec      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006446:	7cfb      	ldrb	r3, [r7, #19]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10c      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800644c:	4b07      	ldr	r3, [pc, #28]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006452:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645c:	4903      	ldr	r1, [pc, #12]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800645e:	4313      	orrs	r3, r2
 8006460:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006464:	e008      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006466:	7cfb      	ldrb	r3, [r7, #19]
 8006468:	74bb      	strb	r3, [r7, #18]
 800646a:	e005      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800646c:	40021000 	.word	0x40021000
 8006470:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006474:	7cfb      	ldrb	r3, [r7, #19]
 8006476:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006478:	7c7b      	ldrb	r3, [r7, #17]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d105      	bne.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800647e:	4ba0      	ldr	r3, [pc, #640]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006482:	4a9f      	ldr	r2, [pc, #636]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006488:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006496:	4b9a      	ldr	r3, [pc, #616]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800649c:	f023 0203 	bic.w	r2, r3, #3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a4:	4996      	ldr	r1, [pc, #600]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064b8:	4b91      	ldr	r3, [pc, #580]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064be:	f023 020c 	bic.w	r2, r3, #12
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c6:	498e      	ldr	r1, [pc, #568]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0304 	and.w	r3, r3, #4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064da:	4b89      	ldr	r3, [pc, #548]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e8:	4985      	ldr	r1, [pc, #532]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064fc:	4b80      	ldr	r3, [pc, #512]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006502:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800650a:	497d      	ldr	r1, [pc, #500]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800650c:	4313      	orrs	r3, r2
 800650e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0310 	and.w	r3, r3, #16
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800651e:	4b78      	ldr	r3, [pc, #480]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006524:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800652c:	4974      	ldr	r1, [pc, #464]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006540:	4b6f      	ldr	r3, [pc, #444]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006546:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800654e:	496c      	ldr	r1, [pc, #432]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006562:	4b67      	ldr	r3, [pc, #412]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006568:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006570:	4963      	ldr	r1, [pc, #396]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006572:	4313      	orrs	r3, r2
 8006574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00a      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006584:	4b5e      	ldr	r3, [pc, #376]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006592:	495b      	ldr	r1, [pc, #364]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065a6:	4b56      	ldr	r3, [pc, #344]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b4:	4952      	ldr	r1, [pc, #328]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065c8:	4b4d      	ldr	r3, [pc, #308]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065d6:	494a      	ldr	r1, [pc, #296]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065ea:	4b45      	ldr	r3, [pc, #276]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065f8:	4941      	ldr	r1, [pc, #260]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800660c:	4b3c      	ldr	r3, [pc, #240]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800660e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006612:	f023 0203 	bic.w	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800661a:	4939      	ldr	r1, [pc, #228]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800661c:	4313      	orrs	r3, r2
 800661e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d028      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800662e:	4b34      	ldr	r3, [pc, #208]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006634:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800663c:	4930      	ldr	r1, [pc, #192]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800663e:	4313      	orrs	r3, r2
 8006640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800664c:	d106      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800664e:	4b2c      	ldr	r3, [pc, #176]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	4a2b      	ldr	r2, [pc, #172]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006658:	60d3      	str	r3, [r2, #12]
 800665a:	e011      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006660:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006664:	d10c      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	2101      	movs	r1, #1
 800666c:	4618      	mov	r0, r3
 800666e:	f000 f8f9 	bl	8006864 <RCCEx_PLLSAI1_Config>
 8006672:	4603      	mov	r3, r0
 8006674:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006676:	7cfb      	ldrb	r3, [r7, #19]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800667c:	7cfb      	ldrb	r3, [r7, #19]
 800667e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d04d      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006690:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006694:	d108      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006696:	4b1a      	ldr	r3, [pc, #104]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006698:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800669c:	4a18      	ldr	r2, [pc, #96]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800669e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066a2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80066a6:	e012      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80066a8:	4b15      	ldr	r3, [pc, #84]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066ae:	4a14      	ldr	r2, [pc, #80]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066b4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80066b8:	4b11      	ldr	r3, [pc, #68]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066c6:	490e      	ldr	r1, [pc, #56]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066d6:	d106      	bne.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066d8:	4b09      	ldr	r3, [pc, #36]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	4a08      	ldr	r2, [pc, #32]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066e2:	60d3      	str	r3, [r2, #12]
 80066e4:	e020      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066ee:	d109      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80066f0:	4b03      	ldr	r3, [pc, #12]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	4a02      	ldr	r2, [pc, #8]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066fa:	60d3      	str	r3, [r2, #12]
 80066fc:	e014      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80066fe:	bf00      	nop
 8006700:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006708:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800670c:	d10c      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3304      	adds	r3, #4
 8006712:	2101      	movs	r1, #1
 8006714:	4618      	mov	r0, r3
 8006716:	f000 f8a5 	bl	8006864 <RCCEx_PLLSAI1_Config>
 800671a:	4603      	mov	r3, r0
 800671c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800671e:	7cfb      	ldrb	r3, [r7, #19]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006724:	7cfb      	ldrb	r3, [r7, #19]
 8006726:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d028      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006734:	4b4a      	ldr	r3, [pc, #296]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800673a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006742:	4947      	ldr	r1, [pc, #284]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006744:	4313      	orrs	r3, r2
 8006746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800674e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006752:	d106      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006754:	4b42      	ldr	r3, [pc, #264]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	4a41      	ldr	r2, [pc, #260]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800675a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800675e:	60d3      	str	r3, [r2, #12]
 8006760:	e011      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006766:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800676a:	d10c      	bne.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3304      	adds	r3, #4
 8006770:	2101      	movs	r1, #1
 8006772:	4618      	mov	r0, r3
 8006774:	f000 f876 	bl	8006864 <RCCEx_PLLSAI1_Config>
 8006778:	4603      	mov	r3, r0
 800677a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800677c:	7cfb      	ldrb	r3, [r7, #19]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006782:	7cfb      	ldrb	r3, [r7, #19]
 8006784:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d01e      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006792:	4b33      	ldr	r3, [pc, #204]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006798:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067a2:	492f      	ldr	r1, [pc, #188]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067b4:	d10c      	bne.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3304      	adds	r3, #4
 80067ba:	2102      	movs	r1, #2
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 f851 	bl	8006864 <RCCEx_PLLSAI1_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067c6:	7cfb      	ldrb	r3, [r7, #19]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80067cc:	7cfb      	ldrb	r3, [r7, #19]
 80067ce:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00b      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067dc:	4b20      	ldr	r3, [pc, #128]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067e2:	f023 0204 	bic.w	r2, r3, #4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067ec:	491c      	ldr	r1, [pc, #112]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006800:	4b17      	ldr	r3, [pc, #92]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006802:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006806:	f023 0218 	bic.w	r2, r3, #24
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006810:	4913      	ldr	r1, [pc, #76]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006812:	4313      	orrs	r3, r2
 8006814:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d017      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006824:	4b0e      	ldr	r3, [pc, #56]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006826:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800682a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006834:	490a      	ldr	r1, [pc, #40]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006836:	4313      	orrs	r3, r2
 8006838:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006842:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006846:	d105      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006848:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	4a04      	ldr	r2, [pc, #16]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800684e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006852:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006854:	7cbb      	ldrb	r3, [r7, #18]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40021000 	.word	0x40021000

08006864 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006872:	4b72      	ldr	r3, [pc, #456]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f003 0303 	and.w	r3, r3, #3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00e      	beq.n	800689c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800687e:	4b6f      	ldr	r3, [pc, #444]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f003 0203 	and.w	r2, r3, #3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d103      	bne.n	8006896 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
       ||
 8006892:	2b00      	cmp	r3, #0
 8006894:	d142      	bne.n	800691c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	73fb      	strb	r3, [r7, #15]
 800689a:	e03f      	b.n	800691c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d018      	beq.n	80068d6 <RCCEx_PLLSAI1_Config+0x72>
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d825      	bhi.n	80068f4 <RCCEx_PLLSAI1_Config+0x90>
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d002      	beq.n	80068b2 <RCCEx_PLLSAI1_Config+0x4e>
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d009      	beq.n	80068c4 <RCCEx_PLLSAI1_Config+0x60>
 80068b0:	e020      	b.n	80068f4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068b2:	4b62      	ldr	r3, [pc, #392]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d11d      	bne.n	80068fa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068c2:	e01a      	b.n	80068fa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068c4:	4b5d      	ldr	r3, [pc, #372]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d116      	bne.n	80068fe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068d4:	e013      	b.n	80068fe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068d6:	4b59      	ldr	r3, [pc, #356]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10f      	bne.n	8006902 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80068e2:	4b56      	ldr	r3, [pc, #344]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068f2:	e006      	b.n	8006902 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	73fb      	strb	r3, [r7, #15]
      break;
 80068f8:	e004      	b.n	8006904 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80068fa:	bf00      	nop
 80068fc:	e002      	b.n	8006904 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80068fe:	bf00      	nop
 8006900:	e000      	b.n	8006904 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006902:	bf00      	nop
    }

    if(status == HAL_OK)
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d108      	bne.n	800691c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800690a:	4b4c      	ldr	r3, [pc, #304]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f023 0203 	bic.w	r2, r3, #3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4949      	ldr	r1, [pc, #292]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006918:	4313      	orrs	r3, r2
 800691a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 8086 	bne.w	8006a30 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006924:	4b45      	ldr	r3, [pc, #276]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a44      	ldr	r2, [pc, #272]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 800692a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800692e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006930:	f7fb f896 	bl	8001a60 <HAL_GetTick>
 8006934:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006936:	e009      	b.n	800694c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006938:	f7fb f892 	bl	8001a60 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d902      	bls.n	800694c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	73fb      	strb	r3, [r7, #15]
        break;
 800694a:	e005      	b.n	8006958 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800694c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1ef      	bne.n	8006938 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d168      	bne.n	8006a30 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d113      	bne.n	800698c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006964:	4b35      	ldr	r3, [pc, #212]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006966:	691a      	ldr	r2, [r3, #16]
 8006968:	4b35      	ldr	r3, [pc, #212]	@ (8006a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 800696a:	4013      	ands	r3, r2
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6892      	ldr	r2, [r2, #8]
 8006970:	0211      	lsls	r1, r2, #8
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	68d2      	ldr	r2, [r2, #12]
 8006976:	06d2      	lsls	r2, r2, #27
 8006978:	4311      	orrs	r1, r2
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6852      	ldr	r2, [r2, #4]
 800697e:	3a01      	subs	r2, #1
 8006980:	0112      	lsls	r2, r2, #4
 8006982:	430a      	orrs	r2, r1
 8006984:	492d      	ldr	r1, [pc, #180]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006986:	4313      	orrs	r3, r2
 8006988:	610b      	str	r3, [r1, #16]
 800698a:	e02d      	b.n	80069e8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d115      	bne.n	80069be <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006992:	4b2a      	ldr	r3, [pc, #168]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006994:	691a      	ldr	r2, [r3, #16]
 8006996:	4b2b      	ldr	r3, [pc, #172]	@ (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006998:	4013      	ands	r3, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6892      	ldr	r2, [r2, #8]
 800699e:	0211      	lsls	r1, r2, #8
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6912      	ldr	r2, [r2, #16]
 80069a4:	0852      	lsrs	r2, r2, #1
 80069a6:	3a01      	subs	r2, #1
 80069a8:	0552      	lsls	r2, r2, #21
 80069aa:	4311      	orrs	r1, r2
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6852      	ldr	r2, [r2, #4]
 80069b0:	3a01      	subs	r2, #1
 80069b2:	0112      	lsls	r2, r2, #4
 80069b4:	430a      	orrs	r2, r1
 80069b6:	4921      	ldr	r1, [pc, #132]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	610b      	str	r3, [r1, #16]
 80069bc:	e014      	b.n	80069e8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069be:	4b1f      	ldr	r3, [pc, #124]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	4b21      	ldr	r3, [pc, #132]	@ (8006a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6892      	ldr	r2, [r2, #8]
 80069ca:	0211      	lsls	r1, r2, #8
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6952      	ldr	r2, [r2, #20]
 80069d0:	0852      	lsrs	r2, r2, #1
 80069d2:	3a01      	subs	r2, #1
 80069d4:	0652      	lsls	r2, r2, #25
 80069d6:	4311      	orrs	r1, r2
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6852      	ldr	r2, [r2, #4]
 80069dc:	3a01      	subs	r2, #1
 80069de:	0112      	lsls	r2, r2, #4
 80069e0:	430a      	orrs	r2, r1
 80069e2:	4916      	ldr	r1, [pc, #88]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80069e8:	4b14      	ldr	r3, [pc, #80]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a13      	ldr	r2, [pc, #76]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80069ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f4:	f7fb f834 	bl	8001a60 <HAL_GetTick>
 80069f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069fa:	e009      	b.n	8006a10 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069fc:	f7fb f830 	bl	8001a60 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d902      	bls.n	8006a10 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	73fb      	strb	r3, [r7, #15]
          break;
 8006a0e:	e005      	b.n	8006a1c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a10:	4b0a      	ldr	r3, [pc, #40]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0ef      	beq.n	80069fc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d106      	bne.n	8006a30 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006a22:	4b06      	ldr	r3, [pc, #24]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	4904      	ldr	r1, [pc, #16]	@ (8006a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40021000 	.word	0x40021000
 8006a40:	07ff800f 	.word	0x07ff800f
 8006a44:	ff9f800f 	.word	0xff9f800f
 8006a48:	f9ff800f 	.word	0xf9ff800f

08006a4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a5a:	4b72      	ldr	r3, [pc, #456]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00e      	beq.n	8006a84 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006a66:	4b6f      	ldr	r3, [pc, #444]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f003 0203 	and.w	r2, r3, #3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d103      	bne.n	8006a7e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
       ||
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d142      	bne.n	8006b04 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	73fb      	strb	r3, [r7, #15]
 8006a82:	e03f      	b.n	8006b04 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d018      	beq.n	8006abe <RCCEx_PLLSAI2_Config+0x72>
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d825      	bhi.n	8006adc <RCCEx_PLLSAI2_Config+0x90>
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d002      	beq.n	8006a9a <RCCEx_PLLSAI2_Config+0x4e>
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d009      	beq.n	8006aac <RCCEx_PLLSAI2_Config+0x60>
 8006a98:	e020      	b.n	8006adc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a9a:	4b62      	ldr	r3, [pc, #392]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d11d      	bne.n	8006ae2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006aaa:	e01a      	b.n	8006ae2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006aac:	4b5d      	ldr	r3, [pc, #372]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d116      	bne.n	8006ae6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006abc:	e013      	b.n	8006ae6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006abe:	4b59      	ldr	r3, [pc, #356]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10f      	bne.n	8006aea <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006aca:	4b56      	ldr	r3, [pc, #344]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d109      	bne.n	8006aea <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ada:	e006      	b.n	8006aea <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae0:	e004      	b.n	8006aec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ae2:	bf00      	nop
 8006ae4:	e002      	b.n	8006aec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ae6:	bf00      	nop
 8006ae8:	e000      	b.n	8006aec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006aea:	bf00      	nop
    }

    if(status == HAL_OK)
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d108      	bne.n	8006b04 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006af2:	4b4c      	ldr	r3, [pc, #304]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f023 0203 	bic.w	r2, r3, #3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4949      	ldr	r1, [pc, #292]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f040 8086 	bne.w	8006c18 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006b0c:	4b45      	ldr	r3, [pc, #276]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a44      	ldr	r2, [pc, #272]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b18:	f7fa ffa2 	bl	8001a60 <HAL_GetTick>
 8006b1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b1e:	e009      	b.n	8006b34 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b20:	f7fa ff9e 	bl	8001a60 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d902      	bls.n	8006b34 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	73fb      	strb	r3, [r7, #15]
        break;
 8006b32:	e005      	b.n	8006b40 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b34:	4b3b      	ldr	r3, [pc, #236]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1ef      	bne.n	8006b20 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d168      	bne.n	8006c18 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d113      	bne.n	8006b74 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b4c:	4b35      	ldr	r3, [pc, #212]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b4e:	695a      	ldr	r2, [r3, #20]
 8006b50:	4b35      	ldr	r3, [pc, #212]	@ (8006c28 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006b52:	4013      	ands	r3, r2
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	6892      	ldr	r2, [r2, #8]
 8006b58:	0211      	lsls	r1, r2, #8
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	68d2      	ldr	r2, [r2, #12]
 8006b5e:	06d2      	lsls	r2, r2, #27
 8006b60:	4311      	orrs	r1, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6852      	ldr	r2, [r2, #4]
 8006b66:	3a01      	subs	r2, #1
 8006b68:	0112      	lsls	r2, r2, #4
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	492d      	ldr	r1, [pc, #180]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	614b      	str	r3, [r1, #20]
 8006b72:	e02d      	b.n	8006bd0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d115      	bne.n	8006ba6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b7c:	695a      	ldr	r2, [r3, #20]
 8006b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8006c2c <RCCEx_PLLSAI2_Config+0x1e0>)
 8006b80:	4013      	ands	r3, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6892      	ldr	r2, [r2, #8]
 8006b86:	0211      	lsls	r1, r2, #8
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6912      	ldr	r2, [r2, #16]
 8006b8c:	0852      	lsrs	r2, r2, #1
 8006b8e:	3a01      	subs	r2, #1
 8006b90:	0552      	lsls	r2, r2, #21
 8006b92:	4311      	orrs	r1, r2
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6852      	ldr	r2, [r2, #4]
 8006b98:	3a01      	subs	r2, #1
 8006b9a:	0112      	lsls	r2, r2, #4
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	4921      	ldr	r1, [pc, #132]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	614b      	str	r3, [r1, #20]
 8006ba4:	e014      	b.n	8006bd0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ba8:	695a      	ldr	r2, [r3, #20]
 8006baa:	4b21      	ldr	r3, [pc, #132]	@ (8006c30 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006bac:	4013      	ands	r3, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6892      	ldr	r2, [r2, #8]
 8006bb2:	0211      	lsls	r1, r2, #8
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6952      	ldr	r2, [r2, #20]
 8006bb8:	0852      	lsrs	r2, r2, #1
 8006bba:	3a01      	subs	r2, #1
 8006bbc:	0652      	lsls	r2, r2, #25
 8006bbe:	4311      	orrs	r1, r2
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6852      	ldr	r2, [r2, #4]
 8006bc4:	3a01      	subs	r2, #1
 8006bc6:	0112      	lsls	r2, r2, #4
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	4916      	ldr	r1, [pc, #88]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006bd0:	4b14      	ldr	r3, [pc, #80]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a13      	ldr	r2, [pc, #76]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bdc:	f7fa ff40 	bl	8001a60 <HAL_GetTick>
 8006be0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006be2:	e009      	b.n	8006bf8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006be4:	f7fa ff3c 	bl	8001a60 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d902      	bls.n	8006bf8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	73fb      	strb	r3, [r7, #15]
          break;
 8006bf6:	e005      	b.n	8006c04 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0ef      	beq.n	8006be4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006c0a:	4b06      	ldr	r3, [pc, #24]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c0c:	695a      	ldr	r2, [r3, #20]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	4904      	ldr	r1, [pc, #16]	@ (8006c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	40021000 	.word	0x40021000
 8006c28:	07ff800f 	.word	0x07ff800f
 8006c2c:	ff9f800f 	.word	0xff9f800f
 8006c30:	f9ff800f 	.word	0xf9ff800f

08006c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e049      	b.n	8006cda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d106      	bne.n	8006c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fa fcd2 	bl	8001604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	4619      	mov	r1, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	f000 fb02 	bl	800727c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
	...

08006ce4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d001      	beq.n	8006cfc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e047      	b.n	8006d8c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a23      	ldr	r2, [pc, #140]	@ (8006d98 <HAL_TIM_Base_Start+0xb4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d01d      	beq.n	8006d4a <HAL_TIM_Base_Start+0x66>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d16:	d018      	beq.n	8006d4a <HAL_TIM_Base_Start+0x66>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8006d9c <HAL_TIM_Base_Start+0xb8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d013      	beq.n	8006d4a <HAL_TIM_Base_Start+0x66>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1e      	ldr	r2, [pc, #120]	@ (8006da0 <HAL_TIM_Base_Start+0xbc>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00e      	beq.n	8006d4a <HAL_TIM_Base_Start+0x66>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a1c      	ldr	r2, [pc, #112]	@ (8006da4 <HAL_TIM_Base_Start+0xc0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d009      	beq.n	8006d4a <HAL_TIM_Base_Start+0x66>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8006da8 <HAL_TIM_Base_Start+0xc4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d004      	beq.n	8006d4a <HAL_TIM_Base_Start+0x66>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a19      	ldr	r2, [pc, #100]	@ (8006dac <HAL_TIM_Base_Start+0xc8>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d115      	bne.n	8006d76 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	4b17      	ldr	r3, [pc, #92]	@ (8006db0 <HAL_TIM_Base_Start+0xcc>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b06      	cmp	r3, #6
 8006d5a:	d015      	beq.n	8006d88 <HAL_TIM_Base_Start+0xa4>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d62:	d011      	beq.n	8006d88 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d74:	e008      	b.n	8006d88 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0201 	orr.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	e000      	b.n	8006d8a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	40012c00 	.word	0x40012c00
 8006d9c:	40000400 	.word	0x40000400
 8006da0:	40000800 	.word	0x40000800
 8006da4:	40000c00 	.word	0x40000c00
 8006da8:	40013400 	.word	0x40013400
 8006dac:	40014000 	.word	0x40014000
 8006db0:	00010007 	.word	0x00010007

08006db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d001      	beq.n	8006dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e04f      	b.n	8006e6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0201 	orr.w	r2, r2, #1
 8006de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a23      	ldr	r2, [pc, #140]	@ (8006e78 <HAL_TIM_Base_Start_IT+0xc4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d01d      	beq.n	8006e2a <HAL_TIM_Base_Start_IT+0x76>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006df6:	d018      	beq.n	8006e2a <HAL_TIM_Base_Start_IT+0x76>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8006e7c <HAL_TIM_Base_Start_IT+0xc8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_TIM_Base_Start_IT+0x76>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1e      	ldr	r2, [pc, #120]	@ (8006e80 <HAL_TIM_Base_Start_IT+0xcc>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00e      	beq.n	8006e2a <HAL_TIM_Base_Start_IT+0x76>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a1c      	ldr	r2, [pc, #112]	@ (8006e84 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_TIM_Base_Start_IT+0x76>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006e88 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <HAL_TIM_Base_Start_IT+0x76>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a19      	ldr	r2, [pc, #100]	@ (8006e8c <HAL_TIM_Base_Start_IT+0xd8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d115      	bne.n	8006e56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	4b17      	ldr	r3, [pc, #92]	@ (8006e90 <HAL_TIM_Base_Start_IT+0xdc>)
 8006e32:	4013      	ands	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b06      	cmp	r3, #6
 8006e3a:	d015      	beq.n	8006e68 <HAL_TIM_Base_Start_IT+0xb4>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e42:	d011      	beq.n	8006e68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0201 	orr.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e54:	e008      	b.n	8006e68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0201 	orr.w	r2, r2, #1
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	e000      	b.n	8006e6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr
 8006e78:	40012c00 	.word	0x40012c00
 8006e7c:	40000400 	.word	0x40000400
 8006e80:	40000800 	.word	0x40000800
 8006e84:	40000c00 	.word	0x40000c00
 8006e88:	40013400 	.word	0x40013400
 8006e8c:	40014000 	.word	0x40014000
 8006e90:	00010007 	.word	0x00010007

08006e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d020      	beq.n	8006ef8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01b      	beq.n	8006ef8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f06f 0202 	mvn.w	r2, #2
 8006ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	f003 0303 	and.w	r3, r3, #3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f9ad 	bl	800723e <HAL_TIM_IC_CaptureCallback>
 8006ee4:	e005      	b.n	8006ef2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f99f 	bl	800722a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f9b0 	bl	8007252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f003 0304 	and.w	r3, r3, #4
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d020      	beq.n	8006f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d01b      	beq.n	8006f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f06f 0204 	mvn.w	r2, #4
 8006f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f987 	bl	800723e <HAL_TIM_IC_CaptureCallback>
 8006f30:	e005      	b.n	8006f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f979 	bl	800722a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f98a 	bl	8007252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d020      	beq.n	8006f90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f003 0308 	and.w	r3, r3, #8
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01b      	beq.n	8006f90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f06f 0208 	mvn.w	r2, #8
 8006f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2204      	movs	r2, #4
 8006f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f961 	bl	800723e <HAL_TIM_IC_CaptureCallback>
 8006f7c:	e005      	b.n	8006f8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f953 	bl	800722a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f964 	bl	8007252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d020      	beq.n	8006fdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f003 0310 	and.w	r3, r3, #16
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01b      	beq.n	8006fdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f06f 0210 	mvn.w	r2, #16
 8006fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2208      	movs	r2, #8
 8006fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f93b 	bl	800723e <HAL_TIM_IC_CaptureCallback>
 8006fc8:	e005      	b.n	8006fd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f92d 	bl	800722a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f93e 	bl	8007252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00c      	beq.n	8007000 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d007      	beq.n	8007000 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f06f 0201 	mvn.w	r2, #1
 8006ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7f9 ff68 	bl	8000ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00c      	beq.n	8007024 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007010:	2b00      	cmp	r3, #0
 8007012:	d007      	beq.n	8007024 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800701c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 faf2 	bl	8007608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00c      	beq.n	8007048 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007034:	2b00      	cmp	r3, #0
 8007036:	d007      	beq.n	8007048 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 faea 	bl	800761c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00c      	beq.n	800706c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007058:	2b00      	cmp	r3, #0
 800705a:	d007      	beq.n	800706c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f8fd 	bl	8007266 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00c      	beq.n	8007090 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b00      	cmp	r3, #0
 800707e:	d007      	beq.n	8007090 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f06f 0220 	mvn.w	r2, #32
 8007088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fab2 	bl	80075f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007090:	bf00      	nop
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d101      	bne.n	80070b4 <HAL_TIM_ConfigClockSource+0x1c>
 80070b0:	2302      	movs	r3, #2
 80070b2:	e0b6      	b.n	8007222 <HAL_TIM_ConfigClockSource+0x18a>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80070d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070f0:	d03e      	beq.n	8007170 <HAL_TIM_ConfigClockSource+0xd8>
 80070f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070f6:	f200 8087 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x170>
 80070fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070fe:	f000 8086 	beq.w	800720e <HAL_TIM_ConfigClockSource+0x176>
 8007102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007106:	d87f      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x170>
 8007108:	2b70      	cmp	r3, #112	@ 0x70
 800710a:	d01a      	beq.n	8007142 <HAL_TIM_ConfigClockSource+0xaa>
 800710c:	2b70      	cmp	r3, #112	@ 0x70
 800710e:	d87b      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x170>
 8007110:	2b60      	cmp	r3, #96	@ 0x60
 8007112:	d050      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0x11e>
 8007114:	2b60      	cmp	r3, #96	@ 0x60
 8007116:	d877      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x170>
 8007118:	2b50      	cmp	r3, #80	@ 0x50
 800711a:	d03c      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0xfe>
 800711c:	2b50      	cmp	r3, #80	@ 0x50
 800711e:	d873      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x170>
 8007120:	2b40      	cmp	r3, #64	@ 0x40
 8007122:	d058      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0x13e>
 8007124:	2b40      	cmp	r3, #64	@ 0x40
 8007126:	d86f      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x170>
 8007128:	2b30      	cmp	r3, #48	@ 0x30
 800712a:	d064      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x15e>
 800712c:	2b30      	cmp	r3, #48	@ 0x30
 800712e:	d86b      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x170>
 8007130:	2b20      	cmp	r3, #32
 8007132:	d060      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x15e>
 8007134:	2b20      	cmp	r3, #32
 8007136:	d867      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x170>
 8007138:	2b00      	cmp	r3, #0
 800713a:	d05c      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x15e>
 800713c:	2b10      	cmp	r3, #16
 800713e:	d05a      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x15e>
 8007140:	e062      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007152:	f000 f9a7 	bl	80074a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	609a      	str	r2, [r3, #8]
      break;
 800716e:	e04f      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007180:	f000 f990 	bl	80074a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007192:	609a      	str	r2, [r3, #8]
      break;
 8007194:	e03c      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a2:	461a      	mov	r2, r3
 80071a4:	f000 f904 	bl	80073b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2150      	movs	r1, #80	@ 0x50
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 f95d 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 80071b4:	e02c      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071c2:	461a      	mov	r2, r3
 80071c4:	f000 f923 	bl	800740e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2160      	movs	r1, #96	@ 0x60
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 f94d 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 80071d4:	e01c      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071e2:	461a      	mov	r2, r3
 80071e4:	f000 f8e4 	bl	80073b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2140      	movs	r1, #64	@ 0x40
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 f93d 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 80071f4:	e00c      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4619      	mov	r1, r3
 8007200:	4610      	mov	r0, r2
 8007202:	f000 f934 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 8007206:	e003      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	73fb      	strb	r3, [r7, #15]
      break;
 800720c:	e000      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800720e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007232:	bf00      	nop
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007246:	bf00      	nop
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
	...

0800727c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a40      	ldr	r2, [pc, #256]	@ (8007390 <TIM_Base_SetConfig+0x114>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d013      	beq.n	80072bc <TIM_Base_SetConfig+0x40>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800729a:	d00f      	beq.n	80072bc <TIM_Base_SetConfig+0x40>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a3d      	ldr	r2, [pc, #244]	@ (8007394 <TIM_Base_SetConfig+0x118>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00b      	beq.n	80072bc <TIM_Base_SetConfig+0x40>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a3c      	ldr	r2, [pc, #240]	@ (8007398 <TIM_Base_SetConfig+0x11c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d007      	beq.n	80072bc <TIM_Base_SetConfig+0x40>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a3b      	ldr	r2, [pc, #236]	@ (800739c <TIM_Base_SetConfig+0x120>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d003      	beq.n	80072bc <TIM_Base_SetConfig+0x40>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a3a      	ldr	r2, [pc, #232]	@ (80073a0 <TIM_Base_SetConfig+0x124>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d108      	bne.n	80072ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007390 <TIM_Base_SetConfig+0x114>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d01f      	beq.n	8007316 <TIM_Base_SetConfig+0x9a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072dc:	d01b      	beq.n	8007316 <TIM_Base_SetConfig+0x9a>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a2c      	ldr	r2, [pc, #176]	@ (8007394 <TIM_Base_SetConfig+0x118>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d017      	beq.n	8007316 <TIM_Base_SetConfig+0x9a>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a2b      	ldr	r2, [pc, #172]	@ (8007398 <TIM_Base_SetConfig+0x11c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d013      	beq.n	8007316 <TIM_Base_SetConfig+0x9a>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a2a      	ldr	r2, [pc, #168]	@ (800739c <TIM_Base_SetConfig+0x120>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00f      	beq.n	8007316 <TIM_Base_SetConfig+0x9a>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a29      	ldr	r2, [pc, #164]	@ (80073a0 <TIM_Base_SetConfig+0x124>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d00b      	beq.n	8007316 <TIM_Base_SetConfig+0x9a>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a28      	ldr	r2, [pc, #160]	@ (80073a4 <TIM_Base_SetConfig+0x128>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d007      	beq.n	8007316 <TIM_Base_SetConfig+0x9a>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a27      	ldr	r2, [pc, #156]	@ (80073a8 <TIM_Base_SetConfig+0x12c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d003      	beq.n	8007316 <TIM_Base_SetConfig+0x9a>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a26      	ldr	r2, [pc, #152]	@ (80073ac <TIM_Base_SetConfig+0x130>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d108      	bne.n	8007328 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800731c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	4313      	orrs	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a10      	ldr	r2, [pc, #64]	@ (8007390 <TIM_Base_SetConfig+0x114>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d00f      	beq.n	8007374 <TIM_Base_SetConfig+0xf8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a12      	ldr	r2, [pc, #72]	@ (80073a0 <TIM_Base_SetConfig+0x124>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00b      	beq.n	8007374 <TIM_Base_SetConfig+0xf8>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a11      	ldr	r2, [pc, #68]	@ (80073a4 <TIM_Base_SetConfig+0x128>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d007      	beq.n	8007374 <TIM_Base_SetConfig+0xf8>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a10      	ldr	r2, [pc, #64]	@ (80073a8 <TIM_Base_SetConfig+0x12c>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d003      	beq.n	8007374 <TIM_Base_SetConfig+0xf8>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a0f      	ldr	r2, [pc, #60]	@ (80073ac <TIM_Base_SetConfig+0x130>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d103      	bne.n	800737c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	691a      	ldr	r2, [r3, #16]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	615a      	str	r2, [r3, #20]
}
 8007382:	bf00      	nop
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	40012c00 	.word	0x40012c00
 8007394:	40000400 	.word	0x40000400
 8007398:	40000800 	.word	0x40000800
 800739c:	40000c00 	.word	0x40000c00
 80073a0:	40013400 	.word	0x40013400
 80073a4:	40014000 	.word	0x40014000
 80073a8:	40014400 	.word	0x40014400
 80073ac:	40014800 	.word	0x40014800

080073b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	f023 0201 	bic.w	r2, r3, #1
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f023 030a 	bic.w	r3, r3, #10
 80073ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800740e:	b480      	push	{r7}
 8007410:	b087      	sub	sp, #28
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	f023 0210 	bic.w	r2, r3, #16
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	031b      	lsls	r3, r3, #12
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800744a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	621a      	str	r2, [r3, #32]
}
 8007462:	bf00      	nop
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4313      	orrs	r3, r2
 800748c:	f043 0307 	orr.w	r3, r3, #7
 8007490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	609a      	str	r2, [r3, #8]
}
 8007498:	bf00      	nop
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	021a      	lsls	r2, r3, #8
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	431a      	orrs	r2, r3
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	609a      	str	r2, [r3, #8]
}
 80074d8:	bf00      	nop
 80074da:	371c      	adds	r7, #28
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e068      	b.n	80075ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a2e      	ldr	r2, [pc, #184]	@ (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d004      	beq.n	8007530 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a2d      	ldr	r2, [pc, #180]	@ (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d108      	bne.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007536:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007548:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4313      	orrs	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a1e      	ldr	r2, [pc, #120]	@ (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d01d      	beq.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756e:	d018      	beq.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a1b      	ldr	r2, [pc, #108]	@ (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d013      	beq.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a1a      	ldr	r2, [pc, #104]	@ (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00e      	beq.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a18      	ldr	r2, [pc, #96]	@ (80075ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d009      	beq.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a13      	ldr	r2, [pc, #76]	@ (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d004      	beq.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a14      	ldr	r2, [pc, #80]	@ (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d10c      	bne.n	80075bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40012c00 	.word	0x40012c00
 80075e0:	40013400 	.word	0x40013400
 80075e4:	40000400 	.word	0x40000400
 80075e8:	40000800 	.word	0x40000800
 80075ec:	40000c00 	.word	0x40000c00
 80075f0:	40014000 	.word	0x40014000

080075f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e042      	b.n	80076c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007648:	2b00      	cmp	r3, #0
 800764a:	d106      	bne.n	800765a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7fa f8c3 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2224      	movs	r2, #36	@ 0x24
 800765e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0201 	bic.w	r2, r2, #1
 8007670:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 ff42 	bl	8008504 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fc43 	bl	8007f0c <UART_SetConfig>
 8007686:	4603      	mov	r3, r0
 8007688:	2b01      	cmp	r3, #1
 800768a:	d101      	bne.n	8007690 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e01b      	b.n	80076c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800769e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689a      	ldr	r2, [r3, #8]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0201 	orr.w	r2, r2, #1
 80076be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 ffc1 	bl	8008648 <UART_CheckIdleState>
 80076c6:	4603      	mov	r3, r0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08a      	sub	sp, #40	@ 0x28
 80076d4:	af02      	add	r7, sp, #8
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	4613      	mov	r3, r2
 80076de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d17b      	bne.n	80077e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <HAL_UART_Transmit+0x26>
 80076f0:	88fb      	ldrh	r3, [r7, #6]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e074      	b.n	80077e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2221      	movs	r2, #33	@ 0x21
 8007706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800770a:	f7fa f9a9 	bl	8001a60 <HAL_GetTick>
 800770e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	88fa      	ldrh	r2, [r7, #6]
 8007714:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	88fa      	ldrh	r2, [r7, #6]
 800771c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007728:	d108      	bne.n	800773c <HAL_UART_Transmit+0x6c>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d104      	bne.n	800773c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007732:	2300      	movs	r3, #0
 8007734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	61bb      	str	r3, [r7, #24]
 800773a:	e003      	b.n	8007744 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007744:	e030      	b.n	80077a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2200      	movs	r2, #0
 800774e:	2180      	movs	r1, #128	@ 0x80
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f001 f823 	bl	800879c <UART_WaitOnFlagUntilTimeout>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d005      	beq.n	8007768 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2220      	movs	r2, #32
 8007760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e03d      	b.n	80077e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10b      	bne.n	8007786 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	881a      	ldrh	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800777a:	b292      	uxth	r2, r2
 800777c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	3302      	adds	r3, #2
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	e007      	b.n	8007796 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	781a      	ldrb	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	3301      	adds	r3, #1
 8007794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800779c:	b29b      	uxth	r3, r3
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1c8      	bne.n	8007746 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2200      	movs	r2, #0
 80077bc:	2140      	movs	r1, #64	@ 0x40
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 ffec 	bl	800879c <UART_WaitOnFlagUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e006      	b.n	80077e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2220      	movs	r2, #32
 80077da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	e000      	b.n	80077e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80077e2:	2302      	movs	r3, #2
  }
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3720      	adds	r7, #32
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	@ 0x28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007800:	2b20      	cmp	r3, #32
 8007802:	d137      	bne.n	8007874 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <HAL_UART_Receive_IT+0x24>
 800780a:	88fb      	ldrh	r3, [r7, #6]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e030      	b.n	8007876 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a18      	ldr	r2, [pc, #96]	@ (8007880 <HAL_UART_Receive_IT+0x94>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d01f      	beq.n	8007864 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d018      	beq.n	8007864 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	613b      	str	r3, [r7, #16]
   return(result);
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	623b      	str	r3, [r7, #32]
 8007852:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	69f9      	ldr	r1, [r7, #28]
 8007856:	6a3a      	ldr	r2, [r7, #32]
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	61bb      	str	r3, [r7, #24]
   return(result);
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e6      	bne.n	8007832 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007864:	88fb      	ldrh	r3, [r7, #6]
 8007866:	461a      	mov	r2, r3
 8007868:	68b9      	ldr	r1, [r7, #8]
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 fffe 	bl	800886c <UART_Start_Receive_IT>
 8007870:	4603      	mov	r3, r0
 8007872:	e000      	b.n	8007876 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007874:	2302      	movs	r3, #2
  }
}
 8007876:	4618      	mov	r0, r3
 8007878:	3728      	adds	r7, #40	@ 0x28
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	40008000 	.word	0x40008000

08007884 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b0ba      	sub	sp, #232	@ 0xe8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80078ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80078b2:	4013      	ands	r3, r2
 80078b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80078b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d11b      	bne.n	80078f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c4:	f003 0320 	and.w	r3, r3, #32
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d015      	beq.n	80078f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d105      	bne.n	80078e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d009      	beq.n	80078f8 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 82e3 	beq.w	8007eb4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	4798      	blx	r3
      }
      return;
 80078f6:	e2dd      	b.n	8007eb4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80078f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 8123 	beq.w	8007b48 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007902:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007906:	4b8d      	ldr	r3, [pc, #564]	@ (8007b3c <HAL_UART_IRQHandler+0x2b8>)
 8007908:	4013      	ands	r3, r2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d106      	bne.n	800791c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800790e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007912:	4b8b      	ldr	r3, [pc, #556]	@ (8007b40 <HAL_UART_IRQHandler+0x2bc>)
 8007914:	4013      	ands	r3, r2
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 8116 	beq.w	8007b48 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800791c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d011      	beq.n	800794c <HAL_UART_IRQHandler+0xc8>
 8007928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800792c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00b      	beq.n	800794c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2201      	movs	r2, #1
 800793a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007942:	f043 0201 	orr.w	r2, r3, #1
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800794c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d011      	beq.n	800797c <HAL_UART_IRQHandler+0xf8>
 8007958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00b      	beq.n	800797c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2202      	movs	r2, #2
 800796a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007972:	f043 0204 	orr.w	r2, r3, #4
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800797c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	2b00      	cmp	r3, #0
 8007986:	d011      	beq.n	80079ac <HAL_UART_IRQHandler+0x128>
 8007988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2204      	movs	r2, #4
 800799a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a2:	f043 0202 	orr.w	r2, r3, #2
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b0:	f003 0308 	and.w	r3, r3, #8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d017      	beq.n	80079e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079bc:	f003 0320 	and.w	r3, r3, #32
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d105      	bne.n	80079d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80079c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80079c8:	4b5c      	ldr	r3, [pc, #368]	@ (8007b3c <HAL_UART_IRQHandler+0x2b8>)
 80079ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2208      	movs	r2, #8
 80079d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079de:	f043 0208 	orr.w	r2, r3, #8
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d012      	beq.n	8007a1a <HAL_UART_IRQHandler+0x196>
 80079f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00c      	beq.n	8007a1a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a10:	f043 0220 	orr.w	r2, r3, #32
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8249 	beq.w	8007eb8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a2a:	f003 0320 	and.w	r3, r3, #32
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d013      	beq.n	8007a5a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d105      	bne.n	8007a4a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d007      	beq.n	8007a5a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a6e:	2b40      	cmp	r3, #64	@ 0x40
 8007a70:	d005      	beq.n	8007a7e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d054      	beq.n	8007b28 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 f816 	bl	8008ab0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a8e:	2b40      	cmp	r3, #64	@ 0x40
 8007a90:	d146      	bne.n	8007b20 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3308      	adds	r3, #8
 8007a98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007aac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3308      	adds	r3, #8
 8007aba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007abe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007aca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007ad6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1d9      	bne.n	8007a92 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d017      	beq.n	8007b18 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aee:	4a15      	ldr	r2, [pc, #84]	@ (8007b44 <HAL_UART_IRQHandler+0x2c0>)
 8007af0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fb fe4c 	bl	8003796 <HAL_DMA_Abort_IT>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d019      	beq.n	8007b38 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007b12:	4610      	mov	r0, r2
 8007b14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b16:	e00f      	b.n	8007b38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f9e1 	bl	8007ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1e:	e00b      	b.n	8007b38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f9dd 	bl	8007ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b26:	e007      	b.n	8007b38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f9d9 	bl	8007ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007b36:	e1bf      	b.n	8007eb8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b38:	bf00      	nop
    return;
 8007b3a:	e1bd      	b.n	8007eb8 <HAL_UART_IRQHandler+0x634>
 8007b3c:	10000001 	.word	0x10000001
 8007b40:	04000120 	.word	0x04000120
 8007b44:	08008b7d 	.word	0x08008b7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	f040 8153 	bne.w	8007df8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b56:	f003 0310 	and.w	r3, r3, #16
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 814c 	beq.w	8007df8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b64:	f003 0310 	and.w	r3, r3, #16
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 8145 	beq.w	8007df8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2210      	movs	r2, #16
 8007b74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b80:	2b40      	cmp	r3, #64	@ 0x40
 8007b82:	f040 80bb 	bne.w	8007cfc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 818f 	beq.w	8007ebc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ba4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	f080 8187 	bcs.w	8007ebc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bb4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0320 	and.w	r3, r3, #32
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f040 8087 	bne.w	8007cda <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007be8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bfa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1da      	bne.n	8007bcc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c28:	f023 0301 	bic.w	r3, r3, #1
 8007c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3308      	adds	r3, #8
 8007c36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c46:	e841 2300 	strex	r3, r2, [r1]
 8007c4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1e1      	bne.n	8007c16 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3308      	adds	r3, #8
 8007c58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3308      	adds	r3, #8
 8007c72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e3      	bne.n	8007c52 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ca8:	f023 0310 	bic.w	r3, r3, #16
 8007cac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cbc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e4      	bne.n	8007c98 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fb fd02 	bl	80036de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2202      	movs	r2, #2
 8007cde:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f8fd 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cfa:	e0df      	b.n	8007ebc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 80d1 	beq.w	8007ec0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007d1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 80cc 	beq.w	8007ec0 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d4c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e4      	bne.n	8007d28 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3308      	adds	r3, #8
 8007d64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	e853 3f00 	ldrex	r3, [r3]
 8007d6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d74:	f023 0301 	bic.w	r3, r3, #1
 8007d78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3308      	adds	r3, #8
 8007d82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d86:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d8e:	e841 2300 	strex	r3, r2, [r1]
 8007d92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e1      	bne.n	8007d5e <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	e853 3f00 	ldrex	r3, [r3]
 8007dba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 0310 	bic.w	r3, r3, #16
 8007dc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007dd0:	61fb      	str	r3, [r7, #28]
 8007dd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	69b9      	ldr	r1, [r7, #24]
 8007dd6:	69fa      	ldr	r2, [r7, #28]
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	617b      	str	r3, [r7, #20]
   return(result);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e4      	bne.n	8007dae <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f87f 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007df6:	e063      	b.n	8007ec0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00e      	beq.n	8007e22 <HAL_UART_IRQHandler+0x59e>
 8007e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d008      	beq.n	8007e22 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 fc14 	bl	8009648 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e20:	e051      	b.n	8007ec6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d014      	beq.n	8007e58 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d105      	bne.n	8007e46 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d008      	beq.n	8007e58 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d03a      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
    }
    return;
 8007e56:	e035      	b.n	8007ec4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d009      	beq.n	8007e78 <HAL_UART_IRQHandler+0x5f4>
 8007e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d003      	beq.n	8007e78 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fe99 	bl	8008ba8 <UART_EndTransmit_IT>
    return;
 8007e76:	e026      	b.n	8007ec6 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d009      	beq.n	8007e98 <HAL_UART_IRQHandler+0x614>
 8007e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f001 fbed 	bl	8009670 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e96:	e016      	b.n	8007ec6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d010      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x642>
 8007ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	da0c      	bge.n	8007ec6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f001 fbd5 	bl	800965c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007eb2:	e008      	b.n	8007ec6 <HAL_UART_IRQHandler+0x642>
      return;
 8007eb4:	bf00      	nop
 8007eb6:	e006      	b.n	8007ec6 <HAL_UART_IRQHandler+0x642>
    return;
 8007eb8:	bf00      	nop
 8007eba:	e004      	b.n	8007ec6 <HAL_UART_IRQHandler+0x642>
      return;
 8007ebc:	bf00      	nop
 8007ebe:	e002      	b.n	8007ec6 <HAL_UART_IRQHandler+0x642>
      return;
 8007ec0:	bf00      	nop
 8007ec2:	e000      	b.n	8007ec6 <HAL_UART_IRQHandler+0x642>
    return;
 8007ec4:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007ec6:	37e8      	adds	r7, #232	@ 0xe8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f10:	b08c      	sub	sp, #48	@ 0x30
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	431a      	orrs	r2, r3
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	4baa      	ldr	r3, [pc, #680]	@ (80081e4 <UART_SetConfig+0x2d8>)
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	6812      	ldr	r2, [r2, #0]
 8007f42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f44:	430b      	orrs	r3, r1
 8007f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	68da      	ldr	r2, [r3, #12]
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a9f      	ldr	r2, [pc, #636]	@ (80081e8 <UART_SetConfig+0x2dc>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d004      	beq.n	8007f78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f74:	4313      	orrs	r3, r2
 8007f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007f82:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	6812      	ldr	r2, [r2, #0]
 8007f8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f8c:	430b      	orrs	r3, r1
 8007f8e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f96:	f023 010f 	bic.w	r1, r3, #15
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a90      	ldr	r2, [pc, #576]	@ (80081ec <UART_SetConfig+0x2e0>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d125      	bne.n	8007ffc <UART_SetConfig+0xf0>
 8007fb0:	4b8f      	ldr	r3, [pc, #572]	@ (80081f0 <UART_SetConfig+0x2e4>)
 8007fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb6:	f003 0303 	and.w	r3, r3, #3
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d81a      	bhi.n	8007ff4 <UART_SetConfig+0xe8>
 8007fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc4 <UART_SetConfig+0xb8>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	08007fd5 	.word	0x08007fd5
 8007fc8:	08007fe5 	.word	0x08007fe5
 8007fcc:	08007fdd 	.word	0x08007fdd
 8007fd0:	08007fed 	.word	0x08007fed
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fda:	e116      	b.n	800820a <UART_SetConfig+0x2fe>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fe2:	e112      	b.n	800820a <UART_SetConfig+0x2fe>
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fea:	e10e      	b.n	800820a <UART_SetConfig+0x2fe>
 8007fec:	2308      	movs	r3, #8
 8007fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ff2:	e10a      	b.n	800820a <UART_SetConfig+0x2fe>
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffa:	e106      	b.n	800820a <UART_SetConfig+0x2fe>
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a7c      	ldr	r2, [pc, #496]	@ (80081f4 <UART_SetConfig+0x2e8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d138      	bne.n	8008078 <UART_SetConfig+0x16c>
 8008006:	4b7a      	ldr	r3, [pc, #488]	@ (80081f0 <UART_SetConfig+0x2e4>)
 8008008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800800c:	f003 030c 	and.w	r3, r3, #12
 8008010:	2b0c      	cmp	r3, #12
 8008012:	d82d      	bhi.n	8008070 <UART_SetConfig+0x164>
 8008014:	a201      	add	r2, pc, #4	@ (adr r2, 800801c <UART_SetConfig+0x110>)
 8008016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801a:	bf00      	nop
 800801c:	08008051 	.word	0x08008051
 8008020:	08008071 	.word	0x08008071
 8008024:	08008071 	.word	0x08008071
 8008028:	08008071 	.word	0x08008071
 800802c:	08008061 	.word	0x08008061
 8008030:	08008071 	.word	0x08008071
 8008034:	08008071 	.word	0x08008071
 8008038:	08008071 	.word	0x08008071
 800803c:	08008059 	.word	0x08008059
 8008040:	08008071 	.word	0x08008071
 8008044:	08008071 	.word	0x08008071
 8008048:	08008071 	.word	0x08008071
 800804c:	08008069 	.word	0x08008069
 8008050:	2300      	movs	r3, #0
 8008052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008056:	e0d8      	b.n	800820a <UART_SetConfig+0x2fe>
 8008058:	2302      	movs	r3, #2
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805e:	e0d4      	b.n	800820a <UART_SetConfig+0x2fe>
 8008060:	2304      	movs	r3, #4
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008066:	e0d0      	b.n	800820a <UART_SetConfig+0x2fe>
 8008068:	2308      	movs	r3, #8
 800806a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800806e:	e0cc      	b.n	800820a <UART_SetConfig+0x2fe>
 8008070:	2310      	movs	r3, #16
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008076:	e0c8      	b.n	800820a <UART_SetConfig+0x2fe>
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a5e      	ldr	r2, [pc, #376]	@ (80081f8 <UART_SetConfig+0x2ec>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d125      	bne.n	80080ce <UART_SetConfig+0x1c2>
 8008082:	4b5b      	ldr	r3, [pc, #364]	@ (80081f0 <UART_SetConfig+0x2e4>)
 8008084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008088:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800808c:	2b30      	cmp	r3, #48	@ 0x30
 800808e:	d016      	beq.n	80080be <UART_SetConfig+0x1b2>
 8008090:	2b30      	cmp	r3, #48	@ 0x30
 8008092:	d818      	bhi.n	80080c6 <UART_SetConfig+0x1ba>
 8008094:	2b20      	cmp	r3, #32
 8008096:	d00a      	beq.n	80080ae <UART_SetConfig+0x1a2>
 8008098:	2b20      	cmp	r3, #32
 800809a:	d814      	bhi.n	80080c6 <UART_SetConfig+0x1ba>
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <UART_SetConfig+0x19a>
 80080a0:	2b10      	cmp	r3, #16
 80080a2:	d008      	beq.n	80080b6 <UART_SetConfig+0x1aa>
 80080a4:	e00f      	b.n	80080c6 <UART_SetConfig+0x1ba>
 80080a6:	2300      	movs	r3, #0
 80080a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ac:	e0ad      	b.n	800820a <UART_SetConfig+0x2fe>
 80080ae:	2302      	movs	r3, #2
 80080b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080b4:	e0a9      	b.n	800820a <UART_SetConfig+0x2fe>
 80080b6:	2304      	movs	r3, #4
 80080b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080bc:	e0a5      	b.n	800820a <UART_SetConfig+0x2fe>
 80080be:	2308      	movs	r3, #8
 80080c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c4:	e0a1      	b.n	800820a <UART_SetConfig+0x2fe>
 80080c6:	2310      	movs	r3, #16
 80080c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080cc:	e09d      	b.n	800820a <UART_SetConfig+0x2fe>
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a4a      	ldr	r2, [pc, #296]	@ (80081fc <UART_SetConfig+0x2f0>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d125      	bne.n	8008124 <UART_SetConfig+0x218>
 80080d8:	4b45      	ldr	r3, [pc, #276]	@ (80081f0 <UART_SetConfig+0x2e4>)
 80080da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80080e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80080e4:	d016      	beq.n	8008114 <UART_SetConfig+0x208>
 80080e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80080e8:	d818      	bhi.n	800811c <UART_SetConfig+0x210>
 80080ea:	2b80      	cmp	r3, #128	@ 0x80
 80080ec:	d00a      	beq.n	8008104 <UART_SetConfig+0x1f8>
 80080ee:	2b80      	cmp	r3, #128	@ 0x80
 80080f0:	d814      	bhi.n	800811c <UART_SetConfig+0x210>
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <UART_SetConfig+0x1f0>
 80080f6:	2b40      	cmp	r3, #64	@ 0x40
 80080f8:	d008      	beq.n	800810c <UART_SetConfig+0x200>
 80080fa:	e00f      	b.n	800811c <UART_SetConfig+0x210>
 80080fc:	2300      	movs	r3, #0
 80080fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008102:	e082      	b.n	800820a <UART_SetConfig+0x2fe>
 8008104:	2302      	movs	r3, #2
 8008106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800810a:	e07e      	b.n	800820a <UART_SetConfig+0x2fe>
 800810c:	2304      	movs	r3, #4
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008112:	e07a      	b.n	800820a <UART_SetConfig+0x2fe>
 8008114:	2308      	movs	r3, #8
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800811a:	e076      	b.n	800820a <UART_SetConfig+0x2fe>
 800811c:	2310      	movs	r3, #16
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008122:	e072      	b.n	800820a <UART_SetConfig+0x2fe>
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a35      	ldr	r2, [pc, #212]	@ (8008200 <UART_SetConfig+0x2f4>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d12a      	bne.n	8008184 <UART_SetConfig+0x278>
 800812e:	4b30      	ldr	r3, [pc, #192]	@ (80081f0 <UART_SetConfig+0x2e4>)
 8008130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008134:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008138:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800813c:	d01a      	beq.n	8008174 <UART_SetConfig+0x268>
 800813e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008142:	d81b      	bhi.n	800817c <UART_SetConfig+0x270>
 8008144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008148:	d00c      	beq.n	8008164 <UART_SetConfig+0x258>
 800814a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800814e:	d815      	bhi.n	800817c <UART_SetConfig+0x270>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <UART_SetConfig+0x250>
 8008154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008158:	d008      	beq.n	800816c <UART_SetConfig+0x260>
 800815a:	e00f      	b.n	800817c <UART_SetConfig+0x270>
 800815c:	2300      	movs	r3, #0
 800815e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008162:	e052      	b.n	800820a <UART_SetConfig+0x2fe>
 8008164:	2302      	movs	r3, #2
 8008166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800816a:	e04e      	b.n	800820a <UART_SetConfig+0x2fe>
 800816c:	2304      	movs	r3, #4
 800816e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008172:	e04a      	b.n	800820a <UART_SetConfig+0x2fe>
 8008174:	2308      	movs	r3, #8
 8008176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800817a:	e046      	b.n	800820a <UART_SetConfig+0x2fe>
 800817c:	2310      	movs	r3, #16
 800817e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008182:	e042      	b.n	800820a <UART_SetConfig+0x2fe>
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a17      	ldr	r2, [pc, #92]	@ (80081e8 <UART_SetConfig+0x2dc>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d13a      	bne.n	8008204 <UART_SetConfig+0x2f8>
 800818e:	4b18      	ldr	r3, [pc, #96]	@ (80081f0 <UART_SetConfig+0x2e4>)
 8008190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008194:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008198:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800819c:	d01a      	beq.n	80081d4 <UART_SetConfig+0x2c8>
 800819e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081a2:	d81b      	bhi.n	80081dc <UART_SetConfig+0x2d0>
 80081a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081a8:	d00c      	beq.n	80081c4 <UART_SetConfig+0x2b8>
 80081aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081ae:	d815      	bhi.n	80081dc <UART_SetConfig+0x2d0>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <UART_SetConfig+0x2b0>
 80081b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081b8:	d008      	beq.n	80081cc <UART_SetConfig+0x2c0>
 80081ba:	e00f      	b.n	80081dc <UART_SetConfig+0x2d0>
 80081bc:	2300      	movs	r3, #0
 80081be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081c2:	e022      	b.n	800820a <UART_SetConfig+0x2fe>
 80081c4:	2302      	movs	r3, #2
 80081c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ca:	e01e      	b.n	800820a <UART_SetConfig+0x2fe>
 80081cc:	2304      	movs	r3, #4
 80081ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081d2:	e01a      	b.n	800820a <UART_SetConfig+0x2fe>
 80081d4:	2308      	movs	r3, #8
 80081d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081da:	e016      	b.n	800820a <UART_SetConfig+0x2fe>
 80081dc:	2310      	movs	r3, #16
 80081de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081e2:	e012      	b.n	800820a <UART_SetConfig+0x2fe>
 80081e4:	cfff69f3 	.word	0xcfff69f3
 80081e8:	40008000 	.word	0x40008000
 80081ec:	40013800 	.word	0x40013800
 80081f0:	40021000 	.word	0x40021000
 80081f4:	40004400 	.word	0x40004400
 80081f8:	40004800 	.word	0x40004800
 80081fc:	40004c00 	.word	0x40004c00
 8008200:	40005000 	.word	0x40005000
 8008204:	2310      	movs	r3, #16
 8008206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4aae      	ldr	r2, [pc, #696]	@ (80084c8 <UART_SetConfig+0x5bc>)
 8008210:	4293      	cmp	r3, r2
 8008212:	f040 8097 	bne.w	8008344 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008216:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800821a:	2b08      	cmp	r3, #8
 800821c:	d823      	bhi.n	8008266 <UART_SetConfig+0x35a>
 800821e:	a201      	add	r2, pc, #4	@ (adr r2, 8008224 <UART_SetConfig+0x318>)
 8008220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008224:	08008249 	.word	0x08008249
 8008228:	08008267 	.word	0x08008267
 800822c:	08008251 	.word	0x08008251
 8008230:	08008267 	.word	0x08008267
 8008234:	08008257 	.word	0x08008257
 8008238:	08008267 	.word	0x08008267
 800823c:	08008267 	.word	0x08008267
 8008240:	08008267 	.word	0x08008267
 8008244:	0800825f 	.word	0x0800825f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008248:	f7fd fef0 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 800824c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800824e:	e010      	b.n	8008272 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008250:	4b9e      	ldr	r3, [pc, #632]	@ (80084cc <UART_SetConfig+0x5c0>)
 8008252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008254:	e00d      	b.n	8008272 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008256:	f7fd fe51 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 800825a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800825c:	e009      	b.n	8008272 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800825e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008264:	e005      	b.n	8008272 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008270:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 8130 	beq.w	80084da <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827e:	4a94      	ldr	r2, [pc, #592]	@ (80084d0 <UART_SetConfig+0x5c4>)
 8008280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008284:	461a      	mov	r2, r3
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	fbb3 f3f2 	udiv	r3, r3, r2
 800828c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	4413      	add	r3, r2
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	429a      	cmp	r2, r3
 800829c:	d305      	bcc.n	80082aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d903      	bls.n	80082b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082b0:	e113      	b.n	80084da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b4:	2200      	movs	r2, #0
 80082b6:	60bb      	str	r3, [r7, #8]
 80082b8:	60fa      	str	r2, [r7, #12]
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082be:	4a84      	ldr	r2, [pc, #528]	@ (80084d0 <UART_SetConfig+0x5c4>)
 80082c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	2200      	movs	r2, #0
 80082c8:	603b      	str	r3, [r7, #0]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082d4:	f7f7 ff92 	bl	80001fc <__aeabi_uldivmod>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4610      	mov	r0, r2
 80082de:	4619      	mov	r1, r3
 80082e0:	f04f 0200 	mov.w	r2, #0
 80082e4:	f04f 0300 	mov.w	r3, #0
 80082e8:	020b      	lsls	r3, r1, #8
 80082ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082ee:	0202      	lsls	r2, r0, #8
 80082f0:	6979      	ldr	r1, [r7, #20]
 80082f2:	6849      	ldr	r1, [r1, #4]
 80082f4:	0849      	lsrs	r1, r1, #1
 80082f6:	2000      	movs	r0, #0
 80082f8:	460c      	mov	r4, r1
 80082fa:	4605      	mov	r5, r0
 80082fc:	eb12 0804 	adds.w	r8, r2, r4
 8008300:	eb43 0905 	adc.w	r9, r3, r5
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	469a      	mov	sl, r3
 800830c:	4693      	mov	fp, r2
 800830e:	4652      	mov	r2, sl
 8008310:	465b      	mov	r3, fp
 8008312:	4640      	mov	r0, r8
 8008314:	4649      	mov	r1, r9
 8008316:	f7f7 ff71 	bl	80001fc <__aeabi_uldivmod>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4613      	mov	r3, r2
 8008320:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008328:	d308      	bcc.n	800833c <UART_SetConfig+0x430>
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008330:	d204      	bcs.n	800833c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6a3a      	ldr	r2, [r7, #32]
 8008338:	60da      	str	r2, [r3, #12]
 800833a:	e0ce      	b.n	80084da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008342:	e0ca      	b.n	80084da <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800834c:	d166      	bne.n	800841c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800834e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008352:	2b08      	cmp	r3, #8
 8008354:	d827      	bhi.n	80083a6 <UART_SetConfig+0x49a>
 8008356:	a201      	add	r2, pc, #4	@ (adr r2, 800835c <UART_SetConfig+0x450>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	08008381 	.word	0x08008381
 8008360:	08008389 	.word	0x08008389
 8008364:	08008391 	.word	0x08008391
 8008368:	080083a7 	.word	0x080083a7
 800836c:	08008397 	.word	0x08008397
 8008370:	080083a7 	.word	0x080083a7
 8008374:	080083a7 	.word	0x080083a7
 8008378:	080083a7 	.word	0x080083a7
 800837c:	0800839f 	.word	0x0800839f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008380:	f7fd fe54 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008384:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008386:	e014      	b.n	80083b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008388:	f7fd fe66 	bl	8006058 <HAL_RCC_GetPCLK2Freq>
 800838c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800838e:	e010      	b.n	80083b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008390:	4b4e      	ldr	r3, [pc, #312]	@ (80084cc <UART_SetConfig+0x5c0>)
 8008392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008394:	e00d      	b.n	80083b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008396:	f7fd fdb1 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 800839a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800839c:	e009      	b.n	80083b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800839e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083a4:	e005      	b.n	80083b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80083a6:	2300      	movs	r3, #0
 80083a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 8090 	beq.w	80084da <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083be:	4a44      	ldr	r2, [pc, #272]	@ (80084d0 <UART_SetConfig+0x5c4>)
 80083c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083c4:	461a      	mov	r2, r3
 80083c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80083cc:	005a      	lsls	r2, r3, #1
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	085b      	lsrs	r3, r3, #1
 80083d4:	441a      	add	r2, r3
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	fbb2 f3f3 	udiv	r3, r2, r3
 80083de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	2b0f      	cmp	r3, #15
 80083e4:	d916      	bls.n	8008414 <UART_SetConfig+0x508>
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083ec:	d212      	bcs.n	8008414 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083ee:	6a3b      	ldr	r3, [r7, #32]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	f023 030f 	bic.w	r3, r3, #15
 80083f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	085b      	lsrs	r3, r3, #1
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	b29a      	uxth	r2, r3
 8008404:	8bfb      	ldrh	r3, [r7, #30]
 8008406:	4313      	orrs	r3, r2
 8008408:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	8bfa      	ldrh	r2, [r7, #30]
 8008410:	60da      	str	r2, [r3, #12]
 8008412:	e062      	b.n	80084da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800841a:	e05e      	b.n	80084da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800841c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008420:	2b08      	cmp	r3, #8
 8008422:	d828      	bhi.n	8008476 <UART_SetConfig+0x56a>
 8008424:	a201      	add	r2, pc, #4	@ (adr r2, 800842c <UART_SetConfig+0x520>)
 8008426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842a:	bf00      	nop
 800842c:	08008451 	.word	0x08008451
 8008430:	08008459 	.word	0x08008459
 8008434:	08008461 	.word	0x08008461
 8008438:	08008477 	.word	0x08008477
 800843c:	08008467 	.word	0x08008467
 8008440:	08008477 	.word	0x08008477
 8008444:	08008477 	.word	0x08008477
 8008448:	08008477 	.word	0x08008477
 800844c:	0800846f 	.word	0x0800846f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008450:	f7fd fdec 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008456:	e014      	b.n	8008482 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008458:	f7fd fdfe 	bl	8006058 <HAL_RCC_GetPCLK2Freq>
 800845c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800845e:	e010      	b.n	8008482 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008460:	4b1a      	ldr	r3, [pc, #104]	@ (80084cc <UART_SetConfig+0x5c0>)
 8008462:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008464:	e00d      	b.n	8008482 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008466:	f7fd fd49 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 800846a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800846c:	e009      	b.n	8008482 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800846e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008474:	e005      	b.n	8008482 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008480:	bf00      	nop
    }

    if (pclk != 0U)
 8008482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008484:	2b00      	cmp	r3, #0
 8008486:	d028      	beq.n	80084da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848c:	4a10      	ldr	r2, [pc, #64]	@ (80084d0 <UART_SetConfig+0x5c4>)
 800848e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008492:	461a      	mov	r2, r3
 8008494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008496:	fbb3 f2f2 	udiv	r2, r3, r2
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	085b      	lsrs	r3, r3, #1
 80084a0:	441a      	add	r2, r3
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	2b0f      	cmp	r3, #15
 80084b0:	d910      	bls.n	80084d4 <UART_SetConfig+0x5c8>
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084b8:	d20c      	bcs.n	80084d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	b29a      	uxth	r2, r3
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	60da      	str	r2, [r3, #12]
 80084c4:	e009      	b.n	80084da <UART_SetConfig+0x5ce>
 80084c6:	bf00      	nop
 80084c8:	40008000 	.word	0x40008000
 80084cc:	00f42400 	.word	0x00f42400
 80084d0:	0800db14 	.word	0x0800db14
      }
      else
      {
        ret = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2201      	movs	r2, #1
 80084de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2200      	movs	r2, #0
 80084ee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2200      	movs	r2, #0
 80084f4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80084f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3730      	adds	r7, #48	@ 0x30
 80084fe:	46bd      	mov	sp, r7
 8008500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008504 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008510:	f003 0308 	and.w	r3, r3, #8
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00a      	beq.n	800852e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008554:	f003 0302 	and.w	r3, r3, #2
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008576:	f003 0304 	and.w	r3, r3, #4
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008598:	f003 0310 	and.w	r3, r3, #16
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00a      	beq.n	80085b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ba:	f003 0320 	and.w	r3, r3, #32
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d01a      	beq.n	800861a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008602:	d10a      	bne.n	800861a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800861e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	605a      	str	r2, [r3, #4]
  }
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b098      	sub	sp, #96	@ 0x60
 800864c:	af02      	add	r7, sp, #8
 800864e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008658:	f7f9 fa02 	bl	8001a60 <HAL_GetTick>
 800865c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0308 	and.w	r3, r3, #8
 8008668:	2b08      	cmp	r3, #8
 800866a:	d12f      	bne.n	80086cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800866c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008674:	2200      	movs	r2, #0
 8008676:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f88e 	bl	800879c <UART_WaitOnFlagUntilTimeout>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d022      	beq.n	80086cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800869a:	653b      	str	r3, [r7, #80]	@ 0x50
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	461a      	mov	r2, r3
 80086a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80086a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e6      	bne.n	8008686 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2220      	movs	r2, #32
 80086bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e063      	b.n	8008794 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0304 	and.w	r3, r3, #4
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d149      	bne.n	800876e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086e2:	2200      	movs	r2, #0
 80086e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f857 	bl	800879c <UART_WaitOnFlagUntilTimeout>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d03c      	beq.n	800876e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fc:	e853 3f00 	ldrex	r3, [r3]
 8008700:	623b      	str	r3, [r7, #32]
   return(result);
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008712:	633b      	str	r3, [r7, #48]	@ 0x30
 8008714:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1e6      	bne.n	80086f4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3308      	adds	r3, #8
 800872c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	60fb      	str	r3, [r7, #12]
   return(result);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f023 0301 	bic.w	r3, r3, #1
 800873c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3308      	adds	r3, #8
 8008744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008746:	61fa      	str	r2, [r7, #28]
 8008748:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	69b9      	ldr	r1, [r7, #24]
 800874c:	69fa      	ldr	r2, [r7, #28]
 800874e:	e841 2300 	strex	r3, r2, [r1]
 8008752:	617b      	str	r3, [r7, #20]
   return(result);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e5      	bne.n	8008726 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2220      	movs	r2, #32
 800875e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	e012      	b.n	8008794 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2220      	movs	r2, #32
 8008772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2220      	movs	r2, #32
 800877a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3758      	adds	r7, #88	@ 0x58
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	603b      	str	r3, [r7, #0]
 80087a8:	4613      	mov	r3, r2
 80087aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ac:	e049      	b.n	8008842 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087b4:	d045      	beq.n	8008842 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087b6:	f7f9 f953 	bl	8001a60 <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d302      	bcc.n	80087cc <UART_WaitOnFlagUntilTimeout+0x30>
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e048      	b.n	8008862 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0304 	and.w	r3, r3, #4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d031      	beq.n	8008842 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	f003 0308 	and.w	r3, r3, #8
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d110      	bne.n	800880e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2208      	movs	r2, #8
 80087f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 f95b 	bl	8008ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2208      	movs	r2, #8
 80087fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e029      	b.n	8008862 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800881c:	d111      	bne.n	8008842 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 f941 	bl	8008ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2220      	movs	r2, #32
 8008832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e00f      	b.n	8008862 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69da      	ldr	r2, [r3, #28]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	4013      	ands	r3, r2
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	429a      	cmp	r2, r3
 8008850:	bf0c      	ite	eq
 8008852:	2301      	moveq	r3, #1
 8008854:	2300      	movne	r3, #0
 8008856:	b2db      	uxtb	r3, r3
 8008858:	461a      	mov	r2, r3
 800885a:	79fb      	ldrb	r3, [r7, #7]
 800885c:	429a      	cmp	r2, r3
 800885e:	d0a6      	beq.n	80087ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
	...

0800886c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800886c:	b480      	push	{r7}
 800886e:	b0a3      	sub	sp, #140	@ 0x8c
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	4613      	mov	r3, r2
 8008878:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	88fa      	ldrh	r2, [r7, #6]
 8008884:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	88fa      	ldrh	r2, [r7, #6]
 800888c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800889e:	d10e      	bne.n	80088be <UART_Start_Receive_IT+0x52>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d105      	bne.n	80088b4 <UART_Start_Receive_IT+0x48>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80088ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088b2:	e02d      	b.n	8008910 <UART_Start_Receive_IT+0xa4>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	22ff      	movs	r2, #255	@ 0xff
 80088b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088bc:	e028      	b.n	8008910 <UART_Start_Receive_IT+0xa4>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10d      	bne.n	80088e2 <UART_Start_Receive_IT+0x76>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d104      	bne.n	80088d8 <UART_Start_Receive_IT+0x6c>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	22ff      	movs	r2, #255	@ 0xff
 80088d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088d6:	e01b      	b.n	8008910 <UART_Start_Receive_IT+0xa4>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	227f      	movs	r2, #127	@ 0x7f
 80088dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088e0:	e016      	b.n	8008910 <UART_Start_Receive_IT+0xa4>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088ea:	d10d      	bne.n	8008908 <UART_Start_Receive_IT+0x9c>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d104      	bne.n	80088fe <UART_Start_Receive_IT+0x92>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	227f      	movs	r2, #127	@ 0x7f
 80088f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088fc:	e008      	b.n	8008910 <UART_Start_Receive_IT+0xa4>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	223f      	movs	r2, #63	@ 0x3f
 8008902:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008906:	e003      	b.n	8008910 <UART_Start_Receive_IT+0xa4>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2222      	movs	r2, #34	@ 0x22
 800891c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3308      	adds	r3, #8
 8008926:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008930:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008932:	f043 0301 	orr.w	r3, r3, #1
 8008936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008944:	673a      	str	r2, [r7, #112]	@ 0x70
 8008946:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008948:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800894a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800894c:	e841 2300 	strex	r3, r2, [r1]
 8008950:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008952:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e3      	bne.n	8008920 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800895c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008960:	d14f      	bne.n	8008a02 <UART_Start_Receive_IT+0x196>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008968:	88fa      	ldrh	r2, [r7, #6]
 800896a:	429a      	cmp	r2, r3
 800896c:	d349      	bcc.n	8008a02 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008976:	d107      	bne.n	8008988 <UART_Start_Receive_IT+0x11c>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d103      	bne.n	8008988 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4a47      	ldr	r2, [pc, #284]	@ (8008aa0 <UART_Start_Receive_IT+0x234>)
 8008984:	675a      	str	r2, [r3, #116]	@ 0x74
 8008986:	e002      	b.n	800898e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4a46      	ldr	r2, [pc, #280]	@ (8008aa4 <UART_Start_Receive_IT+0x238>)
 800898c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d01a      	beq.n	80089cc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80089a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80089b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089ba:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80089be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80089c0:	e841 2300 	strex	r3, r2, [r1]
 80089c4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80089c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1e4      	bne.n	8008996 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3308      	adds	r3, #8
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d6:	e853 3f00 	ldrex	r3, [r3]
 80089da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3308      	adds	r3, #8
 80089ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80089ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 80089ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089f4:	e841 2300 	strex	r3, r2, [r1]
 80089f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80089fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1e5      	bne.n	80089cc <UART_Start_Receive_IT+0x160>
 8008a00:	e046      	b.n	8008a90 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a0a:	d107      	bne.n	8008a1c <UART_Start_Receive_IT+0x1b0>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d103      	bne.n	8008a1c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4a24      	ldr	r2, [pc, #144]	@ (8008aa8 <UART_Start_Receive_IT+0x23c>)
 8008a18:	675a      	str	r2, [r3, #116]	@ 0x74
 8008a1a:	e002      	b.n	8008a22 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4a23      	ldr	r2, [pc, #140]	@ (8008aac <UART_Start_Receive_IT+0x240>)
 8008a20:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d019      	beq.n	8008a5e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008a3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a4a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e6      	bne.n	8008a2a <UART_Start_Receive_IT+0x1be>
 8008a5c:	e018      	b.n	8008a90 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	e853 3f00 	ldrex	r3, [r3]
 8008a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f043 0320 	orr.w	r3, r3, #32
 8008a72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a7c:	623b      	str	r3, [r7, #32]
 8008a7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	69f9      	ldr	r1, [r7, #28]
 8008a82:	6a3a      	ldr	r2, [r7, #32]
 8008a84:	e841 2300 	strex	r3, r2, [r1]
 8008a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e6      	bne.n	8008a5e <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	378c      	adds	r7, #140	@ 0x8c
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	080092dd 	.word	0x080092dd
 8008aa4:	08008f79 	.word	0x08008f79
 8008aa8:	08008dbd 	.word	0x08008dbd
 8008aac:	08008c01 	.word	0x08008c01

08008ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b095      	sub	sp, #84	@ 0x54
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ad6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ad8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008adc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e6      	bne.n	8008ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3308      	adds	r3, #8
 8008af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b00:	f023 0301 	bic.w	r3, r3, #1
 8008b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e3      	bne.n	8008aea <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d118      	bne.n	8008b5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	e853 3f00 	ldrex	r3, [r3]
 8008b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	f023 0310 	bic.w	r3, r3, #16
 8008b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	461a      	mov	r2, r3
 8008b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b48:	61bb      	str	r3, [r7, #24]
 8008b4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	6979      	ldr	r1, [r7, #20]
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	e841 2300 	strex	r3, r2, [r1]
 8008b54:	613b      	str	r3, [r7, #16]
   return(result);
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e6      	bne.n	8008b2a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b70:	bf00      	nop
 8008b72:	3754      	adds	r7, #84	@ 0x54
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f7ff f9a0 	bl	8007ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ba0:	bf00      	nop
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b088      	sub	sp, #32
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bc4:	61fb      	str	r3, [r7, #28]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	61bb      	str	r3, [r7, #24]
 8008bd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd2:	6979      	ldr	r1, [r7, #20]
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	e841 2300 	strex	r3, r2, [r1]
 8008bda:	613b      	str	r3, [r7, #16]
   return(result);
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e6      	bne.n	8008bb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2220      	movs	r2, #32
 8008be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7ff f96b 	bl	8007ecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bf6:	bf00      	nop
 8008bf8:	3720      	adds	r7, #32
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
	...

08008c00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b09c      	sub	sp, #112	@ 0x70
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c0e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c18:	2b22      	cmp	r3, #34	@ 0x22
 8008c1a:	f040 80be 	bne.w	8008d9a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008c24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c2c:	b2d9      	uxtb	r1, r3
 8008c2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c38:	400a      	ands	r2, r1
 8008c3a:	b2d2      	uxtb	r2, r2
 8008c3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	3b01      	subs	r3, #1
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f040 80a3 	bne.w	8008dae <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c8e:	e841 2300 	strex	r3, r2, [r1]
 8008c92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1e6      	bne.n	8008c68 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca4:	e853 3f00 	ldrex	r3, [r3]
 8008ca8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cac:	f023 0301 	bic.w	r3, r3, #1
 8008cb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3308      	adds	r3, #8
 8008cb8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008cba:	647a      	str	r2, [r7, #68]	@ 0x44
 8008cbc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e5      	bne.n	8008c9a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a34      	ldr	r2, [pc, #208]	@ (8008db8 <UART_RxISR_8BIT+0x1b8>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d01f      	beq.n	8008d2c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d018      	beq.n	8008d2c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d02:	e853 3f00 	ldrex	r3, [r3]
 8008d06:	623b      	str	r3, [r7, #32]
   return(result);
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	461a      	mov	r2, r3
 8008d16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d20:	e841 2300 	strex	r3, r2, [r1]
 8008d24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e6      	bne.n	8008cfa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d12e      	bne.n	8008d92 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	e853 3f00 	ldrex	r3, [r3]
 8008d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 0310 	bic.w	r3, r3, #16
 8008d4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	461a      	mov	r2, r3
 8008d56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d58:	61fb      	str	r3, [r7, #28]
 8008d5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5c:	69b9      	ldr	r1, [r7, #24]
 8008d5e:	69fa      	ldr	r2, [r7, #28]
 8008d60:	e841 2300 	strex	r3, r2, [r1]
 8008d64:	617b      	str	r3, [r7, #20]
   return(result);
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e6      	bne.n	8008d3a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	f003 0310 	and.w	r3, r3, #16
 8008d76:	2b10      	cmp	r3, #16
 8008d78:	d103      	bne.n	8008d82 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2210      	movs	r2, #16
 8008d80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7ff f8b2 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d90:	e00d      	b.n	8008dae <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7f8 f88a 	bl	8000eac <HAL_UART_RxCpltCallback>
}
 8008d98:	e009      	b.n	8008dae <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	8b1b      	ldrh	r3, [r3, #24]
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0208 	orr.w	r2, r2, #8
 8008daa:	b292      	uxth	r2, r2
 8008dac:	831a      	strh	r2, [r3, #24]
}
 8008dae:	bf00      	nop
 8008db0:	3770      	adds	r7, #112	@ 0x70
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	40008000 	.word	0x40008000

08008dbc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b09c      	sub	sp, #112	@ 0x70
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008dca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dd4:	2b22      	cmp	r3, #34	@ 0x22
 8008dd6:	f040 80be 	bne.w	8008f56 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008de0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008de8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008dea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008dee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008df2:	4013      	ands	r3, r2
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008df8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dfe:	1c9a      	adds	r2, r3, #2
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f040 80a3 	bne.w	8008f6a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e38:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e42:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e44:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e6      	bne.n	8008e24 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3308      	adds	r3, #8
 8008e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e68:	f023 0301 	bic.w	r3, r3, #1
 8008e6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3308      	adds	r3, #8
 8008e74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e76:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e5      	bne.n	8008e56 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a34      	ldr	r2, [pc, #208]	@ (8008f74 <UART_RxISR_16BIT+0x1b8>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d01f      	beq.n	8008ee8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d018      	beq.n	8008ee8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	e853 3f00 	ldrex	r3, [r3]
 8008ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008eca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ed6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e6      	bne.n	8008eb6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d12e      	bne.n	8008f4e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	e853 3f00 	ldrex	r3, [r3]
 8008f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f023 0310 	bic.w	r3, r3, #16
 8008f0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	461a      	mov	r2, r3
 8008f12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f14:	61bb      	str	r3, [r7, #24]
 8008f16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f18:	6979      	ldr	r1, [r7, #20]
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	e841 2300 	strex	r3, r2, [r1]
 8008f20:	613b      	str	r3, [r7, #16]
   return(result);
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1e6      	bne.n	8008ef6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	f003 0310 	and.w	r3, r3, #16
 8008f32:	2b10      	cmp	r3, #16
 8008f34:	d103      	bne.n	8008f3e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2210      	movs	r2, #16
 8008f3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7fe ffd4 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f4c:	e00d      	b.n	8008f6a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7f7 ffac 	bl	8000eac <HAL_UART_RxCpltCallback>
}
 8008f54:	e009      	b.n	8008f6a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	8b1b      	ldrh	r3, [r3, #24]
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0208 	orr.w	r2, r2, #8
 8008f66:	b292      	uxth	r2, r2
 8008f68:	831a      	strh	r2, [r3, #24]
}
 8008f6a:	bf00      	nop
 8008f6c:	3770      	adds	r7, #112	@ 0x70
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	40008000 	.word	0x40008000

08008f78 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b0ac      	sub	sp, #176	@ 0xb0
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f86:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fae:	2b22      	cmp	r3, #34	@ 0x22
 8008fb0:	f040 8182 	bne.w	80092b8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008fba:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fbe:	e125      	b.n	800920c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008fc6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008fca:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008fce:	b2d9      	uxtb	r1, r3
 8008fd0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fda:	400a      	ands	r2, r1
 8008fdc:	b2d2      	uxtb	r2, r2
 8008fde:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fe4:	1c5a      	adds	r2, r3, #1
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800900a:	f003 0307 	and.w	r3, r3, #7
 800900e:	2b00      	cmp	r3, #0
 8009010:	d053      	beq.n	80090ba <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d011      	beq.n	8009042 <UART_RxISR_8BIT_FIFOEN+0xca>
 800901e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00b      	beq.n	8009042 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2201      	movs	r2, #1
 8009030:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009038:	f043 0201 	orr.w	r2, r3, #1
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009046:	f003 0302 	and.w	r3, r3, #2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d011      	beq.n	8009072 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800904e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00b      	beq.n	8009072 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2202      	movs	r2, #2
 8009060:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009068:	f043 0204 	orr.w	r2, r3, #4
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009076:	f003 0304 	and.w	r3, r3, #4
 800907a:	2b00      	cmp	r3, #0
 800907c:	d011      	beq.n	80090a2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800907e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00b      	beq.n	80090a2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2204      	movs	r2, #4
 8009090:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009098:	f043 0202 	orr.w	r2, r3, #2
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d006      	beq.n	80090ba <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f7fe ff17 	bl	8007ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f040 80a2 	bne.w	800920c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090d0:	e853 3f00 	ldrex	r3, [r3]
 80090d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80090d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	461a      	mov	r2, r3
 80090e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090ec:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80090f0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80090f2:	e841 2300 	strex	r3, r2, [r1]
 80090f6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80090f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e4      	bne.n	80090c8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3308      	adds	r3, #8
 8009104:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800910e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009110:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009114:	f023 0301 	bic.w	r3, r3, #1
 8009118:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3308      	adds	r3, #8
 8009122:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009126:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009128:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800912c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009134:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e1      	bne.n	80090fe <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2220      	movs	r2, #32
 800913e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a60      	ldr	r2, [pc, #384]	@ (80092d4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d021      	beq.n	800919c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d01a      	beq.n	800919c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800916e:	e853 3f00 	ldrex	r3, [r3]
 8009172:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009176:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800917a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009188:	657b      	str	r3, [r7, #84]	@ 0x54
 800918a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800918e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009190:	e841 2300 	strex	r3, r2, [r1]
 8009194:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1e4      	bne.n	8009166 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d130      	bne.n	8009206 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ba:	f023 0310 	bic.w	r3, r3, #16
 80091be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80091ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091d4:	e841 2300 	strex	r3, r2, [r1]
 80091d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1e4      	bne.n	80091aa <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	f003 0310 	and.w	r3, r3, #16
 80091ea:	2b10      	cmp	r3, #16
 80091ec:	d103      	bne.n	80091f6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2210      	movs	r2, #16
 80091f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7fe fe78 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
 8009204:	e002      	b.n	800920c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7f7 fe50 	bl	8000eac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800920c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009210:	2b00      	cmp	r3, #0
 8009212:	d006      	beq.n	8009222 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009218:	f003 0320 	and.w	r3, r3, #32
 800921c:	2b00      	cmp	r3, #0
 800921e:	f47f aecf 	bne.w	8008fc0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009228:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800922c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009230:	2b00      	cmp	r3, #0
 8009232:	d04b      	beq.n	80092cc <UART_RxISR_8BIT_FIFOEN+0x354>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800923a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800923e:	429a      	cmp	r2, r3
 8009240:	d244      	bcs.n	80092cc <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3308      	adds	r3, #8
 8009248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	e853 3f00 	ldrex	r3, [r3]
 8009250:	61fb      	str	r3, [r7, #28]
   return(result);
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009258:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3308      	adds	r3, #8
 8009262:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009266:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009268:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800926c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800926e:	e841 2300 	strex	r3, r2, [r1]
 8009272:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e3      	bne.n	8009242 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a16      	ldr	r2, [pc, #88]	@ (80092d8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800927e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	60bb      	str	r3, [r7, #8]
   return(result);
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f043 0320 	orr.w	r3, r3, #32
 8009294:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	461a      	mov	r2, r3
 800929e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80092a2:	61bb      	str	r3, [r7, #24]
 80092a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	6979      	ldr	r1, [r7, #20]
 80092a8:	69ba      	ldr	r2, [r7, #24]
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	613b      	str	r3, [r7, #16]
   return(result);
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e4      	bne.n	8009280 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092b6:	e009      	b.n	80092cc <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	8b1b      	ldrh	r3, [r3, #24]
 80092be:	b29a      	uxth	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f042 0208 	orr.w	r2, r2, #8
 80092c8:	b292      	uxth	r2, r2
 80092ca:	831a      	strh	r2, [r3, #24]
}
 80092cc:	bf00      	nop
 80092ce:	37b0      	adds	r7, #176	@ 0xb0
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	40008000 	.word	0x40008000
 80092d8:	08008c01 	.word	0x08008c01

080092dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b0ae      	sub	sp, #184	@ 0xb8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	69db      	ldr	r3, [r3, #28]
 80092f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009312:	2b22      	cmp	r3, #34	@ 0x22
 8009314:	f040 8186 	bne.w	8009624 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800931e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009322:	e129      	b.n	8009578 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800932a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009332:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009336:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800933a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800933e:	4013      	ands	r3, r2
 8009340:	b29a      	uxth	r2, r3
 8009342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009346:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800934c:	1c9a      	adds	r2, r3, #2
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009358:	b29b      	uxth	r3, r3
 800935a:	3b01      	subs	r3, #1
 800935c:	b29a      	uxth	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	69db      	ldr	r3, [r3, #28]
 800936a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800936e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009372:	f003 0307 	and.w	r3, r3, #7
 8009376:	2b00      	cmp	r3, #0
 8009378:	d053      	beq.n	8009422 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800937a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d011      	beq.n	80093aa <UART_RxISR_16BIT_FIFOEN+0xce>
 8009386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800938a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00b      	beq.n	80093aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2201      	movs	r2, #1
 8009398:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093a0:	f043 0201 	orr.w	r2, r3, #1
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d011      	beq.n	80093da <UART_RxISR_16BIT_FIFOEN+0xfe>
 80093b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00b      	beq.n	80093da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2202      	movs	r2, #2
 80093c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d0:	f043 0204 	orr.w	r2, r3, #4
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093de:	f003 0304 	and.w	r3, r3, #4
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d011      	beq.n	800940a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80093e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00b      	beq.n	800940a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2204      	movs	r2, #4
 80093f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009400:	f043 0202 	orr.w	r2, r3, #2
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009410:	2b00      	cmp	r3, #0
 8009412:	d006      	beq.n	8009422 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7fe fd63 	bl	8007ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009428:	b29b      	uxth	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	f040 80a4 	bne.w	8009578 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800943e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009444:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	461a      	mov	r2, r3
 800944e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009452:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009456:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800945a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800945e:	e841 2300 	strex	r3, r2, [r1]
 8009462:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1e2      	bne.n	8009430 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3308      	adds	r3, #8
 8009470:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800947a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800947c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009480:	f023 0301 	bic.w	r3, r3, #1
 8009484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3308      	adds	r3, #8
 800948e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009492:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009494:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009496:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009498:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e1      	bne.n	800946a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2220      	movs	r2, #32
 80094aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a60      	ldr	r2, [pc, #384]	@ (8009640 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d021      	beq.n	8009508 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d01a      	beq.n	8009508 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094da:	e853 3f00 	ldrex	r3, [r3]
 80094de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80094e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	461a      	mov	r2, r3
 80094f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80094f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094f6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094fc:	e841 2300 	strex	r3, r2, [r1]
 8009500:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e4      	bne.n	80094d2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800950c:	2b01      	cmp	r3, #1
 800950e:	d130      	bne.n	8009572 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951e:	e853 3f00 	ldrex	r3, [r3]
 8009522:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009526:	f023 0310 	bic.w	r3, r3, #16
 800952a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009538:	647b      	str	r3, [r7, #68]	@ 0x44
 800953a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800953e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009540:	e841 2300 	strex	r3, r2, [r1]
 8009544:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e4      	bne.n	8009516 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	f003 0310 	and.w	r3, r3, #16
 8009556:	2b10      	cmp	r3, #16
 8009558:	d103      	bne.n	8009562 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2210      	movs	r2, #16
 8009560:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7fe fcc2 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
 8009570:	e002      	b.n	8009578 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7f7 fc9a 	bl	8000eac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009578:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800957c:	2b00      	cmp	r3, #0
 800957e:	d006      	beq.n	800958e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009580:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009584:	f003 0320 	and.w	r3, r3, #32
 8009588:	2b00      	cmp	r3, #0
 800958a:	f47f aecb 	bne.w	8009324 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009594:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009598:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800959c:	2b00      	cmp	r3, #0
 800959e:	d04b      	beq.n	8009638 <UART_RxISR_16BIT_FIFOEN+0x35c>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80095a6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d244      	bcs.n	8009638 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3308      	adds	r3, #8
 80095b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b8:	e853 3f00 	ldrex	r3, [r3]
 80095bc:	623b      	str	r3, [r7, #32]
   return(result);
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3308      	adds	r3, #8
 80095ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80095d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80095d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e3      	bne.n	80095ae <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a16      	ldr	r2, [pc, #88]	@ (8009644 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80095ea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f043 0320 	orr.w	r3, r3, #32
 8009600:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800960e:	61fb      	str	r3, [r7, #28]
 8009610:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	69b9      	ldr	r1, [r7, #24]
 8009614:	69fa      	ldr	r2, [r7, #28]
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	617b      	str	r3, [r7, #20]
   return(result);
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e4      	bne.n	80095ec <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009622:	e009      	b.n	8009638 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	8b1b      	ldrh	r3, [r3, #24]
 800962a:	b29a      	uxth	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f042 0208 	orr.w	r2, r2, #8
 8009634:	b292      	uxth	r2, r2
 8009636:	831a      	strh	r2, [r3, #24]
}
 8009638:	bf00      	nop
 800963a:	37b8      	adds	r7, #184	@ 0xb8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	40008000 	.word	0x40008000
 8009644:	08008dbd 	.word	0x08008dbd

08009648 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009692:	2b01      	cmp	r3, #1
 8009694:	d101      	bne.n	800969a <HAL_UARTEx_DisableFifoMode+0x16>
 8009696:	2302      	movs	r3, #2
 8009698:	e027      	b.n	80096ea <HAL_UARTEx_DisableFifoMode+0x66>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2224      	movs	r2, #36	@ 0x24
 80096a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 0201 	bic.w	r2, r2, #1
 80096c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80096c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2220      	movs	r2, #32
 80096dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009706:	2b01      	cmp	r3, #1
 8009708:	d101      	bne.n	800970e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800970a:	2302      	movs	r3, #2
 800970c:	e02d      	b.n	800976a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2224      	movs	r2, #36	@ 0x24
 800971a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 0201 	bic.w	r2, r2, #1
 8009734:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f850 	bl	80097f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2220      	movs	r2, #32
 800975c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b084      	sub	sp, #16
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009782:	2b01      	cmp	r3, #1
 8009784:	d101      	bne.n	800978a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009786:	2302      	movs	r3, #2
 8009788:	e02d      	b.n	80097e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2224      	movs	r2, #36	@ 0x24
 8009796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f022 0201 	bic.w	r2, r2, #1
 80097b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f812 	bl	80097f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2220      	movs	r2, #32
 80097d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
	...

080097f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d108      	bne.n	8009812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009810:	e031      	b.n	8009876 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009812:	2308      	movs	r3, #8
 8009814:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009816:	2308      	movs	r3, #8
 8009818:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	0e5b      	lsrs	r3, r3, #25
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f003 0307 	and.w	r3, r3, #7
 8009828:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	0f5b      	lsrs	r3, r3, #29
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 0307 	and.w	r3, r3, #7
 8009838:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800983a:	7bbb      	ldrb	r3, [r7, #14]
 800983c:	7b3a      	ldrb	r2, [r7, #12]
 800983e:	4911      	ldr	r1, [pc, #68]	@ (8009884 <UARTEx_SetNbDataToProcess+0x94>)
 8009840:	5c8a      	ldrb	r2, [r1, r2]
 8009842:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009846:	7b3a      	ldrb	r2, [r7, #12]
 8009848:	490f      	ldr	r1, [pc, #60]	@ (8009888 <UARTEx_SetNbDataToProcess+0x98>)
 800984a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800984c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009850:	b29a      	uxth	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	7b7a      	ldrb	r2, [r7, #13]
 800985c:	4909      	ldr	r1, [pc, #36]	@ (8009884 <UARTEx_SetNbDataToProcess+0x94>)
 800985e:	5c8a      	ldrb	r2, [r1, r2]
 8009860:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009864:	7b7a      	ldrb	r2, [r7, #13]
 8009866:	4908      	ldr	r1, [pc, #32]	@ (8009888 <UARTEx_SetNbDataToProcess+0x98>)
 8009868:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800986a:	fb93 f3f2 	sdiv	r3, r3, r2
 800986e:	b29a      	uxth	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009876:	bf00      	nop
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	0800db2c 	.word	0x0800db2c
 8009888:	0800db34 	.word	0x0800db34

0800988c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800988c:	b084      	sub	sp, #16
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	f107 001c 	add.w	r0, r7, #28
 800989a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f001 fa1c 	bl	800ace8 <USB_CoreReset>
 80098b0:	4603      	mov	r3, r0
 80098b2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80098b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d106      	bne.n	80098c8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80098c6:	e005      	b.n	80098d4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098e0:	b004      	add	sp, #16
 80098e2:	4770      	bx	lr

080098e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	4613      	mov	r3, r2
 80098f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d165      	bne.n	80099c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	4a3e      	ldr	r2, [pc, #248]	@ (80099f4 <USB_SetTurnaroundTime+0x110>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d906      	bls.n	800990e <USB_SetTurnaroundTime+0x2a>
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	4a3d      	ldr	r2, [pc, #244]	@ (80099f8 <USB_SetTurnaroundTime+0x114>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d202      	bcs.n	800990e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009908:	230f      	movs	r3, #15
 800990a:	617b      	str	r3, [r7, #20]
 800990c:	e05c      	b.n	80099c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	4a39      	ldr	r2, [pc, #228]	@ (80099f8 <USB_SetTurnaroundTime+0x114>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d306      	bcc.n	8009924 <USB_SetTurnaroundTime+0x40>
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	4a38      	ldr	r2, [pc, #224]	@ (80099fc <USB_SetTurnaroundTime+0x118>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d202      	bcs.n	8009924 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800991e:	230e      	movs	r3, #14
 8009920:	617b      	str	r3, [r7, #20]
 8009922:	e051      	b.n	80099c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	4a35      	ldr	r2, [pc, #212]	@ (80099fc <USB_SetTurnaroundTime+0x118>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d306      	bcc.n	800993a <USB_SetTurnaroundTime+0x56>
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	4a34      	ldr	r2, [pc, #208]	@ (8009a00 <USB_SetTurnaroundTime+0x11c>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d202      	bcs.n	800993a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009934:	230d      	movs	r3, #13
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	e046      	b.n	80099c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	4a30      	ldr	r2, [pc, #192]	@ (8009a00 <USB_SetTurnaroundTime+0x11c>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d306      	bcc.n	8009950 <USB_SetTurnaroundTime+0x6c>
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	4a2f      	ldr	r2, [pc, #188]	@ (8009a04 <USB_SetTurnaroundTime+0x120>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d802      	bhi.n	8009950 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800994a:	230c      	movs	r3, #12
 800994c:	617b      	str	r3, [r7, #20]
 800994e:	e03b      	b.n	80099c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	4a2c      	ldr	r2, [pc, #176]	@ (8009a04 <USB_SetTurnaroundTime+0x120>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d906      	bls.n	8009966 <USB_SetTurnaroundTime+0x82>
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	4a2b      	ldr	r2, [pc, #172]	@ (8009a08 <USB_SetTurnaroundTime+0x124>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d802      	bhi.n	8009966 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009960:	230b      	movs	r3, #11
 8009962:	617b      	str	r3, [r7, #20]
 8009964:	e030      	b.n	80099c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	4a27      	ldr	r2, [pc, #156]	@ (8009a08 <USB_SetTurnaroundTime+0x124>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d906      	bls.n	800997c <USB_SetTurnaroundTime+0x98>
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	4a26      	ldr	r2, [pc, #152]	@ (8009a0c <USB_SetTurnaroundTime+0x128>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d802      	bhi.n	800997c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009976:	230a      	movs	r3, #10
 8009978:	617b      	str	r3, [r7, #20]
 800997a:	e025      	b.n	80099c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	4a23      	ldr	r2, [pc, #140]	@ (8009a0c <USB_SetTurnaroundTime+0x128>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d906      	bls.n	8009992 <USB_SetTurnaroundTime+0xae>
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	4a22      	ldr	r2, [pc, #136]	@ (8009a10 <USB_SetTurnaroundTime+0x12c>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d202      	bcs.n	8009992 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800998c:	2309      	movs	r3, #9
 800998e:	617b      	str	r3, [r7, #20]
 8009990:	e01a      	b.n	80099c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	4a1e      	ldr	r2, [pc, #120]	@ (8009a10 <USB_SetTurnaroundTime+0x12c>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d306      	bcc.n	80099a8 <USB_SetTurnaroundTime+0xc4>
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	4a1d      	ldr	r2, [pc, #116]	@ (8009a14 <USB_SetTurnaroundTime+0x130>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d802      	bhi.n	80099a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80099a2:	2308      	movs	r3, #8
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	e00f      	b.n	80099c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	4a1a      	ldr	r2, [pc, #104]	@ (8009a14 <USB_SetTurnaroundTime+0x130>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d906      	bls.n	80099be <USB_SetTurnaroundTime+0xda>
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	4a19      	ldr	r2, [pc, #100]	@ (8009a18 <USB_SetTurnaroundTime+0x134>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d202      	bcs.n	80099be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80099b8:	2307      	movs	r3, #7
 80099ba:	617b      	str	r3, [r7, #20]
 80099bc:	e004      	b.n	80099c8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80099be:	2306      	movs	r3, #6
 80099c0:	617b      	str	r3, [r7, #20]
 80099c2:	e001      	b.n	80099c8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80099c4:	2309      	movs	r3, #9
 80099c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	68da      	ldr	r2, [r3, #12]
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	029b      	lsls	r3, r3, #10
 80099dc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80099e0:	431a      	orrs	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	371c      	adds	r7, #28
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	00d8acbf 	.word	0x00d8acbf
 80099f8:	00e4e1c0 	.word	0x00e4e1c0
 80099fc:	00f42400 	.word	0x00f42400
 8009a00:	01067380 	.word	0x01067380
 8009a04:	011a499f 	.word	0x011a499f
 8009a08:	01312cff 	.word	0x01312cff
 8009a0c:	014ca43f 	.word	0x014ca43f
 8009a10:	016e3600 	.word	0x016e3600
 8009a14:	01a6ab1f 	.word	0x01a6ab1f
 8009a18:	01e84800 	.word	0x01e84800

08009a1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f043 0201 	orr.w	r2, r3, #1
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f023 0201 	bic.w	r2, r3, #1
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a7c:	78fb      	ldrb	r3, [r7, #3]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d115      	bne.n	8009aae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a8e:	2001      	movs	r0, #1
 8009a90:	f7f7 fff2 	bl	8001a78 <HAL_Delay>
      ms++;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	3301      	adds	r3, #1
 8009a98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f001 f8ab 	bl	800abf6 <USB_GetMode>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d01e      	beq.n	8009ae4 <USB_SetCurrentMode+0x84>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2b31      	cmp	r3, #49	@ 0x31
 8009aaa:	d9f0      	bls.n	8009a8e <USB_SetCurrentMode+0x2e>
 8009aac:	e01a      	b.n	8009ae4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009aae:	78fb      	ldrb	r3, [r7, #3]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d115      	bne.n	8009ae0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ac0:	2001      	movs	r0, #1
 8009ac2:	f7f7 ffd9 	bl	8001a78 <HAL_Delay>
      ms++;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f001 f892 	bl	800abf6 <USB_GetMode>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d005      	beq.n	8009ae4 <USB_SetCurrentMode+0x84>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2b31      	cmp	r3, #49	@ 0x31
 8009adc:	d9f0      	bls.n	8009ac0 <USB_SetCurrentMode+0x60>
 8009ade:	e001      	b.n	8009ae4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e005      	b.n	8009af0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2b32      	cmp	r3, #50	@ 0x32
 8009ae8:	d101      	bne.n	8009aee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e000      	b.n	8009af0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009af8:	b084      	sub	sp, #16
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b086      	sub	sp, #24
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b12:	2300      	movs	r3, #0
 8009b14:	613b      	str	r3, [r7, #16]
 8009b16:	e009      	b.n	8009b2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	3340      	adds	r3, #64	@ 0x40
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4413      	add	r3, r2
 8009b22:	2200      	movs	r2, #0
 8009b24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	613b      	str	r3, [r7, #16]
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	2b0e      	cmp	r3, #14
 8009b30:	d9f2      	bls.n	8009b18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d11c      	bne.n	8009b72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b46:	f043 0302 	orr.w	r3, r3, #2
 8009b4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b50:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	601a      	str	r2, [r3, #0]
 8009b70:	e005      	b.n	8009b7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b84:	461a      	mov	r2, r3
 8009b86:	2300      	movs	r3, #0
 8009b88:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b8a:	2103      	movs	r1, #3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f959 	bl	8009e44 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b92:	2110      	movs	r1, #16
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f8f1 	bl	8009d7c <USB_FlushTxFifo>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f91d 	bl	8009de4 <USB_FlushRxFifo>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bba:	461a      	mov	r2, r3
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	2300      	movs	r3, #0
 8009bca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bd8:	2300      	movs	r3, #0
 8009bda:	613b      	str	r3, [r7, #16]
 8009bdc:	e043      	b.n	8009c66 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bf4:	d118      	bne.n	8009c28 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10a      	bne.n	8009c12 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	015a      	lsls	r2, r3, #5
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4413      	add	r3, r2
 8009c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c08:	461a      	mov	r2, r3
 8009c0a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	e013      	b.n	8009c3a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	015a      	lsls	r2, r3, #5
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009c24:	6013      	str	r3, [r2, #0]
 8009c26:	e008      	b.n	8009c3a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c34:	461a      	mov	r2, r3
 8009c36:	2300      	movs	r3, #0
 8009c38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	015a      	lsls	r2, r3, #5
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	4413      	add	r3, r2
 8009c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c46:	461a      	mov	r2, r3
 8009c48:	2300      	movs	r3, #0
 8009c4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	015a      	lsls	r2, r3, #5
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4413      	add	r3, r2
 8009c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c58:	461a      	mov	r2, r3
 8009c5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009c5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	3301      	adds	r3, #1
 8009c64:	613b      	str	r3, [r7, #16]
 8009c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d3b7      	bcc.n	8009bde <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c6e:	2300      	movs	r3, #0
 8009c70:	613b      	str	r3, [r7, #16]
 8009c72:	e043      	b.n	8009cfc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c8a:	d118      	bne.n	8009cbe <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	015a      	lsls	r2, r3, #5
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009ca4:	6013      	str	r3, [r2, #0]
 8009ca6:	e013      	b.n	8009cd0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	015a      	lsls	r2, r3, #5
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4413      	add	r3, r2
 8009cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	e008      	b.n	8009cd0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	015a      	lsls	r2, r3, #5
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cca:	461a      	mov	r2, r3
 8009ccc:	2300      	movs	r3, #0
 8009cce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cdc:	461a      	mov	r2, r3
 8009cde:	2300      	movs	r3, #0
 8009ce0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	015a      	lsls	r2, r3, #5
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	4413      	add	r3, r2
 8009cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009cf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	613b      	str	r3, [r7, #16]
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d3b7      	bcc.n	8009c74 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009d24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	f043 0210 	orr.w	r2, r3, #16
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	699a      	ldr	r2, [r3, #24]
 8009d36:	4b10      	ldr	r3, [pc, #64]	@ (8009d78 <USB_DevInit+0x280>)
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d005      	beq.n	8009d50 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	f043 0208 	orr.w	r2, r3, #8
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d107      	bne.n	8009d66 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	699b      	ldr	r3, [r3, #24]
 8009d5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d5e:	f043 0304 	orr.w	r3, r3, #4
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3718      	adds	r7, #24
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d72:	b004      	add	sp, #16
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	803c3800 	.word	0x803c3800

08009d7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d86:	2300      	movs	r3, #0
 8009d88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4a13      	ldr	r2, [pc, #76]	@ (8009de0 <USB_FlushTxFifo+0x64>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d901      	bls.n	8009d9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e01b      	b.n	8009dd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	daf2      	bge.n	8009d8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009da4:	2300      	movs	r3, #0
 8009da6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	019b      	lsls	r3, r3, #6
 8009dac:	f043 0220 	orr.w	r2, r3, #32
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3301      	adds	r3, #1
 8009db8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	4a08      	ldr	r2, [pc, #32]	@ (8009de0 <USB_FlushTxFifo+0x64>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d901      	bls.n	8009dc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e006      	b.n	8009dd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	f003 0320 	and.w	r3, r3, #32
 8009dce:	2b20      	cmp	r3, #32
 8009dd0:	d0f0      	beq.n	8009db4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	00030d40 	.word	0x00030d40

08009de4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009dec:	2300      	movs	r3, #0
 8009dee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	3301      	adds	r3, #1
 8009df4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	4a11      	ldr	r2, [pc, #68]	@ (8009e40 <USB_FlushRxFifo+0x5c>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d901      	bls.n	8009e02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e018      	b.n	8009e34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	daf2      	bge.n	8009df0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2210      	movs	r2, #16
 8009e12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	3301      	adds	r3, #1
 8009e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	4a08      	ldr	r2, [pc, #32]	@ (8009e40 <USB_FlushRxFifo+0x5c>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d901      	bls.n	8009e26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e006      	b.n	8009e34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	f003 0310 	and.w	r3, r3, #16
 8009e2e:	2b10      	cmp	r3, #16
 8009e30:	d0f0      	beq.n	8009e14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	00030d40 	.word	0x00030d40

08009e44 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	78fb      	ldrb	r3, [r7, #3]
 8009e5e:	68f9      	ldr	r1, [r7, #12]
 8009e60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e64:	4313      	orrs	r3, r2
 8009e66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b087      	sub	sp, #28
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f003 0306 	and.w	r3, r3, #6
 8009e8e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d002      	beq.n	8009e9c <USB_GetDevSpeed+0x26>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2b06      	cmp	r3, #6
 8009e9a:	d102      	bne.n	8009ea2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	75fb      	strb	r3, [r7, #23]
 8009ea0:	e001      	b.n	8009ea6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009ea2:	230f      	movs	r3, #15
 8009ea4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	371c      	adds	r7, #28
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	785b      	ldrb	r3, [r3, #1]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d13a      	bne.n	8009f46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ed6:	69da      	ldr	r2, [r3, #28]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	f003 030f 	and.w	r3, r3, #15
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	68f9      	ldr	r1, [r7, #12]
 8009eea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	015a      	lsls	r2, r3, #5
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d155      	bne.n	8009fb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	015a      	lsls	r2, r3, #5
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4413      	add	r3, r2
 8009f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	791b      	ldrb	r3, [r3, #4]
 8009f22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	059b      	lsls	r3, r3, #22
 8009f2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	0151      	lsls	r1, r2, #5
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	440a      	add	r2, r1
 8009f36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f42:	6013      	str	r3, [r2, #0]
 8009f44:	e036      	b.n	8009fb4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f4c:	69da      	ldr	r2, [r3, #28]
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	f003 030f 	and.w	r3, r3, #15
 8009f56:	2101      	movs	r1, #1
 8009f58:	fa01 f303 	lsl.w	r3, r1, r3
 8009f5c:	041b      	lsls	r3, r3, #16
 8009f5e:	68f9      	ldr	r1, [r7, #12]
 8009f60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f64:	4313      	orrs	r3, r2
 8009f66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d11a      	bne.n	8009fb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	015a      	lsls	r2, r3, #5
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	4413      	add	r3, r2
 8009f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	791b      	ldrb	r3, [r3, #4]
 8009f98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f9a:	430b      	orrs	r3, r1
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	0151      	lsls	r1, r2, #5
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	440a      	add	r2, r1
 8009fa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fb2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
	...

08009fc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	785b      	ldrb	r3, [r3, #1]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d161      	bne.n	800a0a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ff6:	d11f      	bne.n	800a038 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	0151      	lsls	r1, r2, #5
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	440a      	add	r2, r1
 800a00e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a012:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a016:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	0151      	lsls	r1, r2, #5
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	440a      	add	r2, r1
 800a02e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a032:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a036:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a03e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	f003 030f 	and.w	r3, r3, #15
 800a048:	2101      	movs	r1, #1
 800a04a:	fa01 f303 	lsl.w	r3, r1, r3
 800a04e:	b29b      	uxth	r3, r3
 800a050:	43db      	mvns	r3, r3
 800a052:	68f9      	ldr	r1, [r7, #12]
 800a054:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a058:	4013      	ands	r3, r2
 800a05a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a062:	69da      	ldr	r2, [r3, #28]
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	f003 030f 	and.w	r3, r3, #15
 800a06c:	2101      	movs	r1, #1
 800a06e:	fa01 f303 	lsl.w	r3, r1, r3
 800a072:	b29b      	uxth	r3, r3
 800a074:	43db      	mvns	r3, r3
 800a076:	68f9      	ldr	r1, [r7, #12]
 800a078:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a07c:	4013      	ands	r3, r2
 800a07e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	015a      	lsls	r2, r3, #5
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4413      	add	r3, r2
 800a088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	0159      	lsls	r1, r3, #5
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	440b      	add	r3, r1
 800a096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a09a:	4619      	mov	r1, r3
 800a09c:	4b35      	ldr	r3, [pc, #212]	@ (800a174 <USB_DeactivateEndpoint+0x1b0>)
 800a09e:	4013      	ands	r3, r2
 800a0a0:	600b      	str	r3, [r1, #0]
 800a0a2:	e060      	b.n	800a166 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0ba:	d11f      	bne.n	800a0fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	015a      	lsls	r2, r3, #5
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	0151      	lsls	r1, r2, #5
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	440a      	add	r2, r1
 800a0d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a0da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	0151      	lsls	r1, r2, #5
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	440a      	add	r2, r1
 800a0f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	f003 030f 	and.w	r3, r3, #15
 800a10c:	2101      	movs	r1, #1
 800a10e:	fa01 f303 	lsl.w	r3, r1, r3
 800a112:	041b      	lsls	r3, r3, #16
 800a114:	43db      	mvns	r3, r3
 800a116:	68f9      	ldr	r1, [r7, #12]
 800a118:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a11c:	4013      	ands	r3, r2
 800a11e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a126:	69da      	ldr	r2, [r3, #28]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	f003 030f 	and.w	r3, r3, #15
 800a130:	2101      	movs	r1, #1
 800a132:	fa01 f303 	lsl.w	r3, r1, r3
 800a136:	041b      	lsls	r3, r3, #16
 800a138:	43db      	mvns	r3, r3
 800a13a:	68f9      	ldr	r1, [r7, #12]
 800a13c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a140:	4013      	ands	r3, r2
 800a142:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	015a      	lsls	r2, r3, #5
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	4413      	add	r3, r2
 800a14c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	0159      	lsls	r1, r3, #5
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	440b      	add	r3, r1
 800a15a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a15e:	4619      	mov	r1, r3
 800a160:	4b05      	ldr	r3, [pc, #20]	@ (800a178 <USB_DeactivateEndpoint+0x1b4>)
 800a162:	4013      	ands	r3, r2
 800a164:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	ec337800 	.word	0xec337800
 800a178:	eff37800 	.word	0xeff37800

0800a17c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	785b      	ldrb	r3, [r3, #1]
 800a194:	2b01      	cmp	r3, #1
 800a196:	f040 8128 	bne.w	800a3ea <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d132      	bne.n	800a208 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	0151      	lsls	r1, r2, #5
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	440a      	add	r2, r1
 800a1b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1bc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a1c0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a1c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	015a      	lsls	r2, r3, #5
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	0151      	lsls	r1, r2, #5
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	440a      	add	r2, r1
 800a1dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	0151      	lsls	r1, r2, #5
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	440a      	add	r2, r1
 800a1fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a200:	0cdb      	lsrs	r3, r3, #19
 800a202:	04db      	lsls	r3, r3, #19
 800a204:	6113      	str	r3, [r2, #16]
 800a206:	e092      	b.n	800a32e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	0151      	lsls	r1, r2, #5
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	440a      	add	r2, r1
 800a21e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a222:	0cdb      	lsrs	r3, r3, #19
 800a224:	04db      	lsls	r3, r3, #19
 800a226:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	0151      	lsls	r1, r2, #5
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	440a      	add	r2, r1
 800a23e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a242:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a246:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a24a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d11a      	bne.n	800a288 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	691a      	ldr	r2, [r3, #16]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d903      	bls.n	800a266 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	689a      	ldr	r2, [r3, #8]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	015a      	lsls	r2, r3, #5
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	4413      	add	r3, r2
 800a26e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	0151      	lsls	r1, r2, #5
 800a278:	697a      	ldr	r2, [r7, #20]
 800a27a:	440a      	add	r2, r1
 800a27c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a280:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a284:	6113      	str	r3, [r2, #16]
 800a286:	e01b      	b.n	800a2c0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a294:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	6919      	ldr	r1, [r3, #16]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	440b      	add	r3, r1
 800a2a0:	1e59      	subs	r1, r3, #1
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a2aa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a2ac:	4b8d      	ldr	r3, [pc, #564]	@ (800a4e4 <USB_EPStartXfer+0x368>)
 800a2ae:	400b      	ands	r3, r1
 800a2b0:	6939      	ldr	r1, [r7, #16]
 800a2b2:	0148      	lsls	r0, r1, #5
 800a2b4:	6979      	ldr	r1, [r7, #20]
 800a2b6:	4401      	add	r1, r0
 800a2b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	015a      	lsls	r2, r3, #5
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2cc:	691a      	ldr	r2, [r3, #16]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2d6:	6939      	ldr	r1, [r7, #16]
 800a2d8:	0148      	lsls	r0, r1, #5
 800a2da:	6979      	ldr	r1, [r7, #20]
 800a2dc:	4401      	add	r1, r0
 800a2de:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	791b      	ldrb	r3, [r3, #4]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d11f      	bne.n	800a32e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	0151      	lsls	r1, r2, #5
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	440a      	add	r2, r1
 800a304:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a308:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a30c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	015a      	lsls	r2, r3, #5
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	4413      	add	r3, r2
 800a316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	0151      	lsls	r1, r2, #5
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	440a      	add	r2, r1
 800a324:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a328:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a32c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	015a      	lsls	r2, r3, #5
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	4413      	add	r3, r2
 800a336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	0151      	lsls	r1, r2, #5
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	440a      	add	r2, r1
 800a344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a348:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a34c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	791b      	ldrb	r3, [r3, #4]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d015      	beq.n	800a382 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 8139 	beq.w	800a5d2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	f003 030f 	and.w	r3, r3, #15
 800a370:	2101      	movs	r1, #1
 800a372:	fa01 f303 	lsl.w	r3, r1, r3
 800a376:	6979      	ldr	r1, [r7, #20]
 800a378:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a37c:	4313      	orrs	r3, r2
 800a37e:	634b      	str	r3, [r1, #52]	@ 0x34
 800a380:	e127      	b.n	800a5d2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d110      	bne.n	800a3b4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	015a      	lsls	r2, r3, #5
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	4413      	add	r3, r2
 800a39a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	0151      	lsls	r1, r2, #5
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	440a      	add	r2, r1
 800a3a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3b0:	6013      	str	r3, [r2, #0]
 800a3b2:	e00f      	b.n	800a3d4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	015a      	lsls	r2, r3, #5
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	0151      	lsls	r1, r2, #5
 800a3c6:	697a      	ldr	r2, [r7, #20]
 800a3c8:	440a      	add	r2, r1
 800a3ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3d2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	68d9      	ldr	r1, [r3, #12]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	781a      	ldrb	r2, [r3, #0]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f9a6 	bl	800a734 <USB_WritePacket>
 800a3e8:	e0f3      	b.n	800a5d2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	015a      	lsls	r2, r3, #5
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	0151      	lsls	r1, r2, #5
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	440a      	add	r2, r1
 800a400:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a404:	0cdb      	lsrs	r3, r3, #19
 800a406:	04db      	lsls	r3, r3, #19
 800a408:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	015a      	lsls	r2, r3, #5
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	4413      	add	r3, r2
 800a412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	0151      	lsls	r1, r2, #5
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	440a      	add	r2, r1
 800a420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a424:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a428:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a42c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d12f      	bne.n	800a494 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d003      	beq.n	800a444 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	689a      	ldr	r2, [r3, #8]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	689a      	ldr	r2, [r3, #8]
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	4413      	add	r3, r2
 800a454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a458:	691a      	ldr	r2, [r3, #16]
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a462:	6939      	ldr	r1, [r7, #16]
 800a464:	0148      	lsls	r0, r1, #5
 800a466:	6979      	ldr	r1, [r7, #20]
 800a468:	4401      	add	r1, r0
 800a46a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a46e:	4313      	orrs	r3, r2
 800a470:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	015a      	lsls	r2, r3, #5
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	4413      	add	r3, r2
 800a47a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	0151      	lsls	r1, r2, #5
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	440a      	add	r2, r1
 800a488:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a48c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a490:	6113      	str	r3, [r2, #16]
 800a492:	e061      	b.n	800a558 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d125      	bne.n	800a4e8 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4a8:	691a      	ldr	r2, [r3, #16]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4b2:	6939      	ldr	r1, [r7, #16]
 800a4b4:	0148      	lsls	r0, r1, #5
 800a4b6:	6979      	ldr	r1, [r7, #20]
 800a4b8:	4401      	add	r1, r0
 800a4ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	015a      	lsls	r2, r3, #5
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	0151      	lsls	r1, r2, #5
 800a4d4:	697a      	ldr	r2, [r7, #20]
 800a4d6:	440a      	add	r2, r1
 800a4d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4e0:	6113      	str	r3, [r2, #16]
 800a4e2:	e039      	b.n	800a558 <USB_EPStartXfer+0x3dc>
 800a4e4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	691a      	ldr	r2, [r3, #16]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	1e5a      	subs	r2, r3, #1
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4fc:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	89fa      	ldrh	r2, [r7, #14]
 800a504:	fb03 f202 	mul.w	r2, r3, r2
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a518:	691a      	ldr	r2, [r3, #16]
 800a51a:	89fb      	ldrh	r3, [r7, #14]
 800a51c:	04d9      	lsls	r1, r3, #19
 800a51e:	4b2f      	ldr	r3, [pc, #188]	@ (800a5dc <USB_EPStartXfer+0x460>)
 800a520:	400b      	ands	r3, r1
 800a522:	6939      	ldr	r1, [r7, #16]
 800a524:	0148      	lsls	r0, r1, #5
 800a526:	6979      	ldr	r1, [r7, #20]
 800a528:	4401      	add	r1, r0
 800a52a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a52e:	4313      	orrs	r3, r2
 800a530:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a53e:	691a      	ldr	r2, [r3, #16]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	6a1b      	ldr	r3, [r3, #32]
 800a544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a548:	6939      	ldr	r1, [r7, #16]
 800a54a:	0148      	lsls	r0, r1, #5
 800a54c:	6979      	ldr	r1, [r7, #20]
 800a54e:	4401      	add	r1, r0
 800a550:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a554:	4313      	orrs	r3, r2
 800a556:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	791b      	ldrb	r3, [r3, #4]
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d128      	bne.n	800a5b2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d110      	bne.n	800a592 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	0151      	lsls	r1, r2, #5
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	440a      	add	r2, r1
 800a586:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a58a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	e00f      	b.n	800a5b2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	015a      	lsls	r2, r3, #5
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	4413      	add	r3, r2
 800a59a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	0151      	lsls	r1, r2, #5
 800a5a4:	697a      	ldr	r2, [r7, #20]
 800a5a6:	440a      	add	r2, r1
 800a5a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5b0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	015a      	lsls	r2, r3, #5
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	0151      	lsls	r1, r2, #5
 800a5c4:	697a      	ldr	r2, [r7, #20]
 800a5c6:	440a      	add	r2, r1
 800a5c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5cc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a5d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	1ff80000 	.word	0x1ff80000

0800a5e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	785b      	ldrb	r3, [r3, #1]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d14a      	bne.n	800a694 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	015a      	lsls	r2, r3, #5
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	4413      	add	r3, r2
 800a608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a612:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a616:	f040 8086 	bne.w	800a726 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	015a      	lsls	r2, r3, #5
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	4413      	add	r3, r2
 800a624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	7812      	ldrb	r2, [r2, #0]
 800a62e:	0151      	lsls	r1, r2, #5
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	440a      	add	r2, r1
 800a634:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a638:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a63c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	683a      	ldr	r2, [r7, #0]
 800a650:	7812      	ldrb	r2, [r2, #0]
 800a652:	0151      	lsls	r1, r2, #5
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	440a      	add	r2, r1
 800a658:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a65c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a660:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3301      	adds	r3, #1
 800a666:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a66e:	4293      	cmp	r3, r2
 800a670:	d902      	bls.n	800a678 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	75fb      	strb	r3, [r7, #23]
          break;
 800a676:	e056      	b.n	800a726 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	015a      	lsls	r2, r3, #5
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	4413      	add	r3, r2
 800a682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a68c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a690:	d0e7      	beq.n	800a662 <USB_EPStopXfer+0x82>
 800a692:	e048      	b.n	800a726 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6ac:	d13b      	bne.n	800a726 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	015a      	lsls	r2, r3, #5
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	7812      	ldrb	r2, [r2, #0]
 800a6c2:	0151      	lsls	r1, r2, #5
 800a6c4:	693a      	ldr	r2, [r7, #16]
 800a6c6:	440a      	add	r2, r1
 800a6c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a6d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	015a      	lsls	r2, r3, #5
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	683a      	ldr	r2, [r7, #0]
 800a6e4:	7812      	ldrb	r2, [r2, #0]
 800a6e6:	0151      	lsls	r1, r2, #5
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	440a      	add	r2, r1
 800a6ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a6f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a702:	4293      	cmp	r3, r2
 800a704:	d902      	bls.n	800a70c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	75fb      	strb	r3, [r7, #23]
          break;
 800a70a:	e00c      	b.n	800a726 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	015a      	lsls	r2, r3, #5
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	4413      	add	r3, r2
 800a716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a720:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a724:	d0e7      	beq.n	800a6f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a726:	7dfb      	ldrb	r3, [r7, #23]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	371c      	adds	r7, #28
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a734:	b480      	push	{r7}
 800a736:	b089      	sub	sp, #36	@ 0x24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	4611      	mov	r1, r2
 800a740:	461a      	mov	r2, r3
 800a742:	460b      	mov	r3, r1
 800a744:	71fb      	strb	r3, [r7, #7]
 800a746:	4613      	mov	r3, r2
 800a748:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a752:	88bb      	ldrh	r3, [r7, #4]
 800a754:	3303      	adds	r3, #3
 800a756:	089b      	lsrs	r3, r3, #2
 800a758:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a75a:	2300      	movs	r3, #0
 800a75c:	61bb      	str	r3, [r7, #24]
 800a75e:	e018      	b.n	800a792 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a760:	79fb      	ldrb	r3, [r7, #7]
 800a762:	031a      	lsls	r2, r3, #12
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	4413      	add	r3, r2
 800a768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a76c:	461a      	mov	r2, r3
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	3301      	adds	r3, #1
 800a778:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	3301      	adds	r3, #1
 800a77e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	3301      	adds	r3, #1
 800a784:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	3301      	adds	r3, #1
 800a78a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	3301      	adds	r3, #1
 800a790:	61bb      	str	r3, [r7, #24]
 800a792:	69ba      	ldr	r2, [r7, #24]
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	429a      	cmp	r2, r3
 800a798:	d3e2      	bcc.n	800a760 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3724      	adds	r7, #36	@ 0x24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b08b      	sub	sp, #44	@ 0x2c
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a7be:	88fb      	ldrh	r3, [r7, #6]
 800a7c0:	089b      	lsrs	r3, r3, #2
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a7c6:	88fb      	ldrh	r3, [r7, #6]
 800a7c8:	f003 0303 	and.w	r3, r3, #3
 800a7cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	623b      	str	r3, [r7, #32]
 800a7d2:	e014      	b.n	800a7fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7de:	601a      	str	r2, [r3, #0]
    pDest++;
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a7f8:	6a3b      	ldr	r3, [r7, #32]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	623b      	str	r3, [r7, #32]
 800a7fe:	6a3a      	ldr	r2, [r7, #32]
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	429a      	cmp	r2, r3
 800a804:	d3e6      	bcc.n	800a7d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a806:	8bfb      	ldrh	r3, [r7, #30]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d01e      	beq.n	800a84a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a80c:	2300      	movs	r3, #0
 800a80e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a816:	461a      	mov	r2, r3
 800a818:	f107 0310 	add.w	r3, r7, #16
 800a81c:	6812      	ldr	r2, [r2, #0]
 800a81e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	6a3b      	ldr	r3, [r7, #32]
 800a824:	b2db      	uxtb	r3, r3
 800a826:	00db      	lsls	r3, r3, #3
 800a828:	fa22 f303 	lsr.w	r3, r2, r3
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a830:	701a      	strb	r2, [r3, #0]
      i++;
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	3301      	adds	r3, #1
 800a836:	623b      	str	r3, [r7, #32]
      pDest++;
 800a838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83a:	3301      	adds	r3, #1
 800a83c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a83e:	8bfb      	ldrh	r3, [r7, #30]
 800a840:	3b01      	subs	r3, #1
 800a842:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a844:	8bfb      	ldrh	r3, [r7, #30]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1ea      	bne.n	800a820 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	372c      	adds	r7, #44	@ 0x2c
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	785b      	ldrb	r3, [r3, #1]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d12c      	bne.n	800a8ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	015a      	lsls	r2, r3, #5
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4413      	add	r3, r2
 800a87c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	db12      	blt.n	800a8ac <USB_EPSetStall+0x54>
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00f      	beq.n	800a8ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	4413      	add	r3, r2
 800a894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	0151      	lsls	r1, r2, #5
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	440a      	add	r2, r1
 800a8a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a8aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	015a      	lsls	r2, r3, #5
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	0151      	lsls	r1, r2, #5
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	440a      	add	r2, r1
 800a8c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a8ca:	6013      	str	r3, [r2, #0]
 800a8cc:	e02b      	b.n	800a926 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	015a      	lsls	r2, r3, #5
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	db12      	blt.n	800a906 <USB_EPSetStall+0xae>
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d00f      	beq.n	800a906 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	015a      	lsls	r2, r3, #5
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	0151      	lsls	r1, r2, #5
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	440a      	add	r2, r1
 800a8fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a900:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a904:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	015a      	lsls	r2, r3, #5
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	4413      	add	r3, r2
 800a90e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	0151      	lsls	r1, r2, #5
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	440a      	add	r2, r1
 800a91c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a920:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a924:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3714      	adds	r7, #20
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	785b      	ldrb	r3, [r3, #1]
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d128      	bne.n	800a9a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	015a      	lsls	r2, r3, #5
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	4413      	add	r3, r2
 800a958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	0151      	lsls	r1, r2, #5
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	440a      	add	r2, r1
 800a966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a96a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a96e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	791b      	ldrb	r3, [r3, #4]
 800a974:	2b03      	cmp	r3, #3
 800a976:	d003      	beq.n	800a980 <USB_EPClearStall+0x4c>
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	791b      	ldrb	r3, [r3, #4]
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d138      	bne.n	800a9f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	015a      	lsls	r2, r3, #5
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4413      	add	r3, r2
 800a988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	0151      	lsls	r1, r2, #5
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	440a      	add	r2, r1
 800a996:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a99a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a99e:	6013      	str	r3, [r2, #0]
 800a9a0:	e027      	b.n	800a9f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	0151      	lsls	r1, r2, #5
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	440a      	add	r2, r1
 800a9b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a9c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	791b      	ldrb	r3, [r3, #4]
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	d003      	beq.n	800a9d2 <USB_EPClearStall+0x9e>
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	791b      	ldrb	r3, [r3, #4]
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d10f      	bne.n	800a9f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	015a      	lsls	r2, r3, #5
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	4413      	add	r3, r2
 800a9da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	0151      	lsls	r1, r2, #5
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	440a      	add	r2, r1
 800a9e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3714      	adds	r7, #20
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800aa22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	78fb      	ldrb	r3, [r7, #3]
 800aa2e:	011b      	lsls	r3, r3, #4
 800aa30:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800aa34:	68f9      	ldr	r1, [r7, #12]
 800aa36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3714      	adds	r7, #20
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aa66:	f023 0303 	bic.w	r3, r3, #3
 800aa6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa7a:	f023 0302 	bic.w	r3, r3, #2
 800aa7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3714      	adds	r7, #20
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b085      	sub	sp, #20
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aaa8:	f023 0303 	bic.w	r3, r3, #3
 800aaac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aabc:	f043 0302 	orr.w	r3, r3, #2
 800aac0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	4013      	ands	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aae8:	68fb      	ldr	r3, [r7, #12]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab12:	69db      	ldr	r3, [r3, #28]
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	4013      	ands	r3, r2
 800ab18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	0c1b      	lsrs	r3, r3, #16
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b085      	sub	sp, #20
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab46:	69db      	ldr	r3, [r3, #28]
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	4013      	ands	r3, r2
 800ab4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	b29b      	uxth	r3, r3
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3714      	adds	r7, #20
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b085      	sub	sp, #20
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	460b      	mov	r3, r1
 800ab68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ab6e:	78fb      	ldrb	r3, [r7, #3]
 800ab70:	015a      	lsls	r2, r3, #5
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	4413      	add	r3, r2
 800ab76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	68ba      	ldr	r2, [r7, #8]
 800ab88:	4013      	ands	r3, r2
 800ab8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab8c:	68bb      	ldr	r3, [r7, #8]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3714      	adds	r7, #20
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b087      	sub	sp, #28
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	460b      	mov	r3, r1
 800aba4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800abbe:	78fb      	ldrb	r3, [r7, #3]
 800abc0:	f003 030f 	and.w	r3, r3, #15
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	fa22 f303 	lsr.w	r3, r2, r3
 800abca:	01db      	lsls	r3, r3, #7
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800abd4:	78fb      	ldrb	r3, [r7, #3]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	693a      	ldr	r2, [r7, #16]
 800abe4:	4013      	ands	r3, r2
 800abe6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800abe8:	68bb      	ldr	r3, [r7, #8]
}
 800abea:	4618      	mov	r0, r3
 800abec:	371c      	adds	r7, #28
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b083      	sub	sp, #12
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	f003 0301 	and.w	r3, r3, #1
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ac12:	b480      	push	{r7}
 800ac14:	b085      	sub	sp, #20
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ac30:	f023 0307 	bic.w	r3, r3, #7
 800ac34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	333c      	adds	r3, #60	@ 0x3c
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	4a1c      	ldr	r2, [pc, #112]	@ (800ace4 <USB_EP0_OutStart+0x8c>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d90a      	bls.n	800ac8e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac88:	d101      	bne.n	800ac8e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	e024      	b.n	800acd8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac94:	461a      	mov	r2, r3
 800ac96:	2300      	movs	r3, #0
 800ac98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aca8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800acac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acbc:	f043 0318 	orr.w	r3, r3, #24
 800acc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acd0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800acd4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3714      	adds	r7, #20
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr
 800ace4:	4f54300a 	.word	0x4f54300a

0800ace8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acf0:	2300      	movs	r3, #0
 800acf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	3301      	adds	r3, #1
 800acf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	4a13      	ldr	r2, [pc, #76]	@ (800ad4c <USB_CoreReset+0x64>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d901      	bls.n	800ad06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad02:	2303      	movs	r3, #3
 800ad04:	e01b      	b.n	800ad3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	daf2      	bge.n	800acf4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	f043 0201 	orr.w	r2, r3, #1
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	3301      	adds	r3, #1
 800ad22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4a09      	ldr	r2, [pc, #36]	@ (800ad4c <USB_CoreReset+0x64>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d901      	bls.n	800ad30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ad2c:	2303      	movs	r3, #3
 800ad2e:	e006      	b.n	800ad3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	f003 0301 	and.w	r3, r3, #1
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d0f0      	beq.n	800ad1e <USB_CoreReset+0x36>

  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	00030d40 	.word	0x00030d40

0800ad50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ad5c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ad60:	f002 fe2c 	bl	800d9bc <USBD_static_malloc>
 800ad64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d109      	bne.n	800ad80 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	32b0      	adds	r2, #176	@ 0xb0
 800ad76:	2100      	movs	r1, #0
 800ad78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	e0d4      	b.n	800af2a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ad80:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ad84:	2100      	movs	r1, #0
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f002 fe36 	bl	800d9f8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	32b0      	adds	r2, #176	@ 0xb0
 800ad96:	68f9      	ldr	r1, [r7, #12]
 800ad98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	32b0      	adds	r2, #176	@ 0xb0
 800ada6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	7c1b      	ldrb	r3, [r3, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d138      	bne.n	800ae2a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800adb8:	4b5e      	ldr	r3, [pc, #376]	@ (800af34 <USBD_CDC_Init+0x1e4>)
 800adba:	7819      	ldrb	r1, [r3, #0]
 800adbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800adc0:	2202      	movs	r2, #2
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f002 fbe6 	bl	800d594 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800adc8:	4b5a      	ldr	r3, [pc, #360]	@ (800af34 <USBD_CDC_Init+0x1e4>)
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	f003 020f 	and.w	r2, r3, #15
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	4613      	mov	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4413      	add	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	440b      	add	r3, r1
 800addc:	3324      	adds	r3, #36	@ 0x24
 800adde:	2201      	movs	r2, #1
 800ade0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ade2:	4b55      	ldr	r3, [pc, #340]	@ (800af38 <USBD_CDC_Init+0x1e8>)
 800ade4:	7819      	ldrb	r1, [r3, #0]
 800ade6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800adea:	2202      	movs	r2, #2
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f002 fbd1 	bl	800d594 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800adf2:	4b51      	ldr	r3, [pc, #324]	@ (800af38 <USBD_CDC_Init+0x1e8>)
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	f003 020f 	and.w	r2, r3, #15
 800adfa:	6879      	ldr	r1, [r7, #4]
 800adfc:	4613      	mov	r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	440b      	add	r3, r1
 800ae06:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ae0e:	4b4b      	ldr	r3, [pc, #300]	@ (800af3c <USBD_CDC_Init+0x1ec>)
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	f003 020f 	and.w	r2, r3, #15
 800ae16:	6879      	ldr	r1, [r7, #4]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	440b      	add	r3, r1
 800ae22:	3326      	adds	r3, #38	@ 0x26
 800ae24:	2210      	movs	r2, #16
 800ae26:	801a      	strh	r2, [r3, #0]
 800ae28:	e035      	b.n	800ae96 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ae2a:	4b42      	ldr	r3, [pc, #264]	@ (800af34 <USBD_CDC_Init+0x1e4>)
 800ae2c:	7819      	ldrb	r1, [r3, #0]
 800ae2e:	2340      	movs	r3, #64	@ 0x40
 800ae30:	2202      	movs	r2, #2
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f002 fbae 	bl	800d594 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ae38:	4b3e      	ldr	r3, [pc, #248]	@ (800af34 <USBD_CDC_Init+0x1e4>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	f003 020f 	and.w	r2, r3, #15
 800ae40:	6879      	ldr	r1, [r7, #4]
 800ae42:	4613      	mov	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4413      	add	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	440b      	add	r3, r1
 800ae4c:	3324      	adds	r3, #36	@ 0x24
 800ae4e:	2201      	movs	r2, #1
 800ae50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ae52:	4b39      	ldr	r3, [pc, #228]	@ (800af38 <USBD_CDC_Init+0x1e8>)
 800ae54:	7819      	ldrb	r1, [r3, #0]
 800ae56:	2340      	movs	r3, #64	@ 0x40
 800ae58:	2202      	movs	r2, #2
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f002 fb9a 	bl	800d594 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ae60:	4b35      	ldr	r3, [pc, #212]	@ (800af38 <USBD_CDC_Init+0x1e8>)
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	f003 020f 	and.w	r2, r3, #15
 800ae68:	6879      	ldr	r1, [r7, #4]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	440b      	add	r3, r1
 800ae74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae78:	2201      	movs	r2, #1
 800ae7a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ae7c:	4b2f      	ldr	r3, [pc, #188]	@ (800af3c <USBD_CDC_Init+0x1ec>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	f003 020f 	and.w	r2, r3, #15
 800ae84:	6879      	ldr	r1, [r7, #4]
 800ae86:	4613      	mov	r3, r2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	4413      	add	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	440b      	add	r3, r1
 800ae90:	3326      	adds	r3, #38	@ 0x26
 800ae92:	2210      	movs	r2, #16
 800ae94:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae96:	4b29      	ldr	r3, [pc, #164]	@ (800af3c <USBD_CDC_Init+0x1ec>)
 800ae98:	7819      	ldrb	r1, [r3, #0]
 800ae9a:	2308      	movs	r3, #8
 800ae9c:	2203      	movs	r2, #3
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f002 fb78 	bl	800d594 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800aea4:	4b25      	ldr	r3, [pc, #148]	@ (800af3c <USBD_CDC_Init+0x1ec>)
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	f003 020f 	and.w	r2, r3, #15
 800aeac:	6879      	ldr	r1, [r7, #4]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	440b      	add	r3, r1
 800aeb8:	3324      	adds	r3, #36	@ 0x24
 800aeba:	2201      	movs	r2, #1
 800aebc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	33b0      	adds	r3, #176	@ 0xb0
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4413      	add	r3, r2
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d101      	bne.n	800aef8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800aef4:	2302      	movs	r3, #2
 800aef6:	e018      	b.n	800af2a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	7c1b      	ldrb	r3, [r3, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10a      	bne.n	800af16 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af00:	4b0d      	ldr	r3, [pc, #52]	@ (800af38 <USBD_CDC_Init+0x1e8>)
 800af02:	7819      	ldrb	r1, [r3, #0]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f002 fcba 	bl	800d888 <USBD_LL_PrepareReceive>
 800af14:	e008      	b.n	800af28 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af16:	4b08      	ldr	r3, [pc, #32]	@ (800af38 <USBD_CDC_Init+0x1e8>)
 800af18:	7819      	ldrb	r1, [r3, #0]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af20:	2340      	movs	r3, #64	@ 0x40
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f002 fcb0 	bl	800d888 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	20000093 	.word	0x20000093
 800af38:	20000094 	.word	0x20000094
 800af3c:	20000095 	.word	0x20000095

0800af40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800af4c:	4b3a      	ldr	r3, [pc, #232]	@ (800b038 <USBD_CDC_DeInit+0xf8>)
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	4619      	mov	r1, r3
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f002 fb5c 	bl	800d610 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800af58:	4b37      	ldr	r3, [pc, #220]	@ (800b038 <USBD_CDC_DeInit+0xf8>)
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	f003 020f 	and.w	r2, r3, #15
 800af60:	6879      	ldr	r1, [r7, #4]
 800af62:	4613      	mov	r3, r2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	4413      	add	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	440b      	add	r3, r1
 800af6c:	3324      	adds	r3, #36	@ 0x24
 800af6e:	2200      	movs	r2, #0
 800af70:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800af72:	4b32      	ldr	r3, [pc, #200]	@ (800b03c <USBD_CDC_DeInit+0xfc>)
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f002 fb49 	bl	800d610 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800af7e:	4b2f      	ldr	r3, [pc, #188]	@ (800b03c <USBD_CDC_DeInit+0xfc>)
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	f003 020f 	and.w	r2, r3, #15
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	4613      	mov	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4413      	add	r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	440b      	add	r3, r1
 800af92:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800af96:	2200      	movs	r2, #0
 800af98:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800af9a:	4b29      	ldr	r3, [pc, #164]	@ (800b040 <USBD_CDC_DeInit+0x100>)
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	4619      	mov	r1, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f002 fb35 	bl	800d610 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800afa6:	4b26      	ldr	r3, [pc, #152]	@ (800b040 <USBD_CDC_DeInit+0x100>)
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	f003 020f 	and.w	r2, r3, #15
 800afae:	6879      	ldr	r1, [r7, #4]
 800afb0:	4613      	mov	r3, r2
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4413      	add	r3, r2
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	440b      	add	r3, r1
 800afba:	3324      	adds	r3, #36	@ 0x24
 800afbc:	2200      	movs	r2, #0
 800afbe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800afc0:	4b1f      	ldr	r3, [pc, #124]	@ (800b040 <USBD_CDC_DeInit+0x100>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	f003 020f 	and.w	r2, r3, #15
 800afc8:	6879      	ldr	r1, [r7, #4]
 800afca:	4613      	mov	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	440b      	add	r3, r1
 800afd4:	3326      	adds	r3, #38	@ 0x26
 800afd6:	2200      	movs	r2, #0
 800afd8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	32b0      	adds	r2, #176	@ 0xb0
 800afe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d01f      	beq.n	800b02c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	33b0      	adds	r3, #176	@ 0xb0
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	32b0      	adds	r2, #176	@ 0xb0
 800b00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b00e:	4618      	mov	r0, r3
 800b010:	f002 fce2 	bl	800d9d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	32b0      	adds	r2, #176	@ 0xb0
 800b01e:	2100      	movs	r1, #0
 800b020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	20000093 	.word	0x20000093
 800b03c:	20000094 	.word	0x20000094
 800b040:	20000095 	.word	0x20000095

0800b044 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	32b0      	adds	r2, #176	@ 0xb0
 800b058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b05e:	2300      	movs	r3, #0
 800b060:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b062:	2300      	movs	r3, #0
 800b064:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b070:	2303      	movs	r3, #3
 800b072:	e0bf      	b.n	800b1f4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d050      	beq.n	800b122 <USBD_CDC_Setup+0xde>
 800b080:	2b20      	cmp	r3, #32
 800b082:	f040 80af 	bne.w	800b1e4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	88db      	ldrh	r3, [r3, #6]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d03a      	beq.n	800b104 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	b25b      	sxtb	r3, r3
 800b094:	2b00      	cmp	r3, #0
 800b096:	da1b      	bge.n	800b0d0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	33b0      	adds	r3, #176	@ 0xb0
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4413      	add	r3, r2
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	683a      	ldr	r2, [r7, #0]
 800b0ac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b0ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b0b0:	683a      	ldr	r2, [r7, #0]
 800b0b2:	88d2      	ldrh	r2, [r2, #6]
 800b0b4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	88db      	ldrh	r3, [r3, #6]
 800b0ba:	2b07      	cmp	r3, #7
 800b0bc:	bf28      	it	cs
 800b0be:	2307      	movcs	r3, #7
 800b0c0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	89fa      	ldrh	r2, [r7, #14]
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f001 fdb1 	bl	800cc30 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b0ce:	e090      	b.n	800b1f2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	785a      	ldrb	r2, [r3, #1]
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	88db      	ldrh	r3, [r3, #6]
 800b0de:	2b3f      	cmp	r3, #63	@ 0x3f
 800b0e0:	d803      	bhi.n	800b0ea <USBD_CDC_Setup+0xa6>
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	88db      	ldrh	r3, [r3, #6]
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	e000      	b.n	800b0ec <USBD_CDC_Setup+0xa8>
 800b0ea:	2240      	movs	r2, #64	@ 0x40
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b0f2:	6939      	ldr	r1, [r7, #16]
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f001 fdc3 	bl	800cc88 <USBD_CtlPrepareRx>
      break;
 800b102:	e076      	b.n	800b1f2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	33b0      	adds	r3, #176	@ 0xb0
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4413      	add	r3, r2
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	683a      	ldr	r2, [r7, #0]
 800b118:	7850      	ldrb	r0, [r2, #1]
 800b11a:	2200      	movs	r2, #0
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	4798      	blx	r3
      break;
 800b120:	e067      	b.n	800b1f2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	785b      	ldrb	r3, [r3, #1]
 800b126:	2b0b      	cmp	r3, #11
 800b128:	d851      	bhi.n	800b1ce <USBD_CDC_Setup+0x18a>
 800b12a:	a201      	add	r2, pc, #4	@ (adr r2, 800b130 <USBD_CDC_Setup+0xec>)
 800b12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b130:	0800b161 	.word	0x0800b161
 800b134:	0800b1dd 	.word	0x0800b1dd
 800b138:	0800b1cf 	.word	0x0800b1cf
 800b13c:	0800b1cf 	.word	0x0800b1cf
 800b140:	0800b1cf 	.word	0x0800b1cf
 800b144:	0800b1cf 	.word	0x0800b1cf
 800b148:	0800b1cf 	.word	0x0800b1cf
 800b14c:	0800b1cf 	.word	0x0800b1cf
 800b150:	0800b1cf 	.word	0x0800b1cf
 800b154:	0800b1cf 	.word	0x0800b1cf
 800b158:	0800b18b 	.word	0x0800b18b
 800b15c:	0800b1b5 	.word	0x0800b1b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b03      	cmp	r3, #3
 800b16a:	d107      	bne.n	800b17c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b16c:	f107 030a 	add.w	r3, r7, #10
 800b170:	2202      	movs	r2, #2
 800b172:	4619      	mov	r1, r3
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f001 fd5b 	bl	800cc30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b17a:	e032      	b.n	800b1e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b17c:	6839      	ldr	r1, [r7, #0]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f001 fce5 	bl	800cb4e <USBD_CtlError>
            ret = USBD_FAIL;
 800b184:	2303      	movs	r3, #3
 800b186:	75fb      	strb	r3, [r7, #23]
          break;
 800b188:	e02b      	b.n	800b1e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b190:	b2db      	uxtb	r3, r3
 800b192:	2b03      	cmp	r3, #3
 800b194:	d107      	bne.n	800b1a6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b196:	f107 030d 	add.w	r3, r7, #13
 800b19a:	2201      	movs	r2, #1
 800b19c:	4619      	mov	r1, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f001 fd46 	bl	800cc30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b1a4:	e01d      	b.n	800b1e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b1a6:	6839      	ldr	r1, [r7, #0]
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f001 fcd0 	bl	800cb4e <USBD_CtlError>
            ret = USBD_FAIL;
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	75fb      	strb	r3, [r7, #23]
          break;
 800b1b2:	e016      	b.n	800b1e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	2b03      	cmp	r3, #3
 800b1be:	d00f      	beq.n	800b1e0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b1c0:	6839      	ldr	r1, [r7, #0]
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f001 fcc3 	bl	800cb4e <USBD_CtlError>
            ret = USBD_FAIL;
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b1cc:	e008      	b.n	800b1e0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f001 fcbc 	bl	800cb4e <USBD_CtlError>
          ret = USBD_FAIL;
 800b1d6:	2303      	movs	r3, #3
 800b1d8:	75fb      	strb	r3, [r7, #23]
          break;
 800b1da:	e002      	b.n	800b1e2 <USBD_CDC_Setup+0x19e>
          break;
 800b1dc:	bf00      	nop
 800b1de:	e008      	b.n	800b1f2 <USBD_CDC_Setup+0x1ae>
          break;
 800b1e0:	bf00      	nop
      }
      break;
 800b1e2:	e006      	b.n	800b1f2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f001 fcb1 	bl	800cb4e <USBD_CtlError>
      ret = USBD_FAIL;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	75fb      	strb	r3, [r7, #23]
      break;
 800b1f0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b1f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3718      	adds	r7, #24
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b20e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	32b0      	adds	r2, #176	@ 0xb0
 800b21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d101      	bne.n	800b226 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b222:	2303      	movs	r3, #3
 800b224:	e065      	b.n	800b2f2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	32b0      	adds	r2, #176	@ 0xb0
 800b230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b234:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b236:	78fb      	ldrb	r3, [r7, #3]
 800b238:	f003 020f 	and.w	r2, r3, #15
 800b23c:	6879      	ldr	r1, [r7, #4]
 800b23e:	4613      	mov	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4413      	add	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	440b      	add	r3, r1
 800b248:	3318      	adds	r3, #24
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d02f      	beq.n	800b2b0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b250:	78fb      	ldrb	r3, [r7, #3]
 800b252:	f003 020f 	and.w	r2, r3, #15
 800b256:	6879      	ldr	r1, [r7, #4]
 800b258:	4613      	mov	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4413      	add	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	440b      	add	r3, r1
 800b262:	3318      	adds	r3, #24
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	78fb      	ldrb	r3, [r7, #3]
 800b268:	f003 010f 	and.w	r1, r3, #15
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	460b      	mov	r3, r1
 800b270:	00db      	lsls	r3, r3, #3
 800b272:	440b      	add	r3, r1
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4403      	add	r3, r0
 800b278:	3344      	adds	r3, #68	@ 0x44
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b280:	fb01 f303 	mul.w	r3, r1, r3
 800b284:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b286:	2b00      	cmp	r3, #0
 800b288:	d112      	bne.n	800b2b0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b28a:	78fb      	ldrb	r3, [r7, #3]
 800b28c:	f003 020f 	and.w	r2, r3, #15
 800b290:	6879      	ldr	r1, [r7, #4]
 800b292:	4613      	mov	r3, r2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	4413      	add	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	440b      	add	r3, r1
 800b29c:	3318      	adds	r3, #24
 800b29e:	2200      	movs	r2, #0
 800b2a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b2a2:	78f9      	ldrb	r1, [r7, #3]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f002 fab5 	bl	800d818 <USBD_LL_Transmit>
 800b2ae:	e01f      	b.n	800b2f0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	33b0      	adds	r3, #176	@ 0xb0
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	4413      	add	r3, r2
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d010      	beq.n	800b2f0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	33b0      	adds	r3, #176	@ 0xb0
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	691b      	ldr	r3, [r3, #16]
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b2ec:	78fa      	ldrb	r2, [r7, #3]
 800b2ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b084      	sub	sp, #16
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	460b      	mov	r3, r1
 800b304:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	32b0      	adds	r2, #176	@ 0xb0
 800b310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b314:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	32b0      	adds	r2, #176	@ 0xb0
 800b320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d101      	bne.n	800b32c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b328:	2303      	movs	r3, #3
 800b32a:	e01a      	b.n	800b362 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b32c:	78fb      	ldrb	r3, [r7, #3]
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f002 fae1 	bl	800d8f8 <USBD_LL_GetRxDataSize>
 800b336:	4602      	mov	r2, r0
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	33b0      	adds	r3, #176	@ 0xb0
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	4413      	add	r3, r2
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b35c:	4611      	mov	r1, r2
 800b35e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b084      	sub	sp, #16
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	32b0      	adds	r2, #176	@ 0xb0
 800b37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b380:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d101      	bne.n	800b38c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b388:	2303      	movs	r3, #3
 800b38a:	e024      	b.n	800b3d6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	33b0      	adds	r3, #176	@ 0xb0
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	4413      	add	r3, r2
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d019      	beq.n	800b3d4 <USBD_CDC_EP0_RxReady+0x6a>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b3a6:	2bff      	cmp	r3, #255	@ 0xff
 800b3a8:	d014      	beq.n	800b3d4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	33b0      	adds	r3, #176	@ 0xb0
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b3c2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b3ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	22ff      	movs	r2, #255	@ 0xff
 800b3d0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
	...

0800b3e0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3e8:	2182      	movs	r1, #130	@ 0x82
 800b3ea:	4818      	ldr	r0, [pc, #96]	@ (800b44c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b3ec:	f000 fd4f 	bl	800be8e <USBD_GetEpDesc>
 800b3f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3f2:	2101      	movs	r1, #1
 800b3f4:	4815      	ldr	r0, [pc, #84]	@ (800b44c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b3f6:	f000 fd4a 	bl	800be8e <USBD_GetEpDesc>
 800b3fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b3fc:	2181      	movs	r1, #129	@ 0x81
 800b3fe:	4813      	ldr	r0, [pc, #76]	@ (800b44c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b400:	f000 fd45 	bl	800be8e <USBD_GetEpDesc>
 800b404:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	2210      	movs	r2, #16
 800b410:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d006      	beq.n	800b426 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b420:	711a      	strb	r2, [r3, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d006      	beq.n	800b43a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2200      	movs	r2, #0
 800b430:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b434:	711a      	strb	r2, [r3, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2243      	movs	r2, #67	@ 0x43
 800b43e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b440:	4b02      	ldr	r3, [pc, #8]	@ (800b44c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b442:	4618      	mov	r0, r3
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	20000050 	.word	0x20000050

0800b450 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b458:	2182      	movs	r1, #130	@ 0x82
 800b45a:	4818      	ldr	r0, [pc, #96]	@ (800b4bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b45c:	f000 fd17 	bl	800be8e <USBD_GetEpDesc>
 800b460:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b462:	2101      	movs	r1, #1
 800b464:	4815      	ldr	r0, [pc, #84]	@ (800b4bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b466:	f000 fd12 	bl	800be8e <USBD_GetEpDesc>
 800b46a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b46c:	2181      	movs	r1, #129	@ 0x81
 800b46e:	4813      	ldr	r0, [pc, #76]	@ (800b4bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b470:	f000 fd0d 	bl	800be8e <USBD_GetEpDesc>
 800b474:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	2210      	movs	r2, #16
 800b480:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d006      	beq.n	800b496 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	2200      	movs	r2, #0
 800b48c:	711a      	strb	r2, [r3, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	f042 0202 	orr.w	r2, r2, #2
 800b494:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d006      	beq.n	800b4aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	711a      	strb	r2, [r3, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f042 0202 	orr.w	r2, r2, #2
 800b4a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2243      	movs	r2, #67	@ 0x43
 800b4ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b4b0:	4b02      	ldr	r3, [pc, #8]	@ (800b4bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3718      	adds	r7, #24
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000050 	.word	0x20000050

0800b4c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b4c8:	2182      	movs	r1, #130	@ 0x82
 800b4ca:	4818      	ldr	r0, [pc, #96]	@ (800b52c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b4cc:	f000 fcdf 	bl	800be8e <USBD_GetEpDesc>
 800b4d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b4d2:	2101      	movs	r1, #1
 800b4d4:	4815      	ldr	r0, [pc, #84]	@ (800b52c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b4d6:	f000 fcda 	bl	800be8e <USBD_GetEpDesc>
 800b4da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b4dc:	2181      	movs	r1, #129	@ 0x81
 800b4de:	4813      	ldr	r0, [pc, #76]	@ (800b52c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b4e0:	f000 fcd5 	bl	800be8e <USBD_GetEpDesc>
 800b4e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	2210      	movs	r2, #16
 800b4f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d006      	beq.n	800b506 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b500:	711a      	strb	r2, [r3, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d006      	beq.n	800b51a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2200      	movs	r2, #0
 800b510:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b514:	711a      	strb	r2, [r3, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2243      	movs	r2, #67	@ 0x43
 800b51e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b520:	4b02      	ldr	r3, [pc, #8]	@ (800b52c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b522:	4618      	mov	r0, r3
 800b524:	3718      	adds	r7, #24
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20000050 	.word	0x20000050

0800b530 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	220a      	movs	r2, #10
 800b53c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b53e:	4b03      	ldr	r3, [pc, #12]	@ (800b54c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b540:	4618      	mov	r0, r3
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	2000000c 	.word	0x2000000c

0800b550 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d101      	bne.n	800b564 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b560:	2303      	movs	r3, #3
 800b562:	e009      	b.n	800b578 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	33b0      	adds	r3, #176	@ 0xb0
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b584:	b480      	push	{r7}
 800b586:	b087      	sub	sp, #28
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	32b0      	adds	r2, #176	@ 0xb0
 800b59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b59e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	e008      	b.n	800b5bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	68ba      	ldr	r2, [r7, #8]
 800b5ae:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	371c      	adds	r7, #28
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	32b0      	adds	r2, #176	@ 0xb0
 800b5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d101      	bne.n	800b5ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	e004      	b.n	800b5f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
	...

0800b604 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	32b0      	adds	r2, #176	@ 0xb0
 800b616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b61a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b61c:	2301      	movs	r3, #1
 800b61e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d101      	bne.n	800b62a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b626:	2303      	movs	r3, #3
 800b628:	e025      	b.n	800b676 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b630:	2b00      	cmp	r3, #0
 800b632:	d11f      	bne.n	800b674 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2201      	movs	r2, #1
 800b638:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b63c:	4b10      	ldr	r3, [pc, #64]	@ (800b680 <USBD_CDC_TransmitPacket+0x7c>)
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	f003 020f 	and.w	r2, r3, #15
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	4613      	mov	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4403      	add	r3, r0
 800b656:	3318      	adds	r3, #24
 800b658:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b65a:	4b09      	ldr	r3, [pc, #36]	@ (800b680 <USBD_CDC_TransmitPacket+0x7c>)
 800b65c:	7819      	ldrb	r1, [r3, #0]
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f002 f8d4 	bl	800d818 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b670:	2300      	movs	r3, #0
 800b672:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b674:	7bfb      	ldrb	r3, [r7, #15]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	20000093 	.word	0x20000093

0800b684 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	32b0      	adds	r2, #176	@ 0xb0
 800b696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b69a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	32b0      	adds	r2, #176	@ 0xb0
 800b6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d101      	bne.n	800b6b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	e018      	b.n	800b6e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	7c1b      	ldrb	r3, [r3, #16]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10a      	bne.n	800b6d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b6ba:	4b0c      	ldr	r3, [pc, #48]	@ (800b6ec <USBD_CDC_ReceivePacket+0x68>)
 800b6bc:	7819      	ldrb	r1, [r3, #0]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b6c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f002 f8dd 	bl	800d888 <USBD_LL_PrepareReceive>
 800b6ce:	e008      	b.n	800b6e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b6d0:	4b06      	ldr	r3, [pc, #24]	@ (800b6ec <USBD_CDC_ReceivePacket+0x68>)
 800b6d2:	7819      	ldrb	r1, [r3, #0]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b6da:	2340      	movs	r3, #64	@ 0x40
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f002 f8d3 	bl	800d888 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	20000094 	.word	0x20000094

0800b6f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b704:	2303      	movs	r3, #3
 800b706:	e01f      	b.n	800b748 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2200      	movs	r2, #0
 800b714:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2200      	movs	r2, #0
 800b71c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d003      	beq.n	800b72e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	79fa      	ldrb	r2, [r7, #7]
 800b73a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f001 feab 	bl	800d498 <USBD_LL_Init>
 800b742:	4603      	mov	r3, r0
 800b744:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b746:	7dfb      	ldrb	r3, [r7, #23]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3718      	adds	r7, #24
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b75a:	2300      	movs	r3, #0
 800b75c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d101      	bne.n	800b768 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b764:	2303      	movs	r3, #3
 800b766:	e025      	b.n	800b7b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	32ae      	adds	r2, #174	@ 0xae
 800b77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b77e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00f      	beq.n	800b7a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	32ae      	adds	r2, #174	@ 0xae
 800b78e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b794:	f107 020e 	add.w	r2, r7, #14
 800b798:	4610      	mov	r0, r2
 800b79a:	4798      	blx	r3
 800b79c:	4602      	mov	r2, r0
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b7aa:	1c5a      	adds	r2, r3, #1
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f001 feb3 	bl	800d530 <USBD_LL_Start>
 800b7ca:	4603      	mov	r3, r0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b7dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	370c      	adds	r7, #12
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr

0800b7ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b800:	2b00      	cmp	r3, #0
 800b802:	d009      	beq.n	800b818 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	78fa      	ldrb	r2, [r7, #3]
 800b80e:	4611      	mov	r1, r2
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	4798      	blx	r3
 800b814:	4603      	mov	r3, r0
 800b816:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b818:	7bfb      	ldrb	r3, [r7, #15]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	460b      	mov	r3, r1
 800b82c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	78fa      	ldrb	r2, [r7, #3]
 800b83c:	4611      	mov	r1, r2
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	4798      	blx	r3
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d001      	beq.n	800b84c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b848:	2303      	movs	r3, #3
 800b84a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b084      	sub	sp, #16
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b866:	6839      	ldr	r1, [r7, #0]
 800b868:	4618      	mov	r0, r3
 800b86a:	f001 f936 	bl	800cada <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2201      	movs	r2, #1
 800b872:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b87c:	461a      	mov	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b88a:	f003 031f 	and.w	r3, r3, #31
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d01a      	beq.n	800b8c8 <USBD_LL_SetupStage+0x72>
 800b892:	2b02      	cmp	r3, #2
 800b894:	d822      	bhi.n	800b8dc <USBD_LL_SetupStage+0x86>
 800b896:	2b00      	cmp	r3, #0
 800b898:	d002      	beq.n	800b8a0 <USBD_LL_SetupStage+0x4a>
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d00a      	beq.n	800b8b4 <USBD_LL_SetupStage+0x5e>
 800b89e:	e01d      	b.n	800b8dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fb63 	bl	800bf74 <USBD_StdDevReq>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b8b2:	e020      	b.n	800b8f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 fbcb 	bl	800c058 <USBD_StdItfReq>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8c6:	e016      	b.n	800b8f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 fc2d 	bl	800c130 <USBD_StdEPReq>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b8da:	e00c      	b.n	800b8f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b8e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f001 fec6 	bl	800d67c <USBD_LL_StallEP>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b8f4:	bf00      	nop
  }

  return ret;
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	460b      	mov	r3, r1
 800b90a:	607a      	str	r2, [r7, #4]
 800b90c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b90e:	2300      	movs	r3, #0
 800b910:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b912:	7afb      	ldrb	r3, [r7, #11]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d16e      	bne.n	800b9f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b91e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b926:	2b03      	cmp	r3, #3
 800b928:	f040 8098 	bne.w	800ba5c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	689a      	ldr	r2, [r3, #8]
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	429a      	cmp	r2, r3
 800b936:	d913      	bls.n	800b960 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	689a      	ldr	r2, [r3, #8]
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	1ad2      	subs	r2, r2, r3
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	68da      	ldr	r2, [r3, #12]
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	4293      	cmp	r3, r2
 800b950:	bf28      	it	cs
 800b952:	4613      	movcs	r3, r2
 800b954:	461a      	mov	r2, r3
 800b956:	6879      	ldr	r1, [r7, #4]
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f001 f9b2 	bl	800ccc2 <USBD_CtlContinueRx>
 800b95e:	e07d      	b.n	800ba5c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b966:	f003 031f 	and.w	r3, r3, #31
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d014      	beq.n	800b998 <USBD_LL_DataOutStage+0x98>
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d81d      	bhi.n	800b9ae <USBD_LL_DataOutStage+0xae>
 800b972:	2b00      	cmp	r3, #0
 800b974:	d002      	beq.n	800b97c <USBD_LL_DataOutStage+0x7c>
 800b976:	2b01      	cmp	r3, #1
 800b978:	d003      	beq.n	800b982 <USBD_LL_DataOutStage+0x82>
 800b97a:	e018      	b.n	800b9ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b97c:	2300      	movs	r3, #0
 800b97e:	75bb      	strb	r3, [r7, #22]
            break;
 800b980:	e018      	b.n	800b9b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	4619      	mov	r1, r3
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f000 fa64 	bl	800be5a <USBD_CoreFindIF>
 800b992:	4603      	mov	r3, r0
 800b994:	75bb      	strb	r3, [r7, #22]
            break;
 800b996:	e00d      	b.n	800b9b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f000 fa66 	bl	800be74 <USBD_CoreFindEP>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	75bb      	strb	r3, [r7, #22]
            break;
 800b9ac:	e002      	b.n	800b9b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	75bb      	strb	r3, [r7, #22]
            break;
 800b9b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b9b4:	7dbb      	ldrb	r3, [r7, #22]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d119      	bne.n	800b9ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b03      	cmp	r3, #3
 800b9c4:	d113      	bne.n	800b9ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b9c6:	7dba      	ldrb	r2, [r7, #22]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	32ae      	adds	r2, #174	@ 0xae
 800b9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00b      	beq.n	800b9ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b9d6:	7dba      	ldrb	r2, [r7, #22]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b9de:	7dba      	ldrb	r2, [r7, #22]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	32ae      	adds	r2, #174	@ 0xae
 800b9e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e8:	691b      	ldr	r3, [r3, #16]
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f001 f978 	bl	800cce4 <USBD_CtlSendStatus>
 800b9f4:	e032      	b.n	800ba5c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b9f6:	7afb      	ldrb	r3, [r7, #11]
 800b9f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	4619      	mov	r1, r3
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f000 fa37 	bl	800be74 <USBD_CoreFindEP>
 800ba06:	4603      	mov	r3, r0
 800ba08:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba0a:	7dbb      	ldrb	r3, [r7, #22]
 800ba0c:	2bff      	cmp	r3, #255	@ 0xff
 800ba0e:	d025      	beq.n	800ba5c <USBD_LL_DataOutStage+0x15c>
 800ba10:	7dbb      	ldrb	r3, [r7, #22]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d122      	bne.n	800ba5c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	d117      	bne.n	800ba52 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ba22:	7dba      	ldrb	r2, [r7, #22]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	32ae      	adds	r2, #174	@ 0xae
 800ba28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2c:	699b      	ldr	r3, [r3, #24]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00f      	beq.n	800ba52 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ba32:	7dba      	ldrb	r2, [r7, #22]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ba3a:	7dba      	ldrb	r2, [r7, #22]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	32ae      	adds	r2, #174	@ 0xae
 800ba40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba44:	699b      	ldr	r3, [r3, #24]
 800ba46:	7afa      	ldrb	r2, [r7, #11]
 800ba48:	4611      	mov	r1, r2
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	4798      	blx	r3
 800ba4e:	4603      	mov	r3, r0
 800ba50:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ba52:	7dfb      	ldrb	r3, [r7, #23]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d001      	beq.n	800ba5c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ba58:	7dfb      	ldrb	r3, [r7, #23]
 800ba5a:	e000      	b.n	800ba5e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3718      	adds	r7, #24
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b086      	sub	sp, #24
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	60f8      	str	r0, [r7, #12]
 800ba6e:	460b      	mov	r3, r1
 800ba70:	607a      	str	r2, [r7, #4]
 800ba72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ba74:	7afb      	ldrb	r3, [r7, #11]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d16f      	bne.n	800bb5a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	3314      	adds	r3, #20
 800ba7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	d15a      	bne.n	800bb40 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	689a      	ldr	r2, [r3, #8]
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d914      	bls.n	800bac0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	689a      	ldr	r2, [r3, #8]
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	1ad2      	subs	r2, r2, r3
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	461a      	mov	r2, r3
 800baaa:	6879      	ldr	r1, [r7, #4]
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f001 f8da 	bl	800cc66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bab2:	2300      	movs	r3, #0
 800bab4:	2200      	movs	r2, #0
 800bab6:	2100      	movs	r1, #0
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f001 fee5 	bl	800d888 <USBD_LL_PrepareReceive>
 800babe:	e03f      	b.n	800bb40 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	68da      	ldr	r2, [r3, #12]
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d11c      	bne.n	800bb06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	685a      	ldr	r2, [r3, #4]
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d316      	bcc.n	800bb06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	685a      	ldr	r2, [r3, #4]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d20f      	bcs.n	800bb06 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bae6:	2200      	movs	r2, #0
 800bae8:	2100      	movs	r1, #0
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f001 f8bb 	bl	800cc66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800baf8:	2300      	movs	r3, #0
 800bafa:	2200      	movs	r2, #0
 800bafc:	2100      	movs	r1, #0
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f001 fec2 	bl	800d888 <USBD_LL_PrepareReceive>
 800bb04:	e01c      	b.n	800bb40 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	2b03      	cmp	r3, #3
 800bb10:	d10f      	bne.n	800bb32 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d009      	beq.n	800bb32 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb32:	2180      	movs	r1, #128	@ 0x80
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f001 fda1 	bl	800d67c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f001 f8e5 	bl	800cd0a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d03a      	beq.n	800bbc0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f7ff fe42 	bl	800b7d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bb58:	e032      	b.n	800bbc0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bb5a:	7afb      	ldrb	r3, [r7, #11]
 800bb5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	4619      	mov	r1, r3
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f000 f985 	bl	800be74 <USBD_CoreFindEP>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb6e:	7dfb      	ldrb	r3, [r7, #23]
 800bb70:	2bff      	cmp	r3, #255	@ 0xff
 800bb72:	d025      	beq.n	800bbc0 <USBD_LL_DataInStage+0x15a>
 800bb74:	7dfb      	ldrb	r3, [r7, #23]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d122      	bne.n	800bbc0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	2b03      	cmp	r3, #3
 800bb84:	d11c      	bne.n	800bbc0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bb86:	7dfa      	ldrb	r2, [r7, #23]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	32ae      	adds	r2, #174	@ 0xae
 800bb8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d014      	beq.n	800bbc0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bb96:	7dfa      	ldrb	r2, [r7, #23]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bb9e:	7dfa      	ldrb	r2, [r7, #23]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	32ae      	adds	r2, #174	@ 0xae
 800bba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	7afa      	ldrb	r2, [r7, #11]
 800bbac:	4611      	mov	r1, r2
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	4798      	blx	r3
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bbb6:	7dbb      	ldrb	r3, [r7, #22]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d001      	beq.n	800bbc0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bbbc:	7dbb      	ldrb	r3, [r7, #22]
 800bbbe:	e000      	b.n	800bbc2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3718      	adds	r7, #24
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b084      	sub	sp, #16
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d014      	beq.n	800bc30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00e      	beq.n	800bc30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	6852      	ldr	r2, [r2, #4]
 800bc1e:	b2d2      	uxtb	r2, r2
 800bc20:	4611      	mov	r1, r2
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	4798      	blx	r3
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d001      	beq.n	800bc30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc30:	2340      	movs	r3, #64	@ 0x40
 800bc32:	2200      	movs	r2, #0
 800bc34:	2100      	movs	r1, #0
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f001 fcac 	bl	800d594 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2240      	movs	r2, #64	@ 0x40
 800bc48:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc4c:	2340      	movs	r3, #64	@ 0x40
 800bc4e:	2200      	movs	r2, #0
 800bc50:	2180      	movs	r1, #128	@ 0x80
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f001 fc9e 	bl	800d594 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2240      	movs	r2, #64	@ 0x40
 800bc62:	621a      	str	r2, [r3, #32]

  return ret;
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc6e:	b480      	push	{r7}
 800bc70:	b083      	sub	sp, #12
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	460b      	mov	r3, r1
 800bc78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	78fa      	ldrb	r2, [r7, #3]
 800bc7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	370c      	adds	r7, #12
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b083      	sub	sp, #12
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	2b04      	cmp	r3, #4
 800bca0:	d006      	beq.n	800bcb0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2204      	movs	r2, #4
 800bcb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	370c      	adds	r7, #12
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	b083      	sub	sp, #12
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	2b04      	cmp	r3, #4
 800bcd8:	d106      	bne.n	800bce8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bce8:	2300      	movs	r3, #0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	370c      	adds	r7, #12
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr

0800bcf6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b082      	sub	sp, #8
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	2b03      	cmp	r3, #3
 800bd08:	d110      	bne.n	800bd2c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00b      	beq.n	800bd2c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd1a:	69db      	ldr	r3, [r3, #28]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d005      	beq.n	800bd2c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd26:	69db      	ldr	r3, [r3, #28]
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b082      	sub	sp, #8
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
 800bd3e:	460b      	mov	r3, r1
 800bd40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	32ae      	adds	r2, #174	@ 0xae
 800bd4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e01c      	b.n	800bd92 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b03      	cmp	r3, #3
 800bd62:	d115      	bne.n	800bd90 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	32ae      	adds	r2, #174	@ 0xae
 800bd6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd72:	6a1b      	ldr	r3, [r3, #32]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00b      	beq.n	800bd90 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	32ae      	adds	r2, #174	@ 0xae
 800bd82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd86:	6a1b      	ldr	r3, [r3, #32]
 800bd88:	78fa      	ldrb	r2, [r7, #3]
 800bd8a:	4611      	mov	r1, r2
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b082      	sub	sp, #8
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	460b      	mov	r3, r1
 800bda4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	32ae      	adds	r2, #174	@ 0xae
 800bdb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d101      	bne.n	800bdbc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bdb8:	2303      	movs	r3, #3
 800bdba:	e01c      	b.n	800bdf6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	2b03      	cmp	r3, #3
 800bdc6:	d115      	bne.n	800bdf4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	32ae      	adds	r2, #174	@ 0xae
 800bdd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00b      	beq.n	800bdf4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	32ae      	adds	r2, #174	@ 0xae
 800bde6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdec:	78fa      	ldrb	r2, [r7, #3]
 800bdee:	4611      	mov	r1, r2
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3708      	adds	r7, #8
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bdfe:	b480      	push	{r7}
 800be00:	b083      	sub	sp, #12
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00e      	beq.n	800be50 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	6852      	ldr	r2, [r2, #4]
 800be3e:	b2d2      	uxtb	r2, r2
 800be40:	4611      	mov	r1, r2
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	4798      	blx	r3
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d001      	beq.n	800be50 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800be4c:	2303      	movs	r3, #3
 800be4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800be50:	7bfb      	ldrb	r3, [r7, #15]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800be5a:	b480      	push	{r7}
 800be5c:	b083      	sub	sp, #12
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	460b      	mov	r3, r1
 800be64:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800be66:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800be68:	4618      	mov	r0, r3
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	460b      	mov	r3, r1
 800be7e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800be80:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800be82:	4618      	mov	r0, r3
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b086      	sub	sp, #24
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	460b      	mov	r3, r1
 800be98:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bea2:	2300      	movs	r3, #0
 800bea4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	885b      	ldrh	r3, [r3, #2]
 800beaa:	b29b      	uxth	r3, r3
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	7812      	ldrb	r2, [r2, #0]
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d91f      	bls.n	800bef4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800beba:	e013      	b.n	800bee4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bebc:	f107 030a 	add.w	r3, r7, #10
 800bec0:	4619      	mov	r1, r3
 800bec2:	6978      	ldr	r0, [r7, #20]
 800bec4:	f000 f81b 	bl	800befe <USBD_GetNextDesc>
 800bec8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	785b      	ldrb	r3, [r3, #1]
 800bece:	2b05      	cmp	r3, #5
 800bed0:	d108      	bne.n	800bee4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	789b      	ldrb	r3, [r3, #2]
 800beda:	78fa      	ldrb	r2, [r7, #3]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d008      	beq.n	800bef2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bee0:	2300      	movs	r3, #0
 800bee2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	885b      	ldrh	r3, [r3, #2]
 800bee8:	b29a      	uxth	r2, r3
 800beea:	897b      	ldrh	r3, [r7, #10]
 800beec:	429a      	cmp	r2, r3
 800beee:	d8e5      	bhi.n	800bebc <USBD_GetEpDesc+0x2e>
 800bef0:	e000      	b.n	800bef4 <USBD_GetEpDesc+0x66>
          break;
 800bef2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bef4:	693b      	ldr	r3, [r7, #16]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800befe:	b480      	push	{r7}
 800bf00:	b085      	sub	sp, #20
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
 800bf06:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	881b      	ldrh	r3, [r3, #0]
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	7812      	ldrb	r2, [r2, #0]
 800bf14:	4413      	add	r3, r2
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	461a      	mov	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4413      	add	r3, r2
 800bf26:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bf28:	68fb      	ldr	r3, [r7, #12]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr

0800bf36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bf36:	b480      	push	{r7}
 800bf38:	b087      	sub	sp, #28
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bf54:	8a3b      	ldrh	r3, [r7, #16]
 800bf56:	021b      	lsls	r3, r3, #8
 800bf58:	b21a      	sxth	r2, r3
 800bf5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	b21b      	sxth	r3, r3
 800bf62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bf64:	89fb      	ldrh	r3, [r7, #14]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	371c      	adds	r7, #28
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr
	...

0800bf74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf8a:	2b40      	cmp	r3, #64	@ 0x40
 800bf8c:	d005      	beq.n	800bf9a <USBD_StdDevReq+0x26>
 800bf8e:	2b40      	cmp	r3, #64	@ 0x40
 800bf90:	d857      	bhi.n	800c042 <USBD_StdDevReq+0xce>
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00f      	beq.n	800bfb6 <USBD_StdDevReq+0x42>
 800bf96:	2b20      	cmp	r3, #32
 800bf98:	d153      	bne.n	800c042 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	32ae      	adds	r2, #174	@ 0xae
 800bfa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	4798      	blx	r3
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	73fb      	strb	r3, [r7, #15]
      break;
 800bfb4:	e04a      	b.n	800c04c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	785b      	ldrb	r3, [r3, #1]
 800bfba:	2b09      	cmp	r3, #9
 800bfbc:	d83b      	bhi.n	800c036 <USBD_StdDevReq+0xc2>
 800bfbe:	a201      	add	r2, pc, #4	@ (adr r2, 800bfc4 <USBD_StdDevReq+0x50>)
 800bfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc4:	0800c019 	.word	0x0800c019
 800bfc8:	0800c02d 	.word	0x0800c02d
 800bfcc:	0800c037 	.word	0x0800c037
 800bfd0:	0800c023 	.word	0x0800c023
 800bfd4:	0800c037 	.word	0x0800c037
 800bfd8:	0800bff7 	.word	0x0800bff7
 800bfdc:	0800bfed 	.word	0x0800bfed
 800bfe0:	0800c037 	.word	0x0800c037
 800bfe4:	0800c00f 	.word	0x0800c00f
 800bfe8:	0800c001 	.word	0x0800c001
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 fa3c 	bl	800c46c <USBD_GetDescriptor>
          break;
 800bff4:	e024      	b.n	800c040 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bff6:	6839      	ldr	r1, [r7, #0]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 fbcb 	bl	800c794 <USBD_SetAddress>
          break;
 800bffe:	e01f      	b.n	800c040 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c000:	6839      	ldr	r1, [r7, #0]
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 fc0a 	bl	800c81c <USBD_SetConfig>
 800c008:	4603      	mov	r3, r0
 800c00a:	73fb      	strb	r3, [r7, #15]
          break;
 800c00c:	e018      	b.n	800c040 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fcad 	bl	800c970 <USBD_GetConfig>
          break;
 800c016:	e013      	b.n	800c040 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 fcde 	bl	800c9dc <USBD_GetStatus>
          break;
 800c020:	e00e      	b.n	800c040 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c022:	6839      	ldr	r1, [r7, #0]
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fd0d 	bl	800ca44 <USBD_SetFeature>
          break;
 800c02a:	e009      	b.n	800c040 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 fd31 	bl	800ca96 <USBD_ClrFeature>
          break;
 800c034:	e004      	b.n	800c040 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c036:	6839      	ldr	r1, [r7, #0]
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 fd88 	bl	800cb4e <USBD_CtlError>
          break;
 800c03e:	bf00      	nop
      }
      break;
 800c040:	e004      	b.n	800c04c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c042:	6839      	ldr	r1, [r7, #0]
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 fd82 	bl	800cb4e <USBD_CtlError>
      break;
 800c04a:	bf00      	nop
  }

  return ret;
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop

0800c058 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c062:	2300      	movs	r3, #0
 800c064:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c06e:	2b40      	cmp	r3, #64	@ 0x40
 800c070:	d005      	beq.n	800c07e <USBD_StdItfReq+0x26>
 800c072:	2b40      	cmp	r3, #64	@ 0x40
 800c074:	d852      	bhi.n	800c11c <USBD_StdItfReq+0xc4>
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <USBD_StdItfReq+0x26>
 800c07a:	2b20      	cmp	r3, #32
 800c07c:	d14e      	bne.n	800c11c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c084:	b2db      	uxtb	r3, r3
 800c086:	3b01      	subs	r3, #1
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d840      	bhi.n	800c10e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	889b      	ldrh	r3, [r3, #4]
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b01      	cmp	r3, #1
 800c094:	d836      	bhi.n	800c104 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	889b      	ldrh	r3, [r3, #4]
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	4619      	mov	r1, r3
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f7ff fedb 	bl	800be5a <USBD_CoreFindIF>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
 800c0aa:	2bff      	cmp	r3, #255	@ 0xff
 800c0ac:	d01d      	beq.n	800c0ea <USBD_StdItfReq+0x92>
 800c0ae:	7bbb      	ldrb	r3, [r7, #14]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d11a      	bne.n	800c0ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c0b4:	7bba      	ldrb	r2, [r7, #14]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	32ae      	adds	r2, #174	@ 0xae
 800c0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00f      	beq.n	800c0e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c0c4:	7bba      	ldrb	r2, [r7, #14]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c0cc:	7bba      	ldrb	r2, [r7, #14]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	32ae      	adds	r2, #174	@ 0xae
 800c0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	6839      	ldr	r1, [r7, #0]
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	4798      	blx	r3
 800c0de:	4603      	mov	r3, r0
 800c0e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c0e2:	e004      	b.n	800c0ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c0e8:	e001      	b.n	800c0ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	88db      	ldrh	r3, [r3, #6]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d110      	bne.n	800c118 <USBD_StdItfReq+0xc0>
 800c0f6:	7bfb      	ldrb	r3, [r7, #15]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d10d      	bne.n	800c118 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 fdf1 	bl	800cce4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c102:	e009      	b.n	800c118 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c104:	6839      	ldr	r1, [r7, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fd21 	bl	800cb4e <USBD_CtlError>
          break;
 800c10c:	e004      	b.n	800c118 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 fd1c 	bl	800cb4e <USBD_CtlError>
          break;
 800c116:	e000      	b.n	800c11a <USBD_StdItfReq+0xc2>
          break;
 800c118:	bf00      	nop
      }
      break;
 800c11a:	e004      	b.n	800c126 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c11c:	6839      	ldr	r1, [r7, #0]
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fd15 	bl	800cb4e <USBD_CtlError>
      break;
 800c124:	bf00      	nop
  }

  return ret;
 800c126:	7bfb      	ldrb	r3, [r7, #15]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	889b      	ldrh	r3, [r3, #4]
 800c142:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c14c:	2b40      	cmp	r3, #64	@ 0x40
 800c14e:	d007      	beq.n	800c160 <USBD_StdEPReq+0x30>
 800c150:	2b40      	cmp	r3, #64	@ 0x40
 800c152:	f200 817f 	bhi.w	800c454 <USBD_StdEPReq+0x324>
 800c156:	2b00      	cmp	r3, #0
 800c158:	d02a      	beq.n	800c1b0 <USBD_StdEPReq+0x80>
 800c15a:	2b20      	cmp	r3, #32
 800c15c:	f040 817a 	bne.w	800c454 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c160:	7bbb      	ldrb	r3, [r7, #14]
 800c162:	4619      	mov	r1, r3
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f7ff fe85 	bl	800be74 <USBD_CoreFindEP>
 800c16a:	4603      	mov	r3, r0
 800c16c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c16e:	7b7b      	ldrb	r3, [r7, #13]
 800c170:	2bff      	cmp	r3, #255	@ 0xff
 800c172:	f000 8174 	beq.w	800c45e <USBD_StdEPReq+0x32e>
 800c176:	7b7b      	ldrb	r3, [r7, #13]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f040 8170 	bne.w	800c45e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c17e:	7b7a      	ldrb	r2, [r7, #13]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c186:	7b7a      	ldrb	r2, [r7, #13]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	32ae      	adds	r2, #174	@ 0xae
 800c18c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	2b00      	cmp	r3, #0
 800c194:	f000 8163 	beq.w	800c45e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c198:	7b7a      	ldrb	r2, [r7, #13]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	32ae      	adds	r2, #174	@ 0xae
 800c19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	6839      	ldr	r1, [r7, #0]
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	4798      	blx	r3
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c1ae:	e156      	b.n	800c45e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	785b      	ldrb	r3, [r3, #1]
 800c1b4:	2b03      	cmp	r3, #3
 800c1b6:	d008      	beq.n	800c1ca <USBD_StdEPReq+0x9a>
 800c1b8:	2b03      	cmp	r3, #3
 800c1ba:	f300 8145 	bgt.w	800c448 <USBD_StdEPReq+0x318>
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f000 809b 	beq.w	800c2fa <USBD_StdEPReq+0x1ca>
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d03c      	beq.n	800c242 <USBD_StdEPReq+0x112>
 800c1c8:	e13e      	b.n	800c448 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d002      	beq.n	800c1dc <USBD_StdEPReq+0xac>
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d016      	beq.n	800c208 <USBD_StdEPReq+0xd8>
 800c1da:	e02c      	b.n	800c236 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1dc:	7bbb      	ldrb	r3, [r7, #14]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00d      	beq.n	800c1fe <USBD_StdEPReq+0xce>
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
 800c1e4:	2b80      	cmp	r3, #128	@ 0x80
 800c1e6:	d00a      	beq.n	800c1fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1e8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f001 fa45 	bl	800d67c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1f2:	2180      	movs	r1, #128	@ 0x80
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f001 fa41 	bl	800d67c <USBD_LL_StallEP>
 800c1fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1fc:	e020      	b.n	800c240 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 fca4 	bl	800cb4e <USBD_CtlError>
              break;
 800c206:	e01b      	b.n	800c240 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	885b      	ldrh	r3, [r3, #2]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d10e      	bne.n	800c22e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c210:	7bbb      	ldrb	r3, [r7, #14]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00b      	beq.n	800c22e <USBD_StdEPReq+0xfe>
 800c216:	7bbb      	ldrb	r3, [r7, #14]
 800c218:	2b80      	cmp	r3, #128	@ 0x80
 800c21a:	d008      	beq.n	800c22e <USBD_StdEPReq+0xfe>
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	88db      	ldrh	r3, [r3, #6]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d104      	bne.n	800c22e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c224:	7bbb      	ldrb	r3, [r7, #14]
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f001 fa27 	bl	800d67c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fd58 	bl	800cce4 <USBD_CtlSendStatus>

              break;
 800c234:	e004      	b.n	800c240 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c236:	6839      	ldr	r1, [r7, #0]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fc88 	bl	800cb4e <USBD_CtlError>
              break;
 800c23e:	bf00      	nop
          }
          break;
 800c240:	e107      	b.n	800c452 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d002      	beq.n	800c254 <USBD_StdEPReq+0x124>
 800c24e:	2b03      	cmp	r3, #3
 800c250:	d016      	beq.n	800c280 <USBD_StdEPReq+0x150>
 800c252:	e04b      	b.n	800c2ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c254:	7bbb      	ldrb	r3, [r7, #14]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00d      	beq.n	800c276 <USBD_StdEPReq+0x146>
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
 800c25c:	2b80      	cmp	r3, #128	@ 0x80
 800c25e:	d00a      	beq.n	800c276 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c260:	7bbb      	ldrb	r3, [r7, #14]
 800c262:	4619      	mov	r1, r3
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f001 fa09 	bl	800d67c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c26a:	2180      	movs	r1, #128	@ 0x80
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f001 fa05 	bl	800d67c <USBD_LL_StallEP>
 800c272:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c274:	e040      	b.n	800c2f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 fc68 	bl	800cb4e <USBD_CtlError>
              break;
 800c27e:	e03b      	b.n	800c2f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	885b      	ldrh	r3, [r3, #2]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d136      	bne.n	800c2f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c288:	7bbb      	ldrb	r3, [r7, #14]
 800c28a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d004      	beq.n	800c29c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c292:	7bbb      	ldrb	r3, [r7, #14]
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f001 fa26 	bl	800d6e8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 fd21 	bl	800cce4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c2a2:	7bbb      	ldrb	r3, [r7, #14]
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f7ff fde4 	bl	800be74 <USBD_CoreFindEP>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2b0:	7b7b      	ldrb	r3, [r7, #13]
 800c2b2:	2bff      	cmp	r3, #255	@ 0xff
 800c2b4:	d01f      	beq.n	800c2f6 <USBD_StdEPReq+0x1c6>
 800c2b6:	7b7b      	ldrb	r3, [r7, #13]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d11c      	bne.n	800c2f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c2bc:	7b7a      	ldrb	r2, [r7, #13]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c2c4:	7b7a      	ldrb	r2, [r7, #13]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	32ae      	adds	r2, #174	@ 0xae
 800c2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d010      	beq.n	800c2f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c2d4:	7b7a      	ldrb	r2, [r7, #13]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	32ae      	adds	r2, #174	@ 0xae
 800c2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	4798      	blx	r3
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c2ea:	e004      	b.n	800c2f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fc2d 	bl	800cb4e <USBD_CtlError>
              break;
 800c2f4:	e000      	b.n	800c2f8 <USBD_StdEPReq+0x1c8>
              break;
 800c2f6:	bf00      	nop
          }
          break;
 800c2f8:	e0ab      	b.n	800c452 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c300:	b2db      	uxtb	r3, r3
 800c302:	2b02      	cmp	r3, #2
 800c304:	d002      	beq.n	800c30c <USBD_StdEPReq+0x1dc>
 800c306:	2b03      	cmp	r3, #3
 800c308:	d032      	beq.n	800c370 <USBD_StdEPReq+0x240>
 800c30a:	e097      	b.n	800c43c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c30c:	7bbb      	ldrb	r3, [r7, #14]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d007      	beq.n	800c322 <USBD_StdEPReq+0x1f2>
 800c312:	7bbb      	ldrb	r3, [r7, #14]
 800c314:	2b80      	cmp	r3, #128	@ 0x80
 800c316:	d004      	beq.n	800c322 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c318:	6839      	ldr	r1, [r7, #0]
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 fc17 	bl	800cb4e <USBD_CtlError>
                break;
 800c320:	e091      	b.n	800c446 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c322:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c326:	2b00      	cmp	r3, #0
 800c328:	da0b      	bge.n	800c342 <USBD_StdEPReq+0x212>
 800c32a:	7bbb      	ldrb	r3, [r7, #14]
 800c32c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c330:	4613      	mov	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4413      	add	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	3310      	adds	r3, #16
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	4413      	add	r3, r2
 800c33e:	3304      	adds	r3, #4
 800c340:	e00b      	b.n	800c35a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c348:	4613      	mov	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4413      	add	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	4413      	add	r3, r2
 800c358:	3304      	adds	r3, #4
 800c35a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	2200      	movs	r2, #0
 800c360:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	2202      	movs	r2, #2
 800c366:	4619      	mov	r1, r3
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 fc61 	bl	800cc30 <USBD_CtlSendData>
              break;
 800c36e:	e06a      	b.n	800c446 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c374:	2b00      	cmp	r3, #0
 800c376:	da11      	bge.n	800c39c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c378:	7bbb      	ldrb	r3, [r7, #14]
 800c37a:	f003 020f 	and.w	r2, r3, #15
 800c37e:	6879      	ldr	r1, [r7, #4]
 800c380:	4613      	mov	r3, r2
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	4413      	add	r3, r2
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	440b      	add	r3, r1
 800c38a:	3324      	adds	r3, #36	@ 0x24
 800c38c:	881b      	ldrh	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d117      	bne.n	800c3c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 fbda 	bl	800cb4e <USBD_CtlError>
                  break;
 800c39a:	e054      	b.n	800c446 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c39c:	7bbb      	ldrb	r3, [r7, #14]
 800c39e:	f003 020f 	and.w	r2, r3, #15
 800c3a2:	6879      	ldr	r1, [r7, #4]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4413      	add	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	440b      	add	r3, r1
 800c3ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c3b2:	881b      	ldrh	r3, [r3, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d104      	bne.n	800c3c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c3b8:	6839      	ldr	r1, [r7, #0]
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 fbc7 	bl	800cb4e <USBD_CtlError>
                  break;
 800c3c0:	e041      	b.n	800c446 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	da0b      	bge.n	800c3e2 <USBD_StdEPReq+0x2b2>
 800c3ca:	7bbb      	ldrb	r3, [r7, #14]
 800c3cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	4413      	add	r3, r2
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	3310      	adds	r3, #16
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	4413      	add	r3, r2
 800c3de:	3304      	adds	r3, #4
 800c3e0:	e00b      	b.n	800c3fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c3e2:	7bbb      	ldrb	r3, [r7, #14]
 800c3e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	4413      	add	r3, r2
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c3fc:	7bbb      	ldrb	r3, [r7, #14]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d002      	beq.n	800c408 <USBD_StdEPReq+0x2d8>
 800c402:	7bbb      	ldrb	r3, [r7, #14]
 800c404:	2b80      	cmp	r3, #128	@ 0x80
 800c406:	d103      	bne.n	800c410 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	2200      	movs	r2, #0
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	e00e      	b.n	800c42e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c410:	7bbb      	ldrb	r3, [r7, #14]
 800c412:	4619      	mov	r1, r3
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f001 f99d 	bl	800d754 <USBD_LL_IsStallEP>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d003      	beq.n	800c428 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2201      	movs	r2, #1
 800c424:	601a      	str	r2, [r3, #0]
 800c426:	e002      	b.n	800c42e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	2200      	movs	r2, #0
 800c42c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	2202      	movs	r2, #2
 800c432:	4619      	mov	r1, r3
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 fbfb 	bl	800cc30 <USBD_CtlSendData>
              break;
 800c43a:	e004      	b.n	800c446 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c43c:	6839      	ldr	r1, [r7, #0]
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fb85 	bl	800cb4e <USBD_CtlError>
              break;
 800c444:	bf00      	nop
          }
          break;
 800c446:	e004      	b.n	800c452 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c448:	6839      	ldr	r1, [r7, #0]
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fb7f 	bl	800cb4e <USBD_CtlError>
          break;
 800c450:	bf00      	nop
      }
      break;
 800c452:	e005      	b.n	800c460 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fb79 	bl	800cb4e <USBD_CtlError>
      break;
 800c45c:	e000      	b.n	800c460 <USBD_StdEPReq+0x330>
      break;
 800c45e:	bf00      	nop
  }

  return ret;
 800c460:	7bfb      	ldrb	r3, [r7, #15]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
	...

0800c46c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c476:	2300      	movs	r3, #0
 800c478:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c47a:	2300      	movs	r3, #0
 800c47c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c47e:	2300      	movs	r3, #0
 800c480:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	885b      	ldrh	r3, [r3, #2]
 800c486:	0a1b      	lsrs	r3, r3, #8
 800c488:	b29b      	uxth	r3, r3
 800c48a:	3b01      	subs	r3, #1
 800c48c:	2b0e      	cmp	r3, #14
 800c48e:	f200 8152 	bhi.w	800c736 <USBD_GetDescriptor+0x2ca>
 800c492:	a201      	add	r2, pc, #4	@ (adr r2, 800c498 <USBD_GetDescriptor+0x2c>)
 800c494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c498:	0800c509 	.word	0x0800c509
 800c49c:	0800c521 	.word	0x0800c521
 800c4a0:	0800c561 	.word	0x0800c561
 800c4a4:	0800c737 	.word	0x0800c737
 800c4a8:	0800c737 	.word	0x0800c737
 800c4ac:	0800c6d7 	.word	0x0800c6d7
 800c4b0:	0800c703 	.word	0x0800c703
 800c4b4:	0800c737 	.word	0x0800c737
 800c4b8:	0800c737 	.word	0x0800c737
 800c4bc:	0800c737 	.word	0x0800c737
 800c4c0:	0800c737 	.word	0x0800c737
 800c4c4:	0800c737 	.word	0x0800c737
 800c4c8:	0800c737 	.word	0x0800c737
 800c4cc:	0800c737 	.word	0x0800c737
 800c4d0:	0800c4d5 	.word	0x0800c4d5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4da:	69db      	ldr	r3, [r3, #28]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00b      	beq.n	800c4f8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4e6:	69db      	ldr	r3, [r3, #28]
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	7c12      	ldrb	r2, [r2, #16]
 800c4ec:	f107 0108 	add.w	r1, r7, #8
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	4798      	blx	r3
 800c4f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4f6:	e126      	b.n	800c746 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fb27 	bl	800cb4e <USBD_CtlError>
        err++;
 800c500:	7afb      	ldrb	r3, [r7, #11]
 800c502:	3301      	adds	r3, #1
 800c504:	72fb      	strb	r3, [r7, #11]
      break;
 800c506:	e11e      	b.n	800c746 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	7c12      	ldrb	r2, [r2, #16]
 800c514:	f107 0108 	add.w	r1, r7, #8
 800c518:	4610      	mov	r0, r2
 800c51a:	4798      	blx	r3
 800c51c:	60f8      	str	r0, [r7, #12]
      break;
 800c51e:	e112      	b.n	800c746 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	7c1b      	ldrb	r3, [r3, #16]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d10d      	bne.n	800c544 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c530:	f107 0208 	add.w	r2, r7, #8
 800c534:	4610      	mov	r0, r2
 800c536:	4798      	blx	r3
 800c538:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3301      	adds	r3, #1
 800c53e:	2202      	movs	r2, #2
 800c540:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c542:	e100      	b.n	800c746 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c54c:	f107 0208 	add.w	r2, r7, #8
 800c550:	4610      	mov	r0, r2
 800c552:	4798      	blx	r3
 800c554:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	3301      	adds	r3, #1
 800c55a:	2202      	movs	r2, #2
 800c55c:	701a      	strb	r2, [r3, #0]
      break;
 800c55e:	e0f2      	b.n	800c746 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	885b      	ldrh	r3, [r3, #2]
 800c564:	b2db      	uxtb	r3, r3
 800c566:	2b05      	cmp	r3, #5
 800c568:	f200 80ac 	bhi.w	800c6c4 <USBD_GetDescriptor+0x258>
 800c56c:	a201      	add	r2, pc, #4	@ (adr r2, 800c574 <USBD_GetDescriptor+0x108>)
 800c56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c572:	bf00      	nop
 800c574:	0800c58d 	.word	0x0800c58d
 800c578:	0800c5c1 	.word	0x0800c5c1
 800c57c:	0800c5f5 	.word	0x0800c5f5
 800c580:	0800c629 	.word	0x0800c629
 800c584:	0800c65d 	.word	0x0800c65d
 800c588:	0800c691 	.word	0x0800c691
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00b      	beq.n	800c5b0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	7c12      	ldrb	r2, [r2, #16]
 800c5a4:	f107 0108 	add.w	r1, r7, #8
 800c5a8:	4610      	mov	r0, r2
 800c5aa:	4798      	blx	r3
 800c5ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5ae:	e091      	b.n	800c6d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5b0:	6839      	ldr	r1, [r7, #0]
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 facb 	bl	800cb4e <USBD_CtlError>
            err++;
 800c5b8:	7afb      	ldrb	r3, [r7, #11]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c5be:	e089      	b.n	800c6d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00b      	beq.n	800c5e4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	7c12      	ldrb	r2, [r2, #16]
 800c5d8:	f107 0108 	add.w	r1, r7, #8
 800c5dc:	4610      	mov	r0, r2
 800c5de:	4798      	blx	r3
 800c5e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5e2:	e077      	b.n	800c6d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5e4:	6839      	ldr	r1, [r7, #0]
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fab1 	bl	800cb4e <USBD_CtlError>
            err++;
 800c5ec:	7afb      	ldrb	r3, [r7, #11]
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c5f2:	e06f      	b.n	800c6d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00b      	beq.n	800c618 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	7c12      	ldrb	r2, [r2, #16]
 800c60c:	f107 0108 	add.w	r1, r7, #8
 800c610:	4610      	mov	r0, r2
 800c612:	4798      	blx	r3
 800c614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c616:	e05d      	b.n	800c6d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c618:	6839      	ldr	r1, [r7, #0]
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 fa97 	bl	800cb4e <USBD_CtlError>
            err++;
 800c620:	7afb      	ldrb	r3, [r7, #11]
 800c622:	3301      	adds	r3, #1
 800c624:	72fb      	strb	r3, [r7, #11]
          break;
 800c626:	e055      	b.n	800c6d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c62e:	691b      	ldr	r3, [r3, #16]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00b      	beq.n	800c64c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	7c12      	ldrb	r2, [r2, #16]
 800c640:	f107 0108 	add.w	r1, r7, #8
 800c644:	4610      	mov	r0, r2
 800c646:	4798      	blx	r3
 800c648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c64a:	e043      	b.n	800c6d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c64c:	6839      	ldr	r1, [r7, #0]
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 fa7d 	bl	800cb4e <USBD_CtlError>
            err++;
 800c654:	7afb      	ldrb	r3, [r7, #11]
 800c656:	3301      	adds	r3, #1
 800c658:	72fb      	strb	r3, [r7, #11]
          break;
 800c65a:	e03b      	b.n	800c6d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c662:	695b      	ldr	r3, [r3, #20]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00b      	beq.n	800c680 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c66e:	695b      	ldr	r3, [r3, #20]
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	7c12      	ldrb	r2, [r2, #16]
 800c674:	f107 0108 	add.w	r1, r7, #8
 800c678:	4610      	mov	r0, r2
 800c67a:	4798      	blx	r3
 800c67c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c67e:	e029      	b.n	800c6d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c680:	6839      	ldr	r1, [r7, #0]
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 fa63 	bl	800cb4e <USBD_CtlError>
            err++;
 800c688:	7afb      	ldrb	r3, [r7, #11]
 800c68a:	3301      	adds	r3, #1
 800c68c:	72fb      	strb	r3, [r7, #11]
          break;
 800c68e:	e021      	b.n	800c6d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c696:	699b      	ldr	r3, [r3, #24]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d00b      	beq.n	800c6b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6a2:	699b      	ldr	r3, [r3, #24]
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	7c12      	ldrb	r2, [r2, #16]
 800c6a8:	f107 0108 	add.w	r1, r7, #8
 800c6ac:	4610      	mov	r0, r2
 800c6ae:	4798      	blx	r3
 800c6b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6b2:	e00f      	b.n	800c6d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 fa49 	bl	800cb4e <USBD_CtlError>
            err++;
 800c6bc:	7afb      	ldrb	r3, [r7, #11]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c6c2:	e007      	b.n	800c6d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c6c4:	6839      	ldr	r1, [r7, #0]
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 fa41 	bl	800cb4e <USBD_CtlError>
          err++;
 800c6cc:	7afb      	ldrb	r3, [r7, #11]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c6d2:	bf00      	nop
      }
      break;
 800c6d4:	e037      	b.n	800c746 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	7c1b      	ldrb	r3, [r3, #16]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d109      	bne.n	800c6f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6e6:	f107 0208 	add.w	r2, r7, #8
 800c6ea:	4610      	mov	r0, r2
 800c6ec:	4798      	blx	r3
 800c6ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6f0:	e029      	b.n	800c746 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 fa2a 	bl	800cb4e <USBD_CtlError>
        err++;
 800c6fa:	7afb      	ldrb	r3, [r7, #11]
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	72fb      	strb	r3, [r7, #11]
      break;
 800c700:	e021      	b.n	800c746 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	7c1b      	ldrb	r3, [r3, #16]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10d      	bne.n	800c726 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c712:	f107 0208 	add.w	r2, r7, #8
 800c716:	4610      	mov	r0, r2
 800c718:	4798      	blx	r3
 800c71a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	3301      	adds	r3, #1
 800c720:	2207      	movs	r2, #7
 800c722:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c724:	e00f      	b.n	800c746 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c726:	6839      	ldr	r1, [r7, #0]
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 fa10 	bl	800cb4e <USBD_CtlError>
        err++;
 800c72e:	7afb      	ldrb	r3, [r7, #11]
 800c730:	3301      	adds	r3, #1
 800c732:	72fb      	strb	r3, [r7, #11]
      break;
 800c734:	e007      	b.n	800c746 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c736:	6839      	ldr	r1, [r7, #0]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 fa08 	bl	800cb4e <USBD_CtlError>
      err++;
 800c73e:	7afb      	ldrb	r3, [r7, #11]
 800c740:	3301      	adds	r3, #1
 800c742:	72fb      	strb	r3, [r7, #11]
      break;
 800c744:	bf00      	nop
  }

  if (err != 0U)
 800c746:	7afb      	ldrb	r3, [r7, #11]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d11e      	bne.n	800c78a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	88db      	ldrh	r3, [r3, #6]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d016      	beq.n	800c782 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c754:	893b      	ldrh	r3, [r7, #8]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00e      	beq.n	800c778 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	88da      	ldrh	r2, [r3, #6]
 800c75e:	893b      	ldrh	r3, [r7, #8]
 800c760:	4293      	cmp	r3, r2
 800c762:	bf28      	it	cs
 800c764:	4613      	movcs	r3, r2
 800c766:	b29b      	uxth	r3, r3
 800c768:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c76a:	893b      	ldrh	r3, [r7, #8]
 800c76c:	461a      	mov	r2, r3
 800c76e:	68f9      	ldr	r1, [r7, #12]
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fa5d 	bl	800cc30 <USBD_CtlSendData>
 800c776:	e009      	b.n	800c78c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c778:	6839      	ldr	r1, [r7, #0]
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f9e7 	bl	800cb4e <USBD_CtlError>
 800c780:	e004      	b.n	800c78c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 faae 	bl	800cce4 <USBD_CtlSendStatus>
 800c788:	e000      	b.n	800c78c <USBD_GetDescriptor+0x320>
    return;
 800c78a:	bf00      	nop
  }
}
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop

0800c794 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	889b      	ldrh	r3, [r3, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d131      	bne.n	800c80a <USBD_SetAddress+0x76>
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	88db      	ldrh	r3, [r3, #6]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d12d      	bne.n	800c80a <USBD_SetAddress+0x76>
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	885b      	ldrh	r3, [r3, #2]
 800c7b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7b4:	d829      	bhi.n	800c80a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	885b      	ldrh	r3, [r3, #2]
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	2b03      	cmp	r3, #3
 800c7cc:	d104      	bne.n	800c7d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 f9bc 	bl	800cb4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7d6:	e01d      	b.n	800c814 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	7bfa      	ldrb	r2, [r7, #15]
 800c7dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 ffe1 	bl	800d7ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fa7a 	bl	800cce4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c7f0:	7bfb      	ldrb	r3, [r7, #15]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d004      	beq.n	800c800 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2202      	movs	r2, #2
 800c7fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7fe:	e009      	b.n	800c814 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2201      	movs	r2, #1
 800c804:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c808:	e004      	b.n	800c814 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c80a:	6839      	ldr	r1, [r7, #0]
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 f99e 	bl	800cb4e <USBD_CtlError>
  }
}
 800c812:	bf00      	nop
 800c814:	bf00      	nop
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c826:	2300      	movs	r3, #0
 800c828:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	885b      	ldrh	r3, [r3, #2]
 800c82e:	b2da      	uxtb	r2, r3
 800c830:	4b4e      	ldr	r3, [pc, #312]	@ (800c96c <USBD_SetConfig+0x150>)
 800c832:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c834:	4b4d      	ldr	r3, [pc, #308]	@ (800c96c <USBD_SetConfig+0x150>)
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d905      	bls.n	800c848 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c83c:	6839      	ldr	r1, [r7, #0]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f985 	bl	800cb4e <USBD_CtlError>
    return USBD_FAIL;
 800c844:	2303      	movs	r3, #3
 800c846:	e08c      	b.n	800c962 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	2b02      	cmp	r3, #2
 800c852:	d002      	beq.n	800c85a <USBD_SetConfig+0x3e>
 800c854:	2b03      	cmp	r3, #3
 800c856:	d029      	beq.n	800c8ac <USBD_SetConfig+0x90>
 800c858:	e075      	b.n	800c946 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c85a:	4b44      	ldr	r3, [pc, #272]	@ (800c96c <USBD_SetConfig+0x150>)
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d020      	beq.n	800c8a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c862:	4b42      	ldr	r3, [pc, #264]	@ (800c96c <USBD_SetConfig+0x150>)
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	461a      	mov	r2, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c86c:	4b3f      	ldr	r3, [pc, #252]	@ (800c96c <USBD_SetConfig+0x150>)
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	4619      	mov	r1, r3
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7fe ffb9 	bl	800b7ea <USBD_SetClassConfig>
 800c878:	4603      	mov	r3, r0
 800c87a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c87c:	7bfb      	ldrb	r3, [r7, #15]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d008      	beq.n	800c894 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c882:	6839      	ldr	r1, [r7, #0]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f962 	bl	800cb4e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2202      	movs	r2, #2
 800c88e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c892:	e065      	b.n	800c960 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 fa25 	bl	800cce4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2203      	movs	r2, #3
 800c89e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c8a2:	e05d      	b.n	800c960 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fa1d 	bl	800cce4 <USBD_CtlSendStatus>
      break;
 800c8aa:	e059      	b.n	800c960 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c8ac:	4b2f      	ldr	r3, [pc, #188]	@ (800c96c <USBD_SetConfig+0x150>)
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d112      	bne.n	800c8da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2202      	movs	r2, #2
 800c8b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c8bc:	4b2b      	ldr	r3, [pc, #172]	@ (800c96c <USBD_SetConfig+0x150>)
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c8c6:	4b29      	ldr	r3, [pc, #164]	@ (800c96c <USBD_SetConfig+0x150>)
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f7fe ffa8 	bl	800b822 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fa06 	bl	800cce4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c8d8:	e042      	b.n	800c960 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c8da:	4b24      	ldr	r3, [pc, #144]	@ (800c96c <USBD_SetConfig+0x150>)
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d02a      	beq.n	800c93e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7fe ff96 	bl	800b822 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c8f6:	4b1d      	ldr	r3, [pc, #116]	@ (800c96c <USBD_SetConfig+0x150>)
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c900:	4b1a      	ldr	r3, [pc, #104]	@ (800c96c <USBD_SetConfig+0x150>)
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	4619      	mov	r1, r3
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f7fe ff6f 	bl	800b7ea <USBD_SetClassConfig>
 800c90c:	4603      	mov	r3, r0
 800c90e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c910:	7bfb      	ldrb	r3, [r7, #15]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00f      	beq.n	800c936 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 f918 	bl	800cb4e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	b2db      	uxtb	r3, r3
 800c924:	4619      	mov	r1, r3
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7fe ff7b 	bl	800b822 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2202      	movs	r2, #2
 800c930:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c934:	e014      	b.n	800c960 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 f9d4 	bl	800cce4 <USBD_CtlSendStatus>
      break;
 800c93c:	e010      	b.n	800c960 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f9d0 	bl	800cce4 <USBD_CtlSendStatus>
      break;
 800c944:	e00c      	b.n	800c960 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c946:	6839      	ldr	r1, [r7, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f900 	bl	800cb4e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c94e:	4b07      	ldr	r3, [pc, #28]	@ (800c96c <USBD_SetConfig+0x150>)
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	4619      	mov	r1, r3
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f7fe ff64 	bl	800b822 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c95a:	2303      	movs	r3, #3
 800c95c:	73fb      	strb	r3, [r7, #15]
      break;
 800c95e:	bf00      	nop
  }

  return ret;
 800c960:	7bfb      	ldrb	r3, [r7, #15]
}
 800c962:	4618      	mov	r0, r3
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	20003584 	.word	0x20003584

0800c970 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	88db      	ldrh	r3, [r3, #6]
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d004      	beq.n	800c98c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 f8e2 	bl	800cb4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c98a:	e023      	b.n	800c9d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c992:	b2db      	uxtb	r3, r3
 800c994:	2b02      	cmp	r3, #2
 800c996:	dc02      	bgt.n	800c99e <USBD_GetConfig+0x2e>
 800c998:	2b00      	cmp	r3, #0
 800c99a:	dc03      	bgt.n	800c9a4 <USBD_GetConfig+0x34>
 800c99c:	e015      	b.n	800c9ca <USBD_GetConfig+0x5a>
 800c99e:	2b03      	cmp	r3, #3
 800c9a0:	d00b      	beq.n	800c9ba <USBD_GetConfig+0x4a>
 800c9a2:	e012      	b.n	800c9ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	3308      	adds	r3, #8
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 f93c 	bl	800cc30 <USBD_CtlSendData>
        break;
 800c9b8:	e00c      	b.n	800c9d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	3304      	adds	r3, #4
 800c9be:	2201      	movs	r2, #1
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 f934 	bl	800cc30 <USBD_CtlSendData>
        break;
 800c9c8:	e004      	b.n	800c9d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c9ca:	6839      	ldr	r1, [r7, #0]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 f8be 	bl	800cb4e <USBD_CtlError>
        break;
 800c9d2:	bf00      	nop
}
 800c9d4:	bf00      	nop
 800c9d6:	3708      	adds	r7, #8
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d81e      	bhi.n	800ca32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	88db      	ldrh	r3, [r3, #6]
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d004      	beq.n	800ca06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 f8a5 	bl	800cb4e <USBD_CtlError>
        break;
 800ca04:	e01a      	b.n	800ca3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2201      	movs	r2, #1
 800ca0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d005      	beq.n	800ca22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	f043 0202 	orr.w	r2, r3, #2
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	330c      	adds	r3, #12
 800ca26:	2202      	movs	r2, #2
 800ca28:	4619      	mov	r1, r3
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 f900 	bl	800cc30 <USBD_CtlSendData>
      break;
 800ca30:	e004      	b.n	800ca3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ca32:	6839      	ldr	r1, [r7, #0]
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 f88a 	bl	800cb4e <USBD_CtlError>
      break;
 800ca3a:	bf00      	nop
  }
}
 800ca3c:	bf00      	nop
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	885b      	ldrh	r3, [r3, #2]
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d107      	bne.n	800ca66 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2201      	movs	r2, #1
 800ca5a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 f940 	bl	800cce4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ca64:	e013      	b.n	800ca8e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	885b      	ldrh	r3, [r3, #2]
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d10b      	bne.n	800ca86 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	889b      	ldrh	r3, [r3, #4]
 800ca72:	0a1b      	lsrs	r3, r3, #8
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 f930 	bl	800cce4 <USBD_CtlSendStatus>
}
 800ca84:	e003      	b.n	800ca8e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 f860 	bl	800cb4e <USBD_CtlError>
}
 800ca8e:	bf00      	nop
 800ca90:	3708      	adds	r7, #8
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b082      	sub	sp, #8
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
 800ca9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	3b01      	subs	r3, #1
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d80b      	bhi.n	800cac6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	885b      	ldrh	r3, [r3, #2]
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d10c      	bne.n	800cad0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 f910 	bl	800cce4 <USBD_CtlSendStatus>
      }
      break;
 800cac4:	e004      	b.n	800cad0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cac6:	6839      	ldr	r1, [r7, #0]
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 f840 	bl	800cb4e <USBD_CtlError>
      break;
 800cace:	e000      	b.n	800cad2 <USBD_ClrFeature+0x3c>
      break;
 800cad0:	bf00      	nop
  }
}
 800cad2:	bf00      	nop
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b084      	sub	sp, #16
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	781a      	ldrb	r2, [r3, #0]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	3301      	adds	r3, #1
 800caf4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	781a      	ldrb	r2, [r3, #0]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	3301      	adds	r3, #1
 800cb02:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f7ff fa16 	bl	800bf36 <SWAPBYTE>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	3301      	adds	r3, #1
 800cb16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cb1e:	68f8      	ldr	r0, [r7, #12]
 800cb20:	f7ff fa09 	bl	800bf36 <SWAPBYTE>
 800cb24:	4603      	mov	r3, r0
 800cb26:	461a      	mov	r2, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	3301      	adds	r3, #1
 800cb30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	3301      	adds	r3, #1
 800cb36:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f7ff f9fc 	bl	800bf36 <SWAPBYTE>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	461a      	mov	r2, r3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	80da      	strh	r2, [r3, #6]
}
 800cb46:	bf00      	nop
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b082      	sub	sp, #8
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb58:	2180      	movs	r1, #128	@ 0x80
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 fd8e 	bl	800d67c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb60:	2100      	movs	r1, #0
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 fd8a 	bl	800d67c <USBD_LL_StallEP>
}
 800cb68:	bf00      	nop
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b086      	sub	sp, #24
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d036      	beq.n	800cbf4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cb8a:	6938      	ldr	r0, [r7, #16]
 800cb8c:	f000 f836 	bl	800cbfc <USBD_GetLen>
 800cb90:	4603      	mov	r3, r0
 800cb92:	3301      	adds	r3, #1
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cb9e:	7dfb      	ldrb	r3, [r7, #23]
 800cba0:	68ba      	ldr	r2, [r7, #8]
 800cba2:	4413      	add	r3, r2
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	7812      	ldrb	r2, [r2, #0]
 800cba8:	701a      	strb	r2, [r3, #0]
  idx++;
 800cbaa:	7dfb      	ldrb	r3, [r7, #23]
 800cbac:	3301      	adds	r3, #1
 800cbae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cbb0:	7dfb      	ldrb	r3, [r7, #23]
 800cbb2:	68ba      	ldr	r2, [r7, #8]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	2203      	movs	r2, #3
 800cbb8:	701a      	strb	r2, [r3, #0]
  idx++;
 800cbba:	7dfb      	ldrb	r3, [r7, #23]
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cbc0:	e013      	b.n	800cbea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cbc2:	7dfb      	ldrb	r3, [r7, #23]
 800cbc4:	68ba      	ldr	r2, [r7, #8]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	693a      	ldr	r2, [r7, #16]
 800cbca:	7812      	ldrb	r2, [r2, #0]
 800cbcc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	613b      	str	r3, [r7, #16]
    idx++;
 800cbd4:	7dfb      	ldrb	r3, [r7, #23]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cbda:	7dfb      	ldrb	r3, [r7, #23]
 800cbdc:	68ba      	ldr	r2, [r7, #8]
 800cbde:	4413      	add	r3, r2
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	701a      	strb	r2, [r3, #0]
    idx++;
 800cbe4:	7dfb      	ldrb	r3, [r7, #23]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1e7      	bne.n	800cbc2 <USBD_GetString+0x52>
 800cbf2:	e000      	b.n	800cbf6 <USBD_GetString+0x86>
    return;
 800cbf4:	bf00      	nop
  }
}
 800cbf6:	3718      	adds	r7, #24
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b085      	sub	sp, #20
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cc04:	2300      	movs	r3, #0
 800cc06:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cc0c:	e005      	b.n	800cc1a <USBD_GetLen+0x1e>
  {
    len++;
 800cc0e:	7bfb      	ldrb	r3, [r7, #15]
 800cc10:	3301      	adds	r3, #1
 800cc12:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	3301      	adds	r3, #1
 800cc18:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1f5      	bne.n	800cc0e <USBD_GetLen+0x12>
  }

  return len;
 800cc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3714      	adds	r7, #20
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2202      	movs	r2, #2
 800cc40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	68ba      	ldr	r2, [r7, #8]
 800cc54:	2100      	movs	r1, #0
 800cc56:	68f8      	ldr	r0, [r7, #12]
 800cc58:	f000 fdde 	bl	800d818 <USBD_LL_Transmit>

  return USBD_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b084      	sub	sp, #16
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	60f8      	str	r0, [r7, #12]
 800cc6e:	60b9      	str	r1, [r7, #8]
 800cc70:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	68ba      	ldr	r2, [r7, #8]
 800cc76:	2100      	movs	r1, #0
 800cc78:	68f8      	ldr	r0, [r7, #12]
 800cc7a:	f000 fdcd 	bl	800d818 <USBD_LL_Transmit>

  return USBD_OK;
 800cc7e:	2300      	movs	r3, #0
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3710      	adds	r7, #16
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2203      	movs	r2, #3
 800cc98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	68f8      	ldr	r0, [r7, #12]
 800ccb4:	f000 fde8 	bl	800d888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b084      	sub	sp, #16
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	60f8      	str	r0, [r7, #12]
 800ccca:	60b9      	str	r1, [r7, #8]
 800cccc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f000 fdd7 	bl	800d888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3710      	adds	r7, #16
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2204      	movs	r2, #4
 800ccf0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 fd8c 	bl	800d818 <USBD_LL_Transmit>

  return USBD_OK;
 800cd00:	2300      	movs	r3, #0
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b082      	sub	sp, #8
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2205      	movs	r2, #5
 800cd16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	2100      	movs	r1, #0
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 fdb1 	bl	800d888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cd34:	2200      	movs	r2, #0
 800cd36:	4912      	ldr	r1, [pc, #72]	@ (800cd80 <MX_USB_DEVICE_Init+0x50>)
 800cd38:	4812      	ldr	r0, [pc, #72]	@ (800cd84 <MX_USB_DEVICE_Init+0x54>)
 800cd3a:	f7fe fcd9 	bl	800b6f0 <USBD_Init>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cd44:	f7f4 facf 	bl	80012e6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cd48:	490f      	ldr	r1, [pc, #60]	@ (800cd88 <MX_USB_DEVICE_Init+0x58>)
 800cd4a:	480e      	ldr	r0, [pc, #56]	@ (800cd84 <MX_USB_DEVICE_Init+0x54>)
 800cd4c:	f7fe fd00 	bl	800b750 <USBD_RegisterClass>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d001      	beq.n	800cd5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cd56:	f7f4 fac6 	bl	80012e6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cd5a:	490c      	ldr	r1, [pc, #48]	@ (800cd8c <MX_USB_DEVICE_Init+0x5c>)
 800cd5c:	4809      	ldr	r0, [pc, #36]	@ (800cd84 <MX_USB_DEVICE_Init+0x54>)
 800cd5e:	f7fe fbf7 	bl	800b550 <USBD_CDC_RegisterInterface>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d001      	beq.n	800cd6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cd68:	f7f4 fabd 	bl	80012e6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cd6c:	4805      	ldr	r0, [pc, #20]	@ (800cd84 <MX_USB_DEVICE_Init+0x54>)
 800cd6e:	f7fe fd25 	bl	800b7bc <USBD_Start>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cd78:	f7f4 fab5 	bl	80012e6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cd7c:	bf00      	nop
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	200000ac 	.word	0x200000ac
 800cd84:	20003588 	.word	0x20003588
 800cd88:	20000018 	.word	0x20000018
 800cd8c:	20000098 	.word	0x20000098

0800cd90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cd94:	2200      	movs	r2, #0
 800cd96:	4905      	ldr	r1, [pc, #20]	@ (800cdac <CDC_Init_FS+0x1c>)
 800cd98:	4805      	ldr	r0, [pc, #20]	@ (800cdb0 <CDC_Init_FS+0x20>)
 800cd9a:	f7fe fbf3 	bl	800b584 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cd9e:	4905      	ldr	r1, [pc, #20]	@ (800cdb4 <CDC_Init_FS+0x24>)
 800cda0:	4803      	ldr	r0, [pc, #12]	@ (800cdb0 <CDC_Init_FS+0x20>)
 800cda2:	f7fe fc11 	bl	800b5c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cda6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	20004064 	.word	0x20004064
 800cdb0:	20003588 	.word	0x20003588
 800cdb4:	20003864 	.word	0x20003864

0800cdb8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cdbc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b083      	sub	sp, #12
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	4603      	mov	r3, r0
 800cdd0:	6039      	str	r1, [r7, #0]
 800cdd2:	71fb      	strb	r3, [r7, #7]
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cdd8:	79fb      	ldrb	r3, [r7, #7]
 800cdda:	2b23      	cmp	r3, #35	@ 0x23
 800cddc:	d84a      	bhi.n	800ce74 <CDC_Control_FS+0xac>
 800cdde:	a201      	add	r2, pc, #4	@ (adr r2, 800cde4 <CDC_Control_FS+0x1c>)
 800cde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde4:	0800ce75 	.word	0x0800ce75
 800cde8:	0800ce75 	.word	0x0800ce75
 800cdec:	0800ce75 	.word	0x0800ce75
 800cdf0:	0800ce75 	.word	0x0800ce75
 800cdf4:	0800ce75 	.word	0x0800ce75
 800cdf8:	0800ce75 	.word	0x0800ce75
 800cdfc:	0800ce75 	.word	0x0800ce75
 800ce00:	0800ce75 	.word	0x0800ce75
 800ce04:	0800ce75 	.word	0x0800ce75
 800ce08:	0800ce75 	.word	0x0800ce75
 800ce0c:	0800ce75 	.word	0x0800ce75
 800ce10:	0800ce75 	.word	0x0800ce75
 800ce14:	0800ce75 	.word	0x0800ce75
 800ce18:	0800ce75 	.word	0x0800ce75
 800ce1c:	0800ce75 	.word	0x0800ce75
 800ce20:	0800ce75 	.word	0x0800ce75
 800ce24:	0800ce75 	.word	0x0800ce75
 800ce28:	0800ce75 	.word	0x0800ce75
 800ce2c:	0800ce75 	.word	0x0800ce75
 800ce30:	0800ce75 	.word	0x0800ce75
 800ce34:	0800ce75 	.word	0x0800ce75
 800ce38:	0800ce75 	.word	0x0800ce75
 800ce3c:	0800ce75 	.word	0x0800ce75
 800ce40:	0800ce75 	.word	0x0800ce75
 800ce44:	0800ce75 	.word	0x0800ce75
 800ce48:	0800ce75 	.word	0x0800ce75
 800ce4c:	0800ce75 	.word	0x0800ce75
 800ce50:	0800ce75 	.word	0x0800ce75
 800ce54:	0800ce75 	.word	0x0800ce75
 800ce58:	0800ce75 	.word	0x0800ce75
 800ce5c:	0800ce75 	.word	0x0800ce75
 800ce60:	0800ce75 	.word	0x0800ce75
 800ce64:	0800ce75 	.word	0x0800ce75
 800ce68:	0800ce75 	.word	0x0800ce75
 800ce6c:	0800ce75 	.word	0x0800ce75
 800ce70:	0800ce75 	.word	0x0800ce75
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ce74:	bf00      	nop
  }

  return (USBD_OK);
 800ce76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ce8e:	6879      	ldr	r1, [r7, #4]
 800ce90:	4808      	ldr	r0, [pc, #32]	@ (800ceb4 <CDC_Receive_FS+0x30>)
 800ce92:	f7fe fb99 	bl	800b5c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ce96:	4807      	ldr	r0, [pc, #28]	@ (800ceb4 <CDC_Receive_FS+0x30>)
 800ce98:	f7fe fbf4 	bl	800b684 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  //USB_My_Receive(Buf, *Len);
  comms_cdc_rx_callback(Buf, *Len);
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4619      	mov	r1, r3
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f7f3 ff08 	bl	8000cb8 <comms_cdc_rx_callback>

  return (USBD_OK);
 800cea8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3708      	adds	r7, #8
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20003588 	.word	0x20003588

0800ceb8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	460b      	mov	r3, r1
 800cec2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cec4:	2300      	movs	r3, #0
 800cec6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cec8:	4b0d      	ldr	r3, [pc, #52]	@ (800cf00 <CDC_Transmit_FS+0x48>)
 800ceca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cece:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d001      	beq.n	800cede <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ceda:	2301      	movs	r3, #1
 800cedc:	e00b      	b.n	800cef6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cede:	887b      	ldrh	r3, [r7, #2]
 800cee0:	461a      	mov	r2, r3
 800cee2:	6879      	ldr	r1, [r7, #4]
 800cee4:	4806      	ldr	r0, [pc, #24]	@ (800cf00 <CDC_Transmit_FS+0x48>)
 800cee6:	f7fe fb4d 	bl	800b584 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ceea:	4805      	ldr	r0, [pc, #20]	@ (800cf00 <CDC_Transmit_FS+0x48>)
 800ceec:	f7fe fb8a 	bl	800b604 <USBD_CDC_TransmitPacket>
 800cef0:	4603      	mov	r3, r0
 800cef2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	20003588 	.word	0x20003588

0800cf04 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b087      	sub	sp, #28
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cf12:	2300      	movs	r3, #0
 800cf14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cf16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	371c      	adds	r7, #28
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
	...

0800cf28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	4603      	mov	r3, r0
 800cf30:	6039      	str	r1, [r7, #0]
 800cf32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	2212      	movs	r2, #18
 800cf38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cf3a:	4b03      	ldr	r3, [pc, #12]	@ (800cf48 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	370c      	adds	r7, #12
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr
 800cf48:	200000cc 	.word	0x200000cc

0800cf4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	4603      	mov	r3, r0
 800cf54:	6039      	str	r1, [r7, #0]
 800cf56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	2204      	movs	r2, #4
 800cf5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cf5e:	4b03      	ldr	r3, [pc, #12]	@ (800cf6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	370c      	adds	r7, #12
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr
 800cf6c:	200000ec 	.word	0x200000ec

0800cf70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	6039      	str	r1, [r7, #0]
 800cf7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d105      	bne.n	800cf8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	4907      	ldr	r1, [pc, #28]	@ (800cfa4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf86:	4808      	ldr	r0, [pc, #32]	@ (800cfa8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cf88:	f7ff fdf2 	bl	800cb70 <USBD_GetString>
 800cf8c:	e004      	b.n	800cf98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf8e:	683a      	ldr	r2, [r7, #0]
 800cf90:	4904      	ldr	r1, [pc, #16]	@ (800cfa4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf92:	4805      	ldr	r0, [pc, #20]	@ (800cfa8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cf94:	f7ff fdec 	bl	800cb70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf98:	4b02      	ldr	r3, [pc, #8]	@ (800cfa4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3708      	adds	r7, #8
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop
 800cfa4:	20004864 	.word	0x20004864
 800cfa8:	0800da84 	.word	0x0800da84

0800cfac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	6039      	str	r1, [r7, #0]
 800cfb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cfb8:	683a      	ldr	r2, [r7, #0]
 800cfba:	4904      	ldr	r1, [pc, #16]	@ (800cfcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cfbc:	4804      	ldr	r0, [pc, #16]	@ (800cfd0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cfbe:	f7ff fdd7 	bl	800cb70 <USBD_GetString>
  return USBD_StrDesc;
 800cfc2:	4b02      	ldr	r3, [pc, #8]	@ (800cfcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	20004864 	.word	0x20004864
 800cfd0:	0800da9c 	.word	0x0800da9c

0800cfd4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	4603      	mov	r3, r0
 800cfdc:	6039      	str	r1, [r7, #0]
 800cfde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	221a      	movs	r2, #26
 800cfe4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cfe6:	f000 f855 	bl	800d094 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cfea:	4b02      	ldr	r3, [pc, #8]	@ (800cff4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	200000f0 	.word	0x200000f0

0800cff8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	4603      	mov	r3, r0
 800d000:	6039      	str	r1, [r7, #0]
 800d002:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d004:	79fb      	ldrb	r3, [r7, #7]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d105      	bne.n	800d016 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d00a:	683a      	ldr	r2, [r7, #0]
 800d00c:	4907      	ldr	r1, [pc, #28]	@ (800d02c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d00e:	4808      	ldr	r0, [pc, #32]	@ (800d030 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d010:	f7ff fdae 	bl	800cb70 <USBD_GetString>
 800d014:	e004      	b.n	800d020 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d016:	683a      	ldr	r2, [r7, #0]
 800d018:	4904      	ldr	r1, [pc, #16]	@ (800d02c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d01a:	4805      	ldr	r0, [pc, #20]	@ (800d030 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d01c:	f7ff fda8 	bl	800cb70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d020:	4b02      	ldr	r3, [pc, #8]	@ (800d02c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d022:	4618      	mov	r0, r3
 800d024:	3708      	adds	r7, #8
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	20004864 	.word	0x20004864
 800d030:	0800dab0 	.word	0x0800dab0

0800d034 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af00      	add	r7, sp, #0
 800d03a:	4603      	mov	r3, r0
 800d03c:	6039      	str	r1, [r7, #0]
 800d03e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d040:	79fb      	ldrb	r3, [r7, #7]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d105      	bne.n	800d052 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d046:	683a      	ldr	r2, [r7, #0]
 800d048:	4907      	ldr	r1, [pc, #28]	@ (800d068 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d04a:	4808      	ldr	r0, [pc, #32]	@ (800d06c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d04c:	f7ff fd90 	bl	800cb70 <USBD_GetString>
 800d050:	e004      	b.n	800d05c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d052:	683a      	ldr	r2, [r7, #0]
 800d054:	4904      	ldr	r1, [pc, #16]	@ (800d068 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d056:	4805      	ldr	r0, [pc, #20]	@ (800d06c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d058:	f7ff fd8a 	bl	800cb70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d05c:	4b02      	ldr	r3, [pc, #8]	@ (800d068 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	20004864 	.word	0x20004864
 800d06c:	0800dabc 	.word	0x0800dabc

0800d070 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	4603      	mov	r3, r0
 800d078:	6039      	str	r1, [r7, #0]
 800d07a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	220c      	movs	r2, #12
 800d080:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d082:	4b03      	ldr	r3, [pc, #12]	@ (800d090 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d084:	4618      	mov	r0, r3
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr
 800d090:	200000e0 	.word	0x200000e0

0800d094 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d09a:	4b0f      	ldr	r3, [pc, #60]	@ (800d0d8 <Get_SerialNum+0x44>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d0a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d0dc <Get_SerialNum+0x48>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d0a6:	4b0e      	ldr	r3, [pc, #56]	@ (800d0e0 <Get_SerialNum+0x4c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d009      	beq.n	800d0ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d0ba:	2208      	movs	r2, #8
 800d0bc:	4909      	ldr	r1, [pc, #36]	@ (800d0e4 <Get_SerialNum+0x50>)
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f000 f814 	bl	800d0ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d0c4:	2204      	movs	r2, #4
 800d0c6:	4908      	ldr	r1, [pc, #32]	@ (800d0e8 <Get_SerialNum+0x54>)
 800d0c8:	68b8      	ldr	r0, [r7, #8]
 800d0ca:	f000 f80f 	bl	800d0ec <IntToUnicode>
  }
}
 800d0ce:	bf00      	nop
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	1fff7590 	.word	0x1fff7590
 800d0dc:	1fff7594 	.word	0x1fff7594
 800d0e0:	1fff7598 	.word	0x1fff7598
 800d0e4:	200000f2 	.word	0x200000f2
 800d0e8:	20000102 	.word	0x20000102

0800d0ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b087      	sub	sp, #28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	4613      	mov	r3, r2
 800d0f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d0fe:	2300      	movs	r3, #0
 800d100:	75fb      	strb	r3, [r7, #23]
 800d102:	e027      	b.n	800d154 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	0f1b      	lsrs	r3, r3, #28
 800d108:	2b09      	cmp	r3, #9
 800d10a:	d80b      	bhi.n	800d124 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	0f1b      	lsrs	r3, r3, #28
 800d110:	b2da      	uxtb	r2, r3
 800d112:	7dfb      	ldrb	r3, [r7, #23]
 800d114:	005b      	lsls	r3, r3, #1
 800d116:	4619      	mov	r1, r3
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	440b      	add	r3, r1
 800d11c:	3230      	adds	r2, #48	@ 0x30
 800d11e:	b2d2      	uxtb	r2, r2
 800d120:	701a      	strb	r2, [r3, #0]
 800d122:	e00a      	b.n	800d13a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	0f1b      	lsrs	r3, r3, #28
 800d128:	b2da      	uxtb	r2, r3
 800d12a:	7dfb      	ldrb	r3, [r7, #23]
 800d12c:	005b      	lsls	r3, r3, #1
 800d12e:	4619      	mov	r1, r3
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	440b      	add	r3, r1
 800d134:	3237      	adds	r2, #55	@ 0x37
 800d136:	b2d2      	uxtb	r2, r2
 800d138:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	011b      	lsls	r3, r3, #4
 800d13e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d140:	7dfb      	ldrb	r3, [r7, #23]
 800d142:	005b      	lsls	r3, r3, #1
 800d144:	3301      	adds	r3, #1
 800d146:	68ba      	ldr	r2, [r7, #8]
 800d148:	4413      	add	r3, r2
 800d14a:	2200      	movs	r2, #0
 800d14c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d14e:	7dfb      	ldrb	r3, [r7, #23]
 800d150:	3301      	adds	r3, #1
 800d152:	75fb      	strb	r3, [r7, #23]
 800d154:	7dfa      	ldrb	r2, [r7, #23]
 800d156:	79fb      	ldrb	r3, [r7, #7]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d3d3      	bcc.n	800d104 <IntToUnicode+0x18>
  }
}
 800d15c:	bf00      	nop
 800d15e:	bf00      	nop
 800d160:	371c      	adds	r7, #28
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr
	...

0800d16c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b0b0      	sub	sp, #192	@ 0xc0
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d174:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d178:	2200      	movs	r2, #0
 800d17a:	601a      	str	r2, [r3, #0]
 800d17c:	605a      	str	r2, [r3, #4]
 800d17e:	609a      	str	r2, [r3, #8]
 800d180:	60da      	str	r2, [r3, #12]
 800d182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d184:	f107 0318 	add.w	r3, r7, #24
 800d188:	2294      	movs	r2, #148	@ 0x94
 800d18a:	2100      	movs	r1, #0
 800d18c:	4618      	mov	r0, r3
 800d18e:	f000 fc33 	bl	800d9f8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d19a:	d174      	bne.n	800d286 <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d19c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d1a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d1a8:	f107 0318 	add.w	r3, r7, #24
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7f9 f829 	bl	8006204 <HAL_RCCEx_PeriphCLKConfig>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d001      	beq.n	800d1bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d1b8:	f7f4 f895 	bl	80012e6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1bc:	4b34      	ldr	r3, [pc, #208]	@ (800d290 <HAL_PCD_MspInit+0x124>)
 800d1be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1c0:	4a33      	ldr	r2, [pc, #204]	@ (800d290 <HAL_PCD_MspInit+0x124>)
 800d1c2:	f043 0301 	orr.w	r3, r3, #1
 800d1c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d1c8:	4b31      	ldr	r3, [pc, #196]	@ (800d290 <HAL_PCD_MspInit+0x124>)
 800d1ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1cc:	f003 0301 	and.w	r3, r3, #1
 800d1d0:	617b      	str	r3, [r7, #20]
 800d1d2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d1d4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800d1d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1dc:	2302      	movs	r3, #2
 800d1de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1e8:	2303      	movs	r3, #3
 800d1ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d1ee:	230a      	movs	r3, #10
 800d1f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d1fe:	f7f6 fcc1 	bl	8003b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d206:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d20a:	2300      	movs	r3, #0
 800d20c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d210:	2300      	movs	r3, #0
 800d212:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d216:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d21a:	4619      	mov	r1, r3
 800d21c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d220:	f7f6 fcb0 	bl	8003b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d224:	4b1a      	ldr	r3, [pc, #104]	@ (800d290 <HAL_PCD_MspInit+0x124>)
 800d226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d228:	4a19      	ldr	r2, [pc, #100]	@ (800d290 <HAL_PCD_MspInit+0x124>)
 800d22a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d22e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d230:	4b17      	ldr	r3, [pc, #92]	@ (800d290 <HAL_PCD_MspInit+0x124>)
 800d232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d238:	613b      	str	r3, [r7, #16]
 800d23a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d23c:	4b14      	ldr	r3, [pc, #80]	@ (800d290 <HAL_PCD_MspInit+0x124>)
 800d23e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d244:	2b00      	cmp	r3, #0
 800d246:	d114      	bne.n	800d272 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d248:	4b11      	ldr	r3, [pc, #68]	@ (800d290 <HAL_PCD_MspInit+0x124>)
 800d24a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d24c:	4a10      	ldr	r2, [pc, #64]	@ (800d290 <HAL_PCD_MspInit+0x124>)
 800d24e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d252:	6593      	str	r3, [r2, #88]	@ 0x58
 800d254:	4b0e      	ldr	r3, [pc, #56]	@ (800d290 <HAL_PCD_MspInit+0x124>)
 800d256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d25c:	60fb      	str	r3, [r7, #12]
 800d25e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800d260:	f7f8 f8d8 	bl	8005414 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d264:	4b0a      	ldr	r3, [pc, #40]	@ (800d290 <HAL_PCD_MspInit+0x124>)
 800d266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d268:	4a09      	ldr	r2, [pc, #36]	@ (800d290 <HAL_PCD_MspInit+0x124>)
 800d26a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d26e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d270:	e001      	b.n	800d276 <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d272:	f7f8 f8cf 	bl	8005414 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d276:	2200      	movs	r2, #0
 800d278:	2100      	movs	r1, #0
 800d27a:	2043      	movs	r0, #67	@ 0x43
 800d27c:	f7f6 f8d5 	bl	800342a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d280:	2043      	movs	r0, #67	@ 0x43
 800d282:	f7f6 f8ee 	bl	8003462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d286:	bf00      	nop
 800d288:	37c0      	adds	r7, #192	@ 0xc0
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	40021000 	.word	0x40021000

0800d294 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	f7fe fad3 	bl	800b856 <USBD_LL_SetupStage>
}
 800d2b0:	bf00      	nop
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d2ca:	78fa      	ldrb	r2, [r7, #3]
 800d2cc:	6879      	ldr	r1, [r7, #4]
 800d2ce:	4613      	mov	r3, r2
 800d2d0:	00db      	lsls	r3, r3, #3
 800d2d2:	4413      	add	r3, r2
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	440b      	add	r3, r1
 800d2d8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	78fb      	ldrb	r3, [r7, #3]
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	f7fe fb0d 	bl	800b900 <USBD_LL_DataOutStage>
}
 800d2e6:	bf00      	nop
 800d2e8:	3708      	adds	r7, #8
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2ee:	b580      	push	{r7, lr}
 800d2f0:	b082      	sub	sp, #8
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d300:	78fa      	ldrb	r2, [r7, #3]
 800d302:	6879      	ldr	r1, [r7, #4]
 800d304:	4613      	mov	r3, r2
 800d306:	00db      	lsls	r3, r3, #3
 800d308:	4413      	add	r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	440b      	add	r3, r1
 800d30e:	3348      	adds	r3, #72	@ 0x48
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	78fb      	ldrb	r3, [r7, #3]
 800d314:	4619      	mov	r1, r3
 800d316:	f7fe fba6 	bl	800ba66 <USBD_LL_DataInStage>
}
 800d31a:	bf00      	nop
 800d31c:	3708      	adds	r7, #8
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d322:	b580      	push	{r7, lr}
 800d324:	b082      	sub	sp, #8
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d330:	4618      	mov	r0, r3
 800d332:	f7fe fce0 	bl	800bcf6 <USBD_LL_SOF>
}
 800d336:	bf00      	nop
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b084      	sub	sp, #16
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d346:	2301      	movs	r3, #1
 800d348:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	2b02      	cmp	r3, #2
 800d350:	d001      	beq.n	800d356 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d352:	f7f3 ffc8 	bl	80012e6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d35c:	7bfa      	ldrb	r2, [r7, #15]
 800d35e:	4611      	mov	r1, r2
 800d360:	4618      	mov	r0, r3
 800d362:	f7fe fc84 	bl	800bc6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7fe fc2c 	bl	800bbca <USBD_LL_Reset>
}
 800d372:	bf00      	nop
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
	...

0800d37c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	6812      	ldr	r2, [r2, #0]
 800d392:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d396:	f043 0301 	orr.w	r3, r3, #1
 800d39a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7fe fc73 	bl	800bc8e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6a1b      	ldr	r3, [r3, #32]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d005      	beq.n	800d3bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3b0:	4b04      	ldr	r3, [pc, #16]	@ (800d3c4 <HAL_PCD_SuspendCallback+0x48>)
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	4a03      	ldr	r2, [pc, #12]	@ (800d3c4 <HAL_PCD_SuspendCallback+0x48>)
 800d3b6:	f043 0306 	orr.w	r3, r3, #6
 800d3ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d3bc:	bf00      	nop
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	e000ed00 	.word	0xe000ed00

0800d3c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	6812      	ldr	r2, [r2, #0]
 800d3de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d3e2:	f023 0301 	bic.w	r3, r3, #1
 800d3e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6a1b      	ldr	r3, [r3, #32]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d007      	beq.n	800d400 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3f0:	4b08      	ldr	r3, [pc, #32]	@ (800d414 <HAL_PCD_ResumeCallback+0x4c>)
 800d3f2:	691b      	ldr	r3, [r3, #16]
 800d3f4:	4a07      	ldr	r2, [pc, #28]	@ (800d414 <HAL_PCD_ResumeCallback+0x4c>)
 800d3f6:	f023 0306 	bic.w	r3, r3, #6
 800d3fa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d3fc:	f000 faf6 	bl	800d9ec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d406:	4618      	mov	r0, r3
 800d408:	f7fe fc5d 	bl	800bcc6 <USBD_LL_Resume>
}
 800d40c:	bf00      	nop
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	e000ed00 	.word	0xe000ed00

0800d418 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	460b      	mov	r3, r1
 800d422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d42a:	78fa      	ldrb	r2, [r7, #3]
 800d42c:	4611      	mov	r1, r2
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fe fcb3 	bl	800bd9a <USBD_LL_IsoOUTIncomplete>
}
 800d434:	bf00      	nop
 800d436:	3708      	adds	r7, #8
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	460b      	mov	r3, r1
 800d446:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d44e:	78fa      	ldrb	r2, [r7, #3]
 800d450:	4611      	mov	r1, r2
 800d452:	4618      	mov	r0, r3
 800d454:	f7fe fc6f 	bl	800bd36 <USBD_LL_IsoINIncomplete>
}
 800d458:	bf00      	nop
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d46e:	4618      	mov	r0, r3
 800d470:	f7fe fcc5 	bl	800bdfe <USBD_LL_DevConnected>
}
 800d474:	bf00      	nop
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fe fcc2 	bl	800be14 <USBD_LL_DevDisconnected>
}
 800d490:	bf00      	nop
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d13c      	bne.n	800d522 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d4a8:	4a20      	ldr	r2, [pc, #128]	@ (800d52c <USBD_LL_Init+0x94>)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4a1e      	ldr	r2, [pc, #120]	@ (800d52c <USBD_LL_Init+0x94>)
 800d4b4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d4b8:	4b1c      	ldr	r3, [pc, #112]	@ (800d52c <USBD_LL_Init+0x94>)
 800d4ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d4be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d4c0:	4b1a      	ldr	r3, [pc, #104]	@ (800d52c <USBD_LL_Init+0x94>)
 800d4c2:	2206      	movs	r2, #6
 800d4c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d4c6:	4b19      	ldr	r3, [pc, #100]	@ (800d52c <USBD_LL_Init+0x94>)
 800d4c8:	2202      	movs	r2, #2
 800d4ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d4cc:	4b17      	ldr	r3, [pc, #92]	@ (800d52c <USBD_LL_Init+0x94>)
 800d4ce:	2202      	movs	r2, #2
 800d4d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d4d2:	4b16      	ldr	r3, [pc, #88]	@ (800d52c <USBD_LL_Init+0x94>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d4d8:	4b14      	ldr	r3, [pc, #80]	@ (800d52c <USBD_LL_Init+0x94>)
 800d4da:	2200      	movs	r2, #0
 800d4dc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d4de:	4b13      	ldr	r3, [pc, #76]	@ (800d52c <USBD_LL_Init+0x94>)
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d4e4:	4b11      	ldr	r3, [pc, #68]	@ (800d52c <USBD_LL_Init+0x94>)
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d4ea:	4b10      	ldr	r3, [pc, #64]	@ (800d52c <USBD_LL_Init+0x94>)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d4f0:	4b0e      	ldr	r3, [pc, #56]	@ (800d52c <USBD_LL_Init+0x94>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d4f6:	480d      	ldr	r0, [pc, #52]	@ (800d52c <USBD_LL_Init+0x94>)
 800d4f8:	f7f6 fd20 	bl	8003f3c <HAL_PCD_Init>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d502:	f7f3 fef0 	bl	80012e6 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d506:	2180      	movs	r1, #128	@ 0x80
 800d508:	4808      	ldr	r0, [pc, #32]	@ (800d52c <USBD_LL_Init+0x94>)
 800d50a:	f7f7 fe8a 	bl	8005222 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d50e:	2240      	movs	r2, #64	@ 0x40
 800d510:	2100      	movs	r1, #0
 800d512:	4806      	ldr	r0, [pc, #24]	@ (800d52c <USBD_LL_Init+0x94>)
 800d514:	f7f7 fe3e 	bl	8005194 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d518:	2280      	movs	r2, #128	@ 0x80
 800d51a:	2101      	movs	r1, #1
 800d51c:	4803      	ldr	r0, [pc, #12]	@ (800d52c <USBD_LL_Init+0x94>)
 800d51e:	f7f7 fe39 	bl	8005194 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	3708      	adds	r7, #8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	20004a64 	.word	0x20004a64

0800d530 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d538:	2300      	movs	r3, #0
 800d53a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d53c:	2300      	movs	r3, #0
 800d53e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d546:	4618      	mov	r0, r3
 800d548:	f7f6 fe1c 	bl	8004184 <HAL_PCD_Start>
 800d54c:	4603      	mov	r3, r0
 800d54e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d550:	7bbb      	ldrb	r3, [r7, #14]
 800d552:	2b03      	cmp	r3, #3
 800d554:	d816      	bhi.n	800d584 <USBD_LL_Start+0x54>
 800d556:	a201      	add	r2, pc, #4	@ (adr r2, 800d55c <USBD_LL_Start+0x2c>)
 800d558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d55c:	0800d56d 	.word	0x0800d56d
 800d560:	0800d573 	.word	0x0800d573
 800d564:	0800d579 	.word	0x0800d579
 800d568:	0800d57f 	.word	0x0800d57f
    case HAL_OK :
      usb_status = USBD_OK;
 800d56c:	2300      	movs	r3, #0
 800d56e:	73fb      	strb	r3, [r7, #15]
    break;
 800d570:	e00b      	b.n	800d58a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d572:	2303      	movs	r3, #3
 800d574:	73fb      	strb	r3, [r7, #15]
    break;
 800d576:	e008      	b.n	800d58a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d578:	2301      	movs	r3, #1
 800d57a:	73fb      	strb	r3, [r7, #15]
    break;
 800d57c:	e005      	b.n	800d58a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d57e:	2303      	movs	r3, #3
 800d580:	73fb      	strb	r3, [r7, #15]
    break;
 800d582:	e002      	b.n	800d58a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d584:	2303      	movs	r3, #3
 800d586:	73fb      	strb	r3, [r7, #15]
    break;
 800d588:	bf00      	nop
  }
  return usb_status;
 800d58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	4608      	mov	r0, r1
 800d59e:	4611      	mov	r1, r2
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	70fb      	strb	r3, [r7, #3]
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	70bb      	strb	r3, [r7, #2]
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d5bc:	78bb      	ldrb	r3, [r7, #2]
 800d5be:	883a      	ldrh	r2, [r7, #0]
 800d5c0:	78f9      	ldrb	r1, [r7, #3]
 800d5c2:	f7f7 fac6 	bl	8004b52 <HAL_PCD_EP_Open>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d5ca:	7bbb      	ldrb	r3, [r7, #14]
 800d5cc:	2b03      	cmp	r3, #3
 800d5ce:	d817      	bhi.n	800d600 <USBD_LL_OpenEP+0x6c>
 800d5d0:	a201      	add	r2, pc, #4	@ (adr r2, 800d5d8 <USBD_LL_OpenEP+0x44>)
 800d5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d6:	bf00      	nop
 800d5d8:	0800d5e9 	.word	0x0800d5e9
 800d5dc:	0800d5ef 	.word	0x0800d5ef
 800d5e0:	0800d5f5 	.word	0x0800d5f5
 800d5e4:	0800d5fb 	.word	0x0800d5fb
    case HAL_OK :
      usb_status = USBD_OK;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d5ec:	e00b      	b.n	800d606 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5ee:	2303      	movs	r3, #3
 800d5f0:	73fb      	strb	r3, [r7, #15]
    break;
 800d5f2:	e008      	b.n	800d606 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d5f8:	e005      	b.n	800d606 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5fa:	2303      	movs	r3, #3
 800d5fc:	73fb      	strb	r3, [r7, #15]
    break;
 800d5fe:	e002      	b.n	800d606 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d600:	2303      	movs	r3, #3
 800d602:	73fb      	strb	r3, [r7, #15]
    break;
 800d604:	bf00      	nop
  }
  return usb_status;
 800d606:	7bfb      	ldrb	r3, [r7, #15]
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3710      	adds	r7, #16
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	460b      	mov	r3, r1
 800d61a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d61c:	2300      	movs	r3, #0
 800d61e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d620:	2300      	movs	r3, #0
 800d622:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d62a:	78fa      	ldrb	r2, [r7, #3]
 800d62c:	4611      	mov	r1, r2
 800d62e:	4618      	mov	r0, r3
 800d630:	f7f7 faf7 	bl	8004c22 <HAL_PCD_EP_Close>
 800d634:	4603      	mov	r3, r0
 800d636:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d638:	7bbb      	ldrb	r3, [r7, #14]
 800d63a:	2b03      	cmp	r3, #3
 800d63c:	d816      	bhi.n	800d66c <USBD_LL_CloseEP+0x5c>
 800d63e:	a201      	add	r2, pc, #4	@ (adr r2, 800d644 <USBD_LL_CloseEP+0x34>)
 800d640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d644:	0800d655 	.word	0x0800d655
 800d648:	0800d65b 	.word	0x0800d65b
 800d64c:	0800d661 	.word	0x0800d661
 800d650:	0800d667 	.word	0x0800d667
    case HAL_OK :
      usb_status = USBD_OK;
 800d654:	2300      	movs	r3, #0
 800d656:	73fb      	strb	r3, [r7, #15]
    break;
 800d658:	e00b      	b.n	800d672 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d65a:	2303      	movs	r3, #3
 800d65c:	73fb      	strb	r3, [r7, #15]
    break;
 800d65e:	e008      	b.n	800d672 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d660:	2301      	movs	r3, #1
 800d662:	73fb      	strb	r3, [r7, #15]
    break;
 800d664:	e005      	b.n	800d672 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d666:	2303      	movs	r3, #3
 800d668:	73fb      	strb	r3, [r7, #15]
    break;
 800d66a:	e002      	b.n	800d672 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d66c:	2303      	movs	r3, #3
 800d66e:	73fb      	strb	r3, [r7, #15]
    break;
 800d670:	bf00      	nop
  }
  return usb_status;
 800d672:	7bfb      	ldrb	r3, [r7, #15]
}
 800d674:	4618      	mov	r0, r3
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	460b      	mov	r3, r1
 800d686:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d688:	2300      	movs	r3, #0
 800d68a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d68c:	2300      	movs	r3, #0
 800d68e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d696:	78fa      	ldrb	r2, [r7, #3]
 800d698:	4611      	mov	r1, r2
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7f7 fb86 	bl	8004dac <HAL_PCD_EP_SetStall>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d6a4:	7bbb      	ldrb	r3, [r7, #14]
 800d6a6:	2b03      	cmp	r3, #3
 800d6a8:	d816      	bhi.n	800d6d8 <USBD_LL_StallEP+0x5c>
 800d6aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d6b0 <USBD_LL_StallEP+0x34>)
 800d6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b0:	0800d6c1 	.word	0x0800d6c1
 800d6b4:	0800d6c7 	.word	0x0800d6c7
 800d6b8:	0800d6cd 	.word	0x0800d6cd
 800d6bc:	0800d6d3 	.word	0x0800d6d3
    case HAL_OK :
      usb_status = USBD_OK;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d6c4:	e00b      	b.n	800d6de <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6c6:	2303      	movs	r3, #3
 800d6c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d6ca:	e008      	b.n	800d6de <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d6d0:	e005      	b.n	800d6de <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6d2:	2303      	movs	r3, #3
 800d6d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d6d6:	e002      	b.n	800d6de <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d6d8:	2303      	movs	r3, #3
 800d6da:	73fb      	strb	r3, [r7, #15]
    break;
 800d6dc:	bf00      	nop
  }
  return usb_status;
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3710      	adds	r7, #16
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d702:	78fa      	ldrb	r2, [r7, #3]
 800d704:	4611      	mov	r1, r2
 800d706:	4618      	mov	r0, r3
 800d708:	f7f7 fbb2 	bl	8004e70 <HAL_PCD_EP_ClrStall>
 800d70c:	4603      	mov	r3, r0
 800d70e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d710:	7bbb      	ldrb	r3, [r7, #14]
 800d712:	2b03      	cmp	r3, #3
 800d714:	d816      	bhi.n	800d744 <USBD_LL_ClearStallEP+0x5c>
 800d716:	a201      	add	r2, pc, #4	@ (adr r2, 800d71c <USBD_LL_ClearStallEP+0x34>)
 800d718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d71c:	0800d72d 	.word	0x0800d72d
 800d720:	0800d733 	.word	0x0800d733
 800d724:	0800d739 	.word	0x0800d739
 800d728:	0800d73f 	.word	0x0800d73f
    case HAL_OK :
      usb_status = USBD_OK;
 800d72c:	2300      	movs	r3, #0
 800d72e:	73fb      	strb	r3, [r7, #15]
    break;
 800d730:	e00b      	b.n	800d74a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d732:	2303      	movs	r3, #3
 800d734:	73fb      	strb	r3, [r7, #15]
    break;
 800d736:	e008      	b.n	800d74a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d738:	2301      	movs	r3, #1
 800d73a:	73fb      	strb	r3, [r7, #15]
    break;
 800d73c:	e005      	b.n	800d74a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d73e:	2303      	movs	r3, #3
 800d740:	73fb      	strb	r3, [r7, #15]
    break;
 800d742:	e002      	b.n	800d74a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d744:	2303      	movs	r3, #3
 800d746:	73fb      	strb	r3, [r7, #15]
    break;
 800d748:	bf00      	nop
  }
  return usb_status;
 800d74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3710      	adds	r7, #16
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	460b      	mov	r3, r1
 800d75e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d766:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	da0b      	bge.n	800d788 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d770:	78fb      	ldrb	r3, [r7, #3]
 800d772:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d776:	68f9      	ldr	r1, [r7, #12]
 800d778:	4613      	mov	r3, r2
 800d77a:	00db      	lsls	r3, r3, #3
 800d77c:	4413      	add	r3, r2
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	440b      	add	r3, r1
 800d782:	333e      	adds	r3, #62	@ 0x3e
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	e00b      	b.n	800d7a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d788:	78fb      	ldrb	r3, [r7, #3]
 800d78a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d78e:	68f9      	ldr	r1, [r7, #12]
 800d790:	4613      	mov	r3, r2
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	4413      	add	r3, r2
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	440b      	add	r3, r1
 800d79a:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800d79e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3714      	adds	r7, #20
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7c6:	78fa      	ldrb	r2, [r7, #3]
 800d7c8:	4611      	mov	r1, r2
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7f7 f99c 	bl	8004b08 <HAL_PCD_SetAddress>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d7d4:	7bbb      	ldrb	r3, [r7, #14]
 800d7d6:	2b03      	cmp	r3, #3
 800d7d8:	d816      	bhi.n	800d808 <USBD_LL_SetUSBAddress+0x5c>
 800d7da:	a201      	add	r2, pc, #4	@ (adr r2, 800d7e0 <USBD_LL_SetUSBAddress+0x34>)
 800d7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e0:	0800d7f1 	.word	0x0800d7f1
 800d7e4:	0800d7f7 	.word	0x0800d7f7
 800d7e8:	0800d7fd 	.word	0x0800d7fd
 800d7ec:	0800d803 	.word	0x0800d803
    case HAL_OK :
      usb_status = USBD_OK;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d7f4:	e00b      	b.n	800d80e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7f6:	2303      	movs	r3, #3
 800d7f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d7fa:	e008      	b.n	800d80e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d800:	e005      	b.n	800d80e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d802:	2303      	movs	r3, #3
 800d804:	73fb      	strb	r3, [r7, #15]
    break;
 800d806:	e002      	b.n	800d80e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d808:	2303      	movs	r3, #3
 800d80a:	73fb      	strb	r3, [r7, #15]
    break;
 800d80c:	bf00      	nop
  }
  return usb_status;
 800d80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d810:	4618      	mov	r0, r3
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	607a      	str	r2, [r7, #4]
 800d822:	603b      	str	r3, [r7, #0]
 800d824:	460b      	mov	r3, r1
 800d826:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d828:	2300      	movs	r3, #0
 800d82a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d82c:	2300      	movs	r3, #0
 800d82e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d836:	7af9      	ldrb	r1, [r7, #11]
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	f7f7 fa85 	bl	8004d4a <HAL_PCD_EP_Transmit>
 800d840:	4603      	mov	r3, r0
 800d842:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d844:	7dbb      	ldrb	r3, [r7, #22]
 800d846:	2b03      	cmp	r3, #3
 800d848:	d816      	bhi.n	800d878 <USBD_LL_Transmit+0x60>
 800d84a:	a201      	add	r2, pc, #4	@ (adr r2, 800d850 <USBD_LL_Transmit+0x38>)
 800d84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d850:	0800d861 	.word	0x0800d861
 800d854:	0800d867 	.word	0x0800d867
 800d858:	0800d86d 	.word	0x0800d86d
 800d85c:	0800d873 	.word	0x0800d873
    case HAL_OK :
      usb_status = USBD_OK;
 800d860:	2300      	movs	r3, #0
 800d862:	75fb      	strb	r3, [r7, #23]
    break;
 800d864:	e00b      	b.n	800d87e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d866:	2303      	movs	r3, #3
 800d868:	75fb      	strb	r3, [r7, #23]
    break;
 800d86a:	e008      	b.n	800d87e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d86c:	2301      	movs	r3, #1
 800d86e:	75fb      	strb	r3, [r7, #23]
    break;
 800d870:	e005      	b.n	800d87e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d872:	2303      	movs	r3, #3
 800d874:	75fb      	strb	r3, [r7, #23]
    break;
 800d876:	e002      	b.n	800d87e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d878:	2303      	movs	r3, #3
 800d87a:	75fb      	strb	r3, [r7, #23]
    break;
 800d87c:	bf00      	nop
  }
  return usb_status;
 800d87e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d880:	4618      	mov	r0, r3
 800d882:	3718      	adds	r7, #24
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b086      	sub	sp, #24
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	607a      	str	r2, [r7, #4]
 800d892:	603b      	str	r3, [r7, #0]
 800d894:	460b      	mov	r3, r1
 800d896:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d898:	2300      	movs	r3, #0
 800d89a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d89c:	2300      	movs	r3, #0
 800d89e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d8a6:	7af9      	ldrb	r1, [r7, #11]
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	f7f7 fa03 	bl	8004cb6 <HAL_PCD_EP_Receive>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d8b4:	7dbb      	ldrb	r3, [r7, #22]
 800d8b6:	2b03      	cmp	r3, #3
 800d8b8:	d816      	bhi.n	800d8e8 <USBD_LL_PrepareReceive+0x60>
 800d8ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d8c0 <USBD_LL_PrepareReceive+0x38>)
 800d8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8c0:	0800d8d1 	.word	0x0800d8d1
 800d8c4:	0800d8d7 	.word	0x0800d8d7
 800d8c8:	0800d8dd 	.word	0x0800d8dd
 800d8cc:	0800d8e3 	.word	0x0800d8e3
    case HAL_OK :
      usb_status = USBD_OK;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	75fb      	strb	r3, [r7, #23]
    break;
 800d8d4:	e00b      	b.n	800d8ee <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8d6:	2303      	movs	r3, #3
 800d8d8:	75fb      	strb	r3, [r7, #23]
    break;
 800d8da:	e008      	b.n	800d8ee <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	75fb      	strb	r3, [r7, #23]
    break;
 800d8e0:	e005      	b.n	800d8ee <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8e2:	2303      	movs	r3, #3
 800d8e4:	75fb      	strb	r3, [r7, #23]
    break;
 800d8e6:	e002      	b.n	800d8ee <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d8e8:	2303      	movs	r3, #3
 800d8ea:	75fb      	strb	r3, [r7, #23]
    break;
 800d8ec:	bf00      	nop
  }
  return usb_status;
 800d8ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3718      	adds	r7, #24
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	460b      	mov	r3, r1
 800d902:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d90a:	78fa      	ldrb	r2, [r7, #3]
 800d90c:	4611      	mov	r1, r2
 800d90e:	4618      	mov	r0, r3
 800d910:	f7f7 fa03 	bl	8004d1a <HAL_PCD_EP_GetRxCount>
 800d914:	4603      	mov	r3, r0
}
 800d916:	4618      	mov	r0, r3
 800d918:	3708      	adds	r7, #8
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
	...

0800d920 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	460b      	mov	r3, r1
 800d92a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d92c:	78fb      	ldrb	r3, [r7, #3]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d002      	beq.n	800d938 <HAL_PCDEx_LPM_Callback+0x18>
 800d932:	2b01      	cmp	r3, #1
 800d934:	d01f      	beq.n	800d976 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d936:	e03b      	b.n	800d9b0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6a1b      	ldr	r3, [r3, #32]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d007      	beq.n	800d950 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d940:	f000 f854 	bl	800d9ec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d944:	4b1c      	ldr	r3, [pc, #112]	@ (800d9b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d946:	691b      	ldr	r3, [r3, #16]
 800d948:	4a1b      	ldr	r2, [pc, #108]	@ (800d9b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d94a:	f023 0306 	bic.w	r3, r3, #6
 800d94e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	6812      	ldr	r2, [r2, #0]
 800d95e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d962:	f023 0301 	bic.w	r3, r3, #1
 800d966:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fe f9a9 	bl	800bcc6 <USBD_LL_Resume>
    break;
 800d974:	e01c      	b.n	800d9b0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	6812      	ldr	r2, [r2, #0]
 800d984:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d988:	f043 0301 	orr.w	r3, r3, #1
 800d98c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d994:	4618      	mov	r0, r3
 800d996:	f7fe f97a 	bl	800bc8e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6a1b      	ldr	r3, [r3, #32]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d005      	beq.n	800d9ae <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9a2:	4b05      	ldr	r3, [pc, #20]	@ (800d9b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d9a4:	691b      	ldr	r3, [r3, #16]
 800d9a6:	4a04      	ldr	r2, [pc, #16]	@ (800d9b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d9a8:	f043 0306 	orr.w	r3, r3, #6
 800d9ac:	6113      	str	r3, [r2, #16]
    break;
 800d9ae:	bf00      	nop
}
 800d9b0:	bf00      	nop
 800d9b2:	3708      	adds	r7, #8
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	e000ed00 	.word	0xe000ed00

0800d9bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d9c4:	4b03      	ldr	r3, [pc, #12]	@ (800d9d4 <USBD_static_malloc+0x18>)
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	370c      	adds	r7, #12
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	20004f70 	.word	0x20004f70

0800d9d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]

}
 800d9e0:	bf00      	nop
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d9f0:	f7f3 fc26 	bl	8001240 <SystemClock_Config>
}
 800d9f4:	bf00      	nop
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <memset>:
 800d9f8:	4402      	add	r2, r0
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d100      	bne.n	800da02 <memset+0xa>
 800da00:	4770      	bx	lr
 800da02:	f803 1b01 	strb.w	r1, [r3], #1
 800da06:	e7f9      	b.n	800d9fc <memset+0x4>

0800da08 <__libc_init_array>:
 800da08:	b570      	push	{r4, r5, r6, lr}
 800da0a:	4d0d      	ldr	r5, [pc, #52]	@ (800da40 <__libc_init_array+0x38>)
 800da0c:	4c0d      	ldr	r4, [pc, #52]	@ (800da44 <__libc_init_array+0x3c>)
 800da0e:	1b64      	subs	r4, r4, r5
 800da10:	10a4      	asrs	r4, r4, #2
 800da12:	2600      	movs	r6, #0
 800da14:	42a6      	cmp	r6, r4
 800da16:	d109      	bne.n	800da2c <__libc_init_array+0x24>
 800da18:	4d0b      	ldr	r5, [pc, #44]	@ (800da48 <__libc_init_array+0x40>)
 800da1a:	4c0c      	ldr	r4, [pc, #48]	@ (800da4c <__libc_init_array+0x44>)
 800da1c:	f000 f826 	bl	800da6c <_init>
 800da20:	1b64      	subs	r4, r4, r5
 800da22:	10a4      	asrs	r4, r4, #2
 800da24:	2600      	movs	r6, #0
 800da26:	42a6      	cmp	r6, r4
 800da28:	d105      	bne.n	800da36 <__libc_init_array+0x2e>
 800da2a:	bd70      	pop	{r4, r5, r6, pc}
 800da2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800da30:	4798      	blx	r3
 800da32:	3601      	adds	r6, #1
 800da34:	e7ee      	b.n	800da14 <__libc_init_array+0xc>
 800da36:	f855 3b04 	ldr.w	r3, [r5], #4
 800da3a:	4798      	blx	r3
 800da3c:	3601      	adds	r6, #1
 800da3e:	e7f2      	b.n	800da26 <__libc_init_array+0x1e>
 800da40:	0800db44 	.word	0x0800db44
 800da44:	0800db44 	.word	0x0800db44
 800da48:	0800db44 	.word	0x0800db44
 800da4c:	0800db48 	.word	0x0800db48

0800da50 <memcpy>:
 800da50:	440a      	add	r2, r1
 800da52:	4291      	cmp	r1, r2
 800da54:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800da58:	d100      	bne.n	800da5c <memcpy+0xc>
 800da5a:	4770      	bx	lr
 800da5c:	b510      	push	{r4, lr}
 800da5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da66:	4291      	cmp	r1, r2
 800da68:	d1f9      	bne.n	800da5e <memcpy+0xe>
 800da6a:	bd10      	pop	{r4, pc}

0800da6c <_init>:
 800da6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da6e:	bf00      	nop
 800da70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da72:	bc08      	pop	{r3}
 800da74:	469e      	mov	lr, r3
 800da76:	4770      	bx	lr

0800da78 <_fini>:
 800da78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7a:	bf00      	nop
 800da7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da7e:	bc08      	pop	{r3}
 800da80:	469e      	mov	lr, r3
 800da82:	4770      	bx	lr
