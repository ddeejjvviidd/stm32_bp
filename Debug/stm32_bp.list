
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be70  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800c02c  0800c02c  0000d02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0e4  0800c0e4  0000e10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0e4  0800c0e4  0000d0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0ec  0800c0ec  0000e10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0ec  0800c0ec  0000d0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0f0  0800c0f0  0000d0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800c0f4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c06c  2000010c  0800c200  0000e10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c178  0800c200  0000e178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ba0  00000000  00000000  0000e13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ccf  00000000  00000000  00031cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c18  00000000  00000000  000369b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015aa  00000000  00000000  000385c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff00  00000000  00000000  00039b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023640  00000000  00000000  00069a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d570  00000000  00000000  0008d0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001aa622  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000766c  00000000  00000000  001aa668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b1cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800c014 	.word	0x0800c014

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800c014 	.word	0x0800c014

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <MX_ADC1_Init+0xe0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000530:	2201      	movs	r2, #1
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800056a:	f001 fb13 	bl	8001b94 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 fd1d 	bl	8000fb2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0xe4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000596:	f001 fe8f 	bl	80022b8 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 fd07 	bl	8000fb2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_ADC1_Init+0xe8>)
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a8:	230c      	movs	r3, #12
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 80005b2:	f001 fe81 	bl	80022b8 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 fcf9 	bl	8000fb2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000128 	.word	0x20000128
 80005cc:	50040000 	.word	0x50040000
 80005d0:	c7520000 	.word	0xc7520000
 80005d4:	04300002 	.word	0x04300002

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0ae      	sub	sp, #184	@ 0xb8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2294      	movs	r2, #148	@ 0x94
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00b fcd1 	bl	800bfa0 <memset>
  if(adcHandle->Instance==ADC1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <HAL_ADC_MspInit+0x12c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d179      	bne.n	80006fc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fb7d 	bl	8005d38 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000644:	f000 fcb5 	bl	8000fb2 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2e      	ldr	r2, [pc, #184]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800067e:	230b      	movs	r3, #11
 8000680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068e:	4619      	mov	r1, r3
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0x134>)
 8000692:	f003 f811 	bl	80036b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_ADC_MspInit+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 800069e:	2205      	movs	r2, #5
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006d2:	f002 fd37 	bl	8003144 <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006dc:	f000 fc69 	bl	8000fb2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2012      	movs	r0, #18
 80006f2:	f002 fcf0 	bl	80030d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f002 fd09 	bl	800310e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	37b8      	adds	r7, #184	@ 0xb8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	20000190 	.word	0x20000190
 8000714:	40020008 	.word	0x40020008

08000718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_DMA_Init+0xac>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <MX_DMA_Init+0xac>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_DMA_Init+0xb4>)
 8000752:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800075c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000760:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800077c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800078c:	f002 fcda 	bl	8003144 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000796:	f000 fc0c 	bl	8000fb2 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200b      	movs	r0, #11
 80007a0:	f002 fc99 	bl	80030d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a4:	200b      	movs	r0, #11
 80007a6:	f002 fcb2 	bl	800310e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f002 fc91 	bl	80030d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f002 fcaa 	bl	800310e <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	4002001c 	.word	0x4002001c

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b55      	ldr	r3, [pc, #340]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a54      	ldr	r2, [pc, #336]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a4e      	ldr	r2, [pc, #312]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a48      	ldr	r2, [pc, #288]	@ (800093c <MX_GPIO_Init+0x16c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b46      	ldr	r3, [pc, #280]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x16c>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800085e:	f004 fb83 	bl	8004f68 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a35      	ldr	r2, [pc, #212]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000880:	482f      	ldr	r0, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x170>)
 8000882:	f003 f8ab 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	482e      	ldr	r0, [pc, #184]	@ (8000944 <MX_GPIO_Init+0x174>)
 800088c:	f003 f8a6 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	482c      	ldr	r0, [pc, #176]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000896:	f003 f8a1 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4825      	ldr	r0, [pc, #148]	@ (8000948 <MX_GPIO_Init+0x178>)
 80008b2:	f002 ff01 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	@ (8000940 <MX_GPIO_Init+0x170>)
 80008d0:	f002 fef2 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <MX_GPIO_Init+0x174>)
 80008e8:	f002 fee6 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_GPIO_Init+0x174>)
 8000904:	f002 fed8 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000920:	f002 feca 	bl	80036b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2028      	movs	r0, #40	@ 0x28
 800092a:	f002 fbd4 	bl	80030d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f002 fbed 	bl	800310e <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	@ 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	48001800 	.word	0x48001800
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d119      	bne.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
		static bool previous;
		if(previous == false){
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000974:	f003 f832 	bl	80039dc <HAL_GPIO_WritePin>
			previous = true;
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800097e:	e008      	b.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000988:	f003 f828 	bl	80039dc <HAL_GPIO_WritePin>
			previous = false;
 800098c:	4b03      	ldr	r3, [pc, #12]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000250 	.word	0x20000250
 80009a0:	48000400 	.word	0x48000400

080009a4 <DataTransmit2MTLB>:

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);
extern void DataReceive_MTLB_Callback(uint16_t iD, uint32_t *xData, uint16_t nData_in_values);

// Send float or uint32 or none data
int DataTransmit2MTLB(uint16_t iD, uint8_t *xData, uint16_t nData_in_values) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	80fb      	strh	r3, [r7, #6]
 80009b0:	4613      	mov	r3, r2
 80009b2:	80bb      	strh	r3, [r7, #4]
	// USB busy
	if (s2m_Status)
 80009b4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <DataTransmit2MTLB+0x88>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d002      	beq.n	80009c2 <DataTransmit2MTLB+0x1e>
		return -1;
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009c0:	e02f      	b.n	8000a22 <DataTransmit2MTLB+0x7e>

	if ((sizeof(buf_M_TX) - 4) < (nData_in_values * 4)) {
 80009c2:	88bb      	ldrh	r3, [r7, #4]
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80009ca:	d902      	bls.n	80009d2 <DataTransmit2MTLB+0x2e>
		// vystupni buffer je mensi nez odesilana data
		return -2;
 80009cc:	f06f 0301 	mvn.w	r3, #1
 80009d0:	e027      	b.n	8000a22 <DataTransmit2MTLB+0x7e>
	}

	s2m_Status = 1; // manualni nastaveni na USB busy, predpoklada se cinnost
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <DataTransmit2MTLB+0x88>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]

	// prekopirovani dat do bufferu
	((uint16_t*) buf_M_TX)[0] = iD;
 80009d8:	4a15      	ldr	r2, [pc, #84]	@ (8000a30 <DataTransmit2MTLB+0x8c>)
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	8013      	strh	r3, [r2, #0]
	((uint16_t*) buf_M_TX)[1] = nData_in_values;
 80009de:	4a15      	ldr	r2, [pc, #84]	@ (8000a34 <DataTransmit2MTLB+0x90>)
 80009e0:	88bb      	ldrh	r3, [r7, #4]
 80009e2:	8013      	strh	r3, [r2, #0]
	if (nData_in_values > 0)
 80009e4:	88bb      	ldrh	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d006      	beq.n	80009f8 <DataTransmit2MTLB+0x54>
		memcpy(buf_M_TX + 1, xData, nData_in_values * 4);
 80009ea:	4813      	ldr	r0, [pc, #76]	@ (8000a38 <DataTransmit2MTLB+0x94>)
 80009ec:	88bb      	ldrh	r3, [r7, #4]
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	461a      	mov	r2, r3
 80009f2:	6839      	ldr	r1, [r7, #0]
 80009f4:	f00b fb00 	bl	800bff8 <memcpy>

	// volani funkce na transmit dat
	s2m_Status = CDC_Transmit_FS((uint8_t*) buf_M_TX, nData_in_values * 4 + 4);
 80009f8:	88bb      	ldrh	r3, [r7, #4]
 80009fa:	3301      	adds	r3, #1
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4619      	mov	r1, r3
 8000a04:	480a      	ldr	r0, [pc, #40]	@ (8000a30 <DataTransmit2MTLB+0x8c>)
 8000a06:	f00a fd2b 	bl	800b460 <CDC_Transmit_FS>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <DataTransmit2MTLB+0x88>)
 8000a10:	601a      	str	r2, [r3, #0]

	if (s2m_Status) {
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <DataTransmit2MTLB+0x88>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d002      	beq.n	8000a20 <DataTransmit2MTLB+0x7c>
		// USB busy, vyresetuje na USB_OK
		s2m_Status = 0;
 8000a1a:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <DataTransmit2MTLB+0x88>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20008258 	.word	0x20008258
 8000a30:	20000254 	.word	0x20000254
 8000a34:	20000256 	.word	0x20000256
 8000a38:	20000258 	.word	0x20000258

08000a3c <SendInt2MTLB>:

int SendData2MTLB(uint16_t iD, uint8_t *xData, uint16_t nData_in_values) {
	return DataTransmit2MTLB(iD, xData, nData_in_values);
}

int SendInt2MTLB(uint16_t iD, int *xInt) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	80fb      	strh	r3, [r7, #6]
	return DataTransmit2MTLB(iD, (uint8_t*) xInt, 1);
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	6839      	ldr	r1, [r7, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ffa8 	bl	80009a4 <DataTransmit2MTLB>
 8000a54:	4603      	mov	r3, r0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <m2s_Process>:

void m2s_Process() {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	// funkce volana z nekonecne smycky

	if (!m2s_Status)
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <m2s_Process+0x50>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d01e      	beq.n	8000aaa <m2s_Process+0x4a>
		return; // pokud neprisla data, ukonci se

	if (m2s_Status == 1) {
 8000a6c:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <m2s_Process+0x50>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d111      	bne.n	8000a98 <m2s_Process+0x38>
		// zpracuje data
		DataReceive_MTLB_Callback(m2s_ID, m2s_buf, m2s_nData_in_bytes / 4);
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <m2s_Process+0x54>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	b298      	uxth	r0, r3
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <m2s_Process+0x58>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	da00      	bge.n	8000a84 <m2s_Process+0x24>
 8000a82:	3303      	adds	r3, #3
 8000a84:	109b      	asrs	r3, r3, #2
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	490c      	ldr	r1, [pc, #48]	@ (8000abc <m2s_Process+0x5c>)
 8000a8c:	f000 f88c 	bl	8000ba8 <DataReceive_MTLB_Callback>
		m2s_Status = 0;
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <m2s_Process+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
		return;
 8000a96:	e009      	b.n	8000aac <m2s_Process+0x4c>
	}

	if (m2s_Status == -1) {
 8000a98:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <m2s_Process+0x50>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000aa0:	d104      	bne.n	8000aac <m2s_Process+0x4c>
		// inicializace
		m2s_Status = 0;
 8000aa2:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <m2s_Process+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
		return;
 8000aa8:	e000      	b.n	8000aac <m2s_Process+0x4c>
		return; // pokud neprisla data, ukonci se
 8000aaa:	bf00      	nop
	}

}
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000825c 	.word	0x2000825c
 8000ab4:	20008260 	.word	0x20008260
 8000ab8:	20008264 	.word	0x20008264
 8000abc:	20004258 	.word	0x20004258

08000ac0 <USB_My_Receive>:

void USB_My_Receive(uint8_t *Buf, uint32_t Len) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]

	// callback na prijem dat

	if (m2s_Status == 0) {
 8000aca:	4b22      	ldr	r3, [pc, #136]	@ (8000b54 <USB_My_Receive+0x94>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10c      	bne.n	8000aec <USB_My_Receive+0x2c>
		// iD
		m2s_ID = ((uint16_t*) Buf)[0];
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <USB_My_Receive+0x98>)
 8000ada:	601a      	str	r2, [r3, #0]
		if (m2s_ID == 0)
 8000adc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b58 <USB_My_Receive+0x98>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d030      	beq.n	8000b46 <USB_My_Receive+0x86>
			return;
		m2s_Status = 100;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <USB_My_Receive+0x94>)
 8000ae6:	2264      	movs	r2, #100	@ 0x64
 8000ae8:	601a      	str	r2, [r3, #0]
		return;
 8000aea:	e02f      	b.n	8000b4c <USB_My_Receive+0x8c>
	}
	if (m2s_Status == 100) {
 8000aec:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <USB_My_Receive+0x94>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b64      	cmp	r3, #100	@ 0x64
 8000af2:	d110      	bne.n	8000b16 <USB_My_Receive+0x56>
		// nData
		m2s_nData_in_bytes = ((uint16_t*) Buf)[0] * 4;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	4a18      	ldr	r2, [pc, #96]	@ (8000b5c <USB_My_Receive+0x9c>)
 8000afc:	6013      	str	r3, [r2, #0]
		if (m2s_nData_in_bytes == 0) {
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <USB_My_Receive+0x9c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d103      	bne.n	8000b0e <USB_My_Receive+0x4e>
			m2s_Status = 1;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <USB_My_Receive+0x94>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	601a      	str	r2, [r3, #0]
			return;
 8000b0c:	e01e      	b.n	8000b4c <USB_My_Receive+0x8c>
		}
		m2s_Status = 3; //wait for xData
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <USB_My_Receive+0x94>)
 8000b10:	2203      	movs	r2, #3
 8000b12:	601a      	str	r2, [r3, #0]
		return;
 8000b14:	e01a      	b.n	8000b4c <USB_My_Receive+0x8c>
	}
	if (m2s_Status == 3) {
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <USB_My_Receive+0x94>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d115      	bne.n	8000b4a <USB_My_Receive+0x8a>
		// xData
		if (Len < m2s_nData_in_bytes)
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <USB_My_Receive+0x9c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d202      	bcs.n	8000b30 <USB_My_Receive+0x70>
			m2s_nData_in_bytes = Len;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b5c <USB_My_Receive+0x9c>)
 8000b2e:	6013      	str	r3, [r2, #0]
		memcpy(m2s_buf, Buf, m2s_nData_in_bytes);
 8000b30:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <USB_My_Receive+0x9c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <USB_My_Receive+0xa0>)
 8000b3a:	f00b fa5d 	bl	800bff8 <memcpy>
		m2s_Status = 1;
 8000b3e:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <USB_My_Receive+0x94>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	601a      	str	r2, [r3, #0]
		return;
 8000b44:	e002      	b.n	8000b4c <USB_My_Receive+0x8c>
			return;
 8000b46:	bf00      	nop
 8000b48:	e000      	b.n	8000b4c <USB_My_Receive+0x8c>
	}

	return;
 8000b4a:	bf00      	nop
}
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000825c 	.word	0x2000825c
 8000b58:	20008260 	.word	0x20008260
 8000b5c:	20008264 	.word	0x20008264
 8000b60:	20004258 	.word	0x20004258

08000b64 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b9c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d10e      	bne.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	480a      	ldr	r0, [pc, #40]	@ (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b78:	f002 ff48 	bl	8003a0c <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a08      	ldr	r2, [pc, #32]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b84:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		DataTransmit2MTLB(1010, &periodical, 1);
 8000b86:	2201      	movs	r2, #1
 8000b88:	4906      	ldr	r1, [pc, #24]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b8a:	f240 30f2 	movw	r0, #1010	@ 0x3f2
 8000b8e:	f7ff ff09 	bl	80009a4 <DataTransmit2MTLB>
	}
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000a3f4 	.word	0x2000a3f4
 8000ba0:	48000400 	.word	0x48000400
 8000ba4:	20008268 	.word	0x20008268

08000ba8 <DataReceive_MTLB_Callback>:
//    	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t*)testdata, 10);
//    }

}

void DataReceive_MTLB_Callback(uint16_t iD, uint32_t *xData, uint16_t nData_in_values) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	80fb      	strh	r3, [r7, #6]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	80bb      	strh	r3, [r7, #4]
	// funkce volana po prijmu dat

	switch (iD) {
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	2b14      	cmp	r3, #20
 8000bbc:	d106      	bne.n	8000bcc <DataReceive_MTLB_Callback+0x24>
	case 20:
		//data odesilam zpet do matlabu
		DataTransmit2MTLB(20, xData, nData_in_values);
 8000bbe:	88bb      	ldrh	r3, [r7, #4]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	6839      	ldr	r1, [r7, #0]
 8000bc4:	2014      	movs	r0, #20
 8000bc6:	f7ff feed 	bl	80009a4 <DataTransmit2MTLB>
		break;
 8000bca:	e000      	b.n	8000bce <DataReceive_MTLB_Callback+0x26>

	default:
		break;
 8000bcc:	bf00      	nop
	}
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <myDmaFunction>:

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <myDmaFunction+0x28>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be6:	4a07      	ldr	r2, [pc, #28]	@ (8000c04 <myDmaFunction+0x2c>)
 8000be8:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <myDmaFunction+0x28>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf0:	4a05      	ldr	r2, [pc, #20]	@ (8000c08 <myDmaFunction+0x30>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	2000a3a8 	.word	0x2000a3a8
 8000c04:	20008274 	.word	0x20008274
 8000c08:	20008278 	.word	0x20008278

08000c0c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 8000c14:	4b50      	ldr	r3, [pc, #320]	@ (8000d58 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000c16:	f04f 0200 	mov.w	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
    adcIn1 = 0.0f;
 8000c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8000d5c <HAL_ADC_ConvCpltCallback+0x150>)
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 100; i++) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	e027      	b.n	8000c7a <HAL_ADC_ConvCpltCallback+0x6e>
        adcValue += dma_data_buffer[i + 100]; // Použití druhé poloviny DMA bufferu
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3364      	adds	r3, #100	@ 0x64
 8000c2e:	4a4c      	ldr	r2, [pc, #304]	@ (8000d60 <HAL_ADC_ConvCpltCallback+0x154>)
 8000c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c34:	ee07 3a90 	vmov	s15, r3
 8000c38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c3c:	4b46      	ldr	r3, [pc, #280]	@ (8000d58 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000c3e:	edd3 7a00 	vldr	s15, [r3]
 8000c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c46:	4b44      	ldr	r3, [pc, #272]	@ (8000d58 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000c48:	edc3 7a00 	vstr	s15, [r3]
        i++;
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	61fb      	str	r3, [r7, #28]
        adcIn1 += dma_data_buffer[i + 100];
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3364      	adds	r3, #100	@ 0x64
 8000c56:	4a42      	ldr	r2, [pc, #264]	@ (8000d60 <HAL_ADC_ConvCpltCallback+0x154>)
 8000c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c5c:	ee07 3a90 	vmov	s15, r3
 8000c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c64:	4b3d      	ldr	r3, [pc, #244]	@ (8000d5c <HAL_ADC_ConvCpltCallback+0x150>)
 8000c66:	edd3 7a00 	vldr	s15, [r3]
 8000c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d5c <HAL_ADC_ConvCpltCallback+0x150>)
 8000c70:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 100; i++) {
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	3301      	adds	r3, #1
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	2b63      	cmp	r3, #99	@ 0x63
 8000c7e:	ddd4      	ble.n	8000c2a <HAL_ADC_ConvCpltCallback+0x1e>
    }
    adcValue /= 100.0f;
 8000c80:	4b35      	ldr	r3, [pc, #212]	@ (8000d58 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000c82:	ed93 7a00 	vldr	s14, [r3]
 8000c86:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8000d64 <HAL_ADC_ConvCpltCallback+0x158>
 8000c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c8e:	4b32      	ldr	r3, [pc, #200]	@ (8000d58 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000c90:	edc3 7a00 	vstr	s15, [r3]
    adcIn1 /= 100.0f;
 8000c94:	4b31      	ldr	r3, [pc, #196]	@ (8000d5c <HAL_ADC_ConvCpltCallback+0x150>)
 8000c96:	ed93 7a00 	vldr	s14, [r3]
 8000c9a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8000d64 <HAL_ADC_ConvCpltCallback+0x158>
 8000c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d5c <HAL_ADC_ConvCpltCallback+0x150>)
 8000ca4:	edc3 7a00 	vstr	s15, [r3]

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d58 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000caa:	ed93 7a00 	vldr	s14, [r3]
 8000cae:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8000d68 <HAL_ADC_ConvCpltCallback+0x15c>
 8000cb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cb6:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000d6c <HAL_ADC_ConvCpltCallback+0x160>
 8000cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cbe:	edc7 7a06 	vstr	s15, [r7, #24]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d70 <HAL_ADC_ConvCpltCallback+0x164>)
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	ee07 3a90 	vmov	s15, r3
 8000cca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8000d68 <HAL_ADC_ConvCpltCallback+0x15c>
 8000cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cd6:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000d6c <HAL_ADC_ConvCpltCallback+0x160>
 8000cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cde:	edc7 7a05 	vstr	s15, [r7, #20]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 8000ce2:	4b24      	ldr	r3, [pc, #144]	@ (8000d74 <HAL_ADC_ConvCpltCallback+0x168>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	ee07 3a90 	vmov	s15, r3
 8000cea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cee:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000d68 <HAL_ADC_ConvCpltCallback+0x15c>
 8000cf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cf6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000d6c <HAL_ADC_ConvCpltCallback+0x160>
 8000cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cfe:	edc7 7a04 	vstr	s15, [r7, #16]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 8000d02:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d06:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d0e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000d78 <HAL_ADC_ConvCpltCallback+0x16c>
 8000d12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d16:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000d1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d1e:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <HAL_ADC_ConvCpltCallback+0x170>)
 8000d20:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;

    // Odeslání teploty jako integer
    int temperatureInt = (int)temperature;
 8000d24:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <HAL_ADC_ConvCpltCallback+0x170>)
 8000d26:	edd3 7a00 	vldr	s15, [r3]
 8000d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d2e:	ee17 3a90 	vmov	r3, s15
 8000d32:	60bb      	str	r3, [r7, #8]
    SendInt2MTLB(23, &temperatureInt);
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	4619      	mov	r1, r3
 8000d3a:	2017      	movs	r0, #23
 8000d3c:	f7ff fe7e 	bl	8000a3c <SendInt2MTLB>

    int adcIn1Int = (int)adcIn1;
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_ADC_ConvCpltCallback+0x150>)
 8000d42:	edd3 7a00 	vldr	s15, [r3]
 8000d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4a:	ee17 3a90 	vmov	r3, s15
 8000d4e:	60fb      	str	r3, [r7, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000a34c 	.word	0x2000a34c
 8000d5c:	2000a358 	.word	0x2000a358
 8000d60:	2000a1bc 	.word	0x2000a1bc
 8000d64:	42c80000 	.word	0x42c80000
 8000d68:	45800000 	.word	0x45800000
 8000d6c:	40533333 	.word	0x40533333
 8000d70:	1fff75a8 	.word	0x1fff75a8
 8000d74:	1fff75ca 	.word	0x1fff75ca
 8000d78:	42a00000 	.word	0x42a00000
 8000d7c:	2000a354 	.word	0x2000a354

08000d80 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);

	adcValue = 0;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 100; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e012      	b.n	8000dbc <HAL_ADC_ConvHalfCpltCallback+0x3c>
		adcValue = adcValue + dma_data_buffer[i];
 8000d96:	4a18      	ldr	r2, [pc, #96]	@ (8000df8 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000da8:	edd3 7a00 	vldr	s15, [r3]
 8000dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000db0:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000db2:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 100; i++) {
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b63      	cmp	r3, #99	@ 0x63
 8000dc0:	dde9      	ble.n	8000d96 <HAL_ADC_ConvHalfCpltCallback+0x16>
	}
	adcValue = adcValue / 100;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000dc4:	ed93 7a00 	vldr	s14, [r3]
 8000dc8:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000dfc <HAL_ADC_ConvHalfCpltCallback+0x7c>
 8000dcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000dd2:	edc3 7a00 	vstr	s15, [r3]
	adcValueInt = (int) adcValue;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000de0:	ee17 2a90 	vmov	r2, s15
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8000de6:	601a      	str	r2, [r3, #0]

	//SendInt2MTLB(23, &adcValueInt);
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	2000a34c 	.word	0x2000a34c
 8000df8:	2000a1bc 	.word	0x2000a1bc
 8000dfc:	42c80000 	.word	0x42c80000
 8000e00:	2000a350 	.word	0x2000a350

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0a:	f000 fc16 	bl	800163a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0e:	f000 f87d 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e12:	f7ff fcdd 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e16:	f7ff fc7f 	bl	8000718 <MX_DMA_Init>
  MX_TIM6_Init();
 8000e1a:	f000 fa17 	bl	800124c <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000e1e:	f00a fa5b 	bl	800b2d8 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8000e22:	f000 f9c5 	bl	80011b0 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000e26:	f7ff fb61 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e2a:	f000 f973 	bl	8001114 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000e2e:	f000 fae9 	bl	8001404 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8000e32:	f000 fa99 	bl	8001368 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */



	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	4827      	ldr	r0, [pc, #156]	@ (8000ed8 <main+0xd4>)
 8000e3c:	f002 fdce 	bl	80039dc <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 8000e40:	4826      	ldr	r0, [pc, #152]	@ (8000edc <main+0xd8>)
 8000e42:	f005 fd51 	bl	80068e8 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 8000e46:	4826      	ldr	r0, [pc, #152]	@ (8000ee0 <main+0xdc>)
 8000e48:	f005 fce6 	bl	8006818 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	e00d      	b.n	8000e6e <main+0x6a>
		dma[i] = i;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	ee07 3a90 	vmov	s15, r3
 8000e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e5c:	4a21      	ldr	r2, [pc, #132]	@ (8000ee4 <main+0xe0>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e74:	dbed      	blt.n	8000e52 <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 8000e76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee8 <main+0xe4>)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	481c      	ldr	r0, [pc, #112]	@ (8000eec <main+0xe8>)
 8000e7c:	f002 fb34 	bl	80034e8 <HAL_DMA_RegisterCallback>
 8000e80:	4603      	mov	r3, r0
 8000e82:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 8000e84:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <main+0xdc>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8a:	4a19      	ldr	r2, [pc, #100]	@ (8000ef0 <main+0xec>)
 8000e8c:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 8000e8e:	4915      	ldr	r1, [pc, #84]	@ (8000ee4 <main+0xe0>)
 8000e90:	4a18      	ldr	r2, [pc, #96]	@ (8000ef4 <main+0xf0>)
 8000e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e96:	4815      	ldr	r0, [pc, #84]	@ (8000eec <main+0xe8>)
 8000e98:	f002 f9fc 	bl	8003294 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <main+0xdc>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea2:	4a15      	ldr	r2, [pc, #84]	@ (8000ef8 <main+0xf4>)
 8000ea4:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <main+0xdc>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eac:	4a13      	ldr	r2, [pc, #76]	@ (8000efc <main+0xf8>)
 8000eae:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start_IT(&htim3);
 8000eb0:	4813      	ldr	r0, [pc, #76]	@ (8000f00 <main+0xfc>)
 8000eb2:	f005 fd19 	bl	80068e8 <HAL_TIM_Base_Start_IT>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000eb6:	217f      	movs	r1, #127	@ 0x7f
 8000eb8:	4812      	ldr	r0, [pc, #72]	@ (8000f04 <main+0x100>)
 8000eba:	f001 ff9f 	bl	8002dfc <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 8000ebe:	2032      	movs	r0, #50	@ 0x32
 8000ec0:	f000 fc30 	bl	8001724 <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 200);
 8000ec4:	22c8      	movs	r2, #200	@ 0xc8
 8000ec6:	4910      	ldr	r1, [pc, #64]	@ (8000f08 <main+0x104>)
 8000ec8:	480e      	ldr	r0, [pc, #56]	@ (8000f04 <main+0x100>)
 8000eca:	f000 ffa9 	bl	8001e20 <HAL_ADC_Start_DMA>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	70bb      	strb	r3, [r7, #2]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//load_CPU();
		m2s_Process();
 8000ed2:	f7ff fdc5 	bl	8000a60 <m2s_Process>
 8000ed6:	e7fc      	b.n	8000ed2 <main+0xce>
 8000ed8:	48000800 	.word	0x48000800
 8000edc:	2000a3f4 	.word	0x2000a3f4
 8000ee0:	2000a3a8 	.word	0x2000a3a8
 8000ee4:	2000827c 	.word	0x2000827c
 8000ee8:	08000bd9 	.word	0x08000bd9
 8000eec:	200001f0 	.word	0x200001f0
 8000ef0:	2000826c 	.word	0x2000826c
 8000ef4:	2000921c 	.word	0x2000921c
 8000ef8:	20008278 	.word	0x20008278
 8000efc:	20008270 	.word	0x20008270
 8000f00:	2000a35c 	.word	0x2000a35c
 8000f04:	20000128 	.word	0x20000128
 8000f08:	2000a1bc 	.word	0x2000a1bc

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b096      	sub	sp, #88	@ 0x58
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	2244      	movs	r2, #68	@ 0x44
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f00b f840 	bl	800bfa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	463b      	mov	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f003 ff66 	bl	8004e00 <HAL_PWREx_ControlVoltageScaling>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000f3a:	f000 f83a 	bl	8000fb2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000f3e:	2322      	movs	r3, #34	@ 0x22
 8000f40:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4c:	2340      	movs	r3, #64	@ 0x40
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f50:	2302      	movs	r3, #2
 8000f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f54:	2302      	movs	r3, #2
 8000f56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000f5c:	231e      	movs	r3, #30
 8000f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4618      	mov	r0, r3
 8000f72:	f004 f809 	bl	8004f88 <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f7c:	f000 f819 	bl	8000fb2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2303      	movs	r3, #3
 8000f86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	2105      	movs	r1, #5
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f004 fc0e 	bl	80057bc <HAL_RCC_ClockConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fa6:	f000 f804 	bl	8000fb2 <Error_Handler>
  }
}
 8000faa:	bf00      	nop
 8000fac:	3758      	adds	r7, #88	@ 0x58
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb6:	b672      	cpsid	i
}
 8000fb8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fba:	bf00      	nop
 8000fbc:	e7fd      	b.n	8000fba <Error_Handler+0x8>
	...

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <HAL_MspInit+0x44>)
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fca:	4a0e      	ldr	r2, [pc, #56]	@ (8001004 <HAL_MspInit+0x44>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <HAL_MspInit+0x44>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <HAL_MspInit+0x44>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe2:	4a08      	ldr	r2, [pc, #32]	@ (8001004 <HAL_MspInit+0x44>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_MspInit+0x44>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <MemManage_Handler+0x4>

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <UsageFault_Handler+0x4>

08001030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105e:	f000 fb41 	bl	80016e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <DMA1_Channel1_IRQHandler+0x10>)
 800106e:	f002 f98c 	bl	800338a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000190 	.word	0x20000190

0800107c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <DMA1_Channel2_IRQHandler+0x10>)
 8001082:	f002 f982 	bl	800338a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001f0 	.word	0x200001f0

08001090 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <ADC1_IRQHandler+0x10>)
 8001096:	f000 ff47 	bl	8001f28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000128 	.word	0x20000128

080010a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010a8:	4802      	ldr	r0, [pc, #8]	@ (80010b4 <TIM3_IRQHandler+0x10>)
 80010aa:	f005 fc8d 	bl	80069c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000a35c 	.word	0x2000a35c

080010b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010c0:	f002 fcbe 	bl	8003a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010cc:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <TIM6_DAC_IRQHandler+0x10>)
 80010ce:	f005 fc7b 	bl	80069c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000a3f4 	.word	0x2000a3f4

080010dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <OTG_FS_IRQHandler+0x10>)
 80010e2:	f002 fe18 	bl	8003d16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000ba4c 	.word	0x2000ba4c

080010f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <SystemInit+0x20>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010fa:	4a05      	ldr	r2, [pc, #20]	@ (8001110 <SystemInit+0x20>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001132:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <MX_TIM3_Init+0x94>)
 8001134:	4a1d      	ldr	r2, [pc, #116]	@ (80011ac <MX_TIM3_Init+0x98>)
 8001136:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8001138:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <MX_TIM3_Init+0x94>)
 800113a:	2217      	movs	r2, #23
 800113c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_TIM3_Init+0x94>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001144:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <MX_TIM3_Init+0x94>)
 8001146:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800114a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114c:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <MX_TIM3_Init+0x94>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <MX_TIM3_Init+0x94>)
 8001154:	2280      	movs	r2, #128	@ 0x80
 8001156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001158:	4813      	ldr	r0, [pc, #76]	@ (80011a8 <MX_TIM3_Init+0x94>)
 800115a:	f005 fb05 	bl	8006768 <HAL_TIM_Base_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001164:	f7ff ff25 	bl	8000fb2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001168:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4619      	mov	r1, r3
 8001174:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <MX_TIM3_Init+0x94>)
 8001176:	f005 fd29 	bl	8006bcc <HAL_TIM_ConfigClockSource>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001180:	f7ff ff17 	bl	8000fb2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001184:	2320      	movs	r3, #32
 8001186:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_TIM3_Init+0x94>)
 8001192:	f005 ff41 	bl	8007018 <HAL_TIMEx_MasterConfigSynchronization>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800119c:	f7ff ff09 	bl	8000fb2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000a35c 	.word	0x2000a35c
 80011ac:	40000400 	.word	0x40000400

080011b0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <MX_TIM5_Init+0x94>)
 80011d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001248 <MX_TIM5_Init+0x98>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <MX_TIM5_Init+0x94>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_TIM5_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_TIM5_Init+0x94>)
 80011e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <MX_TIM5_Init+0x94>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_TIM5_Init+0x94>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011f4:	4813      	ldr	r0, [pc, #76]	@ (8001244 <MX_TIM5_Init+0x94>)
 80011f6:	f005 fab7 	bl	8006768 <HAL_TIM_Base_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001200:	f7ff fed7 	bl	8000fb2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001204:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001208:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4619      	mov	r1, r3
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <MX_TIM5_Init+0x94>)
 8001212:	f005 fcdb 	bl	8006bcc <HAL_TIM_ConfigClockSource>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800121c:	f7ff fec9 	bl	8000fb2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_TIM5_Init+0x94>)
 800122e:	f005 fef3 	bl	8007018 <HAL_TIMEx_MasterConfigSynchronization>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001238:	f7ff febb 	bl	8000fb2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000a3a8 	.word	0x2000a3a8
 8001248:	40000c00 	.word	0x40000c00

0800124c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <MX_TIM6_Init+0x68>)
 800125e:	4a16      	ldr	r2, [pc, #88]	@ (80012b8 <MX_TIM6_Init+0x6c>)
 8001260:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <MX_TIM6_Init+0x68>)
 8001264:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001268:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <MX_TIM6_Init+0x68>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 8001270:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <MX_TIM6_Init+0x68>)
 8001272:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001276:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <MX_TIM6_Init+0x68>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800127e:	480d      	ldr	r0, [pc, #52]	@ (80012b4 <MX_TIM6_Init+0x68>)
 8001280:	f005 fa72 	bl	8006768 <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800128a:	f7ff fe92 	bl	8000fb2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4806      	ldr	r0, [pc, #24]	@ (80012b4 <MX_TIM6_Init+0x68>)
 800129c:	f005 febc 	bl	8007018 <HAL_TIMEx_MasterConfigSynchronization>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80012a6:	f7ff fe84 	bl	8000fb2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000a3f4 	.word	0x2000a3f4
 80012b8:	40001000 	.word	0x40001000

080012bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a23      	ldr	r2, [pc, #140]	@ (8001358 <HAL_TIM_Base_MspInit+0x9c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d114      	bne.n	80012f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ce:	4b23      	ldr	r3, [pc, #140]	@ (800135c <HAL_TIM_Base_MspInit+0xa0>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d2:	4a22      	ldr	r2, [pc, #136]	@ (800135c <HAL_TIM_Base_MspInit+0xa0>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012da:	4b20      	ldr	r3, [pc, #128]	@ (800135c <HAL_TIM_Base_MspInit+0xa0>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	201d      	movs	r0, #29
 80012ec:	f001 fef3 	bl	80030d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012f0:	201d      	movs	r0, #29
 80012f2:	f001 ff0c 	bl	800310e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80012f6:	e02a      	b.n	800134e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a18      	ldr	r2, [pc, #96]	@ (8001360 <HAL_TIM_Base_MspInit+0xa4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d10c      	bne.n	800131c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001302:	4b16      	ldr	r3, [pc, #88]	@ (800135c <HAL_TIM_Base_MspInit+0xa0>)
 8001304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001306:	4a15      	ldr	r2, [pc, #84]	@ (800135c <HAL_TIM_Base_MspInit+0xa0>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	6593      	str	r3, [r2, #88]	@ 0x58
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <HAL_TIM_Base_MspInit+0xa0>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
}
 800131a:	e018      	b.n	800134e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a10      	ldr	r2, [pc, #64]	@ (8001364 <HAL_TIM_Base_MspInit+0xa8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d113      	bne.n	800134e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001326:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <HAL_TIM_Base_MspInit+0xa0>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <HAL_TIM_Base_MspInit+0xa0>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	6593      	str	r3, [r2, #88]	@ 0x58
 8001332:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <HAL_TIM_Base_MspInit+0xa0>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	2036      	movs	r0, #54	@ 0x36
 8001344:	f001 fec7 	bl	80030d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001348:	2036      	movs	r0, #54	@ 0x36
 800134a:	f001 fee0 	bl	800310e <HAL_NVIC_EnableIRQ>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40000400 	.word	0x40000400
 800135c:	40021000 	.word	0x40021000
 8001360:	40000c00 	.word	0x40000c00
 8001364:	40001000 	.word	0x40001000

08001368 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800136c:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 800136e:	4a23      	ldr	r2, [pc, #140]	@ (80013fc <MX_LPUART1_UART_Init+0x94>)
 8001370:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 8001374:	4a22      	ldr	r2, [pc, #136]	@ (8001400 <MX_LPUART1_UART_Init+0x98>)
 8001376:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001378:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 800137a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800137e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001398:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80013b0:	4811      	ldr	r0, [pc, #68]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 80013b2:	f005 fed7 	bl	8007164 <HAL_UART_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80013bc:	f7ff fdf9 	bl	8000fb2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 80013c4:	f006 fc6c 	bl	8007ca0 <HAL_UARTEx_SetTxFifoThreshold>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013ce:	f7ff fdf0 	bl	8000fb2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d2:	2100      	movs	r1, #0
 80013d4:	4808      	ldr	r0, [pc, #32]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 80013d6:	f006 fca1 	bl	8007d1c <HAL_UARTEx_SetRxFifoThreshold>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013e0:	f7ff fde7 	bl	8000fb2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80013e4:	4804      	ldr	r0, [pc, #16]	@ (80013f8 <MX_LPUART1_UART_Init+0x90>)
 80013e6:	f006 fc22 	bl	8007c2e <HAL_UARTEx_DisableFifoMode>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013f0:	f7ff fddf 	bl	8000fb2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000a440 	.word	0x2000a440
 80013fc:	40008000 	.word	0x40008000
 8001400:	00033324 	.word	0x00033324

08001404 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001408:	4b22      	ldr	r3, [pc, #136]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 800140a:	4a23      	ldr	r2, [pc, #140]	@ (8001498 <MX_USART3_UART_Init+0x94>)
 800140c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001410:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001414:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001422:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800143a:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001440:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001446:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800144c:	4811      	ldr	r0, [pc, #68]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 800144e:	f005 fe89 	bl	8007164 <HAL_UART_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001458:	f7ff fdab 	bl	8000fb2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	480d      	ldr	r0, [pc, #52]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001460:	f006 fc1e 	bl	8007ca0 <HAL_UARTEx_SetTxFifoThreshold>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800146a:	f7ff fda2 	bl	8000fb2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800146e:	2100      	movs	r1, #0
 8001470:	4808      	ldr	r0, [pc, #32]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001472:	f006 fc53 	bl	8007d1c <HAL_UARTEx_SetRxFifoThreshold>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800147c:	f7ff fd99 	bl	8000fb2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001482:	f006 fbd4 	bl	8007c2e <HAL_UARTEx_DisableFifoMode>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800148c:	f7ff fd91 	bl	8000fb2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2000a4d4 	.word	0x2000a4d4
 8001498:	40004800 	.word	0x40004800

0800149c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0b0      	sub	sp, #192	@ 0xc0
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	2294      	movs	r2, #148	@ 0x94
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f00a fd6f 	bl	800bfa0 <memset>
  if(uartHandle->Instance==LPUART1)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a43      	ldr	r2, [pc, #268]	@ (80015d4 <HAL_UART_MspInit+0x138>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d13e      	bne.n	800154a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80014cc:	2320      	movs	r3, #32
 80014ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	4618      	mov	r0, r3
 80014da:	f004 fc2d 	bl	8005d38 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e4:	f7ff fd65 	bl	8000fb2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80014e8:	4b3b      	ldr	r3, [pc, #236]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 80014ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ec:	4a3a      	ldr	r2, [pc, #232]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80014f4:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 80014f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001500:	4b35      	ldr	r3, [pc, #212]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001504:	4a34      	ldr	r2, [pc, #208]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 8001506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800150a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150c:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001518:	f003 fd26 	bl	8004f68 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800151c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001520:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001536:	2308      	movs	r3, #8
 8001538:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800153c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001540:	4619      	mov	r1, r3
 8001542:	4826      	ldr	r0, [pc, #152]	@ (80015dc <HAL_UART_MspInit+0x140>)
 8001544:	f002 f8b8 	bl	80036b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001548:	e040      	b.n	80015cc <HAL_UART_MspInit+0x130>
  else if(uartHandle->Instance==USART3)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a24      	ldr	r2, [pc, #144]	@ (80015e0 <HAL_UART_MspInit+0x144>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d13b      	bne.n	80015cc <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001554:	2304      	movs	r3, #4
 8001556:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001558:	2300      	movs	r3, #0
 800155a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155c:	f107 0318 	add.w	r3, r7, #24
 8001560:	4618      	mov	r0, r3
 8001562:	f004 fbe9 	bl	8005d38 <HAL_RCCEx_PeriphCLKConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800156c:	f7ff fd21 	bl	8000fb2 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001570:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001574:	4a18      	ldr	r2, [pc, #96]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 8001576:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800157a:	6593      	str	r3, [r2, #88]	@ 0x58
 800157c:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001580:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158c:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 800158e:	f043 0308 	orr.w	r3, r3, #8
 8001592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001594:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015ba:	2307      	movs	r3, #7
 80015bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015c4:	4619      	mov	r1, r3
 80015c6:	4807      	ldr	r0, [pc, #28]	@ (80015e4 <HAL_UART_MspInit+0x148>)
 80015c8:	f002 f876 	bl	80036b8 <HAL_GPIO_Init>
}
 80015cc:	bf00      	nop
 80015ce:	37c0      	adds	r7, #192	@ 0xc0
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40008000 	.word	0x40008000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	48001800 	.word	0x48001800
 80015e0:	40004800 	.word	0x40004800
 80015e4:	48000c00 	.word	0x48000c00

080015e8 <Reset_Handler>:
 80015e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001620 <LoopForever+0x2>
 80015ec:	f7ff fd80 	bl	80010f0 <SystemInit>
 80015f0:	480c      	ldr	r0, [pc, #48]	@ (8001624 <LoopForever+0x6>)
 80015f2:	490d      	ldr	r1, [pc, #52]	@ (8001628 <LoopForever+0xa>)
 80015f4:	4a0d      	ldr	r2, [pc, #52]	@ (800162c <LoopForever+0xe>)
 80015f6:	2300      	movs	r3, #0
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:
 80015fa:	58d4      	ldr	r4, [r2, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:
 8001600:	18c4      	adds	r4, r0, r3
 8001602:	428c      	cmp	r4, r1
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <LoopForever+0x12>)
 8001608:	4c0a      	ldr	r4, [pc, #40]	@ (8001634 <LoopForever+0x16>)
 800160a:	2300      	movs	r3, #0
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:
 8001612:	42a2      	cmp	r2, r4
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>
 8001616:	f00a fccb 	bl	800bfb0 <__libc_init_array>
 800161a:	f7ff fbf3 	bl	8000e04 <main>

0800161e <LoopForever>:
 800161e:	e7fe      	b.n	800161e <LoopForever>
 8001620:	200a0000 	.word	0x200a0000
 8001624:	20000000 	.word	0x20000000
 8001628:	2000010c 	.word	0x2000010c
 800162c:	0800c0f4 	.word	0x0800c0f4
 8001630:	2000010c 	.word	0x2000010c
 8001634:	2000c178 	.word	0x2000c178

08001638 <CAN1_RX0_IRQHandler>:
 8001638:	e7fe      	b.n	8001638 <CAN1_RX0_IRQHandler>

0800163a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f001 fd3b 	bl	80030c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f80e 	bl	800166c <HAL_InitTick>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	71fb      	strb	r3, [r7, #7]
 800165a:	e001      	b.n	8001660 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800165c:	f7ff fcb0 	bl	8000fc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001660:	79fb      	ldrb	r3, [r7, #7]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001678:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <HAL_InitTick+0x6c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d023      	beq.n	80016c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001680:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <HAL_InitTick+0x70>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <HAL_InitTick+0x6c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f001 fd47 	bl	800312a <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d809      	bhi.n	80016bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016b0:	f001 fd11 	bl	80030d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016b4:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <HAL_InitTick+0x74>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e007      	b.n	80016cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	e004      	b.n	80016cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	e001      	b.n	80016cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000004 	.word	0x20000004

080016e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_IncTick+0x20>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_IncTick+0x24>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <HAL_IncTick+0x24>)
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000008 	.word	0x20000008
 8001708:	2000a568 	.word	0x2000a568

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b03      	ldr	r3, [pc, #12]	@ (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	2000a568 	.word	0x2000a568

08001724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff ffee 	bl	800170c <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800173e:	4b0a      	ldr	r3, [pc, #40]	@ (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffde 	bl	800170c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008

0800176c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	609a      	str	r2, [r3, #8]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	609a      	str	r2, [r3, #8]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3360      	adds	r3, #96	@ 0x60
 80017e6:	461a      	mov	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <LL_ADC_SetOffset+0x44>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	4313      	orrs	r3, r2
 8001804:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800180c:	bf00      	nop
 800180e:	371c      	adds	r7, #28
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	03fff000 	.word	0x03fff000

0800181c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3360      	adds	r3, #96	@ 0x60
 800182a:	461a      	mov	r2, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3360      	adds	r3, #96	@ 0x60
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	431a      	orrs	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001872:	bf00      	nop
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	615a      	str	r2, [r3, #20]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3330      	adds	r3, #48	@ 0x30
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	4413      	add	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	211f      	movs	r1, #31
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	401a      	ands	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	0e9b      	lsrs	r3, r3, #26
 8001902:	f003 011f 	and.w	r1, r3, #31
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	431a      	orrs	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001916:	bf00      	nop
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3314      	adds	r3, #20
 8001958:	461a      	mov	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	0e5b      	lsrs	r3, r3, #25
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	0d1b      	lsrs	r3, r3, #20
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	2107      	movs	r1, #7
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	401a      	ands	r2, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	0d1b      	lsrs	r3, r3, #20
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	431a      	orrs	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001992:	bf00      	nop
 8001994:	371c      	adds	r7, #28
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b8:	43db      	mvns	r3, r3
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0318 	and.w	r3, r3, #24
 80019c2:	4908      	ldr	r1, [pc, #32]	@ (80019e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019c4:	40d9      	lsrs	r1, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	400b      	ands	r3, r1
 80019ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ce:	431a      	orrs	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	0007ffff 	.word	0x0007ffff

080019e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80019f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6093      	str	r3, [r2, #8]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a20:	d101      	bne.n	8001a26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001a44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a70:	d101      	bne.n	8001a76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001abc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ac0:	f043 0202 	orr.w	r2, r3, #2
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <LL_ADC_IsEnabled+0x18>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <LL_ADC_IsEnabled+0x1a>
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_IsDisableOngoing+0x18>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_IsDisableOngoing+0x1a>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b34:	f043 0204 	orr.w	r2, r3, #4
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d101      	bne.n	8001b60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d101      	bne.n	8001b86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e129      	b.n	8001e02 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7fe fd0b 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff19 	bl	8001a0c <LL_ADC_IsDeepPowerDownEnabled>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d004      	beq.n	8001bea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff feff 	bl	80019e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ff34 	bl	8001a5c <LL_ADC_IsInternalRegulatorEnabled>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d115      	bne.n	8001c26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff18 	bl	8001a34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c04:	4b81      	ldr	r3, [pc, #516]	@ (8001e0c <HAL_ADC_Init+0x278>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	099b      	lsrs	r3, r3, #6
 8001c0a:	4a81      	ldr	r2, [pc, #516]	@ (8001e10 <HAL_ADC_Init+0x27c>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	099b      	lsrs	r3, r3, #6
 8001c12:	3301      	adds	r3, #1
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c18:	e002      	b.n	8001c20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f9      	bne.n	8001c1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff16 	bl	8001a5c <LL_ADC_IsInternalRegulatorEnabled>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10d      	bne.n	8001c52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3a:	f043 0210 	orr.w	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff76 	bl	8001b48 <LL_ADC_REG_IsConversionOngoing>
 8001c5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f040 80c2 	bne.w	8001df0 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 80be 	bne.w	8001df0 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c7c:	f043 0202 	orr.w	r2, r3, #2
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff23 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10b      	bne.n	8001cac <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c94:	485f      	ldr	r0, [pc, #380]	@ (8001e14 <HAL_ADC_Init+0x280>)
 8001c96:	f7ff ff1d 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	485c      	ldr	r0, [pc, #368]	@ (8001e18 <HAL_ADC_Init+0x284>)
 8001ca8:	f7ff fd60 	bl	800176c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7e5b      	ldrb	r3, [r3, #25]
 8001cb0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cb6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001cbc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001cc2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d106      	bne.n	8001ce8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	045b      	lsls	r3, r3, #17
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	4b44      	ldr	r3, [pc, #272]	@ (8001e1c <HAL_ADC_Init+0x288>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	69b9      	ldr	r1, [r7, #24]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff26 	bl	8001b6e <LL_ADC_INJ_IsConversionOngoing>
 8001d22:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d140      	bne.n	8001dac <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d13d      	bne.n	8001dac <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7e1b      	ldrb	r3, [r3, #24]
 8001d38:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d3a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d42:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d52:	f023 0306 	bic.w	r3, r3, #6
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d118      	bne.n	8001d9c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001d74:	f023 0304 	bic.w	r3, r3, #4
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d80:	4311      	orrs	r1, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d86:	4311      	orrs	r1, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	611a      	str	r2, [r3, #16]
 8001d9a:	e007      	b.n	8001dac <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d10c      	bne.n	8001dce <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f023 010f 	bic.w	r1, r3, #15
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	1e5a      	subs	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dcc:	e007      	b.n	8001dde <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 020f 	bic.w	r2, r2, #15
 8001ddc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	f023 0303 	bic.w	r3, r3, #3
 8001de6:	f043 0201 	orr.w	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	659a      	str	r2, [r3, #88]	@ 0x58
 8001dee:	e007      	b.n	8001e00 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df4:	f043 0210 	orr.w	r2, r3, #16
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e00:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3720      	adds	r7, #32
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	053e2d63 	.word	0x053e2d63
 8001e14:	50040000 	.word	0x50040000
 8001e18:	50040300 	.word	0x50040300
 8001e1c:	fff0c007 	.word	0xfff0c007

08001e20 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fe89 	bl	8001b48 <LL_ADC_REG_IsConversionOngoing>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d167      	bne.n	8001f0c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_ADC_Start_DMA+0x2a>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e063      	b.n	8001f12 <HAL_ADC_Start_DMA+0xf2>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 fe2c 	bl	8002ab0 <ADC_Enable>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d14f      	bne.n	8001f02 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e66:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e86:	f023 0206 	bic.w	r2, r3, #6
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e8e:	e002      	b.n	8001e96 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e9a:	4a20      	ldr	r2, [pc, #128]	@ (8001f1c <HAL_ADC_Start_DMA+0xfc>)
 8001e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f20 <HAL_ADC_Start_DMA+0x100>)
 8001ea4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8001f24 <HAL_ADC_Start_DMA+0x104>)
 8001eac:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	221c      	movs	r2, #28
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 0210 	orr.w	r2, r2, #16
 8001ecc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3340      	adds	r3, #64	@ 0x40
 8001ee8:	4619      	mov	r1, r3
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f001 f9d1 	bl	8003294 <HAL_DMA_Start_IT>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fe10 	bl	8001b20 <LL_ADC_REG_StartConversion>
 8001f00:	e006      	b.n	8001f10 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001f0a:	e001      	b.n	8001f10 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	08002c7b 	.word	0x08002c7b
 8001f20:	08002d53 	.word	0x08002d53
 8001f24:	08002d6f 	.word	0x08002d6f

08001f28 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d017      	beq.n	8001f7e <HAL_ADC_IRQHandler+0x56>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d012      	beq.n	8001f7e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 ffcb 	bl	8002f0c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d004      	beq.n	8001f92 <HAL_ADC_IRQHandler+0x6a>
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d05e      	beq.n	800205a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d059      	beq.n	800205a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d105      	bne.n	8001fbe <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fc6e 	bl	80018a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d03e      	beq.n	800204c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d135      	bne.n	800204c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d12e      	bne.n	800204c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fda8 	bl	8001b48 <LL_ADC_REG_IsConversionOngoing>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d11a      	bne.n	8002034 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 020c 	bic.w	r2, r2, #12
 800200c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d112      	bne.n	800204c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	659a      	str	r2, [r3, #88]	@ 0x58
 8002032:	e00b      	b.n	800204c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002038:	f043 0210 	orr.w	r2, r3, #16
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7fe fddd 	bl	8000c0c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	220c      	movs	r2, #12
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d004      	beq.n	800206e <HAL_ADC_IRQHandler+0x146>
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	d109      	bne.n	8002082 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002074:	2b00      	cmp	r3, #0
 8002076:	d072      	beq.n	800215e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d06d      	beq.n	800215e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	d105      	bne.n	800209a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002092:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fc3f 	bl	8001922 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80020a4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fbfa 	bl	80018a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020b0:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d047      	beq.n	8002150 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d007      	beq.n	80020da <HAL_ADC_IRQHandler+0x1b2>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d03f      	beq.n	8002150 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d13a      	bne.n	8002150 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e4:	2b40      	cmp	r3, #64	@ 0x40
 80020e6:	d133      	bne.n	8002150 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d12e      	bne.n	8002150 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fd39 	bl	8001b6e <LL_ADC_INJ_IsConversionOngoing>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d11a      	bne.n	8002138 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002110:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d112      	bne.n	8002150 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212e:	f043 0201 	orr.w	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	659a      	str	r2, [r3, #88]	@ 0x58
 8002136:	e00b      	b.n	8002150 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213c:	f043 0210 	orr.w	r2, r3, #16
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002148:	f043 0201 	orr.w	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 feb3 	bl	8002ebc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2260      	movs	r2, #96	@ 0x60
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002164:	2b00      	cmp	r3, #0
 8002166:	d011      	beq.n	800218c <HAL_ADC_IRQHandler+0x264>
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00c      	beq.n	800218c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f886 	bl	8002290 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2280      	movs	r2, #128	@ 0x80
 800218a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d012      	beq.n	80021bc <HAL_ADC_IRQHandler+0x294>
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00d      	beq.n	80021bc <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fe99 	bl	8002ee4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d012      	beq.n	80021ec <HAL_ADC_IRQHandler+0x2c4>
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00d      	beq.n	80021ec <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 fe8b 	bl	8002ef8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d02a      	beq.n	800224c <HAL_ADC_IRQHandler+0x324>
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d025      	beq.n	800224c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002208:	2301      	movs	r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
 800220c:	e008      	b.n	8002220 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800221c:	2301      	movs	r3, #1
 800221e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d10e      	bne.n	8002244 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	f043 0202 	orr.w	r2, r3, #2
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f830 	bl	80022a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2210      	movs	r2, #16
 800224a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002252:	2b00      	cmp	r3, #0
 8002254:	d018      	beq.n	8002288 <HAL_ADC_IRQHandler+0x360>
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002264:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002270:	f043 0208 	orr.w	r2, r3, #8
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002280:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fe24 	bl	8002ed0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002288:	bf00      	nop
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b0b6      	sub	sp, #216	@ 0xd8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_ADC_ConfigChannel+0x22>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e3d5      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x7ce>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fc2e 	bl	8001b48 <LL_ADC_REG_IsConversionOngoing>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 83ba 	bne.w	8002a68 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b05      	cmp	r3, #5
 8002302:	d824      	bhi.n	800234e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	3b02      	subs	r3, #2
 800230a:	2b03      	cmp	r3, #3
 800230c:	d81b      	bhi.n	8002346 <HAL_ADC_ConfigChannel+0x8e>
 800230e:	a201      	add	r2, pc, #4	@ (adr r2, 8002314 <HAL_ADC_ConfigChannel+0x5c>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002325 	.word	0x08002325
 8002318:	0800232d 	.word	0x0800232d
 800231c:	08002335 	.word	0x08002335
 8002320:	0800233d 	.word	0x0800233d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002324:	230c      	movs	r3, #12
 8002326:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800232a:	e010      	b.n	800234e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800232c:	2312      	movs	r3, #18
 800232e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002332:	e00c      	b.n	800234e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002334:	2318      	movs	r3, #24
 8002336:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800233a:	e008      	b.n	800234e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800233c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002340:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002344:	e003      	b.n	800234e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002346:	2306      	movs	r3, #6
 8002348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800234c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800235c:	f7ff fab5 	bl	80018ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fbef 	bl	8001b48 <LL_ADC_REG_IsConversionOngoing>
 800236a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fbfb 	bl	8001b6e <LL_ADC_INJ_IsConversionOngoing>
 8002378:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800237c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002380:	2b00      	cmp	r3, #0
 8002382:	f040 81bf 	bne.w	8002704 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 81ba 	bne.w	8002704 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002398:	d10f      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2200      	movs	r2, #0
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7ff facf 	bl	8001948 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fa63 	bl	800187e <LL_ADC_SetSamplingTimeCommonConfig>
 80023b8:	e00e      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f7ff fabe 	bl	8001948 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fa53 	bl	800187e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	08db      	lsrs	r3, r3, #3
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d00a      	beq.n	8002410 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6919      	ldr	r1, [r3, #16]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800240a:	f7ff f9e3 	bl	80017d4 <LL_ADC_SetOffset>
 800240e:	e179      	b.n	8002704 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fa00 	bl	800181c <LL_ADC_GetOffsetChannel>
 800241c:	4603      	mov	r3, r0
 800241e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10a      	bne.n	800243c <HAL_ADC_ConfigChannel+0x184>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff f9f5 	bl	800181c <LL_ADC_GetOffsetChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	0e9b      	lsrs	r3, r3, #26
 8002436:	f003 021f 	and.w	r2, r3, #31
 800243a:	e01e      	b.n	800247a <HAL_ADC_ConfigChannel+0x1c2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff f9ea 	bl	800181c <LL_ADC_GetOffsetChannel>
 8002448:	4603      	mov	r3, r0
 800244a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800245a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800245e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002462:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800246a:	2320      	movs	r3, #32
 800246c:	e004      	b.n	8002478 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800246e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x1da>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	e018      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x20c>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80024a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80024ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80024b6:	2320      	movs	r3, #32
 80024b8:	e004      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80024ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d106      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff f9b9 	bl	8001848 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2101      	movs	r1, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff f99d 	bl	800181c <LL_ADC_GetOffsetChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x24a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2101      	movs	r1, #1
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f992 	bl	800181c <LL_ADC_GetOffsetChannel>
 80024f8:	4603      	mov	r3, r0
 80024fa:	0e9b      	lsrs	r3, r3, #26
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	e01e      	b.n	8002540 <HAL_ADC_ConfigChannel+0x288>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2101      	movs	r1, #1
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff f987 	bl	800181c <LL_ADC_GetOffsetChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002520:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002524:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002528:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002530:	2320      	movs	r3, #32
 8002532:	e004      	b.n	800253e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002534:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x2a0>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0e9b      	lsrs	r3, r3, #26
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	e018      	b.n	800258a <HAL_ADC_ConfigChannel+0x2d2>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800256c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002570:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002574:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800257c:	2320      	movs	r3, #32
 800257e:	e004      	b.n	800258a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002580:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800258a:	429a      	cmp	r2, r3
 800258c:	d106      	bne.n	800259c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	2101      	movs	r1, #1
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff f956 	bl	8001848 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2102      	movs	r1, #2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f93a 	bl	800181c <LL_ADC_GetOffsetChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10a      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x310>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2102      	movs	r1, #2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff f92f 	bl	800181c <LL_ADC_GetOffsetChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	f003 021f 	and.w	r2, r3, #31
 80025c6:	e01e      	b.n	8002606 <HAL_ADC_ConfigChannel+0x34e>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2102      	movs	r1, #2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff f924 	bl	800181c <LL_ADC_GetOffsetChannel>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80025e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80025ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80025f6:	2320      	movs	r3, #32
 80025f8:	e004      	b.n	8002604 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80025fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260e:	2b00      	cmp	r3, #0
 8002610:	d105      	bne.n	800261e <HAL_ADC_ConfigChannel+0x366>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	0e9b      	lsrs	r3, r3, #26
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	e014      	b.n	8002648 <HAL_ADC_ConfigChannel+0x390>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800262c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800262e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002632:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800263a:	2320      	movs	r3, #32
 800263c:	e004      	b.n	8002648 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800263e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002648:	429a      	cmp	r2, r3
 800264a:	d106      	bne.n	800265a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2200      	movs	r2, #0
 8002652:	2102      	movs	r1, #2
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff f8f7 	bl	8001848 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2103      	movs	r1, #3
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f8db 	bl	800181c <LL_ADC_GetOffsetChannel>
 8002666:	4603      	mov	r3, r0
 8002668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10a      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x3ce>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2103      	movs	r1, #3
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff f8d0 	bl	800181c <LL_ADC_GetOffsetChannel>
 800267c:	4603      	mov	r3, r0
 800267e:	0e9b      	lsrs	r3, r3, #26
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	e017      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x3fe>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2103      	movs	r1, #3
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff f8c5 	bl	800181c <LL_ADC_GetOffsetChannel>
 8002692:	4603      	mov	r3, r0
 8002694:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800269e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026a0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80026a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80026a8:	2320      	movs	r3, #32
 80026aa:	e003      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80026ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d105      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x416>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0e9b      	lsrs	r3, r3, #26
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	e011      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x43a>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80026dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026de:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80026e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80026e6:	2320      	movs	r3, #32
 80026e8:	e003      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80026ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d106      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	2103      	movs	r1, #3
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff f8a2 	bl	8001848 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff f9e3 	bl	8001ad4 <LL_ADC_IsEnabled>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	f040 813f 	bne.w	8002994 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	461a      	mov	r2, r3
 8002724:	f7ff f93c 	bl	80019a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a8e      	ldr	r2, [pc, #568]	@ (8002968 <HAL_ADC_ConfigChannel+0x6b0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	f040 8130 	bne.w	8002994 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10b      	bne.n	800275c <HAL_ADC_ConfigChannel+0x4a4>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	0e9b      	lsrs	r3, r3, #26
 800274a:	3301      	adds	r3, #1
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	2b09      	cmp	r3, #9
 8002752:	bf94      	ite	ls
 8002754:	2301      	movls	r3, #1
 8002756:	2300      	movhi	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e019      	b.n	8002790 <HAL_ADC_ConfigChannel+0x4d8>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800276a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800276c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800276e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002774:	2320      	movs	r3, #32
 8002776:	e003      	b.n	8002780 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002778:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	3301      	adds	r3, #1
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	2b09      	cmp	r3, #9
 8002788:	bf94      	ite	ls
 800278a:	2301      	movls	r3, #1
 800278c:	2300      	movhi	r3, #0
 800278e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002790:	2b00      	cmp	r3, #0
 8002792:	d079      	beq.n	8002888 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279c:	2b00      	cmp	r3, #0
 800279e:	d107      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x4f8>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	0e9b      	lsrs	r3, r3, #26
 80027a6:	3301      	adds	r3, #1
 80027a8:	069b      	lsls	r3, r3, #26
 80027aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ae:	e015      	b.n	80027dc <HAL_ADC_ConfigChannel+0x524>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80027be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80027c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80027c8:	2320      	movs	r3, #32
 80027ca:	e003      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80027cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	069b      	lsls	r3, r3, #26
 80027d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x544>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	0e9b      	lsrs	r3, r3, #26
 80027ee:	3301      	adds	r3, #1
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	2101      	movs	r1, #1
 80027f6:	fa01 f303 	lsl.w	r3, r1, r3
 80027fa:	e017      	b.n	800282c <HAL_ADC_ConfigChannel+0x574>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800280a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800280c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800280e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e003      	b.n	8002820 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	3301      	adds	r3, #1
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	2101      	movs	r1, #1
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	ea42 0103 	orr.w	r1, r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x59a>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0e9b      	lsrs	r3, r3, #26
 8002842:	3301      	adds	r3, #1
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	051b      	lsls	r3, r3, #20
 8002850:	e018      	b.n	8002884 <HAL_ADC_ConfigChannel+0x5cc>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002862:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800286a:	2320      	movs	r3, #32
 800286c:	e003      	b.n	8002876 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800286e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	3301      	adds	r3, #1
 8002878:	f003 021f 	and.w	r2, r3, #31
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002884:	430b      	orrs	r3, r1
 8002886:	e080      	b.n	800298a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002890:	2b00      	cmp	r3, #0
 8002892:	d107      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x5ec>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	0e9b      	lsrs	r3, r3, #26
 800289a:	3301      	adds	r3, #1
 800289c:	069b      	lsls	r3, r3, #26
 800289e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028a2:	e015      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x618>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ac:	fa93 f3a3 	rbit	r3, r3
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80028b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80028bc:	2320      	movs	r3, #32
 80028be:	e003      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80028c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	3301      	adds	r3, #1
 80028ca:	069b      	lsls	r3, r3, #26
 80028cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d109      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x638>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	3301      	adds	r3, #1
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	2101      	movs	r1, #1
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	e017      	b.n	8002920 <HAL_ADC_ConfigChannel+0x668>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	61bb      	str	r3, [r7, #24]
  return result;
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002908:	2320      	movs	r3, #32
 800290a:	e003      	b.n	8002914 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	3301      	adds	r3, #1
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	2101      	movs	r1, #1
 800291c:	fa01 f303 	lsl.w	r3, r1, r3
 8002920:	ea42 0103 	orr.w	r1, r2, r3
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10d      	bne.n	800294c <HAL_ADC_ConfigChannel+0x694>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0e9b      	lsrs	r3, r3, #26
 8002936:	3301      	adds	r3, #1
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	3b1e      	subs	r3, #30
 8002944:	051b      	lsls	r3, r3, #20
 8002946:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800294a:	e01d      	b.n	8002988 <HAL_ADC_ConfigChannel+0x6d0>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	60fb      	str	r3, [r7, #12]
  return result;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002964:	2320      	movs	r3, #32
 8002966:	e005      	b.n	8002974 <HAL_ADC_ConfigChannel+0x6bc>
 8002968:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	3301      	adds	r3, #1
 8002976:	f003 021f 	and.w	r2, r3, #31
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	3b1e      	subs	r3, #30
 8002982:	051b      	lsls	r3, r3, #20
 8002984:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002988:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800298e:	4619      	mov	r1, r3
 8002990:	f7fe ffda 	bl	8001948 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b3d      	ldr	r3, [pc, #244]	@ (8002a90 <HAL_ADC_ConfigChannel+0x7d8>)
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d06c      	beq.n	8002a7a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029a0:	483c      	ldr	r0, [pc, #240]	@ (8002a94 <HAL_ADC_ConfigChannel+0x7dc>)
 80029a2:	f7fe ff09 	bl	80017b8 <LL_ADC_GetCommonPathInternalCh>
 80029a6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a3a      	ldr	r2, [pc, #232]	@ (8002a98 <HAL_ADC_ConfigChannel+0x7e0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d127      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d121      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a35      	ldr	r2, [pc, #212]	@ (8002a9c <HAL_ADC_ConfigChannel+0x7e4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d157      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029d2:	4619      	mov	r1, r3
 80029d4:	482f      	ldr	r0, [pc, #188]	@ (8002a94 <HAL_ADC_ConfigChannel+0x7dc>)
 80029d6:	f7fe fedc 	bl	8001792 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029da:	4b31      	ldr	r3, [pc, #196]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x7e8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	4a30      	ldr	r2, [pc, #192]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x7ec>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	099b      	lsrs	r3, r3, #6
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	4613      	mov	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029f4:	e002      	b.n	80029fc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f9      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a02:	e03a      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a27      	ldr	r2, [pc, #156]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x7f0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d113      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10d      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a9c <HAL_ADC_ConfigChannel+0x7e4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d12a      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4819      	ldr	r0, [pc, #100]	@ (8002a94 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a30:	f7fe feaf 	bl	8001792 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a34:	e021      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002aac <HAL_ADC_ConfigChannel+0x7f4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d11c      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d116      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a12      	ldr	r2, [pc, #72]	@ (8002a9c <HAL_ADC_ConfigChannel+0x7e4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d111      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a5e:	4619      	mov	r1, r3
 8002a60:	480c      	ldr	r0, [pc, #48]	@ (8002a94 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a62:	f7fe fe96 	bl	8001792 <LL_ADC_SetCommonPathInternalCh>
 8002a66:	e008      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6c:	f043 0220 	orr.w	r2, r3, #32
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002a82:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	37d8      	adds	r7, #216	@ 0xd8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	80080000 	.word	0x80080000
 8002a94:	50040300 	.word	0x50040300
 8002a98:	c7520000 	.word	0xc7520000
 8002a9c:	50040000 	.word	0x50040000
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	053e2d63 	.word	0x053e2d63
 8002aa8:	cb840000 	.word	0xcb840000
 8002aac:	80000001 	.word	0x80000001

08002ab0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff f807 	bl	8001ad4 <LL_ADC_IsEnabled>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d169      	bne.n	8002ba0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	4b36      	ldr	r3, [pc, #216]	@ (8002bac <ADC_Enable+0xfc>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ade:	f043 0210 	orr.w	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e055      	b.n	8002ba2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe ffc2 	bl	8001a84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b00:	482b      	ldr	r0, [pc, #172]	@ (8002bb0 <ADC_Enable+0x100>)
 8002b02:	f7fe fe59 	bl	80017b8 <LL_ADC_GetCommonPathInternalCh>
 8002b06:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b10:	4b28      	ldr	r3, [pc, #160]	@ (8002bb4 <ADC_Enable+0x104>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	4a28      	ldr	r2, [pc, #160]	@ (8002bb8 <ADC_Enable+0x108>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b2a:	e002      	b.n	8002b32 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f9      	bne.n	8002b2c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fde8 	bl	800170c <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b3e:	e028      	b.n	8002b92 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe ffc5 	bl	8001ad4 <LL_ADC_IsEnabled>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d104      	bne.n	8002b5a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe ff95 	bl	8001a84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b5a:	f7fe fdd7 	bl	800170c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d914      	bls.n	8002b92 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d00d      	beq.n	8002b92 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7a:	f043 0210 	orr.w	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b86:	f043 0201 	orr.w	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e007      	b.n	8002ba2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d1cf      	bne.n	8002b40 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	8000003f 	.word	0x8000003f
 8002bb0:	50040300 	.word	0x50040300
 8002bb4:	20000000 	.word	0x20000000
 8002bb8:	053e2d63 	.word	0x053e2d63

08002bbc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe ff96 	bl	8001afa <LL_ADC_IsDisableOngoing>
 8002bce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe ff7d 	bl	8001ad4 <LL_ADC_IsEnabled>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d047      	beq.n	8002c70 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d144      	bne.n	8002c70 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 030d 	and.w	r3, r3, #13
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d10c      	bne.n	8002c0e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe ff57 	bl	8001aac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2203      	movs	r2, #3
 8002c04:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c06:	f7fe fd81 	bl	800170c <HAL_GetTick>
 8002c0a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c0c:	e029      	b.n	8002c62 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c12:	f043 0210 	orr.w	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e023      	b.n	8002c72 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c2a:	f7fe fd6f 	bl	800170c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d914      	bls.n	8002c62 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00d      	beq.n	8002c62 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4a:	f043 0210 	orr.w	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e007      	b.n	8002c72 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1dc      	bne.n	8002c2a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d14b      	bne.n	8002d2c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d021      	beq.n	8002cf2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe fdf6 	bl	80018a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d032      	beq.n	8002d24 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d12b      	bne.n	8002d24 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d11f      	bne.n	8002d24 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cf0:	e018      	b.n	8002d24 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d111      	bne.n	8002d24 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f7fd ff71 	bl	8000c0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d2a:	e00e      	b.n	8002d4a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7ff fab3 	bl	80022a4 <HAL_ADC_ErrorCallback>
}
 8002d3e:	e004      	b.n	8002d4a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
}
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7fe f80d 	bl	8000d80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8c:	f043 0204 	orr.w	r2, r3, #4
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7ff fa85 	bl	80022a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <LL_ADC_StartCalibration>:
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002db4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_IsCalibrationOnGoing>:
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002de4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002de8:	d101      	bne.n	8002dee <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_ADCEx_Calibration_Start+0x1c>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e04d      	b.n	8002eb4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fecb 	bl	8002bbc <ADC_Disable>
 8002e26:	4603      	mov	r3, r0
 8002e28:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d136      	bne.n	8002e9e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e34:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e38:	f023 0302 	bic.w	r3, r3, #2
 8002e3c:	f043 0202 	orr.w	r2, r3, #2
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6839      	ldr	r1, [r7, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ffa9 	bl	8002da2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e50:	e014      	b.n	8002e7c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	3301      	adds	r3, #1
 8002e56:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002e5e:	d30d      	bcc.n	8002e7c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e64:	f023 0312 	bic.w	r3, r3, #18
 8002e68:	f043 0210 	orr.w	r2, r3, #16
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e01b      	b.n	8002eb4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ffa7 	bl	8002dd4 <LL_ADC_IsCalibrationOnGoing>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e2      	bne.n	8002e52 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	f023 0303 	bic.w	r3, r3, #3
 8002e94:	f043 0201 	orr.w	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e9c:	e005      	b.n	8002eaa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea2:	f043 0210 	orr.w	r2, r3, #16
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f30:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f52:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	60d3      	str	r3, [r2, #12]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f6c:	4b04      	ldr	r3, [pc, #16]	@ (8002f80 <__NVIC_GetPriorityGrouping+0x18>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	f003 0307 	and.w	r3, r3, #7
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	db0b      	blt.n	8002fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	4907      	ldr	r1, [pc, #28]	@ (8002fbc <__NVIC_EnableIRQ+0x38>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000e100 	.word	0xe000e100

08002fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	6039      	str	r1, [r7, #0]
 8002fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	db0a      	blt.n	8002fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	490c      	ldr	r1, [pc, #48]	@ (800300c <__NVIC_SetPriority+0x4c>)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe8:	e00a      	b.n	8003000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4908      	ldr	r1, [pc, #32]	@ (8003010 <__NVIC_SetPriority+0x50>)
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	3b04      	subs	r3, #4
 8002ff8:	0112      	lsls	r2, r2, #4
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	761a      	strb	r2, [r3, #24]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000e100 	.word	0xe000e100
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	@ 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f1c3 0307 	rsb	r3, r3, #7
 800302e:	2b04      	cmp	r3, #4
 8003030:	bf28      	it	cs
 8003032:	2304      	movcs	r3, #4
 8003034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3304      	adds	r3, #4
 800303a:	2b06      	cmp	r3, #6
 800303c:	d902      	bls.n	8003044 <NVIC_EncodePriority+0x30>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3b03      	subs	r3, #3
 8003042:	e000      	b.n	8003046 <NVIC_EncodePriority+0x32>
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	401a      	ands	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800305c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	43d9      	mvns	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	4313      	orrs	r3, r2
         );
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	@ 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3b01      	subs	r3, #1
 8003088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800308c:	d301      	bcc.n	8003092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800308e:	2301      	movs	r3, #1
 8003090:	e00f      	b.n	80030b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003092:	4a0a      	ldr	r2, [pc, #40]	@ (80030bc <SysTick_Config+0x40>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3b01      	subs	r3, #1
 8003098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800309a:	210f      	movs	r1, #15
 800309c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030a0:	f7ff ff8e 	bl	8002fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <SysTick_Config+0x40>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030aa:	4b04      	ldr	r3, [pc, #16]	@ (80030bc <SysTick_Config+0x40>)
 80030ac:	2207      	movs	r2, #7
 80030ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	e000e010 	.word	0xe000e010

080030c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ff29 	bl	8002f20 <__NVIC_SetPriorityGrouping>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4603      	mov	r3, r0
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030e8:	f7ff ff3e 	bl	8002f68 <__NVIC_GetPriorityGrouping>
 80030ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	6978      	ldr	r0, [r7, #20]
 80030f4:	f7ff ff8e 	bl	8003014 <NVIC_EncodePriority>
 80030f8:	4602      	mov	r2, r0
 80030fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff5d 	bl	8002fc0 <__NVIC_SetPriority>
}
 8003106:	bf00      	nop
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	4603      	mov	r3, r0
 8003116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff31 	bl	8002f84 <__NVIC_EnableIRQ>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff ffa2 	bl	800307c <SysTick_Config>
 8003138:	4603      	mov	r3, r0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e08d      	b.n	8003272 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	4b47      	ldr	r3, [pc, #284]	@ (800327c <HAL_DMA_Init+0x138>)
 800315e:	429a      	cmp	r2, r3
 8003160:	d80f      	bhi.n	8003182 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	4b45      	ldr	r3, [pc, #276]	@ (8003280 <HAL_DMA_Init+0x13c>)
 800316a:	4413      	add	r3, r2
 800316c:	4a45      	ldr	r2, [pc, #276]	@ (8003284 <HAL_DMA_Init+0x140>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	009a      	lsls	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a42      	ldr	r2, [pc, #264]	@ (8003288 <HAL_DMA_Init+0x144>)
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003180:	e00e      	b.n	80031a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	4b40      	ldr	r3, [pc, #256]	@ (800328c <HAL_DMA_Init+0x148>)
 800318a:	4413      	add	r3, r2
 800318c:	4a3d      	ldr	r2, [pc, #244]	@ (8003284 <HAL_DMA_Init+0x140>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	009a      	lsls	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a3c      	ldr	r2, [pc, #240]	@ (8003290 <HAL_DMA_Init+0x14c>)
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80031b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f9fe 	bl	80035f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003200:	d102      	bne.n	8003208 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800321c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d010      	beq.n	8003248 <HAL_DMA_Init+0x104>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b04      	cmp	r3, #4
 800322c:	d80c      	bhi.n	8003248 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fa1e 	bl	8003670 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	e008      	b.n	800325a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40020407 	.word	0x40020407
 8003280:	bffdfff8 	.word	0xbffdfff8
 8003284:	cccccccd 	.word	0xcccccccd
 8003288:	40020000 	.word	0x40020000
 800328c:	bffdfbf8 	.word	0xbffdfbf8
 8003290:	40020400 	.word	0x40020400

08003294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_DMA_Start_IT+0x20>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e066      	b.n	8003382 <HAL_DMA_Start_IT+0xee>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d155      	bne.n	8003374 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f943 	bl	8003578 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 020e 	orr.w	r2, r2, #14
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e00f      	b.n	800332c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0204 	bic.w	r2, r2, #4
 800331a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 020a 	orr.w	r2, r2, #10
 800332a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003344:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003348:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003360:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e005      	b.n	8003380 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800337c:	2302      	movs	r3, #2
 800337e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003380:	7dfb      	ldrb	r3, [r7, #23]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a6:	f003 031c 	and.w	r3, r3, #28
 80033aa:	2204      	movs	r2, #4
 80033ac:	409a      	lsls	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d026      	beq.n	8003404 <HAL_DMA_IRQHandler+0x7a>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d021      	beq.n	8003404 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d107      	bne.n	80033de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0204 	bic.w	r2, r2, #4
 80033dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	f003 021c 	and.w	r2, r3, #28
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	2104      	movs	r1, #4
 80033ec:	fa01 f202 	lsl.w	r2, r1, r2
 80033f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d071      	beq.n	80034de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003402:	e06c      	b.n	80034de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003408:	f003 031c 	and.w	r3, r3, #28
 800340c:	2202      	movs	r2, #2
 800340e:	409a      	lsls	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d02e      	beq.n	8003476 <HAL_DMA_IRQHandler+0xec>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d029      	beq.n	8003476 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 020a 	bic.w	r2, r2, #10
 800343e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344c:	f003 021c 	and.w	r2, r3, #28
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003454:	2102      	movs	r1, #2
 8003456:	fa01 f202 	lsl.w	r2, r1, r2
 800345a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d038      	beq.n	80034de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003474:	e033      	b.n	80034de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347a:	f003 031c 	and.w	r3, r3, #28
 800347e:	2208      	movs	r2, #8
 8003480:	409a      	lsls	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d02a      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x156>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d025      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 020e 	bic.w	r2, r2, #14
 80034a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a8:	f003 021c 	and.w	r2, r3, #28
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	2101      	movs	r1, #1
 80034b2:	fa01 f202 	lsl.w	r2, r1, r2
 80034b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d004      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
}
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	460b      	mov	r3, r1
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_DMA_RegisterCallback+0x20>
 8003504:	2302      	movs	r3, #2
 8003506:	e031      	b.n	800356c <HAL_DMA_RegisterCallback+0x84>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d120      	bne.n	800355e <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 800351c:	7afb      	ldrb	r3, [r7, #11]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d81a      	bhi.n	8003558 <HAL_DMA_RegisterCallback+0x70>
 8003522:	a201      	add	r2, pc, #4	@ (adr r2, 8003528 <HAL_DMA_RegisterCallback+0x40>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	08003539 	.word	0x08003539
 800352c:	08003541 	.word	0x08003541
 8003530:	08003549 	.word	0x08003549
 8003534:	08003551 	.word	0x08003551
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800353e:	e010      	b.n	8003562 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8003546:	e00c      	b.n	8003562 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 800354e:	e008      	b.n	8003562 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003556:	e004      	b.n	8003562 <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	75fb      	strb	r3, [r7, #23]
        break;
 800355c:	e001      	b.n	8003562 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800356a:	7dfb      	ldrb	r3, [r7, #23]
}
 800356c:	4618      	mov	r0, r3
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800358e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003594:	2b00      	cmp	r3, #0
 8003596:	d004      	beq.n	80035a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80035a0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a6:	f003 021c 	and.w	r2, r3, #28
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	2101      	movs	r1, #1
 80035b0:	fa01 f202 	lsl.w	r2, r1, r2
 80035b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b10      	cmp	r3, #16
 80035c4:	d108      	bne.n	80035d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035d6:	e007      	b.n	80035e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	60da      	str	r2, [r3, #12]
}
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	4b17      	ldr	r3, [pc, #92]	@ (8003660 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003604:	429a      	cmp	r2, r3
 8003606:	d80a      	bhi.n	800361e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360c:	089b      	lsrs	r3, r3, #2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003614:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6493      	str	r3, [r2, #72]	@ 0x48
 800361c:	e007      	b.n	800362e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003622:	089b      	lsrs	r3, r3, #2
 8003624:	009a      	lsls	r2, r3, #2
 8003626:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003628:	4413      	add	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	3b08      	subs	r3, #8
 8003636:	4a0c      	ldr	r2, [pc, #48]	@ (8003668 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003638:	fba2 2303 	umull	r2, r3, r2, r3
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003644:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	2201      	movs	r2, #1
 800364e:	409a      	lsls	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	40020407 	.word	0x40020407
 8003664:	4002081c 	.word	0x4002081c
 8003668:	cccccccd 	.word	0xcccccccd
 800366c:	40020880 	.word	0x40020880

08003670 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4b0b      	ldr	r3, [pc, #44]	@ (80036b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	461a      	mov	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a08      	ldr	r2, [pc, #32]	@ (80036b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003692:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3b01      	subs	r3, #1
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2201      	movs	r2, #1
 800369e:	409a      	lsls	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	1000823f 	.word	0x1000823f
 80036b4:	40020940 	.word	0x40020940

080036b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c6:	e166      	b.n	8003996 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	2101      	movs	r1, #1
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	fa01 f303 	lsl.w	r3, r1, r3
 80036d4:	4013      	ands	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 8158 	beq.w	8003990 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d005      	beq.n	80036f8 <HAL_GPIO_Init+0x40>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d130      	bne.n	800375a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	2203      	movs	r2, #3
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800372e:	2201      	movs	r2, #1
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	091b      	lsrs	r3, r3, #4
 8003744:	f003 0201 	and.w	r2, r3, #1
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b03      	cmp	r3, #3
 8003764:	d017      	beq.n	8003796 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	2203      	movs	r2, #3
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4013      	ands	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d123      	bne.n	80037ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	08da      	lsrs	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3208      	adds	r2, #8
 80037aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	220f      	movs	r2, #15
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	08da      	lsrs	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3208      	adds	r2, #8
 80037e4:	6939      	ldr	r1, [r7, #16]
 80037e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	2203      	movs	r2, #3
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 0203 	and.w	r2, r3, #3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80b2 	beq.w	8003990 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382c:	4b61      	ldr	r3, [pc, #388]	@ (80039b4 <HAL_GPIO_Init+0x2fc>)
 800382e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003830:	4a60      	ldr	r2, [pc, #384]	@ (80039b4 <HAL_GPIO_Init+0x2fc>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6613      	str	r3, [r2, #96]	@ 0x60
 8003838:	4b5e      	ldr	r3, [pc, #376]	@ (80039b4 <HAL_GPIO_Init+0x2fc>)
 800383a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003844:	4a5c      	ldr	r2, [pc, #368]	@ (80039b8 <HAL_GPIO_Init+0x300>)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	3302      	adds	r3, #2
 800384c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	220f      	movs	r2, #15
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800386e:	d02b      	beq.n	80038c8 <HAL_GPIO_Init+0x210>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a52      	ldr	r2, [pc, #328]	@ (80039bc <HAL_GPIO_Init+0x304>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d025      	beq.n	80038c4 <HAL_GPIO_Init+0x20c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a51      	ldr	r2, [pc, #324]	@ (80039c0 <HAL_GPIO_Init+0x308>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d01f      	beq.n	80038c0 <HAL_GPIO_Init+0x208>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a50      	ldr	r2, [pc, #320]	@ (80039c4 <HAL_GPIO_Init+0x30c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d019      	beq.n	80038bc <HAL_GPIO_Init+0x204>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a4f      	ldr	r2, [pc, #316]	@ (80039c8 <HAL_GPIO_Init+0x310>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <HAL_GPIO_Init+0x200>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a4e      	ldr	r2, [pc, #312]	@ (80039cc <HAL_GPIO_Init+0x314>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00d      	beq.n	80038b4 <HAL_GPIO_Init+0x1fc>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a4d      	ldr	r2, [pc, #308]	@ (80039d0 <HAL_GPIO_Init+0x318>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <HAL_GPIO_Init+0x1f8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a4c      	ldr	r2, [pc, #304]	@ (80039d4 <HAL_GPIO_Init+0x31c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d101      	bne.n	80038ac <HAL_GPIO_Init+0x1f4>
 80038a8:	2307      	movs	r3, #7
 80038aa:	e00e      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038ac:	2308      	movs	r3, #8
 80038ae:	e00c      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038b0:	2306      	movs	r3, #6
 80038b2:	e00a      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038b4:	2305      	movs	r3, #5
 80038b6:	e008      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038b8:	2304      	movs	r3, #4
 80038ba:	e006      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038bc:	2303      	movs	r3, #3
 80038be:	e004      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e002      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038c8:	2300      	movs	r3, #0
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	f002 0203 	and.w	r2, r2, #3
 80038d0:	0092      	lsls	r2, r2, #2
 80038d2:	4093      	lsls	r3, r2
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038da:	4937      	ldr	r1, [pc, #220]	@ (80039b8 <HAL_GPIO_Init+0x300>)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	3302      	adds	r3, #2
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038e8:	4b3b      	ldr	r3, [pc, #236]	@ (80039d8 <HAL_GPIO_Init+0x320>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800390c:	4a32      	ldr	r2, [pc, #200]	@ (80039d8 <HAL_GPIO_Init+0x320>)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003912:	4b31      	ldr	r3, [pc, #196]	@ (80039d8 <HAL_GPIO_Init+0x320>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003936:	4a28      	ldr	r2, [pc, #160]	@ (80039d8 <HAL_GPIO_Init+0x320>)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800393c:	4b26      	ldr	r3, [pc, #152]	@ (80039d8 <HAL_GPIO_Init+0x320>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003960:	4a1d      	ldr	r2, [pc, #116]	@ (80039d8 <HAL_GPIO_Init+0x320>)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003966:	4b1c      	ldr	r3, [pc, #112]	@ (80039d8 <HAL_GPIO_Init+0x320>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	43db      	mvns	r3, r3
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800398a:	4a13      	ldr	r2, [pc, #76]	@ (80039d8 <HAL_GPIO_Init+0x320>)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	3301      	adds	r3, #1
 8003994:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f47f ae91 	bne.w	80036c8 <HAL_GPIO_Init+0x10>
  }
}
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40010000 	.word	0x40010000
 80039bc:	48000400 	.word	0x48000400
 80039c0:	48000800 	.word	0x48000800
 80039c4:	48000c00 	.word	0x48000c00
 80039c8:	48001000 	.word	0x48001000
 80039cc:	48001400 	.word	0x48001400
 80039d0:	48001800 	.word	0x48001800
 80039d4:	48001c00 	.word	0x48001c00
 80039d8:	40010400 	.word	0x40010400

080039dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
 80039e8:	4613      	mov	r3, r2
 80039ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039ec:	787b      	ldrb	r3, [r7, #1]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039f8:	e002      	b.n	8003a00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4013      	ands	r3, r2
 8003a24:	041a      	lsls	r2, r3, #16
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	43d9      	mvns	r1, r3
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	400b      	ands	r3, r1
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	619a      	str	r2, [r3, #24]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a4a:	4b08      	ldr	r3, [pc, #32]	@ (8003a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d006      	beq.n	8003a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a56:	4a05      	ldr	r2, [pc, #20]	@ (8003a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fc ff74 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40010400 	.word	0x40010400

08003a70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a72:	b08f      	sub	sp, #60	@ 0x3c
 8003a74:	af0a      	add	r7, sp, #40	@ 0x28
 8003a76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e116      	b.n	8003cb0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f007 fe39 	bl	800b714 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f004 fa90 	bl	8007fe6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	687e      	ldr	r6, [r7, #4]
 8003ace:	466d      	mov	r5, sp
 8003ad0:	f106 0410 	add.w	r4, r6, #16
 8003ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003adc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ae0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ae4:	1d33      	adds	r3, r6, #4
 8003ae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ae8:	6838      	ldr	r0, [r7, #0]
 8003aea:	f004 f9a3 	bl	8007e34 <USB_CoreInit>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0d7      	b.n	8003cb0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f004 fa7e 	bl	8008008 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e04a      	b.n	8003ba8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	333d      	adds	r3, #61	@ 0x3d
 8003b22:	2201      	movs	r2, #1
 8003b24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	333c      	adds	r3, #60	@ 0x3c
 8003b36:	7bfa      	ldrb	r2, [r7, #15]
 8003b38:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b3a:	7bfa      	ldrb	r2, [r7, #15]
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	b298      	uxth	r0, r3
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	3356      	adds	r3, #86	@ 0x56
 8003b4e:	4602      	mov	r2, r0
 8003b50:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b52:	7bfa      	ldrb	r2, [r7, #15]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	3340      	adds	r3, #64	@ 0x40
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b66:	7bfa      	ldrb	r2, [r7, #15]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	3344      	adds	r3, #68	@ 0x44
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	3348      	adds	r3, #72	@ 0x48
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b8e:	7bfa      	ldrb	r2, [r7, #15]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	334c      	adds	r3, #76	@ 0x4c
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d3af      	bcc.n	8003b12 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	73fb      	strb	r3, [r7, #15]
 8003bb6:	e044      	b.n	8003c42 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bb8:	7bfa      	ldrb	r2, [r7, #15]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003bca:	2200      	movs	r2, #0
 8003bcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bce:	7bfa      	ldrb	r2, [r7, #15]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003be4:	7bfa      	ldrb	r2, [r7, #15]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bfa:	7bfa      	ldrb	r2, [r7, #15]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c10:	7bfa      	ldrb	r2, [r7, #15]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c26:	7bfa      	ldrb	r2, [r7, #15]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
 8003c42:	7bfa      	ldrb	r2, [r7, #15]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d3b5      	bcc.n	8003bb8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	603b      	str	r3, [r7, #0]
 8003c52:	687e      	ldr	r6, [r7, #4]
 8003c54:	466d      	mov	r5, sp
 8003c56:	f106 0410 	add.w	r4, r6, #16
 8003c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c66:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c6a:	1d33      	adds	r3, r6, #4
 8003c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c6e:	6838      	ldr	r0, [r7, #0]
 8003c70:	f004 fa16 	bl	80080a0 <USB_DevInit>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e014      	b.n	8003cb0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d102      	bne.n	8003ca4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f001 f86a 	bl	8004d78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f005 f9c4 	bl	8009036 <USB_DevDisconnect>

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cb8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_PCD_Start+0x1c>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e01c      	b.n	8003d0e <HAL_PCD_Start+0x56>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d105      	bne.n	8003cf0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f004 f965 	bl	8007fc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f005 f978 	bl	8008ff4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d16:	b590      	push	{r4, r7, lr}
 8003d18:	b08d      	sub	sp, #52	@ 0x34
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f005 fa36 	bl	800919e <USB_GetMode>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f040 847e 	bne.w	8004636 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f005 f99a 	bl	8009078 <USB_ReadInterrupts>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8474 	beq.w	8004634 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	0a1b      	lsrs	r3, r3, #8
 8003d56:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f005 f987 	bl	8009078 <USB_ReadInterrupts>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d107      	bne.n	8003d84 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f002 0202 	and.w	r2, r2, #2
 8003d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f005 f975 	bl	8009078 <USB_ReadInterrupts>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d161      	bne.n	8003e5c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0210 	bic.w	r2, r2, #16
 8003da6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	f003 020f 	and.w	r2, r3, #15
 8003db4:	4613      	mov	r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	0c5b      	lsrs	r3, r3, #17
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d124      	bne.n	8003e1e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d035      	beq.n	8003e4c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003dea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	6a38      	ldr	r0, [r7, #32]
 8003df4:	f004 ffac 	bl	8008d50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e04:	441a      	add	r2, r3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e16:	441a      	add	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	615a      	str	r2, [r3, #20]
 8003e1c:	e016      	b.n	8003e4c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	0c5b      	lsrs	r3, r3, #17
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	2b06      	cmp	r3, #6
 8003e28:	d110      	bne.n	8003e4c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003e30:	2208      	movs	r2, #8
 8003e32:	4619      	mov	r1, r3
 8003e34:	6a38      	ldr	r0, [r7, #32]
 8003e36:	f004 ff8b 	bl	8008d50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e46:	441a      	add	r2, r3
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0210 	orr.w	r2, r2, #16
 8003e5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f005 f909 	bl	8009078 <USB_ReadInterrupts>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e70:	f040 80a7 	bne.w	8003fc2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f005 f90e 	bl	800909e <USB_ReadDevAllOutEpInterrupt>
 8003e82:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003e84:	e099      	b.n	8003fba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 808e 	beq.w	8003fae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f005 f932 	bl	8009106 <USB_ReadDevOutEPInterrupt>
 8003ea2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00c      	beq.n	8003ec8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ec0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fe7e 	bl	8004bc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00c      	beq.n	8003eec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ede:	461a      	mov	r2, r3
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ee4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 feba 	bl	8004c60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f02:	461a      	mov	r2, r3
 8003f04:	2310      	movs	r3, #16
 8003f06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d030      	beq.n	8003f74 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f1a:	2b80      	cmp	r3, #128	@ 0x80
 8003f1c:	d109      	bne.n	8003f32 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f30:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	4413      	add	r3, r2
 8003f44:	3304      	adds	r3, #4
 8003f46:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	78db      	ldrb	r3, [r3, #3]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d108      	bne.n	8003f62 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2200      	movs	r2, #0
 8003f54:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f007 fd2f 	bl	800b9c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2302      	movs	r3, #2
 8003f72:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2320      	movs	r3, #32
 8003f8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f47f af62 	bne.w	8003e86 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f005 f856 	bl	8009078 <USB_ReadInterrupts>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fd6:	f040 80a4 	bne.w	8004122 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f005 f877 	bl	80090d2 <USB_ReadDevAllInEpInterrupt>
 8003fe4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003fea:	e096      	b.n	800411a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 808b 	beq.w	800410e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	4611      	mov	r1, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f005 f89d 	bl	8009142 <USB_ReadDevInEPInterrupt>
 8004008:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d020      	beq.n	8004056 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	2201      	movs	r2, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	43db      	mvns	r3, r3
 800402e:	69f9      	ldr	r1, [r7, #28]
 8004030:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004034:	4013      	ands	r3, r2
 8004036:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004044:	461a      	mov	r2, r3
 8004046:	2301      	movs	r3, #1
 8004048:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	b2db      	uxtb	r3, r3
 800404e:	4619      	mov	r1, r3
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f007 fc20 	bl	800b896 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800406c:	461a      	mov	r2, r3
 800406e:	2308      	movs	r3, #8
 8004070:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004088:	461a      	mov	r2, r3
 800408a:	2310      	movs	r3, #16
 800408c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040a4:	461a      	mov	r2, r3
 80040a6:	2340      	movs	r3, #64	@ 0x40
 80040a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d023      	beq.n	80040fc <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80040b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040b6:	6a38      	ldr	r0, [r7, #32]
 80040b8:	f004 f934 	bl	8008324 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80040bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	3338      	adds	r3, #56	@ 0x38
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	4413      	add	r3, r2
 80040cc:	3304      	adds	r3, #4
 80040ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	78db      	ldrb	r3, [r3, #3]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d108      	bne.n	80040ea <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2200      	movs	r2, #0
 80040dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f007 fc7d 	bl	800b9e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040f6:	461a      	mov	r2, r3
 80040f8:	2302      	movs	r3, #2
 80040fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004106:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fcd2 	bl	8004ab2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	3301      	adds	r3, #1
 8004112:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004116:	085b      	lsrs	r3, r3, #1
 8004118:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800411a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	f47f af65 	bne.w	8003fec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f004 ffa6 	bl	8009078 <USB_ReadInterrupts>
 800412c:	4603      	mov	r3, r0
 800412e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004132:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004136:	d122      	bne.n	800417e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004146:	f023 0301 	bic.w	r3, r3, #1
 800414a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004152:	2b01      	cmp	r3, #1
 8004154:	d108      	bne.n	8004168 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800415e:	2100      	movs	r1, #0
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f007 feb1 	bl	800bec8 <HAL_PCDEx_LPM_Callback>
 8004166:	e002      	b.n	800416e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f007 fc01 	bl	800b970 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800417c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f004 ff78 	bl	8009078 <USB_ReadInterrupts>
 8004188:	4603      	mov	r3, r0
 800418a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800418e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004192:	d112      	bne.n	80041ba <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d102      	bne.n	80041aa <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f007 fbbd 	bl	800b924 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80041b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f004 ff5a 	bl	8009078 <USB_ReadInterrupts>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041ce:	d121      	bne.n	8004214 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80041de:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d111      	bne.n	800420e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	f003 020f 	and.w	r2, r3, #15
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004204:	2101      	movs	r1, #1
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f007 fe5e 	bl	800bec8 <HAL_PCDEx_LPM_Callback>
 800420c:	e002      	b.n	8004214 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f007 fb88 	bl	800b924 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f004 ff2d 	bl	8009078 <USB_ReadInterrupts>
 800421e:	4603      	mov	r3, r0
 8004220:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004228:	f040 80b5 	bne.w	8004396 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2110      	movs	r1, #16
 8004246:	4618      	mov	r0, r3
 8004248:	f004 f86c 	bl	8008324 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800424c:	2300      	movs	r3, #0
 800424e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004250:	e046      	b.n	80042e0 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800425e:	461a      	mov	r2, r3
 8004260:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004264:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004276:	0151      	lsls	r1, r2, #5
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	440a      	add	r2, r1
 800427c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004280:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004284:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004292:	461a      	mov	r2, r3
 8004294:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004298:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800429a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042aa:	0151      	lsls	r1, r2, #5
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	440a      	add	r2, r1
 80042b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80042b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80042ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ca:	0151      	lsls	r1, r2, #5
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	440a      	add	r2, r1
 80042d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80042d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042dc:	3301      	adds	r3, #1
 80042de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d3b3      	bcc.n	8004252 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042f8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80042fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	2b00      	cmp	r3, #0
 8004304:	d016      	beq.n	8004334 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800430c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004316:	f043 030b 	orr.w	r3, r3, #11
 800431a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004326:	69fa      	ldr	r2, [r7, #28]
 8004328:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800432c:	f043 030b 	orr.w	r3, r3, #11
 8004330:	6453      	str	r3, [r2, #68]	@ 0x44
 8004332:	e015      	b.n	8004360 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004342:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004346:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800434a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800435a:	f043 030b 	orr.w	r3, r3, #11
 800435e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800436e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004372:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f004 ff3d 	bl	8009200 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695a      	ldr	r2, [r3, #20]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f004 fe6c 	bl	8009078 <USB_ReadInterrupts>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043aa:	d124      	bne.n	80043f6 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f004 ff02 	bl	80091ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f004 f82f 	bl	800841e <USB_GetDevSpeed>
 80043c0:	4603      	mov	r3, r0
 80043c2:	461a      	mov	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681c      	ldr	r4, [r3, #0]
 80043cc:	f001 fbbc 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 80043d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	4620      	mov	r0, r4
 80043dc:	f003 fd56 	bl	8007e8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f007 fa80 	bl	800b8e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695a      	ldr	r2, [r3, #20]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80043f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f004 fe3c 	bl	8009078 <USB_ReadInterrupts>
 8004400:	4603      	mov	r3, r0
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b08      	cmp	r3, #8
 8004408:	d10a      	bne.n	8004420 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f007 fa5d 	bl	800b8ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f002 0208 	and.w	r2, r2, #8
 800441e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f004 fe27 	bl	8009078 <USB_ReadInterrupts>
 800442a:	4603      	mov	r3, r0
 800442c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004430:	2b80      	cmp	r3, #128	@ 0x80
 8004432:	d122      	bne.n	800447a <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004440:	2301      	movs	r3, #1
 8004442:	627b      	str	r3, [r7, #36]	@ 0x24
 8004444:	e014      	b.n	8004470 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444a:	4613      	mov	r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d105      	bne.n	800446a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	b2db      	uxtb	r3, r3
 8004462:	4619      	mov	r1, r3
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 faf3 	bl	8004a50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	3301      	adds	r3, #1
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004476:	429a      	cmp	r2, r3
 8004478:	d3e5      	bcc.n	8004446 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f004 fdfa 	bl	8009078 <USB_ReadInterrupts>
 8004484:	4603      	mov	r3, r0
 8004486:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800448a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800448e:	d13b      	bne.n	8004508 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004490:	2301      	movs	r3, #1
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
 8004494:	e02b      	b.n	80044ee <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	3340      	adds	r3, #64	@ 0x40
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d115      	bne.n	80044e8 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80044bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da12      	bge.n	80044e8 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	333f      	adds	r3, #63	@ 0x3f
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	4619      	mov	r1, r3
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fab4 	bl	8004a50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	3301      	adds	r3, #1
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d3ce      	bcc.n	8004496 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004506:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f004 fdb3 	bl	8009078 <USB_ReadInterrupts>
 8004512:	4603      	mov	r3, r0
 8004514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004518:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800451c:	d155      	bne.n	80045ca <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800451e:	2301      	movs	r3, #1
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
 8004522:	e045      	b.n	80045b0 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d12e      	bne.n	80045aa <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800454c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800454e:	2b00      	cmp	r3, #0
 8004550:	da2b      	bge.n	80045aa <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800455e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004562:	429a      	cmp	r2, r3
 8004564:	d121      	bne.n	80045aa <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800456a:	4613      	mov	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004578:	2201      	movs	r2, #1
 800457a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045a6:	6053      	str	r3, [r2, #4]
            break;
 80045a8:	e007      	b.n	80045ba <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	3301      	adds	r3, #1
 80045ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d3b4      	bcc.n	8004524 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80045c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f004 fd52 	bl	8009078 <USB_ReadInterrupts>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045de:	d10a      	bne.n	80045f6 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f007 fa11 	bl	800ba08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695a      	ldr	r2, [r3, #20]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80045f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f004 fd3c 	bl	8009078 <USB_ReadInterrupts>
 8004600:	4603      	mov	r3, r0
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b04      	cmp	r3, #4
 8004608:	d115      	bne.n	8004636 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f007 fa01 	bl	800ba24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6859      	ldr	r1, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	e000      	b.n	8004636 <HAL_PCD_IRQHandler+0x920>
      return;
 8004634:	bf00      	nop
    }
  }
}
 8004636:	3734      	adds	r7, #52	@ 0x34
 8004638:	46bd      	mov	sp, r7
 800463a:	bd90      	pop	{r4, r7, pc}

0800463c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_PCD_SetAddress+0x1a>
 8004652:	2302      	movs	r3, #2
 8004654:	e013      	b.n	800467e <HAL_PCD_SetAddress+0x42>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	4611      	mov	r1, r2
 800466e:	4618      	mov	r0, r3
 8004670:	f004 fc9a 	bl	8008fa8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	4608      	mov	r0, r1
 8004690:	4611      	mov	r1, r2
 8004692:	461a      	mov	r2, r3
 8004694:	4603      	mov	r3, r0
 8004696:	70fb      	strb	r3, [r7, #3]
 8004698:	460b      	mov	r3, r1
 800469a:	803b      	strh	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	da0f      	bge.n	80046cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	f003 020f 	and.w	r2, r3, #15
 80046b2:	4613      	mov	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	3338      	adds	r3, #56	@ 0x38
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	4413      	add	r3, r2
 80046c0:	3304      	adds	r3, #4
 80046c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2201      	movs	r2, #1
 80046c8:	705a      	strb	r2, [r3, #1]
 80046ca:	e00f      	b.n	80046ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	f003 020f 	and.w	r2, r3, #15
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4413      	add	r3, r2
 80046e2:	3304      	adds	r3, #4
 80046e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80046f8:	883a      	ldrh	r2, [r7, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	78ba      	ldrb	r2, [r7, #2]
 8004702:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d004      	beq.n	8004716 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004716:	78bb      	ldrb	r3, [r7, #2]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d102      	bne.n	8004722 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_PCD_EP_Open+0xaa>
 800472c:	2302      	movs	r3, #2
 800472e:	e00e      	b.n	800474e <HAL_PCD_EP_Open+0xc8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68f9      	ldr	r1, [r7, #12]
 800473e:	4618      	mov	r0, r3
 8004740:	f003 fe8c 	bl	800845c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 800474c:	7afb      	ldrb	r3, [r7, #11]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004766:	2b00      	cmp	r3, #0
 8004768:	da0f      	bge.n	800478a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	f003 020f 	and.w	r2, r3, #15
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	3338      	adds	r3, #56	@ 0x38
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4413      	add	r3, r2
 800477e:	3304      	adds	r3, #4
 8004780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	705a      	strb	r2, [r3, #1]
 8004788:	e00f      	b.n	80047aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800478a:	78fb      	ldrb	r3, [r7, #3]
 800478c:	f003 020f 	and.w	r2, r3, #15
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	4413      	add	r3, r2
 80047a0:	3304      	adds	r3, #4
 80047a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80047aa:	78fb      	ldrb	r3, [r7, #3]
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_PCD_EP_Close+0x6e>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e00e      	b.n	80047e2 <HAL_PCD_EP_Close+0x8c>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68f9      	ldr	r1, [r7, #12]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f003 feca 	bl	800856c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b086      	sub	sp, #24
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
 80047f6:	460b      	mov	r3, r1
 80047f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047fa:	7afb      	ldrb	r3, [r7, #11]
 80047fc:	f003 020f 	and.w	r2, r3, #15
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	3304      	adds	r3, #4
 8004812:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2200      	movs	r2, #0
 8004824:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2200      	movs	r2, #0
 800482a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800482c:	7afb      	ldrb	r3, [r7, #11]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	b2da      	uxtb	r2, r3
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6979      	ldr	r1, [r7, #20]
 800483e:	4618      	mov	r0, r3
 8004840:	f003 ff70 	bl	8008724 <USB_EPStartXfer>

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	460b      	mov	r3, r1
 8004858:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	f003 020f 	and.w	r2, r3, #15
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004870:	681b      	ldr	r3, [r3, #0]
}
 8004872:	4618      	mov	r0, r3
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b086      	sub	sp, #24
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	460b      	mov	r3, r1
 800488c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800488e:	7afb      	ldrb	r3, [r7, #11]
 8004890:	f003 020f 	and.w	r2, r3, #15
 8004894:	4613      	mov	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	3338      	adds	r3, #56	@ 0x38
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4413      	add	r3, r2
 80048a2:	3304      	adds	r3, #4
 80048a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2200      	movs	r2, #0
 80048b6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2201      	movs	r2, #1
 80048bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048be:	7afb      	ldrb	r3, [r7, #11]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6979      	ldr	r1, [r7, #20]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f003 ff27 	bl	8008724 <USB_EPStartXfer>

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	f003 020f 	and.w	r2, r3, #15
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d901      	bls.n	80048fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e04e      	b.n	800499c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004902:	2b00      	cmp	r3, #0
 8004904:	da0f      	bge.n	8004926 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	f003 020f 	and.w	r2, r3, #15
 800490c:	4613      	mov	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	3338      	adds	r3, #56	@ 0x38
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	4413      	add	r3, r2
 800491a:	3304      	adds	r3, #4
 800491c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	705a      	strb	r2, [r3, #1]
 8004924:	e00d      	b.n	8004942 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	4613      	mov	r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	4413      	add	r3, r2
 8004938:	3304      	adds	r3, #4
 800493a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	b2da      	uxtb	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_PCD_EP_SetStall+0x82>
 800495e:	2302      	movs	r3, #2
 8004960:	e01c      	b.n	800499c <HAL_PCD_EP_SetStall+0xbc>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68f9      	ldr	r1, [r7, #12]
 8004970:	4618      	mov	r0, r3
 8004972:	f004 fa45 	bl	8008e00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	2b00      	cmp	r3, #0
 800497e:	d108      	bne.n	8004992 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f004 fc37 	bl	8009200 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	f003 020f 	and.w	r2, r3, #15
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d901      	bls.n	80049c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e042      	b.n	8004a48 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	da0f      	bge.n	80049ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	f003 020f 	and.w	r2, r3, #15
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	3338      	adds	r3, #56	@ 0x38
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	4413      	add	r3, r2
 80049de:	3304      	adds	r3, #4
 80049e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	705a      	strb	r2, [r3, #1]
 80049e8:	e00f      	b.n	8004a0a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ea:	78fb      	ldrb	r3, [r7, #3]
 80049ec:	f003 020f 	and.w	r2, r3, #15
 80049f0:	4613      	mov	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	4413      	add	r3, r2
 8004a00:	3304      	adds	r3, #4
 8004a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_PCD_EP_ClrStall+0x86>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e00e      	b.n	8004a48 <HAL_PCD_EP_ClrStall+0xa4>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68f9      	ldr	r1, [r7, #12]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f004 fa4f 	bl	8008edc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	da0c      	bge.n	8004a7e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	f003 020f 	and.w	r2, r3, #15
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	3338      	adds	r3, #56	@ 0x38
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	4413      	add	r3, r2
 8004a78:	3304      	adds	r3, #4
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	e00c      	b.n	8004a98 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a7e:	78fb      	ldrb	r3, [r7, #3]
 8004a80:	f003 020f 	and.w	r2, r3, #15
 8004a84:	4613      	mov	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	4413      	add	r3, r2
 8004a94:	3304      	adds	r3, #4
 8004a96:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68f9      	ldr	r1, [r7, #12]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f004 f872 	bl	8008b88 <USB_EPStopXfer>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004aa8:	7afb      	ldrb	r3, [r7, #11]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b088      	sub	sp, #32
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	3338      	adds	r3, #56	@ 0x38
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	695a      	ldr	r2, [r3, #20]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d901      	bls.n	8004aea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e067      	b.n	8004bba <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d902      	bls.n	8004b06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3303      	adds	r3, #3
 8004b0a:	089b      	lsrs	r3, r3, #2
 8004b0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b0e:	e026      	b.n	8004b5e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	69fa      	ldr	r2, [r7, #28]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d902      	bls.n	8004b2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	3303      	adds	r3, #3
 8004b30:	089b      	lsrs	r3, r3, #2
 8004b32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68d9      	ldr	r1, [r3, #12]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	6978      	ldr	r0, [r7, #20]
 8004b42:	f004 f8cb 	bl	8008cdc <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	441a      	add	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	441a      	add	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d809      	bhi.n	8004b88 <PCD_WriteEmptyTxFifo+0xd6>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	695a      	ldr	r2, [r3, #20]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d203      	bcs.n	8004b88 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1c3      	bne.n	8004b10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d811      	bhi.n	8004bb8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	43db      	mvns	r3, r3
 8004bae:	6939      	ldr	r1, [r7, #16]
 8004bb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	333c      	adds	r3, #60	@ 0x3c
 8004bdc:	3304      	adds	r3, #4
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4a19      	ldr	r2, [pc, #100]	@ (8004c5c <PCD_EP_OutXfrComplete_int+0x98>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d124      	bne.n	8004c44 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c10:	461a      	mov	r2, r3
 8004c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c16:	6093      	str	r3, [r2, #8]
 8004c18:	e01a      	b.n	8004c50 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c30:	461a      	mov	r2, r3
 8004c32:	2320      	movs	r3, #32
 8004c34:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f006 fe0f 	bl	800b860 <HAL_PCD_DataOutStageCallback>
 8004c42:	e005      	b.n	8004c50 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	4619      	mov	r1, r3
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f006 fe08 	bl	800b860 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	4f54310a 	.word	0x4f54310a

08004c60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	333c      	adds	r3, #60	@ 0x3c
 8004c78:	3304      	adds	r3, #4
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a0c      	ldr	r2, [pc, #48]	@ (8004cc4 <PCD_EP_OutSetupPacket_int+0x64>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d90e      	bls.n	8004cb4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d009      	beq.n	8004cb4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cac:	461a      	mov	r2, r3
 8004cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cb2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f006 fdc1 	bl	800b83c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	4f54300a 	.word	0x4f54300a

08004cc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	70fb      	strb	r3, [r7, #3]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d107      	bne.n	8004cf6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ce6:	883b      	ldrh	r3, [r7, #0]
 8004ce8:	0419      	lsls	r1, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cf4:	e028      	b.n	8004d48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfc:	0c1b      	lsrs	r3, r3, #16
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	4413      	add	r3, r2
 8004d02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d04:	2300      	movs	r3, #0
 8004d06:	73fb      	strb	r3, [r7, #15]
 8004d08:	e00d      	b.n	8004d26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	3340      	adds	r3, #64	@ 0x40
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	3301      	adds	r3, #1
 8004d24:	73fb      	strb	r3, [r7, #15]
 8004d26:	7bfa      	ldrb	r2, [r7, #15]
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d3ec      	bcc.n	8004d0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d30:	883b      	ldrh	r3, [r7, #0]
 8004d32:	0418      	lsls	r0, r3, #16
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6819      	ldr	r1, [r3, #0]
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	4302      	orrs	r2, r0
 8004d40:	3340      	adds	r3, #64	@ 0x40
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	460b      	mov	r3, r1
 8004d60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	887a      	ldrh	r2, [r7, #2]
 8004d68:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004daa:	f043 0303 	orr.w	r3, r3, #3
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8004dfc <HAL_PWREx_GetVoltageRange+0x3c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd0:	d102      	bne.n	8004dd8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dd6:	e00b      	b.n	8004df0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004dd8:	4b08      	ldr	r3, [pc, #32]	@ (8004dfc <HAL_PWREx_GetVoltageRange+0x3c>)
 8004dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004de6:	d102      	bne.n	8004dee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dec:	e000      	b.n	8004df0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004dee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40007000 	.word	0x40007000

08004e00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d141      	bne.n	8004e92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e1a:	d131      	bne.n	8004e80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e1c:	4b47      	ldr	r3, [pc, #284]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e22:	4a46      	ldr	r2, [pc, #280]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e2c:	4b43      	ldr	r3, [pc, #268]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e34:	4a41      	ldr	r2, [pc, #260]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004e3c:	4b40      	ldr	r3, [pc, #256]	@ (8004f40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2232      	movs	r2, #50	@ 0x32
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	4a3f      	ldr	r2, [pc, #252]	@ (8004f44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	0c9b      	lsrs	r3, r3, #18
 8004e4e:	3301      	adds	r3, #1
 8004e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e52:	e002      	b.n	8004e5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e5a:	4b38      	ldr	r3, [pc, #224]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e66:	d102      	bne.n	8004e6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f2      	bne.n	8004e54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e6e:	4b33      	ldr	r3, [pc, #204]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7a:	d158      	bne.n	8004f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e057      	b.n	8004f30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e80:	4b2e      	ldr	r3, [pc, #184]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e86:	4a2d      	ldr	r2, [pc, #180]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e90:	e04d      	b.n	8004f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e98:	d141      	bne.n	8004f1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e9a:	4b28      	ldr	r3, [pc, #160]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea6:	d131      	bne.n	8004f0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ea8:	4b24      	ldr	r3, [pc, #144]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eae:	4a23      	ldr	r2, [pc, #140]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eb8:	4b20      	ldr	r3, [pc, #128]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ec6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2232      	movs	r2, #50	@ 0x32
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	0c9b      	lsrs	r3, r3, #18
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ede:	e002      	b.n	8004ee6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ee6:	4b15      	ldr	r3, [pc, #84]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef2:	d102      	bne.n	8004efa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f2      	bne.n	8004ee0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004efa:	4b10      	ldr	r3, [pc, #64]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f06:	d112      	bne.n	8004f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e011      	b.n	8004f30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f12:	4a0a      	ldr	r2, [pc, #40]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f1c:	e007      	b.n	8004f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f1e:	4b07      	ldr	r3, [pc, #28]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f26:	4a05      	ldr	r2, [pc, #20]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f2c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40007000 	.word	0x40007000
 8004f40:	20000000 	.word	0x20000000
 8004f44:	431bde83 	.word	0x431bde83

08004f48 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4a04      	ldr	r2, [pc, #16]	@ (8004f64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f56:	6053      	str	r3, [r2, #4]
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40007000 	.word	0x40007000

08004f68 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004f6c:	4b05      	ldr	r3, [pc, #20]	@ (8004f84 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	4a04      	ldr	r2, [pc, #16]	@ (8004f84 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004f72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f76:	6053      	str	r3, [r2, #4]
}
 8004f78:	bf00      	nop
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40007000 	.word	0x40007000

08004f88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d102      	bne.n	8004f9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f000 bc08 	b.w	80057ac <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9c:	4b96      	ldr	r3, [pc, #600]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 030c 	and.w	r3, r3, #12
 8004fa4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa6:	4b94      	ldr	r3, [pc, #592]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80e4 	beq.w	8005186 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x4c>
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b0c      	cmp	r3, #12
 8004fc8:	f040 808b 	bne.w	80050e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	f040 8087 	bne.w	80050e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fd4:	4b88      	ldr	r3, [pc, #544]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_RCC_OscConfig+0x64>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e3df      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1a      	ldr	r2, [r3, #32]
 8004ff0:	4b81      	ldr	r3, [pc, #516]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d004      	beq.n	8005006 <HAL_RCC_OscConfig+0x7e>
 8004ffc:	4b7e      	ldr	r3, [pc, #504]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005004:	e005      	b.n	8005012 <HAL_RCC_OscConfig+0x8a>
 8005006:	4b7c      	ldr	r3, [pc, #496]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005008:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800500c:	091b      	lsrs	r3, r3, #4
 800500e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005012:	4293      	cmp	r3, r2
 8005014:	d223      	bcs.n	800505e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fdcc 	bl	8005bb8 <RCC_SetFlashLatencyFromMSIRange>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e3c0      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800502a:	4b73      	ldr	r3, [pc, #460]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a72      	ldr	r2, [pc, #456]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005030:	f043 0308 	orr.w	r3, r3, #8
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b70      	ldr	r3, [pc, #448]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	496d      	ldr	r1, [pc, #436]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005044:	4313      	orrs	r3, r2
 8005046:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005048:	4b6b      	ldr	r3, [pc, #428]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	4968      	ldr	r1, [pc, #416]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005058:	4313      	orrs	r3, r2
 800505a:	604b      	str	r3, [r1, #4]
 800505c:	e025      	b.n	80050aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800505e:	4b66      	ldr	r3, [pc, #408]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a65      	ldr	r2, [pc, #404]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005064:	f043 0308 	orr.w	r3, r3, #8
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	4b63      	ldr	r3, [pc, #396]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	4960      	ldr	r1, [pc, #384]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005078:	4313      	orrs	r3, r2
 800507a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800507c:	4b5e      	ldr	r3, [pc, #376]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	021b      	lsls	r3, r3, #8
 800508a:	495b      	ldr	r1, [pc, #364]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 800508c:	4313      	orrs	r3, r2
 800508e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fd8c 	bl	8005bb8 <RCC_SetFlashLatencyFromMSIRange>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e380      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050aa:	f000 fcc1 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 80050ae:	4602      	mov	r2, r0
 80050b0:	4b51      	ldr	r3, [pc, #324]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	091b      	lsrs	r3, r3, #4
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	4950      	ldr	r1, [pc, #320]	@ (80051fc <HAL_RCC_OscConfig+0x274>)
 80050bc:	5ccb      	ldrb	r3, [r1, r3]
 80050be:	f003 031f 	and.w	r3, r3, #31
 80050c2:	fa22 f303 	lsr.w	r3, r2, r3
 80050c6:	4a4e      	ldr	r2, [pc, #312]	@ (8005200 <HAL_RCC_OscConfig+0x278>)
 80050c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80050ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005204 <HAL_RCC_OscConfig+0x27c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fc facc 	bl	800166c <HAL_InitTick>
 80050d4:	4603      	mov	r3, r0
 80050d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d052      	beq.n	8005184 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	e364      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d032      	beq.n	8005150 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80050ea:	4b43      	ldr	r3, [pc, #268]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a42      	ldr	r2, [pc, #264]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050f6:	f7fc fb09 	bl	800170c <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050fe:	f7fc fb05 	bl	800170c <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e34d      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005110:	4b39      	ldr	r3, [pc, #228]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800511c:	4b36      	ldr	r3, [pc, #216]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a35      	ldr	r2, [pc, #212]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005122:	f043 0308 	orr.w	r3, r3, #8
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	4b33      	ldr	r3, [pc, #204]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	4930      	ldr	r1, [pc, #192]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005136:	4313      	orrs	r3, r2
 8005138:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800513a:	4b2f      	ldr	r3, [pc, #188]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	492b      	ldr	r1, [pc, #172]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 800514a:	4313      	orrs	r3, r2
 800514c:	604b      	str	r3, [r1, #4]
 800514e:	e01a      	b.n	8005186 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005150:	4b29      	ldr	r3, [pc, #164]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a28      	ldr	r2, [pc, #160]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800515c:	f7fc fad6 	bl	800170c <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005164:	f7fc fad2 	bl	800170c <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e31a      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005176:	4b20      	ldr	r3, [pc, #128]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f0      	bne.n	8005164 <HAL_RCC_OscConfig+0x1dc>
 8005182:	e000      	b.n	8005186 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005184:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d073      	beq.n	800527a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_OscConfig+0x21c>
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	2b0c      	cmp	r3, #12
 800519c:	d10e      	bne.n	80051bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d10b      	bne.n	80051bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a4:	4b14      	ldr	r3, [pc, #80]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d063      	beq.n	8005278 <HAL_RCC_OscConfig+0x2f0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d15f      	bne.n	8005278 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e2f7      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c4:	d106      	bne.n	80051d4 <HAL_RCC_OscConfig+0x24c>
 80051c6:	4b0c      	ldr	r3, [pc, #48]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a0b      	ldr	r2, [pc, #44]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 80051cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e025      	b.n	8005220 <HAL_RCC_OscConfig+0x298>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051dc:	d114      	bne.n	8005208 <HAL_RCC_OscConfig+0x280>
 80051de:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a05      	ldr	r2, [pc, #20]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 80051e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	4b03      	ldr	r3, [pc, #12]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a02      	ldr	r2, [pc, #8]	@ (80051f8 <HAL_RCC_OscConfig+0x270>)
 80051f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e013      	b.n	8005220 <HAL_RCC_OscConfig+0x298>
 80051f8:	40021000 	.word	0x40021000
 80051fc:	0800c074 	.word	0x0800c074
 8005200:	20000000 	.word	0x20000000
 8005204:	20000004 	.word	0x20000004
 8005208:	4ba0      	ldr	r3, [pc, #640]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a9f      	ldr	r2, [pc, #636]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 800520e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	4b9d      	ldr	r3, [pc, #628]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a9c      	ldr	r2, [pc, #624]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 800521a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800521e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d013      	beq.n	8005250 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fc fa70 	bl	800170c <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005230:	f7fc fa6c 	bl	800170c <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b64      	cmp	r3, #100	@ 0x64
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e2b4      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005242:	4b92      	ldr	r3, [pc, #584]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0x2a8>
 800524e:	e014      	b.n	800527a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fc fa5c 	bl	800170c <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005258:	f7fc fa58 	bl	800170c <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b64      	cmp	r3, #100	@ 0x64
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e2a0      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800526a:	4b88      	ldr	r3, [pc, #544]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0x2d0>
 8005276:	e000      	b.n	800527a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d060      	beq.n	8005348 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b04      	cmp	r3, #4
 800528a:	d005      	beq.n	8005298 <HAL_RCC_OscConfig+0x310>
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	2b0c      	cmp	r3, #12
 8005290:	d119      	bne.n	80052c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b02      	cmp	r3, #2
 8005296:	d116      	bne.n	80052c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005298:	4b7c      	ldr	r3, [pc, #496]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <HAL_RCC_OscConfig+0x328>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e27d      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b0:	4b76      	ldr	r3, [pc, #472]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	061b      	lsls	r3, r3, #24
 80052be:	4973      	ldr	r1, [pc, #460]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052c4:	e040      	b.n	8005348 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d023      	beq.n	8005316 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052ce:	4b6f      	ldr	r3, [pc, #444]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a6e      	ldr	r2, [pc, #440]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 80052d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052da:	f7fc fa17 	bl	800170c <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052e2:	f7fc fa13 	bl	800170c <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e25b      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052f4:	4b65      	ldr	r3, [pc, #404]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f0      	beq.n	80052e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005300:	4b62      	ldr	r3, [pc, #392]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	061b      	lsls	r3, r3, #24
 800530e:	495f      	ldr	r1, [pc, #380]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 8005310:	4313      	orrs	r3, r2
 8005312:	604b      	str	r3, [r1, #4]
 8005314:	e018      	b.n	8005348 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005316:	4b5d      	ldr	r3, [pc, #372]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a5c      	ldr	r2, [pc, #368]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 800531c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005322:	f7fc f9f3 	bl	800170c <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532a:	f7fc f9ef 	bl	800170c <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e237      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800533c:	4b53      	ldr	r3, [pc, #332]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f0      	bne.n	800532a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d03c      	beq.n	80053ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01c      	beq.n	8005396 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800535c:	4b4b      	ldr	r3, [pc, #300]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 800535e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005362:	4a4a      	ldr	r2, [pc, #296]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536c:	f7fc f9ce 	bl	800170c <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005374:	f7fc f9ca 	bl	800170c <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e212      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005386:	4b41      	ldr	r3, [pc, #260]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 8005388:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0ef      	beq.n	8005374 <HAL_RCC_OscConfig+0x3ec>
 8005394:	e01b      	b.n	80053ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005396:	4b3d      	ldr	r3, [pc, #244]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 8005398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800539c:	4a3b      	ldr	r2, [pc, #236]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 800539e:	f023 0301 	bic.w	r3, r3, #1
 80053a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a6:	f7fc f9b1 	bl	800170c <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ae:	f7fc f9ad 	bl	800170c <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e1f5      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053c0:	4b32      	ldr	r3, [pc, #200]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 80053c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ef      	bne.n	80053ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80a6 	beq.w	8005528 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053dc:	2300      	movs	r3, #0
 80053de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80053e0:	4b2a      	ldr	r3, [pc, #168]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 80053e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10d      	bne.n	8005408 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ec:	4b27      	ldr	r3, [pc, #156]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 80053ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f0:	4a26      	ldr	r2, [pc, #152]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 80053f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80053f8:	4b24      	ldr	r3, [pc, #144]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 80053fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005400:	60bb      	str	r3, [r7, #8]
 8005402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005404:	2301      	movs	r3, #1
 8005406:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005408:	4b21      	ldr	r3, [pc, #132]	@ (8005490 <HAL_RCC_OscConfig+0x508>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d118      	bne.n	8005446 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005414:	4b1e      	ldr	r3, [pc, #120]	@ (8005490 <HAL_RCC_OscConfig+0x508>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1d      	ldr	r2, [pc, #116]	@ (8005490 <HAL_RCC_OscConfig+0x508>)
 800541a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800541e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005420:	f7fc f974 	bl	800170c <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005428:	f7fc f970 	bl	800170c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e1b8      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800543a:	4b15      	ldr	r3, [pc, #84]	@ (8005490 <HAL_RCC_OscConfig+0x508>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d108      	bne.n	8005460 <HAL_RCC_OscConfig+0x4d8>
 800544e:	4b0f      	ldr	r3, [pc, #60]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 8005450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005454:	4a0d      	ldr	r2, [pc, #52]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 8005456:	f043 0301 	orr.w	r3, r3, #1
 800545a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800545e:	e029      	b.n	80054b4 <HAL_RCC_OscConfig+0x52c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2b05      	cmp	r3, #5
 8005466:	d115      	bne.n	8005494 <HAL_RCC_OscConfig+0x50c>
 8005468:	4b08      	ldr	r3, [pc, #32]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800546e:	4a07      	ldr	r2, [pc, #28]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 8005470:	f043 0304 	orr.w	r3, r3, #4
 8005474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005478:	4b04      	ldr	r3, [pc, #16]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800547e:	4a03      	ldr	r2, [pc, #12]	@ (800548c <HAL_RCC_OscConfig+0x504>)
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005488:	e014      	b.n	80054b4 <HAL_RCC_OscConfig+0x52c>
 800548a:	bf00      	nop
 800548c:	40021000 	.word	0x40021000
 8005490:	40007000 	.word	0x40007000
 8005494:	4b9d      	ldr	r3, [pc, #628]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549a:	4a9c      	ldr	r2, [pc, #624]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054a4:	4b99      	ldr	r3, [pc, #612]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054aa:	4a98      	ldr	r2, [pc, #608]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 80054ac:	f023 0304 	bic.w	r3, r3, #4
 80054b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d016      	beq.n	80054ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054bc:	f7fc f926 	bl	800170c <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c2:	e00a      	b.n	80054da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c4:	f7fc f922 	bl	800170c <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e168      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054da:	4b8c      	ldr	r3, [pc, #560]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0ed      	beq.n	80054c4 <HAL_RCC_OscConfig+0x53c>
 80054e8:	e015      	b.n	8005516 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ea:	f7fc f90f 	bl	800170c <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054f0:	e00a      	b.n	8005508 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f2:	f7fc f90b 	bl	800170c <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005500:	4293      	cmp	r3, r2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e151      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005508:	4b80      	ldr	r3, [pc, #512]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1ed      	bne.n	80054f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005516:	7ffb      	ldrb	r3, [r7, #31]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d105      	bne.n	8005528 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800551c:	4b7b      	ldr	r3, [pc, #492]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 800551e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005520:	4a7a      	ldr	r2, [pc, #488]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 8005522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005526:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d03c      	beq.n	80055ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01c      	beq.n	8005576 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800553c:	4b73      	ldr	r3, [pc, #460]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 800553e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005542:	4a72      	ldr	r2, [pc, #456]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554c:	f7fc f8de 	bl	800170c <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005554:	f7fc f8da 	bl	800170c <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e122      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005566:	4b69      	ldr	r3, [pc, #420]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 8005568:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ef      	beq.n	8005554 <HAL_RCC_OscConfig+0x5cc>
 8005574:	e01b      	b.n	80055ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005576:	4b65      	ldr	r3, [pc, #404]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 8005578:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800557c:	4a63      	ldr	r2, [pc, #396]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005586:	f7fc f8c1 	bl	800170c <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800558e:	f7fc f8bd 	bl	800170c <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e105      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055a0:	4b5a      	ldr	r3, [pc, #360]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 80055a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1ef      	bne.n	800558e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80f9 	beq.w	80057aa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055bc:	2b02      	cmp	r3, #2
 80055be:	f040 80cf 	bne.w	8005760 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80055c2:	4b52      	ldr	r3, [pc, #328]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f003 0203 	and.w	r2, r3, #3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d12c      	bne.n	8005630 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e0:	3b01      	subs	r3, #1
 80055e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d123      	bne.n	8005630 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d11b      	bne.n	8005630 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005602:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005604:	429a      	cmp	r2, r3
 8005606:	d113      	bne.n	8005630 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005612:	085b      	lsrs	r3, r3, #1
 8005614:	3b01      	subs	r3, #1
 8005616:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005618:	429a      	cmp	r2, r3
 800561a:	d109      	bne.n	8005630 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	085b      	lsrs	r3, r3, #1
 8005628:	3b01      	subs	r3, #1
 800562a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800562c:	429a      	cmp	r2, r3
 800562e:	d071      	beq.n	8005714 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2b0c      	cmp	r3, #12
 8005634:	d068      	beq.n	8005708 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005636:	4b35      	ldr	r3, [pc, #212]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d105      	bne.n	800564e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005642:	4b32      	ldr	r3, [pc, #200]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e0ac      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005652:	4b2e      	ldr	r3, [pc, #184]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a2d      	ldr	r2, [pc, #180]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 8005658:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800565c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800565e:	f7fc f855 	bl	800170c <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005666:	f7fc f851 	bl	800170c <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e099      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005678:	4b24      	ldr	r3, [pc, #144]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f0      	bne.n	8005666 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005684:	4b21      	ldr	r3, [pc, #132]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	4b21      	ldr	r3, [pc, #132]	@ (8005710 <HAL_RCC_OscConfig+0x788>)
 800568a:	4013      	ands	r3, r2
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005694:	3a01      	subs	r2, #1
 8005696:	0112      	lsls	r2, r2, #4
 8005698:	4311      	orrs	r1, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800569e:	0212      	lsls	r2, r2, #8
 80056a0:	4311      	orrs	r1, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056a6:	0852      	lsrs	r2, r2, #1
 80056a8:	3a01      	subs	r2, #1
 80056aa:	0552      	lsls	r2, r2, #21
 80056ac:	4311      	orrs	r1, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80056b2:	0852      	lsrs	r2, r2, #1
 80056b4:	3a01      	subs	r2, #1
 80056b6:	0652      	lsls	r2, r2, #25
 80056b8:	4311      	orrs	r1, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056be:	06d2      	lsls	r2, r2, #27
 80056c0:	430a      	orrs	r2, r1
 80056c2:	4912      	ldr	r1, [pc, #72]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80056c8:	4b10      	ldr	r3, [pc, #64]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a0f      	ldr	r2, [pc, #60]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 80056ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056d4:	4b0d      	ldr	r3, [pc, #52]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4a0c      	ldr	r2, [pc, #48]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 80056da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056e0:	f7fc f814 	bl	800170c <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e8:	f7fc f810 	bl	800170c <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e058      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056fa:	4b04      	ldr	r3, [pc, #16]	@ (800570c <HAL_RCC_OscConfig+0x784>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005706:	e050      	b.n	80057aa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e04f      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
 800570c:	40021000 	.word	0x40021000
 8005710:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005714:	4b27      	ldr	r3, [pc, #156]	@ (80057b4 <HAL_RCC_OscConfig+0x82c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d144      	bne.n	80057aa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005720:	4b24      	ldr	r3, [pc, #144]	@ (80057b4 <HAL_RCC_OscConfig+0x82c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a23      	ldr	r2, [pc, #140]	@ (80057b4 <HAL_RCC_OscConfig+0x82c>)
 8005726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800572a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800572c:	4b21      	ldr	r3, [pc, #132]	@ (80057b4 <HAL_RCC_OscConfig+0x82c>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	4a20      	ldr	r2, [pc, #128]	@ (80057b4 <HAL_RCC_OscConfig+0x82c>)
 8005732:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005736:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005738:	f7fb ffe8 	bl	800170c <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005740:	f7fb ffe4 	bl	800170c <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e02c      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005752:	4b18      	ldr	r3, [pc, #96]	@ (80057b4 <HAL_RCC_OscConfig+0x82c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f0      	beq.n	8005740 <HAL_RCC_OscConfig+0x7b8>
 800575e:	e024      	b.n	80057aa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2b0c      	cmp	r3, #12
 8005764:	d01f      	beq.n	80057a6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005766:	4b13      	ldr	r3, [pc, #76]	@ (80057b4 <HAL_RCC_OscConfig+0x82c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a12      	ldr	r2, [pc, #72]	@ (80057b4 <HAL_RCC_OscConfig+0x82c>)
 800576c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005772:	f7fb ffcb 	bl	800170c <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577a:	f7fb ffc7 	bl	800170c <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e00f      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800578c:	4b09      	ldr	r3, [pc, #36]	@ (80057b4 <HAL_RCC_OscConfig+0x82c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f0      	bne.n	800577a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005798:	4b06      	ldr	r3, [pc, #24]	@ (80057b4 <HAL_RCC_OscConfig+0x82c>)
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	4905      	ldr	r1, [pc, #20]	@ (80057b4 <HAL_RCC_OscConfig+0x82c>)
 800579e:	4b06      	ldr	r3, [pc, #24]	@ (80057b8 <HAL_RCC_OscConfig+0x830>)
 80057a0:	4013      	ands	r3, r2
 80057a2:	60cb      	str	r3, [r1, #12]
 80057a4:	e001      	b.n	80057aa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40021000 	.word	0x40021000
 80057b8:	feeefffc 	.word	0xfeeefffc

080057bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e11d      	b.n	8005a10 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057d4:	4b90      	ldr	r3, [pc, #576]	@ (8005a18 <HAL_RCC_ClockConfig+0x25c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d910      	bls.n	8005804 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005a18 <HAL_RCC_ClockConfig+0x25c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f023 020f 	bic.w	r2, r3, #15
 80057ea:	498b      	ldr	r1, [pc, #556]	@ (8005a18 <HAL_RCC_ClockConfig+0x25c>)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f2:	4b89      	ldr	r3, [pc, #548]	@ (8005a18 <HAL_RCC_ClockConfig+0x25c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d001      	beq.n	8005804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e105      	b.n	8005a10 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d010      	beq.n	8005832 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	4b81      	ldr	r3, [pc, #516]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800581c:	429a      	cmp	r2, r3
 800581e:	d908      	bls.n	8005832 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005820:	4b7e      	ldr	r3, [pc, #504]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	497b      	ldr	r1, [pc, #492]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 800582e:	4313      	orrs	r3, r2
 8005830:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d079      	beq.n	8005932 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b03      	cmp	r3, #3
 8005844:	d11e      	bne.n	8005884 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005846:	4b75      	ldr	r3, [pc, #468]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e0dc      	b.n	8005a10 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005856:	f000 fa09 	bl	8005c6c <RCC_GetSysClockFreqFromPLLSource>
 800585a:	4603      	mov	r3, r0
 800585c:	4a70      	ldr	r2, [pc, #448]	@ (8005a20 <HAL_RCC_ClockConfig+0x264>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d946      	bls.n	80058f0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005862:	4b6e      	ldr	r3, [pc, #440]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d140      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800586e:	4b6b      	ldr	r3, [pc, #428]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005876:	4a69      	ldr	r2, [pc, #420]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 8005878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800587c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800587e:	2380      	movs	r3, #128	@ 0x80
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	e035      	b.n	80058f0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d107      	bne.n	800589c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800588c:	4b63      	ldr	r3, [pc, #396]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d115      	bne.n	80058c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0b9      	b.n	8005a10 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d107      	bne.n	80058b4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058a4:	4b5d      	ldr	r3, [pc, #372]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d109      	bne.n	80058c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e0ad      	b.n	8005a10 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058b4:	4b59      	ldr	r3, [pc, #356]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0a5      	b.n	8005a10 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80058c4:	f000 f8b4 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 80058c8:	4603      	mov	r3, r0
 80058ca:	4a55      	ldr	r2, [pc, #340]	@ (8005a20 <HAL_RCC_ClockConfig+0x264>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d90f      	bls.n	80058f0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80058d0:	4b52      	ldr	r3, [pc, #328]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d109      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058dc:	4b4f      	ldr	r3, [pc, #316]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058e4:	4a4d      	ldr	r2, [pc, #308]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 80058e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058ec:	2380      	movs	r3, #128	@ 0x80
 80058ee:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058f0:	4b4a      	ldr	r3, [pc, #296]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f023 0203 	bic.w	r2, r3, #3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4947      	ldr	r1, [pc, #284]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005902:	f7fb ff03 	bl	800170c <HAL_GetTick>
 8005906:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005908:	e00a      	b.n	8005920 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800590a:	f7fb feff 	bl	800170c <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005918:	4293      	cmp	r3, r2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e077      	b.n	8005a10 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005920:	4b3e      	ldr	r3, [pc, #248]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 020c 	and.w	r2, r3, #12
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	429a      	cmp	r2, r3
 8005930:	d1eb      	bne.n	800590a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b80      	cmp	r3, #128	@ 0x80
 8005936:	d105      	bne.n	8005944 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005938:	4b38      	ldr	r3, [pc, #224]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4a37      	ldr	r2, [pc, #220]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 800593e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005942:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d010      	beq.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	4b31      	ldr	r3, [pc, #196]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800595c:	429a      	cmp	r2, r3
 800595e:	d208      	bcs.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005960:	4b2e      	ldr	r3, [pc, #184]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	492b      	ldr	r1, [pc, #172]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 800596e:	4313      	orrs	r3, r2
 8005970:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005972:	4b29      	ldr	r3, [pc, #164]	@ (8005a18 <HAL_RCC_ClockConfig+0x25c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d210      	bcs.n	80059a2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005980:	4b25      	ldr	r3, [pc, #148]	@ (8005a18 <HAL_RCC_ClockConfig+0x25c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f023 020f 	bic.w	r2, r3, #15
 8005988:	4923      	ldr	r1, [pc, #140]	@ (8005a18 <HAL_RCC_ClockConfig+0x25c>)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	4313      	orrs	r3, r2
 800598e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005990:	4b21      	ldr	r3, [pc, #132]	@ (8005a18 <HAL_RCC_ClockConfig+0x25c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d001      	beq.n	80059a2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e036      	b.n	8005a10 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d008      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059ae:	4b1b      	ldr	r3, [pc, #108]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	4918      	ldr	r1, [pc, #96]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d009      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059cc:	4b13      	ldr	r3, [pc, #76]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	4910      	ldr	r1, [pc, #64]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059e0:	f000 f826 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 80059e4:	4602      	mov	r2, r0
 80059e6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a1c <HAL_RCC_ClockConfig+0x260>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	091b      	lsrs	r3, r3, #4
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	490c      	ldr	r1, [pc, #48]	@ (8005a24 <HAL_RCC_ClockConfig+0x268>)
 80059f2:	5ccb      	ldrb	r3, [r1, r3]
 80059f4:	f003 031f 	and.w	r3, r3, #31
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
 80059fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005a28 <HAL_RCC_ClockConfig+0x26c>)
 80059fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a00:	4b0a      	ldr	r3, [pc, #40]	@ (8005a2c <HAL_RCC_ClockConfig+0x270>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fb fe31 	bl	800166c <HAL_InitTick>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	73fb      	strb	r3, [r7, #15]

  return status;
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	40022000 	.word	0x40022000
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	04c4b400 	.word	0x04c4b400
 8005a24:	0800c074 	.word	0x0800c074
 8005a28:	20000000 	.word	0x20000000
 8005a2c:	20000004 	.word	0x20000004

08005a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b089      	sub	sp, #36	@ 0x24
 8005a34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a48:	4b3b      	ldr	r3, [pc, #236]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0303 	and.w	r3, r3, #3
 8005a50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_RCC_GetSysClockFreq+0x34>
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b0c      	cmp	r3, #12
 8005a5c:	d121      	bne.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d11e      	bne.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a64:	4b34      	ldr	r3, [pc, #208]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d107      	bne.n	8005a80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a70:	4b31      	ldr	r3, [pc, #196]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	e005      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a80:	4b2d      	ldr	r3, [pc, #180]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8005b3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10d      	bne.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005aa0:	e00a      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d102      	bne.n	8005aae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005aa8:	4b25      	ldr	r3, [pc, #148]	@ (8005b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8005aaa:	61bb      	str	r3, [r7, #24]
 8005aac:	e004      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d101      	bne.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ab4:	4b23      	ldr	r3, [pc, #140]	@ (8005b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ab6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b0c      	cmp	r3, #12
 8005abc:	d134      	bne.n	8005b28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005abe:	4b1e      	ldr	r3, [pc, #120]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d003      	beq.n	8005ad6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d003      	beq.n	8005adc <HAL_RCC_GetSysClockFreq+0xac>
 8005ad4:	e005      	b.n	8005ae2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ad8:	617b      	str	r3, [r7, #20]
      break;
 8005ada:	e005      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005adc:	4b19      	ldr	r3, [pc, #100]	@ (8005b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ade:	617b      	str	r3, [r7, #20]
      break;
 8005ae0:	e002      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	617b      	str	r3, [r7, #20]
      break;
 8005ae6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ae8:	4b13      	ldr	r3, [pc, #76]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	3301      	adds	r3, #1
 8005af4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005af6:	4b10      	ldr	r3, [pc, #64]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	0a1b      	lsrs	r3, r3, #8
 8005afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	fb03 f202 	mul.w	r2, r3, r2
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	0e5b      	lsrs	r3, r3, #25
 8005b14:	f003 0303 	and.w	r3, r3, #3
 8005b18:	3301      	adds	r3, #1
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b28:	69bb      	ldr	r3, [r7, #24]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3724      	adds	r7, #36	@ 0x24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	0800c08c 	.word	0x0800c08c
 8005b40:	00f42400 	.word	0x00f42400
 8005b44:	007a1200 	.word	0x007a1200

08005b48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b4c:	4b03      	ldr	r3, [pc, #12]	@ (8005b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	20000000 	.word	0x20000000

08005b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b64:	f7ff fff0 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	4b06      	ldr	r3, [pc, #24]	@ (8005b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	4904      	ldr	r1, [pc, #16]	@ (8005b88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b76:	5ccb      	ldrb	r3, [r1, r3]
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40021000 	.word	0x40021000
 8005b88:	0800c084 	.word	0x0800c084

08005b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b90:	f7ff ffda 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 8005b94:	4602      	mov	r2, r0
 8005b96:	4b06      	ldr	r3, [pc, #24]	@ (8005bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	0adb      	lsrs	r3, r3, #11
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	4904      	ldr	r1, [pc, #16]	@ (8005bb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ba2:	5ccb      	ldrb	r3, [r1, r3]
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	0800c084 	.word	0x0800c084

08005bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bc4:	4b27      	ldr	r3, [pc, #156]	@ (8005c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bd0:	f7ff f8f6 	bl	8004dc0 <HAL_PWREx_GetVoltageRange>
 8005bd4:	6178      	str	r0, [r7, #20]
 8005bd6:	e014      	b.n	8005c02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bd8:	4b22      	ldr	r3, [pc, #136]	@ (8005c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bdc:	4a21      	ldr	r2, [pc, #132]	@ (8005c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005be4:	4b1f      	ldr	r3, [pc, #124]	@ (8005c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bf0:	f7ff f8e6 	bl	8004dc0 <HAL_PWREx_GetVoltageRange>
 8005bf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8005c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8005c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c00:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c08:	d10b      	bne.n	8005c22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b80      	cmp	r3, #128	@ 0x80
 8005c0e:	d913      	bls.n	8005c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2ba0      	cmp	r3, #160	@ 0xa0
 8005c14:	d902      	bls.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c16:	2302      	movs	r3, #2
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	e00d      	b.n	8005c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	e00a      	b.n	8005c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c26:	d902      	bls.n	8005c2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005c28:	2302      	movs	r3, #2
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	e004      	b.n	8005c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b70      	cmp	r3, #112	@ 0x70
 8005c32:	d101      	bne.n	8005c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c34:	2301      	movs	r3, #1
 8005c36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c38:	4b0b      	ldr	r3, [pc, #44]	@ (8005c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f023 020f 	bic.w	r2, r3, #15
 8005c40:	4909      	ldr	r1, [pc, #36]	@ (8005c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c48:	4b07      	ldr	r3, [pc, #28]	@ (8005c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d001      	beq.n	8005c5a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40021000 	.word	0x40021000
 8005c68:	40022000 	.word	0x40022000

08005c6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c72:	4b2d      	ldr	r3, [pc, #180]	@ (8005d28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d00b      	beq.n	8005c9a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d825      	bhi.n	8005cd4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d008      	beq.n	8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d11f      	bne.n	8005cd4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005c94:	4b25      	ldr	r3, [pc, #148]	@ (8005d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005c96:	613b      	str	r3, [r7, #16]
    break;
 8005c98:	e01f      	b.n	8005cda <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005c9a:	4b25      	ldr	r3, [pc, #148]	@ (8005d30 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005c9c:	613b      	str	r3, [r7, #16]
    break;
 8005c9e:	e01c      	b.n	8005cda <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ca0:	4b21      	ldr	r3, [pc, #132]	@ (8005d28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d107      	bne.n	8005cbc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cac:	4b1e      	ldr	r3, [pc, #120]	@ (8005d28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	f003 030f 	and.w	r3, r3, #15
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	e005      	b.n	8005cc8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8005d28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8005d34 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd0:	613b      	str	r3, [r7, #16]
    break;
 8005cd2:	e002      	b.n	8005cda <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	613b      	str	r3, [r7, #16]
    break;
 8005cd8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cda:	4b13      	ldr	r3, [pc, #76]	@ (8005d28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	091b      	lsrs	r3, r3, #4
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	fb03 f202 	mul.w	r2, r3, r2
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d00:	4b09      	ldr	r3, [pc, #36]	@ (8005d28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	0e5b      	lsrs	r3, r3, #25
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005d1a:	683b      	ldr	r3, [r7, #0]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	00f42400 	.word	0x00f42400
 8005d30:	007a1200 	.word	0x007a1200
 8005d34:	0800c08c 	.word	0x0800c08c

08005d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d40:	2300      	movs	r3, #0
 8005d42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d44:	2300      	movs	r3, #0
 8005d46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d040      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d58:	2b80      	cmp	r3, #128	@ 0x80
 8005d5a:	d02a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d5c:	2b80      	cmp	r3, #128	@ 0x80
 8005d5e:	d825      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d60:	2b60      	cmp	r3, #96	@ 0x60
 8005d62:	d026      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d64:	2b60      	cmp	r3, #96	@ 0x60
 8005d66:	d821      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d68:	2b40      	cmp	r3, #64	@ 0x40
 8005d6a:	d006      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005d6c:	2b40      	cmp	r3, #64	@ 0x40
 8005d6e:	d81d      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d009      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	d010      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005d78:	e018      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d7a:	4b89      	ldr	r3, [pc, #548]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	4a88      	ldr	r2, [pc, #544]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d84:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d86:	e015      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fb02 	bl	8006398 <RCCEx_PLLSAI1_Config>
 8005d94:	4603      	mov	r3, r0
 8005d96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d98:	e00c      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3320      	adds	r3, #32
 8005d9e:	2100      	movs	r1, #0
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fbed 	bl	8006580 <RCCEx_PLLSAI2_Config>
 8005da6:	4603      	mov	r3, r0
 8005da8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005daa:	e003      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	74fb      	strb	r3, [r7, #19]
      break;
 8005db0:	e000      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005db4:	7cfb      	ldrb	r3, [r7, #19]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10b      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dba:	4b79      	ldr	r3, [pc, #484]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dc0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dc8:	4975      	ldr	r1, [pc, #468]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005dd0:	e001      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd2:	7cfb      	ldrb	r3, [r7, #19]
 8005dd4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d047      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dea:	d030      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005dec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005df0:	d82a      	bhi.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005df6:	d02a      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005df8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dfc:	d824      	bhi.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005dfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e02:	d008      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e08:	d81e      	bhi.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e12:	d010      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005e14:	e018      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e16:	4b62      	ldr	r3, [pc, #392]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	4a61      	ldr	r2, [pc, #388]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e20:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e22:	e015      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3304      	adds	r3, #4
 8005e28:	2100      	movs	r1, #0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fab4 	bl	8006398 <RCCEx_PLLSAI1_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e34:	e00c      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3320      	adds	r3, #32
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fb9f 	bl	8006580 <RCCEx_PLLSAI2_Config>
 8005e42:	4603      	mov	r3, r0
 8005e44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e46:	e003      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	74fb      	strb	r3, [r7, #19]
      break;
 8005e4c:	e000      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e50:	7cfb      	ldrb	r3, [r7, #19]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10b      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e56:	4b52      	ldr	r3, [pc, #328]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e64:	494e      	ldr	r1, [pc, #312]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005e6c:	e001      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6e:	7cfb      	ldrb	r3, [r7, #19]
 8005e70:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 809f 	beq.w	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e80:	2300      	movs	r3, #0
 8005e82:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e84:	4b46      	ldr	r3, [pc, #280]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e000      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005e94:	2300      	movs	r3, #0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00d      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e9a:	4b41      	ldr	r3, [pc, #260]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9e:	4a40      	ldr	r2, [pc, #256]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eae:	60bb      	str	r3, [r7, #8]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a3a      	ldr	r2, [pc, #232]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ec2:	f7fb fc23 	bl	800170c <HAL_GetTick>
 8005ec6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ec8:	e009      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eca:	f7fb fc1f 	bl	800170c <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d902      	bls.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	74fb      	strb	r3, [r7, #19]
        break;
 8005edc:	e005      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ede:	4b31      	ldr	r3, [pc, #196]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0ef      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005eea:	7cfb      	ldrb	r3, [r7, #19]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d15b      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005efa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01f      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d019      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f0e:	4b24      	ldr	r3, [pc, #144]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f18:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f1a:	4b21      	ldr	r3, [pc, #132]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f20:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f30:	4a1b      	ldr	r2, [pc, #108]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f3a:	4a19      	ldr	r2, [pc, #100]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d016      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4c:	f7fb fbde 	bl	800170c <HAL_GetTick>
 8005f50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f52:	e00b      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f54:	f7fb fbda 	bl	800170c <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d902      	bls.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	74fb      	strb	r3, [r7, #19]
            break;
 8005f6a:	e006      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0ec      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005f7a:	7cfb      	ldrb	r3, [r7, #19]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10c      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f80:	4b07      	ldr	r3, [pc, #28]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f90:	4903      	ldr	r1, [pc, #12]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005f98:	e008      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f9a:	7cfb      	ldrb	r3, [r7, #19]
 8005f9c:	74bb      	strb	r3, [r7, #18]
 8005f9e:	e005      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa8:	7cfb      	ldrb	r3, [r7, #19]
 8005faa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fac:	7c7b      	ldrb	r3, [r7, #17]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d105      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb2:	4ba0      	ldr	r3, [pc, #640]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb6:	4a9f      	ldr	r2, [pc, #636]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fbc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fca:	4b9a      	ldr	r3, [pc, #616]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd0:	f023 0203 	bic.w	r2, r3, #3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd8:	4996      	ldr	r1, [pc, #600]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00a      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fec:	4b91      	ldr	r3, [pc, #580]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff2:	f023 020c 	bic.w	r2, r3, #12
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	498e      	ldr	r1, [pc, #568]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0304 	and.w	r3, r3, #4
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800600e:	4b89      	ldr	r3, [pc, #548]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006014:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601c:	4985      	ldr	r1, [pc, #532]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800601e:	4313      	orrs	r3, r2
 8006020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00a      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006030:	4b80      	ldr	r3, [pc, #512]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006036:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800603e:	497d      	ldr	r1, [pc, #500]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006040:	4313      	orrs	r3, r2
 8006042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006052:	4b78      	ldr	r3, [pc, #480]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006058:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006060:	4974      	ldr	r1, [pc, #464]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00a      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006074:	4b6f      	ldr	r3, [pc, #444]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006082:	496c      	ldr	r1, [pc, #432]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006084:	4313      	orrs	r3, r2
 8006086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006096:	4b67      	ldr	r3, [pc, #412]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060a4:	4963      	ldr	r1, [pc, #396]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060b8:	4b5e      	ldr	r3, [pc, #376]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060c6:	495b      	ldr	r1, [pc, #364]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060da:	4b56      	ldr	r3, [pc, #344]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e8:	4952      	ldr	r1, [pc, #328]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060fc:	4b4d      	ldr	r3, [pc, #308]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006102:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610a:	494a      	ldr	r1, [pc, #296]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800611e:	4b45      	ldr	r3, [pc, #276]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006124:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800612c:	4941      	ldr	r1, [pc, #260]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800612e:	4313      	orrs	r3, r2
 8006130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006140:	4b3c      	ldr	r3, [pc, #240]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006142:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006146:	f023 0203 	bic.w	r2, r3, #3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800614e:	4939      	ldr	r1, [pc, #228]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006150:	4313      	orrs	r3, r2
 8006152:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d028      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006162:	4b34      	ldr	r3, [pc, #208]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006168:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006170:	4930      	ldr	r1, [pc, #192]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006172:	4313      	orrs	r3, r2
 8006174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800617c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006180:	d106      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006182:	4b2c      	ldr	r3, [pc, #176]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	4a2b      	ldr	r2, [pc, #172]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006188:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800618c:	60d3      	str	r3, [r2, #12]
 800618e:	e011      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006194:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006198:	d10c      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3304      	adds	r3, #4
 800619e:	2101      	movs	r1, #1
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 f8f9 	bl	8006398 <RCCEx_PLLSAI1_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80061aa:	7cfb      	ldrb	r3, [r7, #19]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80061b0:	7cfb      	ldrb	r3, [r7, #19]
 80061b2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d04d      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061c8:	d108      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80061ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061d0:	4a18      	ldr	r2, [pc, #96]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061d6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80061da:	e012      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061dc:	4b15      	ldr	r3, [pc, #84]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061e2:	4a14      	ldr	r2, [pc, #80]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061e8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80061ec:	4b11      	ldr	r3, [pc, #68]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061fa:	490e      	ldr	r1, [pc, #56]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800620a:	d106      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800620c:	4b09      	ldr	r3, [pc, #36]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	4a08      	ldr	r2, [pc, #32]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006216:	60d3      	str	r3, [r2, #12]
 8006218:	e020      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800621e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006222:	d109      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006224:	4b03      	ldr	r3, [pc, #12]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4a02      	ldr	r2, [pc, #8]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800622a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800622e:	60d3      	str	r3, [r2, #12]
 8006230:	e014      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006232:	bf00      	nop
 8006234:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800623c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006240:	d10c      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3304      	adds	r3, #4
 8006246:	2101      	movs	r1, #1
 8006248:	4618      	mov	r0, r3
 800624a:	f000 f8a5 	bl	8006398 <RCCEx_PLLSAI1_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006252:	7cfb      	ldrb	r3, [r7, #19]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006258:	7cfb      	ldrb	r3, [r7, #19]
 800625a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d028      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006268:	4b4a      	ldr	r3, [pc, #296]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800626a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800626e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006276:	4947      	ldr	r1, [pc, #284]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006278:	4313      	orrs	r3, r2
 800627a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006286:	d106      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006288:	4b42      	ldr	r3, [pc, #264]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	4a41      	ldr	r2, [pc, #260]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800628e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006292:	60d3      	str	r3, [r2, #12]
 8006294:	e011      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800629a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800629e:	d10c      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3304      	adds	r3, #4
 80062a4:	2101      	movs	r1, #1
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 f876 	bl	8006398 <RCCEx_PLLSAI1_Config>
 80062ac:	4603      	mov	r3, r0
 80062ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062b0:	7cfb      	ldrb	r3, [r7, #19]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80062b6:	7cfb      	ldrb	r3, [r7, #19]
 80062b8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01e      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062c6:	4b33      	ldr	r3, [pc, #204]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062cc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062d6:	492f      	ldr	r1, [pc, #188]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062e8:	d10c      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3304      	adds	r3, #4
 80062ee:	2102      	movs	r1, #2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 f851 	bl	8006398 <RCCEx_PLLSAI1_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062fa:	7cfb      	ldrb	r3, [r7, #19]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006300:	7cfb      	ldrb	r3, [r7, #19]
 8006302:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00b      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006310:	4b20      	ldr	r3, [pc, #128]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006312:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006316:	f023 0204 	bic.w	r2, r3, #4
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006320:	491c      	ldr	r1, [pc, #112]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006334:	4b17      	ldr	r3, [pc, #92]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006336:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800633a:	f023 0218 	bic.w	r2, r3, #24
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006344:	4913      	ldr	r1, [pc, #76]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d017      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006358:	4b0e      	ldr	r3, [pc, #56]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800635a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800635e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006368:	490a      	ldr	r1, [pc, #40]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006376:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800637a:	d105      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800637c:	4b05      	ldr	r3, [pc, #20]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	4a04      	ldr	r2, [pc, #16]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006382:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006386:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006388:	7cbb      	ldrb	r3, [r7, #18]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	40021000 	.word	0x40021000

08006398 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063a6:	4b72      	ldr	r3, [pc, #456]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00e      	beq.n	80063d0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063b2:	4b6f      	ldr	r3, [pc, #444]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f003 0203 	and.w	r2, r3, #3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d103      	bne.n	80063ca <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
       ||
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d142      	bne.n	8006450 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	73fb      	strb	r3, [r7, #15]
 80063ce:	e03f      	b.n	8006450 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d018      	beq.n	800640a <RCCEx_PLLSAI1_Config+0x72>
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d825      	bhi.n	8006428 <RCCEx_PLLSAI1_Config+0x90>
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d002      	beq.n	80063e6 <RCCEx_PLLSAI1_Config+0x4e>
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d009      	beq.n	80063f8 <RCCEx_PLLSAI1_Config+0x60>
 80063e4:	e020      	b.n	8006428 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063e6:	4b62      	ldr	r3, [pc, #392]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d11d      	bne.n	800642e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063f6:	e01a      	b.n	800642e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063f8:	4b5d      	ldr	r3, [pc, #372]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006400:	2b00      	cmp	r3, #0
 8006402:	d116      	bne.n	8006432 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006408:	e013      	b.n	8006432 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800640a:	4b59      	ldr	r3, [pc, #356]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10f      	bne.n	8006436 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006416:	4b56      	ldr	r3, [pc, #344]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006426:	e006      	b.n	8006436 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]
      break;
 800642c:	e004      	b.n	8006438 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800642e:	bf00      	nop
 8006430:	e002      	b.n	8006438 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006432:	bf00      	nop
 8006434:	e000      	b.n	8006438 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006436:	bf00      	nop
    }

    if(status == HAL_OK)
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d108      	bne.n	8006450 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800643e:	4b4c      	ldr	r3, [pc, #304]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f023 0203 	bic.w	r2, r3, #3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4949      	ldr	r1, [pc, #292]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 800644c:	4313      	orrs	r3, r2
 800644e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f040 8086 	bne.w	8006564 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006458:	4b45      	ldr	r3, [pc, #276]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a44      	ldr	r2, [pc, #272]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 800645e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006464:	f7fb f952 	bl	800170c <HAL_GetTick>
 8006468:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800646a:	e009      	b.n	8006480 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800646c:	f7fb f94e 	bl	800170c <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d902      	bls.n	8006480 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	73fb      	strb	r3, [r7, #15]
        break;
 800647e:	e005      	b.n	800648c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006480:	4b3b      	ldr	r3, [pc, #236]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1ef      	bne.n	800646c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d168      	bne.n	8006564 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d113      	bne.n	80064c0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006498:	4b35      	ldr	r3, [pc, #212]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	4b35      	ldr	r3, [pc, #212]	@ (8006574 <RCCEx_PLLSAI1_Config+0x1dc>)
 800649e:	4013      	ands	r3, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6892      	ldr	r2, [r2, #8]
 80064a4:	0211      	lsls	r1, r2, #8
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	68d2      	ldr	r2, [r2, #12]
 80064aa:	06d2      	lsls	r2, r2, #27
 80064ac:	4311      	orrs	r1, r2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6852      	ldr	r2, [r2, #4]
 80064b2:	3a01      	subs	r2, #1
 80064b4:	0112      	lsls	r2, r2, #4
 80064b6:	430a      	orrs	r2, r1
 80064b8:	492d      	ldr	r1, [pc, #180]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	610b      	str	r3, [r1, #16]
 80064be:	e02d      	b.n	800651c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d115      	bne.n	80064f2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064c6:	4b2a      	ldr	r3, [pc, #168]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006578 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6892      	ldr	r2, [r2, #8]
 80064d2:	0211      	lsls	r1, r2, #8
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6912      	ldr	r2, [r2, #16]
 80064d8:	0852      	lsrs	r2, r2, #1
 80064da:	3a01      	subs	r2, #1
 80064dc:	0552      	lsls	r2, r2, #21
 80064de:	4311      	orrs	r1, r2
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6852      	ldr	r2, [r2, #4]
 80064e4:	3a01      	subs	r2, #1
 80064e6:	0112      	lsls	r2, r2, #4
 80064e8:	430a      	orrs	r2, r1
 80064ea:	4921      	ldr	r1, [pc, #132]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	610b      	str	r3, [r1, #16]
 80064f0:	e014      	b.n	800651c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	4b21      	ldr	r3, [pc, #132]	@ (800657c <RCCEx_PLLSAI1_Config+0x1e4>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6892      	ldr	r2, [r2, #8]
 80064fe:	0211      	lsls	r1, r2, #8
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6952      	ldr	r2, [r2, #20]
 8006504:	0852      	lsrs	r2, r2, #1
 8006506:	3a01      	subs	r2, #1
 8006508:	0652      	lsls	r2, r2, #25
 800650a:	4311      	orrs	r1, r2
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6852      	ldr	r2, [r2, #4]
 8006510:	3a01      	subs	r2, #1
 8006512:	0112      	lsls	r2, r2, #4
 8006514:	430a      	orrs	r2, r1
 8006516:	4916      	ldr	r1, [pc, #88]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006518:	4313      	orrs	r3, r2
 800651a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800651c:	4b14      	ldr	r3, [pc, #80]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a13      	ldr	r2, [pc, #76]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006522:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006526:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006528:	f7fb f8f0 	bl	800170c <HAL_GetTick>
 800652c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800652e:	e009      	b.n	8006544 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006530:	f7fb f8ec 	bl	800170c <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d902      	bls.n	8006544 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	73fb      	strb	r3, [r7, #15]
          break;
 8006542:	e005      	b.n	8006550 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006544:	4b0a      	ldr	r3, [pc, #40]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0ef      	beq.n	8006530 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006556:	4b06      	ldr	r3, [pc, #24]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	4904      	ldr	r1, [pc, #16]	@ (8006570 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006560:	4313      	orrs	r3, r2
 8006562:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	40021000 	.word	0x40021000
 8006574:	07ff800f 	.word	0x07ff800f
 8006578:	ff9f800f 	.word	0xff9f800f
 800657c:	f9ff800f 	.word	0xf9ff800f

08006580 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800658e:	4b72      	ldr	r3, [pc, #456]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00e      	beq.n	80065b8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800659a:	4b6f      	ldr	r3, [pc, #444]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f003 0203 	and.w	r2, r3, #3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d103      	bne.n	80065b2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
       ||
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d142      	bne.n	8006638 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	73fb      	strb	r3, [r7, #15]
 80065b6:	e03f      	b.n	8006638 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d018      	beq.n	80065f2 <RCCEx_PLLSAI2_Config+0x72>
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d825      	bhi.n	8006610 <RCCEx_PLLSAI2_Config+0x90>
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d002      	beq.n	80065ce <RCCEx_PLLSAI2_Config+0x4e>
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d009      	beq.n	80065e0 <RCCEx_PLLSAI2_Config+0x60>
 80065cc:	e020      	b.n	8006610 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065ce:	4b62      	ldr	r3, [pc, #392]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d11d      	bne.n	8006616 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065de:	e01a      	b.n	8006616 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065e0:	4b5d      	ldr	r3, [pc, #372]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d116      	bne.n	800661a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065f0:	e013      	b.n	800661a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065f2:	4b59      	ldr	r3, [pc, #356]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10f      	bne.n	800661e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065fe:	4b56      	ldr	r3, [pc, #344]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d109      	bne.n	800661e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800660e:	e006      	b.n	800661e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	73fb      	strb	r3, [r7, #15]
      break;
 8006614:	e004      	b.n	8006620 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006616:	bf00      	nop
 8006618:	e002      	b.n	8006620 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800661a:	bf00      	nop
 800661c:	e000      	b.n	8006620 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800661e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d108      	bne.n	8006638 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006626:	4b4c      	ldr	r3, [pc, #304]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f023 0203 	bic.w	r2, r3, #3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4949      	ldr	r1, [pc, #292]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006634:	4313      	orrs	r3, r2
 8006636:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 8086 	bne.w	800674c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006640:	4b45      	ldr	r3, [pc, #276]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a44      	ldr	r2, [pc, #272]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800664a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800664c:	f7fb f85e 	bl	800170c <HAL_GetTick>
 8006650:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006652:	e009      	b.n	8006668 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006654:	f7fb f85a 	bl	800170c <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d902      	bls.n	8006668 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	73fb      	strb	r3, [r7, #15]
        break;
 8006666:	e005      	b.n	8006674 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006668:	4b3b      	ldr	r3, [pc, #236]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1ef      	bne.n	8006654 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d168      	bne.n	800674c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d113      	bne.n	80066a8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006680:	4b35      	ldr	r3, [pc, #212]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006682:	695a      	ldr	r2, [r3, #20]
 8006684:	4b35      	ldr	r3, [pc, #212]	@ (800675c <RCCEx_PLLSAI2_Config+0x1dc>)
 8006686:	4013      	ands	r3, r2
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6892      	ldr	r2, [r2, #8]
 800668c:	0211      	lsls	r1, r2, #8
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	68d2      	ldr	r2, [r2, #12]
 8006692:	06d2      	lsls	r2, r2, #27
 8006694:	4311      	orrs	r1, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6852      	ldr	r2, [r2, #4]
 800669a:	3a01      	subs	r2, #1
 800669c:	0112      	lsls	r2, r2, #4
 800669e:	430a      	orrs	r2, r1
 80066a0:	492d      	ldr	r1, [pc, #180]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	614b      	str	r3, [r1, #20]
 80066a6:	e02d      	b.n	8006704 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d115      	bne.n	80066da <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066ae:	4b2a      	ldr	r3, [pc, #168]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066b0:	695a      	ldr	r2, [r3, #20]
 80066b2:	4b2b      	ldr	r3, [pc, #172]	@ (8006760 <RCCEx_PLLSAI2_Config+0x1e0>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6892      	ldr	r2, [r2, #8]
 80066ba:	0211      	lsls	r1, r2, #8
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6912      	ldr	r2, [r2, #16]
 80066c0:	0852      	lsrs	r2, r2, #1
 80066c2:	3a01      	subs	r2, #1
 80066c4:	0552      	lsls	r2, r2, #21
 80066c6:	4311      	orrs	r1, r2
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6852      	ldr	r2, [r2, #4]
 80066cc:	3a01      	subs	r2, #1
 80066ce:	0112      	lsls	r2, r2, #4
 80066d0:	430a      	orrs	r2, r1
 80066d2:	4921      	ldr	r1, [pc, #132]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	614b      	str	r3, [r1, #20]
 80066d8:	e014      	b.n	8006704 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066da:	4b1f      	ldr	r3, [pc, #124]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066dc:	695a      	ldr	r2, [r3, #20]
 80066de:	4b21      	ldr	r3, [pc, #132]	@ (8006764 <RCCEx_PLLSAI2_Config+0x1e4>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6892      	ldr	r2, [r2, #8]
 80066e6:	0211      	lsls	r1, r2, #8
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6952      	ldr	r2, [r2, #20]
 80066ec:	0852      	lsrs	r2, r2, #1
 80066ee:	3a01      	subs	r2, #1
 80066f0:	0652      	lsls	r2, r2, #25
 80066f2:	4311      	orrs	r1, r2
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6852      	ldr	r2, [r2, #4]
 80066f8:	3a01      	subs	r2, #1
 80066fa:	0112      	lsls	r2, r2, #4
 80066fc:	430a      	orrs	r2, r1
 80066fe:	4916      	ldr	r1, [pc, #88]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006700:	4313      	orrs	r3, r2
 8006702:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006704:	4b14      	ldr	r3, [pc, #80]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a13      	ldr	r2, [pc, #76]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 800670a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800670e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006710:	f7fa fffc 	bl	800170c <HAL_GetTick>
 8006714:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006716:	e009      	b.n	800672c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006718:	f7fa fff8 	bl	800170c <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d902      	bls.n	800672c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	73fb      	strb	r3, [r7, #15]
          break;
 800672a:	e005      	b.n	8006738 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800672c:	4b0a      	ldr	r3, [pc, #40]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0ef      	beq.n	8006718 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800673e:	4b06      	ldr	r3, [pc, #24]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006740:	695a      	ldr	r2, [r3, #20]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	4904      	ldr	r1, [pc, #16]	@ (8006758 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006748:	4313      	orrs	r3, r2
 800674a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	40021000 	.word	0x40021000
 800675c:	07ff800f 	.word	0x07ff800f
 8006760:	ff9f800f 	.word	0xff9f800f
 8006764:	f9ff800f 	.word	0xf9ff800f

08006768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e049      	b.n	800680e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fa fd94 	bl	80012bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3304      	adds	r3, #4
 80067a4:	4619      	mov	r1, r3
 80067a6:	4610      	mov	r0, r2
 80067a8:	f000 fb02 	bl	8006db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	d001      	beq.n	8006830 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e047      	b.n	80068c0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a23      	ldr	r2, [pc, #140]	@ (80068cc <HAL_TIM_Base_Start+0xb4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d01d      	beq.n	800687e <HAL_TIM_Base_Start+0x66>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800684a:	d018      	beq.n	800687e <HAL_TIM_Base_Start+0x66>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1f      	ldr	r2, [pc, #124]	@ (80068d0 <HAL_TIM_Base_Start+0xb8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <HAL_TIM_Base_Start+0x66>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1e      	ldr	r2, [pc, #120]	@ (80068d4 <HAL_TIM_Base_Start+0xbc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00e      	beq.n	800687e <HAL_TIM_Base_Start+0x66>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a1c      	ldr	r2, [pc, #112]	@ (80068d8 <HAL_TIM_Base_Start+0xc0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d009      	beq.n	800687e <HAL_TIM_Base_Start+0x66>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a1b      	ldr	r2, [pc, #108]	@ (80068dc <HAL_TIM_Base_Start+0xc4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d004      	beq.n	800687e <HAL_TIM_Base_Start+0x66>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a19      	ldr	r2, [pc, #100]	@ (80068e0 <HAL_TIM_Base_Start+0xc8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d115      	bne.n	80068aa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	4b17      	ldr	r3, [pc, #92]	@ (80068e4 <HAL_TIM_Base_Start+0xcc>)
 8006886:	4013      	ands	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b06      	cmp	r3, #6
 800688e:	d015      	beq.n	80068bc <HAL_TIM_Base_Start+0xa4>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006896:	d011      	beq.n	80068bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a8:	e008      	b.n	80068bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0201 	orr.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	e000      	b.n	80068be <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	40012c00 	.word	0x40012c00
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40013400 	.word	0x40013400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	00010007 	.word	0x00010007

080068e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d001      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e04f      	b.n	80069a0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a23      	ldr	r2, [pc, #140]	@ (80069ac <HAL_TIM_Base_Start_IT+0xc4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d01d      	beq.n	800695e <HAL_TIM_Base_Start_IT+0x76>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800692a:	d018      	beq.n	800695e <HAL_TIM_Base_Start_IT+0x76>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1f      	ldr	r2, [pc, #124]	@ (80069b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d013      	beq.n	800695e <HAL_TIM_Base_Start_IT+0x76>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1e      	ldr	r2, [pc, #120]	@ (80069b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00e      	beq.n	800695e <HAL_TIM_Base_Start_IT+0x76>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1c      	ldr	r2, [pc, #112]	@ (80069b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d009      	beq.n	800695e <HAL_TIM_Base_Start_IT+0x76>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1b      	ldr	r2, [pc, #108]	@ (80069bc <HAL_TIM_Base_Start_IT+0xd4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d004      	beq.n	800695e <HAL_TIM_Base_Start_IT+0x76>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a19      	ldr	r2, [pc, #100]	@ (80069c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d115      	bne.n	800698a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	4b17      	ldr	r3, [pc, #92]	@ (80069c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006966:	4013      	ands	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b06      	cmp	r3, #6
 800696e:	d015      	beq.n	800699c <HAL_TIM_Base_Start_IT+0xb4>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006976:	d011      	beq.n	800699c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006988:	e008      	b.n	800699c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0201 	orr.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	e000      	b.n	800699e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800699c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	40012c00 	.word	0x40012c00
 80069b0:	40000400 	.word	0x40000400
 80069b4:	40000800 	.word	0x40000800
 80069b8:	40000c00 	.word	0x40000c00
 80069bc:	40013400 	.word	0x40013400
 80069c0:	40014000 	.word	0x40014000
 80069c4:	00010007 	.word	0x00010007

080069c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d020      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01b      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f06f 0202 	mvn.w	r2, #2
 80069fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f9ad 	bl	8006d72 <HAL_TIM_IC_CaptureCallback>
 8006a18:	e005      	b.n	8006a26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f99f 	bl	8006d5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f9b0 	bl	8006d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d020      	beq.n	8006a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01b      	beq.n	8006a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0204 	mvn.w	r2, #4
 8006a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f987 	bl	8006d72 <HAL_TIM_IC_CaptureCallback>
 8006a64:	e005      	b.n	8006a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f979 	bl	8006d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f98a 	bl	8006d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d020      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f003 0308 	and.w	r3, r3, #8
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01b      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0208 	mvn.w	r2, #8
 8006a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2204      	movs	r2, #4
 8006a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	f003 0303 	and.w	r3, r3, #3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f961 	bl	8006d72 <HAL_TIM_IC_CaptureCallback>
 8006ab0:	e005      	b.n	8006abe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f953 	bl	8006d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f964 	bl	8006d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f003 0310 	and.w	r3, r3, #16
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d020      	beq.n	8006b10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d01b      	beq.n	8006b10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f06f 0210 	mvn.w	r2, #16
 8006ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2208      	movs	r2, #8
 8006ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f93b 	bl	8006d72 <HAL_TIM_IC_CaptureCallback>
 8006afc:	e005      	b.n	8006b0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f92d 	bl	8006d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f93e 	bl	8006d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00c      	beq.n	8006b34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d007      	beq.n	8006b34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f06f 0201 	mvn.w	r2, #1
 8006b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7fa f818 	bl	8000b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00c      	beq.n	8006b58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d007      	beq.n	8006b58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 faf2 	bl	800713c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00c      	beq.n	8006b7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d007      	beq.n	8006b7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 faea 	bl	8007150 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00c      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d007      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f8fd 	bl	8006d9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f003 0320 	and.w	r3, r3, #32
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00c      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f003 0320 	and.w	r3, r3, #32
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d007      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0220 	mvn.w	r2, #32
 8006bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fab2 	bl	8007128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_TIM_ConfigClockSource+0x1c>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e0b6      	b.n	8006d56 <HAL_TIM_ConfigClockSource+0x18a>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c24:	d03e      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0xd8>
 8006c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c2a:	f200 8087 	bhi.w	8006d3c <HAL_TIM_ConfigClockSource+0x170>
 8006c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c32:	f000 8086 	beq.w	8006d42 <HAL_TIM_ConfigClockSource+0x176>
 8006c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c3a:	d87f      	bhi.n	8006d3c <HAL_TIM_ConfigClockSource+0x170>
 8006c3c:	2b70      	cmp	r3, #112	@ 0x70
 8006c3e:	d01a      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0xaa>
 8006c40:	2b70      	cmp	r3, #112	@ 0x70
 8006c42:	d87b      	bhi.n	8006d3c <HAL_TIM_ConfigClockSource+0x170>
 8006c44:	2b60      	cmp	r3, #96	@ 0x60
 8006c46:	d050      	beq.n	8006cea <HAL_TIM_ConfigClockSource+0x11e>
 8006c48:	2b60      	cmp	r3, #96	@ 0x60
 8006c4a:	d877      	bhi.n	8006d3c <HAL_TIM_ConfigClockSource+0x170>
 8006c4c:	2b50      	cmp	r3, #80	@ 0x50
 8006c4e:	d03c      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0xfe>
 8006c50:	2b50      	cmp	r3, #80	@ 0x50
 8006c52:	d873      	bhi.n	8006d3c <HAL_TIM_ConfigClockSource+0x170>
 8006c54:	2b40      	cmp	r3, #64	@ 0x40
 8006c56:	d058      	beq.n	8006d0a <HAL_TIM_ConfigClockSource+0x13e>
 8006c58:	2b40      	cmp	r3, #64	@ 0x40
 8006c5a:	d86f      	bhi.n	8006d3c <HAL_TIM_ConfigClockSource+0x170>
 8006c5c:	2b30      	cmp	r3, #48	@ 0x30
 8006c5e:	d064      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x15e>
 8006c60:	2b30      	cmp	r3, #48	@ 0x30
 8006c62:	d86b      	bhi.n	8006d3c <HAL_TIM_ConfigClockSource+0x170>
 8006c64:	2b20      	cmp	r3, #32
 8006c66:	d060      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x15e>
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d867      	bhi.n	8006d3c <HAL_TIM_ConfigClockSource+0x170>
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d05c      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x15e>
 8006c70:	2b10      	cmp	r3, #16
 8006c72:	d05a      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x15e>
 8006c74:	e062      	b.n	8006d3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c86:	f000 f9a7 	bl	8006fd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	609a      	str	r2, [r3, #8]
      break;
 8006ca2:	e04f      	b.n	8006d44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cb4:	f000 f990 	bl	8006fd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689a      	ldr	r2, [r3, #8]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cc6:	609a      	str	r2, [r3, #8]
      break;
 8006cc8:	e03c      	b.n	8006d44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	f000 f904 	bl	8006ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2150      	movs	r1, #80	@ 0x50
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 f95d 	bl	8006fa2 <TIM_ITRx_SetConfig>
      break;
 8006ce8:	e02c      	b.n	8006d44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f000 f923 	bl	8006f42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2160      	movs	r1, #96	@ 0x60
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 f94d 	bl	8006fa2 <TIM_ITRx_SetConfig>
      break;
 8006d08:	e01c      	b.n	8006d44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d16:	461a      	mov	r2, r3
 8006d18:	f000 f8e4 	bl	8006ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2140      	movs	r1, #64	@ 0x40
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 f93d 	bl	8006fa2 <TIM_ITRx_SetConfig>
      break;
 8006d28:	e00c      	b.n	8006d44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4619      	mov	r1, r3
 8006d34:	4610      	mov	r0, r2
 8006d36:	f000 f934 	bl	8006fa2 <TIM_ITRx_SetConfig>
      break;
 8006d3a:	e003      	b.n	8006d44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d40:	e000      	b.n	8006d44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
	...

08006db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a40      	ldr	r2, [pc, #256]	@ (8006ec4 <TIM_Base_SetConfig+0x114>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d013      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dce:	d00f      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a3d      	ldr	r2, [pc, #244]	@ (8006ec8 <TIM_Base_SetConfig+0x118>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d00b      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a3c      	ldr	r2, [pc, #240]	@ (8006ecc <TIM_Base_SetConfig+0x11c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d007      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a3b      	ldr	r2, [pc, #236]	@ (8006ed0 <TIM_Base_SetConfig+0x120>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d003      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a3a      	ldr	r2, [pc, #232]	@ (8006ed4 <TIM_Base_SetConfig+0x124>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d108      	bne.n	8006e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a2f      	ldr	r2, [pc, #188]	@ (8006ec4 <TIM_Base_SetConfig+0x114>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d01f      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e10:	d01b      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a2c      	ldr	r2, [pc, #176]	@ (8006ec8 <TIM_Base_SetConfig+0x118>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d017      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8006ecc <TIM_Base_SetConfig+0x11c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d013      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a2a      	ldr	r2, [pc, #168]	@ (8006ed0 <TIM_Base_SetConfig+0x120>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00f      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a29      	ldr	r2, [pc, #164]	@ (8006ed4 <TIM_Base_SetConfig+0x124>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00b      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a28      	ldr	r2, [pc, #160]	@ (8006ed8 <TIM_Base_SetConfig+0x128>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d007      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a27      	ldr	r2, [pc, #156]	@ (8006edc <TIM_Base_SetConfig+0x12c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d003      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a26      	ldr	r2, [pc, #152]	@ (8006ee0 <TIM_Base_SetConfig+0x130>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d108      	bne.n	8006e5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a10      	ldr	r2, [pc, #64]	@ (8006ec4 <TIM_Base_SetConfig+0x114>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00f      	beq.n	8006ea8 <TIM_Base_SetConfig+0xf8>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a12      	ldr	r2, [pc, #72]	@ (8006ed4 <TIM_Base_SetConfig+0x124>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00b      	beq.n	8006ea8 <TIM_Base_SetConfig+0xf8>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a11      	ldr	r2, [pc, #68]	@ (8006ed8 <TIM_Base_SetConfig+0x128>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d007      	beq.n	8006ea8 <TIM_Base_SetConfig+0xf8>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a10      	ldr	r2, [pc, #64]	@ (8006edc <TIM_Base_SetConfig+0x12c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d003      	beq.n	8006ea8 <TIM_Base_SetConfig+0xf8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8006ee0 <TIM_Base_SetConfig+0x130>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d103      	bne.n	8006eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	615a      	str	r2, [r3, #20]
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40000400 	.word	0x40000400
 8006ecc:	40000800 	.word	0x40000800
 8006ed0:	40000c00 	.word	0x40000c00
 8006ed4:	40013400 	.word	0x40013400
 8006ed8:	40014000 	.word	0x40014000
 8006edc:	40014400 	.word	0x40014400
 8006ee0:	40014800 	.word	0x40014800

08006ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f023 0201 	bic.w	r2, r3, #1
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f023 030a 	bic.w	r3, r3, #10
 8006f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	621a      	str	r2, [r3, #32]
}
 8006f36:	bf00      	nop
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b087      	sub	sp, #28
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	f023 0210 	bic.w	r2, r3, #16
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	031b      	lsls	r3, r3, #12
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	621a      	str	r2, [r3, #32]
}
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b085      	sub	sp, #20
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	f043 0307 	orr.w	r3, r3, #7
 8006fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	609a      	str	r2, [r3, #8]
}
 8006fcc:	bf00      	nop
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ff2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	021a      	lsls	r2, r3, #8
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	609a      	str	r2, [r3, #8]
}
 800700c:	bf00      	nop
 800700e:	371c      	adds	r7, #28
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800702c:	2302      	movs	r3, #2
 800702e:	e068      	b.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a2e      	ldr	r2, [pc, #184]	@ (8007110 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d004      	beq.n	8007064 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a2d      	ldr	r2, [pc, #180]	@ (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d108      	bne.n	8007076 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800706a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800707c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a1e      	ldr	r2, [pc, #120]	@ (8007110 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d01d      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070a2:	d018      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d013      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1a      	ldr	r2, [pc, #104]	@ (800711c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00e      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a18      	ldr	r2, [pc, #96]	@ (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d009      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a13      	ldr	r2, [pc, #76]	@ (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d004      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a14      	ldr	r2, [pc, #80]	@ (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d10c      	bne.n	80070f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40013400 	.word	0x40013400
 8007118:	40000400 	.word	0x40000400
 800711c:	40000800 	.word	0x40000800
 8007120:	40000c00 	.word	0x40000c00
 8007124:	40014000 	.word	0x40014000

08007128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e042      	b.n	80071fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7fa f987 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2224      	movs	r2, #36	@ 0x24
 8007192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0201 	bic.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fb24 	bl	80077fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f825 	bl	8007204 <UART_SetConfig>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e01b      	b.n	80071fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fba3 	bl	8007940 <UART_CheckIdleState>
 80071fa:	4603      	mov	r3, r0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007208:	b08c      	sub	sp, #48	@ 0x30
 800720a:	af00      	add	r7, sp, #0
 800720c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	431a      	orrs	r2, r3
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	431a      	orrs	r2, r3
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	4313      	orrs	r3, r2
 800722a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4baa      	ldr	r3, [pc, #680]	@ (80074dc <UART_SetConfig+0x2d8>)
 8007234:	4013      	ands	r3, r2
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	6812      	ldr	r2, [r2, #0]
 800723a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800723c:	430b      	orrs	r3, r1
 800723e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a9f      	ldr	r2, [pc, #636]	@ (80074e0 <UART_SetConfig+0x2dc>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d004      	beq.n	8007270 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800726c:	4313      	orrs	r3, r2
 800726e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800727a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	6812      	ldr	r2, [r2, #0]
 8007282:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007284:	430b      	orrs	r3, r1
 8007286:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728e:	f023 010f 	bic.w	r1, r3, #15
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a90      	ldr	r2, [pc, #576]	@ (80074e4 <UART_SetConfig+0x2e0>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d125      	bne.n	80072f4 <UART_SetConfig+0xf0>
 80072a8:	4b8f      	ldr	r3, [pc, #572]	@ (80074e8 <UART_SetConfig+0x2e4>)
 80072aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d81a      	bhi.n	80072ec <UART_SetConfig+0xe8>
 80072b6:	a201      	add	r2, pc, #4	@ (adr r2, 80072bc <UART_SetConfig+0xb8>)
 80072b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072bc:	080072cd 	.word	0x080072cd
 80072c0:	080072dd 	.word	0x080072dd
 80072c4:	080072d5 	.word	0x080072d5
 80072c8:	080072e5 	.word	0x080072e5
 80072cc:	2301      	movs	r3, #1
 80072ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072d2:	e116      	b.n	8007502 <UART_SetConfig+0x2fe>
 80072d4:	2302      	movs	r3, #2
 80072d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072da:	e112      	b.n	8007502 <UART_SetConfig+0x2fe>
 80072dc:	2304      	movs	r3, #4
 80072de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072e2:	e10e      	b.n	8007502 <UART_SetConfig+0x2fe>
 80072e4:	2308      	movs	r3, #8
 80072e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ea:	e10a      	b.n	8007502 <UART_SetConfig+0x2fe>
 80072ec:	2310      	movs	r3, #16
 80072ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072f2:	e106      	b.n	8007502 <UART_SetConfig+0x2fe>
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a7c      	ldr	r2, [pc, #496]	@ (80074ec <UART_SetConfig+0x2e8>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d138      	bne.n	8007370 <UART_SetConfig+0x16c>
 80072fe:	4b7a      	ldr	r3, [pc, #488]	@ (80074e8 <UART_SetConfig+0x2e4>)
 8007300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007304:	f003 030c 	and.w	r3, r3, #12
 8007308:	2b0c      	cmp	r3, #12
 800730a:	d82d      	bhi.n	8007368 <UART_SetConfig+0x164>
 800730c:	a201      	add	r2, pc, #4	@ (adr r2, 8007314 <UART_SetConfig+0x110>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007349 	.word	0x08007349
 8007318:	08007369 	.word	0x08007369
 800731c:	08007369 	.word	0x08007369
 8007320:	08007369 	.word	0x08007369
 8007324:	08007359 	.word	0x08007359
 8007328:	08007369 	.word	0x08007369
 800732c:	08007369 	.word	0x08007369
 8007330:	08007369 	.word	0x08007369
 8007334:	08007351 	.word	0x08007351
 8007338:	08007369 	.word	0x08007369
 800733c:	08007369 	.word	0x08007369
 8007340:	08007369 	.word	0x08007369
 8007344:	08007361 	.word	0x08007361
 8007348:	2300      	movs	r3, #0
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800734e:	e0d8      	b.n	8007502 <UART_SetConfig+0x2fe>
 8007350:	2302      	movs	r3, #2
 8007352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007356:	e0d4      	b.n	8007502 <UART_SetConfig+0x2fe>
 8007358:	2304      	movs	r3, #4
 800735a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800735e:	e0d0      	b.n	8007502 <UART_SetConfig+0x2fe>
 8007360:	2308      	movs	r3, #8
 8007362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007366:	e0cc      	b.n	8007502 <UART_SetConfig+0x2fe>
 8007368:	2310      	movs	r3, #16
 800736a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800736e:	e0c8      	b.n	8007502 <UART_SetConfig+0x2fe>
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a5e      	ldr	r2, [pc, #376]	@ (80074f0 <UART_SetConfig+0x2ec>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d125      	bne.n	80073c6 <UART_SetConfig+0x1c2>
 800737a:	4b5b      	ldr	r3, [pc, #364]	@ (80074e8 <UART_SetConfig+0x2e4>)
 800737c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007380:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007384:	2b30      	cmp	r3, #48	@ 0x30
 8007386:	d016      	beq.n	80073b6 <UART_SetConfig+0x1b2>
 8007388:	2b30      	cmp	r3, #48	@ 0x30
 800738a:	d818      	bhi.n	80073be <UART_SetConfig+0x1ba>
 800738c:	2b20      	cmp	r3, #32
 800738e:	d00a      	beq.n	80073a6 <UART_SetConfig+0x1a2>
 8007390:	2b20      	cmp	r3, #32
 8007392:	d814      	bhi.n	80073be <UART_SetConfig+0x1ba>
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <UART_SetConfig+0x19a>
 8007398:	2b10      	cmp	r3, #16
 800739a:	d008      	beq.n	80073ae <UART_SetConfig+0x1aa>
 800739c:	e00f      	b.n	80073be <UART_SetConfig+0x1ba>
 800739e:	2300      	movs	r3, #0
 80073a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073a4:	e0ad      	b.n	8007502 <UART_SetConfig+0x2fe>
 80073a6:	2302      	movs	r3, #2
 80073a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ac:	e0a9      	b.n	8007502 <UART_SetConfig+0x2fe>
 80073ae:	2304      	movs	r3, #4
 80073b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073b4:	e0a5      	b.n	8007502 <UART_SetConfig+0x2fe>
 80073b6:	2308      	movs	r3, #8
 80073b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073bc:	e0a1      	b.n	8007502 <UART_SetConfig+0x2fe>
 80073be:	2310      	movs	r3, #16
 80073c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073c4:	e09d      	b.n	8007502 <UART_SetConfig+0x2fe>
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a4a      	ldr	r2, [pc, #296]	@ (80074f4 <UART_SetConfig+0x2f0>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d125      	bne.n	800741c <UART_SetConfig+0x218>
 80073d0:	4b45      	ldr	r3, [pc, #276]	@ (80074e8 <UART_SetConfig+0x2e4>)
 80073d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80073da:	2bc0      	cmp	r3, #192	@ 0xc0
 80073dc:	d016      	beq.n	800740c <UART_SetConfig+0x208>
 80073de:	2bc0      	cmp	r3, #192	@ 0xc0
 80073e0:	d818      	bhi.n	8007414 <UART_SetConfig+0x210>
 80073e2:	2b80      	cmp	r3, #128	@ 0x80
 80073e4:	d00a      	beq.n	80073fc <UART_SetConfig+0x1f8>
 80073e6:	2b80      	cmp	r3, #128	@ 0x80
 80073e8:	d814      	bhi.n	8007414 <UART_SetConfig+0x210>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <UART_SetConfig+0x1f0>
 80073ee:	2b40      	cmp	r3, #64	@ 0x40
 80073f0:	d008      	beq.n	8007404 <UART_SetConfig+0x200>
 80073f2:	e00f      	b.n	8007414 <UART_SetConfig+0x210>
 80073f4:	2300      	movs	r3, #0
 80073f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073fa:	e082      	b.n	8007502 <UART_SetConfig+0x2fe>
 80073fc:	2302      	movs	r3, #2
 80073fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007402:	e07e      	b.n	8007502 <UART_SetConfig+0x2fe>
 8007404:	2304      	movs	r3, #4
 8007406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800740a:	e07a      	b.n	8007502 <UART_SetConfig+0x2fe>
 800740c:	2308      	movs	r3, #8
 800740e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007412:	e076      	b.n	8007502 <UART_SetConfig+0x2fe>
 8007414:	2310      	movs	r3, #16
 8007416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741a:	e072      	b.n	8007502 <UART_SetConfig+0x2fe>
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a35      	ldr	r2, [pc, #212]	@ (80074f8 <UART_SetConfig+0x2f4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d12a      	bne.n	800747c <UART_SetConfig+0x278>
 8007426:	4b30      	ldr	r3, [pc, #192]	@ (80074e8 <UART_SetConfig+0x2e4>)
 8007428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800742c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007430:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007434:	d01a      	beq.n	800746c <UART_SetConfig+0x268>
 8007436:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800743a:	d81b      	bhi.n	8007474 <UART_SetConfig+0x270>
 800743c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007440:	d00c      	beq.n	800745c <UART_SetConfig+0x258>
 8007442:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007446:	d815      	bhi.n	8007474 <UART_SetConfig+0x270>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <UART_SetConfig+0x250>
 800744c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007450:	d008      	beq.n	8007464 <UART_SetConfig+0x260>
 8007452:	e00f      	b.n	8007474 <UART_SetConfig+0x270>
 8007454:	2300      	movs	r3, #0
 8007456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800745a:	e052      	b.n	8007502 <UART_SetConfig+0x2fe>
 800745c:	2302      	movs	r3, #2
 800745e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007462:	e04e      	b.n	8007502 <UART_SetConfig+0x2fe>
 8007464:	2304      	movs	r3, #4
 8007466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800746a:	e04a      	b.n	8007502 <UART_SetConfig+0x2fe>
 800746c:	2308      	movs	r3, #8
 800746e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007472:	e046      	b.n	8007502 <UART_SetConfig+0x2fe>
 8007474:	2310      	movs	r3, #16
 8007476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800747a:	e042      	b.n	8007502 <UART_SetConfig+0x2fe>
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a17      	ldr	r2, [pc, #92]	@ (80074e0 <UART_SetConfig+0x2dc>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d13a      	bne.n	80074fc <UART_SetConfig+0x2f8>
 8007486:	4b18      	ldr	r3, [pc, #96]	@ (80074e8 <UART_SetConfig+0x2e4>)
 8007488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800748c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007490:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007494:	d01a      	beq.n	80074cc <UART_SetConfig+0x2c8>
 8007496:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800749a:	d81b      	bhi.n	80074d4 <UART_SetConfig+0x2d0>
 800749c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074a0:	d00c      	beq.n	80074bc <UART_SetConfig+0x2b8>
 80074a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074a6:	d815      	bhi.n	80074d4 <UART_SetConfig+0x2d0>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <UART_SetConfig+0x2b0>
 80074ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074b0:	d008      	beq.n	80074c4 <UART_SetConfig+0x2c0>
 80074b2:	e00f      	b.n	80074d4 <UART_SetConfig+0x2d0>
 80074b4:	2300      	movs	r3, #0
 80074b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ba:	e022      	b.n	8007502 <UART_SetConfig+0x2fe>
 80074bc:	2302      	movs	r3, #2
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074c2:	e01e      	b.n	8007502 <UART_SetConfig+0x2fe>
 80074c4:	2304      	movs	r3, #4
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ca:	e01a      	b.n	8007502 <UART_SetConfig+0x2fe>
 80074cc:	2308      	movs	r3, #8
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d2:	e016      	b.n	8007502 <UART_SetConfig+0x2fe>
 80074d4:	2310      	movs	r3, #16
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074da:	e012      	b.n	8007502 <UART_SetConfig+0x2fe>
 80074dc:	cfff69f3 	.word	0xcfff69f3
 80074e0:	40008000 	.word	0x40008000
 80074e4:	40013800 	.word	0x40013800
 80074e8:	40021000 	.word	0x40021000
 80074ec:	40004400 	.word	0x40004400
 80074f0:	40004800 	.word	0x40004800
 80074f4:	40004c00 	.word	0x40004c00
 80074f8:	40005000 	.word	0x40005000
 80074fc:	2310      	movs	r3, #16
 80074fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4aae      	ldr	r2, [pc, #696]	@ (80077c0 <UART_SetConfig+0x5bc>)
 8007508:	4293      	cmp	r3, r2
 800750a:	f040 8097 	bne.w	800763c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800750e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007512:	2b08      	cmp	r3, #8
 8007514:	d823      	bhi.n	800755e <UART_SetConfig+0x35a>
 8007516:	a201      	add	r2, pc, #4	@ (adr r2, 800751c <UART_SetConfig+0x318>)
 8007518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751c:	08007541 	.word	0x08007541
 8007520:	0800755f 	.word	0x0800755f
 8007524:	08007549 	.word	0x08007549
 8007528:	0800755f 	.word	0x0800755f
 800752c:	0800754f 	.word	0x0800754f
 8007530:	0800755f 	.word	0x0800755f
 8007534:	0800755f 	.word	0x0800755f
 8007538:	0800755f 	.word	0x0800755f
 800753c:	08007557 	.word	0x08007557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007540:	f7fe fb0e 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8007544:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007546:	e010      	b.n	800756a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007548:	4b9e      	ldr	r3, [pc, #632]	@ (80077c4 <UART_SetConfig+0x5c0>)
 800754a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800754c:	e00d      	b.n	800756a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800754e:	f7fe fa6f 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 8007552:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007554:	e009      	b.n	800756a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800755a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800755c:	e005      	b.n	800756a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007568:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 8130 	beq.w	80077d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007576:	4a94      	ldr	r2, [pc, #592]	@ (80077c8 <UART_SetConfig+0x5c4>)
 8007578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800757c:	461a      	mov	r2, r3
 800757e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007580:	fbb3 f3f2 	udiv	r3, r3, r2
 8007584:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	4613      	mov	r3, r2
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	4413      	add	r3, r2
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	429a      	cmp	r2, r3
 8007594:	d305      	bcc.n	80075a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d903      	bls.n	80075aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80075a8:	e113      	b.n	80077d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	2200      	movs	r2, #0
 80075ae:	60bb      	str	r3, [r7, #8]
 80075b0:	60fa      	str	r2, [r7, #12]
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b6:	4a84      	ldr	r2, [pc, #528]	@ (80077c8 <UART_SetConfig+0x5c4>)
 80075b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2200      	movs	r2, #0
 80075c0:	603b      	str	r3, [r7, #0]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075cc:	f7f8 fe16 	bl	80001fc <__aeabi_uldivmod>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4610      	mov	r0, r2
 80075d6:	4619      	mov	r1, r3
 80075d8:	f04f 0200 	mov.w	r2, #0
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	020b      	lsls	r3, r1, #8
 80075e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075e6:	0202      	lsls	r2, r0, #8
 80075e8:	6979      	ldr	r1, [r7, #20]
 80075ea:	6849      	ldr	r1, [r1, #4]
 80075ec:	0849      	lsrs	r1, r1, #1
 80075ee:	2000      	movs	r0, #0
 80075f0:	460c      	mov	r4, r1
 80075f2:	4605      	mov	r5, r0
 80075f4:	eb12 0804 	adds.w	r8, r2, r4
 80075f8:	eb43 0905 	adc.w	r9, r3, r5
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	469a      	mov	sl, r3
 8007604:	4693      	mov	fp, r2
 8007606:	4652      	mov	r2, sl
 8007608:	465b      	mov	r3, fp
 800760a:	4640      	mov	r0, r8
 800760c:	4649      	mov	r1, r9
 800760e:	f7f8 fdf5 	bl	80001fc <__aeabi_uldivmod>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4613      	mov	r3, r2
 8007618:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007620:	d308      	bcc.n	8007634 <UART_SetConfig+0x430>
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007628:	d204      	bcs.n	8007634 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6a3a      	ldr	r2, [r7, #32]
 8007630:	60da      	str	r2, [r3, #12]
 8007632:	e0ce      	b.n	80077d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800763a:	e0ca      	b.n	80077d2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007644:	d166      	bne.n	8007714 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007646:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800764a:	2b08      	cmp	r3, #8
 800764c:	d827      	bhi.n	800769e <UART_SetConfig+0x49a>
 800764e:	a201      	add	r2, pc, #4	@ (adr r2, 8007654 <UART_SetConfig+0x450>)
 8007650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007654:	08007679 	.word	0x08007679
 8007658:	08007681 	.word	0x08007681
 800765c:	08007689 	.word	0x08007689
 8007660:	0800769f 	.word	0x0800769f
 8007664:	0800768f 	.word	0x0800768f
 8007668:	0800769f 	.word	0x0800769f
 800766c:	0800769f 	.word	0x0800769f
 8007670:	0800769f 	.word	0x0800769f
 8007674:	08007697 	.word	0x08007697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007678:	f7fe fa72 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 800767c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800767e:	e014      	b.n	80076aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007680:	f7fe fa84 	bl	8005b8c <HAL_RCC_GetPCLK2Freq>
 8007684:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007686:	e010      	b.n	80076aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007688:	4b4e      	ldr	r3, [pc, #312]	@ (80077c4 <UART_SetConfig+0x5c0>)
 800768a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800768c:	e00d      	b.n	80076aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800768e:	f7fe f9cf 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 8007692:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007694:	e009      	b.n	80076aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800769a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800769c:	e005      	b.n	80076aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80076a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 8090 	beq.w	80077d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b6:	4a44      	ldr	r2, [pc, #272]	@ (80077c8 <UART_SetConfig+0x5c4>)
 80076b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076bc:	461a      	mov	r2, r3
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80076c4:	005a      	lsls	r2, r3, #1
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	085b      	lsrs	r3, r3, #1
 80076cc:	441a      	add	r2, r3
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	2b0f      	cmp	r3, #15
 80076dc:	d916      	bls.n	800770c <UART_SetConfig+0x508>
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076e4:	d212      	bcs.n	800770c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	f023 030f 	bic.w	r3, r3, #15
 80076ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	085b      	lsrs	r3, r3, #1
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	f003 0307 	and.w	r3, r3, #7
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	8bfb      	ldrh	r3, [r7, #30]
 80076fe:	4313      	orrs	r3, r2
 8007700:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	8bfa      	ldrh	r2, [r7, #30]
 8007708:	60da      	str	r2, [r3, #12]
 800770a:	e062      	b.n	80077d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007712:	e05e      	b.n	80077d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007714:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007718:	2b08      	cmp	r3, #8
 800771a:	d828      	bhi.n	800776e <UART_SetConfig+0x56a>
 800771c:	a201      	add	r2, pc, #4	@ (adr r2, 8007724 <UART_SetConfig+0x520>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	08007749 	.word	0x08007749
 8007728:	08007751 	.word	0x08007751
 800772c:	08007759 	.word	0x08007759
 8007730:	0800776f 	.word	0x0800776f
 8007734:	0800775f 	.word	0x0800775f
 8007738:	0800776f 	.word	0x0800776f
 800773c:	0800776f 	.word	0x0800776f
 8007740:	0800776f 	.word	0x0800776f
 8007744:	08007767 	.word	0x08007767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007748:	f7fe fa0a 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 800774c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800774e:	e014      	b.n	800777a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007750:	f7fe fa1c 	bl	8005b8c <HAL_RCC_GetPCLK2Freq>
 8007754:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007756:	e010      	b.n	800777a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007758:	4b1a      	ldr	r3, [pc, #104]	@ (80077c4 <UART_SetConfig+0x5c0>)
 800775a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800775c:	e00d      	b.n	800777a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800775e:	f7fe f967 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 8007762:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007764:	e009      	b.n	800777a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800776a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800776c:	e005      	b.n	800777a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007778:	bf00      	nop
    }

    if (pclk != 0U)
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	2b00      	cmp	r3, #0
 800777e:	d028      	beq.n	80077d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007784:	4a10      	ldr	r2, [pc, #64]	@ (80077c8 <UART_SetConfig+0x5c4>)
 8007786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800778a:	461a      	mov	r2, r3
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	085b      	lsrs	r3, r3, #1
 8007798:	441a      	add	r2, r3
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	2b0f      	cmp	r3, #15
 80077a8:	d910      	bls.n	80077cc <UART_SetConfig+0x5c8>
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077b0:	d20c      	bcs.n	80077cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60da      	str	r2, [r3, #12]
 80077bc:	e009      	b.n	80077d2 <UART_SetConfig+0x5ce>
 80077be:	bf00      	nop
 80077c0:	40008000 	.word	0x40008000
 80077c4:	00f42400 	.word	0x00f42400
 80077c8:	0800c0bc 	.word	0x0800c0bc
      }
      else
      {
        ret = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2201      	movs	r2, #1
 80077de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2200      	movs	r2, #0
 80077e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2200      	movs	r2, #0
 80077ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80077ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3730      	adds	r7, #48	@ 0x30
 80077f6:	46bd      	mov	sp, r7
 80077f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080077fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007808:	f003 0308 	and.w	r3, r3, #8
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00a      	beq.n	8007826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	430a      	orrs	r2, r1
 8007846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00a      	beq.n	800786a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786e:	f003 0304 	and.w	r3, r3, #4
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00a      	beq.n	800788c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007890:	f003 0310 	and.w	r3, r3, #16
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00a      	beq.n	80078ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00a      	beq.n	80078d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	430a      	orrs	r2, r1
 80078ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d01a      	beq.n	8007912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078fa:	d10a      	bne.n	8007912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	605a      	str	r2, [r3, #4]
  }
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b098      	sub	sp, #96	@ 0x60
 8007944:	af02      	add	r7, sp, #8
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007950:	f7f9 fedc 	bl	800170c <HAL_GetTick>
 8007954:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0308 	and.w	r3, r3, #8
 8007960:	2b08      	cmp	r3, #8
 8007962:	d12f      	bne.n	80079c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007964:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800796c:	2200      	movs	r2, #0
 800796e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f88e 	bl	8007a94 <UART_WaitOnFlagUntilTimeout>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d022      	beq.n	80079c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800798c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800798e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007992:	653b      	str	r3, [r7, #80]	@ 0x50
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800799c:	647b      	str	r3, [r7, #68]	@ 0x44
 800799e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e6      	bne.n	800797e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e063      	b.n	8007a8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0304 	and.w	r3, r3, #4
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d149      	bne.n	8007a66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079da:	2200      	movs	r2, #0
 80079dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f857 	bl	8007a94 <UART_WaitOnFlagUntilTimeout>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d03c      	beq.n	8007a66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	623b      	str	r3, [r7, #32]
   return(result);
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e6      	bne.n	80079ec <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3308      	adds	r3, #8
 8007a24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f023 0301 	bic.w	r3, r3, #1
 8007a34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a3e:	61fa      	str	r2, [r7, #28]
 8007a40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	69b9      	ldr	r1, [r7, #24]
 8007a44:	69fa      	ldr	r2, [r7, #28]
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e5      	bne.n	8007a1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e012      	b.n	8007a8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2220      	movs	r2, #32
 8007a72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3758      	adds	r7, #88	@ 0x58
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	603b      	str	r3, [r7, #0]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aa4:	e049      	b.n	8007b3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007aac:	d045      	beq.n	8007b3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aae:	f7f9 fe2d 	bl	800170c <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d302      	bcc.n	8007ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e048      	b.n	8007b5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0304 	and.w	r3, r3, #4
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d031      	beq.n	8007b3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f003 0308 	and.w	r3, r3, #8
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d110      	bne.n	8007b06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2208      	movs	r2, #8
 8007aea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 f838 	bl	8007b62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2208      	movs	r2, #8
 8007af6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e029      	b.n	8007b5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b14:	d111      	bne.n	8007b3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 f81e 	bl	8007b62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e00f      	b.n	8007b5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	69da      	ldr	r2, [r3, #28]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	4013      	ands	r3, r2
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	bf0c      	ite	eq
 8007b4a:	2301      	moveq	r3, #1
 8007b4c:	2300      	movne	r3, #0
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d0a6      	beq.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b095      	sub	sp, #84	@ 0x54
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b88:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e6      	bne.n	8007b6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bb2:	f023 0301 	bic.w	r3, r3, #1
 8007bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bc8:	e841 2300 	strex	r3, r2, [r1]
 8007bcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e3      	bne.n	8007b9c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d118      	bne.n	8007c0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f023 0310 	bic.w	r3, r3, #16
 8007bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bfa:	61bb      	str	r3, [r7, #24]
 8007bfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6979      	ldr	r1, [r7, #20]
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	613b      	str	r3, [r7, #16]
   return(result);
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e6      	bne.n	8007bdc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c22:	bf00      	nop
 8007c24:	3754      	adds	r7, #84	@ 0x54
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d101      	bne.n	8007c44 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c40:	2302      	movs	r3, #2
 8007c42:	e027      	b.n	8007c94 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2224      	movs	r2, #36	@ 0x24
 8007c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0201 	bic.w	r2, r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2220      	movs	r2, #32
 8007c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e02d      	b.n	8007d14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2224      	movs	r2, #36	@ 0x24
 8007cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0201 	bic.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f84f 	bl	8007d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d101      	bne.n	8007d34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d30:	2302      	movs	r3, #2
 8007d32:	e02d      	b.n	8007d90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2224      	movs	r2, #36	@ 0x24
 8007d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 0201 	bic.w	r2, r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f811 	bl	8007d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2220      	movs	r2, #32
 8007d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d108      	bne.n	8007dba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007db8:	e031      	b.n	8007e1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007dba:	2308      	movs	r3, #8
 8007dbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007dbe:	2308      	movs	r3, #8
 8007dc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	0e5b      	lsrs	r3, r3, #25
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	f003 0307 	and.w	r3, r3, #7
 8007dd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	0f5b      	lsrs	r3, r3, #29
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	f003 0307 	and.w	r3, r3, #7
 8007de0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	7b3a      	ldrb	r2, [r7, #12]
 8007de6:	4911      	ldr	r1, [pc, #68]	@ (8007e2c <UARTEx_SetNbDataToProcess+0x94>)
 8007de8:	5c8a      	ldrb	r2, [r1, r2]
 8007dea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007dee:	7b3a      	ldrb	r2, [r7, #12]
 8007df0:	490f      	ldr	r1, [pc, #60]	@ (8007e30 <UARTEx_SetNbDataToProcess+0x98>)
 8007df2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007df4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	7b7a      	ldrb	r2, [r7, #13]
 8007e04:	4909      	ldr	r1, [pc, #36]	@ (8007e2c <UARTEx_SetNbDataToProcess+0x94>)
 8007e06:	5c8a      	ldrb	r2, [r1, r2]
 8007e08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e0c:	7b7a      	ldrb	r2, [r7, #13]
 8007e0e:	4908      	ldr	r1, [pc, #32]	@ (8007e30 <UARTEx_SetNbDataToProcess+0x98>)
 8007e10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e12:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007e1e:	bf00      	nop
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	0800c0d4 	.word	0x0800c0d4
 8007e30:	0800c0dc 	.word	0x0800c0dc

08007e34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e34:	b084      	sub	sp, #16
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	f107 001c 	add.w	r0, r7, #28
 8007e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f001 fa1c 	bl	8009290 <USB_CoreReset>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d106      	bne.n	8007e70 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e66:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e6e:	e005      	b.n	8007e7c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e74:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e88:	b004      	add	sp, #16
 8007e8a:	4770      	bx	lr

08007e8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	4613      	mov	r3, r2
 8007e98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007e9a:	79fb      	ldrb	r3, [r7, #7]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d165      	bne.n	8007f6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4a3e      	ldr	r2, [pc, #248]	@ (8007f9c <USB_SetTurnaroundTime+0x110>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d906      	bls.n	8007eb6 <USB_SetTurnaroundTime+0x2a>
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4a3d      	ldr	r2, [pc, #244]	@ (8007fa0 <USB_SetTurnaroundTime+0x114>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d202      	bcs.n	8007eb6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007eb0:	230f      	movs	r3, #15
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	e05c      	b.n	8007f70 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	4a39      	ldr	r2, [pc, #228]	@ (8007fa0 <USB_SetTurnaroundTime+0x114>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d306      	bcc.n	8007ecc <USB_SetTurnaroundTime+0x40>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	4a38      	ldr	r2, [pc, #224]	@ (8007fa4 <USB_SetTurnaroundTime+0x118>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d202      	bcs.n	8007ecc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007ec6:	230e      	movs	r3, #14
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	e051      	b.n	8007f70 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4a35      	ldr	r2, [pc, #212]	@ (8007fa4 <USB_SetTurnaroundTime+0x118>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d306      	bcc.n	8007ee2 <USB_SetTurnaroundTime+0x56>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	4a34      	ldr	r2, [pc, #208]	@ (8007fa8 <USB_SetTurnaroundTime+0x11c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d202      	bcs.n	8007ee2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007edc:	230d      	movs	r3, #13
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	e046      	b.n	8007f70 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	4a30      	ldr	r2, [pc, #192]	@ (8007fa8 <USB_SetTurnaroundTime+0x11c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d306      	bcc.n	8007ef8 <USB_SetTurnaroundTime+0x6c>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	4a2f      	ldr	r2, [pc, #188]	@ (8007fac <USB_SetTurnaroundTime+0x120>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d802      	bhi.n	8007ef8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007ef2:	230c      	movs	r3, #12
 8007ef4:	617b      	str	r3, [r7, #20]
 8007ef6:	e03b      	b.n	8007f70 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4a2c      	ldr	r2, [pc, #176]	@ (8007fac <USB_SetTurnaroundTime+0x120>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d906      	bls.n	8007f0e <USB_SetTurnaroundTime+0x82>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4a2b      	ldr	r2, [pc, #172]	@ (8007fb0 <USB_SetTurnaroundTime+0x124>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d802      	bhi.n	8007f0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007f08:	230b      	movs	r3, #11
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	e030      	b.n	8007f70 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	4a27      	ldr	r2, [pc, #156]	@ (8007fb0 <USB_SetTurnaroundTime+0x124>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d906      	bls.n	8007f24 <USB_SetTurnaroundTime+0x98>
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	4a26      	ldr	r2, [pc, #152]	@ (8007fb4 <USB_SetTurnaroundTime+0x128>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d802      	bhi.n	8007f24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007f1e:	230a      	movs	r3, #10
 8007f20:	617b      	str	r3, [r7, #20]
 8007f22:	e025      	b.n	8007f70 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	4a23      	ldr	r2, [pc, #140]	@ (8007fb4 <USB_SetTurnaroundTime+0x128>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d906      	bls.n	8007f3a <USB_SetTurnaroundTime+0xae>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4a22      	ldr	r2, [pc, #136]	@ (8007fb8 <USB_SetTurnaroundTime+0x12c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d202      	bcs.n	8007f3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f34:	2309      	movs	r3, #9
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	e01a      	b.n	8007f70 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8007fb8 <USB_SetTurnaroundTime+0x12c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d306      	bcc.n	8007f50 <USB_SetTurnaroundTime+0xc4>
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	4a1d      	ldr	r2, [pc, #116]	@ (8007fbc <USB_SetTurnaroundTime+0x130>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d802      	bhi.n	8007f50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f4a:	2308      	movs	r3, #8
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	e00f      	b.n	8007f70 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	4a1a      	ldr	r2, [pc, #104]	@ (8007fbc <USB_SetTurnaroundTime+0x130>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d906      	bls.n	8007f66 <USB_SetTurnaroundTime+0xda>
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	4a19      	ldr	r2, [pc, #100]	@ (8007fc0 <USB_SetTurnaroundTime+0x134>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d202      	bcs.n	8007f66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f60:	2307      	movs	r3, #7
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	e004      	b.n	8007f70 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f66:	2306      	movs	r3, #6
 8007f68:	617b      	str	r3, [r7, #20]
 8007f6a:	e001      	b.n	8007f70 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f6c:	2309      	movs	r3, #9
 8007f6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	68da      	ldr	r2, [r3, #12]
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	029b      	lsls	r3, r3, #10
 8007f84:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	371c      	adds	r7, #28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	00d8acbf 	.word	0x00d8acbf
 8007fa0:	00e4e1c0 	.word	0x00e4e1c0
 8007fa4:	00f42400 	.word	0x00f42400
 8007fa8:	01067380 	.word	0x01067380
 8007fac:	011a499f 	.word	0x011a499f
 8007fb0:	01312cff 	.word	0x01312cff
 8007fb4:	014ca43f 	.word	0x014ca43f
 8007fb8:	016e3600 	.word	0x016e3600
 8007fbc:	01a6ab1f 	.word	0x01a6ab1f
 8007fc0:	01e84800 	.word	0x01e84800

08007fc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f043 0201 	orr.w	r2, r3, #1
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f023 0201 	bic.w	r2, r3, #1
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d115      	bne.n	8008056 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008036:	2001      	movs	r0, #1
 8008038:	f7f9 fb74 	bl	8001724 <HAL_Delay>
      ms++;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3301      	adds	r3, #1
 8008040:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f001 f8ab 	bl	800919e <USB_GetMode>
 8008048:	4603      	mov	r3, r0
 800804a:	2b01      	cmp	r3, #1
 800804c:	d01e      	beq.n	800808c <USB_SetCurrentMode+0x84>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b31      	cmp	r3, #49	@ 0x31
 8008052:	d9f0      	bls.n	8008036 <USB_SetCurrentMode+0x2e>
 8008054:	e01a      	b.n	800808c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d115      	bne.n	8008088 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008068:	2001      	movs	r0, #1
 800806a:	f7f9 fb5b 	bl	8001724 <HAL_Delay>
      ms++;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3301      	adds	r3, #1
 8008072:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 f892 	bl	800919e <USB_GetMode>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d005      	beq.n	800808c <USB_SetCurrentMode+0x84>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b31      	cmp	r3, #49	@ 0x31
 8008084:	d9f0      	bls.n	8008068 <USB_SetCurrentMode+0x60>
 8008086:	e001      	b.n	800808c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e005      	b.n	8008098 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b32      	cmp	r3, #50	@ 0x32
 8008090:	d101      	bne.n	8008096 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e000      	b.n	8008098 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080a0:	b084      	sub	sp, #16
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b086      	sub	sp, #24
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80080ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080ba:	2300      	movs	r3, #0
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	e009      	b.n	80080d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	3340      	adds	r3, #64	@ 0x40
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	2200      	movs	r2, #0
 80080cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	3301      	adds	r3, #1
 80080d2:	613b      	str	r3, [r7, #16]
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b0e      	cmp	r3, #14
 80080d8:	d9f2      	bls.n	80080c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d11c      	bne.n	800811a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080ee:	f043 0302 	orr.w	r3, r3, #2
 80080f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	e005      	b.n	8008126 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800812c:	461a      	mov	r2, r3
 800812e:	2300      	movs	r3, #0
 8008130:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008132:	2103      	movs	r1, #3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f959 	bl	80083ec <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800813a:	2110      	movs	r1, #16
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f8f1 	bl	8008324 <USB_FlushTxFifo>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f91d 	bl	800838c <USB_FlushRxFifo>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008162:	461a      	mov	r2, r3
 8008164:	2300      	movs	r3, #0
 8008166:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800816e:	461a      	mov	r2, r3
 8008170:	2300      	movs	r3, #0
 8008172:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800817a:	461a      	mov	r2, r3
 800817c:	2300      	movs	r3, #0
 800817e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008180:	2300      	movs	r3, #0
 8008182:	613b      	str	r3, [r7, #16]
 8008184:	e043      	b.n	800820e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4413      	add	r3, r2
 800818e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008198:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800819c:	d118      	bne.n	80081d0 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b0:	461a      	mov	r2, r3
 80081b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80081b6:	6013      	str	r3, [r2, #0]
 80081b8:	e013      	b.n	80081e2 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c6:	461a      	mov	r2, r3
 80081c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	e008      	b.n	80081e2 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081dc:	461a      	mov	r2, r3
 80081de:	2300      	movs	r3, #0
 80081e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ee:	461a      	mov	r2, r3
 80081f0:	2300      	movs	r3, #0
 80081f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008200:	461a      	mov	r2, r3
 8008202:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008206:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	3301      	adds	r3, #1
 800820c:	613b      	str	r3, [r7, #16]
 800820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	429a      	cmp	r2, r3
 8008214:	d3b7      	bcc.n	8008186 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008216:	2300      	movs	r3, #0
 8008218:	613b      	str	r3, [r7, #16]
 800821a:	e043      	b.n	80082a4 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800822e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008232:	d118      	bne.n	8008266 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10a      	bne.n	8008250 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008246:	461a      	mov	r2, r3
 8008248:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	e013      	b.n	8008278 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800825c:	461a      	mov	r2, r3
 800825e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	e008      	b.n	8008278 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	4413      	add	r3, r2
 800826e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008272:	461a      	mov	r2, r3
 8008274:	2300      	movs	r3, #0
 8008276:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008284:	461a      	mov	r2, r3
 8008286:	2300      	movs	r3, #0
 8008288:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4413      	add	r3, r2
 8008292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008296:	461a      	mov	r2, r3
 8008298:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800829c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	3301      	adds	r3, #1
 80082a2:	613b      	str	r3, [r7, #16]
 80082a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d3b7      	bcc.n	800821c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80082cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	f043 0210 	orr.w	r2, r3, #16
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	699a      	ldr	r2, [r3, #24]
 80082de:	4b10      	ldr	r3, [pc, #64]	@ (8008320 <USB_DevInit+0x280>)
 80082e0:	4313      	orrs	r3, r2
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	f043 0208 	orr.w	r2, r3, #8
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80082f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d107      	bne.n	800830e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008306:	f043 0304 	orr.w	r3, r3, #4
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800830e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800831a:	b004      	add	sp, #16
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	803c3800 	.word	0x803c3800

08008324 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800832e:	2300      	movs	r3, #0
 8008330:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3301      	adds	r3, #1
 8008336:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4a13      	ldr	r2, [pc, #76]	@ (8008388 <USB_FlushTxFifo+0x64>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d901      	bls.n	8008344 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e01b      	b.n	800837c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	daf2      	bge.n	8008332 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800834c:	2300      	movs	r3, #0
 800834e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	019b      	lsls	r3, r3, #6
 8008354:	f043 0220 	orr.w	r2, r3, #32
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3301      	adds	r3, #1
 8008360:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	4a08      	ldr	r2, [pc, #32]	@ (8008388 <USB_FlushTxFifo+0x64>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d901      	bls.n	800836e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e006      	b.n	800837c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f003 0320 	and.w	r3, r3, #32
 8008376:	2b20      	cmp	r3, #32
 8008378:	d0f0      	beq.n	800835c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	00030d40 	.word	0x00030d40

0800838c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	3301      	adds	r3, #1
 800839c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4a11      	ldr	r2, [pc, #68]	@ (80083e8 <USB_FlushRxFifo+0x5c>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d901      	bls.n	80083aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e018      	b.n	80083dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	daf2      	bge.n	8008398 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2210      	movs	r2, #16
 80083ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3301      	adds	r3, #1
 80083c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	4a08      	ldr	r2, [pc, #32]	@ (80083e8 <USB_FlushRxFifo+0x5c>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d901      	bls.n	80083ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e006      	b.n	80083dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	f003 0310 	and.w	r3, r3, #16
 80083d6:	2b10      	cmp	r3, #16
 80083d8:	d0f0      	beq.n	80083bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	00030d40 	.word	0x00030d40

080083ec <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	68f9      	ldr	r1, [r7, #12]
 8008408:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800840c:	4313      	orrs	r3, r2
 800840e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800841e:	b480      	push	{r7}
 8008420:	b087      	sub	sp, #28
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 0306 	and.w	r3, r3, #6
 8008436:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b02      	cmp	r3, #2
 800843c:	d002      	beq.n	8008444 <USB_GetDevSpeed+0x26>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b06      	cmp	r3, #6
 8008442:	d102      	bne.n	800844a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008444:	2302      	movs	r3, #2
 8008446:	75fb      	strb	r3, [r7, #23]
 8008448:	e001      	b.n	800844e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800844a:	230f      	movs	r3, #15
 800844c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800844e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008450:	4618      	mov	r0, r3
 8008452:	371c      	adds	r7, #28
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d13a      	bne.n	80084ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800847e:	69da      	ldr	r2, [r3, #28]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	f003 030f 	and.w	r3, r3, #15
 8008488:	2101      	movs	r1, #1
 800848a:	fa01 f303 	lsl.w	r3, r1, r3
 800848e:	b29b      	uxth	r3, r3
 8008490:	68f9      	ldr	r1, [r7, #12]
 8008492:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008496:	4313      	orrs	r3, r2
 8008498:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d155      	bne.n	800855c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	791b      	ldrb	r3, [r3, #4]
 80084ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	059b      	lsls	r3, r3, #22
 80084d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084d4:	4313      	orrs	r3, r2
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	e036      	b.n	800855c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084f4:	69da      	ldr	r2, [r3, #28]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	f003 030f 	and.w	r3, r3, #15
 80084fe:	2101      	movs	r1, #1
 8008500:	fa01 f303 	lsl.w	r3, r1, r3
 8008504:	041b      	lsls	r3, r3, #16
 8008506:	68f9      	ldr	r1, [r7, #12]
 8008508:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800850c:	4313      	orrs	r3, r2
 800850e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d11a      	bne.n	800855c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	4413      	add	r3, r2
 800852e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	791b      	ldrb	r3, [r3, #4]
 8008540:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008542:	430b      	orrs	r3, r1
 8008544:	4313      	orrs	r3, r2
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	0151      	lsls	r1, r2, #5
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	440a      	add	r2, r1
 800854e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008556:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800855a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
	...

0800856c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	785b      	ldrb	r3, [r3, #1]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d161      	bne.n	800864c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800859a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800859e:	d11f      	bne.n	80085e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	0151      	lsls	r1, r2, #5
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	440a      	add	r2, r1
 80085b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	015a      	lsls	r2, r3, #5
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4413      	add	r3, r2
 80085c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	0151      	lsls	r1, r2, #5
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	440a      	add	r2, r1
 80085d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	f003 030f 	and.w	r3, r3, #15
 80085f0:	2101      	movs	r1, #1
 80085f2:	fa01 f303 	lsl.w	r3, r1, r3
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	43db      	mvns	r3, r3
 80085fa:	68f9      	ldr	r1, [r7, #12]
 80085fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008600:	4013      	ands	r3, r2
 8008602:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	2101      	movs	r1, #1
 8008616:	fa01 f303 	lsl.w	r3, r1, r3
 800861a:	b29b      	uxth	r3, r3
 800861c:	43db      	mvns	r3, r3
 800861e:	68f9      	ldr	r1, [r7, #12]
 8008620:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008624:	4013      	ands	r3, r2
 8008626:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	4413      	add	r3, r2
 8008630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	0159      	lsls	r1, r3, #5
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	440b      	add	r3, r1
 800863e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008642:	4619      	mov	r1, r3
 8008644:	4b35      	ldr	r3, [pc, #212]	@ (800871c <USB_DeactivateEndpoint+0x1b0>)
 8008646:	4013      	ands	r3, r2
 8008648:	600b      	str	r3, [r1, #0]
 800864a:	e060      	b.n	800870e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800865e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008662:	d11f      	bne.n	80086a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	0151      	lsls	r1, r2, #5
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	440a      	add	r2, r1
 800867a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800867e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008682:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4413      	add	r3, r2
 800868c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	0151      	lsls	r1, r2, #5
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	440a      	add	r2, r1
 800869a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800869e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	f003 030f 	and.w	r3, r3, #15
 80086b4:	2101      	movs	r1, #1
 80086b6:	fa01 f303 	lsl.w	r3, r1, r3
 80086ba:	041b      	lsls	r3, r3, #16
 80086bc:	43db      	mvns	r3, r3
 80086be:	68f9      	ldr	r1, [r7, #12]
 80086c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086c4:	4013      	ands	r3, r2
 80086c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086ce:	69da      	ldr	r2, [r3, #28]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	f003 030f 	and.w	r3, r3, #15
 80086d8:	2101      	movs	r1, #1
 80086da:	fa01 f303 	lsl.w	r3, r1, r3
 80086de:	041b      	lsls	r3, r3, #16
 80086e0:	43db      	mvns	r3, r3
 80086e2:	68f9      	ldr	r1, [r7, #12]
 80086e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086e8:	4013      	ands	r3, r2
 80086ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	0159      	lsls	r1, r3, #5
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	440b      	add	r3, r1
 8008702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008706:	4619      	mov	r1, r3
 8008708:	4b05      	ldr	r3, [pc, #20]	@ (8008720 <USB_DeactivateEndpoint+0x1b4>)
 800870a:	4013      	ands	r3, r2
 800870c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	ec337800 	.word	0xec337800
 8008720:	eff37800 	.word	0xeff37800

08008724 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	785b      	ldrb	r3, [r3, #1]
 800873c:	2b01      	cmp	r3, #1
 800873e:	f040 8128 	bne.w	8008992 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d132      	bne.n	80087b0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	4413      	add	r3, r2
 8008752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	0151      	lsls	r1, r2, #5
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	440a      	add	r2, r1
 8008760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008764:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008768:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800876c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	015a      	lsls	r2, r3, #5
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	4413      	add	r3, r2
 8008776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	0151      	lsls	r1, r2, #5
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	440a      	add	r2, r1
 8008784:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008788:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800878c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	4413      	add	r3, r2
 8008796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	0151      	lsls	r1, r2, #5
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	440a      	add	r2, r1
 80087a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087a8:	0cdb      	lsrs	r3, r3, #19
 80087aa:	04db      	lsls	r3, r3, #19
 80087ac:	6113      	str	r3, [r2, #16]
 80087ae:	e092      	b.n	80088d6 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	0151      	lsls	r1, r2, #5
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	440a      	add	r2, r1
 80087c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ca:	0cdb      	lsrs	r3, r3, #19
 80087cc:	04db      	lsls	r3, r3, #19
 80087ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	0151      	lsls	r1, r2, #5
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	440a      	add	r2, r1
 80087e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80087ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80087f2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d11a      	bne.n	8008830 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	691a      	ldr	r2, [r3, #16]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	429a      	cmp	r2, r3
 8008804:	d903      	bls.n	800880e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	4413      	add	r3, r2
 8008816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	0151      	lsls	r1, r2, #5
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	440a      	add	r2, r1
 8008824:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008828:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800882c:	6113      	str	r3, [r2, #16]
 800882e:	e01b      	b.n	8008868 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800883c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	6919      	ldr	r1, [r3, #16]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	440b      	add	r3, r1
 8008848:	1e59      	subs	r1, r3, #1
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008852:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008854:	4b8d      	ldr	r3, [pc, #564]	@ (8008a8c <USB_EPStartXfer+0x368>)
 8008856:	400b      	ands	r3, r1
 8008858:	6939      	ldr	r1, [r7, #16]
 800885a:	0148      	lsls	r0, r1, #5
 800885c:	6979      	ldr	r1, [r7, #20]
 800885e:	4401      	add	r1, r0
 8008860:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008864:	4313      	orrs	r3, r2
 8008866:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008874:	691a      	ldr	r2, [r3, #16]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800887e:	6939      	ldr	r1, [r7, #16]
 8008880:	0148      	lsls	r0, r1, #5
 8008882:	6979      	ldr	r1, [r7, #20]
 8008884:	4401      	add	r1, r0
 8008886:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800888a:	4313      	orrs	r3, r2
 800888c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	791b      	ldrb	r3, [r3, #4]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d11f      	bne.n	80088d6 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	4413      	add	r3, r2
 800889e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	0151      	lsls	r1, r2, #5
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	440a      	add	r2, r1
 80088ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088b0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80088b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	0151      	lsls	r1, r2, #5
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	440a      	add	r2, r1
 80088cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80088d4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088f0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80088f4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	791b      	ldrb	r3, [r3, #4]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d015      	beq.n	800892a <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 8139 	beq.w	8008b7a <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800890e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	f003 030f 	and.w	r3, r3, #15
 8008918:	2101      	movs	r1, #1
 800891a:	fa01 f303 	lsl.w	r3, r1, r3
 800891e:	6979      	ldr	r1, [r7, #20]
 8008920:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008924:	4313      	orrs	r3, r2
 8008926:	634b      	str	r3, [r1, #52]	@ 0x34
 8008928:	e127      	b.n	8008b7a <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008936:	2b00      	cmp	r3, #0
 8008938:	d110      	bne.n	800895c <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	4413      	add	r3, r2
 8008942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	0151      	lsls	r1, r2, #5
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	440a      	add	r2, r1
 8008950:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008954:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	e00f      	b.n	800897c <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	0151      	lsls	r1, r2, #5
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	440a      	add	r2, r1
 8008972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800897a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	68d9      	ldr	r1, [r3, #12]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	781a      	ldrb	r2, [r3, #0]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	b29b      	uxth	r3, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f9a6 	bl	8008cdc <USB_WritePacket>
 8008990:	e0f3      	b.n	8008b7a <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	0151      	lsls	r1, r2, #5
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	440a      	add	r2, r1
 80089a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089ac:	0cdb      	lsrs	r3, r3, #19
 80089ae:	04db      	lsls	r3, r3, #19
 80089b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	0151      	lsls	r1, r2, #5
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	440a      	add	r2, r1
 80089c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089cc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80089d0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80089d4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d12f      	bne.n	8008a3c <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d003      	beq.n	80089ec <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	689a      	ldr	r2, [r3, #8]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a00:	691a      	ldr	r2, [r3, #16]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a0a:	6939      	ldr	r1, [r7, #16]
 8008a0c:	0148      	lsls	r0, r1, #5
 8008a0e:	6979      	ldr	r1, [r7, #20]
 8008a10:	4401      	add	r1, r0
 8008a12:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a16:	4313      	orrs	r3, r2
 8008a18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	0151      	lsls	r1, r2, #5
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	440a      	add	r2, r1
 8008a30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a38:	6113      	str	r3, [r2, #16]
 8008a3a:	e061      	b.n	8008b00 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d125      	bne.n	8008a90 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a50:	691a      	ldr	r2, [r3, #16]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a5a:	6939      	ldr	r1, [r7, #16]
 8008a5c:	0148      	lsls	r0, r1, #5
 8008a5e:	6979      	ldr	r1, [r7, #20]
 8008a60:	4401      	add	r1, r0
 8008a62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a66:	4313      	orrs	r3, r2
 8008a68:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	0151      	lsls	r1, r2, #5
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	440a      	add	r2, r1
 8008a80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a88:	6113      	str	r3, [r2, #16]
 8008a8a:	e039      	b.n	8008b00 <USB_EPStartXfer+0x3dc>
 8008a8c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	4413      	add	r3, r2
 8008a9a:	1e5a      	subs	r2, r3, #1
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa4:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	89fa      	ldrh	r2, [r7, #14]
 8008aac:	fb03 f202 	mul.w	r2, r3, r2
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ac0:	691a      	ldr	r2, [r3, #16]
 8008ac2:	89fb      	ldrh	r3, [r7, #14]
 8008ac4:	04d9      	lsls	r1, r3, #19
 8008ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8008b84 <USB_EPStartXfer+0x460>)
 8008ac8:	400b      	ands	r3, r1
 8008aca:	6939      	ldr	r1, [r7, #16]
 8008acc:	0148      	lsls	r0, r1, #5
 8008ace:	6979      	ldr	r1, [r7, #20]
 8008ad0:	4401      	add	r1, r0
 8008ad2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ae6:	691a      	ldr	r2, [r3, #16]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008af0:	6939      	ldr	r1, [r7, #16]
 8008af2:	0148      	lsls	r0, r1, #5
 8008af4:	6979      	ldr	r1, [r7, #20]
 8008af6:	4401      	add	r1, r0
 8008af8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008afc:	4313      	orrs	r3, r2
 8008afe:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	791b      	ldrb	r3, [r3, #4]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d128      	bne.n	8008b5a <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d110      	bne.n	8008b3a <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	0151      	lsls	r1, r2, #5
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	440a      	add	r2, r1
 8008b2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b32:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	e00f      	b.n	8008b5a <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	0151      	lsls	r1, r2, #5
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	440a      	add	r2, r1
 8008b50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b58:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b74:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	1ff80000 	.word	0x1ff80000

08008b88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	785b      	ldrb	r3, [r3, #1]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d14a      	bne.n	8008c3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008bba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bbe:	f040 8086 	bne.w	8008cce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	7812      	ldrb	r2, [r2, #0]
 8008bd6:	0151      	lsls	r1, r2, #5
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	440a      	add	r2, r1
 8008bdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008be0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008be4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	7812      	ldrb	r2, [r2, #0]
 8008bfa:	0151      	lsls	r1, r2, #5
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	440a      	add	r2, r1
 8008c00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d902      	bls.n	8008c20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c1e:	e056      	b.n	8008cce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c38:	d0e7      	beq.n	8008c0a <USB_EPStopXfer+0x82>
 8008c3a:	e048      	b.n	8008cce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c54:	d13b      	bne.n	8008cce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	7812      	ldrb	r2, [r2, #0]
 8008c6a:	0151      	lsls	r1, r2, #5
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	440a      	add	r2, r1
 8008c70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	7812      	ldrb	r2, [r2, #0]
 8008c8e:	0151      	lsls	r1, r2, #5
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	440a      	add	r2, r1
 8008c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d902      	bls.n	8008cb4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	75fb      	strb	r3, [r7, #23]
          break;
 8008cb2:	e00c      	b.n	8008cce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	015a      	lsls	r2, r3, #5
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ccc:	d0e7      	beq.n	8008c9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	371c      	adds	r7, #28
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b089      	sub	sp, #36	@ 0x24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	461a      	mov	r2, r3
 8008cea:	460b      	mov	r3, r1
 8008cec:	71fb      	strb	r3, [r7, #7]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008cfa:	88bb      	ldrh	r3, [r7, #4]
 8008cfc:	3303      	adds	r3, #3
 8008cfe:	089b      	lsrs	r3, r3, #2
 8008d00:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008d02:	2300      	movs	r3, #0
 8008d04:	61bb      	str	r3, [r7, #24]
 8008d06:	e018      	b.n	8008d3a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	031a      	lsls	r2, r3, #12
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d14:	461a      	mov	r2, r3
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	3301      	adds	r3, #1
 8008d26:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	3301      	adds	r3, #1
 8008d32:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	3301      	adds	r3, #1
 8008d38:	61bb      	str	r3, [r7, #24]
 8008d3a:	69ba      	ldr	r2, [r7, #24]
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d3e2      	bcc.n	8008d08 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3724      	adds	r7, #36	@ 0x24
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b08b      	sub	sp, #44	@ 0x2c
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d66:	88fb      	ldrh	r3, [r7, #6]
 8008d68:	089b      	lsrs	r3, r3, #2
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	f003 0303 	and.w	r3, r3, #3
 8008d74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d76:	2300      	movs	r3, #0
 8008d78:	623b      	str	r3, [r7, #32]
 8008d7a:	e014      	b.n	8008da6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d86:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d90:	3301      	adds	r3, #1
 8008d92:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	3301      	adds	r3, #1
 8008d98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	3301      	adds	r3, #1
 8008da4:	623b      	str	r3, [r7, #32]
 8008da6:	6a3a      	ldr	r2, [r7, #32]
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d3e6      	bcc.n	8008d7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008dae:	8bfb      	ldrh	r3, [r7, #30]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d01e      	beq.n	8008df2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f107 0310 	add.w	r3, r7, #16
 8008dc4:	6812      	ldr	r2, [r2, #0]
 8008dc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd8:	701a      	strb	r2, [r3, #0]
      i++;
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	623b      	str	r3, [r7, #32]
      pDest++;
 8008de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de2:	3301      	adds	r3, #1
 8008de4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008de6:	8bfb      	ldrh	r3, [r7, #30]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008dec:	8bfb      	ldrh	r3, [r7, #30]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1ea      	bne.n	8008dc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	372c      	adds	r7, #44	@ 0x2c
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	785b      	ldrb	r3, [r3, #1]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d12c      	bne.n	8008e76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	db12      	blt.n	8008e54 <USB_EPSetStall+0x54>
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00f      	beq.n	8008e54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	0151      	lsls	r1, r2, #5
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	440a      	add	r2, r1
 8008e4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008e52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	0151      	lsls	r1, r2, #5
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	440a      	add	r2, r1
 8008e6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	e02b      	b.n	8008ece <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	db12      	blt.n	8008eae <USB_EPSetStall+0xae>
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00f      	beq.n	8008eae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	015a      	lsls	r2, r3, #5
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	4413      	add	r3, r2
 8008e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	0151      	lsls	r1, r2, #5
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	440a      	add	r2, r1
 8008ea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ea8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008eac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	015a      	lsls	r2, r3, #5
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	0151      	lsls	r1, r2, #5
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	440a      	add	r2, r1
 8008ec4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ec8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008ecc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3714      	adds	r7, #20
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	785b      	ldrb	r3, [r3, #1]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d128      	bne.n	8008f4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	0151      	lsls	r1, r2, #5
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	440a      	add	r2, r1
 8008f0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	791b      	ldrb	r3, [r3, #4]
 8008f1c:	2b03      	cmp	r3, #3
 8008f1e:	d003      	beq.n	8008f28 <USB_EPClearStall+0x4c>
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	791b      	ldrb	r3, [r3, #4]
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d138      	bne.n	8008f9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	0151      	lsls	r1, r2, #5
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	440a      	add	r2, r1
 8008f3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f46:	6013      	str	r3, [r2, #0]
 8008f48:	e027      	b.n	8008f9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	0151      	lsls	r1, r2, #5
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	440a      	add	r2, r1
 8008f60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	791b      	ldrb	r3, [r3, #4]
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d003      	beq.n	8008f7a <USB_EPClearStall+0x9e>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	791b      	ldrb	r3, [r3, #4]
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d10f      	bne.n	8008f9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	0151      	lsls	r1, r2, #5
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	440a      	add	r2, r1
 8008f90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3714      	adds	r7, #20
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fc6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008fca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	78fb      	ldrb	r3, [r7, #3]
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008fdc:	68f9      	ldr	r1, [r7, #12]
 8008fde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800900e:	f023 0303 	bic.w	r3, r3, #3
 8009012:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009022:	f023 0302 	bic.w	r3, r3, #2
 8009026:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009036:	b480      	push	{r7}
 8009038:	b085      	sub	sp, #20
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009050:	f023 0303 	bic.w	r3, r3, #3
 8009054:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009064:	f043 0302 	orr.w	r3, r3, #2
 8009068:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	4013      	ands	r3, r2
 800908e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009090:	68fb      	ldr	r3, [r7, #12]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800909e:	b480      	push	{r7}
 80090a0:	b085      	sub	sp, #20
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ba:	69db      	ldr	r3, [r3, #28]
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	4013      	ands	r3, r2
 80090c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	0c1b      	lsrs	r3, r3, #16
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b085      	sub	sp, #20
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	4013      	ands	r3, r2
 80090f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	b29b      	uxth	r3, r3
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009106:	b480      	push	{r7}
 8009108:	b085      	sub	sp, #20
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	460b      	mov	r3, r1
 8009110:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009116:	78fb      	ldrb	r3, [r7, #3]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	4013      	ands	r3, r2
 8009132:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009134:	68bb      	ldr	r3, [r7, #8]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009142:	b480      	push	{r7}
 8009144:	b087      	sub	sp, #28
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	460b      	mov	r3, r1
 800914c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009164:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009166:	78fb      	ldrb	r3, [r7, #3]
 8009168:	f003 030f 	and.w	r3, r3, #15
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	fa22 f303 	lsr.w	r3, r2, r3
 8009172:	01db      	lsls	r3, r3, #7
 8009174:	b2db      	uxtb	r3, r3
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	4313      	orrs	r3, r2
 800917a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	4013      	ands	r3, r2
 800918e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009190:	68bb      	ldr	r3, [r7, #8]
}
 8009192:	4618      	mov	r0, r3
 8009194:	371c      	adds	r7, #28
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800919e:	b480      	push	{r7}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	f003 0301 	and.w	r3, r3, #1
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b085      	sub	sp, #20
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80091d8:	f023 0307 	bic.w	r3, r3, #7
 80091dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	333c      	adds	r3, #60	@ 0x3c
 8009212:	3304      	adds	r3, #4
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	4a1c      	ldr	r2, [pc, #112]	@ (800928c <USB_EP0_OutStart+0x8c>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d90a      	bls.n	8009236 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800922c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009230:	d101      	bne.n	8009236 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	e024      	b.n	8009280 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800923c:	461a      	mov	r2, r3
 800923e:	2300      	movs	r3, #0
 8009240:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009250:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009254:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009264:	f043 0318 	orr.w	r3, r3, #24
 8009268:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009278:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800927c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	4f54300a 	.word	0x4f54300a

08009290 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	3301      	adds	r3, #1
 80092a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4a13      	ldr	r2, [pc, #76]	@ (80092f4 <USB_CoreReset+0x64>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d901      	bls.n	80092ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e01b      	b.n	80092e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	daf2      	bge.n	800929c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f043 0201 	orr.w	r2, r3, #1
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3301      	adds	r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4a09      	ldr	r2, [pc, #36]	@ (80092f4 <USB_CoreReset+0x64>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d901      	bls.n	80092d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e006      	b.n	80092e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d0f0      	beq.n	80092c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3714      	adds	r7, #20
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	00030d40 	.word	0x00030d40

080092f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	460b      	mov	r3, r1
 8009302:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009304:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009308:	f002 fe2c 	bl	800bf64 <USBD_static_malloc>
 800930c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d109      	bne.n	8009328 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	32b0      	adds	r2, #176	@ 0xb0
 800931e:	2100      	movs	r1, #0
 8009320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009324:	2302      	movs	r3, #2
 8009326:	e0d4      	b.n	80094d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009328:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800932c:	2100      	movs	r1, #0
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f002 fe36 	bl	800bfa0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	32b0      	adds	r2, #176	@ 0xb0
 800933e:	68f9      	ldr	r1, [r7, #12]
 8009340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	32b0      	adds	r2, #176	@ 0xb0
 800934e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	7c1b      	ldrb	r3, [r3, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d138      	bne.n	80093d2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009360:	4b5e      	ldr	r3, [pc, #376]	@ (80094dc <USBD_CDC_Init+0x1e4>)
 8009362:	7819      	ldrb	r1, [r3, #0]
 8009364:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009368:	2202      	movs	r2, #2
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f002 fbe6 	bl	800bb3c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009370:	4b5a      	ldr	r3, [pc, #360]	@ (80094dc <USBD_CDC_Init+0x1e4>)
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	f003 020f 	and.w	r2, r3, #15
 8009378:	6879      	ldr	r1, [r7, #4]
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	440b      	add	r3, r1
 8009384:	3324      	adds	r3, #36	@ 0x24
 8009386:	2201      	movs	r2, #1
 8009388:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800938a:	4b55      	ldr	r3, [pc, #340]	@ (80094e0 <USBD_CDC_Init+0x1e8>)
 800938c:	7819      	ldrb	r1, [r3, #0]
 800938e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009392:	2202      	movs	r2, #2
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f002 fbd1 	bl	800bb3c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800939a:	4b51      	ldr	r3, [pc, #324]	@ (80094e0 <USBD_CDC_Init+0x1e8>)
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	f003 020f 	and.w	r2, r3, #15
 80093a2:	6879      	ldr	r1, [r7, #4]
 80093a4:	4613      	mov	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	440b      	add	r3, r1
 80093ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80093b2:	2201      	movs	r2, #1
 80093b4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80093b6:	4b4b      	ldr	r3, [pc, #300]	@ (80094e4 <USBD_CDC_Init+0x1ec>)
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	f003 020f 	and.w	r2, r3, #15
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	4613      	mov	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	440b      	add	r3, r1
 80093ca:	3326      	adds	r3, #38	@ 0x26
 80093cc:	2210      	movs	r2, #16
 80093ce:	801a      	strh	r2, [r3, #0]
 80093d0:	e035      	b.n	800943e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80093d2:	4b42      	ldr	r3, [pc, #264]	@ (80094dc <USBD_CDC_Init+0x1e4>)
 80093d4:	7819      	ldrb	r1, [r3, #0]
 80093d6:	2340      	movs	r3, #64	@ 0x40
 80093d8:	2202      	movs	r2, #2
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f002 fbae 	bl	800bb3c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80093e0:	4b3e      	ldr	r3, [pc, #248]	@ (80094dc <USBD_CDC_Init+0x1e4>)
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	f003 020f 	and.w	r2, r3, #15
 80093e8:	6879      	ldr	r1, [r7, #4]
 80093ea:	4613      	mov	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	440b      	add	r3, r1
 80093f4:	3324      	adds	r3, #36	@ 0x24
 80093f6:	2201      	movs	r2, #1
 80093f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80093fa:	4b39      	ldr	r3, [pc, #228]	@ (80094e0 <USBD_CDC_Init+0x1e8>)
 80093fc:	7819      	ldrb	r1, [r3, #0]
 80093fe:	2340      	movs	r3, #64	@ 0x40
 8009400:	2202      	movs	r2, #2
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f002 fb9a 	bl	800bb3c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009408:	4b35      	ldr	r3, [pc, #212]	@ (80094e0 <USBD_CDC_Init+0x1e8>)
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	f003 020f 	and.w	r2, r3, #15
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	4613      	mov	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4413      	add	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	440b      	add	r3, r1
 800941c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009420:	2201      	movs	r2, #1
 8009422:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009424:	4b2f      	ldr	r3, [pc, #188]	@ (80094e4 <USBD_CDC_Init+0x1ec>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	f003 020f 	and.w	r2, r3, #15
 800942c:	6879      	ldr	r1, [r7, #4]
 800942e:	4613      	mov	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	440b      	add	r3, r1
 8009438:	3326      	adds	r3, #38	@ 0x26
 800943a:	2210      	movs	r2, #16
 800943c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800943e:	4b29      	ldr	r3, [pc, #164]	@ (80094e4 <USBD_CDC_Init+0x1ec>)
 8009440:	7819      	ldrb	r1, [r3, #0]
 8009442:	2308      	movs	r3, #8
 8009444:	2203      	movs	r2, #3
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f002 fb78 	bl	800bb3c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800944c:	4b25      	ldr	r3, [pc, #148]	@ (80094e4 <USBD_CDC_Init+0x1ec>)
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	f003 020f 	and.w	r2, r3, #15
 8009454:	6879      	ldr	r1, [r7, #4]
 8009456:	4613      	mov	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	440b      	add	r3, r1
 8009460:	3324      	adds	r3, #36	@ 0x24
 8009462:	2201      	movs	r2, #1
 8009464:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	33b0      	adds	r3, #176	@ 0xb0
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800949c:	2302      	movs	r3, #2
 800949e:	e018      	b.n	80094d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	7c1b      	ldrb	r3, [r3, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10a      	bne.n	80094be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094a8:	4b0d      	ldr	r3, [pc, #52]	@ (80094e0 <USBD_CDC_Init+0x1e8>)
 80094aa:	7819      	ldrb	r1, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f002 fcba 	bl	800be30 <USBD_LL_PrepareReceive>
 80094bc:	e008      	b.n	80094d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094be:	4b08      	ldr	r3, [pc, #32]	@ (80094e0 <USBD_CDC_Init+0x1e8>)
 80094c0:	7819      	ldrb	r1, [r3, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094c8:	2340      	movs	r3, #64	@ 0x40
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f002 fcb0 	bl	800be30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	20000093 	.word	0x20000093
 80094e0:	20000094 	.word	0x20000094
 80094e4:	20000095 	.word	0x20000095

080094e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80094f4:	4b3a      	ldr	r3, [pc, #232]	@ (80095e0 <USBD_CDC_DeInit+0xf8>)
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f002 fb5c 	bl	800bbb8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009500:	4b37      	ldr	r3, [pc, #220]	@ (80095e0 <USBD_CDC_DeInit+0xf8>)
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	f003 020f 	and.w	r2, r3, #15
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	4613      	mov	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	440b      	add	r3, r1
 8009514:	3324      	adds	r3, #36	@ 0x24
 8009516:	2200      	movs	r2, #0
 8009518:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800951a:	4b32      	ldr	r3, [pc, #200]	@ (80095e4 <USBD_CDC_DeInit+0xfc>)
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f002 fb49 	bl	800bbb8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009526:	4b2f      	ldr	r3, [pc, #188]	@ (80095e4 <USBD_CDC_DeInit+0xfc>)
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	f003 020f 	and.w	r2, r3, #15
 800952e:	6879      	ldr	r1, [r7, #4]
 8009530:	4613      	mov	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	440b      	add	r3, r1
 800953a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800953e:	2200      	movs	r2, #0
 8009540:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009542:	4b29      	ldr	r3, [pc, #164]	@ (80095e8 <USBD_CDC_DeInit+0x100>)
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f002 fb35 	bl	800bbb8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800954e:	4b26      	ldr	r3, [pc, #152]	@ (80095e8 <USBD_CDC_DeInit+0x100>)
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	f003 020f 	and.w	r2, r3, #15
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	4613      	mov	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	440b      	add	r3, r1
 8009562:	3324      	adds	r3, #36	@ 0x24
 8009564:	2200      	movs	r2, #0
 8009566:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009568:	4b1f      	ldr	r3, [pc, #124]	@ (80095e8 <USBD_CDC_DeInit+0x100>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	f003 020f 	and.w	r2, r3, #15
 8009570:	6879      	ldr	r1, [r7, #4]
 8009572:	4613      	mov	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	440b      	add	r3, r1
 800957c:	3326      	adds	r3, #38	@ 0x26
 800957e:	2200      	movs	r2, #0
 8009580:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	32b0      	adds	r2, #176	@ 0xb0
 800958c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d01f      	beq.n	80095d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	33b0      	adds	r3, #176	@ 0xb0
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	32b0      	adds	r2, #176	@ 0xb0
 80095b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f002 fce2 	bl	800bf80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	32b0      	adds	r2, #176	@ 0xb0
 80095c6:	2100      	movs	r1, #0
 80095c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20000093 	.word	0x20000093
 80095e4:	20000094 	.word	0x20000094
 80095e8:	20000095 	.word	0x20000095

080095ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	32b0      	adds	r2, #176	@ 0xb0
 8009600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009604:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009606:	2300      	movs	r3, #0
 8009608:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800960a:	2300      	movs	r3, #0
 800960c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009618:	2303      	movs	r3, #3
 800961a:	e0bf      	b.n	800979c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009624:	2b00      	cmp	r3, #0
 8009626:	d050      	beq.n	80096ca <USBD_CDC_Setup+0xde>
 8009628:	2b20      	cmp	r3, #32
 800962a:	f040 80af 	bne.w	800978c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	88db      	ldrh	r3, [r3, #6]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d03a      	beq.n	80096ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	b25b      	sxtb	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	da1b      	bge.n	8009678 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	33b0      	adds	r3, #176	@ 0xb0
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009656:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	88d2      	ldrh	r2, [r2, #6]
 800965c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	88db      	ldrh	r3, [r3, #6]
 8009662:	2b07      	cmp	r3, #7
 8009664:	bf28      	it	cs
 8009666:	2307      	movcs	r3, #7
 8009668:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	89fa      	ldrh	r2, [r7, #14]
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f001 fdb1 	bl	800b1d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009676:	e090      	b.n	800979a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	785a      	ldrb	r2, [r3, #1]
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	88db      	ldrh	r3, [r3, #6]
 8009686:	2b3f      	cmp	r3, #63	@ 0x3f
 8009688:	d803      	bhi.n	8009692 <USBD_CDC_Setup+0xa6>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	88db      	ldrh	r3, [r3, #6]
 800968e:	b2da      	uxtb	r2, r3
 8009690:	e000      	b.n	8009694 <USBD_CDC_Setup+0xa8>
 8009692:	2240      	movs	r2, #64	@ 0x40
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800969a:	6939      	ldr	r1, [r7, #16]
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80096a2:	461a      	mov	r2, r3
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f001 fdc3 	bl	800b230 <USBD_CtlPrepareRx>
      break;
 80096aa:	e076      	b.n	800979a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	33b0      	adds	r3, #176	@ 0xb0
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	7850      	ldrb	r0, [r2, #1]
 80096c2:	2200      	movs	r2, #0
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	4798      	blx	r3
      break;
 80096c8:	e067      	b.n	800979a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	785b      	ldrb	r3, [r3, #1]
 80096ce:	2b0b      	cmp	r3, #11
 80096d0:	d851      	bhi.n	8009776 <USBD_CDC_Setup+0x18a>
 80096d2:	a201      	add	r2, pc, #4	@ (adr r2, 80096d8 <USBD_CDC_Setup+0xec>)
 80096d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d8:	08009709 	.word	0x08009709
 80096dc:	08009785 	.word	0x08009785
 80096e0:	08009777 	.word	0x08009777
 80096e4:	08009777 	.word	0x08009777
 80096e8:	08009777 	.word	0x08009777
 80096ec:	08009777 	.word	0x08009777
 80096f0:	08009777 	.word	0x08009777
 80096f4:	08009777 	.word	0x08009777
 80096f8:	08009777 	.word	0x08009777
 80096fc:	08009777 	.word	0x08009777
 8009700:	08009733 	.word	0x08009733
 8009704:	0800975d 	.word	0x0800975d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b03      	cmp	r3, #3
 8009712:	d107      	bne.n	8009724 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009714:	f107 030a 	add.w	r3, r7, #10
 8009718:	2202      	movs	r2, #2
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f001 fd5b 	bl	800b1d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009722:	e032      	b.n	800978a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 fce5 	bl	800b0f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800972c:	2303      	movs	r3, #3
 800972e:	75fb      	strb	r3, [r7, #23]
          break;
 8009730:	e02b      	b.n	800978a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b03      	cmp	r3, #3
 800973c:	d107      	bne.n	800974e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800973e:	f107 030d 	add.w	r3, r7, #13
 8009742:	2201      	movs	r2, #1
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f001 fd46 	bl	800b1d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800974c:	e01d      	b.n	800978a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 fcd0 	bl	800b0f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009756:	2303      	movs	r3, #3
 8009758:	75fb      	strb	r3, [r7, #23]
          break;
 800975a:	e016      	b.n	800978a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b03      	cmp	r3, #3
 8009766:	d00f      	beq.n	8009788 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f001 fcc3 	bl	800b0f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009770:	2303      	movs	r3, #3
 8009772:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009774:	e008      	b.n	8009788 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f001 fcbc 	bl	800b0f6 <USBD_CtlError>
          ret = USBD_FAIL;
 800977e:	2303      	movs	r3, #3
 8009780:	75fb      	strb	r3, [r7, #23]
          break;
 8009782:	e002      	b.n	800978a <USBD_CDC_Setup+0x19e>
          break;
 8009784:	bf00      	nop
 8009786:	e008      	b.n	800979a <USBD_CDC_Setup+0x1ae>
          break;
 8009788:	bf00      	nop
      }
      break;
 800978a:	e006      	b.n	800979a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f001 fcb1 	bl	800b0f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009794:	2303      	movs	r3, #3
 8009796:	75fb      	strb	r3, [r7, #23]
      break;
 8009798:	bf00      	nop
  }

  return (uint8_t)ret;
 800979a:	7dfb      	ldrb	r3, [r7, #23]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3718      	adds	r7, #24
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	460b      	mov	r3, r1
 80097ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	32b0      	adds	r2, #176	@ 0xb0
 80097c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80097ca:	2303      	movs	r3, #3
 80097cc:	e065      	b.n	800989a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	32b0      	adds	r2, #176	@ 0xb0
 80097d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80097de:	78fb      	ldrb	r3, [r7, #3]
 80097e0:	f003 020f 	and.w	r2, r3, #15
 80097e4:	6879      	ldr	r1, [r7, #4]
 80097e6:	4613      	mov	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4413      	add	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	440b      	add	r3, r1
 80097f0:	3318      	adds	r3, #24
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d02f      	beq.n	8009858 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80097f8:	78fb      	ldrb	r3, [r7, #3]
 80097fa:	f003 020f 	and.w	r2, r3, #15
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	4613      	mov	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	440b      	add	r3, r1
 800980a:	3318      	adds	r3, #24
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	78fb      	ldrb	r3, [r7, #3]
 8009810:	f003 010f 	and.w	r1, r3, #15
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	460b      	mov	r3, r1
 8009818:	00db      	lsls	r3, r3, #3
 800981a:	440b      	add	r3, r1
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4403      	add	r3, r0
 8009820:	3344      	adds	r3, #68	@ 0x44
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	fbb2 f1f3 	udiv	r1, r2, r3
 8009828:	fb01 f303 	mul.w	r3, r1, r3
 800982c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800982e:	2b00      	cmp	r3, #0
 8009830:	d112      	bne.n	8009858 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009832:	78fb      	ldrb	r3, [r7, #3]
 8009834:	f003 020f 	and.w	r2, r3, #15
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	4613      	mov	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	440b      	add	r3, r1
 8009844:	3318      	adds	r3, #24
 8009846:	2200      	movs	r2, #0
 8009848:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800984a:	78f9      	ldrb	r1, [r7, #3]
 800984c:	2300      	movs	r3, #0
 800984e:	2200      	movs	r2, #0
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f002 fab5 	bl	800bdc0 <USBD_LL_Transmit>
 8009856:	e01f      	b.n	8009898 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	2200      	movs	r2, #0
 800985c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	33b0      	adds	r3, #176	@ 0xb0
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d010      	beq.n	8009898 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	33b0      	adds	r3, #176	@ 0xb0
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009894:	78fa      	ldrb	r2, [r7, #3]
 8009896:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b084      	sub	sp, #16
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	460b      	mov	r3, r1
 80098ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	32b0      	adds	r2, #176	@ 0xb0
 80098b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	32b0      	adds	r2, #176	@ 0xb0
 80098c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e01a      	b.n	800990a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80098d4:	78fb      	ldrb	r3, [r7, #3]
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f002 fae1 	bl	800bea0 <USBD_LL_GetRxDataSize>
 80098de:	4602      	mov	r2, r0
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	33b0      	adds	r3, #176	@ 0xb0
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009904:	4611      	mov	r1, r2
 8009906:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b084      	sub	sp, #16
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	32b0      	adds	r2, #176	@ 0xb0
 8009924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009928:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d101      	bne.n	8009934 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009930:	2303      	movs	r3, #3
 8009932:	e024      	b.n	800997e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	33b0      	adds	r3, #176	@ 0xb0
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d019      	beq.n	800997c <USBD_CDC_EP0_RxReady+0x6a>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800994e:	2bff      	cmp	r3, #255	@ 0xff
 8009950:	d014      	beq.n	800997c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	33b0      	adds	r3, #176	@ 0xb0
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800996a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009972:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	22ff      	movs	r2, #255	@ 0xff
 8009978:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009990:	2182      	movs	r1, #130	@ 0x82
 8009992:	4818      	ldr	r0, [pc, #96]	@ (80099f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009994:	f000 fd4f 	bl	800a436 <USBD_GetEpDesc>
 8009998:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800999a:	2101      	movs	r1, #1
 800999c:	4815      	ldr	r0, [pc, #84]	@ (80099f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800999e:	f000 fd4a 	bl	800a436 <USBD_GetEpDesc>
 80099a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099a4:	2181      	movs	r1, #129	@ 0x81
 80099a6:	4813      	ldr	r0, [pc, #76]	@ (80099f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099a8:	f000 fd45 	bl	800a436 <USBD_GetEpDesc>
 80099ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	2210      	movs	r2, #16
 80099b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d006      	beq.n	80099ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099c8:	711a      	strb	r2, [r3, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d006      	beq.n	80099e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099dc:	711a      	strb	r2, [r3, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2243      	movs	r2, #67	@ 0x43
 80099e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80099e8:	4b02      	ldr	r3, [pc, #8]	@ (80099f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3718      	adds	r7, #24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	20000050 	.word	0x20000050

080099f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a00:	2182      	movs	r1, #130	@ 0x82
 8009a02:	4818      	ldr	r0, [pc, #96]	@ (8009a64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a04:	f000 fd17 	bl	800a436 <USBD_GetEpDesc>
 8009a08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	4815      	ldr	r0, [pc, #84]	@ (8009a64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a0e:	f000 fd12 	bl	800a436 <USBD_GetEpDesc>
 8009a12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a14:	2181      	movs	r1, #129	@ 0x81
 8009a16:	4813      	ldr	r0, [pc, #76]	@ (8009a64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a18:	f000 fd0d 	bl	800a436 <USBD_GetEpDesc>
 8009a1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	2210      	movs	r2, #16
 8009a28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d006      	beq.n	8009a3e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	2200      	movs	r2, #0
 8009a34:	711a      	strb	r2, [r3, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f042 0202 	orr.w	r2, r2, #2
 8009a3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d006      	beq.n	8009a52 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	711a      	strb	r2, [r3, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f042 0202 	orr.w	r2, r2, #2
 8009a50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2243      	movs	r2, #67	@ 0x43
 8009a56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a58:	4b02      	ldr	r3, [pc, #8]	@ (8009a64 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20000050 	.word	0x20000050

08009a68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a70:	2182      	movs	r1, #130	@ 0x82
 8009a72:	4818      	ldr	r0, [pc, #96]	@ (8009ad4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a74:	f000 fcdf 	bl	800a436 <USBD_GetEpDesc>
 8009a78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	4815      	ldr	r0, [pc, #84]	@ (8009ad4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a7e:	f000 fcda 	bl	800a436 <USBD_GetEpDesc>
 8009a82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a84:	2181      	movs	r1, #129	@ 0x81
 8009a86:	4813      	ldr	r0, [pc, #76]	@ (8009ad4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a88:	f000 fcd5 	bl	800a436 <USBD_GetEpDesc>
 8009a8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2210      	movs	r2, #16
 8009a98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d006      	beq.n	8009aae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009aa8:	711a      	strb	r2, [r3, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d006      	beq.n	8009ac2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009abc:	711a      	strb	r2, [r3, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2243      	movs	r2, #67	@ 0x43
 8009ac6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ac8:	4b02      	ldr	r3, [pc, #8]	@ (8009ad4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	20000050 	.word	0x20000050

08009ad8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	220a      	movs	r2, #10
 8009ae4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009ae6:	4b03      	ldr	r3, [pc, #12]	@ (8009af4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	2000000c 	.word	0x2000000c

08009af8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d101      	bne.n	8009b0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e009      	b.n	8009b20 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	33b0      	adds	r3, #176	@ 0xb0
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	32b0      	adds	r2, #176	@ 0xb0
 8009b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b46:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d101      	bne.n	8009b52 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e008      	b.n	8009b64 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	371c      	adds	r7, #28
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	32b0      	adds	r2, #176	@ 0xb0
 8009b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009b90:	2303      	movs	r3, #3
 8009b92:	e004      	b.n	8009b9e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
	...

08009bac <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	32b0      	adds	r2, #176	@ 0xb0
 8009bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d101      	bne.n	8009bd2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e025      	b.n	8009c1e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d11f      	bne.n	8009c1c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009be4:	4b10      	ldr	r3, [pc, #64]	@ (8009c28 <USBD_CDC_TransmitPacket+0x7c>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	f003 020f 	and.w	r2, r3, #15
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4403      	add	r3, r0
 8009bfe:	3318      	adds	r3, #24
 8009c00:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009c02:	4b09      	ldr	r3, [pc, #36]	@ (8009c28 <USBD_CDC_TransmitPacket+0x7c>)
 8009c04:	7819      	ldrb	r1, [r3, #0]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f002 f8d4 	bl	800bdc0 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20000093 	.word	0x20000093

08009c2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	32b0      	adds	r2, #176	@ 0xb0
 8009c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c42:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	32b0      	adds	r2, #176	@ 0xb0
 8009c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009c56:	2303      	movs	r3, #3
 8009c58:	e018      	b.n	8009c8c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	7c1b      	ldrb	r3, [r3, #16]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10a      	bne.n	8009c78 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c62:	4b0c      	ldr	r3, [pc, #48]	@ (8009c94 <USBD_CDC_ReceivePacket+0x68>)
 8009c64:	7819      	ldrb	r1, [r3, #0]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f002 f8dd 	bl	800be30 <USBD_LL_PrepareReceive>
 8009c76:	e008      	b.n	8009c8a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c78:	4b06      	ldr	r3, [pc, #24]	@ (8009c94 <USBD_CDC_ReceivePacket+0x68>)
 8009c7a:	7819      	ldrb	r1, [r3, #0]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c82:	2340      	movs	r3, #64	@ 0x40
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f002 f8d3 	bl	800be30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	20000094 	.word	0x20000094

08009c98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d101      	bne.n	8009cb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e01f      	b.n	8009cf0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	79fa      	ldrb	r2, [r7, #7]
 8009ce2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f001 feab 	bl	800ba40 <USBD_LL_Init>
 8009cea:	4603      	mov	r3, r0
 8009cec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d02:	2300      	movs	r3, #0
 8009d04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d101      	bne.n	8009d10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e025      	b.n	8009d5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	32ae      	adds	r2, #174	@ 0xae
 8009d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00f      	beq.n	8009d4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	32ae      	adds	r2, #174	@ 0xae
 8009d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d3c:	f107 020e 	add.w	r2, r7, #14
 8009d40:	4610      	mov	r0, r2
 8009d42:	4798      	blx	r3
 8009d44:	4602      	mov	r2, r0
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009d52:	1c5a      	adds	r2, r3, #1
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 feb3 	bl	800bad8 <USBD_LL_Start>
 8009d72:	4603      	mov	r3, r0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b084      	sub	sp, #16
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d009      	beq.n	8009dc0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	78fa      	ldrb	r2, [r7, #3]
 8009db6:	4611      	mov	r1, r2
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	4798      	blx	r3
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	78fa      	ldrb	r2, [r7, #3]
 8009de4:	4611      	mov	r1, r2
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	4798      	blx	r3
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009df0:	2303      	movs	r3, #3
 8009df2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b084      	sub	sp, #16
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
 8009e06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	4618      	mov	r0, r3
 8009e12:	f001 f936 	bl	800b082 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009e24:	461a      	mov	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e32:	f003 031f 	and.w	r3, r3, #31
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d01a      	beq.n	8009e70 <USBD_LL_SetupStage+0x72>
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d822      	bhi.n	8009e84 <USBD_LL_SetupStage+0x86>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d002      	beq.n	8009e48 <USBD_LL_SetupStage+0x4a>
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d00a      	beq.n	8009e5c <USBD_LL_SetupStage+0x5e>
 8009e46:	e01d      	b.n	8009e84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fb63 	bl	800a51c <USBD_StdDevReq>
 8009e56:	4603      	mov	r3, r0
 8009e58:	73fb      	strb	r3, [r7, #15]
      break;
 8009e5a:	e020      	b.n	8009e9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fbcb 	bl	800a600 <USBD_StdItfReq>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e6e:	e016      	b.n	8009e9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fc2d 	bl	800a6d8 <USBD_StdEPReq>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	73fb      	strb	r3, [r7, #15]
      break;
 8009e82:	e00c      	b.n	8009e9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	4619      	mov	r1, r3
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f001 fec6 	bl	800bc24 <USBD_LL_StallEP>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e9c:	bf00      	nop
  }

  return ret;
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009eba:	7afb      	ldrb	r3, [r7, #11]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d16e      	bne.n	8009f9e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009ec6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009ece:	2b03      	cmp	r3, #3
 8009ed0:	f040 8098 	bne.w	800a004 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	689a      	ldr	r2, [r3, #8]
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d913      	bls.n	8009f08 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	689a      	ldr	r2, [r3, #8]
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	1ad2      	subs	r2, r2, r3
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	bf28      	it	cs
 8009efa:	4613      	movcs	r3, r2
 8009efc:	461a      	mov	r2, r3
 8009efe:	6879      	ldr	r1, [r7, #4]
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f001 f9b2 	bl	800b26a <USBD_CtlContinueRx>
 8009f06:	e07d      	b.n	800a004 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f0e:	f003 031f 	and.w	r3, r3, #31
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d014      	beq.n	8009f40 <USBD_LL_DataOutStage+0x98>
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d81d      	bhi.n	8009f56 <USBD_LL_DataOutStage+0xae>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <USBD_LL_DataOutStage+0x7c>
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d003      	beq.n	8009f2a <USBD_LL_DataOutStage+0x82>
 8009f22:	e018      	b.n	8009f56 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	75bb      	strb	r3, [r7, #22]
            break;
 8009f28:	e018      	b.n	8009f5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	4619      	mov	r1, r3
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 fa64 	bl	800a402 <USBD_CoreFindIF>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	75bb      	strb	r3, [r7, #22]
            break;
 8009f3e:	e00d      	b.n	8009f5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	4619      	mov	r1, r3
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 fa66 	bl	800a41c <USBD_CoreFindEP>
 8009f50:	4603      	mov	r3, r0
 8009f52:	75bb      	strb	r3, [r7, #22]
            break;
 8009f54:	e002      	b.n	8009f5c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009f56:	2300      	movs	r3, #0
 8009f58:	75bb      	strb	r3, [r7, #22]
            break;
 8009f5a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009f5c:	7dbb      	ldrb	r3, [r7, #22]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d119      	bne.n	8009f96 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b03      	cmp	r3, #3
 8009f6c:	d113      	bne.n	8009f96 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009f6e:	7dba      	ldrb	r2, [r7, #22]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	32ae      	adds	r2, #174	@ 0xae
 8009f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00b      	beq.n	8009f96 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009f7e:	7dba      	ldrb	r2, [r7, #22]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009f86:	7dba      	ldrb	r2, [r7, #22]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	32ae      	adds	r2, #174	@ 0xae
 8009f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f001 f978 	bl	800b28c <USBD_CtlSendStatus>
 8009f9c:	e032      	b.n	800a004 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009f9e:	7afb      	ldrb	r3, [r7, #11]
 8009fa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 fa37 	bl	800a41c <USBD_CoreFindEP>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fb2:	7dbb      	ldrb	r3, [r7, #22]
 8009fb4:	2bff      	cmp	r3, #255	@ 0xff
 8009fb6:	d025      	beq.n	800a004 <USBD_LL_DataOutStage+0x15c>
 8009fb8:	7dbb      	ldrb	r3, [r7, #22]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d122      	bne.n	800a004 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b03      	cmp	r3, #3
 8009fc8:	d117      	bne.n	8009ffa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009fca:	7dba      	ldrb	r2, [r7, #22]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	32ae      	adds	r2, #174	@ 0xae
 8009fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00f      	beq.n	8009ffa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009fda:	7dba      	ldrb	r2, [r7, #22]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009fe2:	7dba      	ldrb	r2, [r7, #22]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	32ae      	adds	r2, #174	@ 0xae
 8009fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fec:	699b      	ldr	r3, [r3, #24]
 8009fee:	7afa      	ldrb	r2, [r7, #11]
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	4798      	blx	r3
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009ffa:	7dfb      	ldrb	r3, [r7, #23]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a000:	7dfb      	ldrb	r3, [r7, #23]
 800a002:	e000      	b.n	800a006 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b086      	sub	sp, #24
 800a012:	af00      	add	r7, sp, #0
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	460b      	mov	r3, r1
 800a018:	607a      	str	r2, [r7, #4]
 800a01a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a01c:	7afb      	ldrb	r3, [r7, #11]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d16f      	bne.n	800a102 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	3314      	adds	r3, #20
 800a026:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d15a      	bne.n	800a0e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	689a      	ldr	r2, [r3, #8]
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d914      	bls.n	800a068 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	689a      	ldr	r2, [r3, #8]
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	1ad2      	subs	r2, r2, r3
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	461a      	mov	r2, r3
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f001 f8da 	bl	800b20e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a05a:	2300      	movs	r3, #0
 800a05c:	2200      	movs	r2, #0
 800a05e:	2100      	movs	r1, #0
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f001 fee5 	bl	800be30 <USBD_LL_PrepareReceive>
 800a066:	e03f      	b.n	800a0e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	68da      	ldr	r2, [r3, #12]
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	429a      	cmp	r2, r3
 800a072:	d11c      	bne.n	800a0ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d316      	bcc.n	800a0ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d20f      	bcs.n	800a0ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a08e:	2200      	movs	r2, #0
 800a090:	2100      	movs	r1, #0
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f001 f8bb 	bl	800b20e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f001 fec2 	bl	800be30 <USBD_LL_PrepareReceive>
 800a0ac:	e01c      	b.n	800a0e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	d10f      	bne.n	800a0da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d009      	beq.n	800a0da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0da:	2180      	movs	r1, #128	@ 0x80
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f001 fda1 	bl	800bc24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f001 f8e5 	bl	800b2b2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d03a      	beq.n	800a168 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f7ff fe42 	bl	8009d7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a100:	e032      	b.n	800a168 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a102:	7afb      	ldrb	r3, [r7, #11]
 800a104:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	4619      	mov	r1, r3
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 f985 	bl	800a41c <USBD_CoreFindEP>
 800a112:	4603      	mov	r3, r0
 800a114:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a116:	7dfb      	ldrb	r3, [r7, #23]
 800a118:	2bff      	cmp	r3, #255	@ 0xff
 800a11a:	d025      	beq.n	800a168 <USBD_LL_DataInStage+0x15a>
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d122      	bne.n	800a168 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	d11c      	bne.n	800a168 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a12e:	7dfa      	ldrb	r2, [r7, #23]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	32ae      	adds	r2, #174	@ 0xae
 800a134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d014      	beq.n	800a168 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a13e:	7dfa      	ldrb	r2, [r7, #23]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a146:	7dfa      	ldrb	r2, [r7, #23]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	32ae      	adds	r2, #174	@ 0xae
 800a14c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	7afa      	ldrb	r2, [r7, #11]
 800a154:	4611      	mov	r1, r2
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	4798      	blx	r3
 800a15a:	4603      	mov	r3, r0
 800a15c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a15e:	7dbb      	ldrb	r3, [r7, #22]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a164:	7dbb      	ldrb	r3, [r7, #22]
 800a166:	e000      	b.n	800a16a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d014      	beq.n	800a1d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00e      	beq.n	800a1d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	6852      	ldr	r2, [r2, #4]
 800a1c6:	b2d2      	uxtb	r2, r2
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	4798      	blx	r3
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1d8:	2340      	movs	r3, #64	@ 0x40
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2100      	movs	r1, #0
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f001 fcac 	bl	800bb3c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2240      	movs	r2, #64	@ 0x40
 800a1f0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1f4:	2340      	movs	r3, #64	@ 0x40
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2180      	movs	r1, #128	@ 0x80
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f001 fc9e 	bl	800bb3c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2240      	movs	r2, #64	@ 0x40
 800a20a:	621a      	str	r2, [r3, #32]

  return ret;
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a216:	b480      	push	{r7}
 800a218:	b083      	sub	sp, #12
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	460b      	mov	r3, r1
 800a220:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	78fa      	ldrb	r2, [r7, #3]
 800a226:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	370c      	adds	r7, #12
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a236:	b480      	push	{r7}
 800a238:	b083      	sub	sp, #12
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b04      	cmp	r3, #4
 800a248:	d006      	beq.n	800a258 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a250:	b2da      	uxtb	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2204      	movs	r2, #4
 800a25c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	370c      	adds	r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a26e:	b480      	push	{r7}
 800a270:	b083      	sub	sp, #12
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	2b04      	cmp	r3, #4
 800a280:	d106      	bne.n	800a290 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	370c      	adds	r7, #12
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b082      	sub	sp, #8
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b03      	cmp	r3, #3
 800a2b0:	d110      	bne.n	800a2d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00b      	beq.n	800a2d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d005      	beq.n	800a2d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ce:	69db      	ldr	r3, [r3, #28]
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b082      	sub	sp, #8
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	32ae      	adds	r2, #174	@ 0xae
 800a2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e01c      	b.n	800a33a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b03      	cmp	r3, #3
 800a30a:	d115      	bne.n	800a338 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	32ae      	adds	r2, #174	@ 0xae
 800a316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31a:	6a1b      	ldr	r3, [r3, #32]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00b      	beq.n	800a338 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	32ae      	adds	r2, #174	@ 0xae
 800a32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a32e:	6a1b      	ldr	r3, [r3, #32]
 800a330:	78fa      	ldrb	r2, [r7, #3]
 800a332:	4611      	mov	r1, r2
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b082      	sub	sp, #8
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	460b      	mov	r3, r1
 800a34c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	32ae      	adds	r2, #174	@ 0xae
 800a358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a360:	2303      	movs	r3, #3
 800a362:	e01c      	b.n	800a39e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d115      	bne.n	800a39c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	32ae      	adds	r2, #174	@ 0xae
 800a37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00b      	beq.n	800a39c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	32ae      	adds	r2, #174	@ 0xae
 800a38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a394:	78fa      	ldrb	r2, [r7, #3]
 800a396:	4611      	mov	r1, r2
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00e      	beq.n	800a3f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	6852      	ldr	r2, [r2, #4]
 800a3e6:	b2d2      	uxtb	r2, r2
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	4798      	blx	r3
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a402:	b480      	push	{r7}
 800a404:	b083      	sub	sp, #12
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	460b      	mov	r3, r1
 800a40c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a40e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a428:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	370c      	adds	r7, #12
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b086      	sub	sp, #24
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	460b      	mov	r3, r1
 800a440:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a44a:	2300      	movs	r3, #0
 800a44c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	885b      	ldrh	r3, [r3, #2]
 800a452:	b29b      	uxth	r3, r3
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	7812      	ldrb	r2, [r2, #0]
 800a458:	4293      	cmp	r3, r2
 800a45a:	d91f      	bls.n	800a49c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a462:	e013      	b.n	800a48c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a464:	f107 030a 	add.w	r3, r7, #10
 800a468:	4619      	mov	r1, r3
 800a46a:	6978      	ldr	r0, [r7, #20]
 800a46c:	f000 f81b 	bl	800a4a6 <USBD_GetNextDesc>
 800a470:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	785b      	ldrb	r3, [r3, #1]
 800a476:	2b05      	cmp	r3, #5
 800a478:	d108      	bne.n	800a48c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	789b      	ldrb	r3, [r3, #2]
 800a482:	78fa      	ldrb	r2, [r7, #3]
 800a484:	429a      	cmp	r2, r3
 800a486:	d008      	beq.n	800a49a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a488:	2300      	movs	r3, #0
 800a48a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	885b      	ldrh	r3, [r3, #2]
 800a490:	b29a      	uxth	r2, r3
 800a492:	897b      	ldrh	r3, [r7, #10]
 800a494:	429a      	cmp	r2, r3
 800a496:	d8e5      	bhi.n	800a464 <USBD_GetEpDesc+0x2e>
 800a498:	e000      	b.n	800a49c <USBD_GetEpDesc+0x66>
          break;
 800a49a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a49c:	693b      	ldr	r3, [r7, #16]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b085      	sub	sp, #20
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	881b      	ldrh	r3, [r3, #0]
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	7812      	ldrb	r2, [r2, #0]
 800a4bc:	4413      	add	r3, r2
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b087      	sub	sp, #28
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a4fc:	8a3b      	ldrh	r3, [r7, #16]
 800a4fe:	021b      	lsls	r3, r3, #8
 800a500:	b21a      	sxth	r2, r3
 800a502:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a506:	4313      	orrs	r3, r2
 800a508:	b21b      	sxth	r3, r3
 800a50a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a50c:	89fb      	ldrh	r3, [r7, #14]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	371c      	adds	r7, #28
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
	...

0800a51c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a532:	2b40      	cmp	r3, #64	@ 0x40
 800a534:	d005      	beq.n	800a542 <USBD_StdDevReq+0x26>
 800a536:	2b40      	cmp	r3, #64	@ 0x40
 800a538:	d857      	bhi.n	800a5ea <USBD_StdDevReq+0xce>
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00f      	beq.n	800a55e <USBD_StdDevReq+0x42>
 800a53e:	2b20      	cmp	r3, #32
 800a540:	d153      	bne.n	800a5ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	32ae      	adds	r2, #174	@ 0xae
 800a54c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	6839      	ldr	r1, [r7, #0]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	4798      	blx	r3
 800a558:	4603      	mov	r3, r0
 800a55a:	73fb      	strb	r3, [r7, #15]
      break;
 800a55c:	e04a      	b.n	800a5f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	785b      	ldrb	r3, [r3, #1]
 800a562:	2b09      	cmp	r3, #9
 800a564:	d83b      	bhi.n	800a5de <USBD_StdDevReq+0xc2>
 800a566:	a201      	add	r2, pc, #4	@ (adr r2, 800a56c <USBD_StdDevReq+0x50>)
 800a568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56c:	0800a5c1 	.word	0x0800a5c1
 800a570:	0800a5d5 	.word	0x0800a5d5
 800a574:	0800a5df 	.word	0x0800a5df
 800a578:	0800a5cb 	.word	0x0800a5cb
 800a57c:	0800a5df 	.word	0x0800a5df
 800a580:	0800a59f 	.word	0x0800a59f
 800a584:	0800a595 	.word	0x0800a595
 800a588:	0800a5df 	.word	0x0800a5df
 800a58c:	0800a5b7 	.word	0x0800a5b7
 800a590:	0800a5a9 	.word	0x0800a5a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fa3c 	bl	800aa14 <USBD_GetDescriptor>
          break;
 800a59c:	e024      	b.n	800a5e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fbcb 	bl	800ad3c <USBD_SetAddress>
          break;
 800a5a6:	e01f      	b.n	800a5e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a5a8:	6839      	ldr	r1, [r7, #0]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fc0a 	bl	800adc4 <USBD_SetConfig>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	73fb      	strb	r3, [r7, #15]
          break;
 800a5b4:	e018      	b.n	800a5e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fcad 	bl	800af18 <USBD_GetConfig>
          break;
 800a5be:	e013      	b.n	800a5e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a5c0:	6839      	ldr	r1, [r7, #0]
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fcde 	bl	800af84 <USBD_GetStatus>
          break;
 800a5c8:	e00e      	b.n	800a5e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fd0d 	bl	800afec <USBD_SetFeature>
          break;
 800a5d2:	e009      	b.n	800a5e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a5d4:	6839      	ldr	r1, [r7, #0]
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fd31 	bl	800b03e <USBD_ClrFeature>
          break;
 800a5dc:	e004      	b.n	800a5e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a5de:	6839      	ldr	r1, [r7, #0]
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 fd88 	bl	800b0f6 <USBD_CtlError>
          break;
 800a5e6:	bf00      	nop
      }
      break;
 800a5e8:	e004      	b.n	800a5f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fd82 	bl	800b0f6 <USBD_CtlError>
      break;
 800a5f2:	bf00      	nop
  }

  return ret;
 800a5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop

0800a600 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a616:	2b40      	cmp	r3, #64	@ 0x40
 800a618:	d005      	beq.n	800a626 <USBD_StdItfReq+0x26>
 800a61a:	2b40      	cmp	r3, #64	@ 0x40
 800a61c:	d852      	bhi.n	800a6c4 <USBD_StdItfReq+0xc4>
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <USBD_StdItfReq+0x26>
 800a622:	2b20      	cmp	r3, #32
 800a624:	d14e      	bne.n	800a6c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	3b01      	subs	r3, #1
 800a630:	2b02      	cmp	r3, #2
 800a632:	d840      	bhi.n	800a6b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	889b      	ldrh	r3, [r3, #4]
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d836      	bhi.n	800a6ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	889b      	ldrh	r3, [r3, #4]
 800a642:	b2db      	uxtb	r3, r3
 800a644:	4619      	mov	r1, r3
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f7ff fedb 	bl	800a402 <USBD_CoreFindIF>
 800a64c:	4603      	mov	r3, r0
 800a64e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a650:	7bbb      	ldrb	r3, [r7, #14]
 800a652:	2bff      	cmp	r3, #255	@ 0xff
 800a654:	d01d      	beq.n	800a692 <USBD_StdItfReq+0x92>
 800a656:	7bbb      	ldrb	r3, [r7, #14]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d11a      	bne.n	800a692 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a65c:	7bba      	ldrb	r2, [r7, #14]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	32ae      	adds	r2, #174	@ 0xae
 800a662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00f      	beq.n	800a68c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a66c:	7bba      	ldrb	r2, [r7, #14]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a674:	7bba      	ldrb	r2, [r7, #14]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	32ae      	adds	r2, #174	@ 0xae
 800a67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	4798      	blx	r3
 800a686:	4603      	mov	r3, r0
 800a688:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a68a:	e004      	b.n	800a696 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a68c:	2303      	movs	r3, #3
 800a68e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a690:	e001      	b.n	800a696 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a692:	2303      	movs	r3, #3
 800a694:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	88db      	ldrh	r3, [r3, #6]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d110      	bne.n	800a6c0 <USBD_StdItfReq+0xc0>
 800a69e:	7bfb      	ldrb	r3, [r7, #15]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10d      	bne.n	800a6c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fdf1 	bl	800b28c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a6aa:	e009      	b.n	800a6c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fd21 	bl	800b0f6 <USBD_CtlError>
          break;
 800a6b4:	e004      	b.n	800a6c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fd1c 	bl	800b0f6 <USBD_CtlError>
          break;
 800a6be:	e000      	b.n	800a6c2 <USBD_StdItfReq+0xc2>
          break;
 800a6c0:	bf00      	nop
      }
      break;
 800a6c2:	e004      	b.n	800a6ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a6c4:	6839      	ldr	r1, [r7, #0]
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fd15 	bl	800b0f6 <USBD_CtlError>
      break;
 800a6cc:	bf00      	nop
  }

  return ret;
 800a6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	889b      	ldrh	r3, [r3, #4]
 800a6ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a6f4:	2b40      	cmp	r3, #64	@ 0x40
 800a6f6:	d007      	beq.n	800a708 <USBD_StdEPReq+0x30>
 800a6f8:	2b40      	cmp	r3, #64	@ 0x40
 800a6fa:	f200 817f 	bhi.w	800a9fc <USBD_StdEPReq+0x324>
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d02a      	beq.n	800a758 <USBD_StdEPReq+0x80>
 800a702:	2b20      	cmp	r3, #32
 800a704:	f040 817a 	bne.w	800a9fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a708:	7bbb      	ldrb	r3, [r7, #14]
 800a70a:	4619      	mov	r1, r3
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7ff fe85 	bl	800a41c <USBD_CoreFindEP>
 800a712:	4603      	mov	r3, r0
 800a714:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a716:	7b7b      	ldrb	r3, [r7, #13]
 800a718:	2bff      	cmp	r3, #255	@ 0xff
 800a71a:	f000 8174 	beq.w	800aa06 <USBD_StdEPReq+0x32e>
 800a71e:	7b7b      	ldrb	r3, [r7, #13]
 800a720:	2b00      	cmp	r3, #0
 800a722:	f040 8170 	bne.w	800aa06 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a726:	7b7a      	ldrb	r2, [r7, #13]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a72e:	7b7a      	ldrb	r2, [r7, #13]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	32ae      	adds	r2, #174	@ 0xae
 800a734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 8163 	beq.w	800aa06 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a740:	7b7a      	ldrb	r2, [r7, #13]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	32ae      	adds	r2, #174	@ 0xae
 800a746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	4798      	blx	r3
 800a752:	4603      	mov	r3, r0
 800a754:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a756:	e156      	b.n	800aa06 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	785b      	ldrb	r3, [r3, #1]
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d008      	beq.n	800a772 <USBD_StdEPReq+0x9a>
 800a760:	2b03      	cmp	r3, #3
 800a762:	f300 8145 	bgt.w	800a9f0 <USBD_StdEPReq+0x318>
 800a766:	2b00      	cmp	r3, #0
 800a768:	f000 809b 	beq.w	800a8a2 <USBD_StdEPReq+0x1ca>
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d03c      	beq.n	800a7ea <USBD_StdEPReq+0x112>
 800a770:	e13e      	b.n	800a9f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d002      	beq.n	800a784 <USBD_StdEPReq+0xac>
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d016      	beq.n	800a7b0 <USBD_StdEPReq+0xd8>
 800a782:	e02c      	b.n	800a7de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00d      	beq.n	800a7a6 <USBD_StdEPReq+0xce>
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	2b80      	cmp	r3, #128	@ 0x80
 800a78e:	d00a      	beq.n	800a7a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f001 fa45 	bl	800bc24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a79a:	2180      	movs	r1, #128	@ 0x80
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f001 fa41 	bl	800bc24 <USBD_LL_StallEP>
 800a7a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7a4:	e020      	b.n	800a7e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fca4 	bl	800b0f6 <USBD_CtlError>
              break;
 800a7ae:	e01b      	b.n	800a7e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	885b      	ldrh	r3, [r3, #2]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10e      	bne.n	800a7d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7b8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00b      	beq.n	800a7d6 <USBD_StdEPReq+0xfe>
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	2b80      	cmp	r3, #128	@ 0x80
 800a7c2:	d008      	beq.n	800a7d6 <USBD_StdEPReq+0xfe>
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	88db      	ldrh	r3, [r3, #6]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d104      	bne.n	800a7d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f001 fa27 	bl	800bc24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fd58 	bl	800b28c <USBD_CtlSendStatus>

              break;
 800a7dc:	e004      	b.n	800a7e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a7de:	6839      	ldr	r1, [r7, #0]
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fc88 	bl	800b0f6 <USBD_CtlError>
              break;
 800a7e6:	bf00      	nop
          }
          break;
 800a7e8:	e107      	b.n	800a9fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d002      	beq.n	800a7fc <USBD_StdEPReq+0x124>
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d016      	beq.n	800a828 <USBD_StdEPReq+0x150>
 800a7fa:	e04b      	b.n	800a894 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00d      	beq.n	800a81e <USBD_StdEPReq+0x146>
 800a802:	7bbb      	ldrb	r3, [r7, #14]
 800a804:	2b80      	cmp	r3, #128	@ 0x80
 800a806:	d00a      	beq.n	800a81e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	4619      	mov	r1, r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f001 fa09 	bl	800bc24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a812:	2180      	movs	r1, #128	@ 0x80
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f001 fa05 	bl	800bc24 <USBD_LL_StallEP>
 800a81a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a81c:	e040      	b.n	800a8a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a81e:	6839      	ldr	r1, [r7, #0]
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fc68 	bl	800b0f6 <USBD_CtlError>
              break;
 800a826:	e03b      	b.n	800a8a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	885b      	ldrh	r3, [r3, #2]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d136      	bne.n	800a89e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a830:	7bbb      	ldrb	r3, [r7, #14]
 800a832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a836:	2b00      	cmp	r3, #0
 800a838:	d004      	beq.n	800a844 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a83a:	7bbb      	ldrb	r3, [r7, #14]
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f001 fa26 	bl	800bc90 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fd21 	bl	800b28c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
 800a84c:	4619      	mov	r1, r3
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7ff fde4 	bl	800a41c <USBD_CoreFindEP>
 800a854:	4603      	mov	r3, r0
 800a856:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a858:	7b7b      	ldrb	r3, [r7, #13]
 800a85a:	2bff      	cmp	r3, #255	@ 0xff
 800a85c:	d01f      	beq.n	800a89e <USBD_StdEPReq+0x1c6>
 800a85e:	7b7b      	ldrb	r3, [r7, #13]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d11c      	bne.n	800a89e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a864:	7b7a      	ldrb	r2, [r7, #13]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a86c:	7b7a      	ldrb	r2, [r7, #13]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	32ae      	adds	r2, #174	@ 0xae
 800a872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d010      	beq.n	800a89e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a87c:	7b7a      	ldrb	r2, [r7, #13]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	32ae      	adds	r2, #174	@ 0xae
 800a882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	4798      	blx	r3
 800a88e:	4603      	mov	r3, r0
 800a890:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a892:	e004      	b.n	800a89e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fc2d 	bl	800b0f6 <USBD_CtlError>
              break;
 800a89c:	e000      	b.n	800a8a0 <USBD_StdEPReq+0x1c8>
              break;
 800a89e:	bf00      	nop
          }
          break;
 800a8a0:	e0ab      	b.n	800a9fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d002      	beq.n	800a8b4 <USBD_StdEPReq+0x1dc>
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d032      	beq.n	800a918 <USBD_StdEPReq+0x240>
 800a8b2:	e097      	b.n	800a9e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8b4:	7bbb      	ldrb	r3, [r7, #14]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d007      	beq.n	800a8ca <USBD_StdEPReq+0x1f2>
 800a8ba:	7bbb      	ldrb	r3, [r7, #14]
 800a8bc:	2b80      	cmp	r3, #128	@ 0x80
 800a8be:	d004      	beq.n	800a8ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fc17 	bl	800b0f6 <USBD_CtlError>
                break;
 800a8c8:	e091      	b.n	800a9ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	da0b      	bge.n	800a8ea <USBD_StdEPReq+0x212>
 800a8d2:	7bbb      	ldrb	r3, [r7, #14]
 800a8d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a8d8:	4613      	mov	r3, r2
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4413      	add	r3, r2
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	3310      	adds	r3, #16
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	e00b      	b.n	800a902 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8ea:	7bbb      	ldrb	r3, [r7, #14]
 800a8ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	4413      	add	r3, r2
 800a900:	3304      	adds	r3, #4
 800a902:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2200      	movs	r2, #0
 800a908:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	2202      	movs	r2, #2
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 fc61 	bl	800b1d8 <USBD_CtlSendData>
              break;
 800a916:	e06a      	b.n	800a9ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	da11      	bge.n	800a944 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a920:	7bbb      	ldrb	r3, [r7, #14]
 800a922:	f003 020f 	and.w	r2, r3, #15
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	4613      	mov	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	440b      	add	r3, r1
 800a932:	3324      	adds	r3, #36	@ 0x24
 800a934:	881b      	ldrh	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d117      	bne.n	800a96a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fbda 	bl	800b0f6 <USBD_CtlError>
                  break;
 800a942:	e054      	b.n	800a9ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a944:	7bbb      	ldrb	r3, [r7, #14]
 800a946:	f003 020f 	and.w	r2, r3, #15
 800a94a:	6879      	ldr	r1, [r7, #4]
 800a94c:	4613      	mov	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	440b      	add	r3, r1
 800a956:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a95a:	881b      	ldrh	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d104      	bne.n	800a96a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a960:	6839      	ldr	r1, [r7, #0]
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 fbc7 	bl	800b0f6 <USBD_CtlError>
                  break;
 800a968:	e041      	b.n	800a9ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a96a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	da0b      	bge.n	800a98a <USBD_StdEPReq+0x2b2>
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a978:	4613      	mov	r3, r2
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	4413      	add	r3, r2
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	3310      	adds	r3, #16
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	4413      	add	r3, r2
 800a986:	3304      	adds	r3, #4
 800a988:	e00b      	b.n	800a9a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a98a:	7bbb      	ldrb	r3, [r7, #14]
 800a98c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a990:	4613      	mov	r3, r2
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4413      	add	r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	4413      	add	r3, r2
 800a9a0:	3304      	adds	r3, #4
 800a9a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d002      	beq.n	800a9b0 <USBD_StdEPReq+0x2d8>
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	2b80      	cmp	r3, #128	@ 0x80
 800a9ae:	d103      	bne.n	800a9b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	601a      	str	r2, [r3, #0]
 800a9b6:	e00e      	b.n	800a9d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a9b8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f001 f99d 	bl	800bcfc <USBD_LL_IsStallEP>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d003      	beq.n	800a9d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	601a      	str	r2, [r3, #0]
 800a9ce:	e002      	b.n	800a9d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	2202      	movs	r2, #2
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fbfb 	bl	800b1d8 <USBD_CtlSendData>
              break;
 800a9e2:	e004      	b.n	800a9ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fb85 	bl	800b0f6 <USBD_CtlError>
              break;
 800a9ec:	bf00      	nop
          }
          break;
 800a9ee:	e004      	b.n	800a9fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fb7f 	bl	800b0f6 <USBD_CtlError>
          break;
 800a9f8:	bf00      	nop
      }
      break;
 800a9fa:	e005      	b.n	800aa08 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fb79 	bl	800b0f6 <USBD_CtlError>
      break;
 800aa04:	e000      	b.n	800aa08 <USBD_StdEPReq+0x330>
      break;
 800aa06:	bf00      	nop
  }

  return ret;
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
	...

0800aa14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa22:	2300      	movs	r3, #0
 800aa24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa26:	2300      	movs	r3, #0
 800aa28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	885b      	ldrh	r3, [r3, #2]
 800aa2e:	0a1b      	lsrs	r3, r3, #8
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	3b01      	subs	r3, #1
 800aa34:	2b0e      	cmp	r3, #14
 800aa36:	f200 8152 	bhi.w	800acde <USBD_GetDescriptor+0x2ca>
 800aa3a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa40 <USBD_GetDescriptor+0x2c>)
 800aa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa40:	0800aab1 	.word	0x0800aab1
 800aa44:	0800aac9 	.word	0x0800aac9
 800aa48:	0800ab09 	.word	0x0800ab09
 800aa4c:	0800acdf 	.word	0x0800acdf
 800aa50:	0800acdf 	.word	0x0800acdf
 800aa54:	0800ac7f 	.word	0x0800ac7f
 800aa58:	0800acab 	.word	0x0800acab
 800aa5c:	0800acdf 	.word	0x0800acdf
 800aa60:	0800acdf 	.word	0x0800acdf
 800aa64:	0800acdf 	.word	0x0800acdf
 800aa68:	0800acdf 	.word	0x0800acdf
 800aa6c:	0800acdf 	.word	0x0800acdf
 800aa70:	0800acdf 	.word	0x0800acdf
 800aa74:	0800acdf 	.word	0x0800acdf
 800aa78:	0800aa7d 	.word	0x0800aa7d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa82:	69db      	ldr	r3, [r3, #28]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00b      	beq.n	800aaa0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	7c12      	ldrb	r2, [r2, #16]
 800aa94:	f107 0108 	add.w	r1, r7, #8
 800aa98:	4610      	mov	r0, r2
 800aa9a:	4798      	blx	r3
 800aa9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa9e:	e126      	b.n	800acee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fb27 	bl	800b0f6 <USBD_CtlError>
        err++;
 800aaa8:	7afb      	ldrb	r3, [r7, #11]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	72fb      	strb	r3, [r7, #11]
      break;
 800aaae:	e11e      	b.n	800acee <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	7c12      	ldrb	r2, [r2, #16]
 800aabc:	f107 0108 	add.w	r1, r7, #8
 800aac0:	4610      	mov	r0, r2
 800aac2:	4798      	blx	r3
 800aac4:	60f8      	str	r0, [r7, #12]
      break;
 800aac6:	e112      	b.n	800acee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	7c1b      	ldrb	r3, [r3, #16]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10d      	bne.n	800aaec <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad8:	f107 0208 	add.w	r2, r7, #8
 800aadc:	4610      	mov	r0, r2
 800aade:	4798      	blx	r3
 800aae0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	3301      	adds	r3, #1
 800aae6:	2202      	movs	r2, #2
 800aae8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aaea:	e100      	b.n	800acee <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf4:	f107 0208 	add.w	r2, r7, #8
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4798      	blx	r3
 800aafc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3301      	adds	r3, #1
 800ab02:	2202      	movs	r2, #2
 800ab04:	701a      	strb	r2, [r3, #0]
      break;
 800ab06:	e0f2      	b.n	800acee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	885b      	ldrh	r3, [r3, #2]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	2b05      	cmp	r3, #5
 800ab10:	f200 80ac 	bhi.w	800ac6c <USBD_GetDescriptor+0x258>
 800ab14:	a201      	add	r2, pc, #4	@ (adr r2, 800ab1c <USBD_GetDescriptor+0x108>)
 800ab16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1a:	bf00      	nop
 800ab1c:	0800ab35 	.word	0x0800ab35
 800ab20:	0800ab69 	.word	0x0800ab69
 800ab24:	0800ab9d 	.word	0x0800ab9d
 800ab28:	0800abd1 	.word	0x0800abd1
 800ab2c:	0800ac05 	.word	0x0800ac05
 800ab30:	0800ac39 	.word	0x0800ac39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	7c12      	ldrb	r2, [r2, #16]
 800ab4c:	f107 0108 	add.w	r1, r7, #8
 800ab50:	4610      	mov	r0, r2
 800ab52:	4798      	blx	r3
 800ab54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab56:	e091      	b.n	800ac7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 facb 	bl	800b0f6 <USBD_CtlError>
            err++;
 800ab60:	7afb      	ldrb	r3, [r7, #11]
 800ab62:	3301      	adds	r3, #1
 800ab64:	72fb      	strb	r3, [r7, #11]
          break;
 800ab66:	e089      	b.n	800ac7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00b      	beq.n	800ab8c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	7c12      	ldrb	r2, [r2, #16]
 800ab80:	f107 0108 	add.w	r1, r7, #8
 800ab84:	4610      	mov	r0, r2
 800ab86:	4798      	blx	r3
 800ab88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab8a:	e077      	b.n	800ac7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab8c:	6839      	ldr	r1, [r7, #0]
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fab1 	bl	800b0f6 <USBD_CtlError>
            err++;
 800ab94:	7afb      	ldrb	r3, [r7, #11]
 800ab96:	3301      	adds	r3, #1
 800ab98:	72fb      	strb	r3, [r7, #11]
          break;
 800ab9a:	e06f      	b.n	800ac7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00b      	beq.n	800abc0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	7c12      	ldrb	r2, [r2, #16]
 800abb4:	f107 0108 	add.w	r1, r7, #8
 800abb8:	4610      	mov	r0, r2
 800abba:	4798      	blx	r3
 800abbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abbe:	e05d      	b.n	800ac7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fa97 	bl	800b0f6 <USBD_CtlError>
            err++;
 800abc8:	7afb      	ldrb	r3, [r7, #11]
 800abca:	3301      	adds	r3, #1
 800abcc:	72fb      	strb	r3, [r7, #11]
          break;
 800abce:	e055      	b.n	800ac7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00b      	beq.n	800abf4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	7c12      	ldrb	r2, [r2, #16]
 800abe8:	f107 0108 	add.w	r1, r7, #8
 800abec:	4610      	mov	r0, r2
 800abee:	4798      	blx	r3
 800abf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abf2:	e043      	b.n	800ac7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abf4:	6839      	ldr	r1, [r7, #0]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fa7d 	bl	800b0f6 <USBD_CtlError>
            err++;
 800abfc:	7afb      	ldrb	r3, [r7, #11]
 800abfe:	3301      	adds	r3, #1
 800ac00:	72fb      	strb	r3, [r7, #11]
          break;
 800ac02:	e03b      	b.n	800ac7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac0a:	695b      	ldr	r3, [r3, #20]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00b      	beq.n	800ac28 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac16:	695b      	ldr	r3, [r3, #20]
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	7c12      	ldrb	r2, [r2, #16]
 800ac1c:	f107 0108 	add.w	r1, r7, #8
 800ac20:	4610      	mov	r0, r2
 800ac22:	4798      	blx	r3
 800ac24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac26:	e029      	b.n	800ac7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fa63 	bl	800b0f6 <USBD_CtlError>
            err++;
 800ac30:	7afb      	ldrb	r3, [r7, #11]
 800ac32:	3301      	adds	r3, #1
 800ac34:	72fb      	strb	r3, [r7, #11]
          break;
 800ac36:	e021      	b.n	800ac7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00b      	beq.n	800ac5c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	7c12      	ldrb	r2, [r2, #16]
 800ac50:	f107 0108 	add.w	r1, r7, #8
 800ac54:	4610      	mov	r0, r2
 800ac56:	4798      	blx	r3
 800ac58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac5a:	e00f      	b.n	800ac7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fa49 	bl	800b0f6 <USBD_CtlError>
            err++;
 800ac64:	7afb      	ldrb	r3, [r7, #11]
 800ac66:	3301      	adds	r3, #1
 800ac68:	72fb      	strb	r3, [r7, #11]
          break;
 800ac6a:	e007      	b.n	800ac7c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ac6c:	6839      	ldr	r1, [r7, #0]
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 fa41 	bl	800b0f6 <USBD_CtlError>
          err++;
 800ac74:	7afb      	ldrb	r3, [r7, #11]
 800ac76:	3301      	adds	r3, #1
 800ac78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ac7a:	bf00      	nop
      }
      break;
 800ac7c:	e037      	b.n	800acee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	7c1b      	ldrb	r3, [r3, #16]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d109      	bne.n	800ac9a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac8e:	f107 0208 	add.w	r2, r7, #8
 800ac92:	4610      	mov	r0, r2
 800ac94:	4798      	blx	r3
 800ac96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac98:	e029      	b.n	800acee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fa2a 	bl	800b0f6 <USBD_CtlError>
        err++;
 800aca2:	7afb      	ldrb	r3, [r7, #11]
 800aca4:	3301      	adds	r3, #1
 800aca6:	72fb      	strb	r3, [r7, #11]
      break;
 800aca8:	e021      	b.n	800acee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	7c1b      	ldrb	r3, [r3, #16]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10d      	bne.n	800acce <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acba:	f107 0208 	add.w	r2, r7, #8
 800acbe:	4610      	mov	r0, r2
 800acc0:	4798      	blx	r3
 800acc2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3301      	adds	r3, #1
 800acc8:	2207      	movs	r2, #7
 800acca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800accc:	e00f      	b.n	800acee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 fa10 	bl	800b0f6 <USBD_CtlError>
        err++;
 800acd6:	7afb      	ldrb	r3, [r7, #11]
 800acd8:	3301      	adds	r3, #1
 800acda:	72fb      	strb	r3, [r7, #11]
      break;
 800acdc:	e007      	b.n	800acee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fa08 	bl	800b0f6 <USBD_CtlError>
      err++;
 800ace6:	7afb      	ldrb	r3, [r7, #11]
 800ace8:	3301      	adds	r3, #1
 800acea:	72fb      	strb	r3, [r7, #11]
      break;
 800acec:	bf00      	nop
  }

  if (err != 0U)
 800acee:	7afb      	ldrb	r3, [r7, #11]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d11e      	bne.n	800ad32 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	88db      	ldrh	r3, [r3, #6]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d016      	beq.n	800ad2a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800acfc:	893b      	ldrh	r3, [r7, #8]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00e      	beq.n	800ad20 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	88da      	ldrh	r2, [r3, #6]
 800ad06:	893b      	ldrh	r3, [r7, #8]
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	bf28      	it	cs
 800ad0c:	4613      	movcs	r3, r2
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad12:	893b      	ldrh	r3, [r7, #8]
 800ad14:	461a      	mov	r2, r3
 800ad16:	68f9      	ldr	r1, [r7, #12]
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fa5d 	bl	800b1d8 <USBD_CtlSendData>
 800ad1e:	e009      	b.n	800ad34 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f9e7 	bl	800b0f6 <USBD_CtlError>
 800ad28:	e004      	b.n	800ad34 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 faae 	bl	800b28c <USBD_CtlSendStatus>
 800ad30:	e000      	b.n	800ad34 <USBD_GetDescriptor+0x320>
    return;
 800ad32:	bf00      	nop
  }
}
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop

0800ad3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	889b      	ldrh	r3, [r3, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d131      	bne.n	800adb2 <USBD_SetAddress+0x76>
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	88db      	ldrh	r3, [r3, #6]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d12d      	bne.n	800adb2 <USBD_SetAddress+0x76>
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	885b      	ldrh	r3, [r3, #2]
 800ad5a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad5c:	d829      	bhi.n	800adb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	885b      	ldrh	r3, [r3, #2]
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d104      	bne.n	800ad80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f9bc 	bl	800b0f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad7e:	e01d      	b.n	800adbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	7bfa      	ldrb	r2, [r7, #15]
 800ad84:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 ffe1 	bl	800bd54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fa7a 	bl	800b28c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d004      	beq.n	800ada8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2202      	movs	r2, #2
 800ada2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada6:	e009      	b.n	800adbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adb0:	e004      	b.n	800adbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f99e 	bl	800b0f6 <USBD_CtlError>
  }
}
 800adba:	bf00      	nop
 800adbc:	bf00      	nop
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adce:	2300      	movs	r3, #0
 800add0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	885b      	ldrh	r3, [r3, #2]
 800add6:	b2da      	uxtb	r2, r3
 800add8:	4b4e      	ldr	r3, [pc, #312]	@ (800af14 <USBD_SetConfig+0x150>)
 800adda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800addc:	4b4d      	ldr	r3, [pc, #308]	@ (800af14 <USBD_SetConfig+0x150>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d905      	bls.n	800adf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f985 	bl	800b0f6 <USBD_CtlError>
    return USBD_FAIL;
 800adec:	2303      	movs	r3, #3
 800adee:	e08c      	b.n	800af0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d002      	beq.n	800ae02 <USBD_SetConfig+0x3e>
 800adfc:	2b03      	cmp	r3, #3
 800adfe:	d029      	beq.n	800ae54 <USBD_SetConfig+0x90>
 800ae00:	e075      	b.n	800aeee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ae02:	4b44      	ldr	r3, [pc, #272]	@ (800af14 <USBD_SetConfig+0x150>)
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d020      	beq.n	800ae4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ae0a:	4b42      	ldr	r3, [pc, #264]	@ (800af14 <USBD_SetConfig+0x150>)
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae14:	4b3f      	ldr	r3, [pc, #252]	@ (800af14 <USBD_SetConfig+0x150>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	4619      	mov	r1, r3
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7fe ffb9 	bl	8009d92 <USBD_SetClassConfig>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d008      	beq.n	800ae3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f962 	bl	800b0f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2202      	movs	r2, #2
 800ae36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae3a:	e065      	b.n	800af08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fa25 	bl	800b28c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2203      	movs	r2, #3
 800ae46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ae4a:	e05d      	b.n	800af08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fa1d 	bl	800b28c <USBD_CtlSendStatus>
      break;
 800ae52:	e059      	b.n	800af08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae54:	4b2f      	ldr	r3, [pc, #188]	@ (800af14 <USBD_SetConfig+0x150>)
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d112      	bne.n	800ae82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ae64:	4b2b      	ldr	r3, [pc, #172]	@ (800af14 <USBD_SetConfig+0x150>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	461a      	mov	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae6e:	4b29      	ldr	r3, [pc, #164]	@ (800af14 <USBD_SetConfig+0x150>)
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	4619      	mov	r1, r3
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7fe ffa8 	bl	8009dca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fa06 	bl	800b28c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae80:	e042      	b.n	800af08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ae82:	4b24      	ldr	r3, [pc, #144]	@ (800af14 <USBD_SetConfig+0x150>)
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d02a      	beq.n	800aee6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	4619      	mov	r1, r3
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f7fe ff96 	bl	8009dca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae9e:	4b1d      	ldr	r3, [pc, #116]	@ (800af14 <USBD_SetConfig+0x150>)
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	461a      	mov	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aea8:	4b1a      	ldr	r3, [pc, #104]	@ (800af14 <USBD_SetConfig+0x150>)
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	4619      	mov	r1, r3
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7fe ff6f 	bl	8009d92 <USBD_SetClassConfig>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00f      	beq.n	800aede <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f918 	bl	800b0f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	4619      	mov	r1, r3
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7fe ff7b 	bl	8009dca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2202      	movs	r2, #2
 800aed8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aedc:	e014      	b.n	800af08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f9d4 	bl	800b28c <USBD_CtlSendStatus>
      break;
 800aee4:	e010      	b.n	800af08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f9d0 	bl	800b28c <USBD_CtlSendStatus>
      break;
 800aeec:	e00c      	b.n	800af08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f900 	bl	800b0f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aef6:	4b07      	ldr	r3, [pc, #28]	@ (800af14 <USBD_SetConfig+0x150>)
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7fe ff64 	bl	8009dca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800af02:	2303      	movs	r3, #3
 800af04:	73fb      	strb	r3, [r7, #15]
      break;
 800af06:	bf00      	nop
  }

  return ret;
 800af08:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	2000a56c 	.word	0x2000a56c

0800af18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	88db      	ldrh	r3, [r3, #6]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d004      	beq.n	800af34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800af2a:	6839      	ldr	r1, [r7, #0]
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f8e2 	bl	800b0f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800af32:	e023      	b.n	800af7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	dc02      	bgt.n	800af46 <USBD_GetConfig+0x2e>
 800af40:	2b00      	cmp	r3, #0
 800af42:	dc03      	bgt.n	800af4c <USBD_GetConfig+0x34>
 800af44:	e015      	b.n	800af72 <USBD_GetConfig+0x5a>
 800af46:	2b03      	cmp	r3, #3
 800af48:	d00b      	beq.n	800af62 <USBD_GetConfig+0x4a>
 800af4a:	e012      	b.n	800af72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	3308      	adds	r3, #8
 800af56:	2201      	movs	r2, #1
 800af58:	4619      	mov	r1, r3
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f93c 	bl	800b1d8 <USBD_CtlSendData>
        break;
 800af60:	e00c      	b.n	800af7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	3304      	adds	r3, #4
 800af66:	2201      	movs	r2, #1
 800af68:	4619      	mov	r1, r3
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f934 	bl	800b1d8 <USBD_CtlSendData>
        break;
 800af70:	e004      	b.n	800af7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f8be 	bl	800b0f6 <USBD_CtlError>
        break;
 800af7a:	bf00      	nop
}
 800af7c:	bf00      	nop
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af94:	b2db      	uxtb	r3, r3
 800af96:	3b01      	subs	r3, #1
 800af98:	2b02      	cmp	r3, #2
 800af9a:	d81e      	bhi.n	800afda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	88db      	ldrh	r3, [r3, #6]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d004      	beq.n	800afae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f8a5 	bl	800b0f6 <USBD_CtlError>
        break;
 800afac:	e01a      	b.n	800afe4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2201      	movs	r2, #1
 800afb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d005      	beq.n	800afca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	f043 0202 	orr.w	r2, r3, #2
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	330c      	adds	r3, #12
 800afce:	2202      	movs	r2, #2
 800afd0:	4619      	mov	r1, r3
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f900 	bl	800b1d8 <USBD_CtlSendData>
      break;
 800afd8:	e004      	b.n	800afe4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800afda:	6839      	ldr	r1, [r7, #0]
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f88a 	bl	800b0f6 <USBD_CtlError>
      break;
 800afe2:	bf00      	nop
  }
}
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	885b      	ldrh	r3, [r3, #2]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d107      	bne.n	800b00e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f940 	bl	800b28c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b00c:	e013      	b.n	800b036 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	885b      	ldrh	r3, [r3, #2]
 800b012:	2b02      	cmp	r3, #2
 800b014:	d10b      	bne.n	800b02e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	889b      	ldrh	r3, [r3, #4]
 800b01a:	0a1b      	lsrs	r3, r3, #8
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f930 	bl	800b28c <USBD_CtlSendStatus>
}
 800b02c:	e003      	b.n	800b036 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f860 	bl	800b0f6 <USBD_CtlError>
}
 800b036:	bf00      	nop
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	3b01      	subs	r3, #1
 800b052:	2b02      	cmp	r3, #2
 800b054:	d80b      	bhi.n	800b06e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	885b      	ldrh	r3, [r3, #2]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d10c      	bne.n	800b078 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f910 	bl	800b28c <USBD_CtlSendStatus>
      }
      break;
 800b06c:	e004      	b.n	800b078 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f840 	bl	800b0f6 <USBD_CtlError>
      break;
 800b076:	e000      	b.n	800b07a <USBD_ClrFeature+0x3c>
      break;
 800b078:	bf00      	nop
  }
}
 800b07a:	bf00      	nop
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b084      	sub	sp, #16
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	781a      	ldrb	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3301      	adds	r3, #1
 800b09c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	781a      	ldrb	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f7ff fa16 	bl	800a4de <SWAPBYTE>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f7ff fa09 	bl	800a4de <SWAPBYTE>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f7ff f9fc 	bl	800a4de <SWAPBYTE>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	80da      	strh	r2, [r3, #6]
}
 800b0ee:	bf00      	nop
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b100:	2180      	movs	r1, #128	@ 0x80
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fd8e 	bl	800bc24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b108:	2100      	movs	r1, #0
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fd8a 	bl	800bc24 <USBD_LL_StallEP>
}
 800b110:	bf00      	nop
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b086      	sub	sp, #24
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b124:	2300      	movs	r3, #0
 800b126:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d036      	beq.n	800b19c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b132:	6938      	ldr	r0, [r7, #16]
 800b134:	f000 f836 	bl	800b1a4 <USBD_GetLen>
 800b138:	4603      	mov	r3, r0
 800b13a:	3301      	adds	r3, #1
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	005b      	lsls	r3, r3, #1
 800b140:	b29a      	uxth	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b146:	7dfb      	ldrb	r3, [r7, #23]
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	4413      	add	r3, r2
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	7812      	ldrb	r2, [r2, #0]
 800b150:	701a      	strb	r2, [r3, #0]
  idx++;
 800b152:	7dfb      	ldrb	r3, [r7, #23]
 800b154:	3301      	adds	r3, #1
 800b156:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b158:	7dfb      	ldrb	r3, [r7, #23]
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	4413      	add	r3, r2
 800b15e:	2203      	movs	r2, #3
 800b160:	701a      	strb	r2, [r3, #0]
  idx++;
 800b162:	7dfb      	ldrb	r3, [r7, #23]
 800b164:	3301      	adds	r3, #1
 800b166:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b168:	e013      	b.n	800b192 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b16a:	7dfb      	ldrb	r3, [r7, #23]
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	4413      	add	r3, r2
 800b170:	693a      	ldr	r2, [r7, #16]
 800b172:	7812      	ldrb	r2, [r2, #0]
 800b174:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	3301      	adds	r3, #1
 800b17a:	613b      	str	r3, [r7, #16]
    idx++;
 800b17c:	7dfb      	ldrb	r3, [r7, #23]
 800b17e:	3301      	adds	r3, #1
 800b180:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b182:	7dfb      	ldrb	r3, [r7, #23]
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	4413      	add	r3, r2
 800b188:	2200      	movs	r2, #0
 800b18a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b18c:	7dfb      	ldrb	r3, [r7, #23]
 800b18e:	3301      	adds	r3, #1
 800b190:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e7      	bne.n	800b16a <USBD_GetString+0x52>
 800b19a:	e000      	b.n	800b19e <USBD_GetString+0x86>
    return;
 800b19c:	bf00      	nop
  }
}
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b1b4:	e005      	b.n	800b1c2 <USBD_GetLen+0x1e>
  {
    len++;
 800b1b6:	7bfb      	ldrb	r3, [r7, #15]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1f5      	bne.n	800b1b6 <USBD_GetLen+0x12>
  }

  return len;
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f000 fdde 	bl	800bdc0 <USBD_LL_Transmit>

  return USBD_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b084      	sub	sp, #16
 800b212:	af00      	add	r7, sp, #0
 800b214:	60f8      	str	r0, [r7, #12]
 800b216:	60b9      	str	r1, [r7, #8]
 800b218:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	68ba      	ldr	r2, [r7, #8]
 800b21e:	2100      	movs	r1, #0
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f000 fdcd 	bl	800bdc0 <USBD_LL_Transmit>

  return USBD_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3710      	adds	r7, #16
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2203      	movs	r2, #3
 800b240:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	68ba      	ldr	r2, [r7, #8]
 800b258:	2100      	movs	r1, #0
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f000 fde8 	bl	800be30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b084      	sub	sp, #16
 800b26e:	af00      	add	r7, sp, #0
 800b270:	60f8      	str	r0, [r7, #12]
 800b272:	60b9      	str	r1, [r7, #8]
 800b274:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	68ba      	ldr	r2, [r7, #8]
 800b27a:	2100      	movs	r1, #0
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f000 fdd7 	bl	800be30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3710      	adds	r7, #16
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2204      	movs	r2, #4
 800b298:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b29c:	2300      	movs	r3, #0
 800b29e:	2200      	movs	r2, #0
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fd8c 	bl	800bdc0 <USBD_LL_Transmit>

  return USBD_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b082      	sub	sp, #8
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2205      	movs	r2, #5
 800b2be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fdb1 	bl	800be30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b2dc:	2200      	movs	r2, #0
 800b2de:	4912      	ldr	r1, [pc, #72]	@ (800b328 <MX_USB_DEVICE_Init+0x50>)
 800b2e0:	4812      	ldr	r0, [pc, #72]	@ (800b32c <MX_USB_DEVICE_Init+0x54>)
 800b2e2:	f7fe fcd9 	bl	8009c98 <USBD_Init>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d001      	beq.n	800b2f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b2ec:	f7f5 fe61 	bl	8000fb2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b2f0:	490f      	ldr	r1, [pc, #60]	@ (800b330 <MX_USB_DEVICE_Init+0x58>)
 800b2f2:	480e      	ldr	r0, [pc, #56]	@ (800b32c <MX_USB_DEVICE_Init+0x54>)
 800b2f4:	f7fe fd00 	bl	8009cf8 <USBD_RegisterClass>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b2fe:	f7f5 fe58 	bl	8000fb2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b302:	490c      	ldr	r1, [pc, #48]	@ (800b334 <MX_USB_DEVICE_Init+0x5c>)
 800b304:	4809      	ldr	r0, [pc, #36]	@ (800b32c <MX_USB_DEVICE_Init+0x54>)
 800b306:	f7fe fbf7 	bl	8009af8 <USBD_CDC_RegisterInterface>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d001      	beq.n	800b314 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b310:	f7f5 fe4f 	bl	8000fb2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b314:	4805      	ldr	r0, [pc, #20]	@ (800b32c <MX_USB_DEVICE_Init+0x54>)
 800b316:	f7fe fd25 	bl	8009d64 <USBD_Start>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d001      	beq.n	800b324 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b320:	f7f5 fe47 	bl	8000fb2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b324:	bf00      	nop
 800b326:	bd80      	pop	{r7, pc}
 800b328:	200000ac 	.word	0x200000ac
 800b32c:	2000a570 	.word	0x2000a570
 800b330:	20000018 	.word	0x20000018
 800b334:	20000098 	.word	0x20000098

0800b338 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b33c:	2200      	movs	r2, #0
 800b33e:	4905      	ldr	r1, [pc, #20]	@ (800b354 <CDC_Init_FS+0x1c>)
 800b340:	4805      	ldr	r0, [pc, #20]	@ (800b358 <CDC_Init_FS+0x20>)
 800b342:	f7fe fbf3 	bl	8009b2c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b346:	4905      	ldr	r1, [pc, #20]	@ (800b35c <CDC_Init_FS+0x24>)
 800b348:	4803      	ldr	r0, [pc, #12]	@ (800b358 <CDC_Init_FS+0x20>)
 800b34a:	f7fe fc11 	bl	8009b70 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b34e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b350:	4618      	mov	r0, r3
 800b352:	bd80      	pop	{r7, pc}
 800b354:	2000b04c 	.word	0x2000b04c
 800b358:	2000a570 	.word	0x2000a570
 800b35c:	2000a84c 	.word	0x2000a84c

0800b360 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b360:	b480      	push	{r7}
 800b362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b364:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b366:	4618      	mov	r0, r3
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	4603      	mov	r3, r0
 800b378:	6039      	str	r1, [r7, #0]
 800b37a:	71fb      	strb	r3, [r7, #7]
 800b37c:	4613      	mov	r3, r2
 800b37e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b380:	79fb      	ldrb	r3, [r7, #7]
 800b382:	2b23      	cmp	r3, #35	@ 0x23
 800b384:	d84a      	bhi.n	800b41c <CDC_Control_FS+0xac>
 800b386:	a201      	add	r2, pc, #4	@ (adr r2, 800b38c <CDC_Control_FS+0x1c>)
 800b388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38c:	0800b41d 	.word	0x0800b41d
 800b390:	0800b41d 	.word	0x0800b41d
 800b394:	0800b41d 	.word	0x0800b41d
 800b398:	0800b41d 	.word	0x0800b41d
 800b39c:	0800b41d 	.word	0x0800b41d
 800b3a0:	0800b41d 	.word	0x0800b41d
 800b3a4:	0800b41d 	.word	0x0800b41d
 800b3a8:	0800b41d 	.word	0x0800b41d
 800b3ac:	0800b41d 	.word	0x0800b41d
 800b3b0:	0800b41d 	.word	0x0800b41d
 800b3b4:	0800b41d 	.word	0x0800b41d
 800b3b8:	0800b41d 	.word	0x0800b41d
 800b3bc:	0800b41d 	.word	0x0800b41d
 800b3c0:	0800b41d 	.word	0x0800b41d
 800b3c4:	0800b41d 	.word	0x0800b41d
 800b3c8:	0800b41d 	.word	0x0800b41d
 800b3cc:	0800b41d 	.word	0x0800b41d
 800b3d0:	0800b41d 	.word	0x0800b41d
 800b3d4:	0800b41d 	.word	0x0800b41d
 800b3d8:	0800b41d 	.word	0x0800b41d
 800b3dc:	0800b41d 	.word	0x0800b41d
 800b3e0:	0800b41d 	.word	0x0800b41d
 800b3e4:	0800b41d 	.word	0x0800b41d
 800b3e8:	0800b41d 	.word	0x0800b41d
 800b3ec:	0800b41d 	.word	0x0800b41d
 800b3f0:	0800b41d 	.word	0x0800b41d
 800b3f4:	0800b41d 	.word	0x0800b41d
 800b3f8:	0800b41d 	.word	0x0800b41d
 800b3fc:	0800b41d 	.word	0x0800b41d
 800b400:	0800b41d 	.word	0x0800b41d
 800b404:	0800b41d 	.word	0x0800b41d
 800b408:	0800b41d 	.word	0x0800b41d
 800b40c:	0800b41d 	.word	0x0800b41d
 800b410:	0800b41d 	.word	0x0800b41d
 800b414:	0800b41d 	.word	0x0800b41d
 800b418:	0800b41d 	.word	0x0800b41d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b41c:	bf00      	nop
  }

  return (USBD_OK);
 800b41e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b420:	4618      	mov	r0, r3
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	4808      	ldr	r0, [pc, #32]	@ (800b45c <CDC_Receive_FS+0x30>)
 800b43a:	f7fe fb99 	bl	8009b70 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b43e:	4807      	ldr	r0, [pc, #28]	@ (800b45c <CDC_Receive_FS+0x30>)
 800b440:	f7fe fbf4 	bl	8009c2c <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  USB_My_Receive(Buf, *Len);
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7f5 fb38 	bl	8000ac0 <USB_My_Receive>

  return (USBD_OK);
 800b450:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	2000a570 	.word	0x2000a570

0800b460 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	460b      	mov	r3, r1
 800b46a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b470:	4b0d      	ldr	r3, [pc, #52]	@ (800b4a8 <CDC_Transmit_FS+0x48>)
 800b472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b476:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b482:	2301      	movs	r3, #1
 800b484:	e00b      	b.n	800b49e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b486:	887b      	ldrh	r3, [r7, #2]
 800b488:	461a      	mov	r2, r3
 800b48a:	6879      	ldr	r1, [r7, #4]
 800b48c:	4806      	ldr	r0, [pc, #24]	@ (800b4a8 <CDC_Transmit_FS+0x48>)
 800b48e:	f7fe fb4d 	bl	8009b2c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b492:	4805      	ldr	r0, [pc, #20]	@ (800b4a8 <CDC_Transmit_FS+0x48>)
 800b494:	f7fe fb8a 	bl	8009bac <USBD_CDC_TransmitPacket>
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	2000a570 	.word	0x2000a570

0800b4ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b087      	sub	sp, #28
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b4be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	371c      	adds	r7, #28
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
	...

0800b4d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	6039      	str	r1, [r7, #0]
 800b4da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2212      	movs	r2, #18
 800b4e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b4e2:	4b03      	ldr	r3, [pc, #12]	@ (800b4f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	200000cc 	.word	0x200000cc

0800b4f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	6039      	str	r1, [r7, #0]
 800b4fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	2204      	movs	r2, #4
 800b504:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b506:	4b03      	ldr	r3, [pc, #12]	@ (800b514 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b508:	4618      	mov	r0, r3
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	200000ec 	.word	0x200000ec

0800b518 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	4603      	mov	r3, r0
 800b520:	6039      	str	r1, [r7, #0]
 800b522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b524:	79fb      	ldrb	r3, [r7, #7]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d105      	bne.n	800b536 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	4907      	ldr	r1, [pc, #28]	@ (800b54c <USBD_FS_ProductStrDescriptor+0x34>)
 800b52e:	4808      	ldr	r0, [pc, #32]	@ (800b550 <USBD_FS_ProductStrDescriptor+0x38>)
 800b530:	f7ff fdf2 	bl	800b118 <USBD_GetString>
 800b534:	e004      	b.n	800b540 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	4904      	ldr	r1, [pc, #16]	@ (800b54c <USBD_FS_ProductStrDescriptor+0x34>)
 800b53a:	4805      	ldr	r0, [pc, #20]	@ (800b550 <USBD_FS_ProductStrDescriptor+0x38>)
 800b53c:	f7ff fdec 	bl	800b118 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b540:	4b02      	ldr	r3, [pc, #8]	@ (800b54c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	2000b84c 	.word	0x2000b84c
 800b550:	0800c02c 	.word	0x0800c02c

0800b554 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	4603      	mov	r3, r0
 800b55c:	6039      	str	r1, [r7, #0]
 800b55e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b560:	683a      	ldr	r2, [r7, #0]
 800b562:	4904      	ldr	r1, [pc, #16]	@ (800b574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b564:	4804      	ldr	r0, [pc, #16]	@ (800b578 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b566:	f7ff fdd7 	bl	800b118 <USBD_GetString>
  return USBD_StrDesc;
 800b56a:	4b02      	ldr	r3, [pc, #8]	@ (800b574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	2000b84c 	.word	0x2000b84c
 800b578:	0800c044 	.word	0x0800c044

0800b57c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	4603      	mov	r3, r0
 800b584:	6039      	str	r1, [r7, #0]
 800b586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	221a      	movs	r2, #26
 800b58c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b58e:	f000 f855 	bl	800b63c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b592:	4b02      	ldr	r3, [pc, #8]	@ (800b59c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b594:	4618      	mov	r0, r3
 800b596:	3708      	adds	r7, #8
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	200000f0 	.word	0x200000f0

0800b5a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	6039      	str	r1, [r7, #0]
 800b5aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b5ac:	79fb      	ldrb	r3, [r7, #7]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d105      	bne.n	800b5be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	4907      	ldr	r1, [pc, #28]	@ (800b5d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b5b6:	4808      	ldr	r0, [pc, #32]	@ (800b5d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b5b8:	f7ff fdae 	bl	800b118 <USBD_GetString>
 800b5bc:	e004      	b.n	800b5c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	4904      	ldr	r1, [pc, #16]	@ (800b5d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b5c2:	4805      	ldr	r0, [pc, #20]	@ (800b5d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b5c4:	f7ff fda8 	bl	800b118 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5c8:	4b02      	ldr	r3, [pc, #8]	@ (800b5d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	2000b84c 	.word	0x2000b84c
 800b5d8:	0800c058 	.word	0x0800c058

0800b5dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	6039      	str	r1, [r7, #0]
 800b5e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5e8:	79fb      	ldrb	r3, [r7, #7]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d105      	bne.n	800b5fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	4907      	ldr	r1, [pc, #28]	@ (800b610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5f2:	4808      	ldr	r0, [pc, #32]	@ (800b614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5f4:	f7ff fd90 	bl	800b118 <USBD_GetString>
 800b5f8:	e004      	b.n	800b604 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	4904      	ldr	r1, [pc, #16]	@ (800b610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5fe:	4805      	ldr	r0, [pc, #20]	@ (800b614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b600:	f7ff fd8a 	bl	800b118 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b604:	4b02      	ldr	r3, [pc, #8]	@ (800b610 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b606:	4618      	mov	r0, r3
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	2000b84c 	.word	0x2000b84c
 800b614:	0800c064 	.word	0x0800c064

0800b618 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	4603      	mov	r3, r0
 800b620:	6039      	str	r1, [r7, #0]
 800b622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	220c      	movs	r2, #12
 800b628:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b62a:	4b03      	ldr	r3, [pc, #12]	@ (800b638 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	200000e0 	.word	0x200000e0

0800b63c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b642:	4b0f      	ldr	r3, [pc, #60]	@ (800b680 <Get_SerialNum+0x44>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b648:	4b0e      	ldr	r3, [pc, #56]	@ (800b684 <Get_SerialNum+0x48>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b64e:	4b0e      	ldr	r3, [pc, #56]	@ (800b688 <Get_SerialNum+0x4c>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4413      	add	r3, r2
 800b65a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d009      	beq.n	800b676 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b662:	2208      	movs	r2, #8
 800b664:	4909      	ldr	r1, [pc, #36]	@ (800b68c <Get_SerialNum+0x50>)
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f000 f814 	bl	800b694 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b66c:	2204      	movs	r2, #4
 800b66e:	4908      	ldr	r1, [pc, #32]	@ (800b690 <Get_SerialNum+0x54>)
 800b670:	68b8      	ldr	r0, [r7, #8]
 800b672:	f000 f80f 	bl	800b694 <IntToUnicode>
  }
}
 800b676:	bf00      	nop
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	1fff7590 	.word	0x1fff7590
 800b684:	1fff7594 	.word	0x1fff7594
 800b688:	1fff7598 	.word	0x1fff7598
 800b68c:	200000f2 	.word	0x200000f2
 800b690:	20000102 	.word	0x20000102

0800b694 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b694:	b480      	push	{r7}
 800b696:	b087      	sub	sp, #28
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	75fb      	strb	r3, [r7, #23]
 800b6aa:	e027      	b.n	800b6fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	0f1b      	lsrs	r3, r3, #28
 800b6b0:	2b09      	cmp	r3, #9
 800b6b2:	d80b      	bhi.n	800b6cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	0f1b      	lsrs	r3, r3, #28
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	005b      	lsls	r3, r3, #1
 800b6be:	4619      	mov	r1, r3
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	440b      	add	r3, r1
 800b6c4:	3230      	adds	r2, #48	@ 0x30
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	701a      	strb	r2, [r3, #0]
 800b6ca:	e00a      	b.n	800b6e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	0f1b      	lsrs	r3, r3, #28
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	7dfb      	ldrb	r3, [r7, #23]
 800b6d4:	005b      	lsls	r3, r3, #1
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	440b      	add	r3, r1
 800b6dc:	3237      	adds	r2, #55	@ 0x37
 800b6de:	b2d2      	uxtb	r2, r2
 800b6e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	011b      	lsls	r3, r3, #4
 800b6e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b6e8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ea:	005b      	lsls	r3, r3, #1
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	68ba      	ldr	r2, [r7, #8]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	75fb      	strb	r3, [r7, #23]
 800b6fc:	7dfa      	ldrb	r2, [r7, #23]
 800b6fe:	79fb      	ldrb	r3, [r7, #7]
 800b700:	429a      	cmp	r2, r3
 800b702:	d3d3      	bcc.n	800b6ac <IntToUnicode+0x18>
  }
}
 800b704:	bf00      	nop
 800b706:	bf00      	nop
 800b708:	371c      	adds	r7, #28
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
	...

0800b714 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b0b0      	sub	sp, #192	@ 0xc0
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b71c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b720:	2200      	movs	r2, #0
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	605a      	str	r2, [r3, #4]
 800b726:	609a      	str	r2, [r3, #8]
 800b728:	60da      	str	r2, [r3, #12]
 800b72a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b72c:	f107 0318 	add.w	r3, r7, #24
 800b730:	2294      	movs	r2, #148	@ 0x94
 800b732:	2100      	movs	r1, #0
 800b734:	4618      	mov	r0, r3
 800b736:	f000 fc33 	bl	800bfa0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b742:	d174      	bne.n	800b82e <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b744:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b748:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b74a:	2300      	movs	r3, #0
 800b74c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b750:	f107 0318 	add.w	r3, r7, #24
 800b754:	4618      	mov	r0, r3
 800b756:	f7fa faef 	bl	8005d38 <HAL_RCCEx_PeriphCLKConfig>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d001      	beq.n	800b764 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800b760:	f7f5 fc27 	bl	8000fb2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b764:	4b34      	ldr	r3, [pc, #208]	@ (800b838 <HAL_PCD_MspInit+0x124>)
 800b766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b768:	4a33      	ldr	r2, [pc, #204]	@ (800b838 <HAL_PCD_MspInit+0x124>)
 800b76a:	f043 0301 	orr.w	r3, r3, #1
 800b76e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b770:	4b31      	ldr	r3, [pc, #196]	@ (800b838 <HAL_PCD_MspInit+0x124>)
 800b772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b774:	f003 0301 	and.w	r3, r3, #1
 800b778:	617b      	str	r3, [r7, #20]
 800b77a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b77c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800b780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b784:	2302      	movs	r3, #2
 800b786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b78a:	2300      	movs	r3, #0
 800b78c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b790:	2303      	movs	r3, #3
 800b792:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b796:	230a      	movs	r3, #10
 800b798:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b79c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b7a6:	f7f7 ff87 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b7aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b7be:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b7c8:	f7f7 ff76 	bl	80036b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b7cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b838 <HAL_PCD_MspInit+0x124>)
 800b7ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7d0:	4a19      	ldr	r2, [pc, #100]	@ (800b838 <HAL_PCD_MspInit+0x124>)
 800b7d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b7d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b7d8:	4b17      	ldr	r3, [pc, #92]	@ (800b838 <HAL_PCD_MspInit+0x124>)
 800b7da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b7e0:	613b      	str	r3, [r7, #16]
 800b7e2:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b7e4:	4b14      	ldr	r3, [pc, #80]	@ (800b838 <HAL_PCD_MspInit+0x124>)
 800b7e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d114      	bne.n	800b81a <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b7f0:	4b11      	ldr	r3, [pc, #68]	@ (800b838 <HAL_PCD_MspInit+0x124>)
 800b7f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7f4:	4a10      	ldr	r2, [pc, #64]	@ (800b838 <HAL_PCD_MspInit+0x124>)
 800b7f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7fa:	6593      	str	r3, [r2, #88]	@ 0x58
 800b7fc:	4b0e      	ldr	r3, [pc, #56]	@ (800b838 <HAL_PCD_MspInit+0x124>)
 800b7fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b804:	60fb      	str	r3, [r7, #12]
 800b806:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800b808:	f7f9 fb9e 	bl	8004f48 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b80c:	4b0a      	ldr	r3, [pc, #40]	@ (800b838 <HAL_PCD_MspInit+0x124>)
 800b80e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b810:	4a09      	ldr	r2, [pc, #36]	@ (800b838 <HAL_PCD_MspInit+0x124>)
 800b812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b816:	6593      	str	r3, [r2, #88]	@ 0x58
 800b818:	e001      	b.n	800b81e <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b81a:	f7f9 fb95 	bl	8004f48 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b81e:	2200      	movs	r2, #0
 800b820:	2100      	movs	r1, #0
 800b822:	2043      	movs	r0, #67	@ 0x43
 800b824:	f7f7 fc57 	bl	80030d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b828:	2043      	movs	r0, #67	@ 0x43
 800b82a:	f7f7 fc70 	bl	800310e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b82e:	bf00      	nop
 800b830:	37c0      	adds	r7, #192	@ 0xc0
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	40021000 	.word	0x40021000

0800b83c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800b850:	4619      	mov	r1, r3
 800b852:	4610      	mov	r0, r2
 800b854:	f7fe fad3 	bl	8009dfe <USBD_LL_SetupStage>
}
 800b858:	bf00      	nop
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	460b      	mov	r3, r1
 800b86a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800b872:	78fa      	ldrb	r2, [r7, #3]
 800b874:	6879      	ldr	r1, [r7, #4]
 800b876:	4613      	mov	r3, r2
 800b878:	00db      	lsls	r3, r3, #3
 800b87a:	4413      	add	r3, r2
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	440b      	add	r3, r1
 800b880:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	78fb      	ldrb	r3, [r7, #3]
 800b888:	4619      	mov	r1, r3
 800b88a:	f7fe fb0d 	bl	8009ea8 <USBD_LL_DataOutStage>
}
 800b88e:	bf00      	nop
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	460b      	mov	r3, r1
 800b8a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800b8a8:	78fa      	ldrb	r2, [r7, #3]
 800b8aa:	6879      	ldr	r1, [r7, #4]
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	00db      	lsls	r3, r3, #3
 800b8b0:	4413      	add	r3, r2
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	440b      	add	r3, r1
 800b8b6:	3348      	adds	r3, #72	@ 0x48
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	78fb      	ldrb	r3, [r7, #3]
 800b8bc:	4619      	mov	r1, r3
 800b8be:	f7fe fba6 	bl	800a00e <USBD_LL_DataInStage>
}
 800b8c2:	bf00      	nop
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fe fce0 	bl	800a29e <USBD_LL_SOF>
}
 800b8de:	bf00      	nop
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b084      	sub	sp, #16
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d001      	beq.n	800b8fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b8fa:	f7f5 fb5a 	bl	8000fb2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b904:	7bfa      	ldrb	r2, [r7, #15]
 800b906:	4611      	mov	r1, r2
 800b908:	4618      	mov	r0, r3
 800b90a:	f7fe fc84 	bl	800a216 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b914:	4618      	mov	r0, r3
 800b916:	f7fe fc2c 	bl	800a172 <USBD_LL_Reset>
}
 800b91a:	bf00      	nop
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
	...

0800b924 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	6812      	ldr	r2, [r2, #0]
 800b93a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b93e:	f043 0301 	orr.w	r3, r3, #1
 800b942:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7fe fc73 	bl	800a236 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a1b      	ldr	r3, [r3, #32]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d005      	beq.n	800b964 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b958:	4b04      	ldr	r3, [pc, #16]	@ (800b96c <HAL_PCD_SuspendCallback+0x48>)
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	4a03      	ldr	r2, [pc, #12]	@ (800b96c <HAL_PCD_SuspendCallback+0x48>)
 800b95e:	f043 0306 	orr.w	r3, r3, #6
 800b962:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b964:	bf00      	nop
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	e000ed00 	.word	0xe000ed00

0800b970 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	6812      	ldr	r2, [r2, #0]
 800b986:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b98a:	f023 0301 	bic.w	r3, r3, #1
 800b98e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6a1b      	ldr	r3, [r3, #32]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d007      	beq.n	800b9a8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b998:	4b08      	ldr	r3, [pc, #32]	@ (800b9bc <HAL_PCD_ResumeCallback+0x4c>)
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	4a07      	ldr	r2, [pc, #28]	@ (800b9bc <HAL_PCD_ResumeCallback+0x4c>)
 800b99e:	f023 0306 	bic.w	r3, r3, #6
 800b9a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b9a4:	f000 faf6 	bl	800bf94 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fe fc5d 	bl	800a26e <USBD_LL_Resume>
}
 800b9b4:	bf00      	nop
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	e000ed00 	.word	0xe000ed00

0800b9c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b9d2:	78fa      	ldrb	r2, [r7, #3]
 800b9d4:	4611      	mov	r1, r2
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fe fcb3 	bl	800a342 <USBD_LL_IsoOUTIncomplete>
}
 800b9dc:	bf00      	nop
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b9f6:	78fa      	ldrb	r2, [r7, #3]
 800b9f8:	4611      	mov	r1, r2
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe fc6f 	bl	800a2de <USBD_LL_IsoINIncomplete>
}
 800ba00:	bf00      	nop
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fe fcc5 	bl	800a3a6 <USBD_LL_DevConnected>
}
 800ba1c:	bf00      	nop
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fe fcc2 	bl	800a3bc <USBD_LL_DevDisconnected>
}
 800ba38:	bf00      	nop
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d13c      	bne.n	800baca <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ba50:	4a20      	ldr	r2, [pc, #128]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a1e      	ldr	r2, [pc, #120]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba5c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba60:	4b1c      	ldr	r3, [pc, #112]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba62:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ba66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ba68:	4b1a      	ldr	r3, [pc, #104]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba6a:	2206      	movs	r2, #6
 800ba6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ba6e:	4b19      	ldr	r3, [pc, #100]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba70:	2202      	movs	r2, #2
 800ba72:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba74:	4b17      	ldr	r3, [pc, #92]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba76:	2202      	movs	r2, #2
 800ba78:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ba7a:	4b16      	ldr	r3, [pc, #88]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ba80:	4b14      	ldr	r3, [pc, #80]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ba86:	4b13      	ldr	r3, [pc, #76]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba88:	2200      	movs	r2, #0
 800ba8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ba8c:	4b11      	ldr	r3, [pc, #68]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba8e:	2200      	movs	r2, #0
 800ba90:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ba92:	4b10      	ldr	r3, [pc, #64]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ba98:	4b0e      	ldr	r3, [pc, #56]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ba9e:	480d      	ldr	r0, [pc, #52]	@ (800bad4 <USBD_LL_Init+0x94>)
 800baa0:	f7f7 ffe6 	bl	8003a70 <HAL_PCD_Init>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800baaa:	f7f5 fa82 	bl	8000fb2 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800baae:	2180      	movs	r1, #128	@ 0x80
 800bab0:	4808      	ldr	r0, [pc, #32]	@ (800bad4 <USBD_LL_Init+0x94>)
 800bab2:	f7f9 f950 	bl	8004d56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bab6:	2240      	movs	r2, #64	@ 0x40
 800bab8:	2100      	movs	r1, #0
 800baba:	4806      	ldr	r0, [pc, #24]	@ (800bad4 <USBD_LL_Init+0x94>)
 800babc:	f7f9 f904 	bl	8004cc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bac0:	2280      	movs	r2, #128	@ 0x80
 800bac2:	2101      	movs	r1, #1
 800bac4:	4803      	ldr	r0, [pc, #12]	@ (800bad4 <USBD_LL_Init+0x94>)
 800bac6:	f7f9 f8ff 	bl	8004cc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	2000ba4c 	.word	0x2000ba4c

0800bad8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bae4:	2300      	movs	r3, #0
 800bae6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800baee:	4618      	mov	r0, r3
 800baf0:	f7f8 f8e2 	bl	8003cb8 <HAL_PCD_Start>
 800baf4:	4603      	mov	r3, r0
 800baf6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800baf8:	7bbb      	ldrb	r3, [r7, #14]
 800bafa:	2b03      	cmp	r3, #3
 800bafc:	d816      	bhi.n	800bb2c <USBD_LL_Start+0x54>
 800bafe:	a201      	add	r2, pc, #4	@ (adr r2, 800bb04 <USBD_LL_Start+0x2c>)
 800bb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb04:	0800bb15 	.word	0x0800bb15
 800bb08:	0800bb1b 	.word	0x0800bb1b
 800bb0c:	0800bb21 	.word	0x0800bb21
 800bb10:	0800bb27 	.word	0x0800bb27
    case HAL_OK :
      usb_status = USBD_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	73fb      	strb	r3, [r7, #15]
    break;
 800bb18:	e00b      	b.n	800bb32 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb1e:	e008      	b.n	800bb32 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb20:	2301      	movs	r3, #1
 800bb22:	73fb      	strb	r3, [r7, #15]
    break;
 800bb24:	e005      	b.n	800bb32 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb26:	2303      	movs	r3, #3
 800bb28:	73fb      	strb	r3, [r7, #15]
    break;
 800bb2a:	e002      	b.n	800bb32 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb30:	bf00      	nop
  }
  return usb_status;
 800bb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	4608      	mov	r0, r1
 800bb46:	4611      	mov	r1, r2
 800bb48:	461a      	mov	r2, r3
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	70fb      	strb	r3, [r7, #3]
 800bb4e:	460b      	mov	r3, r1
 800bb50:	70bb      	strb	r3, [r7, #2]
 800bb52:	4613      	mov	r3, r2
 800bb54:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb64:	78bb      	ldrb	r3, [r7, #2]
 800bb66:	883a      	ldrh	r2, [r7, #0]
 800bb68:	78f9      	ldrb	r1, [r7, #3]
 800bb6a:	f7f8 fd8c 	bl	8004686 <HAL_PCD_EP_Open>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bb72:	7bbb      	ldrb	r3, [r7, #14]
 800bb74:	2b03      	cmp	r3, #3
 800bb76:	d817      	bhi.n	800bba8 <USBD_LL_OpenEP+0x6c>
 800bb78:	a201      	add	r2, pc, #4	@ (adr r2, 800bb80 <USBD_LL_OpenEP+0x44>)
 800bb7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb7e:	bf00      	nop
 800bb80:	0800bb91 	.word	0x0800bb91
 800bb84:	0800bb97 	.word	0x0800bb97
 800bb88:	0800bb9d 	.word	0x0800bb9d
 800bb8c:	0800bba3 	.word	0x0800bba3
    case HAL_OK :
      usb_status = USBD_OK;
 800bb90:	2300      	movs	r3, #0
 800bb92:	73fb      	strb	r3, [r7, #15]
    break;
 800bb94:	e00b      	b.n	800bbae <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb96:	2303      	movs	r3, #3
 800bb98:	73fb      	strb	r3, [r7, #15]
    break;
 800bb9a:	e008      	b.n	800bbae <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bba0:	e005      	b.n	800bbae <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bba2:	2303      	movs	r3, #3
 800bba4:	73fb      	strb	r3, [r7, #15]
    break;
 800bba6:	e002      	b.n	800bbae <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	73fb      	strb	r3, [r7, #15]
    break;
 800bbac:	bf00      	nop
  }
  return usb_status;
 800bbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbd2:	78fa      	ldrb	r2, [r7, #3]
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7f8 fdbd 	bl	8004756 <HAL_PCD_EP_Close>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bbe0:	7bbb      	ldrb	r3, [r7, #14]
 800bbe2:	2b03      	cmp	r3, #3
 800bbe4:	d816      	bhi.n	800bc14 <USBD_LL_CloseEP+0x5c>
 800bbe6:	a201      	add	r2, pc, #4	@ (adr r2, 800bbec <USBD_LL_CloseEP+0x34>)
 800bbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbec:	0800bbfd 	.word	0x0800bbfd
 800bbf0:	0800bc03 	.word	0x0800bc03
 800bbf4:	0800bc09 	.word	0x0800bc09
 800bbf8:	0800bc0f 	.word	0x0800bc0f
    case HAL_OK :
      usb_status = USBD_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	73fb      	strb	r3, [r7, #15]
    break;
 800bc00:	e00b      	b.n	800bc1a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc02:	2303      	movs	r3, #3
 800bc04:	73fb      	strb	r3, [r7, #15]
    break;
 800bc06:	e008      	b.n	800bc1a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc0c:	e005      	b.n	800bc1a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	73fb      	strb	r3, [r7, #15]
    break;
 800bc12:	e002      	b.n	800bc1a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bc14:	2303      	movs	r3, #3
 800bc16:	73fb      	strb	r3, [r7, #15]
    break;
 800bc18:	bf00      	nop
  }
  return usb_status;
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc3e:	78fa      	ldrb	r2, [r7, #3]
 800bc40:	4611      	mov	r1, r2
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7f8 fe4c 	bl	80048e0 <HAL_PCD_EP_SetStall>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc4c:	7bbb      	ldrb	r3, [r7, #14]
 800bc4e:	2b03      	cmp	r3, #3
 800bc50:	d816      	bhi.n	800bc80 <USBD_LL_StallEP+0x5c>
 800bc52:	a201      	add	r2, pc, #4	@ (adr r2, 800bc58 <USBD_LL_StallEP+0x34>)
 800bc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc58:	0800bc69 	.word	0x0800bc69
 800bc5c:	0800bc6f 	.word	0x0800bc6f
 800bc60:	0800bc75 	.word	0x0800bc75
 800bc64:	0800bc7b 	.word	0x0800bc7b
    case HAL_OK :
      usb_status = USBD_OK;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc6c:	e00b      	b.n	800bc86 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc6e:	2303      	movs	r3, #3
 800bc70:	73fb      	strb	r3, [r7, #15]
    break;
 800bc72:	e008      	b.n	800bc86 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc74:	2301      	movs	r3, #1
 800bc76:	73fb      	strb	r3, [r7, #15]
    break;
 800bc78:	e005      	b.n	800bc86 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc7a:	2303      	movs	r3, #3
 800bc7c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc7e:	e002      	b.n	800bc86 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bc80:	2303      	movs	r3, #3
 800bc82:	73fb      	strb	r3, [r7, #15]
    break;
 800bc84:	bf00      	nop
  }
  return usb_status;
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	460b      	mov	r3, r1
 800bc9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bca0:	2300      	movs	r3, #0
 800bca2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bcaa:	78fa      	ldrb	r2, [r7, #3]
 800bcac:	4611      	mov	r1, r2
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7f8 fe78 	bl	80049a4 <HAL_PCD_EP_ClrStall>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bcb8:	7bbb      	ldrb	r3, [r7, #14]
 800bcba:	2b03      	cmp	r3, #3
 800bcbc:	d816      	bhi.n	800bcec <USBD_LL_ClearStallEP+0x5c>
 800bcbe:	a201      	add	r2, pc, #4	@ (adr r2, 800bcc4 <USBD_LL_ClearStallEP+0x34>)
 800bcc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc4:	0800bcd5 	.word	0x0800bcd5
 800bcc8:	0800bcdb 	.word	0x0800bcdb
 800bccc:	0800bce1 	.word	0x0800bce1
 800bcd0:	0800bce7 	.word	0x0800bce7
    case HAL_OK :
      usb_status = USBD_OK;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd8:	e00b      	b.n	800bcf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	73fb      	strb	r3, [r7, #15]
    break;
 800bcde:	e008      	b.n	800bcf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bce0:	2301      	movs	r3, #1
 800bce2:	73fb      	strb	r3, [r7, #15]
    break;
 800bce4:	e005      	b.n	800bcf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bce6:	2303      	movs	r3, #3
 800bce8:	73fb      	strb	r3, [r7, #15]
    break;
 800bcea:	e002      	b.n	800bcf2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bcec:	2303      	movs	r3, #3
 800bcee:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf0:	bf00      	nop
  }
  return usb_status;
 800bcf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3710      	adds	r7, #16
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	460b      	mov	r3, r1
 800bd06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bd10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	da0b      	bge.n	800bd30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd18:	78fb      	ldrb	r3, [r7, #3]
 800bd1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd1e:	68f9      	ldr	r1, [r7, #12]
 800bd20:	4613      	mov	r3, r2
 800bd22:	00db      	lsls	r3, r3, #3
 800bd24:	4413      	add	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	440b      	add	r3, r1
 800bd2a:	333e      	adds	r3, #62	@ 0x3e
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	e00b      	b.n	800bd48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd30:	78fb      	ldrb	r3, [r7, #3]
 800bd32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd36:	68f9      	ldr	r1, [r7, #12]
 800bd38:	4613      	mov	r3, r2
 800bd3a:	00db      	lsls	r3, r3, #3
 800bd3c:	4413      	add	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	440b      	add	r3, r1
 800bd42:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800bd46:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd60:	2300      	movs	r3, #0
 800bd62:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd64:	2300      	movs	r3, #0
 800bd66:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd6e:	78fa      	ldrb	r2, [r7, #3]
 800bd70:	4611      	mov	r1, r2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7f8 fc62 	bl	800463c <HAL_PCD_SetAddress>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd7c:	7bbb      	ldrb	r3, [r7, #14]
 800bd7e:	2b03      	cmp	r3, #3
 800bd80:	d816      	bhi.n	800bdb0 <USBD_LL_SetUSBAddress+0x5c>
 800bd82:	a201      	add	r2, pc, #4	@ (adr r2, 800bd88 <USBD_LL_SetUSBAddress+0x34>)
 800bd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd88:	0800bd99 	.word	0x0800bd99
 800bd8c:	0800bd9f 	.word	0x0800bd9f
 800bd90:	0800bda5 	.word	0x0800bda5
 800bd94:	0800bdab 	.word	0x0800bdab
    case HAL_OK :
      usb_status = USBD_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd9c:	e00b      	b.n	800bdb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	73fb      	strb	r3, [r7, #15]
    break;
 800bda2:	e008      	b.n	800bdb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bda4:	2301      	movs	r3, #1
 800bda6:	73fb      	strb	r3, [r7, #15]
    break;
 800bda8:	e005      	b.n	800bdb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdaa:	2303      	movs	r3, #3
 800bdac:	73fb      	strb	r3, [r7, #15]
    break;
 800bdae:	e002      	b.n	800bdb6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bdb4:	bf00      	nop
  }
  return usb_status;
 800bdb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	607a      	str	r2, [r7, #4]
 800bdca:	603b      	str	r3, [r7, #0]
 800bdcc:	460b      	mov	r3, r1
 800bdce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bdde:	7af9      	ldrb	r1, [r7, #11]
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	f7f8 fd4b 	bl	800487e <HAL_PCD_EP_Transmit>
 800bde8:	4603      	mov	r3, r0
 800bdea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bdec:	7dbb      	ldrb	r3, [r7, #22]
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	d816      	bhi.n	800be20 <USBD_LL_Transmit+0x60>
 800bdf2:	a201      	add	r2, pc, #4	@ (adr r2, 800bdf8 <USBD_LL_Transmit+0x38>)
 800bdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf8:	0800be09 	.word	0x0800be09
 800bdfc:	0800be0f 	.word	0x0800be0f
 800be00:	0800be15 	.word	0x0800be15
 800be04:	0800be1b 	.word	0x0800be1b
    case HAL_OK :
      usb_status = USBD_OK;
 800be08:	2300      	movs	r3, #0
 800be0a:	75fb      	strb	r3, [r7, #23]
    break;
 800be0c:	e00b      	b.n	800be26 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be0e:	2303      	movs	r3, #3
 800be10:	75fb      	strb	r3, [r7, #23]
    break;
 800be12:	e008      	b.n	800be26 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be14:	2301      	movs	r3, #1
 800be16:	75fb      	strb	r3, [r7, #23]
    break;
 800be18:	e005      	b.n	800be26 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be1a:	2303      	movs	r3, #3
 800be1c:	75fb      	strb	r3, [r7, #23]
    break;
 800be1e:	e002      	b.n	800be26 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800be20:	2303      	movs	r3, #3
 800be22:	75fb      	strb	r3, [r7, #23]
    break;
 800be24:	bf00      	nop
  }
  return usb_status;
 800be26:	7dfb      	ldrb	r3, [r7, #23]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3718      	adds	r7, #24
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	607a      	str	r2, [r7, #4]
 800be3a:	603b      	str	r3, [r7, #0]
 800be3c:	460b      	mov	r3, r1
 800be3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be44:	2300      	movs	r3, #0
 800be46:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800be4e:	7af9      	ldrb	r1, [r7, #11]
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	f7f8 fcc9 	bl	80047ea <HAL_PCD_EP_Receive>
 800be58:	4603      	mov	r3, r0
 800be5a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800be5c:	7dbb      	ldrb	r3, [r7, #22]
 800be5e:	2b03      	cmp	r3, #3
 800be60:	d816      	bhi.n	800be90 <USBD_LL_PrepareReceive+0x60>
 800be62:	a201      	add	r2, pc, #4	@ (adr r2, 800be68 <USBD_LL_PrepareReceive+0x38>)
 800be64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be68:	0800be79 	.word	0x0800be79
 800be6c:	0800be7f 	.word	0x0800be7f
 800be70:	0800be85 	.word	0x0800be85
 800be74:	0800be8b 	.word	0x0800be8b
    case HAL_OK :
      usb_status = USBD_OK;
 800be78:	2300      	movs	r3, #0
 800be7a:	75fb      	strb	r3, [r7, #23]
    break;
 800be7c:	e00b      	b.n	800be96 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be7e:	2303      	movs	r3, #3
 800be80:	75fb      	strb	r3, [r7, #23]
    break;
 800be82:	e008      	b.n	800be96 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be84:	2301      	movs	r3, #1
 800be86:	75fb      	strb	r3, [r7, #23]
    break;
 800be88:	e005      	b.n	800be96 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be8a:	2303      	movs	r3, #3
 800be8c:	75fb      	strb	r3, [r7, #23]
    break;
 800be8e:	e002      	b.n	800be96 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800be90:	2303      	movs	r3, #3
 800be92:	75fb      	strb	r3, [r7, #23]
    break;
 800be94:	bf00      	nop
  }
  return usb_status;
 800be96:	7dfb      	ldrb	r3, [r7, #23]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3718      	adds	r7, #24
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	460b      	mov	r3, r1
 800beaa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800beb2:	78fa      	ldrb	r2, [r7, #3]
 800beb4:	4611      	mov	r1, r2
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7f8 fcc9 	bl	800484e <HAL_PCD_EP_GetRxCount>
 800bebc:	4603      	mov	r3, r0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
	...

0800bec8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	460b      	mov	r3, r1
 800bed2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bed4:	78fb      	ldrb	r3, [r7, #3]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d002      	beq.n	800bee0 <HAL_PCDEx_LPM_Callback+0x18>
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d01f      	beq.n	800bf1e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bede:	e03b      	b.n	800bf58 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a1b      	ldr	r3, [r3, #32]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d007      	beq.n	800bef8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bee8:	f000 f854 	bl	800bf94 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800beec:	4b1c      	ldr	r3, [pc, #112]	@ (800bf60 <HAL_PCDEx_LPM_Callback+0x98>)
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	4a1b      	ldr	r2, [pc, #108]	@ (800bf60 <HAL_PCDEx_LPM_Callback+0x98>)
 800bef2:	f023 0306 	bic.w	r3, r3, #6
 800bef6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	6812      	ldr	r2, [r2, #0]
 800bf06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bf0a:	f023 0301 	bic.w	r3, r3, #1
 800bf0e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe f9a9 	bl	800a26e <USBD_LL_Resume>
    break;
 800bf1c:	e01c      	b.n	800bf58 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	6812      	ldr	r2, [r2, #0]
 800bf2c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bf30:	f043 0301 	orr.w	r3, r3, #1
 800bf34:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7fe f97a 	bl	800a236 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a1b      	ldr	r3, [r3, #32]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d005      	beq.n	800bf56 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf4a:	4b05      	ldr	r3, [pc, #20]	@ (800bf60 <HAL_PCDEx_LPM_Callback+0x98>)
 800bf4c:	691b      	ldr	r3, [r3, #16]
 800bf4e:	4a04      	ldr	r2, [pc, #16]	@ (800bf60 <HAL_PCDEx_LPM_Callback+0x98>)
 800bf50:	f043 0306 	orr.w	r3, r3, #6
 800bf54:	6113      	str	r3, [r2, #16]
    break;
 800bf56:	bf00      	nop
}
 800bf58:	bf00      	nop
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	e000ed00 	.word	0xe000ed00

0800bf64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bf6c:	4b03      	ldr	r3, [pc, #12]	@ (800bf7c <USBD_static_malloc+0x18>)
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	370c      	adds	r7, #12
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop
 800bf7c:	2000bf58 	.word	0x2000bf58

0800bf80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]

}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bf98:	f7f4 ffb8 	bl	8000f0c <SystemClock_Config>
}
 800bf9c:	bf00      	nop
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <memset>:
 800bfa0:	4402      	add	r2, r0
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d100      	bne.n	800bfaa <memset+0xa>
 800bfa8:	4770      	bx	lr
 800bfaa:	f803 1b01 	strb.w	r1, [r3], #1
 800bfae:	e7f9      	b.n	800bfa4 <memset+0x4>

0800bfb0 <__libc_init_array>:
 800bfb0:	b570      	push	{r4, r5, r6, lr}
 800bfb2:	4d0d      	ldr	r5, [pc, #52]	@ (800bfe8 <__libc_init_array+0x38>)
 800bfb4:	4c0d      	ldr	r4, [pc, #52]	@ (800bfec <__libc_init_array+0x3c>)
 800bfb6:	1b64      	subs	r4, r4, r5
 800bfb8:	10a4      	asrs	r4, r4, #2
 800bfba:	2600      	movs	r6, #0
 800bfbc:	42a6      	cmp	r6, r4
 800bfbe:	d109      	bne.n	800bfd4 <__libc_init_array+0x24>
 800bfc0:	4d0b      	ldr	r5, [pc, #44]	@ (800bff0 <__libc_init_array+0x40>)
 800bfc2:	4c0c      	ldr	r4, [pc, #48]	@ (800bff4 <__libc_init_array+0x44>)
 800bfc4:	f000 f826 	bl	800c014 <_init>
 800bfc8:	1b64      	subs	r4, r4, r5
 800bfca:	10a4      	asrs	r4, r4, #2
 800bfcc:	2600      	movs	r6, #0
 800bfce:	42a6      	cmp	r6, r4
 800bfd0:	d105      	bne.n	800bfde <__libc_init_array+0x2e>
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}
 800bfd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfd8:	4798      	blx	r3
 800bfda:	3601      	adds	r6, #1
 800bfdc:	e7ee      	b.n	800bfbc <__libc_init_array+0xc>
 800bfde:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfe2:	4798      	blx	r3
 800bfe4:	3601      	adds	r6, #1
 800bfe6:	e7f2      	b.n	800bfce <__libc_init_array+0x1e>
 800bfe8:	0800c0ec 	.word	0x0800c0ec
 800bfec:	0800c0ec 	.word	0x0800c0ec
 800bff0:	0800c0ec 	.word	0x0800c0ec
 800bff4:	0800c0f0 	.word	0x0800c0f0

0800bff8 <memcpy>:
 800bff8:	440a      	add	r2, r1
 800bffa:	4291      	cmp	r1, r2
 800bffc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c000:	d100      	bne.n	800c004 <memcpy+0xc>
 800c002:	4770      	bx	lr
 800c004:	b510      	push	{r4, lr}
 800c006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c00a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c00e:	4291      	cmp	r1, r2
 800c010:	d1f9      	bne.n	800c006 <memcpy+0xe>
 800c012:	bd10      	pop	{r4, pc}

0800c014 <_init>:
 800c014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c016:	bf00      	nop
 800c018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c01a:	bc08      	pop	{r3}
 800c01c:	469e      	mov	lr, r3
 800c01e:	4770      	bx	lr

0800c020 <_fini>:
 800c020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c022:	bf00      	nop
 800c024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c026:	bc08      	pop	{r3}
 800c028:	469e      	mov	lr, r3
 800c02a:	4770      	bx	lr
