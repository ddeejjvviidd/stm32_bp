
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c79c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800c958  0800c958  0000d958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca10  0800ca10  0000e10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca10  0800ca10  0000da10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca18  0800ca18  0000e10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca18  0800ca18  0000da18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca1c  0800ca1c  0000da1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800ca20  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c124  2000010c  0800cb2c  0000e10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c230  0800cb2c  0000e230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000242ce  00000000  00000000  0000e13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cf1  00000000  00000000  0003240a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c40  00000000  00000000  00037100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015c8  00000000  00000000  00038d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fd28  00000000  00000000  0003a308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022eeb  00000000  00000000  0006a030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011cd02  00000000  00000000  0008cf1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a9c1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076fc  00000000  00000000  001a9c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b135c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800c940 	.word	0x0800c940

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800c940 	.word	0x0800c940

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b2a      	ldr	r3, [pc, #168]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000504:	4a2a      	ldr	r2, [pc, #168]	@ (80005b0 <MX_ADC1_Init+0xc4>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b28      	ldr	r3, [pc, #160]	@ (80005ac <MX_ADC1_Init+0xc0>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b26      	ldr	r3, [pc, #152]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b25      	ldr	r3, [pc, #148]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800051c:	4b23      	ldr	r3, [pc, #140]	@ (80005ac <MX_ADC1_Init+0xc0>)
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b22      	ldr	r3, [pc, #136]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b20      	ldr	r3, [pc, #128]	@ (80005ac <MX_ADC1_Init+0xc0>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052e:	4b1f      	ldr	r3, [pc, #124]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000530:	2200      	movs	r2, #0
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000534:	4b1d      	ldr	r3, [pc, #116]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000536:	2201      	movs	r2, #1
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b1c      	ldr	r3, [pc, #112]	@ (80005ac <MX_ADC1_Init+0xc0>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b1a      	ldr	r3, [pc, #104]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b18      	ldr	r3, [pc, #96]	@ (80005ac <MX_ADC1_Init+0xc0>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b16      	ldr	r3, [pc, #88]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <MX_ADC1_Init+0xc0>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4810      	ldr	r0, [pc, #64]	@ (80005ac <MX_ADC1_Init+0xc0>)
 800056a:	f001 fb49 	bl	8001c00 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 fcd3 	bl	8000f1e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000578:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <MX_ADC1_Init+0xc8>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000596:	f001 fec5 	bl	8002324 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 fcbd 	bl	8000f1e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005a4:	bf00      	nop
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000128 	.word	0x20000128
 80005b0:	50040000 	.word	0x50040000
 80005b4:	04300002 	.word	0x04300002

080005b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b0ae      	sub	sp, #184	@ 0xb8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	2294      	movs	r2, #148	@ 0x94
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f00c f977 	bl	800c8cc <memset>
  if(adcHandle->Instance==ADC1)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a40      	ldr	r2, [pc, #256]	@ (80006e4 <HAL_ADC_MspInit+0x12c>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d179      	bne.n	80006dc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80005f6:	2302      	movs	r3, #2
 80005f8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80005fe:	230c      	movs	r3, #12
 8000600:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800060e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000612:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	4618      	mov	r0, r3
 800061a:	f005 fc7f 	bl	8005f1c <HAL_RCCEx_PeriphCLKConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000624:	f000 fc7b 	bl	8000f1e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000628:	4b2f      	ldr	r3, [pc, #188]	@ (80006e8 <HAL_ADC_MspInit+0x130>)
 800062a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062c:	4a2e      	ldr	r2, [pc, #184]	@ (80006e8 <HAL_ADC_MspInit+0x130>)
 800062e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000634:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <HAL_ADC_MspInit+0x130>)
 8000636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000640:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <HAL_ADC_MspInit+0x130>)
 8000642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000644:	4a28      	ldr	r2, [pc, #160]	@ (80006e8 <HAL_ADC_MspInit+0x130>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064c:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <HAL_ADC_MspInit+0x130>)
 800064e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000658:	2301      	movs	r3, #1
 800065a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800065e:	230b      	movs	r3, #11
 8000660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800066e:	4619      	mov	r1, r3
 8000670:	481e      	ldr	r0, [pc, #120]	@ (80006ec <HAL_ADC_MspInit+0x134>)
 8000672:	f003 f913 	bl	800389c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8000676:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 8000678:	4a1e      	ldr	r2, [pc, #120]	@ (80006f4 <HAL_ADC_MspInit+0x13c>)
 800067a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800067c:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 800067e:	2205      	movs	r2, #5
 8000680:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000682:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000688:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800068e:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 8000690:	2280      	movs	r2, #128	@ 0x80
 8000692:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 8000696:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800069a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800069c:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 800069e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 80006a6:	2220      	movs	r2, #32
 80006a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006b0:	480f      	ldr	r0, [pc, #60]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 80006b2:	f002 fd7d 	bl	80031b0 <HAL_DMA_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006bc:	f000 fc2f 	bl	8000f1e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a0b      	ldr	r2, [pc, #44]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 80006c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006c6:	4a0a      	ldr	r2, [pc, #40]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	2012      	movs	r0, #18
 80006d2:	f002 fd36 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006d6:	2012      	movs	r0, #18
 80006d8:	f002 fd4f 	bl	800317a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006dc:	bf00      	nop
 80006de:	37b8      	adds	r7, #184	@ 0xb8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	50040000 	.word	0x50040000
 80006e8:	40021000 	.word	0x40021000
 80006ec:	48000800 	.word	0x48000800
 80006f0:	20000190 	.word	0x20000190
 80006f4:	40020030 	.word	0x40020030

080006f8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006fe:	4b37      	ldr	r3, [pc, #220]	@ (80007dc <MX_DMA_Init+0xe4>)
 8000700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000702:	4a36      	ldr	r2, [pc, #216]	@ (80007dc <MX_DMA_Init+0xe4>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	6493      	str	r3, [r2, #72]	@ 0x48
 800070a:	4b34      	ldr	r3, [pc, #208]	@ (80007dc <MX_DMA_Init+0xe4>)
 800070c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000716:	4b31      	ldr	r3, [pc, #196]	@ (80007dc <MX_DMA_Init+0xe4>)
 8000718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <MX_DMA_Init+0xe4>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6493      	str	r3, [r2, #72]	@ 0x48
 8000722:	4b2e      	ldr	r3, [pc, #184]	@ (80007dc <MX_DMA_Init+0xe4>)
 8000724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800072e:	4b2b      	ldr	r3, [pc, #172]	@ (80007dc <MX_DMA_Init+0xe4>)
 8000730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000732:	4a2a      	ldr	r2, [pc, #168]	@ (80007dc <MX_DMA_Init+0xe4>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6493      	str	r3, [r2, #72]	@ 0x48
 800073a:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <MX_DMA_Init+0xe4>)
 800073c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <MX_DMA_Init+0xe8>)
 8000748:	4a26      	ldr	r2, [pc, #152]	@ (80007e4 <MX_DMA_Init+0xec>)
 800074a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <MX_DMA_Init+0xe8>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <MX_DMA_Init+0xe8>)
 8000754:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000758:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 800075a:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <MX_DMA_Init+0xe8>)
 800075c:	2240      	movs	r2, #64	@ 0x40
 800075e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <MX_DMA_Init+0xe8>)
 8000762:	2280      	movs	r2, #128	@ 0x80
 8000764:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000766:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <MX_DMA_Init+0xe8>)
 8000768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800076c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800076e:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <MX_DMA_Init+0xe8>)
 8000770:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000774:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_DMA_Init+0xe8>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_DMA_Init+0xe8>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8000782:	4817      	ldr	r0, [pc, #92]	@ (80007e0 <MX_DMA_Init+0xe8>)
 8000784:	f002 fd14 	bl	80031b0 <HAL_DMA_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_DMA_Init+0x9a>
  {
    Error_Handler();
 800078e:	f000 fbc6 	bl	8000f1e <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	200b      	movs	r0, #11
 8000798:	f002 fcd3 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800079c:	200b      	movs	r0, #11
 800079e:	f002 fcec 	bl	800317a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	200c      	movs	r0, #12
 80007a8:	f002 fccb 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007ac:	200c      	movs	r0, #12
 80007ae:	f002 fce4 	bl	800317a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	200d      	movs	r0, #13
 80007b8:	f002 fcc3 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007bc:	200d      	movs	r0, #13
 80007be:	f002 fcdc 	bl	800317a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2039      	movs	r0, #57	@ 0x39
 80007c8:	f002 fcbb 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80007cc:	2039      	movs	r0, #57	@ 0x39
 80007ce:	f002 fcd4 	bl	800317a <HAL_NVIC_EnableIRQ>

}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	200001f0 	.word	0x200001f0
 80007e4:	4002001c 	.word	0x4002001c

080007e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	@ 0x30
 80007ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	4b55      	ldr	r3, [pc, #340]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a54      	ldr	r2, [pc, #336]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b52      	ldr	r3, [pc, #328]	@ (8000954 <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	4b4f      	ldr	r3, [pc, #316]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a4e      	ldr	r2, [pc, #312]	@ (8000954 <MX_GPIO_Init+0x16c>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b4c      	ldr	r3, [pc, #304]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b49      	ldr	r3, [pc, #292]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a48      	ldr	r2, [pc, #288]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b46      	ldr	r3, [pc, #280]	@ (8000954 <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	4b43      	ldr	r3, [pc, #268]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a42      	ldr	r2, [pc, #264]	@ (8000954 <MX_GPIO_Init+0x16c>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b40      	ldr	r3, [pc, #256]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085e:	4b3d      	ldr	r3, [pc, #244]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	4a3c      	ldr	r2, [pc, #240]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086a:	4b3a      	ldr	r3, [pc, #232]	@ (8000954 <MX_GPIO_Init+0x16c>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000876:	f004 fc69 	bl	800514c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b36      	ldr	r3, [pc, #216]	@ (8000954 <MX_GPIO_Init+0x16c>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	4a35      	ldr	r2, [pc, #212]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000886:	4b33      	ldr	r3, [pc, #204]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000898:	482f      	ldr	r0, [pc, #188]	@ (8000958 <MX_GPIO_Init+0x170>)
 800089a:	f003 f991 	bl	8003bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2140      	movs	r1, #64	@ 0x40
 80008a2:	482e      	ldr	r0, [pc, #184]	@ (800095c <MX_GPIO_Init+0x174>)
 80008a4:	f003 f98c 	bl	8003bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2180      	movs	r1, #128	@ 0x80
 80008ac:	482c      	ldr	r0, [pc, #176]	@ (8000960 <MX_GPIO_Init+0x178>)
 80008ae:	f003 f987 	bl	8003bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4825      	ldr	r0, [pc, #148]	@ (8000960 <MX_GPIO_Init+0x178>)
 80008ca:	f002 ffe7 	bl	800389c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008ce:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	481c      	ldr	r0, [pc, #112]	@ (8000958 <MX_GPIO_Init+0x170>)
 80008e8:	f002 ffd8 	bl	800389c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ec:	2320      	movs	r3, #32
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4817      	ldr	r0, [pc, #92]	@ (800095c <MX_GPIO_Init+0x174>)
 8000900:	f002 ffcc 	bl	800389c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000904:	2340      	movs	r3, #64	@ 0x40
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4810      	ldr	r0, [pc, #64]	@ (800095c <MX_GPIO_Init+0x174>)
 800091c:	f002 ffbe 	bl	800389c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000920:	2380      	movs	r3, #128	@ 0x80
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	480a      	ldr	r0, [pc, #40]	@ (8000960 <MX_GPIO_Init+0x178>)
 8000938:	f002 ffb0 	bl	800389c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2028      	movs	r0, #40	@ 0x28
 8000942:	f002 fbfe 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000946:	2028      	movs	r0, #40	@ 0x28
 8000948:	f002 fc17 	bl	800317a <HAL_NVIC_EnableIRQ>

}
 800094c:	bf00      	nop
 800094e:	3730      	adds	r7, #48	@ 0x30
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40021000 	.word	0x40021000
 8000958:	48000400 	.word	0x48000400
 800095c:	48001800 	.word	0x48001800
 8000960:	48000800 	.word	0x48000800

08000964 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000974:	d119      	bne.n	80009aa <HAL_GPIO_EXTI_Callback+0x46>
		static bool previous;
		if(previous == false){
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	f083 0301 	eor.w	r3, r3, #1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d009      	beq.n	8000998 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800098a:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x54>)
 800098c:	f003 f918 	bl	8003bc0 <HAL_GPIO_WritePin>
			previous = true;
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000996:	e008      	b.n	80009aa <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099e:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x54>)
 80009a0:	f003 f90e 	bl	8003bc0 <HAL_GPIO_WritePin>
			previous = false;
 80009a4:	4b03      	ldr	r3, [pc, #12]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000250 	.word	0x20000250
 80009b8:	48000400 	.word	0x48000400

080009bc <DataTransmit2MTLB>:
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
extern void DataReceive_MTLB_Callback(uint16_t iD, uint32_t * xData, uint16_t nData_in_values);

// Send float or uint32 or none data
int DataTransmit2MTLB(uint16_t iD, uint8_t * xData, uint16_t nData_in_values)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	80fb      	strh	r3, [r7, #6]
 80009c8:	4613      	mov	r3, r2
 80009ca:	80bb      	strh	r3, [r7, #4]
	if(s2m_Status) return -1;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <DataTransmit2MTLB+0x88>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <DataTransmit2MTLB+0x1e>
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009d8:	e02f      	b.n	8000a3a <DataTransmit2MTLB+0x7e>
	if((sizeof(buf_M_TX)-4)<(nData_in_values*4)) return -2;
 80009da:	88bb      	ldrh	r3, [r7, #4]
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80009e2:	d902      	bls.n	80009ea <DataTransmit2MTLB+0x2e>
 80009e4:	f06f 0301 	mvn.w	r3, #1
 80009e8:	e027      	b.n	8000a3a <DataTransmit2MTLB+0x7e>

	s2m_Status=1;
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <DataTransmit2MTLB+0x88>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]

	((uint16_t *) buf_M_TX)[0] = iD;
 80009f0:	4a15      	ldr	r2, [pc, #84]	@ (8000a48 <DataTransmit2MTLB+0x8c>)
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	8013      	strh	r3, [r2, #0]
	((uint16_t *) buf_M_TX)[1] = nData_in_values;
 80009f6:	4a15      	ldr	r2, [pc, #84]	@ (8000a4c <DataTransmit2MTLB+0x90>)
 80009f8:	88bb      	ldrh	r3, [r7, #4]
 80009fa:	8013      	strh	r3, [r2, #0]
	if(nData_in_values>0) memcpy(buf_M_TX+1, xData, nData_in_values*4);
 80009fc:	88bb      	ldrh	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d006      	beq.n	8000a10 <DataTransmit2MTLB+0x54>
 8000a02:	4813      	ldr	r0, [pc, #76]	@ (8000a50 <DataTransmit2MTLB+0x94>)
 8000a04:	88bb      	ldrh	r3, [r7, #4]
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	461a      	mov	r2, r3
 8000a0a:	6839      	ldr	r1, [r7, #0]
 8000a0c:	f00b ff8a 	bl	800c924 <memcpy>

	s2m_Status = CDC_Transmit_FS((uint8_t*) buf_M_TX, nData_in_values*4 + 4);
 8000a10:	88bb      	ldrh	r3, [r7, #4]
 8000a12:	3301      	adds	r3, #1
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480a      	ldr	r0, [pc, #40]	@ (8000a48 <DataTransmit2MTLB+0x8c>)
 8000a1e:	f00b f9b5 	bl	800bd8c <CDC_Transmit_FS>
 8000a22:	4603      	mov	r3, r0
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <DataTransmit2MTLB+0x88>)
 8000a28:	601a      	str	r2, [r3, #0]

	if(s2m_Status)
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <DataTransmit2MTLB+0x88>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d002      	beq.n	8000a38 <DataTransmit2MTLB+0x7c>
	{
		s2m_Status=0;//if on zero... USB busy
 8000a32:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <DataTransmit2MTLB+0x88>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
	}
	return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20008258 	.word	0x20008258
 8000a48:	20000254 	.word	0x20000254
 8000a4c:	20000256 	.word	0x20000256
 8000a50:	20000258 	.word	0x20000258

08000a54 <SendInt2MTLB>:
int SendData2MTLB(uint16_t iD, uint8_t * xData, uint16_t nData_in_values){
	return DataTransmit2MTLB(iD, xData, nData_in_values);
}

int SendInt2MTLB(uint16_t iD, int * xInt){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	80fb      	strh	r3, [r7, #6]
//		//tx_int[i] = (*(uint8_t *)(xInt) >> (i * 8)) & 0xFF;
//        tx_int[sizeof(int) - 1 - i] = (*(uint8_t *)(xInt) >> (i * 8)) & 0xFF;
//		//tx_int[i] = (uint8_t)(tx_int >> (i * 8)); // Posunutí bytů integer hodnoty a přetypování
//	}
//	return DataTransmit2MTLB(iD, tx_int, sizeof(int));
	return DataTransmit2MTLB(iD, (uint8_t *)xInt, 1);
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	2201      	movs	r2, #1
 8000a64:	6839      	ldr	r1, [r7, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffa8 	bl	80009bc <DataTransmit2MTLB>
 8000a6c:	4603      	mov	r3, r0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <m2s_Process>:

//int SendPotenciometer2MTLB(uint16_t iD, )

void m2s_Process(void)//called from inf. loop
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	if(!m2s_Status) return;//the most often ....
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <m2s_Process+0x50>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d01e      	beq.n	8000ac2 <m2s_Process+0x4a>
	if(m2s_Status==1)
 8000a84:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <m2s_Process+0x50>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d111      	bne.n	8000ab0 <m2s_Process+0x38>
	{
		DataReceive_MTLB_Callback(m2s_ID, m2s_buf, m2s_nData_in_bytes/4);
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <m2s_Process+0x54>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	b298      	uxth	r0, r3
 8000a92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <m2s_Process+0x58>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	da00      	bge.n	8000a9c <m2s_Process+0x24>
 8000a9a:	3303      	adds	r3, #3
 8000a9c:	109b      	asrs	r3, r3, #2
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	490c      	ldr	r1, [pc, #48]	@ (8000ad4 <m2s_Process+0x5c>)
 8000aa4:	f000 f88c 	bl	8000bc0 <DataReceive_MTLB_Callback>
		m2s_Status = 0;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <m2s_Process+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
		return;
 8000aae:	e009      	b.n	8000ac4 <m2s_Process+0x4c>
	}
	if(m2s_Status==2)
	{
	}

	if(m2s_Status== -1)//init receiving new message from matlab
 8000ab0:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <m2s_Process+0x50>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ab8:	d104      	bne.n	8000ac4 <m2s_Process+0x4c>
	{
		m2s_Status = 0;
 8000aba:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <m2s_Process+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
		return;
 8000ac0:	e000      	b.n	8000ac4 <m2s_Process+0x4c>
	if(!m2s_Status) return;//the most often ....
 8000ac2:	bf00      	nop
	}

}
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000825c 	.word	0x2000825c
 8000acc:	20008260 	.word	0x20008260
 8000ad0:	20008264 	.word	0x20008264
 8000ad4:	20004258 	.word	0x20004258

08000ad8 <USB_My_Receive>:
void USB_My_Receive(uint8_t* Buf, uint32_t Len)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
	if(m2s_Status==0)//new message
 8000ae2:	4b22      	ldr	r3, [pc, #136]	@ (8000b6c <USB_My_Receive+0x94>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10c      	bne.n	8000b04 <USB_My_Receive+0x2c>
	{
		  m2s_ID = ((uint16_t *) Buf)[0] ;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <USB_My_Receive+0x98>)
 8000af2:	601a      	str	r2, [r3, #0]
		  if(m2s_ID == 0)
 8000af4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <USB_My_Receive+0x98>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d030      	beq.n	8000b5e <USB_My_Receive+0x86>
			    return;
		  m2s_Status=100;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <USB_My_Receive+0x94>)
 8000afe:	2264      	movs	r2, #100	@ 0x64
 8000b00:	601a      	str	r2, [r3, #0]
		  return;
 8000b02:	e02f      	b.n	8000b64 <USB_My_Receive+0x8c>
	}
	if(m2s_Status==100)
 8000b04:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <USB_My_Receive+0x94>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b64      	cmp	r3, #100	@ 0x64
 8000b0a:	d110      	bne.n	8000b2e <USB_My_Receive+0x56>
	{
		  m2s_nData_in_bytes = ((uint16_t *) Buf)[0] *4; //
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4a18      	ldr	r2, [pc, #96]	@ (8000b74 <USB_My_Receive+0x9c>)
 8000b14:	6013      	str	r3, [r2, #0]
		  if(m2s_nData_in_bytes == 0)
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <USB_My_Receive+0x9c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d103      	bne.n	8000b26 <USB_My_Receive+0x4e>
		  {
			  m2s_Status=1;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <USB_My_Receive+0x94>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	601a      	str	r2, [r3, #0]
			  return;
 8000b24:	e01e      	b.n	8000b64 <USB_My_Receive+0x8c>
		  }
		  m2s_Status=3;//wait for xData
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <USB_My_Receive+0x94>)
 8000b28:	2203      	movs	r2, #3
 8000b2a:	601a      	str	r2, [r3, #0]
		  return;
 8000b2c:	e01a      	b.n	8000b64 <USB_My_Receive+0x8c>
	}
	if(m2s_Status==3)//xData
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <USB_My_Receive+0x94>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d115      	bne.n	8000b62 <USB_My_Receive+0x8a>
	{
		  if(Len<m2s_nData_in_bytes)
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <USB_My_Receive+0x9c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d202      	bcs.n	8000b48 <USB_My_Receive+0x70>
			  m2s_nData_in_bytes=Len;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	4a0b      	ldr	r2, [pc, #44]	@ (8000b74 <USB_My_Receive+0x9c>)
 8000b46:	6013      	str	r3, [r2, #0]
		  memcpy(m2s_buf, Buf, m2s_nData_in_bytes);
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <USB_My_Receive+0x9c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	4809      	ldr	r0, [pc, #36]	@ (8000b78 <USB_My_Receive+0xa0>)
 8000b52:	f00b fee7 	bl	800c924 <memcpy>
		  m2s_Status=1;
 8000b56:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <USB_My_Receive+0x94>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
		  return;
 8000b5c:	e002      	b.n	8000b64 <USB_My_Receive+0x8c>
			    return;
 8000b5e:	bf00      	nop
 8000b60:	e000      	b.n	8000b64 <USB_My_Receive+0x8c>
	}

	return;
 8000b62:	bf00      	nop
}
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000825c 	.word	0x2000825c
 8000b70:	20008260 	.word	0x20008260
 8000b74:	20008264 	.word	0x20008264
 8000b78:	20004258 	.word	0x20004258

08000b7c <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  if(htim == &htim6){
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d10e      	bne.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x2e>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b8c:	2180      	movs	r1, #128	@ 0x80
 8000b8e:	480a      	ldr	r0, [pc, #40]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b90:	f003 f82e 	bl	8003bf0 <HAL_GPIO_TogglePin>

	// zvysovani promenne periodical a odesilani po UART
	periodical += 1;
 8000b94:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b9c:	6013      	str	r3, [r2, #0]
	//HAL_UART_Transmit_DMA(&hlpuart1, (const uint8_t*)&periodical, 10);
	DataTransmit2MTLB(1010, &periodical, 1);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4906      	ldr	r1, [pc, #24]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ba2:	f240 30f2 	movw	r0, #1010	@ 0x3f2
 8000ba6:	f7ff ff09 	bl	80009bc <DataTransmit2MTLB>
  }
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000a3ec 	.word	0x2000a3ec
 8000bb8:	48000400 	.word	0x48000400
 8000bbc:	20008268 	.word	0x20008268

08000bc0 <DataReceive_MTLB_Callback>:
//    }

  }

void DataReceive_MTLB_Callback(uint16_t iD, uint32_t * xData, uint16_t nData_in_values)
{//when data comes from matlab, this is called and here is the branching and processing
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	80fb      	strh	r3, [r7, #6]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	80bb      	strh	r3, [r7, #4]
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bd6:	4814      	ldr	r0, [pc, #80]	@ (8000c28 <DataReceive_MTLB_Callback+0x68>)
 8000bd8:	f002 fff2 	bl	8003bc0 <HAL_GPIO_WritePin>
	switch(iD)
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	f640 72a2 	movw	r2, #4002	@ 0xfa2
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d011      	beq.n	8000c0a <DataReceive_MTLB_Callback+0x4a>
 8000be6:	f640 72a2 	movw	r2, #4002	@ 0xfa2
 8000bea:	4293      	cmp	r3, r2
 8000bec:	dc0f      	bgt.n	8000c0e <DataReceive_MTLB_Callback+0x4e>
 8000bee:	2b14      	cmp	r3, #20
 8000bf0:	d004      	beq.n	8000bfc <DataReceive_MTLB_Callback+0x3c>
 8000bf2:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d00b      	beq.n	8000c12 <DataReceive_MTLB_Callback+0x52>
	// teplota[60]=nTeplota;
	// DataTransmit2MTLB(40002,(uint8_t *) teplota, 61);
	break;

	default:
	break;
 8000bfa:	e008      	b.n	8000c0e <DataReceive_MTLB_Callback+0x4e>
		DataTransmit2MTLB(20, xData, nData_in_values);
 8000bfc:	88bb      	ldrh	r3, [r7, #4]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	6839      	ldr	r1, [r7, #0]
 8000c02:	2014      	movs	r0, #20
 8000c04:	f7ff feda 	bl	80009bc <DataTransmit2MTLB>
		break;
 8000c08:	e004      	b.n	8000c14 <DataReceive_MTLB_Callback+0x54>
	break;
 8000c0a:	bf00      	nop
 8000c0c:	e002      	b.n	8000c14 <DataReceive_MTLB_Callback+0x54>
	break;
 8000c0e:	bf00      	nop
 8000c10:	e000      	b.n	8000c14 <DataReceive_MTLB_Callback+0x54>
	break;
 8000c12:	bf00      	nop
	}
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c1a:	4803      	ldr	r0, [pc, #12]	@ (8000c28 <DataReceive_MTLB_Callback+0x68>)
 8000c1c:	f002 ffd0 	bl	8003bc0 <HAL_GPIO_WritePin>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	48000400 	.word	0x48000400

08000c2c <myDmaFunction>:
}



/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma){
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <myDmaFunction+0x28>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c3a:	4a07      	ldr	r2, [pc, #28]	@ (8000c58 <myDmaFunction+0x2c>)
 8000c3c:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <myDmaFunction+0x28>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c44:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <myDmaFunction+0x30>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	2000a3a0 	.word	0x2000a3a0
 8000c58:	20008274 	.word	0x20008274
 8000c5c:	20008278 	.word	0x20008278

08000c60 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  potenciometer = 0;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <HAL_ADC_ConvCpltCallback+0x7c>)
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]

  for(int i = 0; i < 100; i++){
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	e013      	b.n	8000c9e <HAL_ADC_ConvCpltCallback+0x3e>
	  potenciometer = potenciometer + dma_data_buffer[i+100];
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3364      	adds	r3, #100	@ 0x64
 8000c7a:	4a19      	ldr	r2, [pc, #100]	@ (8000ce0 <HAL_ADC_ConvCpltCallback+0x80>)
 8000c7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c80:	ee07 3a90 	vmov	s15, r3
 8000c84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <HAL_ADC_ConvCpltCallback+0x7c>)
 8000c8a:	edd3 7a00 	vldr	s15, [r3]
 8000c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c92:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_ADC_ConvCpltCallback+0x7c>)
 8000c94:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i < 100; i++){
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2b63      	cmp	r3, #99	@ 0x63
 8000ca2:	dde8      	ble.n	8000c76 <HAL_ADC_ConvCpltCallback+0x16>
  }
  potenciometer = potenciometer / 100;
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <HAL_ADC_ConvCpltCallback+0x7c>)
 8000ca6:	ed93 7a00 	vldr	s14, [r3]
 8000caa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000ce4 <HAL_ADC_ConvCpltCallback+0x84>
 8000cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <HAL_ADC_ConvCpltCallback+0x7c>)
 8000cb4:	edc3 7a00 	vstr	s15, [r3]

  potenciometerInt = (int)potenciometer;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <HAL_ADC_ConvCpltCallback+0x7c>)
 8000cba:	edd3 7a00 	vldr	s15, [r3]
 8000cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc2:	ee17 2a90 	vmov	r2, s15
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <HAL_ADC_ConvCpltCallback+0x88>)
 8000cc8:	601a      	str	r2, [r3, #0]

  SendInt2MTLB(23, &potenciometerInt);
 8000cca:	4907      	ldr	r1, [pc, #28]	@ (8000ce8 <HAL_ADC_ConvCpltCallback+0x88>)
 8000ccc:	2017      	movs	r0, #23
 8000cce:	f7ff fec1 	bl	8000a54 <SendInt2MTLB>
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000a34c 	.word	0x2000a34c
 8000ce0:	2000a1bc 	.word	0x2000a1bc
 8000ce4:	42c80000 	.word	0x42c80000
 8000ce8:	2000a350 	.word	0x2000a350

08000cec <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  potenciometer = 0;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000cf6:	f04f 0200 	mov.w	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]

  for(int i = 0; i < 100; i++){
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	e012      	b.n	8000d28 <HAL_ADC_ConvHalfCpltCallback+0x3c>
	  potenciometer = potenciometer + dma_data_buffer[i];
 8000d02:	4a19      	ldr	r2, [pc, #100]	@ (8000d68 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d0a:	ee07 3a90 	vmov	s15, r3
 8000d0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d12:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000d14:	edd3 7a00 	vldr	s15, [r3]
 8000d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000d1e:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i < 100; i++){
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	3301      	adds	r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b63      	cmp	r3, #99	@ 0x63
 8000d2c:	dde9      	ble.n	8000d02 <HAL_ADC_ConvHalfCpltCallback+0x16>
  }
  potenciometer = potenciometer / 100;
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000d30:	ed93 7a00 	vldr	s14, [r3]
 8000d34:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000d6c <HAL_ADC_ConvHalfCpltCallback+0x80>
 8000d38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d3c:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000d3e:	edc3 7a00 	vstr	s15, [r3]

  potenciometerInt = (int)potenciometer;
 8000d42:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000d44:	edd3 7a00 	vldr	s15, [r3]
 8000d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4c:	ee17 2a90 	vmov	r2, s15
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8000d52:	601a      	str	r2, [r3, #0]
//	  potenciometerArr[i] = (uint8_t)(potenciometerInt >> (i * 8)); // Posunutí bytů integer hodnoty a přetypování
//  }

  //memcpy(potenciometerArr2, &potenciometerInt, sizeof(int));

  SendInt2MTLB(23, &potenciometerInt);
 8000d54:	4906      	ldr	r1, [pc, #24]	@ (8000d70 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8000d56:	2017      	movs	r0, #23
 8000d58:	f7ff fe7c 	bl	8000a54 <SendInt2MTLB>
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000a34c 	.word	0x2000a34c
 8000d68:	2000a1bc 	.word	0x2000a1bc
 8000d6c:	42c80000 	.word	0x42c80000
 8000d70:	2000a350 	.word	0x2000a350

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7a:	f000 fc94 	bl	80016a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7e:	f000 f87b 	bl	8000e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d82:	f7ff fd31 	bl	80007e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d86:	f7ff fcb7 	bl	80006f8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d8a:	f000 fac1 	bl	8001310 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000d8e:	f000 fb0b 	bl	80013a8 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000d92:	f000 fa2f 	bl	80011f4 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000d96:	f00a ff35 	bl	800bc04 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8000d9a:	f000 f9dd 	bl	8001158 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000d9e:	f7ff fba5 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8000da2:	f000 f98b 	bl	80010bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  // zapnuti zelene ledky
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2180      	movs	r1, #128	@ 0x80
 8000daa:	4826      	ldr	r0, [pc, #152]	@ (8000e44 <main+0xd0>)
 8000dac:	f002 ff08 	bl	8003bc0 <HAL_GPIO_WritePin>


  // volani casovace
  HAL_TIM_Base_Start_IT(&htim6);
 8000db0:	4825      	ldr	r0, [pc, #148]	@ (8000e48 <main+0xd4>)
 8000db2:	f005 fe8b 	bl	8006acc <HAL_TIM_Base_Start_IT>
  //char *msg = "Hello world!\n\r";
  //HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), 0xFFFF);
  //HAL_UART_Receive_DMA(&hlpuart1, (uint8_t*)testdata, 10);

  //zjistovani casu potrebneho pro kopirovani mezi poli
  HAL_TIM_Base_Start(&htim5);
 8000db6:	4825      	ldr	r0, [pc, #148]	@ (8000e4c <main+0xd8>)
 8000db8:	f005 fe20 	bl	80069fc <HAL_TIM_Base_Start>

  for (int i = 0; i < 1000; i++){
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	e00d      	b.n	8000dde <main+0x6a>
	  dma[i] = i;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	ee07 3a90 	vmov	s15, r3
 8000dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dcc:	4a20      	ldr	r2, [pc, #128]	@ (8000e50 <main+0xdc>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 1000; i++){
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000de4:	dbed      	blt.n	8000dc2 <main+0x4e>

  //tic = htim5.Instance->CNT;
  //memcpy(cpy, dma, 500*sizeof(float));
  //toc = htim5.Instance->CNT;

  HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID, &myDmaFunction);
 8000de6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e54 <main+0xe0>)
 8000de8:	2100      	movs	r1, #0
 8000dea:	481b      	ldr	r0, [pc, #108]	@ (8000e58 <main+0xe4>)
 8000dec:	f002 fc6e 	bl	80036cc <HAL_DMA_RegisterCallback>
 8000df0:	4603      	mov	r3, r0
 8000df2:	70fb      	strb	r3, [r7, #3]
  UNUSED(status);

  tic = htim5.Instance->CNT;
 8000df4:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <main+0xd8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfa:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <main+0xe8>)
 8000dfc:	6013      	str	r3, [r2, #0]
  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 8000dfe:	4914      	ldr	r1, [pc, #80]	@ (8000e50 <main+0xdc>)
 8000e00:	4a17      	ldr	r2, [pc, #92]	@ (8000e60 <main+0xec>)
 8000e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e06:	4814      	ldr	r0, [pc, #80]	@ (8000e58 <main+0xe4>)
 8000e08:	f002 fa7a 	bl	8003300 <HAL_DMA_Start_IT>
  dma_toc = htim5.Instance->CNT;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <main+0xd8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e12:	4a14      	ldr	r2, [pc, #80]	@ (8000e64 <main+0xf0>)
 8000e14:	6013      	str	r3, [r2, #0]
  toc = htim5.Instance->CNT;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <main+0xd8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1c:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <main+0xf4>)
 8000e1e:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start_IT(&htim3);
 8000e20:	4812      	ldr	r0, [pc, #72]	@ (8000e6c <main+0xf8>)
 8000e22:	f005 fe53 	bl	8006acc <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000e26:	217f      	movs	r1, #127	@ 0x7f
 8000e28:	4811      	ldr	r0, [pc, #68]	@ (8000e70 <main+0xfc>)
 8000e2a:	f002 f81d 	bl	8002e68 <HAL_ADCEx_Calibration_Start>
  HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 200);
 8000e2e:	22c8      	movs	r2, #200	@ 0xc8
 8000e30:	4910      	ldr	r1, [pc, #64]	@ (8000e74 <main+0x100>)
 8000e32:	480f      	ldr	r0, [pc, #60]	@ (8000e70 <main+0xfc>)
 8000e34:	f001 f82a 	bl	8001e8c <HAL_ADC_Start_DMA>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	70bb      	strb	r3, [r7, #2]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  m2s_Process();
 8000e3c:	f7ff fe1c 	bl	8000a78 <m2s_Process>
 8000e40:	e7fc      	b.n	8000e3c <main+0xc8>
 8000e42:	bf00      	nop
 8000e44:	48000800 	.word	0x48000800
 8000e48:	2000a3ec 	.word	0x2000a3ec
 8000e4c:	2000a3a0 	.word	0x2000a3a0
 8000e50:	2000827c 	.word	0x2000827c
 8000e54:	08000c2d 	.word	0x08000c2d
 8000e58:	200001f0 	.word	0x200001f0
 8000e5c:	2000826c 	.word	0x2000826c
 8000e60:	2000921c 	.word	0x2000921c
 8000e64:	20008278 	.word	0x20008278
 8000e68:	20008270 	.word	0x20008270
 8000e6c:	2000a354 	.word	0x2000a354
 8000e70:	20000128 	.word	0x20000128
 8000e74:	2000a1bc 	.word	0x2000a1bc

08000e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b096      	sub	sp, #88	@ 0x58
 8000e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	2244      	movs	r2, #68	@ 0x44
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f00b fd20 	bl	800c8cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f004 f8a2 	bl	8004fe4 <HAL_PWREx_ControlVoltageScaling>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000ea6:	f000 f83a 	bl	8000f1e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000eaa:	2322      	movs	r3, #34	@ 0x22
 8000eac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb8:	2340      	movs	r3, #64	@ 0x40
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000ec8:	231e      	movs	r3, #30
 8000eca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 f945 	bl	800516c <HAL_RCC_OscConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000ee8:	f000 f819 	bl	8000f1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eec:	230f      	movs	r3, #15
 8000eee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ef8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000efc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	2105      	movs	r1, #5
 8000f06:	4618      	mov	r0, r3
 8000f08:	f004 fd4a 	bl	80059a0 <HAL_RCC_ClockConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f12:	f000 f804 	bl	8000f1e <Error_Handler>
  }
}
 8000f16:	bf00      	nop
 8000f18:	3758      	adds	r7, #88	@ 0x58
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f22:	b672      	cpsid	i
}
 8000f24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f26:	bf00      	nop
 8000f28:	e7fd      	b.n	8000f26 <Error_Handler+0x8>
	...

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f36:	4a0e      	ldr	r2, [pc, #56]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4e:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <NMI_Handler+0x4>

08000f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fca:	f000 fbc1 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <DMA1_Channel1_IRQHandler+0x10>)
 8000fda:	f002 fac7 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000a560 	.word	0x2000a560

08000fe8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <DMA1_Channel2_IRQHandler+0x10>)
 8000fee:	f002 fabd 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001f0 	.word	0x200001f0

08000ffc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <DMA1_Channel3_IRQHandler+0x10>)
 8001002:	f002 fab3 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000190 	.word	0x20000190

08001010 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <ADC1_IRQHandler+0x10>)
 8001016:	f000 ffbd 	bl	8001f94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000128 	.word	0x20000128

08001024 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <TIM3_IRQHandler+0x10>)
 800102a:	f005 fdbf 	bl	8006bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000a354 	.word	0x2000a354

08001038 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800103c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001040:	f002 fdf0 	bl	8003c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800104c:	4802      	ldr	r0, [pc, #8]	@ (8001058 <TIM6_DAC_IRQHandler+0x10>)
 800104e:	f005 fdad 	bl	8006bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000a3ec 	.word	0x2000a3ec

0800105c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <DMA2_Channel2_IRQHandler+0x10>)
 8001062:	f002 fa83 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000a5c0 	.word	0x2000a5c0

08001070 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <OTG_FS_IRQHandler+0x10>)
 8001076:	f002 ff40 	bl	8003efa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000bb04 	.word	0x2000bb04

08001084 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001088:	4802      	ldr	r0, [pc, #8]	@ (8001094 <LPUART1_IRQHandler+0x10>)
 800108a:	f006 f9ad 	bl	80073e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000a438 	.word	0x2000a438

08001098 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <SystemInit+0x20>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010a2:	4a05      	ldr	r2, [pc, #20]	@ (80010b8 <SystemInit+0x20>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010da:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <MX_TIM3_Init+0x94>)
 80010dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001154 <MX_TIM3_Init+0x98>)
 80010de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 120-1;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <MX_TIM3_Init+0x94>)
 80010e2:	2277      	movs	r2, #119	@ 0x77
 80010e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <MX_TIM3_Init+0x94>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80010ec:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <MX_TIM3_Init+0x94>)
 80010ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <MX_TIM3_Init+0x94>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <MX_TIM3_Init+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001100:	4813      	ldr	r0, [pc, #76]	@ (8001150 <MX_TIM3_Init+0x94>)
 8001102:	f005 fc23 	bl	800694c <HAL_TIM_Base_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800110c:	f7ff ff07 	bl	8000f1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001110:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001114:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	4619      	mov	r1, r3
 800111c:	480c      	ldr	r0, [pc, #48]	@ (8001150 <MX_TIM3_Init+0x94>)
 800111e:	f005 fe47 	bl	8006db0 <HAL_TIM_ConfigClockSource>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001128:	f7ff fef9 	bl	8000f1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800112c:	2320      	movs	r3, #32
 800112e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	@ (8001150 <MX_TIM3_Init+0x94>)
 800113a:	f006 f85f 	bl	80071fc <HAL_TIMEx_MasterConfigSynchronization>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001144:	f7ff feeb 	bl	8000f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000a354 	.word	0x2000a354
 8001154:	40000400 	.word	0x40000400

08001158 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0310 	add.w	r3, r7, #16
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001176:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <MX_TIM5_Init+0x94>)
 8001178:	4a1d      	ldr	r2, [pc, #116]	@ (80011f0 <MX_TIM5_Init+0x98>)
 800117a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800117c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <MX_TIM5_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <MX_TIM5_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001188:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <MX_TIM5_Init+0x94>)
 800118a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800118e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <MX_TIM5_Init+0x94>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <MX_TIM5_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800119c:	4813      	ldr	r0, [pc, #76]	@ (80011ec <MX_TIM5_Init+0x94>)
 800119e:	f005 fbd5 	bl	800694c <HAL_TIM_Base_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80011a8:	f7ff feb9 	bl	8000f1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4619      	mov	r1, r3
 80011b8:	480c      	ldr	r0, [pc, #48]	@ (80011ec <MX_TIM5_Init+0x94>)
 80011ba:	f005 fdf9 	bl	8006db0 <HAL_TIM_ConfigClockSource>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80011c4:	f7ff feab 	bl	8000f1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	@ (80011ec <MX_TIM5_Init+0x94>)
 80011d6:	f006 f811 	bl	80071fc <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f7ff fe9d 	bl	8000f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000a3a0 	.word	0x2000a3a0
 80011f0:	40000c00 	.word	0x40000c00

080011f4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <MX_TIM6_Init+0x68>)
 8001206:	4a16      	ldr	r2, [pc, #88]	@ (8001260 <MX_TIM6_Init+0x6c>)
 8001208:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_TIM6_Init+0x68>)
 800120c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001210:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001212:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_TIM6_Init+0x68>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 8001218:	4b10      	ldr	r3, [pc, #64]	@ (800125c <MX_TIM6_Init+0x68>)
 800121a:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800121e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_TIM6_Init+0x68>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001226:	480d      	ldr	r0, [pc, #52]	@ (800125c <MX_TIM6_Init+0x68>)
 8001228:	f005 fb90 	bl	800694c <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001232:	f7ff fe74 	bl	8000f1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	@ (800125c <MX_TIM6_Init+0x68>)
 8001244:	f005 ffda 	bl	80071fc <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800124e:	f7ff fe66 	bl	8000f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000a3ec 	.word	0x2000a3ec
 8001260:	40001000 	.word	0x40001000

08001264 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a23      	ldr	r2, [pc, #140]	@ (8001300 <HAL_TIM_Base_MspInit+0x9c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d114      	bne.n	80012a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001276:	4b23      	ldr	r3, [pc, #140]	@ (8001304 <HAL_TIM_Base_MspInit+0xa0>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127a:	4a22      	ldr	r2, [pc, #136]	@ (8001304 <HAL_TIM_Base_MspInit+0xa0>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6593      	str	r3, [r2, #88]	@ 0x58
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <HAL_TIM_Base_MspInit+0xa0>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	201d      	movs	r0, #29
 8001294:	f001 ff55 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001298:	201d      	movs	r0, #29
 800129a:	f001 ff6e 	bl	800317a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800129e:	e02a      	b.n	80012f6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a18      	ldr	r2, [pc, #96]	@ (8001308 <HAL_TIM_Base_MspInit+0xa4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d10c      	bne.n	80012c4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012aa:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <HAL_TIM_Base_MspInit+0xa0>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ae:	4a15      	ldr	r2, [pc, #84]	@ (8001304 <HAL_TIM_Base_MspInit+0xa0>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b6:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <HAL_TIM_Base_MspInit+0xa0>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
}
 80012c2:	e018      	b.n	80012f6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a10      	ldr	r2, [pc, #64]	@ (800130c <HAL_TIM_Base_MspInit+0xa8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d113      	bne.n	80012f6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <HAL_TIM_Base_MspInit+0xa0>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001304 <HAL_TIM_Base_MspInit+0xa0>)
 80012d4:	f043 0310 	orr.w	r3, r3, #16
 80012d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <HAL_TIM_Base_MspInit+0xa0>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2036      	movs	r0, #54	@ 0x36
 80012ec:	f001 ff29 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012f0:	2036      	movs	r0, #54	@ 0x36
 80012f2:	f001 ff42 	bl	800317a <HAL_NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40000400 	.word	0x40000400
 8001304:	40021000 	.word	0x40021000
 8001308:	40000c00 	.word	0x40000c00
 800130c:	40001000 	.word	0x40001000

08001310 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001314:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 8001316:	4a23      	ldr	r2, [pc, #140]	@ (80013a4 <MX_LPUART1_UART_Init+0x94>)
 8001318:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800131a:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800132e:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001346:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 800134e:	2200      	movs	r2, #0
 8001350:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001358:	4811      	ldr	r0, [pc, #68]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 800135a:	f005 fff5 	bl	8007348 <HAL_UART_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001364:	f7ff fddb 	bl	8000f1e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001368:	2100      	movs	r1, #0
 800136a:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 800136c:	f007 f92d 	bl	80085ca <HAL_UARTEx_SetTxFifoThreshold>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001376:	f7ff fdd2 	bl	8000f1e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137a:	2100      	movs	r1, #0
 800137c:	4808      	ldr	r0, [pc, #32]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 800137e:	f007 f962 	bl	8008646 <HAL_UARTEx_SetRxFifoThreshold>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001388:	f7ff fdc9 	bl	8000f1e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <MX_LPUART1_UART_Init+0x90>)
 800138e:	f007 f8e3 	bl	8008558 <HAL_UARTEx_DisableFifoMode>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001398:	f7ff fdc1 	bl	8000f1e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000a438 	.word	0x2000a438
 80013a4:	40008000 	.word	0x40008000

080013a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013ac:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 80013ae:	4a23      	ldr	r2, [pc, #140]	@ (800143c <MX_USART3_UART_Init+0x94>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013b2:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e4:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ea:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013f0:	4811      	ldr	r0, [pc, #68]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 80013f2:	f005 ffa9 	bl	8007348 <HAL_UART_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013fc:	f7ff fd8f 	bl	8000f1e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001400:	2100      	movs	r1, #0
 8001402:	480d      	ldr	r0, [pc, #52]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 8001404:	f007 f8e1 	bl	80085ca <HAL_UARTEx_SetTxFifoThreshold>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800140e:	f7ff fd86 	bl	8000f1e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001412:	2100      	movs	r1, #0
 8001414:	4808      	ldr	r0, [pc, #32]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 8001416:	f007 f916 	bl	8008646 <HAL_UARTEx_SetRxFifoThreshold>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001420:	f7ff fd7d 	bl	8000f1e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	@ (8001438 <MX_USART3_UART_Init+0x90>)
 8001426:	f007 f897 	bl	8008558 <HAL_UARTEx_DisableFifoMode>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001430:	f7ff fd75 	bl	8000f1e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000a4cc 	.word	0x2000a4cc
 800143c:	40004800 	.word	0x40004800

08001440 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b0b0      	sub	sp, #192	@ 0xc0
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	2294      	movs	r2, #148	@ 0x94
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f00b fa33 	bl	800c8cc <memset>
  if(uartHandle->Instance==LPUART1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a71      	ldr	r2, [pc, #452]	@ (8001630 <HAL_UART_MspInit+0x1f0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	f040 809a 	bne.w	80015a6 <HAL_UART_MspInit+0x166>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001472:	2320      	movs	r3, #32
 8001474:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001476:	2300      	movs	r3, #0
 8001478:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147a:	f107 0318 	add.w	r3, r7, #24
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fd4c 	bl	8005f1c <HAL_RCCEx_PeriphCLKConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800148a:	f7ff fd48 	bl	8000f1e <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800148e:	4b69      	ldr	r3, [pc, #420]	@ (8001634 <HAL_UART_MspInit+0x1f4>)
 8001490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001492:	4a68      	ldr	r2, [pc, #416]	@ (8001634 <HAL_UART_MspInit+0x1f4>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800149a:	4b66      	ldr	r3, [pc, #408]	@ (8001634 <HAL_UART_MspInit+0x1f4>)
 800149c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a6:	4b63      	ldr	r3, [pc, #396]	@ (8001634 <HAL_UART_MspInit+0x1f4>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	4a62      	ldr	r2, [pc, #392]	@ (8001634 <HAL_UART_MspInit+0x1f4>)
 80014ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b2:	4b60      	ldr	r3, [pc, #384]	@ (8001634 <HAL_UART_MspInit+0x1f4>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80014be:	f003 fe45 	bl	800514c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80014c2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80014dc:	2308      	movs	r3, #8
 80014de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014e6:	4619      	mov	r1, r3
 80014e8:	4853      	ldr	r0, [pc, #332]	@ (8001638 <HAL_UART_MspInit+0x1f8>)
 80014ea:	f002 f9d7 	bl	800389c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80014ee:	4b53      	ldr	r3, [pc, #332]	@ (800163c <HAL_UART_MspInit+0x1fc>)
 80014f0:	4a53      	ldr	r2, [pc, #332]	@ (8001640 <HAL_UART_MspInit+0x200>)
 80014f2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80014f4:	4b51      	ldr	r3, [pc, #324]	@ (800163c <HAL_UART_MspInit+0x1fc>)
 80014f6:	2222      	movs	r2, #34	@ 0x22
 80014f8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fa:	4b50      	ldr	r3, [pc, #320]	@ (800163c <HAL_UART_MspInit+0x1fc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001500:	4b4e      	ldr	r3, [pc, #312]	@ (800163c <HAL_UART_MspInit+0x1fc>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001506:	4b4d      	ldr	r3, [pc, #308]	@ (800163c <HAL_UART_MspInit+0x1fc>)
 8001508:	2280      	movs	r2, #128	@ 0x80
 800150a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800150c:	4b4b      	ldr	r3, [pc, #300]	@ (800163c <HAL_UART_MspInit+0x1fc>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001512:	4b4a      	ldr	r3, [pc, #296]	@ (800163c <HAL_UART_MspInit+0x1fc>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001518:	4b48      	ldr	r3, [pc, #288]	@ (800163c <HAL_UART_MspInit+0x1fc>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800151e:	4b47      	ldr	r3, [pc, #284]	@ (800163c <HAL_UART_MspInit+0x1fc>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001524:	4845      	ldr	r0, [pc, #276]	@ (800163c <HAL_UART_MspInit+0x1fc>)
 8001526:	f001 fe43 	bl	80031b0 <HAL_DMA_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8001530:	f7ff fcf5 	bl	8000f1e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a41      	ldr	r2, [pc, #260]	@ (800163c <HAL_UART_MspInit+0x1fc>)
 8001538:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800153c:	4a3f      	ldr	r2, [pc, #252]	@ (800163c <HAL_UART_MspInit+0x1fc>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA2_Channel2;
 8001542:	4b40      	ldr	r3, [pc, #256]	@ (8001644 <HAL_UART_MspInit+0x204>)
 8001544:	4a40      	ldr	r2, [pc, #256]	@ (8001648 <HAL_UART_MspInit+0x208>)
 8001546:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001548:	4b3e      	ldr	r3, [pc, #248]	@ (8001644 <HAL_UART_MspInit+0x204>)
 800154a:	2223      	movs	r2, #35	@ 0x23
 800154c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800154e:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <HAL_UART_MspInit+0x204>)
 8001550:	2210      	movs	r2, #16
 8001552:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001554:	4b3b      	ldr	r3, [pc, #236]	@ (8001644 <HAL_UART_MspInit+0x204>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800155a:	4b3a      	ldr	r3, [pc, #232]	@ (8001644 <HAL_UART_MspInit+0x204>)
 800155c:	2280      	movs	r2, #128	@ 0x80
 800155e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001560:	4b38      	ldr	r3, [pc, #224]	@ (8001644 <HAL_UART_MspInit+0x204>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001566:	4b37      	ldr	r3, [pc, #220]	@ (8001644 <HAL_UART_MspInit+0x204>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800156c:	4b35      	ldr	r3, [pc, #212]	@ (8001644 <HAL_UART_MspInit+0x204>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001572:	4b34      	ldr	r3, [pc, #208]	@ (8001644 <HAL_UART_MspInit+0x204>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001578:	4832      	ldr	r0, [pc, #200]	@ (8001644 <HAL_UART_MspInit+0x204>)
 800157a:	f001 fe19 	bl	80031b0 <HAL_DMA_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8001584:	f7ff fccb 	bl	8000f1e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a2e      	ldr	r2, [pc, #184]	@ (8001644 <HAL_UART_MspInit+0x204>)
 800158c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800158e:	4a2d      	ldr	r2, [pc, #180]	@ (8001644 <HAL_UART_MspInit+0x204>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2046      	movs	r0, #70	@ 0x46
 800159a:	f001 fdd2 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800159e:	2046      	movs	r0, #70	@ 0x46
 80015a0:	f001 fdeb 	bl	800317a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015a4:	e040      	b.n	8001628 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART3)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a28      	ldr	r2, [pc, #160]	@ (800164c <HAL_UART_MspInit+0x20c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d13b      	bne.n	8001628 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015b0:	2304      	movs	r3, #4
 80015b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b8:	f107 0318 	add.w	r3, r7, #24
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 fcad 	bl	8005f1c <HAL_RCCEx_PeriphCLKConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80015c8:	f7ff fca9 	bl	8000f1e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015cc:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_UART_MspInit+0x1f4>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d0:	4a18      	ldr	r2, [pc, #96]	@ (8001634 <HAL_UART_MspInit+0x1f4>)
 80015d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015d8:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_UART_MspInit+0x1f4>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e4:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <HAL_UART_MspInit+0x1f4>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e8:	4a12      	ldr	r2, [pc, #72]	@ (8001634 <HAL_UART_MspInit+0x1f4>)
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f0:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <HAL_UART_MspInit+0x1f4>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001600:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001616:	2307      	movs	r3, #7
 8001618:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800161c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001620:	4619      	mov	r1, r3
 8001622:	480b      	ldr	r0, [pc, #44]	@ (8001650 <HAL_UART_MspInit+0x210>)
 8001624:	f002 f93a 	bl	800389c <HAL_GPIO_Init>
}
 8001628:	bf00      	nop
 800162a:	37c0      	adds	r7, #192	@ 0xc0
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40008000 	.word	0x40008000
 8001634:	40021000 	.word	0x40021000
 8001638:	48001800 	.word	0x48001800
 800163c:	2000a560 	.word	0x2000a560
 8001640:	40020008 	.word	0x40020008
 8001644:	2000a5c0 	.word	0x2000a5c0
 8001648:	4002041c 	.word	0x4002041c
 800164c:	40004800 	.word	0x40004800
 8001650:	48000c00 	.word	0x48000c00

08001654 <Reset_Handler>:
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800168c <LoopForever+0x2>
 8001658:	f7ff fd1e 	bl	8001098 <SystemInit>
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <LoopForever+0x6>)
 800165e:	490d      	ldr	r1, [pc, #52]	@ (8001694 <LoopForever+0xa>)
 8001660:	4a0d      	ldr	r2, [pc, #52]	@ (8001698 <LoopForever+0xe>)
 8001662:	2300      	movs	r3, #0
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:
 8001666:	58d4      	ldr	r4, [r2, r3]
 8001668:	50c4      	str	r4, [r0, r3]
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:
 800166c:	18c4      	adds	r4, r0, r3
 800166e:	428c      	cmp	r4, r1
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <LoopForever+0x12>)
 8001674:	4c0a      	ldr	r4, [pc, #40]	@ (80016a0 <LoopForever+0x16>)
 8001676:	2300      	movs	r3, #0
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:
 800167e:	42a2      	cmp	r2, r4
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>
 8001682:	f00b f92b 	bl	800c8dc <__libc_init_array>
 8001686:	f7ff fb75 	bl	8000d74 <main>

0800168a <LoopForever>:
 800168a:	e7fe      	b.n	800168a <LoopForever>
 800168c:	200a0000 	.word	0x200a0000
 8001690:	20000000 	.word	0x20000000
 8001694:	2000010c 	.word	0x2000010c
 8001698:	0800ca20 	.word	0x0800ca20
 800169c:	2000010c 	.word	0x2000010c
 80016a0:	2000c230 	.word	0x2000c230

080016a4 <CAN1_RX0_IRQHandler>:
 80016a4:	e7fe      	b.n	80016a4 <CAN1_RX0_IRQHandler>

080016a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f001 fd3b 	bl	800312c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016b6:	2000      	movs	r0, #0
 80016b8:	f000 f80e 	bl	80016d8 <HAL_InitTick>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d002      	beq.n	80016c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	e001      	b.n	80016cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016c8:	f7ff fc30 	bl	8000f2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016cc:	79fb      	ldrb	r3, [r7, #7]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <HAL_InitTick+0x6c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d023      	beq.n	8001734 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016ec:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <HAL_InitTick+0x70>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <HAL_InitTick+0x6c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fd47 	bl	8003196 <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10f      	bne.n	800172e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d809      	bhi.n	8001728 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800171c:	f001 fd11 	bl	8003142 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001720:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <HAL_InitTick+0x74>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e007      	b.n	8001738 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e004      	b.n	8001738 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
 8001732:	e001      	b.n	8001738 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000008 	.word	0x20000008
 8001748:	20000000 	.word	0x20000000
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	@ (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000008 	.word	0x20000008
 8001774:	2000a620 	.word	0x2000a620

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	@ (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	2000a620 	.word	0x2000a620

08001790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001798:	f7ff ffee 	bl	8001778 <HAL_GetTick>
 800179c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017a8:	d005      	beq.n	80017b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017aa:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <HAL_Delay+0x44>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017b6:	bf00      	nop
 80017b8:	f7ff ffde 	bl	8001778 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d8f7      	bhi.n	80017b8 <HAL_Delay+0x28>
  {
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000008 	.word	0x20000008

080017d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	609a      	str	r2, [r3, #8]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	609a      	str	r2, [r3, #8]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3360      	adds	r3, #96	@ 0x60
 8001852:	461a      	mov	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <LL_ADC_SetOffset+0x44>)
 8001862:	4013      	ands	r3, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	4313      	orrs	r3, r2
 8001870:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001878:	bf00      	nop
 800187a:	371c      	adds	r7, #28
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	03fff000 	.word	0x03fff000

08001888 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3360      	adds	r3, #96	@ 0x60
 8001896:	461a      	mov	r2, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3360      	adds	r3, #96	@ 0x60
 80018c4:	461a      	mov	r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	431a      	orrs	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018de:	bf00      	nop
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	615a      	str	r2, [r3, #20]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001936:	b480      	push	{r7}
 8001938:	b087      	sub	sp, #28
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3330      	adds	r3, #48	@ 0x30
 8001946:	461a      	mov	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	4413      	add	r3, r2
 8001954:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	211f      	movs	r1, #31
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	401a      	ands	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	0e9b      	lsrs	r3, r3, #26
 800196e:	f003 011f 	and.w	r1, r3, #31
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	431a      	orrs	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001982:	bf00      	nop
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3314      	adds	r3, #20
 80019c4:	461a      	mov	r2, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	0e5b      	lsrs	r3, r3, #25
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	4413      	add	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	0d1b      	lsrs	r3, r3, #20
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	2107      	movs	r1, #7
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	401a      	ands	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	0d1b      	lsrs	r3, r3, #20
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a24:	43db      	mvns	r3, r3
 8001a26:	401a      	ands	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0318 	and.w	r3, r3, #24
 8001a2e:	4908      	ldr	r1, [pc, #32]	@ (8001a50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a30:	40d9      	lsrs	r1, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	400b      	ands	r3, r1
 8001a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	0007ffff 	.word	0x0007ffff

08001a54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6093      	str	r3, [r2, #8]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a8c:	d101      	bne.n	8001a92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ab0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ab4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001adc:	d101      	bne.n	8001ae2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b2c:	f043 0202 	orr.w	r2, r3, #2
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <LL_ADC_IsEnabled+0x18>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <LL_ADC_IsEnabled+0x1a>
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d101      	bne.n	8001b7e <LL_ADC_IsDisableOngoing+0x18>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <LL_ADC_IsDisableOngoing+0x1a>
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ba0:	f043 0204 	orr.w	r2, r3, #4
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d101      	bne.n	8001bcc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d101      	bne.n	8001bf2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e129      	b.n	8001e6e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7fe fcc5 	bl	80005b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff19 	bl	8001a78 <LL_ADC_IsDeepPowerDownEnabled>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d004      	beq.n	8001c56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff feff 	bl	8001a54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff34 	bl	8001ac8 <LL_ADC_IsInternalRegulatorEnabled>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d115      	bne.n	8001c92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff18 	bl	8001aa0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c70:	4b81      	ldr	r3, [pc, #516]	@ (8001e78 <HAL_ADC_Init+0x278>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	4a81      	ldr	r2, [pc, #516]	@ (8001e7c <HAL_ADC_Init+0x27c>)
 8001c78:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7c:	099b      	lsrs	r3, r3, #6
 8001c7e:	3301      	adds	r3, #1
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c84:	e002      	b.n	8001c8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f9      	bne.n	8001c86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff16 	bl	8001ac8 <LL_ADC_IsInternalRegulatorEnabled>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10d      	bne.n	8001cbe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca6:	f043 0210 	orr.w	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff76 	bl	8001bb4 <LL_ADC_REG_IsConversionOngoing>
 8001cc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f040 80c2 	bne.w	8001e5c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f040 80be 	bne.w	8001e5c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ce8:	f043 0202 	orr.w	r2, r3, #2
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff23 	bl	8001b40 <LL_ADC_IsEnabled>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10b      	bne.n	8001d18 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d00:	485f      	ldr	r0, [pc, #380]	@ (8001e80 <HAL_ADC_Init+0x280>)
 8001d02:	f7ff ff1d 	bl	8001b40 <LL_ADC_IsEnabled>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d105      	bne.n	8001d18 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4619      	mov	r1, r3
 8001d12:	485c      	ldr	r0, [pc, #368]	@ (8001e84 <HAL_ADC_Init+0x284>)
 8001d14:	f7ff fd60 	bl	80017d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	7e5b      	ldrb	r3, [r3, #25]
 8001d1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d106      	bne.n	8001d54 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	045b      	lsls	r3, r3, #17
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d009      	beq.n	8001d70 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d60:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	4b44      	ldr	r3, [pc, #272]	@ (8001e88 <HAL_ADC_Init+0x288>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	69b9      	ldr	r1, [r7, #24]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff26 	bl	8001bda <LL_ADC_INJ_IsConversionOngoing>
 8001d8e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d140      	bne.n	8001e18 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d13d      	bne.n	8001e18 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7e1b      	ldrb	r3, [r3, #24]
 8001da4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001da6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001dbe:	f023 0306 	bic.w	r3, r3, #6
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	69b9      	ldr	r1, [r7, #24]
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d118      	bne.n	8001e08 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001de0:	f023 0304 	bic.w	r3, r3, #4
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001dec:	4311      	orrs	r1, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001df2:	4311      	orrs	r1, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0201 	orr.w	r2, r2, #1
 8001e04:	611a      	str	r2, [r3, #16]
 8001e06:	e007      	b.n	8001e18 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d10c      	bne.n	8001e3a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f023 010f 	bic.w	r1, r3, #15
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	1e5a      	subs	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e38:	e007      	b.n	8001e4a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 020f 	bic.w	r2, r2, #15
 8001e48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	f023 0303 	bic.w	r3, r3, #3
 8001e52:	f043 0201 	orr.w	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e5a:	e007      	b.n	8001e6c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e60:	f043 0210 	orr.w	r2, r3, #16
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3720      	adds	r7, #32
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	053e2d63 	.word	0x053e2d63
 8001e80:	50040000 	.word	0x50040000
 8001e84:	50040300 	.word	0x50040300
 8001e88:	fff0c007 	.word	0xfff0c007

08001e8c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fe89 	bl	8001bb4 <LL_ADC_REG_IsConversionOngoing>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d167      	bne.n	8001f78 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_Start_DMA+0x2a>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e063      	b.n	8001f7e <HAL_ADC_Start_DMA+0xf2>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 fe2c 	bl	8002b1c <ADC_Enable>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d14f      	bne.n	8001f6e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef2:	f023 0206 	bic.w	r2, r3, #6
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001efa:	e002      	b.n	8001f02 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f06:	4a20      	ldr	r2, [pc, #128]	@ (8001f88 <HAL_ADC_Start_DMA+0xfc>)
 8001f08:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001f8c <HAL_ADC_Start_DMA+0x100>)
 8001f10:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f16:	4a1e      	ldr	r2, [pc, #120]	@ (8001f90 <HAL_ADC_Start_DMA+0x104>)
 8001f18:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	221c      	movs	r2, #28
 8001f20:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0210 	orr.w	r2, r2, #16
 8001f38:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	3340      	adds	r3, #64	@ 0x40
 8001f54:	4619      	mov	r1, r3
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f001 f9d1 	bl	8003300 <HAL_DMA_Start_IT>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fe10 	bl	8001b8c <LL_ADC_REG_StartConversion>
 8001f6c:	e006      	b.n	8001f7c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001f76:	e001      	b.n	8001f7c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	08002ce7 	.word	0x08002ce7
 8001f8c:	08002dbf 	.word	0x08002dbf
 8001f90:	08002ddb 	.word	0x08002ddb

08001f94 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d017      	beq.n	8001fea <HAL_ADC_IRQHandler+0x56>
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d012      	beq.n	8001fea <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d105      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 ffcb 	bl	8002f78 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <HAL_ADC_IRQHandler+0x6a>
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002004:	2b00      	cmp	r3, #0
 8002006:	d05e      	beq.n	80020c6 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d059      	beq.n	80020c6 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d105      	bne.n	800202a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002022:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fc6e 	bl	8001910 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d03e      	beq.n	80020b8 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d135      	bne.n	80020b8 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b08      	cmp	r3, #8
 8002058:	d12e      	bne.n	80020b8 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fda8 	bl	8001bb4 <LL_ADC_REG_IsConversionOngoing>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11a      	bne.n	80020a0 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 020c 	bic.w	r2, r2, #12
 8002078:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d112      	bne.n	80020b8 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	659a      	str	r2, [r3, #88]	@ 0x58
 800209e:	e00b      	b.n	80020b8 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a4:	f043 0210 	orr.w	r2, r3, #16
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b0:	f043 0201 	orr.w	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7fe fdd1 	bl	8000c60 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	220c      	movs	r2, #12
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d004      	beq.n	80020da <HAL_ADC_IRQHandler+0x146>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d072      	beq.n	80021ca <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d06d      	beq.n	80021ca <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d105      	bne.n	8002106 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fc3f 	bl	800198e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002110:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fbfa 	bl	8001910 <LL_ADC_REG_IsTriggerSourceSWStart>
 800211c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d047      	beq.n	80021bc <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_ADC_IRQHandler+0x1b2>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d03f      	beq.n	80021bc <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002142:	2b00      	cmp	r3, #0
 8002144:	d13a      	bne.n	80021bc <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002150:	2b40      	cmp	r3, #64	@ 0x40
 8002152:	d133      	bne.n	80021bc <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d12e      	bne.n	80021bc <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fd39 	bl	8001bda <LL_ADC_INJ_IsConversionOngoing>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d11a      	bne.n	80021a4 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800217c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002182:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d112      	bne.n	80021bc <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219a:	f043 0201 	orr.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80021a2:	e00b      	b.n	80021bc <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a8:	f043 0210 	orr.w	r2, r3, #16
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b4:	f043 0201 	orr.w	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 feb3 	bl	8002f28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2260      	movs	r2, #96	@ 0x60
 80021c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d011      	beq.n	80021f8 <HAL_ADC_IRQHandler+0x264>
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00c      	beq.n	80021f8 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f886 	bl	80022fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2280      	movs	r2, #128	@ 0x80
 80021f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d012      	beq.n	8002228 <HAL_ADC_IRQHandler+0x294>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00d      	beq.n	8002228 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002210:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 fe99 	bl	8002f50 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002226:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800222e:	2b00      	cmp	r3, #0
 8002230:	d012      	beq.n	8002258 <HAL_ADC_IRQHandler+0x2c4>
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00d      	beq.n	8002258 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002240:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 fe8b 	bl	8002f64 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002256:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	d02a      	beq.n	80022b8 <HAL_ADC_IRQHandler+0x324>
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	d025      	beq.n	80022b8 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002274:	2301      	movs	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	e008      	b.n	800228c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002288:	2301      	movs	r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d10e      	bne.n	80022b0 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002296:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a2:	f043 0202 	orr.w	r2, r3, #2
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f830 	bl	8002310 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2210      	movs	r2, #16
 80022b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d018      	beq.n	80022f4 <HAL_ADC_IRQHandler+0x360>
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d013      	beq.n	80022f4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022dc:	f043 0208 	orr.w	r2, r3, #8
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022ec:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fe24 	bl	8002f3c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80022f4:	bf00      	nop
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b0b6      	sub	sp, #216	@ 0xd8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x22>
 8002342:	2302      	movs	r3, #2
 8002344:	e3d5      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x7ce>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fc2e 	bl	8001bb4 <LL_ADC_REG_IsConversionOngoing>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 83ba 	bne.w	8002ad4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b05      	cmp	r3, #5
 800236e:	d824      	bhi.n	80023ba <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	3b02      	subs	r3, #2
 8002376:	2b03      	cmp	r3, #3
 8002378:	d81b      	bhi.n	80023b2 <HAL_ADC_ConfigChannel+0x8e>
 800237a:	a201      	add	r2, pc, #4	@ (adr r2, 8002380 <HAL_ADC_ConfigChannel+0x5c>)
 800237c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002380:	08002391 	.word	0x08002391
 8002384:	08002399 	.word	0x08002399
 8002388:	080023a1 	.word	0x080023a1
 800238c:	080023a9 	.word	0x080023a9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002390:	230c      	movs	r3, #12
 8002392:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002396:	e010      	b.n	80023ba <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002398:	2312      	movs	r3, #18
 800239a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800239e:	e00c      	b.n	80023ba <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80023a0:	2318      	movs	r3, #24
 80023a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023a6:	e008      	b.n	80023ba <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80023a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023b0:	e003      	b.n	80023ba <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80023b2:	2306      	movs	r3, #6
 80023b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023b8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80023c8:	f7ff fab5 	bl	8001936 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fbef 	bl	8001bb4 <LL_ADC_REG_IsConversionOngoing>
 80023d6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fbfb 	bl	8001bda <LL_ADC_INJ_IsConversionOngoing>
 80023e4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 81bf 	bne.w	8002770 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 81ba 	bne.w	8002770 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002404:	d10f      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	4619      	mov	r1, r3
 8002412:	f7ff facf 	bl	80019b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fa63 	bl	80018ea <LL_ADC_SetSamplingTimeCommonConfig>
 8002424:	e00e      	b.n	8002444 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	461a      	mov	r2, r3
 8002434:	f7ff fabe 	bl	80019b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fa53 	bl	80018ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	08db      	lsrs	r3, r3, #3
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b04      	cmp	r3, #4
 8002464:	d00a      	beq.n	800247c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6919      	ldr	r1, [r3, #16]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002476:	f7ff f9e3 	bl	8001840 <LL_ADC_SetOffset>
 800247a:	e179      	b.n	8002770 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fa00 	bl	8001888 <LL_ADC_GetOffsetChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10a      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x184>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff f9f5 	bl	8001888 <LL_ADC_GetOffsetChannel>
 800249e:	4603      	mov	r3, r0
 80024a0:	0e9b      	lsrs	r3, r3, #26
 80024a2:	f003 021f 	and.w	r2, r3, #31
 80024a6:	e01e      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x1c2>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff f9ea 	bl	8001888 <LL_ADC_GetOffsetChannel>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80024d6:	2320      	movs	r3, #32
 80024d8:	e004      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80024da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d105      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x1da>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	e018      	b.n	8002530 <HAL_ADC_ConfigChannel+0x20c>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002512:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002516:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800251a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002522:	2320      	movs	r3, #32
 8002524:	e004      	b.n	8002530 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002526:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002530:	429a      	cmp	r2, r3
 8002532:	d106      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2200      	movs	r2, #0
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff f9b9 	bl	80018b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2101      	movs	r1, #1
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff f99d 	bl	8001888 <LL_ADC_GetOffsetChannel>
 800254e:	4603      	mov	r3, r0
 8002550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10a      	bne.n	800256e <HAL_ADC_ConfigChannel+0x24a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2101      	movs	r1, #1
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff f992 	bl	8001888 <LL_ADC_GetOffsetChannel>
 8002564:	4603      	mov	r3, r0
 8002566:	0e9b      	lsrs	r3, r3, #26
 8002568:	f003 021f 	and.w	r2, r3, #31
 800256c:	e01e      	b.n	80025ac <HAL_ADC_ConfigChannel+0x288>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2101      	movs	r1, #1
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff f987 	bl	8001888 <LL_ADC_GetOffsetChannel>
 800257a:	4603      	mov	r3, r0
 800257c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800258c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002590:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002594:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800259c:	2320      	movs	r3, #32
 800259e:	e004      	b.n	80025aa <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80025a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d105      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x2a0>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0e9b      	lsrs	r3, r3, #26
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	e018      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x2d2>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80025d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80025e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80025e8:	2320      	movs	r3, #32
 80025ea:	e004      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80025ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d106      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	2101      	movs	r1, #1
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff f956 	bl	80018b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2102      	movs	r1, #2
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff f93a 	bl	8001888 <LL_ADC_GetOffsetChannel>
 8002614:	4603      	mov	r3, r0
 8002616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x310>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2102      	movs	r1, #2
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff f92f 	bl	8001888 <LL_ADC_GetOffsetChannel>
 800262a:	4603      	mov	r3, r0
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	f003 021f 	and.w	r2, r3, #31
 8002632:	e01e      	b.n	8002672 <HAL_ADC_ConfigChannel+0x34e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2102      	movs	r1, #2
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f924 	bl	8001888 <LL_ADC_GetOffsetChannel>
 8002640:	4603      	mov	r3, r0
 8002642:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002652:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002656:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800265a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002662:	2320      	movs	r3, #32
 8002664:	e004      	b.n	8002670 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002666:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267a:	2b00      	cmp	r3, #0
 800267c:	d105      	bne.n	800268a <HAL_ADC_ConfigChannel+0x366>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0e9b      	lsrs	r3, r3, #26
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	e014      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x390>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800269a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800269e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e004      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80026aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d106      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	2102      	movs	r1, #2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff f8f7 	bl	80018b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2103      	movs	r1, #3
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff f8db 	bl	8001888 <LL_ADC_GetOffsetChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x3ce>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2103      	movs	r1, #3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff f8d0 	bl	8001888 <LL_ADC_GetOffsetChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	e017      	b.n	8002722 <HAL_ADC_ConfigChannel+0x3fe>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2103      	movs	r1, #3
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff f8c5 	bl	8001888 <LL_ADC_GetOffsetChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800270a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800270c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800270e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002714:	2320      	movs	r3, #32
 8002716:	e003      	b.n	8002720 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002718:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	2b00      	cmp	r3, #0
 800272c:	d105      	bne.n	800273a <HAL_ADC_ConfigChannel+0x416>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	e011      	b.n	800275e <HAL_ADC_ConfigChannel+0x43a>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002748:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800274a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800274c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002752:	2320      	movs	r3, #32
 8002754:	e003      	b.n	800275e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002756:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800275e:	429a      	cmp	r2, r3
 8002760:	d106      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2200      	movs	r2, #0
 8002768:	2103      	movs	r1, #3
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f8a2 	bl	80018b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff f9e3 	bl	8001b40 <LL_ADC_IsEnabled>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	f040 813f 	bne.w	8002a00 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6819      	ldr	r1, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	461a      	mov	r2, r3
 8002790:	f7ff f93c 	bl	8001a0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a8e      	ldr	r2, [pc, #568]	@ (80029d4 <HAL_ADC_ConfigChannel+0x6b0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	f040 8130 	bne.w	8002a00 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10b      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x4a4>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	3301      	adds	r3, #1
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	2b09      	cmp	r3, #9
 80027be:	bf94      	ite	ls
 80027c0:	2301      	movls	r3, #1
 80027c2:	2300      	movhi	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	e019      	b.n	80027fc <HAL_ADC_ConfigChannel+0x4d8>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80027d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80027da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80027e0:	2320      	movs	r3, #32
 80027e2:	e003      	b.n	80027ec <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80027e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2b09      	cmp	r3, #9
 80027f4:	bf94      	ite	ls
 80027f6:	2301      	movls	r3, #1
 80027f8:	2300      	movhi	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d079      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_ADC_ConfigChannel+0x4f8>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0e9b      	lsrs	r3, r3, #26
 8002812:	3301      	adds	r3, #1
 8002814:	069b      	lsls	r3, r3, #26
 8002816:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800281a:	e015      	b.n	8002848 <HAL_ADC_ConfigChannel+0x524>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800282a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800282c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800282e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002834:	2320      	movs	r3, #32
 8002836:	e003      	b.n	8002840 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3301      	adds	r3, #1
 8002842:	069b      	lsls	r3, r3, #26
 8002844:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002850:	2b00      	cmp	r3, #0
 8002852:	d109      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x544>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	3301      	adds	r3, #1
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	e017      	b.n	8002898 <HAL_ADC_ConfigChannel+0x574>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002878:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800287a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002880:	2320      	movs	r3, #32
 8002882:	e003      	b.n	800288c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	ea42 0103 	orr.w	r1, r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <HAL_ADC_ConfigChannel+0x59a>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 021f 	and.w	r2, r3, #31
 80028b4:	4613      	mov	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4413      	add	r3, r2
 80028ba:	051b      	lsls	r3, r3, #20
 80028bc:	e018      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x5cc>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80028cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80028d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80028d6:	2320      	movs	r3, #32
 80028d8:	e003      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80028da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f0:	430b      	orrs	r3, r1
 80028f2:	e080      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d107      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x5ec>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	0e9b      	lsrs	r3, r3, #26
 8002906:	3301      	adds	r3, #1
 8002908:	069b      	lsls	r3, r3, #26
 800290a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800290e:	e015      	b.n	800293c <HAL_ADC_ConfigChannel+0x618>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002928:	2320      	movs	r3, #32
 800292a:	e003      	b.n	8002934 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800292c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	3301      	adds	r3, #1
 8002936:	069b      	lsls	r3, r3, #26
 8002938:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <HAL_ADC_ConfigChannel+0x638>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0e9b      	lsrs	r3, r3, #26
 800294e:	3301      	adds	r3, #1
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	e017      	b.n	800298c <HAL_ADC_ConfigChannel+0x668>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	61bb      	str	r3, [r7, #24]
  return result;
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002974:	2320      	movs	r3, #32
 8002976:	e003      	b.n	8002980 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	3301      	adds	r3, #1
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	2101      	movs	r1, #1
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	ea42 0103 	orr.w	r1, r2, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10d      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x694>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0e9b      	lsrs	r3, r3, #26
 80029a2:	3301      	adds	r3, #1
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	3b1e      	subs	r3, #30
 80029b0:	051b      	lsls	r3, r3, #20
 80029b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	e01d      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x6d0>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	60fb      	str	r3, [r7, #12]
  return result;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d103      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80029d0:	2320      	movs	r3, #32
 80029d2:	e005      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x6bc>
 80029d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f003 021f 	and.w	r2, r3, #31
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	3b1e      	subs	r3, #30
 80029ee:	051b      	lsls	r3, r3, #20
 80029f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7fe ffda 	bl	80019b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b3d      	ldr	r3, [pc, #244]	@ (8002afc <HAL_ADC_ConfigChannel+0x7d8>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d06c      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a0c:	483c      	ldr	r0, [pc, #240]	@ (8002b00 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a0e:	f7fe ff09 	bl	8001824 <LL_ADC_GetCommonPathInternalCh>
 8002a12:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b04 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d127      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d121      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a35      	ldr	r2, [pc, #212]	@ (8002b08 <HAL_ADC_ConfigChannel+0x7e4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d157      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a3a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a3e:	4619      	mov	r1, r3
 8002a40:	482f      	ldr	r0, [pc, #188]	@ (8002b00 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a42:	f7fe fedc 	bl	80017fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a46:	4b31      	ldr	r3, [pc, #196]	@ (8002b0c <HAL_ADC_ConfigChannel+0x7e8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	099b      	lsrs	r3, r3, #6
 8002a4c:	4a30      	ldr	r2, [pc, #192]	@ (8002b10 <HAL_ADC_ConfigChannel+0x7ec>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	099b      	lsrs	r3, r3, #6
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a60:	e002      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f9      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a27      	ldr	r2, [pc, #156]	@ (8002b14 <HAL_ADC_ConfigChannel+0x7f0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d113      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10d      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b08 <HAL_ADC_ConfigChannel+0x7e4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d12a      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4819      	ldr	r0, [pc, #100]	@ (8002b00 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a9c:	f7fe feaf 	bl	80017fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aa0:	e021      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b18 <HAL_ADC_ConfigChannel+0x7f4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d11c      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002aac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ab0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d116      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a12      	ldr	r2, [pc, #72]	@ (8002b08 <HAL_ADC_ConfigChannel+0x7e4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d111      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ac2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ac6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002aca:	4619      	mov	r1, r3
 8002acc:	480c      	ldr	r0, [pc, #48]	@ (8002b00 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ace:	f7fe fe96 	bl	80017fe <LL_ADC_SetCommonPathInternalCh>
 8002ad2:	e008      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002aee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	37d8      	adds	r7, #216	@ 0xd8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	80080000 	.word	0x80080000
 8002b00:	50040300 	.word	0x50040300
 8002b04:	c7520000 	.word	0xc7520000
 8002b08:	50040000 	.word	0x50040000
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	053e2d63 	.word	0x053e2d63
 8002b14:	cb840000 	.word	0xcb840000
 8002b18:	80000001 	.word	0x80000001

08002b1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff f807 	bl	8001b40 <LL_ADC_IsEnabled>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d169      	bne.n	8002c0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	4b36      	ldr	r3, [pc, #216]	@ (8002c18 <ADC_Enable+0xfc>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4a:	f043 0210 	orr.w	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e055      	b.n	8002c0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe ffc2 	bl	8001af0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b6c:	482b      	ldr	r0, [pc, #172]	@ (8002c1c <ADC_Enable+0x100>)
 8002b6e:	f7fe fe59 	bl	8001824 <LL_ADC_GetCommonPathInternalCh>
 8002b72:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d013      	beq.n	8002ba4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b7c:	4b28      	ldr	r3, [pc, #160]	@ (8002c20 <ADC_Enable+0x104>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	4a28      	ldr	r2, [pc, #160]	@ (8002c24 <ADC_Enable+0x108>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b96:	e002      	b.n	8002b9e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f9      	bne.n	8002b98 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ba4:	f7fe fde8 	bl	8001778 <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002baa:	e028      	b.n	8002bfe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe ffc5 	bl	8001b40 <LL_ADC_IsEnabled>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fe ff95 	bl	8001af0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bc6:	f7fe fdd7 	bl	8001778 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d914      	bls.n	8002bfe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d00d      	beq.n	8002bfe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be6:	f043 0210 	orr.w	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e007      	b.n	8002c0e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d1cf      	bne.n	8002bac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	8000003f 	.word	0x8000003f
 8002c1c:	50040300 	.word	0x50040300
 8002c20:	20000000 	.word	0x20000000
 8002c24:	053e2d63 	.word	0x053e2d63

08002c28 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe ff96 	bl	8001b66 <LL_ADC_IsDisableOngoing>
 8002c3a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe ff7d 	bl	8001b40 <LL_ADC_IsEnabled>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d047      	beq.n	8002cdc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d144      	bne.n	8002cdc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030d 	and.w	r3, r3, #13
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10c      	bne.n	8002c7a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe ff57 	bl	8001b18 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c72:	f7fe fd81 	bl	8001778 <HAL_GetTick>
 8002c76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c78:	e029      	b.n	8002cce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7e:	f043 0210 	orr.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e023      	b.n	8002cde <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c96:	f7fe fd6f 	bl	8001778 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d914      	bls.n	8002cce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb6:	f043 0210 	orr.w	r2, r3, #16
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e007      	b.n	8002cde <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1dc      	bne.n	8002c96 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d14b      	bne.n	8002d98 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d021      	beq.n	8002d5e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fdf6 	bl	8001910 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d032      	beq.n	8002d90 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d12b      	bne.n	8002d90 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d11f      	bne.n	8002d90 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d54:	f043 0201 	orr.w	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d5c:	e018      	b.n	8002d90 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d111      	bne.n	8002d90 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d105      	bne.n	8002d90 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7fd ff65 	bl	8000c60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d96:	e00e      	b.n	8002db6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7ff fab3 	bl	8002310 <HAL_ADC_ErrorCallback>
}
 8002daa:	e004      	b.n	8002db6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7fd ff8d 	bl	8000cec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff fa85 	bl	8002310 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <LL_ADC_StartCalibration>:
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002e20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	609a      	str	r2, [r3, #8]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_IsCalibrationOnGoing>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e54:	d101      	bne.n	8002e5a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADCEx_Calibration_Start+0x1c>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e04d      	b.n	8002f20 <HAL_ADCEx_Calibration_Start+0xb8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff fecb 	bl	8002c28 <ADC_Disable>
 8002e92:	4603      	mov	r3, r0
 8002e94:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d136      	bne.n	8002f0a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ea4:	f023 0302 	bic.w	r3, r3, #2
 8002ea8:	f043 0202 	orr.w	r2, r3, #2
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6839      	ldr	r1, [r7, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff ffa9 	bl	8002e0e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ebc:	e014      	b.n	8002ee8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002eca:	d30d      	bcc.n	8002ee8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed0:	f023 0312 	bic.w	r3, r3, #18
 8002ed4:	f043 0210 	orr.w	r2, r3, #16
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e01b      	b.n	8002f20 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ffa7 	bl	8002e40 <LL_ADC_IsCalibrationOnGoing>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e2      	bne.n	8002ebe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efc:	f023 0303 	bic.w	r3, r3, #3
 8002f00:	f043 0201 	orr.w	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f08:	e005      	b.n	8002f16 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0e:	f043 0210 	orr.w	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fbe:	4a04      	ldr	r2, [pc, #16]	@ (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	60d3      	str	r3, [r2, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <__NVIC_GetPriorityGrouping+0x18>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 0307 	and.w	r3, r3, #7
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db0b      	blt.n	800301a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	f003 021f 	and.w	r2, r3, #31
 8003008:	4907      	ldr	r1, [pc, #28]	@ (8003028 <__NVIC_EnableIRQ+0x38>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2001      	movs	r0, #1
 8003012:	fa00 f202 	lsl.w	r2, r0, r2
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e100 	.word	0xe000e100

0800302c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db0a      	blt.n	8003056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	490c      	ldr	r1, [pc, #48]	@ (8003078 <__NVIC_SetPriority+0x4c>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	440b      	add	r3, r1
 8003050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003054:	e00a      	b.n	800306c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4908      	ldr	r1, [pc, #32]	@ (800307c <__NVIC_SetPriority+0x50>)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	3b04      	subs	r3, #4
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	440b      	add	r3, r1
 800306a:	761a      	strb	r2, [r3, #24]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000e100 	.word	0xe000e100
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	@ 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f1c3 0307 	rsb	r3, r3, #7
 800309a:	2b04      	cmp	r3, #4
 800309c:	bf28      	it	cs
 800309e:	2304      	movcs	r3, #4
 80030a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d902      	bls.n	80030b0 <NVIC_EncodePriority+0x30>
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3b03      	subs	r3, #3
 80030ae:	e000      	b.n	80030b2 <NVIC_EncodePriority+0x32>
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	401a      	ands	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43d9      	mvns	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	4313      	orrs	r3, r2
         );
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	@ 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f8:	d301      	bcc.n	80030fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00f      	b.n	800311e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003128 <SysTick_Config+0x40>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003106:	210f      	movs	r1, #15
 8003108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800310c:	f7ff ff8e 	bl	800302c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003110:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <SysTick_Config+0x40>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003116:	4b04      	ldr	r3, [pc, #16]	@ (8003128 <SysTick_Config+0x40>)
 8003118:	2207      	movs	r2, #7
 800311a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	e000e010 	.word	0xe000e010

0800312c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff ff29 	bl	8002f8c <__NVIC_SetPriorityGrouping>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003154:	f7ff ff3e 	bl	8002fd4 <__NVIC_GetPriorityGrouping>
 8003158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	6978      	ldr	r0, [r7, #20]
 8003160:	f7ff ff8e 	bl	8003080 <NVIC_EncodePriority>
 8003164:	4602      	mov	r2, r0
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff5d 	bl	800302c <__NVIC_SetPriority>
}
 8003172:	bf00      	nop
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff31 	bl	8002ff0 <__NVIC_EnableIRQ>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ffa2 	bl	80030e8 <SysTick_Config>
 80031a4:	4603      	mov	r3, r0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e08d      	b.n	80032de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	4b47      	ldr	r3, [pc, #284]	@ (80032e8 <HAL_DMA_Init+0x138>)
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d80f      	bhi.n	80031ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b45      	ldr	r3, [pc, #276]	@ (80032ec <HAL_DMA_Init+0x13c>)
 80031d6:	4413      	add	r3, r2
 80031d8:	4a45      	ldr	r2, [pc, #276]	@ (80032f0 <HAL_DMA_Init+0x140>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	091b      	lsrs	r3, r3, #4
 80031e0:	009a      	lsls	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a42      	ldr	r2, [pc, #264]	@ (80032f4 <HAL_DMA_Init+0x144>)
 80031ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80031ec:	e00e      	b.n	800320c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b40      	ldr	r3, [pc, #256]	@ (80032f8 <HAL_DMA_Init+0x148>)
 80031f6:	4413      	add	r3, r2
 80031f8:	4a3d      	ldr	r2, [pc, #244]	@ (80032f0 <HAL_DMA_Init+0x140>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	009a      	lsls	r2, r3, #2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a3c      	ldr	r2, [pc, #240]	@ (80032fc <HAL_DMA_Init+0x14c>)
 800320a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003226:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 faba 	bl	80037d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800326c:	d102      	bne.n	8003274 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003288:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d010      	beq.n	80032b4 <HAL_DMA_Init+0x104>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b04      	cmp	r3, #4
 8003298:	d80c      	bhi.n	80032b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fada 	bl	8003854 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	e008      	b.n	80032c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40020407 	.word	0x40020407
 80032ec:	bffdfff8 	.word	0xbffdfff8
 80032f0:	cccccccd 	.word	0xcccccccd
 80032f4:	40020000 	.word	0x40020000
 80032f8:	bffdfbf8 	.word	0xbffdfbf8
 80032fc:	40020400 	.word	0x40020400

08003300 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_DMA_Start_IT+0x20>
 800331c:	2302      	movs	r3, #2
 800331e:	e066      	b.n	80033ee <HAL_DMA_Start_IT+0xee>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d155      	bne.n	80033e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0201 	bic.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f9ff 	bl	800375c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003362:	2b00      	cmp	r3, #0
 8003364:	d008      	beq.n	8003378 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 020e 	orr.w	r2, r2, #14
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	e00f      	b.n	8003398 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0204 	bic.w	r2, r2, #4
 8003386:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 020a 	orr.w	r2, r2, #10
 8003396:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d007      	beq.n	80033ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033cc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0201 	orr.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	e005      	b.n	80033ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
 80033ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d008      	beq.n	8003420 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2204      	movs	r2, #4
 8003412:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e040      	b.n	80034a2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 020e 	bic.w	r2, r2, #14
 800342e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800343e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003454:	f003 021c 	and.w	r2, r3, #28
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	2101      	movs	r1, #1
 800345e:	fa01 f202 	lsl.w	r2, r1, r2
 8003462:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800346c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00c      	beq.n	8003490 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003480:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003484:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800348e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d005      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2204      	movs	r2, #4
 80034ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
 80034d0:	e047      	b.n	8003562 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 020e 	bic.w	r2, r2, #14
 80034e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003500:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003506:	f003 021c 	and.w	r2, r3, #28
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	2101      	movs	r1, #1
 8003510:	fa01 f202 	lsl.w	r2, r1, r2
 8003514:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800351e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00c      	beq.n	8003542 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003532:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003536:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003540:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
    }
  }
  return status;
 8003562:	7bfb      	ldrb	r3, [r7, #15]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003588:	f003 031c 	and.w	r3, r3, #28
 800358c:	2204      	movs	r2, #4
 800358e:	409a      	lsls	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d026      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x7a>
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d021      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d107      	bne.n	80035c0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0204 	bic.w	r2, r2, #4
 80035be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c4:	f003 021c 	and.w	r2, r3, #28
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035cc:	2104      	movs	r1, #4
 80035ce:	fa01 f202 	lsl.w	r2, r1, r2
 80035d2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d071      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035e4:	e06c      	b.n	80036c0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	f003 031c 	and.w	r3, r3, #28
 80035ee:	2202      	movs	r2, #2
 80035f0:	409a      	lsls	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02e      	beq.n	8003658 <HAL_DMA_IRQHandler+0xec>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d029      	beq.n	8003658 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10b      	bne.n	800362a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 020a 	bic.w	r2, r2, #10
 8003620:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	f003 021c 	and.w	r2, r3, #28
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2102      	movs	r1, #2
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d038      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003656:	e033      	b.n	80036c0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365c:	f003 031c 	and.w	r3, r3, #28
 8003660:	2208      	movs	r2, #8
 8003662:	409a      	lsls	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d02a      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x156>
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d025      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 020e 	bic.w	r2, r2, #14
 8003684:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	f003 021c 	and.w	r2, r3, #28
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	2101      	movs	r1, #1
 8003694:	fa01 f202 	lsl.w	r2, r1, r2
 8003698:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d004      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
}
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	460b      	mov	r3, r1
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_DMA_RegisterCallback+0x20>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e031      	b.n	8003750 <HAL_DMA_RegisterCallback+0x84>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d120      	bne.n	8003742 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003700:	7afb      	ldrb	r3, [r7, #11]
 8003702:	2b03      	cmp	r3, #3
 8003704:	d81a      	bhi.n	800373c <HAL_DMA_RegisterCallback+0x70>
 8003706:	a201      	add	r2, pc, #4	@ (adr r2, 800370c <HAL_DMA_RegisterCallback+0x40>)
 8003708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370c:	0800371d 	.word	0x0800371d
 8003710:	08003725 	.word	0x08003725
 8003714:	0800372d 	.word	0x0800372d
 8003718:	08003735 	.word	0x08003735
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003722:	e010      	b.n	8003746 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 800372a:	e00c      	b.n	8003746 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003732:	e008      	b.n	8003746 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800373a:	e004      	b.n	8003746 <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	75fb      	strb	r3, [r7, #23]
        break;
 8003740:	e001      	b.n	8003746 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800374e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003750:	4618      	mov	r0, r3
 8003752:	371c      	adds	r7, #28
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003772:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003778:	2b00      	cmp	r3, #0
 800377a:	d004      	beq.n	8003786 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003784:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378a:	f003 021c 	and.w	r2, r3, #28
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f202 	lsl.w	r2, r1, r2
 8003798:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b10      	cmp	r3, #16
 80037a8:	d108      	bne.n	80037bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037ba:	e007      	b.n	80037cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	60da      	str	r2, [r3, #12]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	4b17      	ldr	r3, [pc, #92]	@ (8003844 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d80a      	bhi.n	8003802 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037f8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6493      	str	r3, [r2, #72]	@ 0x48
 8003800:	e007      	b.n	8003812 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003806:	089b      	lsrs	r3, r3, #2
 8003808:	009a      	lsls	r2, r3, #2
 800380a:	4b0f      	ldr	r3, [pc, #60]	@ (8003848 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800380c:	4413      	add	r3, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	3b08      	subs	r3, #8
 800381a:	4a0c      	ldr	r2, [pc, #48]	@ (800384c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a0a      	ldr	r2, [pc, #40]	@ (8003850 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003828:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	2201      	movs	r2, #1
 8003832:	409a      	lsls	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40020407 	.word	0x40020407
 8003848:	4002081c 	.word	0x4002081c
 800384c:	cccccccd 	.word	0xcccccccd
 8003850:	40020880 	.word	0x40020880

08003854 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	461a      	mov	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a08      	ldr	r2, [pc, #32]	@ (8003898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003876:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3b01      	subs	r3, #1
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2201      	movs	r2, #1
 8003882:	409a      	lsls	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	1000823f 	.word	0x1000823f
 8003898:	40020940 	.word	0x40020940

0800389c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038aa:	e166      	b.n	8003b7a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	2101      	movs	r1, #1
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	fa01 f303 	lsl.w	r3, r1, r3
 80038b8:	4013      	ands	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8158 	beq.w	8003b74 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d005      	beq.n	80038dc <HAL_GPIO_Init+0x40>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d130      	bne.n	800393e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	2203      	movs	r2, #3
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4013      	ands	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003912:	2201      	movs	r2, #1
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	091b      	lsrs	r3, r3, #4
 8003928:	f003 0201 	and.w	r2, r3, #1
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b03      	cmp	r3, #3
 8003948:	d017      	beq.n	800397a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	2203      	movs	r2, #3
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4013      	ands	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d123      	bne.n	80039ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	08da      	lsrs	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3208      	adds	r2, #8
 800398e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003992:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	220f      	movs	r2, #15
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	08da      	lsrs	r2, r3, #3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3208      	adds	r2, #8
 80039c8:	6939      	ldr	r1, [r7, #16]
 80039ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	2203      	movs	r2, #3
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 0203 	and.w	r2, r3, #3
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80b2 	beq.w	8003b74 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a10:	4b61      	ldr	r3, [pc, #388]	@ (8003b98 <HAL_GPIO_Init+0x2fc>)
 8003a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a14:	4a60      	ldr	r2, [pc, #384]	@ (8003b98 <HAL_GPIO_Init+0x2fc>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a1c:	4b5e      	ldr	r3, [pc, #376]	@ (8003b98 <HAL_GPIO_Init+0x2fc>)
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a28:	4a5c      	ldr	r2, [pc, #368]	@ (8003b9c <HAL_GPIO_Init+0x300>)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	3302      	adds	r3, #2
 8003a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	220f      	movs	r2, #15
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a52:	d02b      	beq.n	8003aac <HAL_GPIO_Init+0x210>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a52      	ldr	r2, [pc, #328]	@ (8003ba0 <HAL_GPIO_Init+0x304>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d025      	beq.n	8003aa8 <HAL_GPIO_Init+0x20c>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a51      	ldr	r2, [pc, #324]	@ (8003ba4 <HAL_GPIO_Init+0x308>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d01f      	beq.n	8003aa4 <HAL_GPIO_Init+0x208>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a50      	ldr	r2, [pc, #320]	@ (8003ba8 <HAL_GPIO_Init+0x30c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d019      	beq.n	8003aa0 <HAL_GPIO_Init+0x204>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a4f      	ldr	r2, [pc, #316]	@ (8003bac <HAL_GPIO_Init+0x310>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d013      	beq.n	8003a9c <HAL_GPIO_Init+0x200>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a4e      	ldr	r2, [pc, #312]	@ (8003bb0 <HAL_GPIO_Init+0x314>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00d      	beq.n	8003a98 <HAL_GPIO_Init+0x1fc>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a4d      	ldr	r2, [pc, #308]	@ (8003bb4 <HAL_GPIO_Init+0x318>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <HAL_GPIO_Init+0x1f8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a4c      	ldr	r2, [pc, #304]	@ (8003bb8 <HAL_GPIO_Init+0x31c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_GPIO_Init+0x1f4>
 8003a8c:	2307      	movs	r3, #7
 8003a8e:	e00e      	b.n	8003aae <HAL_GPIO_Init+0x212>
 8003a90:	2308      	movs	r3, #8
 8003a92:	e00c      	b.n	8003aae <HAL_GPIO_Init+0x212>
 8003a94:	2306      	movs	r3, #6
 8003a96:	e00a      	b.n	8003aae <HAL_GPIO_Init+0x212>
 8003a98:	2305      	movs	r3, #5
 8003a9a:	e008      	b.n	8003aae <HAL_GPIO_Init+0x212>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	e006      	b.n	8003aae <HAL_GPIO_Init+0x212>
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e004      	b.n	8003aae <HAL_GPIO_Init+0x212>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e002      	b.n	8003aae <HAL_GPIO_Init+0x212>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_GPIO_Init+0x212>
 8003aac:	2300      	movs	r3, #0
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	f002 0203 	and.w	r2, r2, #3
 8003ab4:	0092      	lsls	r2, r2, #2
 8003ab6:	4093      	lsls	r3, r2
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003abe:	4937      	ldr	r1, [pc, #220]	@ (8003b9c <HAL_GPIO_Init+0x300>)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003acc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bbc <HAL_GPIO_Init+0x320>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003af0:	4a32      	ldr	r2, [pc, #200]	@ (8003bbc <HAL_GPIO_Init+0x320>)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003af6:	4b31      	ldr	r3, [pc, #196]	@ (8003bbc <HAL_GPIO_Init+0x320>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4013      	ands	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b1a:	4a28      	ldr	r2, [pc, #160]	@ (8003bbc <HAL_GPIO_Init+0x320>)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b20:	4b26      	ldr	r3, [pc, #152]	@ (8003bbc <HAL_GPIO_Init+0x320>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b44:	4a1d      	ldr	r2, [pc, #116]	@ (8003bbc <HAL_GPIO_Init+0x320>)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bbc <HAL_GPIO_Init+0x320>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	43db      	mvns	r3, r3
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4013      	ands	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b6e:	4a13      	ldr	r2, [pc, #76]	@ (8003bbc <HAL_GPIO_Init+0x320>)
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	3301      	adds	r3, #1
 8003b78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f47f ae91 	bne.w	80038ac <HAL_GPIO_Init+0x10>
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40010000 	.word	0x40010000
 8003ba0:	48000400 	.word	0x48000400
 8003ba4:	48000800 	.word	0x48000800
 8003ba8:	48000c00 	.word	0x48000c00
 8003bac:	48001000 	.word	0x48001000
 8003bb0:	48001400 	.word	0x48001400
 8003bb4:	48001800 	.word	0x48001800
 8003bb8:	48001c00 	.word	0x48001c00
 8003bbc:	40010400 	.word	0x40010400

08003bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bd0:	787b      	ldrb	r3, [r7, #1]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bdc:	e002      	b.n	8003be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c02:	887a      	ldrh	r2, [r7, #2]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4013      	ands	r3, r2
 8003c08:	041a      	lsls	r2, r3, #16
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	43d9      	mvns	r1, r3
 8003c0e:	887b      	ldrh	r3, [r7, #2]
 8003c10:	400b      	ands	r3, r1
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	619a      	str	r2, [r3, #24]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c2e:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d006      	beq.n	8003c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c3a:	4a05      	ldr	r2, [pc, #20]	@ (8003c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fc fe8e 	bl	8000964 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40010400 	.word	0x40010400

08003c54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c56:	b08f      	sub	sp, #60	@ 0x3c
 8003c58:	af0a      	add	r7, sp, #40	@ 0x28
 8003c5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e116      	b.n	8003e94 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d106      	bne.n	8003c86 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f008 f9dd 	bl	800c040 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2203      	movs	r2, #3
 8003c8a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f004 fe34 	bl	8008912 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	687e      	ldr	r6, [r7, #4]
 8003cb2:	466d      	mov	r5, sp
 8003cb4:	f106 0410 	add.w	r4, r6, #16
 8003cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cc8:	1d33      	adds	r3, r6, #4
 8003cca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ccc:	6838      	ldr	r0, [r7, #0]
 8003cce:	f004 fd47 	bl	8008760 <USB_CoreInit>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0d7      	b.n	8003e94 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f004 fe22 	bl	8008934 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	73fb      	strb	r3, [r7, #15]
 8003cf4:	e04a      	b.n	8003d8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	333d      	adds	r3, #61	@ 0x3d
 8003d06:	2201      	movs	r2, #1
 8003d08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	333c      	adds	r3, #60	@ 0x3c
 8003d1a:	7bfa      	ldrb	r2, [r7, #15]
 8003d1c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d1e:	7bfa      	ldrb	r2, [r7, #15]
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	b298      	uxth	r0, r3
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	3356      	adds	r3, #86	@ 0x56
 8003d32:	4602      	mov	r2, r0
 8003d34:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d36:	7bfa      	ldrb	r2, [r7, #15]
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	3340      	adds	r3, #64	@ 0x40
 8003d46:	2200      	movs	r2, #0
 8003d48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d4a:	7bfa      	ldrb	r2, [r7, #15]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3344      	adds	r3, #68	@ 0x44
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d5e:	7bfa      	ldrb	r2, [r7, #15]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	3348      	adds	r3, #72	@ 0x48
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	334c      	adds	r3, #76	@ 0x4c
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d3af      	bcc.n	8003cf6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d96:	2300      	movs	r3, #0
 8003d98:	73fb      	strb	r3, [r7, #15]
 8003d9a:	e044      	b.n	8003e26 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003db2:	7bfa      	ldrb	r2, [r7, #15]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003dc4:	7bfa      	ldrb	r2, [r7, #15]
 8003dc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dc8:	7bfa      	ldrb	r2, [r7, #15]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003dda:	2200      	movs	r2, #0
 8003ddc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dde:	7bfa      	ldrb	r2, [r7, #15]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003df4:	7bfa      	ldrb	r2, [r7, #15]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e0a:	7bfa      	ldrb	r2, [r7, #15]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	3301      	adds	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d3b5      	bcc.n	8003d9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	687e      	ldr	r6, [r7, #4]
 8003e38:	466d      	mov	r5, sp
 8003e3a:	f106 0410 	add.w	r4, r6, #16
 8003e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e4e:	1d33      	adds	r3, r6, #4
 8003e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e52:	6838      	ldr	r0, [r7, #0]
 8003e54:	f004 fdba 	bl	80089cc <USB_DevInit>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e014      	b.n	8003e94 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d102      	bne.n	8003e88 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f001 f86a 	bl	8004f5c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f005 fd68 	bl	8009962 <USB_DevDisconnect>

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_PCD_Start+0x1c>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e01c      	b.n	8003ef2 <HAL_PCD_Start+0x56>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d105      	bne.n	8003ed4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ecc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f004 fd09 	bl	80088f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f005 fd1c 	bl	8009920 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003efa:	b590      	push	{r4, r7, lr}
 8003efc:	b08d      	sub	sp, #52	@ 0x34
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f005 fdda 	bl	8009aca <USB_GetMode>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f040 847e 	bne.w	800481a <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f005 fd3e 	bl	80099a4 <USB_ReadInterrupts>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 8474 	beq.w	8004818 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	0a1b      	lsrs	r3, r3, #8
 8003f3a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f005 fd2b 	bl	80099a4 <USB_ReadInterrupts>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d107      	bne.n	8003f68 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695a      	ldr	r2, [r3, #20]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f002 0202 	and.w	r2, r2, #2
 8003f66:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f005 fd19 	bl	80099a4 <USB_ReadInterrupts>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b10      	cmp	r3, #16
 8003f7a:	d161      	bne.n	8004040 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0210 	bic.w	r2, r2, #16
 8003f8a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	f003 020f 	and.w	r2, r3, #15
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3304      	adds	r3, #4
 8003faa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	0c5b      	lsrs	r3, r3, #17
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d124      	bne.n	8004002 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d035      	beq.n	8004030 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	6a38      	ldr	r0, [r7, #32]
 8003fd8:	f005 fb50 	bl	800967c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fe8:	441a      	add	r2, r3
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	695a      	ldr	r2, [r3, #20]
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ffa:	441a      	add	r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	615a      	str	r2, [r3, #20]
 8004000:	e016      	b.n	8004030 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	0c5b      	lsrs	r3, r3, #17
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	2b06      	cmp	r3, #6
 800400c:	d110      	bne.n	8004030 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004014:	2208      	movs	r2, #8
 8004016:	4619      	mov	r1, r3
 8004018:	6a38      	ldr	r0, [r7, #32]
 800401a:	f005 fb2f 	bl	800967c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800402a:	441a      	add	r2, r3
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0210 	orr.w	r2, r2, #16
 800403e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f005 fcad 	bl	80099a4 <USB_ReadInterrupts>
 800404a:	4603      	mov	r3, r0
 800404c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004050:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004054:	f040 80a7 	bne.w	80041a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f005 fcb2 	bl	80099ca <USB_ReadDevAllOutEpInterrupt>
 8004066:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004068:	e099      	b.n	800419e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800406a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 808e 	beq.w	8004192 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	4611      	mov	r1, r2
 8004080:	4618      	mov	r0, r3
 8004082:	f005 fcd6 	bl	8009a32 <USB_ReadDevOutEPInterrupt>
 8004086:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00c      	beq.n	80040ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800409e:	461a      	mov	r2, r3
 80040a0:	2301      	movs	r3, #1
 80040a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80040a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fe7e 	bl	8004da8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00c      	beq.n	80040d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c2:	461a      	mov	r2, r3
 80040c4:	2308      	movs	r3, #8
 80040c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80040c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 feba 	bl	8004e44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e6:	461a      	mov	r2, r3
 80040e8:	2310      	movs	r3, #16
 80040ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d030      	beq.n	8004158 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fe:	2b80      	cmp	r3, #128	@ 0x80
 8004100:	d109      	bne.n	8004116 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004110:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004114:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4413      	add	r3, r2
 8004128:	3304      	adds	r3, #4
 800412a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	78db      	ldrb	r3, [r3, #3]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d108      	bne.n	8004146 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2200      	movs	r2, #0
 8004138:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	b2db      	uxtb	r3, r3
 800413e:	4619      	mov	r1, r3
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f008 f8d3 	bl	800c2ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004152:	461a      	mov	r2, r3
 8004154:	2302      	movs	r3, #2
 8004156:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d008      	beq.n	8004174 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800416e:	461a      	mov	r2, r3
 8004170:	2320      	movs	r3, #32
 8004172:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800418a:	461a      	mov	r2, r3
 800418c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004190:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	3301      	adds	r3, #1
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800419e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f47f af62 	bne.w	800406a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f005 fbfa 	bl	80099a4 <USB_ReadInterrupts>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041ba:	f040 80a4 	bne.w	8004306 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f005 fc1b 	bl	80099fe <USB_ReadDevAllInEpInterrupt>
 80041c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80041ce:	e096      	b.n	80042fe <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80041d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 808b 	beq.w	80042f2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f005 fc41 	bl	8009a6e <USB_ReadDevInEPInterrupt>
 80041ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	2201      	movs	r2, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800420c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	43db      	mvns	r3, r3
 8004212:	69f9      	ldr	r1, [r7, #28]
 8004214:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004218:	4013      	ands	r3, r2
 800421a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004228:	461a      	mov	r2, r3
 800422a:	2301      	movs	r3, #1
 800422c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	b2db      	uxtb	r3, r3
 8004232:	4619      	mov	r1, r3
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f007 ffc4 	bl	800c1c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004250:	461a      	mov	r2, r3
 8004252:	2308      	movs	r3, #8
 8004254:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800426c:	461a      	mov	r2, r3
 800426e:	2310      	movs	r3, #16
 8004270:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004288:	461a      	mov	r2, r3
 800428a:	2340      	movs	r3, #64	@ 0x40
 800428c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d023      	beq.n	80042e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004298:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800429a:	6a38      	ldr	r0, [r7, #32]
 800429c:	f004 fcd8 	bl	8008c50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80042a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a2:	4613      	mov	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	3338      	adds	r3, #56	@ 0x38
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	4413      	add	r3, r2
 80042b0:	3304      	adds	r3, #4
 80042b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	78db      	ldrb	r3, [r3, #3]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d108      	bne.n	80042ce <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2200      	movs	r2, #0
 80042c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	4619      	mov	r1, r3
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f008 f821 	bl	800c310 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042da:	461a      	mov	r2, r3
 80042dc:	2302      	movs	r3, #2
 80042de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80042ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fcd2 	bl	8004c96 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	3301      	adds	r3, #1
 80042f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80042f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80042fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f af65 	bne.w	80041d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f005 fb4a 	bl	80099a4 <USB_ReadInterrupts>
 8004310:	4603      	mov	r3, r0
 8004312:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004316:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800431a:	d122      	bne.n	8004362 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004336:	2b01      	cmp	r3, #1
 8004338:	d108      	bne.n	800434c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004342:	2100      	movs	r1, #0
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f008 fa55 	bl	800c7f4 <HAL_PCDEx_LPM_Callback>
 800434a:	e002      	b.n	8004352 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f007 ffa5 	bl	800c29c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004360:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f005 fb1c 	bl	80099a4 <USB_ReadInterrupts>
 800436c:	4603      	mov	r3, r0
 800436e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004372:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004376:	d112      	bne.n	800439e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b01      	cmp	r3, #1
 8004386:	d102      	bne.n	800438e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f007 ff61 	bl	800c250 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800439c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f005 fafe 	bl	80099a4 <USB_ReadInterrupts>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043b2:	d121      	bne.n	80043f8 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80043c2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d111      	bne.n	80043f2 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	f003 020f 	and.w	r2, r3, #15
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80043e8:	2101      	movs	r1, #1
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f008 fa02 	bl	800c7f4 <HAL_PCDEx_LPM_Callback>
 80043f0:	e002      	b.n	80043f8 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f007 ff2c 	bl	800c250 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f005 fad1 	bl	80099a4 <USB_ReadInterrupts>
 8004402:	4603      	mov	r3, r0
 8004404:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800440c:	f040 80b5 	bne.w	800457a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2110      	movs	r1, #16
 800442a:	4618      	mov	r0, r3
 800442c:	f004 fc10 	bl	8008c50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004430:	2300      	movs	r3, #0
 8004432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004434:	e046      	b.n	80044c4 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004442:	461a      	mov	r2, r3
 8004444:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004448:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800444a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800445a:	0151      	lsls	r1, r2, #5
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	440a      	add	r2, r1
 8004460:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004464:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004468:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800446a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004476:	461a      	mov	r2, r3
 8004478:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800447c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800447e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800448e:	0151      	lsls	r1, r2, #5
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	440a      	add	r2, r1
 8004494:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004498:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800449c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800449e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ae:	0151      	lsls	r1, r2, #5
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	440a      	add	r2, r1
 80044b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c0:	3301      	adds	r3, #1
 80044c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d3b3      	bcc.n	8004436 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044dc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80044e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d016      	beq.n	8004518 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044fa:	f043 030b 	orr.w	r3, r3, #11
 80044fe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004510:	f043 030b 	orr.w	r3, r3, #11
 8004514:	6453      	str	r3, [r2, #68]	@ 0x44
 8004516:	e015      	b.n	8004544 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004526:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800452a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800452e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800453e:	f043 030b 	orr.w	r3, r3, #11
 8004542:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004552:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004556:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f005 fae1 	bl	8009b2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f005 fa10 	bl	80099a4 <USB_ReadInterrupts>
 8004584:	4603      	mov	r3, r0
 8004586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800458a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800458e:	d124      	bne.n	80045da <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f005 faa6 	bl	8009ae6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f004 fbd3 	bl	8008d4a <USB_GetDevSpeed>
 80045a4:	4603      	mov	r3, r0
 80045a6:	461a      	mov	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681c      	ldr	r4, [r3, #0]
 80045b0:	f001 fbbc 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 80045b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	4620      	mov	r0, r4
 80045c0:	f004 f8fa 	bl	80087b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f007 fe24 	bl	800c212 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80045d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f005 f9e0 	bl	80099a4 <USB_ReadInterrupts>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d10a      	bne.n	8004604 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f007 fe01 	bl	800c1f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f002 0208 	and.w	r2, r2, #8
 8004602:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f005 f9cb 	bl	80099a4 <USB_ReadInterrupts>
 800460e:	4603      	mov	r3, r0
 8004610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004614:	2b80      	cmp	r3, #128	@ 0x80
 8004616:	d122      	bne.n	800465e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004624:	2301      	movs	r3, #1
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
 8004628:	e014      	b.n	8004654 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462e:	4613      	mov	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d105      	bne.n	800464e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	b2db      	uxtb	r3, r3
 8004646:	4619      	mov	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 faf3 	bl	8004c34 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	3301      	adds	r3, #1
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800465a:	429a      	cmp	r2, r3
 800465c:	d3e5      	bcc.n	800462a <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f005 f99e 	bl	80099a4 <USB_ReadInterrupts>
 8004668:	4603      	mov	r3, r0
 800466a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800466e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004672:	d13b      	bne.n	80046ec <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004674:	2301      	movs	r3, #1
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
 8004678:	e02b      	b.n	80046d2 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468e:	4613      	mov	r3, r2
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	3340      	adds	r3, #64	@ 0x40
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d115      	bne.n	80046cc <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80046a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	da12      	bge.n	80046cc <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046aa:	4613      	mov	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	333f      	adds	r3, #63	@ 0x3f
 80046b6:	2201      	movs	r2, #1
 80046b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	4619      	mov	r1, r3
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fab4 	bl	8004c34 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ce:	3301      	adds	r3, #1
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d8:	429a      	cmp	r2, r3
 80046da:	d3ce      	bcc.n	800467a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695a      	ldr	r2, [r3, #20]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80046ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f005 f957 	bl	80099a4 <USB_ReadInterrupts>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004700:	d155      	bne.n	80047ae <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004702:	2301      	movs	r3, #1
 8004704:	627b      	str	r3, [r7, #36]	@ 0x24
 8004706:	e045      	b.n	8004794 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d12e      	bne.n	800478e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004730:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004732:	2b00      	cmp	r3, #0
 8004734:	da2b      	bge.n	800478e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004742:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004746:	429a      	cmp	r2, r3
 8004748:	d121      	bne.n	800478e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800475c:	2201      	movs	r2, #1
 800475e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10a      	bne.n	800478e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004786:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800478a:	6053      	str	r3, [r2, #4]
            break;
 800478c:	e007      	b.n	800479e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	3301      	adds	r3, #1
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800479a:	429a      	cmp	r2, r3
 800479c:	d3b4      	bcc.n	8004708 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80047ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f005 f8f6 	bl	80099a4 <USB_ReadInterrupts>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80047be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c2:	d10a      	bne.n	80047da <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f007 fdb5 	bl	800c334 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695a      	ldr	r2, [r3, #20]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80047d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f005 f8e0 	bl	80099a4 <USB_ReadInterrupts>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d115      	bne.n	800481a <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f007 fda5 	bl	800c350 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	e000      	b.n	800481a <HAL_PCD_IRQHandler+0x920>
      return;
 8004818:	bf00      	nop
    }
  }
}
 800481a:	3734      	adds	r7, #52	@ 0x34
 800481c:	46bd      	mov	sp, r7
 800481e:	bd90      	pop	{r4, r7, pc}

08004820 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_PCD_SetAddress+0x1a>
 8004836:	2302      	movs	r3, #2
 8004838:	e013      	b.n	8004862 <HAL_PCD_SetAddress+0x42>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	78fa      	ldrb	r2, [r7, #3]
 8004850:	4611      	mov	r1, r2
 8004852:	4618      	mov	r0, r3
 8004854:	f005 f83e 	bl	80098d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	4608      	mov	r0, r1
 8004874:	4611      	mov	r1, r2
 8004876:	461a      	mov	r2, r3
 8004878:	4603      	mov	r3, r0
 800487a:	70fb      	strb	r3, [r7, #3]
 800487c:	460b      	mov	r3, r1
 800487e:	803b      	strh	r3, [r7, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800488c:	2b00      	cmp	r3, #0
 800488e:	da0f      	bge.n	80048b0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	f003 020f 	and.w	r2, r3, #15
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	3338      	adds	r3, #56	@ 0x38
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4413      	add	r3, r2
 80048a4:	3304      	adds	r3, #4
 80048a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2201      	movs	r2, #1
 80048ac:	705a      	strb	r2, [r3, #1]
 80048ae:	e00f      	b.n	80048d0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	f003 020f 	and.w	r2, r3, #15
 80048b6:	4613      	mov	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	3304      	adds	r3, #4
 80048c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80048dc:	883a      	ldrh	r2, [r7, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	78ba      	ldrb	r2, [r7, #2]
 80048e6:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	785b      	ldrb	r3, [r3, #1]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80048fa:	78bb      	ldrb	r3, [r7, #2]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d102      	bne.n	8004906 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_PCD_EP_Open+0xaa>
 8004910:	2302      	movs	r3, #2
 8004912:	e00e      	b.n	8004932 <HAL_PCD_EP_Open+0xc8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68f9      	ldr	r1, [r7, #12]
 8004922:	4618      	mov	r0, r3
 8004924:	f004 fa30 	bl	8008d88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004930:	7afb      	ldrb	r3, [r7, #11]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	460b      	mov	r3, r1
 8004944:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004946:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800494a:	2b00      	cmp	r3, #0
 800494c:	da0f      	bge.n	800496e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800494e:	78fb      	ldrb	r3, [r7, #3]
 8004950:	f003 020f 	and.w	r2, r3, #15
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	3338      	adds	r3, #56	@ 0x38
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	4413      	add	r3, r2
 8004962:	3304      	adds	r3, #4
 8004964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	705a      	strb	r2, [r3, #1]
 800496c:	e00f      	b.n	800498e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800496e:	78fb      	ldrb	r3, [r7, #3]
 8004970:	f003 020f 	and.w	r2, r3, #15
 8004974:	4613      	mov	r3, r2
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	4413      	add	r3, r2
 8004984:	3304      	adds	r3, #4
 8004986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_PCD_EP_Close+0x6e>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e00e      	b.n	80049c6 <HAL_PCD_EP_Close+0x8c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68f9      	ldr	r1, [r7, #12]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f004 fa6e 	bl	8008e98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b086      	sub	sp, #24
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
 80049da:	460b      	mov	r3, r1
 80049dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049de:	7afb      	ldrb	r3, [r7, #11]
 80049e0:	f003 020f 	and.w	r2, r3, #15
 80049e4:	4613      	mov	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	3304      	adds	r3, #4
 80049f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2200      	movs	r2, #0
 8004a08:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a10:	7afb      	ldrb	r3, [r7, #11]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6979      	ldr	r1, [r7, #20]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f004 fb14 	bl	8009050 <USB_EPStartXfer>

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	f003 020f 	and.w	r2, r3, #15
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004a54:	681b      	ldr	r3, [r3, #0]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b086      	sub	sp, #24
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a72:	7afb      	ldrb	r3, [r7, #11]
 8004a74:	f003 020f 	and.w	r2, r3, #15
 8004a78:	4613      	mov	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	3338      	adds	r3, #56	@ 0x38
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	3304      	adds	r3, #4
 8004a88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aa2:	7afb      	ldrb	r3, [r7, #11]
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6979      	ldr	r1, [r7, #20]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f004 facb 	bl	8009050 <USB_EPStartXfer>

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	f003 020f 	and.w	r2, r3, #15
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d901      	bls.n	8004ae2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e04e      	b.n	8004b80 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ae2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	da0f      	bge.n	8004b0a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	f003 020f 	and.w	r2, r3, #15
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	3338      	adds	r3, #56	@ 0x38
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	3304      	adds	r3, #4
 8004b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	705a      	strb	r2, [r3, #1]
 8004b08:	e00d      	b.n	8004b26 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b0a:	78fa      	ldrb	r2, [r7, #3]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_PCD_EP_SetStall+0x82>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e01c      	b.n	8004b80 <HAL_PCD_EP_SetStall+0xbc>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68f9      	ldr	r1, [r7, #12]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f004 fde9 	bl	800972c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d108      	bne.n	8004b76 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f004 ffdb 	bl	8009b2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	f003 020f 	and.w	r2, r3, #15
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d901      	bls.n	8004ba6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e042      	b.n	8004c2c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	da0f      	bge.n	8004bce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	f003 020f 	and.w	r2, r3, #15
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	3338      	adds	r3, #56	@ 0x38
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	705a      	strb	r2, [r3, #1]
 8004bcc:	e00f      	b.n	8004bee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bce:	78fb      	ldrb	r3, [r7, #3]
 8004bd0:	f003 020f 	and.w	r2, r3, #15
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	4413      	add	r3, r2
 8004be4:	3304      	adds	r3, #4
 8004be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_PCD_EP_ClrStall+0x86>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e00e      	b.n	8004c2c <HAL_PCD_EP_ClrStall+0xa4>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68f9      	ldr	r1, [r7, #12]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f004 fdf3 	bl	8009808 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	da0c      	bge.n	8004c62 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	f003 020f 	and.w	r2, r3, #15
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	3338      	adds	r3, #56	@ 0x38
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	e00c      	b.n	8004c7c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	f003 020f 	and.w	r2, r3, #15
 8004c68:	4613      	mov	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	3304      	adds	r3, #4
 8004c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68f9      	ldr	r1, [r7, #12]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f004 fc16 	bl	80094b4 <USB_EPStopXfer>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004c8c:	7afb      	ldrb	r3, [r7, #11]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b088      	sub	sp, #32
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	3338      	adds	r3, #56	@ 0x38
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	4413      	add	r3, r2
 8004cba:	3304      	adds	r3, #4
 8004cbc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d901      	bls.n	8004cce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e067      	b.n	8004d9e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d902      	bls.n	8004cea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	3303      	adds	r3, #3
 8004cee:	089b      	lsrs	r3, r3, #2
 8004cf0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cf2:	e026      	b.n	8004d42 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d902      	bls.n	8004d10 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	3303      	adds	r3, #3
 8004d14:	089b      	lsrs	r3, r3, #2
 8004d16:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68d9      	ldr	r1, [r3, #12]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	6978      	ldr	r0, [r7, #20]
 8004d26:	f004 fc6f 	bl	8009608 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	441a      	add	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	441a      	add	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d809      	bhi.n	8004d6c <PCD_WriteEmptyTxFifo+0xd6>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d203      	bcs.n	8004d6c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1c3      	bne.n	8004cf4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d811      	bhi.n	8004d9c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	2201      	movs	r2, #1
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	43db      	mvns	r3, r3
 8004d92:	6939      	ldr	r1, [r7, #16]
 8004d94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d98:	4013      	ands	r3, r2
 8004d9a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3720      	adds	r7, #32
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	333c      	adds	r3, #60	@ 0x3c
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4a19      	ldr	r2, [pc, #100]	@ (8004e40 <PCD_EP_OutXfrComplete_int+0x98>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d124      	bne.n	8004e28 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df4:	461a      	mov	r2, r3
 8004df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dfa:	6093      	str	r3, [r2, #8]
 8004dfc:	e01a      	b.n	8004e34 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f003 0320 	and.w	r3, r3, #32
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e14:	461a      	mov	r2, r3
 8004e16:	2320      	movs	r3, #32
 8004e18:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f007 f9b3 	bl	800c18c <HAL_PCD_DataOutStageCallback>
 8004e26:	e005      	b.n	8004e34 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f007 f9ac 	bl	800c18c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	4f54310a 	.word	0x4f54310a

08004e44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	333c      	adds	r3, #60	@ 0x3c
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4a0c      	ldr	r2, [pc, #48]	@ (8004ea8 <PCD_EP_OutSetupPacket_int+0x64>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d90e      	bls.n	8004e98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d009      	beq.n	8004e98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e90:	461a      	mov	r2, r3
 8004e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f007 f965 	bl	800c168 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	4f54300a 	.word	0x4f54300a

08004eac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ec4:	78fb      	ldrb	r3, [r7, #3]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d107      	bne.n	8004eda <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004eca:	883b      	ldrh	r3, [r7, #0]
 8004ecc:	0419      	lsls	r1, r3, #16
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ed8:	e028      	b.n	8004f2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]
 8004eec:	e00d      	b.n	8004f0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	3340      	adds	r3, #64	@ 0x40
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	4413      	add	r3, r2
 8004f02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	3301      	adds	r3, #1
 8004f08:	73fb      	strb	r3, [r7, #15]
 8004f0a:	7bfa      	ldrb	r2, [r7, #15]
 8004f0c:	78fb      	ldrb	r3, [r7, #3]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d3ec      	bcc.n	8004eee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f14:	883b      	ldrh	r3, [r7, #0]
 8004f16:	0418      	lsls	r0, r3, #16
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6819      	ldr	r1, [r3, #0]
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	4302      	orrs	r2, r0
 8004f24:	3340      	adds	r3, #64	@ 0x40
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	460b      	mov	r3, r1
 8004f44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	887a      	ldrh	r2, [r7, #2]
 8004f4c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f8e:	f043 0303 	orr.w	r3, r3, #3
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb4:	d102      	bne.n	8004fbc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004fb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fba:	e00b      	b.n	8004fd4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004fbc:	4b08      	ldr	r3, [pc, #32]	@ (8004fe0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fca:	d102      	bne.n	8004fd2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004fcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fd0:	e000      	b.n	8004fd4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004fd2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40007000 	.word	0x40007000

08004fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d141      	bne.n	8005076 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ffe:	d131      	bne.n	8005064 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005000:	4b47      	ldr	r3, [pc, #284]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005006:	4a46      	ldr	r2, [pc, #280]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800500c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005010:	4b43      	ldr	r3, [pc, #268]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005018:	4a41      	ldr	r2, [pc, #260]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800501e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005020:	4b40      	ldr	r3, [pc, #256]	@ (8005124 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2232      	movs	r2, #50	@ 0x32
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	4a3f      	ldr	r2, [pc, #252]	@ (8005128 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800502c:	fba2 2303 	umull	r2, r3, r2, r3
 8005030:	0c9b      	lsrs	r3, r3, #18
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005036:	e002      	b.n	800503e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3b01      	subs	r3, #1
 800503c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800503e:	4b38      	ldr	r3, [pc, #224]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800504a:	d102      	bne.n	8005052 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f2      	bne.n	8005038 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005052:	4b33      	ldr	r3, [pc, #204]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800505a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800505e:	d158      	bne.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e057      	b.n	8005114 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005064:	4b2e      	ldr	r3, [pc, #184]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800506a:	4a2d      	ldr	r2, [pc, #180]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800506c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005070:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005074:	e04d      	b.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800507c:	d141      	bne.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800507e:	4b28      	ldr	r3, [pc, #160]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508a:	d131      	bne.n	80050f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800508c:	4b24      	ldr	r3, [pc, #144]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005092:	4a23      	ldr	r2, [pc, #140]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005098:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800509c:	4b20      	ldr	r3, [pc, #128]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80050ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005124 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2232      	movs	r2, #50	@ 0x32
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
 80050b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005128 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	0c9b      	lsrs	r3, r3, #18
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050c2:	e002      	b.n	80050ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ca:	4b15      	ldr	r3, [pc, #84]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d6:	d102      	bne.n	80050de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f2      	bne.n	80050c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050de:	4b10      	ldr	r3, [pc, #64]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ea:	d112      	bne.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e011      	b.n	8005114 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005100:	e007      	b.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005102:	4b07      	ldr	r3, [pc, #28]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800510a:	4a05      	ldr	r2, [pc, #20]	@ (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005110:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	40007000 	.word	0x40007000
 8005124:	20000000 	.word	0x20000000
 8005128:	431bde83 	.word	0x431bde83

0800512c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005130:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4a04      	ldr	r2, [pc, #16]	@ (8005148 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005136:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800513a:	6053      	str	r3, [r2, #4]
}
 800513c:	bf00      	nop
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40007000 	.word	0x40007000

0800514c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005150:	4b05      	ldr	r3, [pc, #20]	@ (8005168 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	4a04      	ldr	r2, [pc, #16]	@ (8005168 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800515a:	6053      	str	r3, [r2, #4]
}
 800515c:	bf00      	nop
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40007000 	.word	0x40007000

0800516c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d102      	bne.n	8005180 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f000 bc08 	b.w	8005990 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005180:	4b96      	ldr	r3, [pc, #600]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 030c 	and.w	r3, r3, #12
 8005188:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800518a:	4b94      	ldr	r3, [pc, #592]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80e4 	beq.w	800536a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d007      	beq.n	80051b8 <HAL_RCC_OscConfig+0x4c>
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2b0c      	cmp	r3, #12
 80051ac:	f040 808b 	bne.w	80052c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	f040 8087 	bne.w	80052c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051b8:	4b88      	ldr	r3, [pc, #544]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_OscConfig+0x64>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e3df      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1a      	ldr	r2, [r3, #32]
 80051d4:	4b81      	ldr	r3, [pc, #516]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d004      	beq.n	80051ea <HAL_RCC_OscConfig+0x7e>
 80051e0:	4b7e      	ldr	r3, [pc, #504]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051e8:	e005      	b.n	80051f6 <HAL_RCC_OscConfig+0x8a>
 80051ea:	4b7c      	ldr	r3, [pc, #496]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 80051ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d223      	bcs.n	8005242 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fdcc 	bl	8005d9c <RCC_SetFlashLatencyFromMSIRange>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e3c0      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800520e:	4b73      	ldr	r3, [pc, #460]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a72      	ldr	r2, [pc, #456]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 8005214:	f043 0308 	orr.w	r3, r3, #8
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	4b70      	ldr	r3, [pc, #448]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	496d      	ldr	r1, [pc, #436]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 8005228:	4313      	orrs	r3, r2
 800522a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800522c:	4b6b      	ldr	r3, [pc, #428]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	4968      	ldr	r1, [pc, #416]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 800523c:	4313      	orrs	r3, r2
 800523e:	604b      	str	r3, [r1, #4]
 8005240:	e025      	b.n	800528e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005242:	4b66      	ldr	r3, [pc, #408]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a65      	ldr	r2, [pc, #404]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 8005248:	f043 0308 	orr.w	r3, r3, #8
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	4b63      	ldr	r3, [pc, #396]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	4960      	ldr	r1, [pc, #384]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 800525c:	4313      	orrs	r3, r2
 800525e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005260:	4b5e      	ldr	r3, [pc, #376]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	021b      	lsls	r3, r3, #8
 800526e:	495b      	ldr	r1, [pc, #364]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 8005270:	4313      	orrs	r3, r2
 8005272:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d109      	bne.n	800528e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fd8c 	bl	8005d9c <RCC_SetFlashLatencyFromMSIRange>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e380      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800528e:	f000 fcc1 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8005292:	4602      	mov	r2, r0
 8005294:	4b51      	ldr	r3, [pc, #324]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	4950      	ldr	r1, [pc, #320]	@ (80053e0 <HAL_RCC_OscConfig+0x274>)
 80052a0:	5ccb      	ldrb	r3, [r1, r3]
 80052a2:	f003 031f 	and.w	r3, r3, #31
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	4a4e      	ldr	r2, [pc, #312]	@ (80053e4 <HAL_RCC_OscConfig+0x278>)
 80052ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80052ae:	4b4e      	ldr	r3, [pc, #312]	@ (80053e8 <HAL_RCC_OscConfig+0x27c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fc fa10 	bl	80016d8 <HAL_InitTick>
 80052b8:	4603      	mov	r3, r0
 80052ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d052      	beq.n	8005368 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	e364      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d032      	beq.n	8005334 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80052ce:	4b43      	ldr	r3, [pc, #268]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a42      	ldr	r2, [pc, #264]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 80052d4:	f043 0301 	orr.w	r3, r3, #1
 80052d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052da:	f7fc fa4d 	bl	8001778 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052e2:	f7fc fa49 	bl	8001778 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e34d      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052f4:	4b39      	ldr	r3, [pc, #228]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f0      	beq.n	80052e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005300:	4b36      	ldr	r3, [pc, #216]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a35      	ldr	r2, [pc, #212]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 8005306:	f043 0308 	orr.w	r3, r3, #8
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	4b33      	ldr	r3, [pc, #204]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	4930      	ldr	r1, [pc, #192]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 800531a:	4313      	orrs	r3, r2
 800531c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800531e:	4b2f      	ldr	r3, [pc, #188]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	021b      	lsls	r3, r3, #8
 800532c:	492b      	ldr	r1, [pc, #172]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 800532e:	4313      	orrs	r3, r2
 8005330:	604b      	str	r3, [r1, #4]
 8005332:	e01a      	b.n	800536a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005334:	4b29      	ldr	r3, [pc, #164]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a28      	ldr	r2, [pc, #160]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 800533a:	f023 0301 	bic.w	r3, r3, #1
 800533e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005340:	f7fc fa1a 	bl	8001778 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005348:	f7fc fa16 	bl	8001778 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e31a      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800535a:	4b20      	ldr	r3, [pc, #128]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0x1dc>
 8005366:	e000      	b.n	800536a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005368:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d073      	beq.n	800545e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	2b08      	cmp	r3, #8
 800537a:	d005      	beq.n	8005388 <HAL_RCC_OscConfig+0x21c>
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2b0c      	cmp	r3, #12
 8005380:	d10e      	bne.n	80053a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b03      	cmp	r3, #3
 8005386:	d10b      	bne.n	80053a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005388:	4b14      	ldr	r3, [pc, #80]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d063      	beq.n	800545c <HAL_RCC_OscConfig+0x2f0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d15f      	bne.n	800545c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e2f7      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053a8:	d106      	bne.n	80053b8 <HAL_RCC_OscConfig+0x24c>
 80053aa:	4b0c      	ldr	r3, [pc, #48]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a0b      	ldr	r2, [pc, #44]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e025      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053c0:	d114      	bne.n	80053ec <HAL_RCC_OscConfig+0x280>
 80053c2:	4b06      	ldr	r3, [pc, #24]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a05      	ldr	r2, [pc, #20]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 80053c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	4b03      	ldr	r3, [pc, #12]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a02      	ldr	r2, [pc, #8]	@ (80053dc <HAL_RCC_OscConfig+0x270>)
 80053d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e013      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
 80053dc:	40021000 	.word	0x40021000
 80053e0:	0800c9a0 	.word	0x0800c9a0
 80053e4:	20000000 	.word	0x20000000
 80053e8:	20000004 	.word	0x20000004
 80053ec:	4ba0      	ldr	r3, [pc, #640]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a9f      	ldr	r2, [pc, #636]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80053f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4b9d      	ldr	r3, [pc, #628]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a9c      	ldr	r2, [pc, #624]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80053fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d013      	beq.n	8005434 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fc f9b4 	bl	8001778 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005414:	f7fc f9b0 	bl	8001778 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b64      	cmp	r3, #100	@ 0x64
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e2b4      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005426:	4b92      	ldr	r3, [pc, #584]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0x2a8>
 8005432:	e014      	b.n	800545e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005434:	f7fc f9a0 	bl	8001778 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800543c:	f7fc f99c 	bl	8001778 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b64      	cmp	r3, #100	@ 0x64
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e2a0      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800544e:	4b88      	ldr	r3, [pc, #544]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0x2d0>
 800545a:	e000      	b.n	800545e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d060      	beq.n	800552c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b04      	cmp	r3, #4
 800546e:	d005      	beq.n	800547c <HAL_RCC_OscConfig+0x310>
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b0c      	cmp	r3, #12
 8005474:	d119      	bne.n	80054aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d116      	bne.n	80054aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800547c:	4b7c      	ldr	r3, [pc, #496]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_RCC_OscConfig+0x328>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e27d      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005494:	4b76      	ldr	r3, [pc, #472]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	061b      	lsls	r3, r3, #24
 80054a2:	4973      	ldr	r1, [pc, #460]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054a8:	e040      	b.n	800552c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d023      	beq.n	80054fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054b2:	4b6f      	ldr	r3, [pc, #444]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a6e      	ldr	r2, [pc, #440]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80054b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054be:	f7fc f95b 	bl	8001778 <HAL_GetTick>
 80054c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054c6:	f7fc f957 	bl	8001778 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e25b      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054d8:	4b65      	ldr	r3, [pc, #404]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0f0      	beq.n	80054c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e4:	4b62      	ldr	r3, [pc, #392]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	061b      	lsls	r3, r3, #24
 80054f2:	495f      	ldr	r1, [pc, #380]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	604b      	str	r3, [r1, #4]
 80054f8:	e018      	b.n	800552c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054fa:	4b5d      	ldr	r3, [pc, #372]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a5c      	ldr	r2, [pc, #368]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 8005500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005506:	f7fc f937 	bl	8001778 <HAL_GetTick>
 800550a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800550e:	f7fc f933 	bl	8001778 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e237      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005520:	4b53      	ldr	r3, [pc, #332]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1f0      	bne.n	800550e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d03c      	beq.n	80055b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01c      	beq.n	800557a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005540:	4b4b      	ldr	r3, [pc, #300]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 8005542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005546:	4a4a      	ldr	r2, [pc, #296]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005550:	f7fc f912 	bl	8001778 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005558:	f7fc f90e 	bl	8001778 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e212      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800556a:	4b41      	ldr	r3, [pc, #260]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 800556c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0ef      	beq.n	8005558 <HAL_RCC_OscConfig+0x3ec>
 8005578:	e01b      	b.n	80055b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800557a:	4b3d      	ldr	r3, [pc, #244]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 800557c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005580:	4a3b      	ldr	r2, [pc, #236]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 8005582:	f023 0301 	bic.w	r3, r3, #1
 8005586:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558a:	f7fc f8f5 	bl	8001778 <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005592:	f7fc f8f1 	bl	8001778 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e1f5      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055a4:	4b32      	ldr	r3, [pc, #200]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80055a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1ef      	bne.n	8005592 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 80a6 	beq.w	800570c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055c0:	2300      	movs	r3, #0
 80055c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80055c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80055c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10d      	bne.n	80055ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d0:	4b27      	ldr	r3, [pc, #156]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80055d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d4:	4a26      	ldr	r2, [pc, #152]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80055d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055da:	6593      	str	r3, [r2, #88]	@ 0x58
 80055dc:	4b24      	ldr	r3, [pc, #144]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 80055de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055e8:	2301      	movs	r3, #1
 80055ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ec:	4b21      	ldr	r3, [pc, #132]	@ (8005674 <HAL_RCC_OscConfig+0x508>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d118      	bne.n	800562a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005674 <HAL_RCC_OscConfig+0x508>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005674 <HAL_RCC_OscConfig+0x508>)
 80055fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005602:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005604:	f7fc f8b8 	bl	8001778 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800560c:	f7fc f8b4 	bl	8001778 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e1b8      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800561e:	4b15      	ldr	r3, [pc, #84]	@ (8005674 <HAL_RCC_OscConfig+0x508>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f0      	beq.n	800560c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d108      	bne.n	8005644 <HAL_RCC_OscConfig+0x4d8>
 8005632:	4b0f      	ldr	r3, [pc, #60]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 8005634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005638:	4a0d      	ldr	r2, [pc, #52]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005642:	e029      	b.n	8005698 <HAL_RCC_OscConfig+0x52c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b05      	cmp	r3, #5
 800564a:	d115      	bne.n	8005678 <HAL_RCC_OscConfig+0x50c>
 800564c:	4b08      	ldr	r3, [pc, #32]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 800564e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005652:	4a07      	ldr	r2, [pc, #28]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 8005654:	f043 0304 	orr.w	r3, r3, #4
 8005658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800565c:	4b04      	ldr	r3, [pc, #16]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005662:	4a03      	ldr	r2, [pc, #12]	@ (8005670 <HAL_RCC_OscConfig+0x504>)
 8005664:	f043 0301 	orr.w	r3, r3, #1
 8005668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800566c:	e014      	b.n	8005698 <HAL_RCC_OscConfig+0x52c>
 800566e:	bf00      	nop
 8005670:	40021000 	.word	0x40021000
 8005674:	40007000 	.word	0x40007000
 8005678:	4b9d      	ldr	r3, [pc, #628]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 800567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800567e:	4a9c      	ldr	r2, [pc, #624]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005688:	4b99      	ldr	r3, [pc, #612]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 800568a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800568e:	4a98      	ldr	r2, [pc, #608]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005690:	f023 0304 	bic.w	r3, r3, #4
 8005694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d016      	beq.n	80056ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a0:	f7fc f86a 	bl	8001778 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a6:	e00a      	b.n	80056be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a8:	f7fc f866 	bl	8001778 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e168      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056be:	4b8c      	ldr	r3, [pc, #560]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 80056c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ed      	beq.n	80056a8 <HAL_RCC_OscConfig+0x53c>
 80056cc:	e015      	b.n	80056fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ce:	f7fc f853 	bl	8001778 <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056d4:	e00a      	b.n	80056ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d6:	f7fc f84f 	bl	8001778 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e151      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056ec:	4b80      	ldr	r3, [pc, #512]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1ed      	bne.n	80056d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056fa:	7ffb      	ldrb	r3, [r7, #31]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d105      	bne.n	800570c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005700:	4b7b      	ldr	r3, [pc, #492]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005704:	4a7a      	ldr	r2, [pc, #488]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800570a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d03c      	beq.n	8005792 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01c      	beq.n	800575a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005720:	4b73      	ldr	r3, [pc, #460]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005726:	4a72      	ldr	r2, [pc, #456]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005730:	f7fc f822 	bl	8001778 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005738:	f7fc f81e 	bl	8001778 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e122      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800574a:	4b69      	ldr	r3, [pc, #420]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 800574c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0ef      	beq.n	8005738 <HAL_RCC_OscConfig+0x5cc>
 8005758:	e01b      	b.n	8005792 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800575a:	4b65      	ldr	r3, [pc, #404]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 800575c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005760:	4a63      	ldr	r2, [pc, #396]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005762:	f023 0301 	bic.w	r3, r3, #1
 8005766:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800576a:	f7fc f805 	bl	8001778 <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005772:	f7fc f801 	bl	8001778 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e105      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005784:	4b5a      	ldr	r3, [pc, #360]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005786:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1ef      	bne.n	8005772 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 80f9 	beq.w	800598e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	f040 80cf 	bne.w	8005944 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80057a6:	4b52      	ldr	r3, [pc, #328]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f003 0203 	and.w	r2, r3, #3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d12c      	bne.n	8005814 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c4:	3b01      	subs	r3, #1
 80057c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d123      	bne.n	8005814 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057d8:	429a      	cmp	r2, r3
 80057da:	d11b      	bne.n	8005814 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d113      	bne.n	8005814 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	3b01      	subs	r3, #1
 80057fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d109      	bne.n	8005814 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	085b      	lsrs	r3, r3, #1
 800580c:	3b01      	subs	r3, #1
 800580e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005810:	429a      	cmp	r2, r3
 8005812:	d071      	beq.n	80058f8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	2b0c      	cmp	r3, #12
 8005818:	d068      	beq.n	80058ec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800581a:	4b35      	ldr	r3, [pc, #212]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d105      	bne.n	8005832 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005826:	4b32      	ldr	r3, [pc, #200]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e0ac      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005836:	4b2e      	ldr	r3, [pc, #184]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a2d      	ldr	r2, [pc, #180]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 800583c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005840:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005842:	f7fb ff99 	bl	8001778 <HAL_GetTick>
 8005846:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584a:	f7fb ff95 	bl	8001778 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e099      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800585c:	4b24      	ldr	r3, [pc, #144]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1f0      	bne.n	800584a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005868:	4b21      	ldr	r3, [pc, #132]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	4b21      	ldr	r3, [pc, #132]	@ (80058f4 <HAL_RCC_OscConfig+0x788>)
 800586e:	4013      	ands	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005878:	3a01      	subs	r2, #1
 800587a:	0112      	lsls	r2, r2, #4
 800587c:	4311      	orrs	r1, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005882:	0212      	lsls	r2, r2, #8
 8005884:	4311      	orrs	r1, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800588a:	0852      	lsrs	r2, r2, #1
 800588c:	3a01      	subs	r2, #1
 800588e:	0552      	lsls	r2, r2, #21
 8005890:	4311      	orrs	r1, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005896:	0852      	lsrs	r2, r2, #1
 8005898:	3a01      	subs	r2, #1
 800589a:	0652      	lsls	r2, r2, #25
 800589c:	4311      	orrs	r1, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80058a2:	06d2      	lsls	r2, r2, #27
 80058a4:	430a      	orrs	r2, r1
 80058a6:	4912      	ldr	r1, [pc, #72]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80058ac:	4b10      	ldr	r3, [pc, #64]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a0f      	ldr	r2, [pc, #60]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 80058b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058b8:	4b0d      	ldr	r3, [pc, #52]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4a0c      	ldr	r2, [pc, #48]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 80058be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058c4:	f7fb ff58 	bl	8001778 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058cc:	f7fb ff54 	bl	8001778 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e058      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058de:	4b04      	ldr	r3, [pc, #16]	@ (80058f0 <HAL_RCC_OscConfig+0x784>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058ea:	e050      	b.n	800598e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e04f      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
 80058f0:	40021000 	.word	0x40021000
 80058f4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058f8:	4b27      	ldr	r3, [pc, #156]	@ (8005998 <HAL_RCC_OscConfig+0x82c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d144      	bne.n	800598e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005904:	4b24      	ldr	r3, [pc, #144]	@ (8005998 <HAL_RCC_OscConfig+0x82c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a23      	ldr	r2, [pc, #140]	@ (8005998 <HAL_RCC_OscConfig+0x82c>)
 800590a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800590e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005910:	4b21      	ldr	r3, [pc, #132]	@ (8005998 <HAL_RCC_OscConfig+0x82c>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4a20      	ldr	r2, [pc, #128]	@ (8005998 <HAL_RCC_OscConfig+0x82c>)
 8005916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800591a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800591c:	f7fb ff2c 	bl	8001778 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005924:	f7fb ff28 	bl	8001778 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e02c      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005936:	4b18      	ldr	r3, [pc, #96]	@ (8005998 <HAL_RCC_OscConfig+0x82c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0f0      	beq.n	8005924 <HAL_RCC_OscConfig+0x7b8>
 8005942:	e024      	b.n	800598e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b0c      	cmp	r3, #12
 8005948:	d01f      	beq.n	800598a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594a:	4b13      	ldr	r3, [pc, #76]	@ (8005998 <HAL_RCC_OscConfig+0x82c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a12      	ldr	r2, [pc, #72]	@ (8005998 <HAL_RCC_OscConfig+0x82c>)
 8005950:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005956:	f7fb ff0f 	bl	8001778 <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800595e:	f7fb ff0b 	bl	8001778 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e00f      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005970:	4b09      	ldr	r3, [pc, #36]	@ (8005998 <HAL_RCC_OscConfig+0x82c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1f0      	bne.n	800595e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800597c:	4b06      	ldr	r3, [pc, #24]	@ (8005998 <HAL_RCC_OscConfig+0x82c>)
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	4905      	ldr	r1, [pc, #20]	@ (8005998 <HAL_RCC_OscConfig+0x82c>)
 8005982:	4b06      	ldr	r3, [pc, #24]	@ (800599c <HAL_RCC_OscConfig+0x830>)
 8005984:	4013      	ands	r3, r2
 8005986:	60cb      	str	r3, [r1, #12]
 8005988:	e001      	b.n	800598e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40021000 	.word	0x40021000
 800599c:	feeefffc 	.word	0xfeeefffc

080059a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e11d      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059b8:	4b90      	ldr	r3, [pc, #576]	@ (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d910      	bls.n	80059e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c6:	4b8d      	ldr	r3, [pc, #564]	@ (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f023 020f 	bic.w	r2, r3, #15
 80059ce:	498b      	ldr	r1, [pc, #556]	@ (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d6:	4b89      	ldr	r3, [pc, #548]	@ (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d001      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e105      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d010      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	4b81      	ldr	r3, [pc, #516]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d908      	bls.n	8005a16 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a04:	4b7e      	ldr	r3, [pc, #504]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	497b      	ldr	r1, [pc, #492]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d079      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d11e      	bne.n	8005a68 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a2a:	4b75      	ldr	r3, [pc, #468]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e0dc      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005a3a:	f000 fa09 	bl	8005e50 <RCC_GetSysClockFreqFromPLLSource>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4a70      	ldr	r2, [pc, #448]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d946      	bls.n	8005ad4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005a46:	4b6e      	ldr	r3, [pc, #440]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d140      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a52:	4b6b      	ldr	r3, [pc, #428]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a5a:	4a69      	ldr	r2, [pc, #420]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a62:	2380      	movs	r3, #128	@ 0x80
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	e035      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d107      	bne.n	8005a80 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a70:	4b63      	ldr	r3, [pc, #396]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d115      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0b9      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d107      	bne.n	8005a98 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a88:	4b5d      	ldr	r3, [pc, #372]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d109      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e0ad      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a98:	4b59      	ldr	r3, [pc, #356]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0a5      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005aa8:	f000 f8b4 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8005aac:	4603      	mov	r3, r0
 8005aae:	4a55      	ldr	r2, [pc, #340]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d90f      	bls.n	8005ad4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005ab4:	4b52      	ldr	r3, [pc, #328]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d109      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ac0:	4b4f      	ldr	r3, [pc, #316]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ac8:	4a4d      	ldr	r2, [pc, #308]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ace:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ad0:	2380      	movs	r3, #128	@ 0x80
 8005ad2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f023 0203 	bic.w	r2, r3, #3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	4947      	ldr	r1, [pc, #284]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae6:	f7fb fe47 	bl	8001778 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aec:	e00a      	b.n	8005b04 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aee:	f7fb fe43 	bl	8001778 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e077      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b04:	4b3e      	ldr	r3, [pc, #248]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 020c 	and.w	r2, r3, #12
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d1eb      	bne.n	8005aee <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b80      	cmp	r3, #128	@ 0x80
 8005b1a:	d105      	bne.n	8005b28 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b1c:	4b38      	ldr	r3, [pc, #224]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	4a37      	ldr	r2, [pc, #220]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b26:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d010      	beq.n	8005b56 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	4b31      	ldr	r3, [pc, #196]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d208      	bcs.n	8005b56 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b44:	4b2e      	ldr	r3, [pc, #184]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	492b      	ldr	r1, [pc, #172]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b56:	4b29      	ldr	r3, [pc, #164]	@ (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d210      	bcs.n	8005b86 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b64:	4b25      	ldr	r3, [pc, #148]	@ (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f023 020f 	bic.w	r2, r3, #15
 8005b6c:	4923      	ldr	r1, [pc, #140]	@ (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b74:	4b21      	ldr	r3, [pc, #132]	@ (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d001      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e036      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d008      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b92:	4b1b      	ldr	r3, [pc, #108]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	4918      	ldr	r1, [pc, #96]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d009      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bb0:	4b13      	ldr	r3, [pc, #76]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4910      	ldr	r1, [pc, #64]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bc4:	f000 f826 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	4b0d      	ldr	r3, [pc, #52]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 030f 	and.w	r3, r3, #15
 8005bd4:	490c      	ldr	r1, [pc, #48]	@ (8005c08 <HAL_RCC_ClockConfig+0x268>)
 8005bd6:	5ccb      	ldrb	r3, [r1, r3]
 8005bd8:	f003 031f 	and.w	r3, r3, #31
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005be0:	4a0a      	ldr	r2, [pc, #40]	@ (8005c0c <HAL_RCC_ClockConfig+0x26c>)
 8005be2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005be4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c10 <HAL_RCC_ClockConfig+0x270>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fb fd75 	bl	80016d8 <HAL_InitTick>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	73fb      	strb	r3, [r7, #15]

  return status;
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40022000 	.word	0x40022000
 8005c00:	40021000 	.word	0x40021000
 8005c04:	04c4b400 	.word	0x04c4b400
 8005c08:	0800c9a0 	.word	0x0800c9a0
 8005c0c:	20000000 	.word	0x20000000
 8005c10:	20000004 	.word	0x20000004

08005c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b089      	sub	sp, #36	@ 0x24
 8005c18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c22:	4b3e      	ldr	r3, [pc, #248]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <HAL_RCC_GetSysClockFreq+0x34>
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b0c      	cmp	r3, #12
 8005c40:	d121      	bne.n	8005c86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d11e      	bne.n	8005c86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c48:	4b34      	ldr	r3, [pc, #208]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d107      	bne.n	8005c64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c54:	4b31      	ldr	r3, [pc, #196]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c5a:	0a1b      	lsrs	r3, r3, #8
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	e005      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c64:	4b2d      	ldr	r3, [pc, #180]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c70:	4a2b      	ldr	r2, [pc, #172]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10d      	bne.n	8005c9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c84:	e00a      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d102      	bne.n	8005c92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c8c:	4b25      	ldr	r3, [pc, #148]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c8e:	61bb      	str	r3, [r7, #24]
 8005c90:	e004      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d101      	bne.n	8005c9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c98:	4b23      	ldr	r3, [pc, #140]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b0c      	cmp	r3, #12
 8005ca0:	d134      	bne.n	8005d0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d003      	beq.n	8005cba <HAL_RCC_GetSysClockFreq+0xa6>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d003      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xac>
 8005cb8:	e005      	b.n	8005cc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005cba:	4b1a      	ldr	r3, [pc, #104]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cbc:	617b      	str	r3, [r7, #20]
      break;
 8005cbe:	e005      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005cc0:	4b19      	ldr	r3, [pc, #100]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x114>)
 8005cc2:	617b      	str	r3, [r7, #20]
      break;
 8005cc4:	e002      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	617b      	str	r3, [r7, #20]
      break;
 8005cca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ccc:	4b13      	ldr	r3, [pc, #76]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	091b      	lsrs	r3, r3, #4
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005cda:	4b10      	ldr	r3, [pc, #64]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	fb03 f202 	mul.w	r2, r3, r2
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	0e5b      	lsrs	r3, r3, #25
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d0c:	69bb      	ldr	r3, [r7, #24]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3724      	adds	r7, #36	@ 0x24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	0800c9b8 	.word	0x0800c9b8
 8005d24:	00f42400 	.word	0x00f42400
 8005d28:	007a1200 	.word	0x007a1200

08005d2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d30:	4b03      	ldr	r3, [pc, #12]	@ (8005d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d32:	681b      	ldr	r3, [r3, #0]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	20000000 	.word	0x20000000

08005d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d48:	f7ff fff0 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	4b06      	ldr	r3, [pc, #24]	@ (8005d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	0a1b      	lsrs	r3, r3, #8
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	4904      	ldr	r1, [pc, #16]	@ (8005d6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d5a:	5ccb      	ldrb	r3, [r1, r3]
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	0800c9b0 	.word	0x0800c9b0

08005d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d74:	f7ff ffda 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b06      	ldr	r3, [pc, #24]	@ (8005d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0adb      	lsrs	r3, r3, #11
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4904      	ldr	r1, [pc, #16]	@ (8005d98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40021000 	.word	0x40021000
 8005d98:	0800c9b0 	.word	0x0800c9b0

08005d9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005da8:	4b27      	ldr	r3, [pc, #156]	@ (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005db4:	f7ff f8f6 	bl	8004fa4 <HAL_PWREx_GetVoltageRange>
 8005db8:	6178      	str	r0, [r7, #20]
 8005dba:	e014      	b.n	8005de6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dbc:	4b22      	ldr	r3, [pc, #136]	@ (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc0:	4a21      	ldr	r2, [pc, #132]	@ (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005dd4:	f7ff f8e6 	bl	8004fa4 <HAL_PWREx_GetVoltageRange>
 8005dd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005dda:	4b1b      	ldr	r3, [pc, #108]	@ (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dde:	4a1a      	ldr	r2, [pc, #104]	@ (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005de4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dec:	d10b      	bne.n	8005e06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b80      	cmp	r3, #128	@ 0x80
 8005df2:	d913      	bls.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2ba0      	cmp	r3, #160	@ 0xa0
 8005df8:	d902      	bls.n	8005e00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	e00d      	b.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e00:	2301      	movs	r3, #1
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	e00a      	b.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e0a:	d902      	bls.n	8005e12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	e004      	b.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b70      	cmp	r3, #112	@ 0x70
 8005e16:	d101      	bne.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e18:	2301      	movs	r3, #1
 8005e1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f023 020f 	bic.w	r2, r3, #15
 8005e24:	4909      	ldr	r1, [pc, #36]	@ (8005e4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e2c:	4b07      	ldr	r3, [pc, #28]	@ (8005e4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d001      	beq.n	8005e3e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	40022000 	.word	0x40022000

08005e50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e56:	4b2d      	ldr	r3, [pc, #180]	@ (8005f0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d00b      	beq.n	8005e7e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d825      	bhi.n	8005eb8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d008      	beq.n	8005e84 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d11f      	bne.n	8005eb8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005e78:	4b25      	ldr	r3, [pc, #148]	@ (8005f10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e7a:	613b      	str	r3, [r7, #16]
    break;
 8005e7c:	e01f      	b.n	8005ebe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005e7e:	4b25      	ldr	r3, [pc, #148]	@ (8005f14 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005e80:	613b      	str	r3, [r7, #16]
    break;
 8005e82:	e01c      	b.n	8005ebe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e84:	4b21      	ldr	r3, [pc, #132]	@ (8005f0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d107      	bne.n	8005ea0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e90:	4b1e      	ldr	r3, [pc, #120]	@ (8005f0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e96:	0a1b      	lsrs	r3, r3, #8
 8005e98:	f003 030f 	and.w	r3, r3, #15
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	e005      	b.n	8005eac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	091b      	lsrs	r3, r3, #4
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005eac:	4a1a      	ldr	r2, [pc, #104]	@ (8005f18 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb4:	613b      	str	r3, [r7, #16]
    break;
 8005eb6:	e002      	b.n	8005ebe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	613b      	str	r3, [r7, #16]
    break;
 8005ebc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ebe:	4b13      	ldr	r3, [pc, #76]	@ (8005f0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	091b      	lsrs	r3, r3, #4
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	3301      	adds	r3, #1
 8005eca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8005f0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	0a1b      	lsrs	r3, r3, #8
 8005ed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	fb03 f202 	mul.w	r2, r3, r2
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ee4:	4b09      	ldr	r3, [pc, #36]	@ (8005f0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	0e5b      	lsrs	r3, r3, #25
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005efe:	683b      	ldr	r3, [r7, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	371c      	adds	r7, #28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	00f42400 	.word	0x00f42400
 8005f14:	007a1200 	.word	0x007a1200
 8005f18:	0800c9b8 	.word	0x0800c9b8

08005f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f24:	2300      	movs	r3, #0
 8005f26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f28:	2300      	movs	r3, #0
 8005f2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d040      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f3c:	2b80      	cmp	r3, #128	@ 0x80
 8005f3e:	d02a      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f40:	2b80      	cmp	r3, #128	@ 0x80
 8005f42:	d825      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f44:	2b60      	cmp	r3, #96	@ 0x60
 8005f46:	d026      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f48:	2b60      	cmp	r3, #96	@ 0x60
 8005f4a:	d821      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f4c:	2b40      	cmp	r3, #64	@ 0x40
 8005f4e:	d006      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005f50:	2b40      	cmp	r3, #64	@ 0x40
 8005f52:	d81d      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d009      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d010      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005f5c:	e018      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f5e:	4b89      	ldr	r3, [pc, #548]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	4a88      	ldr	r2, [pc, #544]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f68:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f6a:	e015      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fb02 	bl	800657c <RCCEx_PLLSAI1_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f7c:	e00c      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	3320      	adds	r3, #32
 8005f82:	2100      	movs	r1, #0
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 fbed 	bl	8006764 <RCCEx_PLLSAI2_Config>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f8e:	e003      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	74fb      	strb	r3, [r7, #19]
      break;
 8005f94:	e000      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f98:	7cfb      	ldrb	r3, [r7, #19]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10b      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f9e:	4b79      	ldr	r3, [pc, #484]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fa4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fac:	4975      	ldr	r1, [pc, #468]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005fb4:	e001      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb6:	7cfb      	ldrb	r3, [r7, #19]
 8005fb8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d047      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fce:	d030      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fd4:	d82a      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005fd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fda:	d02a      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005fdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fe0:	d824      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005fe2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fe6:	d008      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fec:	d81e      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00a      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ff6:	d010      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005ff8:	e018      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ffa:	4b62      	ldr	r3, [pc, #392]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	4a61      	ldr	r2, [pc, #388]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006004:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006006:	e015      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3304      	adds	r3, #4
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fab4 	bl	800657c <RCCEx_PLLSAI1_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006018:	e00c      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3320      	adds	r3, #32
 800601e:	2100      	movs	r1, #0
 8006020:	4618      	mov	r0, r3
 8006022:	f000 fb9f 	bl	8006764 <RCCEx_PLLSAI2_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800602a:	e003      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	74fb      	strb	r3, [r7, #19]
      break;
 8006030:	e000      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006034:	7cfb      	ldrb	r3, [r7, #19]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800603a:	4b52      	ldr	r3, [pc, #328]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800603c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006040:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006048:	494e      	ldr	r1, [pc, #312]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006050:	e001      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006052:	7cfb      	ldrb	r3, [r7, #19]
 8006054:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 809f 	beq.w	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006064:	2300      	movs	r3, #0
 8006066:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006068:	4b46      	ldr	r3, [pc, #280]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800606a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006078:	2300      	movs	r3, #0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00d      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800607e:	4b41      	ldr	r3, [pc, #260]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006082:	4a40      	ldr	r2, [pc, #256]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006088:	6593      	str	r3, [r2, #88]	@ 0x58
 800608a:	4b3e      	ldr	r3, [pc, #248]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006092:	60bb      	str	r3, [r7, #8]
 8006094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006096:	2301      	movs	r3, #1
 8006098:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800609a:	4b3b      	ldr	r3, [pc, #236]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a3a      	ldr	r2, [pc, #232]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80060a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060a6:	f7fb fb67 	bl	8001778 <HAL_GetTick>
 80060aa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060ac:	e009      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ae:	f7fb fb63 	bl	8001778 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d902      	bls.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	74fb      	strb	r3, [r7, #19]
        break;
 80060c0:	e005      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060c2:	4b31      	ldr	r3, [pc, #196]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0ef      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80060ce:	7cfb      	ldrb	r3, [r7, #19]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d15b      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060de:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d01f      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d019      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060f2:	4b24      	ldr	r3, [pc, #144]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060fe:	4b21      	ldr	r3, [pc, #132]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006104:	4a1f      	ldr	r2, [pc, #124]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800610a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800610e:	4b1d      	ldr	r3, [pc, #116]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006114:	4a1b      	ldr	r2, [pc, #108]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800611a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800611e:	4a19      	ldr	r2, [pc, #100]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d016      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006130:	f7fb fb22 	bl	8001778 <HAL_GetTick>
 8006134:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006136:	e00b      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006138:	f7fb fb1e 	bl	8001778 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006146:	4293      	cmp	r3, r2
 8006148:	d902      	bls.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	74fb      	strb	r3, [r7, #19]
            break;
 800614e:	e006      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006150:	4b0c      	ldr	r3, [pc, #48]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0ec      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800615e:	7cfb      	ldrb	r3, [r7, #19]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10c      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006164:	4b07      	ldr	r3, [pc, #28]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006174:	4903      	ldr	r1, [pc, #12]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800617c:	e008      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800617e:	7cfb      	ldrb	r3, [r7, #19]
 8006180:	74bb      	strb	r3, [r7, #18]
 8006182:	e005      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006184:	40021000 	.word	0x40021000
 8006188:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618c:	7cfb      	ldrb	r3, [r7, #19]
 800618e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006190:	7c7b      	ldrb	r3, [r7, #17]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d105      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006196:	4ba0      	ldr	r3, [pc, #640]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800619a:	4a9f      	ldr	r2, [pc, #636]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800619c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061ae:	4b9a      	ldr	r3, [pc, #616]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b4:	f023 0203 	bic.w	r2, r3, #3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061bc:	4996      	ldr	r1, [pc, #600]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061d0:	4b91      	ldr	r3, [pc, #580]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d6:	f023 020c 	bic.w	r2, r3, #12
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061de:	498e      	ldr	r1, [pc, #568]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061f2:	4b89      	ldr	r3, [pc, #548]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006200:	4985      	ldr	r1, [pc, #532]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006202:	4313      	orrs	r3, r2
 8006204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006214:	4b80      	ldr	r3, [pc, #512]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006222:	497d      	ldr	r1, [pc, #500]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0310 	and.w	r3, r3, #16
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006236:	4b78      	ldr	r3, [pc, #480]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800623c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006244:	4974      	ldr	r1, [pc, #464]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006258:	4b6f      	ldr	r3, [pc, #444]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800625e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006266:	496c      	ldr	r1, [pc, #432]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006268:	4313      	orrs	r3, r2
 800626a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800627a:	4b67      	ldr	r3, [pc, #412]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006280:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006288:	4963      	ldr	r1, [pc, #396]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800628a:	4313      	orrs	r3, r2
 800628c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800629c:	4b5e      	ldr	r3, [pc, #376]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062aa:	495b      	ldr	r1, [pc, #364]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062be:	4b56      	ldr	r3, [pc, #344]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062cc:	4952      	ldr	r1, [pc, #328]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00a      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062e0:	4b4d      	ldr	r3, [pc, #308]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ee:	494a      	ldr	r1, [pc, #296]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006302:	4b45      	ldr	r3, [pc, #276]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006308:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006310:	4941      	ldr	r1, [pc, #260]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006324:	4b3c      	ldr	r3, [pc, #240]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006326:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800632a:	f023 0203 	bic.w	r2, r3, #3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006332:	4939      	ldr	r1, [pc, #228]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006334:	4313      	orrs	r3, r2
 8006336:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d028      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006346:	4b34      	ldr	r3, [pc, #208]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800634c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006354:	4930      	ldr	r1, [pc, #192]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006356:	4313      	orrs	r3, r2
 8006358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006360:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006364:	d106      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006366:	4b2c      	ldr	r3, [pc, #176]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	4a2b      	ldr	r2, [pc, #172]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800636c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006370:	60d3      	str	r3, [r2, #12]
 8006372:	e011      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006378:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800637c:	d10c      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3304      	adds	r3, #4
 8006382:	2101      	movs	r1, #1
 8006384:	4618      	mov	r0, r3
 8006386:	f000 f8f9 	bl	800657c <RCCEx_PLLSAI1_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800638e:	7cfb      	ldrb	r3, [r7, #19]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006394:	7cfb      	ldrb	r3, [r7, #19]
 8006396:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d04d      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063ac:	d108      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80063ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063b4:	4a18      	ldr	r2, [pc, #96]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80063ba:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80063be:	e012      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80063c0:	4b15      	ldr	r3, [pc, #84]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063c6:	4a14      	ldr	r2, [pc, #80]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063cc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80063d0:	4b11      	ldr	r3, [pc, #68]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063de:	490e      	ldr	r1, [pc, #56]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063ee:	d106      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063f0:	4b09      	ldr	r3, [pc, #36]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	4a08      	ldr	r2, [pc, #32]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063fa:	60d3      	str	r3, [r2, #12]
 80063fc:	e020      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006402:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006406:	d109      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006408:	4b03      	ldr	r3, [pc, #12]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	4a02      	ldr	r2, [pc, #8]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800640e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006412:	60d3      	str	r3, [r2, #12]
 8006414:	e014      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006416:	bf00      	nop
 8006418:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006420:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006424:	d10c      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3304      	adds	r3, #4
 800642a:	2101      	movs	r1, #1
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f8a5 	bl	800657c <RCCEx_PLLSAI1_Config>
 8006432:	4603      	mov	r3, r0
 8006434:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006436:	7cfb      	ldrb	r3, [r7, #19]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800643c:	7cfb      	ldrb	r3, [r7, #19]
 800643e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d028      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800644c:	4b4a      	ldr	r3, [pc, #296]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800644e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006452:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800645a:	4947      	ldr	r1, [pc, #284]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800645c:	4313      	orrs	r3, r2
 800645e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006466:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800646a:	d106      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800646c:	4b42      	ldr	r3, [pc, #264]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	4a41      	ldr	r2, [pc, #260]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006472:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006476:	60d3      	str	r3, [r2, #12]
 8006478:	e011      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800647e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006482:	d10c      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3304      	adds	r3, #4
 8006488:	2101      	movs	r1, #1
 800648a:	4618      	mov	r0, r3
 800648c:	f000 f876 	bl	800657c <RCCEx_PLLSAI1_Config>
 8006490:	4603      	mov	r3, r0
 8006492:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006494:	7cfb      	ldrb	r3, [r7, #19]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800649a:	7cfb      	ldrb	r3, [r7, #19]
 800649c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01e      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064aa:	4b33      	ldr	r3, [pc, #204]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064ba:	492f      	ldr	r1, [pc, #188]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064cc:	d10c      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3304      	adds	r3, #4
 80064d2:	2102      	movs	r1, #2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 f851 	bl	800657c <RCCEx_PLLSAI1_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064de:	7cfb      	ldrb	r3, [r7, #19]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80064e4:	7cfb      	ldrb	r3, [r7, #19]
 80064e6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064f4:	4b20      	ldr	r3, [pc, #128]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064fa:	f023 0204 	bic.w	r2, r3, #4
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006504:	491c      	ldr	r1, [pc, #112]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006506:	4313      	orrs	r3, r2
 8006508:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006518:	4b17      	ldr	r3, [pc, #92]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800651a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800651e:	f023 0218 	bic.w	r2, r3, #24
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006528:	4913      	ldr	r1, [pc, #76]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d017      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800653c:	4b0e      	ldr	r3, [pc, #56]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800653e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006542:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800654c:	490a      	ldr	r1, [pc, #40]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800654e:	4313      	orrs	r3, r2
 8006550:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800655a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800655e:	d105      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006560:	4b05      	ldr	r3, [pc, #20]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	4a04      	ldr	r2, [pc, #16]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006566:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800656a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800656c:	7cbb      	ldrb	r3, [r7, #18]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	40021000 	.word	0x40021000

0800657c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800658a:	4b72      	ldr	r3, [pc, #456]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00e      	beq.n	80065b4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006596:	4b6f      	ldr	r3, [pc, #444]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f003 0203 	and.w	r2, r3, #3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d103      	bne.n	80065ae <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
       ||
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d142      	bne.n	8006634 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]
 80065b2:	e03f      	b.n	8006634 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	d018      	beq.n	80065ee <RCCEx_PLLSAI1_Config+0x72>
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d825      	bhi.n	800660c <RCCEx_PLLSAI1_Config+0x90>
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d002      	beq.n	80065ca <RCCEx_PLLSAI1_Config+0x4e>
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d009      	beq.n	80065dc <RCCEx_PLLSAI1_Config+0x60>
 80065c8:	e020      	b.n	800660c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065ca:	4b62      	ldr	r3, [pc, #392]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d11d      	bne.n	8006612 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065da:	e01a      	b.n	8006612 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065dc:	4b5d      	ldr	r3, [pc, #372]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d116      	bne.n	8006616 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065ec:	e013      	b.n	8006616 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065ee:	4b59      	ldr	r3, [pc, #356]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10f      	bne.n	800661a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065fa:	4b56      	ldr	r3, [pc, #344]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800660a:	e006      	b.n	800661a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	73fb      	strb	r3, [r7, #15]
      break;
 8006610:	e004      	b.n	800661c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006612:	bf00      	nop
 8006614:	e002      	b.n	800661c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800661a:	bf00      	nop
    }

    if(status == HAL_OK)
 800661c:	7bfb      	ldrb	r3, [r7, #15]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d108      	bne.n	8006634 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006622:	4b4c      	ldr	r3, [pc, #304]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f023 0203 	bic.w	r2, r3, #3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4949      	ldr	r1, [pc, #292]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006630:	4313      	orrs	r3, r2
 8006632:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 8086 	bne.w	8006748 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800663c:	4b45      	ldr	r3, [pc, #276]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a44      	ldr	r2, [pc, #272]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006642:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006648:	f7fb f896 	bl	8001778 <HAL_GetTick>
 800664c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800664e:	e009      	b.n	8006664 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006650:	f7fb f892 	bl	8001778 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d902      	bls.n	8006664 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	73fb      	strb	r3, [r7, #15]
        break;
 8006662:	e005      	b.n	8006670 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006664:	4b3b      	ldr	r3, [pc, #236]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1ef      	bne.n	8006650 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d168      	bne.n	8006748 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d113      	bne.n	80066a4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800667c:	4b35      	ldr	r3, [pc, #212]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	4b35      	ldr	r3, [pc, #212]	@ (8006758 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006682:	4013      	ands	r3, r2
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6892      	ldr	r2, [r2, #8]
 8006688:	0211      	lsls	r1, r2, #8
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	68d2      	ldr	r2, [r2, #12]
 800668e:	06d2      	lsls	r2, r2, #27
 8006690:	4311      	orrs	r1, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6852      	ldr	r2, [r2, #4]
 8006696:	3a01      	subs	r2, #1
 8006698:	0112      	lsls	r2, r2, #4
 800669a:	430a      	orrs	r2, r1
 800669c:	492d      	ldr	r1, [pc, #180]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	610b      	str	r3, [r1, #16]
 80066a2:	e02d      	b.n	8006700 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d115      	bne.n	80066d6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066ac:	691a      	ldr	r2, [r3, #16]
 80066ae:	4b2b      	ldr	r3, [pc, #172]	@ (800675c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6892      	ldr	r2, [r2, #8]
 80066b6:	0211      	lsls	r1, r2, #8
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6912      	ldr	r2, [r2, #16]
 80066bc:	0852      	lsrs	r2, r2, #1
 80066be:	3a01      	subs	r2, #1
 80066c0:	0552      	lsls	r2, r2, #21
 80066c2:	4311      	orrs	r1, r2
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6852      	ldr	r2, [r2, #4]
 80066c8:	3a01      	subs	r2, #1
 80066ca:	0112      	lsls	r2, r2, #4
 80066cc:	430a      	orrs	r2, r1
 80066ce:	4921      	ldr	r1, [pc, #132]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	610b      	str	r3, [r1, #16]
 80066d4:	e014      	b.n	8006700 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066d8:	691a      	ldr	r2, [r3, #16]
 80066da:	4b21      	ldr	r3, [pc, #132]	@ (8006760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066dc:	4013      	ands	r3, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6892      	ldr	r2, [r2, #8]
 80066e2:	0211      	lsls	r1, r2, #8
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6952      	ldr	r2, [r2, #20]
 80066e8:	0852      	lsrs	r2, r2, #1
 80066ea:	3a01      	subs	r2, #1
 80066ec:	0652      	lsls	r2, r2, #25
 80066ee:	4311      	orrs	r1, r2
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6852      	ldr	r2, [r2, #4]
 80066f4:	3a01      	subs	r2, #1
 80066f6:	0112      	lsls	r2, r2, #4
 80066f8:	430a      	orrs	r2, r1
 80066fa:	4916      	ldr	r1, [pc, #88]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006700:	4b14      	ldr	r3, [pc, #80]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a13      	ldr	r2, [pc, #76]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006706:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800670a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670c:	f7fb f834 	bl	8001778 <HAL_GetTick>
 8006710:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006712:	e009      	b.n	8006728 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006714:	f7fb f830 	bl	8001778 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d902      	bls.n	8006728 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	73fb      	strb	r3, [r7, #15]
          break;
 8006726:	e005      	b.n	8006734 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006728:	4b0a      	ldr	r3, [pc, #40]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0ef      	beq.n	8006714 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800673a:	4b06      	ldr	r3, [pc, #24]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800673c:	691a      	ldr	r2, [r3, #16]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	4904      	ldr	r1, [pc, #16]	@ (8006754 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006744:	4313      	orrs	r3, r2
 8006746:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40021000 	.word	0x40021000
 8006758:	07ff800f 	.word	0x07ff800f
 800675c:	ff9f800f 	.word	0xff9f800f
 8006760:	f9ff800f 	.word	0xf9ff800f

08006764 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006772:	4b72      	ldr	r3, [pc, #456]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00e      	beq.n	800679c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800677e:	4b6f      	ldr	r3, [pc, #444]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f003 0203 	and.w	r2, r3, #3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d103      	bne.n	8006796 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
       ||
 8006792:	2b00      	cmp	r3, #0
 8006794:	d142      	bne.n	800681c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	73fb      	strb	r3, [r7, #15]
 800679a:	e03f      	b.n	800681c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d018      	beq.n	80067d6 <RCCEx_PLLSAI2_Config+0x72>
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d825      	bhi.n	80067f4 <RCCEx_PLLSAI2_Config+0x90>
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d002      	beq.n	80067b2 <RCCEx_PLLSAI2_Config+0x4e>
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d009      	beq.n	80067c4 <RCCEx_PLLSAI2_Config+0x60>
 80067b0:	e020      	b.n	80067f4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067b2:	4b62      	ldr	r3, [pc, #392]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d11d      	bne.n	80067fa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067c2:	e01a      	b.n	80067fa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067c4:	4b5d      	ldr	r3, [pc, #372]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d116      	bne.n	80067fe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067d4:	e013      	b.n	80067fe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067d6:	4b59      	ldr	r3, [pc, #356]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10f      	bne.n	8006802 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067e2:	4b56      	ldr	r3, [pc, #344]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067f2:	e006      	b.n	8006802 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	73fb      	strb	r3, [r7, #15]
      break;
 80067f8:	e004      	b.n	8006804 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80067fa:	bf00      	nop
 80067fc:	e002      	b.n	8006804 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80067fe:	bf00      	nop
 8006800:	e000      	b.n	8006804 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006802:	bf00      	nop
    }

    if(status == HAL_OK)
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d108      	bne.n	800681c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800680a:	4b4c      	ldr	r3, [pc, #304]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f023 0203 	bic.w	r2, r3, #3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4949      	ldr	r1, [pc, #292]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006818:	4313      	orrs	r3, r2
 800681a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 8086 	bne.w	8006930 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006824:	4b45      	ldr	r3, [pc, #276]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a44      	ldr	r2, [pc, #272]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 800682a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800682e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006830:	f7fa ffa2 	bl	8001778 <HAL_GetTick>
 8006834:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006836:	e009      	b.n	800684c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006838:	f7fa ff9e 	bl	8001778 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d902      	bls.n	800684c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	73fb      	strb	r3, [r7, #15]
        break;
 800684a:	e005      	b.n	8006858 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800684c:	4b3b      	ldr	r3, [pc, #236]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1ef      	bne.n	8006838 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d168      	bne.n	8006930 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d113      	bne.n	800688c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006864:	4b35      	ldr	r3, [pc, #212]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006866:	695a      	ldr	r2, [r3, #20]
 8006868:	4b35      	ldr	r3, [pc, #212]	@ (8006940 <RCCEx_PLLSAI2_Config+0x1dc>)
 800686a:	4013      	ands	r3, r2
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6892      	ldr	r2, [r2, #8]
 8006870:	0211      	lsls	r1, r2, #8
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	68d2      	ldr	r2, [r2, #12]
 8006876:	06d2      	lsls	r2, r2, #27
 8006878:	4311      	orrs	r1, r2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6852      	ldr	r2, [r2, #4]
 800687e:	3a01      	subs	r2, #1
 8006880:	0112      	lsls	r2, r2, #4
 8006882:	430a      	orrs	r2, r1
 8006884:	492d      	ldr	r1, [pc, #180]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006886:	4313      	orrs	r3, r2
 8006888:	614b      	str	r3, [r1, #20]
 800688a:	e02d      	b.n	80068e8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d115      	bne.n	80068be <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006892:	4b2a      	ldr	r3, [pc, #168]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006894:	695a      	ldr	r2, [r3, #20]
 8006896:	4b2b      	ldr	r3, [pc, #172]	@ (8006944 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006898:	4013      	ands	r3, r2
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6892      	ldr	r2, [r2, #8]
 800689e:	0211      	lsls	r1, r2, #8
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6912      	ldr	r2, [r2, #16]
 80068a4:	0852      	lsrs	r2, r2, #1
 80068a6:	3a01      	subs	r2, #1
 80068a8:	0552      	lsls	r2, r2, #21
 80068aa:	4311      	orrs	r1, r2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6852      	ldr	r2, [r2, #4]
 80068b0:	3a01      	subs	r2, #1
 80068b2:	0112      	lsls	r2, r2, #4
 80068b4:	430a      	orrs	r2, r1
 80068b6:	4921      	ldr	r1, [pc, #132]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	614b      	str	r3, [r1, #20]
 80068bc:	e014      	b.n	80068e8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068be:	4b1f      	ldr	r3, [pc, #124]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 80068c0:	695a      	ldr	r2, [r3, #20]
 80068c2:	4b21      	ldr	r3, [pc, #132]	@ (8006948 <RCCEx_PLLSAI2_Config+0x1e4>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6892      	ldr	r2, [r2, #8]
 80068ca:	0211      	lsls	r1, r2, #8
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6952      	ldr	r2, [r2, #20]
 80068d0:	0852      	lsrs	r2, r2, #1
 80068d2:	3a01      	subs	r2, #1
 80068d4:	0652      	lsls	r2, r2, #25
 80068d6:	4311      	orrs	r1, r2
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6852      	ldr	r2, [r2, #4]
 80068dc:	3a01      	subs	r2, #1
 80068de:	0112      	lsls	r2, r2, #4
 80068e0:	430a      	orrs	r2, r1
 80068e2:	4916      	ldr	r1, [pc, #88]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80068e8:	4b14      	ldr	r3, [pc, #80]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a13      	ldr	r2, [pc, #76]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 80068ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f4:	f7fa ff40 	bl	8001778 <HAL_GetTick>
 80068f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80068fa:	e009      	b.n	8006910 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068fc:	f7fa ff3c 	bl	8001778 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d902      	bls.n	8006910 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	73fb      	strb	r3, [r7, #15]
          break;
 800690e:	e005      	b.n	800691c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006910:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0ef      	beq.n	80068fc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006922:	4b06      	ldr	r3, [pc, #24]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006924:	695a      	ldr	r2, [r3, #20]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	4904      	ldr	r1, [pc, #16]	@ (800693c <RCCEx_PLLSAI2_Config+0x1d8>)
 800692c:	4313      	orrs	r3, r2
 800692e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006930:	7bfb      	ldrb	r3, [r7, #15]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	40021000 	.word	0x40021000
 8006940:	07ff800f 	.word	0x07ff800f
 8006944:	ff9f800f 	.word	0xff9f800f
 8006948:	f9ff800f 	.word	0xf9ff800f

0800694c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e049      	b.n	80069f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fa fc76 	bl	8001264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3304      	adds	r3, #4
 8006988:	4619      	mov	r1, r3
 800698a:	4610      	mov	r0, r2
 800698c:	f000 fb02 	bl	8006f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d001      	beq.n	8006a14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e047      	b.n	8006aa4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a23      	ldr	r2, [pc, #140]	@ (8006ab0 <HAL_TIM_Base_Start+0xb4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d01d      	beq.n	8006a62 <HAL_TIM_Base_Start+0x66>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a2e:	d018      	beq.n	8006a62 <HAL_TIM_Base_Start+0x66>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab4 <HAL_TIM_Base_Start+0xb8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d013      	beq.n	8006a62 <HAL_TIM_Base_Start+0x66>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab8 <HAL_TIM_Base_Start+0xbc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00e      	beq.n	8006a62 <HAL_TIM_Base_Start+0x66>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a1c      	ldr	r2, [pc, #112]	@ (8006abc <HAL_TIM_Base_Start+0xc0>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d009      	beq.n	8006a62 <HAL_TIM_Base_Start+0x66>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac0 <HAL_TIM_Base_Start+0xc4>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d004      	beq.n	8006a62 <HAL_TIM_Base_Start+0x66>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a19      	ldr	r2, [pc, #100]	@ (8006ac4 <HAL_TIM_Base_Start+0xc8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d115      	bne.n	8006a8e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	4b17      	ldr	r3, [pc, #92]	@ (8006ac8 <HAL_TIM_Base_Start+0xcc>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b06      	cmp	r3, #6
 8006a72:	d015      	beq.n	8006aa0 <HAL_TIM_Base_Start+0xa4>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a7a:	d011      	beq.n	8006aa0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8c:	e008      	b.n	8006aa0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	e000      	b.n	8006aa2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	40012c00 	.word	0x40012c00
 8006ab4:	40000400 	.word	0x40000400
 8006ab8:	40000800 	.word	0x40000800
 8006abc:	40000c00 	.word	0x40000c00
 8006ac0:	40013400 	.word	0x40013400
 8006ac4:	40014000 	.word	0x40014000
 8006ac8:	00010007 	.word	0x00010007

08006acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d001      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e04f      	b.n	8006b84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a23      	ldr	r2, [pc, #140]	@ (8006b90 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d01d      	beq.n	8006b42 <HAL_TIM_Base_Start_IT+0x76>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b0e:	d018      	beq.n	8006b42 <HAL_TIM_Base_Start_IT+0x76>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a1f      	ldr	r2, [pc, #124]	@ (8006b94 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d013      	beq.n	8006b42 <HAL_TIM_Base_Start_IT+0x76>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006b98 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00e      	beq.n	8006b42 <HAL_TIM_Base_Start_IT+0x76>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a1c      	ldr	r2, [pc, #112]	@ (8006b9c <HAL_TIM_Base_Start_IT+0xd0>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d009      	beq.n	8006b42 <HAL_TIM_Base_Start_IT+0x76>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1b      	ldr	r2, [pc, #108]	@ (8006ba0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d004      	beq.n	8006b42 <HAL_TIM_Base_Start_IT+0x76>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a19      	ldr	r2, [pc, #100]	@ (8006ba4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d115      	bne.n	8006b6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	4b17      	ldr	r3, [pc, #92]	@ (8006ba8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b06      	cmp	r3, #6
 8006b52:	d015      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0xb4>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b5a:	d011      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0201 	orr.w	r2, r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b6c:	e008      	b.n	8006b80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f042 0201 	orr.w	r2, r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e000      	b.n	8006b82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	40012c00 	.word	0x40012c00
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40000800 	.word	0x40000800
 8006b9c:	40000c00 	.word	0x40000c00
 8006ba0:	40013400 	.word	0x40013400
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	00010007 	.word	0x00010007

08006bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d020      	beq.n	8006c10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01b      	beq.n	8006c10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0202 	mvn.w	r2, #2
 8006be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f9ad 	bl	8006f56 <HAL_TIM_IC_CaptureCallback>
 8006bfc:	e005      	b.n	8006c0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f99f 	bl	8006f42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f9b0 	bl	8006f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d020      	beq.n	8006c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01b      	beq.n	8006c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0204 	mvn.w	r2, #4
 8006c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2202      	movs	r2, #2
 8006c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f987 	bl	8006f56 <HAL_TIM_IC_CaptureCallback>
 8006c48:	e005      	b.n	8006c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f979 	bl	8006f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f98a 	bl	8006f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f003 0308 	and.w	r3, r3, #8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d020      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01b      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0208 	mvn.w	r2, #8
 8006c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2204      	movs	r2, #4
 8006c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f961 	bl	8006f56 <HAL_TIM_IC_CaptureCallback>
 8006c94:	e005      	b.n	8006ca2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f953 	bl	8006f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f964 	bl	8006f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f003 0310 	and.w	r3, r3, #16
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d020      	beq.n	8006cf4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f003 0310 	and.w	r3, r3, #16
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d01b      	beq.n	8006cf4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0210 	mvn.w	r2, #16
 8006cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2208      	movs	r2, #8
 8006cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f93b 	bl	8006f56 <HAL_TIM_IC_CaptureCallback>
 8006ce0:	e005      	b.n	8006cee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f92d 	bl	8006f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f93e 	bl	8006f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00c      	beq.n	8006d18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d007      	beq.n	8006d18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f06f 0201 	mvn.w	r2, #1
 8006d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7f9 ff32 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00c      	beq.n	8006d3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d007      	beq.n	8006d3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 faf2 	bl	8007320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00c      	beq.n	8006d60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d007      	beq.n	8006d60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 faea 	bl	8007334 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00c      	beq.n	8006d84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f8fd 	bl	8006f7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00c      	beq.n	8006da8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d007      	beq.n	8006da8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0220 	mvn.w	r2, #32
 8006da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fab2 	bl	800730c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006da8:	bf00      	nop
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_TIM_ConfigClockSource+0x1c>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e0b6      	b.n	8006f3a <HAL_TIM_ConfigClockSource+0x18a>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006df6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e08:	d03e      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0xd8>
 8006e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e0e:	f200 8087 	bhi.w	8006f20 <HAL_TIM_ConfigClockSource+0x170>
 8006e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e16:	f000 8086 	beq.w	8006f26 <HAL_TIM_ConfigClockSource+0x176>
 8006e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e1e:	d87f      	bhi.n	8006f20 <HAL_TIM_ConfigClockSource+0x170>
 8006e20:	2b70      	cmp	r3, #112	@ 0x70
 8006e22:	d01a      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0xaa>
 8006e24:	2b70      	cmp	r3, #112	@ 0x70
 8006e26:	d87b      	bhi.n	8006f20 <HAL_TIM_ConfigClockSource+0x170>
 8006e28:	2b60      	cmp	r3, #96	@ 0x60
 8006e2a:	d050      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x11e>
 8006e2c:	2b60      	cmp	r3, #96	@ 0x60
 8006e2e:	d877      	bhi.n	8006f20 <HAL_TIM_ConfigClockSource+0x170>
 8006e30:	2b50      	cmp	r3, #80	@ 0x50
 8006e32:	d03c      	beq.n	8006eae <HAL_TIM_ConfigClockSource+0xfe>
 8006e34:	2b50      	cmp	r3, #80	@ 0x50
 8006e36:	d873      	bhi.n	8006f20 <HAL_TIM_ConfigClockSource+0x170>
 8006e38:	2b40      	cmp	r3, #64	@ 0x40
 8006e3a:	d058      	beq.n	8006eee <HAL_TIM_ConfigClockSource+0x13e>
 8006e3c:	2b40      	cmp	r3, #64	@ 0x40
 8006e3e:	d86f      	bhi.n	8006f20 <HAL_TIM_ConfigClockSource+0x170>
 8006e40:	2b30      	cmp	r3, #48	@ 0x30
 8006e42:	d064      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x15e>
 8006e44:	2b30      	cmp	r3, #48	@ 0x30
 8006e46:	d86b      	bhi.n	8006f20 <HAL_TIM_ConfigClockSource+0x170>
 8006e48:	2b20      	cmp	r3, #32
 8006e4a:	d060      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x15e>
 8006e4c:	2b20      	cmp	r3, #32
 8006e4e:	d867      	bhi.n	8006f20 <HAL_TIM_ConfigClockSource+0x170>
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d05c      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x15e>
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d05a      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x15e>
 8006e58:	e062      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e6a:	f000 f9a7 	bl	80071bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	609a      	str	r2, [r3, #8]
      break;
 8006e86:	e04f      	b.n	8006f28 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e98:	f000 f990 	bl	80071bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689a      	ldr	r2, [r3, #8]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006eaa:	609a      	str	r2, [r3, #8]
      break;
 8006eac:	e03c      	b.n	8006f28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f000 f904 	bl	80070c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2150      	movs	r1, #80	@ 0x50
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 f95d 	bl	8007186 <TIM_ITRx_SetConfig>
      break;
 8006ecc:	e02c      	b.n	8006f28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eda:	461a      	mov	r2, r3
 8006edc:	f000 f923 	bl	8007126 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2160      	movs	r1, #96	@ 0x60
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 f94d 	bl	8007186 <TIM_ITRx_SetConfig>
      break;
 8006eec:	e01c      	b.n	8006f28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efa:	461a      	mov	r2, r3
 8006efc:	f000 f8e4 	bl	80070c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2140      	movs	r1, #64	@ 0x40
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 f93d 	bl	8007186 <TIM_ITRx_SetConfig>
      break;
 8006f0c:	e00c      	b.n	8006f28 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4619      	mov	r1, r3
 8006f18:	4610      	mov	r0, r2
 8006f1a:	f000 f934 	bl	8007186 <TIM_ITRx_SetConfig>
      break;
 8006f1e:	e003      	b.n	8006f28 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	73fb      	strb	r3, [r7, #15]
      break;
 8006f24:	e000      	b.n	8006f28 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006f26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
	...

08006f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a40      	ldr	r2, [pc, #256]	@ (80070a8 <TIM_Base_SetConfig+0x114>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d013      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fb2:	d00f      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a3d      	ldr	r2, [pc, #244]	@ (80070ac <TIM_Base_SetConfig+0x118>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00b      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a3c      	ldr	r2, [pc, #240]	@ (80070b0 <TIM_Base_SetConfig+0x11c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d007      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a3b      	ldr	r2, [pc, #236]	@ (80070b4 <TIM_Base_SetConfig+0x120>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a3a      	ldr	r2, [pc, #232]	@ (80070b8 <TIM_Base_SetConfig+0x124>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d108      	bne.n	8006fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a2f      	ldr	r2, [pc, #188]	@ (80070a8 <TIM_Base_SetConfig+0x114>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d01f      	beq.n	800702e <TIM_Base_SetConfig+0x9a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ff4:	d01b      	beq.n	800702e <TIM_Base_SetConfig+0x9a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80070ac <TIM_Base_SetConfig+0x118>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d017      	beq.n	800702e <TIM_Base_SetConfig+0x9a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a2b      	ldr	r2, [pc, #172]	@ (80070b0 <TIM_Base_SetConfig+0x11c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d013      	beq.n	800702e <TIM_Base_SetConfig+0x9a>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a2a      	ldr	r2, [pc, #168]	@ (80070b4 <TIM_Base_SetConfig+0x120>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00f      	beq.n	800702e <TIM_Base_SetConfig+0x9a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a29      	ldr	r2, [pc, #164]	@ (80070b8 <TIM_Base_SetConfig+0x124>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d00b      	beq.n	800702e <TIM_Base_SetConfig+0x9a>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a28      	ldr	r2, [pc, #160]	@ (80070bc <TIM_Base_SetConfig+0x128>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d007      	beq.n	800702e <TIM_Base_SetConfig+0x9a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a27      	ldr	r2, [pc, #156]	@ (80070c0 <TIM_Base_SetConfig+0x12c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d003      	beq.n	800702e <TIM_Base_SetConfig+0x9a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a26      	ldr	r2, [pc, #152]	@ (80070c4 <TIM_Base_SetConfig+0x130>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d108      	bne.n	8007040 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	4313      	orrs	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a10      	ldr	r2, [pc, #64]	@ (80070a8 <TIM_Base_SetConfig+0x114>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d00f      	beq.n	800708c <TIM_Base_SetConfig+0xf8>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a12      	ldr	r2, [pc, #72]	@ (80070b8 <TIM_Base_SetConfig+0x124>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00b      	beq.n	800708c <TIM_Base_SetConfig+0xf8>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a11      	ldr	r2, [pc, #68]	@ (80070bc <TIM_Base_SetConfig+0x128>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d007      	beq.n	800708c <TIM_Base_SetConfig+0xf8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a10      	ldr	r2, [pc, #64]	@ (80070c0 <TIM_Base_SetConfig+0x12c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_Base_SetConfig+0xf8>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a0f      	ldr	r2, [pc, #60]	@ (80070c4 <TIM_Base_SetConfig+0x130>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d103      	bne.n	8007094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	691a      	ldr	r2, [r3, #16]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	615a      	str	r2, [r3, #20]
}
 800709a:	bf00      	nop
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	40012c00 	.word	0x40012c00
 80070ac:	40000400 	.word	0x40000400
 80070b0:	40000800 	.word	0x40000800
 80070b4:	40000c00 	.word	0x40000c00
 80070b8:	40013400 	.word	0x40013400
 80070bc:	40014000 	.word	0x40014000
 80070c0:	40014400 	.word	0x40014400
 80070c4:	40014800 	.word	0x40014800

080070c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	f023 0201 	bic.w	r2, r3, #1
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f023 030a 	bic.w	r3, r3, #10
 8007104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	4313      	orrs	r3, r2
 800710c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	621a      	str	r2, [r3, #32]
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007126:	b480      	push	{r7}
 8007128:	b087      	sub	sp, #28
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	f023 0210 	bic.w	r2, r3, #16
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007150:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	031b      	lsls	r3, r3, #12
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	4313      	orrs	r3, r2
 800715a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007162:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007186:	b480      	push	{r7}
 8007188:	b085      	sub	sp, #20
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800719c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	f043 0307 	orr.w	r3, r3, #7
 80071a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	609a      	str	r2, [r3, #8]
}
 80071b0:	bf00      	nop
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	021a      	lsls	r2, r3, #8
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	431a      	orrs	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	609a      	str	r2, [r3, #8]
}
 80071f0:	bf00      	nop
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800720c:	2b01      	cmp	r3, #1
 800720e:	d101      	bne.n	8007214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007210:	2302      	movs	r3, #2
 8007212:	e068      	b.n	80072e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a2e      	ldr	r2, [pc, #184]	@ (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d004      	beq.n	8007248 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a2d      	ldr	r2, [pc, #180]	@ (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d108      	bne.n	800725a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800724e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a1e      	ldr	r2, [pc, #120]	@ (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d01d      	beq.n	80072ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007286:	d018      	beq.n	80072ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1b      	ldr	r2, [pc, #108]	@ (80072fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d013      	beq.n	80072ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a1a      	ldr	r2, [pc, #104]	@ (8007300 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d00e      	beq.n	80072ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a18      	ldr	r2, [pc, #96]	@ (8007304 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d009      	beq.n	80072ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a13      	ldr	r2, [pc, #76]	@ (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d004      	beq.n	80072ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a14      	ldr	r2, [pc, #80]	@ (8007308 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d10c      	bne.n	80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40012c00 	.word	0x40012c00
 80072f8:	40013400 	.word	0x40013400
 80072fc:	40000400 	.word	0x40000400
 8007300:	40000800 	.word	0x40000800
 8007304:	40000c00 	.word	0x40000c00
 8007308:	40014000 	.word	0x40014000

0800730c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e042      	b.n	80073e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007360:	2b00      	cmp	r3, #0
 8007362:	d106      	bne.n	8007372 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7fa f867 	bl	8001440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2224      	movs	r2, #36	@ 0x24
 8007376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0201 	bic.w	r2, r2, #1
 8007388:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fe68 	bl	8008068 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fb69 	bl	8007a70 <UART_SetConfig>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e01b      	b.n	80073e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0201 	orr.w	r2, r2, #1
 80073d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fee7 	bl	80081ac <UART_CheckIdleState>
 80073de:	4603      	mov	r3, r0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b0ba      	sub	sp, #232	@ 0xe8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800740e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007412:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007416:	4013      	ands	r3, r2
 8007418:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800741c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007420:	2b00      	cmp	r3, #0
 8007422:	d11b      	bne.n	800745c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d015      	beq.n	800745c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007434:	f003 0320 	and.w	r3, r3, #32
 8007438:	2b00      	cmp	r3, #0
 800743a:	d105      	bne.n	8007448 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800743c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d009      	beq.n	800745c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 82e3 	beq.w	8007a18 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
      }
      return;
 800745a:	e2dd      	b.n	8007a18 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800745c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 8123 	beq.w	80076ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007466:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800746a:	4b8d      	ldr	r3, [pc, #564]	@ (80076a0 <HAL_UART_IRQHandler+0x2b8>)
 800746c:	4013      	ands	r3, r2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007472:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007476:	4b8b      	ldr	r3, [pc, #556]	@ (80076a4 <HAL_UART_IRQHandler+0x2bc>)
 8007478:	4013      	ands	r3, r2
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 8116 	beq.w	80076ac <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	d011      	beq.n	80074b0 <HAL_UART_IRQHandler+0xc8>
 800748c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00b      	beq.n	80074b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2201      	movs	r2, #1
 800749e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a6:	f043 0201 	orr.w	r2, r3, #1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074b4:	f003 0302 	and.w	r3, r3, #2
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d011      	beq.n	80074e0 <HAL_UART_IRQHandler+0xf8>
 80074bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2202      	movs	r2, #2
 80074ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d6:	f043 0204 	orr.w	r2, r3, #4
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d011      	beq.n	8007510 <HAL_UART_IRQHandler+0x128>
 80074ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00b      	beq.n	8007510 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2204      	movs	r2, #4
 80074fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007506:	f043 0202 	orr.w	r2, r3, #2
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b00      	cmp	r3, #0
 800751a:	d017      	beq.n	800754c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800751c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007520:	f003 0320 	and.w	r3, r3, #32
 8007524:	2b00      	cmp	r3, #0
 8007526:	d105      	bne.n	8007534 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007528:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800752c:	4b5c      	ldr	r3, [pc, #368]	@ (80076a0 <HAL_UART_IRQHandler+0x2b8>)
 800752e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00b      	beq.n	800754c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2208      	movs	r2, #8
 800753a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007542:	f043 0208 	orr.w	r2, r3, #8
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800754c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007550:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007554:	2b00      	cmp	r3, #0
 8007556:	d012      	beq.n	800757e <HAL_UART_IRQHandler+0x196>
 8007558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800755c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00c      	beq.n	800757e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800756c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007574:	f043 0220 	orr.w	r2, r3, #32
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8249 	beq.w	8007a1c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800758a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800758e:	f003 0320 	and.w	r3, r3, #32
 8007592:	2b00      	cmp	r3, #0
 8007594:	d013      	beq.n	80075be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d105      	bne.n	80075ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d007      	beq.n	80075be <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d2:	2b40      	cmp	r3, #64	@ 0x40
 80075d4:	d005      	beq.n	80075e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d054      	beq.n	800768c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fef3 	bl	80083ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f2:	2b40      	cmp	r3, #64	@ 0x40
 80075f4:	d146      	bne.n	8007684 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3308      	adds	r3, #8
 80075fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800760c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007614:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3308      	adds	r3, #8
 800761e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007622:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007626:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800762e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007632:	e841 2300 	strex	r3, r2, [r1]
 8007636:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800763a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1d9      	bne.n	80075f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007648:	2b00      	cmp	r3, #0
 800764a:	d017      	beq.n	800767c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007652:	4a15      	ldr	r2, [pc, #84]	@ (80076a8 <HAL_UART_IRQHandler+0x2c0>)
 8007654:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800765c:	4618      	mov	r0, r3
 800765e:	f7fb ff26 	bl	80034ae <HAL_DMA_Abort_IT>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d019      	beq.n	800769c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800766e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007676:	4610      	mov	r0, r2
 8007678:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800767a:	e00f      	b.n	800769c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f9e1 	bl	8007a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007682:	e00b      	b.n	800769c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f9dd 	bl	8007a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800768a:	e007      	b.n	800769c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f9d9 	bl	8007a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800769a:	e1bf      	b.n	8007a1c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769c:	bf00      	nop
    return;
 800769e:	e1bd      	b.n	8007a1c <HAL_UART_IRQHandler+0x634>
 80076a0:	10000001 	.word	0x10000001
 80076a4:	04000120 	.word	0x04000120
 80076a8:	0800849b 	.word	0x0800849b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	f040 8153 	bne.w	800795c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076ba:	f003 0310 	and.w	r3, r3, #16
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 814c 	beq.w	800795c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076c8:	f003 0310 	and.w	r3, r3, #16
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 8145 	beq.w	800795c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2210      	movs	r2, #16
 80076d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e4:	2b40      	cmp	r3, #64	@ 0x40
 80076e6:	f040 80bb 	bne.w	8007860 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 818f 	beq.w	8007a20 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007708:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800770c:	429a      	cmp	r2, r3
 800770e:	f080 8187 	bcs.w	8007a20 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007718:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b00      	cmp	r3, #0
 800772c:	f040 8087 	bne.w	800783e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007744:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800774c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800775a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800775e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007766:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007772:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1da      	bne.n	8007730 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3308      	adds	r3, #8
 8007780:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007782:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800778a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800778c:	f023 0301 	bic.w	r3, r3, #1
 8007790:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3308      	adds	r3, #8
 800779a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800779e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e1      	bne.n	800777a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3308      	adds	r3, #8
 80077bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80077c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3308      	adds	r3, #8
 80077d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80077da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80077dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80077e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80077e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e3      	bne.n	80077b6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007804:	e853 3f00 	ldrex	r3, [r3]
 8007808:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800780a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800780c:	f023 0310 	bic.w	r3, r3, #16
 8007810:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800781e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007820:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007824:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800782c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e4      	bne.n	80077fc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007838:	4618      	mov	r0, r3
 800783a:	f7fb fddc 	bl	80033f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2202      	movs	r2, #2
 8007842:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007850:	b29b      	uxth	r3, r3
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	b29b      	uxth	r3, r3
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f8fd 	bl	8007a58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800785e:	e0df      	b.n	8007a20 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800786c:	b29b      	uxth	r3, r3
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800787a:	b29b      	uxth	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 80d1 	beq.w	8007a24 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007882:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 80cc 	beq.w	8007a24 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800789a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800789c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80078b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e4      	bne.n	800788c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3308      	adds	r3, #8
 80078c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	623b      	str	r3, [r7, #32]
   return(result);
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078d8:	f023 0301 	bic.w	r3, r3, #1
 80078dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3308      	adds	r3, #8
 80078e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80078ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80078ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e1      	bne.n	80078c2 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2220      	movs	r2, #32
 8007902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	e853 3f00 	ldrex	r3, [r3]
 800791e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 0310 	bic.w	r3, r3, #16
 8007926:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007934:	61fb      	str	r3, [r7, #28]
 8007936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	69b9      	ldr	r1, [r7, #24]
 800793a:	69fa      	ldr	r2, [r7, #28]
 800793c:	e841 2300 	strex	r3, r2, [r1]
 8007940:	617b      	str	r3, [r7, #20]
   return(result);
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e4      	bne.n	8007912 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800794e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f87f 	bl	8007a58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800795a:	e063      	b.n	8007a24 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800795c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007960:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00e      	beq.n	8007986 <HAL_UART_IRQHandler+0x59e>
 8007968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800796c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d008      	beq.n	8007986 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800797c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fdcc 	bl	800851c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007984:	e051      	b.n	8007a2a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800798a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800798e:	2b00      	cmp	r3, #0
 8007990:	d014      	beq.n	80079bc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800799a:	2b00      	cmp	r3, #0
 800799c:	d105      	bne.n	80079aa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800799e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d008      	beq.n	80079bc <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d03a      	beq.n	8007a28 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
    }
    return;
 80079ba:	e035      	b.n	8007a28 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d009      	beq.n	80079dc <HAL_UART_IRQHandler+0x5f4>
 80079c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d003      	beq.n	80079dc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fd76 	bl	80084c6 <UART_EndTransmit_IT>
    return;
 80079da:	e026      	b.n	8007a2a <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80079dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d009      	beq.n	80079fc <HAL_UART_IRQHandler+0x614>
 80079e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fda5 	bl	8008544 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079fa:	e016      	b.n	8007a2a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80079fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d010      	beq.n	8007a2a <HAL_UART_IRQHandler+0x642>
 8007a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	da0c      	bge.n	8007a2a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fd8d 	bl	8008530 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a16:	e008      	b.n	8007a2a <HAL_UART_IRQHandler+0x642>
      return;
 8007a18:	bf00      	nop
 8007a1a:	e006      	b.n	8007a2a <HAL_UART_IRQHandler+0x642>
    return;
 8007a1c:	bf00      	nop
 8007a1e:	e004      	b.n	8007a2a <HAL_UART_IRQHandler+0x642>
      return;
 8007a20:	bf00      	nop
 8007a22:	e002      	b.n	8007a2a <HAL_UART_IRQHandler+0x642>
      return;
 8007a24:	bf00      	nop
 8007a26:	e000      	b.n	8007a2a <HAL_UART_IRQHandler+0x642>
    return;
 8007a28:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007a2a:	37e8      	adds	r7, #232	@ 0xe8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a74:	b08c      	sub	sp, #48	@ 0x30
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	689a      	ldr	r2, [r3, #8]
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	4baa      	ldr	r3, [pc, #680]	@ (8007d48 <UART_SetConfig+0x2d8>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	6812      	ldr	r2, [r2, #0]
 8007aa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a9f      	ldr	r2, [pc, #636]	@ (8007d4c <UART_SetConfig+0x2dc>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d004      	beq.n	8007adc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007ae6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	6812      	ldr	r2, [r2, #0]
 8007aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007af0:	430b      	orrs	r3, r1
 8007af2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afa:	f023 010f 	bic.w	r1, r3, #15
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a90      	ldr	r2, [pc, #576]	@ (8007d50 <UART_SetConfig+0x2e0>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d125      	bne.n	8007b60 <UART_SetConfig+0xf0>
 8007b14:	4b8f      	ldr	r3, [pc, #572]	@ (8007d54 <UART_SetConfig+0x2e4>)
 8007b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d81a      	bhi.n	8007b58 <UART_SetConfig+0xe8>
 8007b22:	a201      	add	r2, pc, #4	@ (adr r2, 8007b28 <UART_SetConfig+0xb8>)
 8007b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b28:	08007b39 	.word	0x08007b39
 8007b2c:	08007b49 	.word	0x08007b49
 8007b30:	08007b41 	.word	0x08007b41
 8007b34:	08007b51 	.word	0x08007b51
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b3e:	e116      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007b40:	2302      	movs	r3, #2
 8007b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b46:	e112      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b4e:	e10e      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007b50:	2308      	movs	r3, #8
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b56:	e10a      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007b58:	2310      	movs	r3, #16
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b5e:	e106      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a7c      	ldr	r2, [pc, #496]	@ (8007d58 <UART_SetConfig+0x2e8>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d138      	bne.n	8007bdc <UART_SetConfig+0x16c>
 8007b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8007d54 <UART_SetConfig+0x2e4>)
 8007b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b70:	f003 030c 	and.w	r3, r3, #12
 8007b74:	2b0c      	cmp	r3, #12
 8007b76:	d82d      	bhi.n	8007bd4 <UART_SetConfig+0x164>
 8007b78:	a201      	add	r2, pc, #4	@ (adr r2, 8007b80 <UART_SetConfig+0x110>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007bb5 	.word	0x08007bb5
 8007b84:	08007bd5 	.word	0x08007bd5
 8007b88:	08007bd5 	.word	0x08007bd5
 8007b8c:	08007bd5 	.word	0x08007bd5
 8007b90:	08007bc5 	.word	0x08007bc5
 8007b94:	08007bd5 	.word	0x08007bd5
 8007b98:	08007bd5 	.word	0x08007bd5
 8007b9c:	08007bd5 	.word	0x08007bd5
 8007ba0:	08007bbd 	.word	0x08007bbd
 8007ba4:	08007bd5 	.word	0x08007bd5
 8007ba8:	08007bd5 	.word	0x08007bd5
 8007bac:	08007bd5 	.word	0x08007bd5
 8007bb0:	08007bcd 	.word	0x08007bcd
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bba:	e0d8      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bc2:	e0d4      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bca:	e0d0      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007bcc:	2308      	movs	r3, #8
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bd2:	e0cc      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007bd4:	2310      	movs	r3, #16
 8007bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bda:	e0c8      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a5e      	ldr	r2, [pc, #376]	@ (8007d5c <UART_SetConfig+0x2ec>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d125      	bne.n	8007c32 <UART_SetConfig+0x1c2>
 8007be6:	4b5b      	ldr	r3, [pc, #364]	@ (8007d54 <UART_SetConfig+0x2e4>)
 8007be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007bf0:	2b30      	cmp	r3, #48	@ 0x30
 8007bf2:	d016      	beq.n	8007c22 <UART_SetConfig+0x1b2>
 8007bf4:	2b30      	cmp	r3, #48	@ 0x30
 8007bf6:	d818      	bhi.n	8007c2a <UART_SetConfig+0x1ba>
 8007bf8:	2b20      	cmp	r3, #32
 8007bfa:	d00a      	beq.n	8007c12 <UART_SetConfig+0x1a2>
 8007bfc:	2b20      	cmp	r3, #32
 8007bfe:	d814      	bhi.n	8007c2a <UART_SetConfig+0x1ba>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <UART_SetConfig+0x19a>
 8007c04:	2b10      	cmp	r3, #16
 8007c06:	d008      	beq.n	8007c1a <UART_SetConfig+0x1aa>
 8007c08:	e00f      	b.n	8007c2a <UART_SetConfig+0x1ba>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c10:	e0ad      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007c12:	2302      	movs	r3, #2
 8007c14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c18:	e0a9      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007c1a:	2304      	movs	r3, #4
 8007c1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c20:	e0a5      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007c22:	2308      	movs	r3, #8
 8007c24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c28:	e0a1      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007c2a:	2310      	movs	r3, #16
 8007c2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c30:	e09d      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a4a      	ldr	r2, [pc, #296]	@ (8007d60 <UART_SetConfig+0x2f0>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d125      	bne.n	8007c88 <UART_SetConfig+0x218>
 8007c3c:	4b45      	ldr	r3, [pc, #276]	@ (8007d54 <UART_SetConfig+0x2e4>)
 8007c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007c46:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c48:	d016      	beq.n	8007c78 <UART_SetConfig+0x208>
 8007c4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c4c:	d818      	bhi.n	8007c80 <UART_SetConfig+0x210>
 8007c4e:	2b80      	cmp	r3, #128	@ 0x80
 8007c50:	d00a      	beq.n	8007c68 <UART_SetConfig+0x1f8>
 8007c52:	2b80      	cmp	r3, #128	@ 0x80
 8007c54:	d814      	bhi.n	8007c80 <UART_SetConfig+0x210>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <UART_SetConfig+0x1f0>
 8007c5a:	2b40      	cmp	r3, #64	@ 0x40
 8007c5c:	d008      	beq.n	8007c70 <UART_SetConfig+0x200>
 8007c5e:	e00f      	b.n	8007c80 <UART_SetConfig+0x210>
 8007c60:	2300      	movs	r3, #0
 8007c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c66:	e082      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007c68:	2302      	movs	r3, #2
 8007c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c6e:	e07e      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007c70:	2304      	movs	r3, #4
 8007c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c76:	e07a      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007c78:	2308      	movs	r3, #8
 8007c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c7e:	e076      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007c80:	2310      	movs	r3, #16
 8007c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c86:	e072      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a35      	ldr	r2, [pc, #212]	@ (8007d64 <UART_SetConfig+0x2f4>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d12a      	bne.n	8007ce8 <UART_SetConfig+0x278>
 8007c92:	4b30      	ldr	r3, [pc, #192]	@ (8007d54 <UART_SetConfig+0x2e4>)
 8007c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ca0:	d01a      	beq.n	8007cd8 <UART_SetConfig+0x268>
 8007ca2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ca6:	d81b      	bhi.n	8007ce0 <UART_SetConfig+0x270>
 8007ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cac:	d00c      	beq.n	8007cc8 <UART_SetConfig+0x258>
 8007cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cb2:	d815      	bhi.n	8007ce0 <UART_SetConfig+0x270>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <UART_SetConfig+0x250>
 8007cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cbc:	d008      	beq.n	8007cd0 <UART_SetConfig+0x260>
 8007cbe:	e00f      	b.n	8007ce0 <UART_SetConfig+0x270>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cc6:	e052      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cce:	e04e      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cd6:	e04a      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007cd8:	2308      	movs	r3, #8
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cde:	e046      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007ce0:	2310      	movs	r3, #16
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ce6:	e042      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a17      	ldr	r2, [pc, #92]	@ (8007d4c <UART_SetConfig+0x2dc>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d13a      	bne.n	8007d68 <UART_SetConfig+0x2f8>
 8007cf2:	4b18      	ldr	r3, [pc, #96]	@ (8007d54 <UART_SetConfig+0x2e4>)
 8007cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cf8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007cfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d00:	d01a      	beq.n	8007d38 <UART_SetConfig+0x2c8>
 8007d02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d06:	d81b      	bhi.n	8007d40 <UART_SetConfig+0x2d0>
 8007d08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d0c:	d00c      	beq.n	8007d28 <UART_SetConfig+0x2b8>
 8007d0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d12:	d815      	bhi.n	8007d40 <UART_SetConfig+0x2d0>
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <UART_SetConfig+0x2b0>
 8007d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d1c:	d008      	beq.n	8007d30 <UART_SetConfig+0x2c0>
 8007d1e:	e00f      	b.n	8007d40 <UART_SetConfig+0x2d0>
 8007d20:	2300      	movs	r3, #0
 8007d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d26:	e022      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d2e:	e01e      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007d30:	2304      	movs	r3, #4
 8007d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d36:	e01a      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007d38:	2308      	movs	r3, #8
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d3e:	e016      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007d40:	2310      	movs	r3, #16
 8007d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d46:	e012      	b.n	8007d6e <UART_SetConfig+0x2fe>
 8007d48:	cfff69f3 	.word	0xcfff69f3
 8007d4c:	40008000 	.word	0x40008000
 8007d50:	40013800 	.word	0x40013800
 8007d54:	40021000 	.word	0x40021000
 8007d58:	40004400 	.word	0x40004400
 8007d5c:	40004800 	.word	0x40004800
 8007d60:	40004c00 	.word	0x40004c00
 8007d64:	40005000 	.word	0x40005000
 8007d68:	2310      	movs	r3, #16
 8007d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4aae      	ldr	r2, [pc, #696]	@ (800802c <UART_SetConfig+0x5bc>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	f040 8097 	bne.w	8007ea8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d7e:	2b08      	cmp	r3, #8
 8007d80:	d823      	bhi.n	8007dca <UART_SetConfig+0x35a>
 8007d82:	a201      	add	r2, pc, #4	@ (adr r2, 8007d88 <UART_SetConfig+0x318>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007dad 	.word	0x08007dad
 8007d8c:	08007dcb 	.word	0x08007dcb
 8007d90:	08007db5 	.word	0x08007db5
 8007d94:	08007dcb 	.word	0x08007dcb
 8007d98:	08007dbb 	.word	0x08007dbb
 8007d9c:	08007dcb 	.word	0x08007dcb
 8007da0:	08007dcb 	.word	0x08007dcb
 8007da4:	08007dcb 	.word	0x08007dcb
 8007da8:	08007dc3 	.word	0x08007dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dac:	f7fd ffca 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 8007db0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007db2:	e010      	b.n	8007dd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007db4:	4b9e      	ldr	r3, [pc, #632]	@ (8008030 <UART_SetConfig+0x5c0>)
 8007db6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007db8:	e00d      	b.n	8007dd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dba:	f7fd ff2b 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8007dbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dc0:	e009      	b.n	8007dd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007dc8:	e005      	b.n	8007dd6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007dd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 8130 	beq.w	800803e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de2:	4a94      	ldr	r2, [pc, #592]	@ (8008034 <UART_SetConfig+0x5c4>)
 8007de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007de8:	461a      	mov	r2, r3
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8007df0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	4613      	mov	r3, r2
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	4413      	add	r3, r2
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d305      	bcc.n	8007e0e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d903      	bls.n	8007e16 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e14:	e113      	b.n	800803e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e18:	2200      	movs	r2, #0
 8007e1a:	60bb      	str	r3, [r7, #8]
 8007e1c:	60fa      	str	r2, [r7, #12]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e22:	4a84      	ldr	r2, [pc, #528]	@ (8008034 <UART_SetConfig+0x5c4>)
 8007e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	603b      	str	r3, [r7, #0]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e38:	f7f8 f9e0 	bl	80001fc <__aeabi_uldivmod>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4610      	mov	r0, r2
 8007e42:	4619      	mov	r1, r3
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	020b      	lsls	r3, r1, #8
 8007e4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e52:	0202      	lsls	r2, r0, #8
 8007e54:	6979      	ldr	r1, [r7, #20]
 8007e56:	6849      	ldr	r1, [r1, #4]
 8007e58:	0849      	lsrs	r1, r1, #1
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	4605      	mov	r5, r0
 8007e60:	eb12 0804 	adds.w	r8, r2, r4
 8007e64:	eb43 0905 	adc.w	r9, r3, r5
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	469a      	mov	sl, r3
 8007e70:	4693      	mov	fp, r2
 8007e72:	4652      	mov	r2, sl
 8007e74:	465b      	mov	r3, fp
 8007e76:	4640      	mov	r0, r8
 8007e78:	4649      	mov	r1, r9
 8007e7a:	f7f8 f9bf 	bl	80001fc <__aeabi_uldivmod>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4613      	mov	r3, r2
 8007e84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e8c:	d308      	bcc.n	8007ea0 <UART_SetConfig+0x430>
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e94:	d204      	bcs.n	8007ea0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6a3a      	ldr	r2, [r7, #32]
 8007e9c:	60da      	str	r2, [r3, #12]
 8007e9e:	e0ce      	b.n	800803e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ea6:	e0ca      	b.n	800803e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eb0:	d166      	bne.n	8007f80 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007eb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007eb6:	2b08      	cmp	r3, #8
 8007eb8:	d827      	bhi.n	8007f0a <UART_SetConfig+0x49a>
 8007eba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec0 <UART_SetConfig+0x450>)
 8007ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec0:	08007ee5 	.word	0x08007ee5
 8007ec4:	08007eed 	.word	0x08007eed
 8007ec8:	08007ef5 	.word	0x08007ef5
 8007ecc:	08007f0b 	.word	0x08007f0b
 8007ed0:	08007efb 	.word	0x08007efb
 8007ed4:	08007f0b 	.word	0x08007f0b
 8007ed8:	08007f0b 	.word	0x08007f0b
 8007edc:	08007f0b 	.word	0x08007f0b
 8007ee0:	08007f03 	.word	0x08007f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ee4:	f7fd ff2e 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 8007ee8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eea:	e014      	b.n	8007f16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eec:	f7fd ff40 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 8007ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ef2:	e010      	b.n	8007f16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ef4:	4b4e      	ldr	r3, [pc, #312]	@ (8008030 <UART_SetConfig+0x5c0>)
 8007ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ef8:	e00d      	b.n	8007f16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007efa:	f7fd fe8b 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8007efe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f00:	e009      	b.n	8007f16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f08:	e005      	b.n	8007f16 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 8090 	beq.w	800803e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f22:	4a44      	ldr	r2, [pc, #272]	@ (8008034 <UART_SetConfig+0x5c4>)
 8007f24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f30:	005a      	lsls	r2, r3, #1
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	085b      	lsrs	r3, r3, #1
 8007f38:	441a      	add	r2, r3
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f42:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	2b0f      	cmp	r3, #15
 8007f48:	d916      	bls.n	8007f78 <UART_SetConfig+0x508>
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f50:	d212      	bcs.n	8007f78 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f023 030f 	bic.w	r3, r3, #15
 8007f5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	085b      	lsrs	r3, r3, #1
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	8bfb      	ldrh	r3, [r7, #30]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	8bfa      	ldrh	r2, [r7, #30]
 8007f74:	60da      	str	r2, [r3, #12]
 8007f76:	e062      	b.n	800803e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f7e:	e05e      	b.n	800803e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d828      	bhi.n	8007fda <UART_SetConfig+0x56a>
 8007f88:	a201      	add	r2, pc, #4	@ (adr r2, 8007f90 <UART_SetConfig+0x520>)
 8007f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8e:	bf00      	nop
 8007f90:	08007fb5 	.word	0x08007fb5
 8007f94:	08007fbd 	.word	0x08007fbd
 8007f98:	08007fc5 	.word	0x08007fc5
 8007f9c:	08007fdb 	.word	0x08007fdb
 8007fa0:	08007fcb 	.word	0x08007fcb
 8007fa4:	08007fdb 	.word	0x08007fdb
 8007fa8:	08007fdb 	.word	0x08007fdb
 8007fac:	08007fdb 	.word	0x08007fdb
 8007fb0:	08007fd3 	.word	0x08007fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fb4:	f7fd fec6 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 8007fb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fba:	e014      	b.n	8007fe6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fbc:	f7fd fed8 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 8007fc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fc2:	e010      	b.n	8007fe6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8008030 <UART_SetConfig+0x5c0>)
 8007fc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fc8:	e00d      	b.n	8007fe6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fca:	f7fd fe23 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8007fce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fd0:	e009      	b.n	8007fe6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fd8:	e005      	b.n	8007fe6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007fe4:	bf00      	nop
    }

    if (pclk != 0U)
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d028      	beq.n	800803e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff0:	4a10      	ldr	r2, [pc, #64]	@ (8008034 <UART_SetConfig+0x5c4>)
 8007ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffa:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	085b      	lsrs	r3, r3, #1
 8008004:	441a      	add	r2, r3
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	fbb2 f3f3 	udiv	r3, r2, r3
 800800e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	2b0f      	cmp	r3, #15
 8008014:	d910      	bls.n	8008038 <UART_SetConfig+0x5c8>
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800801c:	d20c      	bcs.n	8008038 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	b29a      	uxth	r2, r3
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60da      	str	r2, [r3, #12]
 8008028:	e009      	b.n	800803e <UART_SetConfig+0x5ce>
 800802a:	bf00      	nop
 800802c:	40008000 	.word	0x40008000
 8008030:	00f42400 	.word	0x00f42400
 8008034:	0800c9e8 	.word	0x0800c9e8
      }
      else
      {
        ret = HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2201      	movs	r2, #1
 8008042:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2201      	movs	r2, #1
 800804a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2200      	movs	r2, #0
 8008052:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	2200      	movs	r2, #0
 8008058:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800805a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800805e:	4618      	mov	r0, r3
 8008060:	3730      	adds	r7, #48	@ 0x30
 8008062:	46bd      	mov	sp, r7
 8008064:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008074:	f003 0308 	and.w	r3, r3, #8
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00a      	beq.n	8008092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00a      	beq.n	80080b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b8:	f003 0302 	and.w	r3, r3, #2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00a      	beq.n	80080d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080da:	f003 0304 	and.w	r3, r3, #4
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00a      	beq.n	80080f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080fc:	f003 0310 	and.w	r3, r3, #16
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00a      	beq.n	800811a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	430a      	orrs	r2, r1
 8008118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811e:	f003 0320 	and.w	r3, r3, #32
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00a      	beq.n	800813c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d01a      	beq.n	800817e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	430a      	orrs	r2, r1
 800815c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008166:	d10a      	bne.n	800817e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	605a      	str	r2, [r3, #4]
  }
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b098      	sub	sp, #96	@ 0x60
 80081b0:	af02      	add	r7, sp, #8
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081bc:	f7f9 fadc 	bl	8001778 <HAL_GetTick>
 80081c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0308 	and.w	r3, r3, #8
 80081cc:	2b08      	cmp	r3, #8
 80081ce:	d12f      	bne.n	8008230 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081d8:	2200      	movs	r2, #0
 80081da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f88e 	bl	8008300 <UART_WaitOnFlagUntilTimeout>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d022      	beq.n	8008230 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f2:	e853 3f00 	ldrex	r3, [r3]
 80081f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	461a      	mov	r2, r3
 8008206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008208:	647b      	str	r3, [r7, #68]	@ 0x44
 800820a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800820e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008210:	e841 2300 	strex	r3, r2, [r1]
 8008214:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e6      	bne.n	80081ea <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2220      	movs	r2, #32
 8008220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e063      	b.n	80082f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0304 	and.w	r3, r3, #4
 800823a:	2b04      	cmp	r3, #4
 800823c:	d149      	bne.n	80082d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800823e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008246:	2200      	movs	r2, #0
 8008248:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f857 	bl	8008300 <UART_WaitOnFlagUntilTimeout>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d03c      	beq.n	80082d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	623b      	str	r3, [r7, #32]
   return(result);
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800826c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008276:	633b      	str	r3, [r7, #48]	@ 0x30
 8008278:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800827c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800827e:	e841 2300 	strex	r3, r2, [r1]
 8008282:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1e6      	bne.n	8008258 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3308      	adds	r3, #8
 8008290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	e853 3f00 	ldrex	r3, [r3]
 8008298:	60fb      	str	r3, [r7, #12]
   return(result);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f023 0301 	bic.w	r3, r3, #1
 80082a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3308      	adds	r3, #8
 80082a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082aa:	61fa      	str	r2, [r7, #28]
 80082ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	69b9      	ldr	r1, [r7, #24]
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	617b      	str	r3, [r7, #20]
   return(result);
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e5      	bne.n	800828a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e012      	b.n	80082f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2220      	movs	r2, #32
 80082de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3758      	adds	r7, #88	@ 0x58
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	4613      	mov	r3, r2
 800830e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008310:	e049      	b.n	80083a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008318:	d045      	beq.n	80083a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800831a:	f7f9 fa2d 	bl	8001778 <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	429a      	cmp	r2, r3
 8008328:	d302      	bcc.n	8008330 <UART_WaitOnFlagUntilTimeout+0x30>
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e048      	b.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0304 	and.w	r3, r3, #4
 800833e:	2b00      	cmp	r3, #0
 8008340:	d031      	beq.n	80083a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	f003 0308 	and.w	r3, r3, #8
 800834c:	2b08      	cmp	r3, #8
 800834e:	d110      	bne.n	8008372 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2208      	movs	r2, #8
 8008356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 f838 	bl	80083ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2208      	movs	r2, #8
 8008362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e029      	b.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800837c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008380:	d111      	bne.n	80083a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800838a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 f81e 	bl	80083ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2220      	movs	r2, #32
 8008396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e00f      	b.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69da      	ldr	r2, [r3, #28]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4013      	ands	r3, r2
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	bf0c      	ite	eq
 80083b6:	2301      	moveq	r3, #1
 80083b8:	2300      	movne	r3, #0
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	461a      	mov	r2, r3
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d0a6      	beq.n	8008312 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b095      	sub	sp, #84	@ 0x54
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083de:	e853 3f00 	ldrex	r3, [r3]
 80083e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	461a      	mov	r2, r3
 80083f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80083f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e6      	bne.n	80083d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3308      	adds	r3, #8
 800840e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	e853 3f00 	ldrex	r3, [r3]
 8008416:	61fb      	str	r3, [r7, #28]
   return(result);
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800841e:	f023 0301 	bic.w	r3, r3, #1
 8008422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3308      	adds	r3, #8
 800842a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800842c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800842e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008434:	e841 2300 	strex	r3, r2, [r1]
 8008438:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1e3      	bne.n	8008408 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008444:	2b01      	cmp	r3, #1
 8008446:	d118      	bne.n	800847a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	60bb      	str	r3, [r7, #8]
   return(result);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f023 0310 	bic.w	r3, r3, #16
 800845c:	647b      	str	r3, [r7, #68]	@ 0x44
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008466:	61bb      	str	r3, [r7, #24]
 8008468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	6979      	ldr	r1, [r7, #20]
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	613b      	str	r3, [r7, #16]
   return(result);
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e6      	bne.n	8008448 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800848e:	bf00      	nop
 8008490:	3754      	adds	r7, #84	@ 0x54
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f7ff fac3 	bl	8007a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084be:	bf00      	nop
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b088      	sub	sp, #32
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	60bb      	str	r3, [r7, #8]
   return(result);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084e2:	61fb      	str	r3, [r7, #28]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	61bb      	str	r3, [r7, #24]
 80084ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6979      	ldr	r1, [r7, #20]
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	613b      	str	r3, [r7, #16]
   return(result);
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e6      	bne.n	80084ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2220      	movs	r2, #32
 8008504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7ff fa8e 	bl	8007a30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008514:	bf00      	nop
 8008516:	3720      	adds	r7, #32
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008566:	2b01      	cmp	r3, #1
 8008568:	d101      	bne.n	800856e <HAL_UARTEx_DisableFifoMode+0x16>
 800856a:	2302      	movs	r3, #2
 800856c:	e027      	b.n	80085be <HAL_UARTEx_DisableFifoMode+0x66>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2224      	movs	r2, #36	@ 0x24
 800857a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0201 	bic.w	r2, r2, #1
 8008594:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800859c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d101      	bne.n	80085e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085de:	2302      	movs	r3, #2
 80085e0:	e02d      	b.n	800863e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2224      	movs	r2, #36	@ 0x24
 80085ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 0201 	bic.w	r2, r2, #1
 8008608:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f850 	bl	80086c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2220      	movs	r2, #32
 8008630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008656:	2b01      	cmp	r3, #1
 8008658:	d101      	bne.n	800865e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800865a:	2302      	movs	r3, #2
 800865c:	e02d      	b.n	80086ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2224      	movs	r2, #36	@ 0x24
 800866a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 0201 	bic.w	r2, r2, #1
 8008684:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f812 	bl	80086c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2220      	movs	r2, #32
 80086ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d108      	bne.n	80086e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086e4:	e031      	b.n	800874a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086e6:	2308      	movs	r3, #8
 80086e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086ea:	2308      	movs	r3, #8
 80086ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	0e5b      	lsrs	r3, r3, #25
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	f003 0307 	and.w	r3, r3, #7
 80086fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	0f5b      	lsrs	r3, r3, #29
 8008706:	b2db      	uxtb	r3, r3
 8008708:	f003 0307 	and.w	r3, r3, #7
 800870c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	7b3a      	ldrb	r2, [r7, #12]
 8008712:	4911      	ldr	r1, [pc, #68]	@ (8008758 <UARTEx_SetNbDataToProcess+0x94>)
 8008714:	5c8a      	ldrb	r2, [r1, r2]
 8008716:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800871a:	7b3a      	ldrb	r2, [r7, #12]
 800871c:	490f      	ldr	r1, [pc, #60]	@ (800875c <UARTEx_SetNbDataToProcess+0x98>)
 800871e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008720:	fb93 f3f2 	sdiv	r3, r3, r2
 8008724:	b29a      	uxth	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	7b7a      	ldrb	r2, [r7, #13]
 8008730:	4909      	ldr	r1, [pc, #36]	@ (8008758 <UARTEx_SetNbDataToProcess+0x94>)
 8008732:	5c8a      	ldrb	r2, [r1, r2]
 8008734:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008738:	7b7a      	ldrb	r2, [r7, #13]
 800873a:	4908      	ldr	r1, [pc, #32]	@ (800875c <UARTEx_SetNbDataToProcess+0x98>)
 800873c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800873e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008742:	b29a      	uxth	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800874a:	bf00      	nop
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	0800ca00 	.word	0x0800ca00
 800875c:	0800ca08 	.word	0x0800ca08

08008760 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008760:	b084      	sub	sp, #16
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	f107 001c 	add.w	r0, r7, #28
 800876e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f001 fa1c 	bl	8009bbc <USB_CoreReset>
 8008784:	4603      	mov	r3, r0
 8008786:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800878a:	2b00      	cmp	r3, #0
 800878c:	d106      	bne.n	800879c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008792:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	639a      	str	r2, [r3, #56]	@ 0x38
 800879a:	e005      	b.n	80087a8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087b4:	b004      	add	sp, #16
 80087b6:	4770      	bx	lr

080087b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	4613      	mov	r3, r2
 80087c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80087c6:	79fb      	ldrb	r3, [r7, #7]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d165      	bne.n	8008898 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	4a3e      	ldr	r2, [pc, #248]	@ (80088c8 <USB_SetTurnaroundTime+0x110>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d906      	bls.n	80087e2 <USB_SetTurnaroundTime+0x2a>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	4a3d      	ldr	r2, [pc, #244]	@ (80088cc <USB_SetTurnaroundTime+0x114>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d202      	bcs.n	80087e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80087dc:	230f      	movs	r3, #15
 80087de:	617b      	str	r3, [r7, #20]
 80087e0:	e05c      	b.n	800889c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	4a39      	ldr	r2, [pc, #228]	@ (80088cc <USB_SetTurnaroundTime+0x114>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d306      	bcc.n	80087f8 <USB_SetTurnaroundTime+0x40>
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	4a38      	ldr	r2, [pc, #224]	@ (80088d0 <USB_SetTurnaroundTime+0x118>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d202      	bcs.n	80087f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80087f2:	230e      	movs	r3, #14
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	e051      	b.n	800889c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	4a35      	ldr	r2, [pc, #212]	@ (80088d0 <USB_SetTurnaroundTime+0x118>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d306      	bcc.n	800880e <USB_SetTurnaroundTime+0x56>
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	4a34      	ldr	r2, [pc, #208]	@ (80088d4 <USB_SetTurnaroundTime+0x11c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d202      	bcs.n	800880e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008808:	230d      	movs	r3, #13
 800880a:	617b      	str	r3, [r7, #20]
 800880c:	e046      	b.n	800889c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	4a30      	ldr	r2, [pc, #192]	@ (80088d4 <USB_SetTurnaroundTime+0x11c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d306      	bcc.n	8008824 <USB_SetTurnaroundTime+0x6c>
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	4a2f      	ldr	r2, [pc, #188]	@ (80088d8 <USB_SetTurnaroundTime+0x120>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d802      	bhi.n	8008824 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800881e:	230c      	movs	r3, #12
 8008820:	617b      	str	r3, [r7, #20]
 8008822:	e03b      	b.n	800889c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	4a2c      	ldr	r2, [pc, #176]	@ (80088d8 <USB_SetTurnaroundTime+0x120>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d906      	bls.n	800883a <USB_SetTurnaroundTime+0x82>
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	4a2b      	ldr	r2, [pc, #172]	@ (80088dc <USB_SetTurnaroundTime+0x124>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d802      	bhi.n	800883a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008834:	230b      	movs	r3, #11
 8008836:	617b      	str	r3, [r7, #20]
 8008838:	e030      	b.n	800889c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	4a27      	ldr	r2, [pc, #156]	@ (80088dc <USB_SetTurnaroundTime+0x124>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d906      	bls.n	8008850 <USB_SetTurnaroundTime+0x98>
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	4a26      	ldr	r2, [pc, #152]	@ (80088e0 <USB_SetTurnaroundTime+0x128>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d802      	bhi.n	8008850 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800884a:	230a      	movs	r3, #10
 800884c:	617b      	str	r3, [r7, #20]
 800884e:	e025      	b.n	800889c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	4a23      	ldr	r2, [pc, #140]	@ (80088e0 <USB_SetTurnaroundTime+0x128>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d906      	bls.n	8008866 <USB_SetTurnaroundTime+0xae>
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	4a22      	ldr	r2, [pc, #136]	@ (80088e4 <USB_SetTurnaroundTime+0x12c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d202      	bcs.n	8008866 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008860:	2309      	movs	r3, #9
 8008862:	617b      	str	r3, [r7, #20]
 8008864:	e01a      	b.n	800889c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	4a1e      	ldr	r2, [pc, #120]	@ (80088e4 <USB_SetTurnaroundTime+0x12c>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d306      	bcc.n	800887c <USB_SetTurnaroundTime+0xc4>
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	4a1d      	ldr	r2, [pc, #116]	@ (80088e8 <USB_SetTurnaroundTime+0x130>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d802      	bhi.n	800887c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008876:	2308      	movs	r3, #8
 8008878:	617b      	str	r3, [r7, #20]
 800887a:	e00f      	b.n	800889c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4a1a      	ldr	r2, [pc, #104]	@ (80088e8 <USB_SetTurnaroundTime+0x130>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d906      	bls.n	8008892 <USB_SetTurnaroundTime+0xda>
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	4a19      	ldr	r2, [pc, #100]	@ (80088ec <USB_SetTurnaroundTime+0x134>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d202      	bcs.n	8008892 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800888c:	2307      	movs	r3, #7
 800888e:	617b      	str	r3, [r7, #20]
 8008890:	e004      	b.n	800889c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008892:	2306      	movs	r3, #6
 8008894:	617b      	str	r3, [r7, #20]
 8008896:	e001      	b.n	800889c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008898:	2309      	movs	r3, #9
 800889a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	68da      	ldr	r2, [r3, #12]
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	029b      	lsls	r3, r3, #10
 80088b0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80088b4:	431a      	orrs	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	371c      	adds	r7, #28
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	00d8acbf 	.word	0x00d8acbf
 80088cc:	00e4e1c0 	.word	0x00e4e1c0
 80088d0:	00f42400 	.word	0x00f42400
 80088d4:	01067380 	.word	0x01067380
 80088d8:	011a499f 	.word	0x011a499f
 80088dc:	01312cff 	.word	0x01312cff
 80088e0:	014ca43f 	.word	0x014ca43f
 80088e4:	016e3600 	.word	0x016e3600
 80088e8:	01a6ab1f 	.word	0x01a6ab1f
 80088ec:	01e84800 	.word	0x01e84800

080088f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f043 0201 	orr.w	r2, r3, #1
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f023 0201 	bic.w	r2, r3, #1
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008940:	2300      	movs	r3, #0
 8008942:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008950:	78fb      	ldrb	r3, [r7, #3]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d115      	bne.n	8008982 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008962:	2001      	movs	r0, #1
 8008964:	f7f8 ff14 	bl	8001790 <HAL_Delay>
      ms++;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	3301      	adds	r3, #1
 800896c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 f8ab 	bl	8009aca <USB_GetMode>
 8008974:	4603      	mov	r3, r0
 8008976:	2b01      	cmp	r3, #1
 8008978:	d01e      	beq.n	80089b8 <USB_SetCurrentMode+0x84>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2b31      	cmp	r3, #49	@ 0x31
 800897e:	d9f0      	bls.n	8008962 <USB_SetCurrentMode+0x2e>
 8008980:	e01a      	b.n	80089b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008982:	78fb      	ldrb	r3, [r7, #3]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d115      	bne.n	80089b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008994:	2001      	movs	r0, #1
 8008996:	f7f8 fefb 	bl	8001790 <HAL_Delay>
      ms++;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3301      	adds	r3, #1
 800899e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f001 f892 	bl	8009aca <USB_GetMode>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <USB_SetCurrentMode+0x84>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2b31      	cmp	r3, #49	@ 0x31
 80089b0:	d9f0      	bls.n	8008994 <USB_SetCurrentMode+0x60>
 80089b2:	e001      	b.n	80089b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e005      	b.n	80089c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b32      	cmp	r3, #50	@ 0x32
 80089bc:	d101      	bne.n	80089c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e000      	b.n	80089c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089cc:	b084      	sub	sp, #16
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b086      	sub	sp, #24
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80089da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80089e6:	2300      	movs	r3, #0
 80089e8:	613b      	str	r3, [r7, #16]
 80089ea:	e009      	b.n	8008a00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	3340      	adds	r3, #64	@ 0x40
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	2200      	movs	r2, #0
 80089f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	3301      	adds	r3, #1
 80089fe:	613b      	str	r3, [r7, #16]
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	2b0e      	cmp	r3, #14
 8008a04:	d9f2      	bls.n	80089ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d11c      	bne.n	8008a46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a1a:	f043 0302 	orr.w	r3, r3, #2
 8008a1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a24:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	e005      	b.n	8008a52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a58:	461a      	mov	r2, r3
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a5e:	2103      	movs	r1, #3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f959 	bl	8008d18 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a66:	2110      	movs	r1, #16
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f8f1 	bl	8008c50 <USB_FlushTxFifo>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f91d 	bl	8008cb8 <USB_FlushRxFifo>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a8e:	461a      	mov	r2, r3
 8008a90:	2300      	movs	r3, #0
 8008a92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008aac:	2300      	movs	r3, #0
 8008aae:	613b      	str	r3, [r7, #16]
 8008ab0:	e043      	b.n	8008b3a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ac8:	d118      	bne.n	8008afc <USB_DevInit+0x130>
    {
      if (i == 0U)
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10a      	bne.n	8008ae6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008adc:	461a      	mov	r2, r3
 8008ade:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	e013      	b.n	8008b0e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008af2:	461a      	mov	r2, r3
 8008af4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008af8:	6013      	str	r3, [r2, #0]
 8008afa:	e008      	b.n	8008b0e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b08:	461a      	mov	r2, r3
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008b32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	3301      	adds	r3, #1
 8008b38:	613b      	str	r3, [r7, #16]
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d3b7      	bcc.n	8008ab2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b42:	2300      	movs	r3, #0
 8008b44:	613b      	str	r3, [r7, #16]
 8008b46:	e043      	b.n	8008bd0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b5e:	d118      	bne.n	8008b92 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10a      	bne.n	8008b7c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b72:	461a      	mov	r2, r3
 8008b74:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	e013      	b.n	8008ba4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b88:	461a      	mov	r2, r3
 8008b8a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008b8e:	6013      	str	r3, [r2, #0]
 8008b90:	e008      	b.n	8008ba4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	015a      	lsls	r2, r3, #5
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	4413      	add	r3, r2
 8008b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	015a      	lsls	r2, r3, #5
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008bc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	613b      	str	r3, [r7, #16]
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d3b7      	bcc.n	8008b48 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008be6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008bf8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	f043 0210 	orr.w	r2, r3, #16
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	699a      	ldr	r2, [r3, #24]
 8008c0a:	4b10      	ldr	r3, [pc, #64]	@ (8008c4c <USB_DevInit+0x280>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d005      	beq.n	8008c24 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	f043 0208 	orr.w	r2, r3, #8
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d107      	bne.n	8008c3a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c32:	f043 0304 	orr.w	r3, r3, #4
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c46:	b004      	add	sp, #16
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	803c3800 	.word	0x803c3800

08008c50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	3301      	adds	r3, #1
 8008c62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4a13      	ldr	r2, [pc, #76]	@ (8008cb4 <USB_FlushTxFifo+0x64>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d901      	bls.n	8008c70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e01b      	b.n	8008ca8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	daf2      	bge.n	8008c5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	019b      	lsls	r3, r3, #6
 8008c80:	f043 0220 	orr.w	r2, r3, #32
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4a08      	ldr	r2, [pc, #32]	@ (8008cb4 <USB_FlushTxFifo+0x64>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d901      	bls.n	8008c9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e006      	b.n	8008ca8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f003 0320 	and.w	r3, r3, #32
 8008ca2:	2b20      	cmp	r3, #32
 8008ca4:	d0f0      	beq.n	8008c88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	00030d40 	.word	0x00030d40

08008cb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	4a11      	ldr	r2, [pc, #68]	@ (8008d14 <USB_FlushRxFifo+0x5c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d901      	bls.n	8008cd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e018      	b.n	8008d08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	daf2      	bge.n	8008cc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2210      	movs	r2, #16
 8008ce6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3301      	adds	r3, #1
 8008cec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4a08      	ldr	r2, [pc, #32]	@ (8008d14 <USB_FlushRxFifo+0x5c>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d901      	bls.n	8008cfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e006      	b.n	8008d08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	f003 0310 	and.w	r3, r3, #16
 8008d02:	2b10      	cmp	r3, #16
 8008d04:	d0f0      	beq.n	8008ce8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	00030d40 	.word	0x00030d40

08008d18 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	78fb      	ldrb	r3, [r7, #3]
 8008d32:	68f9      	ldr	r1, [r7, #12]
 8008d34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b087      	sub	sp, #28
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f003 0306 	and.w	r3, r3, #6
 8008d62:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d002      	beq.n	8008d70 <USB_GetDevSpeed+0x26>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b06      	cmp	r3, #6
 8008d6e:	d102      	bne.n	8008d76 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008d70:	2302      	movs	r3, #2
 8008d72:	75fb      	strb	r3, [r7, #23]
 8008d74:	e001      	b.n	8008d7a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008d76:	230f      	movs	r3, #15
 8008d78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	371c      	adds	r7, #28
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	785b      	ldrb	r3, [r3, #1]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d13a      	bne.n	8008e1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008daa:	69da      	ldr	r2, [r3, #28]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	2101      	movs	r1, #1
 8008db6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	68f9      	ldr	r1, [r7, #12]
 8008dbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d155      	bne.n	8008e88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	791b      	ldrb	r3, [r3, #4]
 8008df6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008df8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	059b      	lsls	r3, r3, #22
 8008dfe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e00:	4313      	orrs	r3, r2
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	0151      	lsls	r1, r2, #5
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	440a      	add	r2, r1
 8008e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e16:	6013      	str	r3, [r2, #0]
 8008e18:	e036      	b.n	8008e88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e20:	69da      	ldr	r2, [r3, #28]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	f003 030f 	and.w	r3, r3, #15
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e30:	041b      	lsls	r3, r3, #16
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d11a      	bne.n	8008e88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	791b      	ldrb	r3, [r3, #4]
 8008e6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e6e:	430b      	orrs	r3, r1
 8008e70:	4313      	orrs	r3, r2
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	0151      	lsls	r1, r2, #5
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	440a      	add	r2, r1
 8008e7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
	...

08008e98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	785b      	ldrb	r3, [r3, #1]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d161      	bne.n	8008f78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008eca:	d11f      	bne.n	8008f0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	0151      	lsls	r1, r2, #5
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	440a      	add	r2, r1
 8008ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ee6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008eea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	015a      	lsls	r2, r3, #5
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	0151      	lsls	r1, r2, #5
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	440a      	add	r2, r1
 8008f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	f003 030f 	and.w	r3, r3, #15
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	43db      	mvns	r3, r3
 8008f26:	68f9      	ldr	r1, [r7, #12]
 8008f28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f36:	69da      	ldr	r2, [r3, #28]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	2101      	movs	r1, #1
 8008f42:	fa01 f303 	lsl.w	r3, r1, r3
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	43db      	mvns	r3, r3
 8008f4a:	68f9      	ldr	r1, [r7, #12]
 8008f4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f50:	4013      	ands	r3, r2
 8008f52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	0159      	lsls	r1, r3, #5
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	440b      	add	r3, r1
 8008f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4b35      	ldr	r3, [pc, #212]	@ (8009048 <USB_DeactivateEndpoint+0x1b0>)
 8008f72:	4013      	ands	r3, r2
 8008f74:	600b      	str	r3, [r1, #0]
 8008f76:	e060      	b.n	800903a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	015a      	lsls	r2, r3, #5
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f8e:	d11f      	bne.n	8008fd0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	0151      	lsls	r1, r2, #5
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	440a      	add	r2, r1
 8008fa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008faa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008fae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	015a      	lsls	r2, r3, #5
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	0151      	lsls	r1, r2, #5
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	440a      	add	r2, r1
 8008fc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008fce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	f003 030f 	and.w	r3, r3, #15
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe6:	041b      	lsls	r3, r3, #16
 8008fe8:	43db      	mvns	r3, r3
 8008fea:	68f9      	ldr	r1, [r7, #12]
 8008fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ffa:	69da      	ldr	r2, [r3, #28]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	f003 030f 	and.w	r3, r3, #15
 8009004:	2101      	movs	r1, #1
 8009006:	fa01 f303 	lsl.w	r3, r1, r3
 800900a:	041b      	lsls	r3, r3, #16
 800900c:	43db      	mvns	r3, r3
 800900e:	68f9      	ldr	r1, [r7, #12]
 8009010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009014:	4013      	ands	r3, r2
 8009016:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	0159      	lsls	r1, r3, #5
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	440b      	add	r3, r1
 800902e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009032:	4619      	mov	r1, r3
 8009034:	4b05      	ldr	r3, [pc, #20]	@ (800904c <USB_DeactivateEndpoint+0x1b4>)
 8009036:	4013      	ands	r3, r2
 8009038:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	ec337800 	.word	0xec337800
 800904c:	eff37800 	.word	0xeff37800

08009050 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	785b      	ldrb	r3, [r3, #1]
 8009068:	2b01      	cmp	r3, #1
 800906a:	f040 8128 	bne.w	80092be <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d132      	bne.n	80090dc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	0151      	lsls	r1, r2, #5
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	440a      	add	r2, r1
 800908c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009090:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009094:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009098:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	015a      	lsls	r2, r3, #5
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	0151      	lsls	r1, r2, #5
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	440a      	add	r2, r1
 80090b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80090b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	0151      	lsls	r1, r2, #5
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	440a      	add	r2, r1
 80090d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090d4:	0cdb      	lsrs	r3, r3, #19
 80090d6:	04db      	lsls	r3, r3, #19
 80090d8:	6113      	str	r3, [r2, #16]
 80090da:	e092      	b.n	8009202 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	015a      	lsls	r2, r3, #5
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	0151      	lsls	r1, r2, #5
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	440a      	add	r2, r1
 80090f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090f6:	0cdb      	lsrs	r3, r3, #19
 80090f8:	04db      	lsls	r3, r3, #19
 80090fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	4413      	add	r3, r2
 8009104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	0151      	lsls	r1, r2, #5
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	440a      	add	r2, r1
 8009112:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009116:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800911a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800911e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d11a      	bne.n	800915c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	691a      	ldr	r2, [r3, #16]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	429a      	cmp	r2, r3
 8009130:	d903      	bls.n	800913a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	689a      	ldr	r2, [r3, #8]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	4413      	add	r3, r2
 8009142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	693a      	ldr	r2, [r7, #16]
 800914a:	0151      	lsls	r1, r2, #5
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	440a      	add	r2, r1
 8009150:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009154:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009158:	6113      	str	r3, [r2, #16]
 800915a:	e01b      	b.n	8009194 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	4413      	add	r3, r2
 8009164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009168:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	6919      	ldr	r1, [r3, #16]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	440b      	add	r3, r1
 8009174:	1e59      	subs	r1, r3, #1
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	fbb1 f3f3 	udiv	r3, r1, r3
 800917e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009180:	4b8d      	ldr	r3, [pc, #564]	@ (80093b8 <USB_EPStartXfer+0x368>)
 8009182:	400b      	ands	r3, r1
 8009184:	6939      	ldr	r1, [r7, #16]
 8009186:	0148      	lsls	r0, r1, #5
 8009188:	6979      	ldr	r1, [r7, #20]
 800918a:	4401      	add	r1, r0
 800918c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009190:	4313      	orrs	r3, r2
 8009192:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091a0:	691a      	ldr	r2, [r3, #16]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091aa:	6939      	ldr	r1, [r7, #16]
 80091ac:	0148      	lsls	r0, r1, #5
 80091ae:	6979      	ldr	r1, [r7, #20]
 80091b0:	4401      	add	r1, r0
 80091b2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80091b6:	4313      	orrs	r3, r2
 80091b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	791b      	ldrb	r3, [r3, #4]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d11f      	bne.n	8009202 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	015a      	lsls	r2, r3, #5
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	0151      	lsls	r1, r2, #5
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	440a      	add	r2, r1
 80091d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091dc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80091e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	0151      	lsls	r1, r2, #5
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	440a      	add	r2, r1
 80091f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009200:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	015a      	lsls	r2, r3, #5
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	4413      	add	r3, r2
 800920a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	0151      	lsls	r1, r2, #5
 8009214:	697a      	ldr	r2, [r7, #20]
 8009216:	440a      	add	r2, r1
 8009218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800921c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009220:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	791b      	ldrb	r3, [r3, #4]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d015      	beq.n	8009256 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f000 8139 	beq.w	80094a6 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800923a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	f003 030f 	and.w	r3, r3, #15
 8009244:	2101      	movs	r1, #1
 8009246:	fa01 f303 	lsl.w	r3, r1, r3
 800924a:	6979      	ldr	r1, [r7, #20]
 800924c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009250:	4313      	orrs	r3, r2
 8009252:	634b      	str	r3, [r1, #52]	@ 0x34
 8009254:	e127      	b.n	80094a6 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009262:	2b00      	cmp	r3, #0
 8009264:	d110      	bne.n	8009288 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	0151      	lsls	r1, r2, #5
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	440a      	add	r2, r1
 800927c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009280:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	e00f      	b.n	80092a8 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	0151      	lsls	r1, r2, #5
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	440a      	add	r2, r1
 800929e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092a6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	68d9      	ldr	r1, [r3, #12]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	781a      	ldrb	r2, [r3, #0]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f9a6 	bl	8009608 <USB_WritePacket>
 80092bc:	e0f3      	b.n	80094a6 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	0151      	lsls	r1, r2, #5
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	440a      	add	r2, r1
 80092d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092d8:	0cdb      	lsrs	r3, r3, #19
 80092da:	04db      	lsls	r3, r3, #19
 80092dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	0151      	lsls	r1, r2, #5
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	440a      	add	r2, r1
 80092f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092f8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80092fc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009300:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d12f      	bne.n	8009368 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d003      	beq.n	8009318 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	689a      	ldr	r2, [r3, #8]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800932c:	691a      	ldr	r2, [r3, #16]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	6a1b      	ldr	r3, [r3, #32]
 8009332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009336:	6939      	ldr	r1, [r7, #16]
 8009338:	0148      	lsls	r0, r1, #5
 800933a:	6979      	ldr	r1, [r7, #20]
 800933c:	4401      	add	r1, r0
 800933e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009342:	4313      	orrs	r3, r2
 8009344:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	015a      	lsls	r2, r3, #5
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	4413      	add	r3, r2
 800934e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	0151      	lsls	r1, r2, #5
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	440a      	add	r2, r1
 800935c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009360:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009364:	6113      	str	r3, [r2, #16]
 8009366:	e061      	b.n	800942c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d125      	bne.n	80093bc <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800937c:	691a      	ldr	r2, [r3, #16]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009386:	6939      	ldr	r1, [r7, #16]
 8009388:	0148      	lsls	r0, r1, #5
 800938a:	6979      	ldr	r1, [r7, #20]
 800938c:	4401      	add	r1, r0
 800938e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009392:	4313      	orrs	r3, r2
 8009394:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	4413      	add	r3, r2
 800939e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	0151      	lsls	r1, r2, #5
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	440a      	add	r2, r1
 80093ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80093b4:	6113      	str	r3, [r2, #16]
 80093b6:	e039      	b.n	800942c <USB_EPStartXfer+0x3dc>
 80093b8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	691a      	ldr	r2, [r3, #16]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	4413      	add	r3, r2
 80093c6:	1e5a      	subs	r2, r3, #1
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80093d0:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	89fa      	ldrh	r2, [r7, #14]
 80093d8:	fb03 f202 	mul.w	r2, r3, r2
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ec:	691a      	ldr	r2, [r3, #16]
 80093ee:	89fb      	ldrh	r3, [r7, #14]
 80093f0:	04d9      	lsls	r1, r3, #19
 80093f2:	4b2f      	ldr	r3, [pc, #188]	@ (80094b0 <USB_EPStartXfer+0x460>)
 80093f4:	400b      	ands	r3, r1
 80093f6:	6939      	ldr	r1, [r7, #16]
 80093f8:	0148      	lsls	r0, r1, #5
 80093fa:	6979      	ldr	r1, [r7, #20]
 80093fc:	4401      	add	r1, r0
 80093fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009402:	4313      	orrs	r3, r2
 8009404:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	4413      	add	r3, r2
 800940e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009412:	691a      	ldr	r2, [r3, #16]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	6a1b      	ldr	r3, [r3, #32]
 8009418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800941c:	6939      	ldr	r1, [r7, #16]
 800941e:	0148      	lsls	r0, r1, #5
 8009420:	6979      	ldr	r1, [r7, #20]
 8009422:	4401      	add	r1, r0
 8009424:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009428:	4313      	orrs	r3, r2
 800942a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	791b      	ldrb	r3, [r3, #4]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d128      	bne.n	8009486 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009440:	2b00      	cmp	r3, #0
 8009442:	d110      	bne.n	8009466 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	0151      	lsls	r1, r2, #5
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	440a      	add	r2, r1
 800945a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800945e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009462:	6013      	str	r3, [r2, #0]
 8009464:	e00f      	b.n	8009486 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	0151      	lsls	r1, r2, #5
 8009478:	697a      	ldr	r2, [r7, #20]
 800947a:	440a      	add	r2, r1
 800947c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009484:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	4413      	add	r3, r2
 800948e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	0151      	lsls	r1, r2, #5
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	440a      	add	r2, r1
 800949c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80094a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	1ff80000 	.word	0x1ff80000

080094b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	785b      	ldrb	r3, [r3, #1]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d14a      	bne.n	8009568 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094ea:	f040 8086 	bne.w	80095fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	7812      	ldrb	r2, [r2, #0]
 8009502:	0151      	lsls	r1, r2, #5
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	440a      	add	r2, r1
 8009508:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800950c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009510:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	7812      	ldrb	r2, [r2, #0]
 8009526:	0151      	lsls	r1, r2, #5
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	440a      	add	r2, r1
 800952c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009530:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009534:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3301      	adds	r3, #1
 800953a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009542:	4293      	cmp	r3, r2
 8009544:	d902      	bls.n	800954c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	75fb      	strb	r3, [r7, #23]
          break;
 800954a:	e056      	b.n	80095fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	4413      	add	r3, r2
 8009556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009560:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009564:	d0e7      	beq.n	8009536 <USB_EPStopXfer+0x82>
 8009566:	e048      	b.n	80095fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	4413      	add	r3, r2
 8009572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800957c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009580:	d13b      	bne.n	80095fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	7812      	ldrb	r2, [r2, #0]
 8009596:	0151      	lsls	r1, r2, #5
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	440a      	add	r2, r1
 800959c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80095a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	7812      	ldrb	r2, [r2, #0]
 80095ba:	0151      	lsls	r1, r2, #5
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	440a      	add	r2, r1
 80095c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	3301      	adds	r3, #1
 80095ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d902      	bls.n	80095e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	75fb      	strb	r3, [r7, #23]
          break;
 80095de:	e00c      	b.n	80095fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095f8:	d0e7      	beq.n	80095ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	371c      	adds	r7, #28
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8009608:	b480      	push	{r7}
 800960a:	b089      	sub	sp, #36	@ 0x24
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	4611      	mov	r1, r2
 8009614:	461a      	mov	r2, r3
 8009616:	460b      	mov	r3, r1
 8009618:	71fb      	strb	r3, [r7, #7]
 800961a:	4613      	mov	r3, r2
 800961c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009626:	88bb      	ldrh	r3, [r7, #4]
 8009628:	3303      	adds	r3, #3
 800962a:	089b      	lsrs	r3, r3, #2
 800962c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800962e:	2300      	movs	r3, #0
 8009630:	61bb      	str	r3, [r7, #24]
 8009632:	e018      	b.n	8009666 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009634:	79fb      	ldrb	r3, [r7, #7]
 8009636:	031a      	lsls	r2, r3, #12
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	4413      	add	r3, r2
 800963c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009640:	461a      	mov	r2, r3
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	3301      	adds	r3, #1
 800964c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	3301      	adds	r3, #1
 8009652:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	3301      	adds	r3, #1
 8009658:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	3301      	adds	r3, #1
 800965e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	3301      	adds	r3, #1
 8009664:	61bb      	str	r3, [r7, #24]
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	429a      	cmp	r2, r3
 800966c:	d3e2      	bcc.n	8009634 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3724      	adds	r7, #36	@ 0x24
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800967c:	b480      	push	{r7}
 800967e:	b08b      	sub	sp, #44	@ 0x2c
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	4613      	mov	r3, r2
 8009688:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009692:	88fb      	ldrh	r3, [r7, #6]
 8009694:	089b      	lsrs	r3, r3, #2
 8009696:	b29b      	uxth	r3, r3
 8009698:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800969a:	88fb      	ldrh	r3, [r7, #6]
 800969c:	f003 0303 	and.w	r3, r3, #3
 80096a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80096a2:	2300      	movs	r3, #0
 80096a4:	623b      	str	r3, [r7, #32]
 80096a6:	e014      	b.n	80096d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80096b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b6:	3301      	adds	r3, #1
 80096b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80096ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096bc:	3301      	adds	r3, #1
 80096be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80096c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c2:	3301      	adds	r3, #1
 80096c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80096c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c8:	3301      	adds	r3, #1
 80096ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	3301      	adds	r3, #1
 80096d0:	623b      	str	r3, [r7, #32]
 80096d2:	6a3a      	ldr	r2, [r7, #32]
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d3e6      	bcc.n	80096a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80096da:	8bfb      	ldrh	r3, [r7, #30]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01e      	beq.n	800971e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096ea:	461a      	mov	r2, r3
 80096ec:	f107 0310 	add.w	r3, r7, #16
 80096f0:	6812      	ldr	r2, [r2, #0]
 80096f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009700:	b2da      	uxtb	r2, r3
 8009702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009704:	701a      	strb	r2, [r3, #0]
      i++;
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	3301      	adds	r3, #1
 800970a:	623b      	str	r3, [r7, #32]
      pDest++;
 800970c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970e:	3301      	adds	r3, #1
 8009710:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009712:	8bfb      	ldrh	r3, [r7, #30]
 8009714:	3b01      	subs	r3, #1
 8009716:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009718:	8bfb      	ldrh	r3, [r7, #30]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1ea      	bne.n	80096f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800971e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009720:	4618      	mov	r0, r3
 8009722:	372c      	adds	r7, #44	@ 0x2c
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	785b      	ldrb	r3, [r3, #1]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d12c      	bne.n	80097a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	db12      	blt.n	8009780 <USB_EPSetStall+0x54>
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00f      	beq.n	8009780 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	0151      	lsls	r1, r2, #5
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	440a      	add	r2, r1
 8009776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800977a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800977e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	0151      	lsls	r1, r2, #5
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	440a      	add	r2, r1
 8009796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800979a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	e02b      	b.n	80097fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	db12      	blt.n	80097da <USB_EPSetStall+0xae>
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00f      	beq.n	80097da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	0151      	lsls	r1, r2, #5
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	440a      	add	r2, r1
 80097d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80097d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	015a      	lsls	r2, r3, #5
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	4413      	add	r3, r2
 80097e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	0151      	lsls	r1, r2, #5
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	440a      	add	r2, r1
 80097f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80097f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	785b      	ldrb	r3, [r3, #1]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d128      	bne.n	8009876 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	4413      	add	r3, r2
 800982c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	0151      	lsls	r1, r2, #5
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	440a      	add	r2, r1
 800983a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800983e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009842:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	791b      	ldrb	r3, [r3, #4]
 8009848:	2b03      	cmp	r3, #3
 800984a:	d003      	beq.n	8009854 <USB_EPClearStall+0x4c>
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	791b      	ldrb	r3, [r3, #4]
 8009850:	2b02      	cmp	r3, #2
 8009852:	d138      	bne.n	80098c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	015a      	lsls	r2, r3, #5
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	4413      	add	r3, r2
 800985c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	0151      	lsls	r1, r2, #5
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	440a      	add	r2, r1
 800986a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800986e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	e027      	b.n	80098c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4413      	add	r3, r2
 800987e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	0151      	lsls	r1, r2, #5
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	440a      	add	r2, r1
 800988c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009890:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009894:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	791b      	ldrb	r3, [r3, #4]
 800989a:	2b03      	cmp	r3, #3
 800989c:	d003      	beq.n	80098a6 <USB_EPClearStall+0x9e>
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	791b      	ldrb	r3, [r3, #4]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d10f      	bne.n	80098c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	0151      	lsls	r1, r2, #5
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	440a      	add	r2, r1
 80098bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80098f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	011b      	lsls	r3, r3, #4
 8009904:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009908:	68f9      	ldr	r1, [r7, #12]
 800990a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800990e:	4313      	orrs	r3, r2
 8009910:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800993a:	f023 0303 	bic.w	r3, r3, #3
 800993e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800994e:	f023 0302 	bic.w	r3, r3, #2
 8009952:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009962:	b480      	push	{r7}
 8009964:	b085      	sub	sp, #20
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800997c:	f023 0303 	bic.w	r3, r3, #3
 8009980:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009990:	f043 0302 	orr.w	r3, r3, #2
 8009994:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	695b      	ldr	r3, [r3, #20]
 80099b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	4013      	ands	r3, r2
 80099ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80099bc:	68fb      	ldr	r3, [r7, #12]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b085      	sub	sp, #20
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	4013      	ands	r3, r2
 80099ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	0c1b      	lsrs	r3, r3, #16
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b085      	sub	sp, #20
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	4013      	ands	r3, r2
 8009a20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	b29b      	uxth	r3, r3
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b085      	sub	sp, #20
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009a42:	78fb      	ldrb	r3, [r7, #3]
 8009a44:	015a      	lsls	r2, r3, #5
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a60:	68bb      	ldr	r3, [r7, #8]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b087      	sub	sp, #28
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	460b      	mov	r3, r1
 8009a78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a90:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009a92:	78fb      	ldrb	r3, [r7, #3]
 8009a94:	f003 030f 	and.w	r3, r3, #15
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a9e:	01db      	lsls	r3, r3, #7
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	4013      	ands	r3, r2
 8009aba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009abc:	68bb      	ldr	r3, [r7, #8]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	371c      	adds	r7, #28
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	f003 0301 	and.w	r3, r3, #1
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b085      	sub	sp, #20
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b00:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009b04:	f023 0307 	bic.w	r3, r3, #7
 8009b08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	333c      	adds	r3, #60	@ 0x3c
 8009b3e:	3304      	adds	r3, #4
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	4a1c      	ldr	r2, [pc, #112]	@ (8009bb8 <USB_EP0_OutStart+0x8c>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d90a      	bls.n	8009b62 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b5c:	d101      	bne.n	8009b62 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e024      	b.n	8009bac <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b68:	461a      	mov	r2, r3
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b90:	f043 0318 	orr.w	r3, r3, #24
 8009b94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ba4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009ba8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	4f54300a 	.word	0x4f54300a

08009bbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4a13      	ldr	r2, [pc, #76]	@ (8009c20 <USB_CoreReset+0x64>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d901      	bls.n	8009bda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e01b      	b.n	8009c12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	daf2      	bge.n	8009bc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009be2:	2300      	movs	r3, #0
 8009be4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	f043 0201 	orr.w	r2, r3, #1
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	4a09      	ldr	r2, [pc, #36]	@ (8009c20 <USB_CoreReset+0x64>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d901      	bls.n	8009c04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e006      	b.n	8009c12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d0f0      	beq.n	8009bf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	00030d40 	.word	0x00030d40

08009c24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009c30:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009c34:	f002 fe2c 	bl	800c890 <USBD_static_malloc>
 8009c38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d109      	bne.n	8009c54 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	32b0      	adds	r2, #176	@ 0xb0
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009c50:	2302      	movs	r3, #2
 8009c52:	e0d4      	b.n	8009dfe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009c54:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009c58:	2100      	movs	r1, #0
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f002 fe36 	bl	800c8cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	32b0      	adds	r2, #176	@ 0xb0
 8009c6a:	68f9      	ldr	r1, [r7, #12]
 8009c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	32b0      	adds	r2, #176	@ 0xb0
 8009c7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	7c1b      	ldrb	r3, [r3, #16]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d138      	bne.n	8009cfe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c8c:	4b5e      	ldr	r3, [pc, #376]	@ (8009e08 <USBD_CDC_Init+0x1e4>)
 8009c8e:	7819      	ldrb	r1, [r3, #0]
 8009c90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c94:	2202      	movs	r2, #2
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f002 fbe6 	bl	800c468 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c9c:	4b5a      	ldr	r3, [pc, #360]	@ (8009e08 <USBD_CDC_Init+0x1e4>)
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	f003 020f 	and.w	r2, r3, #15
 8009ca4:	6879      	ldr	r1, [r7, #4]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	440b      	add	r3, r1
 8009cb0:	3324      	adds	r3, #36	@ 0x24
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009cb6:	4b55      	ldr	r3, [pc, #340]	@ (8009e0c <USBD_CDC_Init+0x1e8>)
 8009cb8:	7819      	ldrb	r1, [r3, #0]
 8009cba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f002 fbd1 	bl	800c468 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009cc6:	4b51      	ldr	r3, [pc, #324]	@ (8009e0c <USBD_CDC_Init+0x1e8>)
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	f003 020f 	and.w	r2, r3, #15
 8009cce:	6879      	ldr	r1, [r7, #4]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	440b      	add	r3, r1
 8009cda:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009cde:	2201      	movs	r2, #1
 8009ce0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8009e10 <USBD_CDC_Init+0x1ec>)
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	f003 020f 	and.w	r2, r3, #15
 8009cea:	6879      	ldr	r1, [r7, #4]
 8009cec:	4613      	mov	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	440b      	add	r3, r1
 8009cf6:	3326      	adds	r3, #38	@ 0x26
 8009cf8:	2210      	movs	r2, #16
 8009cfa:	801a      	strh	r2, [r3, #0]
 8009cfc:	e035      	b.n	8009d6a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009cfe:	4b42      	ldr	r3, [pc, #264]	@ (8009e08 <USBD_CDC_Init+0x1e4>)
 8009d00:	7819      	ldrb	r1, [r3, #0]
 8009d02:	2340      	movs	r3, #64	@ 0x40
 8009d04:	2202      	movs	r2, #2
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f002 fbae 	bl	800c468 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009d0c:	4b3e      	ldr	r3, [pc, #248]	@ (8009e08 <USBD_CDC_Init+0x1e4>)
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	f003 020f 	and.w	r2, r3, #15
 8009d14:	6879      	ldr	r1, [r7, #4]
 8009d16:	4613      	mov	r3, r2
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	4413      	add	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	440b      	add	r3, r1
 8009d20:	3324      	adds	r3, #36	@ 0x24
 8009d22:	2201      	movs	r2, #1
 8009d24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009d26:	4b39      	ldr	r3, [pc, #228]	@ (8009e0c <USBD_CDC_Init+0x1e8>)
 8009d28:	7819      	ldrb	r1, [r3, #0]
 8009d2a:	2340      	movs	r3, #64	@ 0x40
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f002 fb9a 	bl	800c468 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009d34:	4b35      	ldr	r3, [pc, #212]	@ (8009e0c <USBD_CDC_Init+0x1e8>)
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	f003 020f 	and.w	r2, r3, #15
 8009d3c:	6879      	ldr	r1, [r7, #4]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	440b      	add	r3, r1
 8009d48:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009d50:	4b2f      	ldr	r3, [pc, #188]	@ (8009e10 <USBD_CDC_Init+0x1ec>)
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	f003 020f 	and.w	r2, r3, #15
 8009d58:	6879      	ldr	r1, [r7, #4]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	440b      	add	r3, r1
 8009d64:	3326      	adds	r3, #38	@ 0x26
 8009d66:	2210      	movs	r2, #16
 8009d68:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d6a:	4b29      	ldr	r3, [pc, #164]	@ (8009e10 <USBD_CDC_Init+0x1ec>)
 8009d6c:	7819      	ldrb	r1, [r3, #0]
 8009d6e:	2308      	movs	r3, #8
 8009d70:	2203      	movs	r2, #3
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f002 fb78 	bl	800c468 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009d78:	4b25      	ldr	r3, [pc, #148]	@ (8009e10 <USBD_CDC_Init+0x1ec>)
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	f003 020f 	and.w	r2, r3, #15
 8009d80:	6879      	ldr	r1, [r7, #4]
 8009d82:	4613      	mov	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	440b      	add	r3, r1
 8009d8c:	3324      	adds	r3, #36	@ 0x24
 8009d8e:	2201      	movs	r2, #1
 8009d90:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	33b0      	adds	r3, #176	@ 0xb0
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d101      	bne.n	8009dcc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009dc8:	2302      	movs	r3, #2
 8009dca:	e018      	b.n	8009dfe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	7c1b      	ldrb	r3, [r3, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10a      	bne.n	8009dea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8009e0c <USBD_CDC_Init+0x1e8>)
 8009dd6:	7819      	ldrb	r1, [r3, #0]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009dde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f002 fcba 	bl	800c75c <USBD_LL_PrepareReceive>
 8009de8:	e008      	b.n	8009dfc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009dea:	4b08      	ldr	r3, [pc, #32]	@ (8009e0c <USBD_CDC_Init+0x1e8>)
 8009dec:	7819      	ldrb	r1, [r3, #0]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009df4:	2340      	movs	r3, #64	@ 0x40
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f002 fcb0 	bl	800c75c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20000093 	.word	0x20000093
 8009e0c:	20000094 	.word	0x20000094
 8009e10:	20000095 	.word	0x20000095

08009e14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009e20:	4b3a      	ldr	r3, [pc, #232]	@ (8009f0c <USBD_CDC_DeInit+0xf8>)
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	4619      	mov	r1, r3
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f002 fb5c 	bl	800c4e4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009e2c:	4b37      	ldr	r3, [pc, #220]	@ (8009f0c <USBD_CDC_DeInit+0xf8>)
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	f003 020f 	and.w	r2, r3, #15
 8009e34:	6879      	ldr	r1, [r7, #4]
 8009e36:	4613      	mov	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	440b      	add	r3, r1
 8009e40:	3324      	adds	r3, #36	@ 0x24
 8009e42:	2200      	movs	r2, #0
 8009e44:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009e46:	4b32      	ldr	r3, [pc, #200]	@ (8009f10 <USBD_CDC_DeInit+0xfc>)
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f002 fb49 	bl	800c4e4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009e52:	4b2f      	ldr	r3, [pc, #188]	@ (8009f10 <USBD_CDC_DeInit+0xfc>)
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	f003 020f 	and.w	r2, r3, #15
 8009e5a:	6879      	ldr	r1, [r7, #4]
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	440b      	add	r3, r1
 8009e66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009e6e:	4b29      	ldr	r3, [pc, #164]	@ (8009f14 <USBD_CDC_DeInit+0x100>)
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f002 fb35 	bl	800c4e4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009e7a:	4b26      	ldr	r3, [pc, #152]	@ (8009f14 <USBD_CDC_DeInit+0x100>)
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	f003 020f 	and.w	r2, r3, #15
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	4613      	mov	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	440b      	add	r3, r1
 8009e8e:	3324      	adds	r3, #36	@ 0x24
 8009e90:	2200      	movs	r2, #0
 8009e92:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009e94:	4b1f      	ldr	r3, [pc, #124]	@ (8009f14 <USBD_CDC_DeInit+0x100>)
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	f003 020f 	and.w	r2, r3, #15
 8009e9c:	6879      	ldr	r1, [r7, #4]
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	440b      	add	r3, r1
 8009ea8:	3326      	adds	r3, #38	@ 0x26
 8009eaa:	2200      	movs	r2, #0
 8009eac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	32b0      	adds	r2, #176	@ 0xb0
 8009eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d01f      	beq.n	8009f00 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	33b0      	adds	r3, #176	@ 0xb0
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4413      	add	r3, r2
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	32b0      	adds	r2, #176	@ 0xb0
 8009ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f002 fce2 	bl	800c8ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	32b0      	adds	r2, #176	@ 0xb0
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20000093 	.word	0x20000093
 8009f10:	20000094 	.word	0x20000094
 8009f14:	20000095 	.word	0x20000095

08009f18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	32b0      	adds	r2, #176	@ 0xb0
 8009f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009f36:	2300      	movs	r3, #0
 8009f38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d101      	bne.n	8009f48 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e0bf      	b.n	800a0c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d050      	beq.n	8009ff6 <USBD_CDC_Setup+0xde>
 8009f54:	2b20      	cmp	r3, #32
 8009f56:	f040 80af 	bne.w	800a0b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	88db      	ldrh	r3, [r3, #6]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d03a      	beq.n	8009fd8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	b25b      	sxtb	r3, r3
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	da1b      	bge.n	8009fa4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	33b0      	adds	r3, #176	@ 0xb0
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4413      	add	r3, r2
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009f82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	88d2      	ldrh	r2, [r2, #6]
 8009f88:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	88db      	ldrh	r3, [r3, #6]
 8009f8e:	2b07      	cmp	r3, #7
 8009f90:	bf28      	it	cs
 8009f92:	2307      	movcs	r3, #7
 8009f94:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	89fa      	ldrh	r2, [r7, #14]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f001 fdb1 	bl	800bb04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009fa2:	e090      	b.n	800a0c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	785a      	ldrb	r2, [r3, #1]
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	88db      	ldrh	r3, [r3, #6]
 8009fb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8009fb4:	d803      	bhi.n	8009fbe <USBD_CDC_Setup+0xa6>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	88db      	ldrh	r3, [r3, #6]
 8009fba:	b2da      	uxtb	r2, r3
 8009fbc:	e000      	b.n	8009fc0 <USBD_CDC_Setup+0xa8>
 8009fbe:	2240      	movs	r2, #64	@ 0x40
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009fc6:	6939      	ldr	r1, [r7, #16]
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009fce:	461a      	mov	r2, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f001 fdc3 	bl	800bb5c <USBD_CtlPrepareRx>
      break;
 8009fd6:	e076      	b.n	800a0c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	33b0      	adds	r3, #176	@ 0xb0
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4413      	add	r3, r2
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	7850      	ldrb	r0, [r2, #1]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	4798      	blx	r3
      break;
 8009ff4:	e067      	b.n	800a0c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	785b      	ldrb	r3, [r3, #1]
 8009ffa:	2b0b      	cmp	r3, #11
 8009ffc:	d851      	bhi.n	800a0a2 <USBD_CDC_Setup+0x18a>
 8009ffe:	a201      	add	r2, pc, #4	@ (adr r2, 800a004 <USBD_CDC_Setup+0xec>)
 800a000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a004:	0800a035 	.word	0x0800a035
 800a008:	0800a0b1 	.word	0x0800a0b1
 800a00c:	0800a0a3 	.word	0x0800a0a3
 800a010:	0800a0a3 	.word	0x0800a0a3
 800a014:	0800a0a3 	.word	0x0800a0a3
 800a018:	0800a0a3 	.word	0x0800a0a3
 800a01c:	0800a0a3 	.word	0x0800a0a3
 800a020:	0800a0a3 	.word	0x0800a0a3
 800a024:	0800a0a3 	.word	0x0800a0a3
 800a028:	0800a0a3 	.word	0x0800a0a3
 800a02c:	0800a05f 	.word	0x0800a05f
 800a030:	0800a089 	.word	0x0800a089
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	d107      	bne.n	800a050 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a040:	f107 030a 	add.w	r3, r7, #10
 800a044:	2202      	movs	r2, #2
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f001 fd5b 	bl	800bb04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a04e:	e032      	b.n	800a0b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f001 fce5 	bl	800ba22 <USBD_CtlError>
            ret = USBD_FAIL;
 800a058:	2303      	movs	r3, #3
 800a05a:	75fb      	strb	r3, [r7, #23]
          break;
 800a05c:	e02b      	b.n	800a0b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b03      	cmp	r3, #3
 800a068:	d107      	bne.n	800a07a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a06a:	f107 030d 	add.w	r3, r7, #13
 800a06e:	2201      	movs	r2, #1
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 fd46 	bl	800bb04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a078:	e01d      	b.n	800a0b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a07a:	6839      	ldr	r1, [r7, #0]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f001 fcd0 	bl	800ba22 <USBD_CtlError>
            ret = USBD_FAIL;
 800a082:	2303      	movs	r3, #3
 800a084:	75fb      	strb	r3, [r7, #23]
          break;
 800a086:	e016      	b.n	800a0b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	2b03      	cmp	r3, #3
 800a092:	d00f      	beq.n	800a0b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f001 fcc3 	bl	800ba22 <USBD_CtlError>
            ret = USBD_FAIL;
 800a09c:	2303      	movs	r3, #3
 800a09e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a0a0:	e008      	b.n	800a0b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f001 fcbc 	bl	800ba22 <USBD_CtlError>
          ret = USBD_FAIL;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	75fb      	strb	r3, [r7, #23]
          break;
 800a0ae:	e002      	b.n	800a0b6 <USBD_CDC_Setup+0x19e>
          break;
 800a0b0:	bf00      	nop
 800a0b2:	e008      	b.n	800a0c6 <USBD_CDC_Setup+0x1ae>
          break;
 800a0b4:	bf00      	nop
      }
      break;
 800a0b6:	e006      	b.n	800a0c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a0b8:	6839      	ldr	r1, [r7, #0]
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f001 fcb1 	bl	800ba22 <USBD_CtlError>
      ret = USBD_FAIL;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3718      	adds	r7, #24
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	32b0      	adds	r2, #176	@ 0xb0
 800a0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e065      	b.n	800a1c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	32b0      	adds	r2, #176	@ 0xb0
 800a104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a108:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a10a:	78fb      	ldrb	r3, [r7, #3]
 800a10c:	f003 020f 	and.w	r2, r3, #15
 800a110:	6879      	ldr	r1, [r7, #4]
 800a112:	4613      	mov	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	440b      	add	r3, r1
 800a11c:	3318      	adds	r3, #24
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d02f      	beq.n	800a184 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	f003 020f 	and.w	r2, r3, #15
 800a12a:	6879      	ldr	r1, [r7, #4]
 800a12c:	4613      	mov	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	440b      	add	r3, r1
 800a136:	3318      	adds	r3, #24
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	78fb      	ldrb	r3, [r7, #3]
 800a13c:	f003 010f 	and.w	r1, r3, #15
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	460b      	mov	r3, r1
 800a144:	00db      	lsls	r3, r3, #3
 800a146:	440b      	add	r3, r1
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4403      	add	r3, r0
 800a14c:	3344      	adds	r3, #68	@ 0x44
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	fbb2 f1f3 	udiv	r1, r2, r3
 800a154:	fb01 f303 	mul.w	r3, r1, r3
 800a158:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d112      	bne.n	800a184 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a15e:	78fb      	ldrb	r3, [r7, #3]
 800a160:	f003 020f 	and.w	r2, r3, #15
 800a164:	6879      	ldr	r1, [r7, #4]
 800a166:	4613      	mov	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	440b      	add	r3, r1
 800a170:	3318      	adds	r3, #24
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a176:	78f9      	ldrb	r1, [r7, #3]
 800a178:	2300      	movs	r3, #0
 800a17a:	2200      	movs	r2, #0
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f002 fab5 	bl	800c6ec <USBD_LL_Transmit>
 800a182:	e01f      	b.n	800a1c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	2200      	movs	r2, #0
 800a188:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	33b0      	adds	r3, #176	@ 0xb0
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d010      	beq.n	800a1c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	33b0      	adds	r3, #176	@ 0xb0
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a1c0:	78fa      	ldrb	r2, [r7, #3]
 800a1c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b084      	sub	sp, #16
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	32b0      	adds	r2, #176	@ 0xb0
 800a1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	32b0      	adds	r2, #176	@ 0xb0
 800a1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d101      	bne.n	800a200 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e01a      	b.n	800a236 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a200:	78fb      	ldrb	r3, [r7, #3]
 800a202:	4619      	mov	r1, r3
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f002 fae1 	bl	800c7cc <USBD_LL_GetRxDataSize>
 800a20a:	4602      	mov	r2, r0
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	33b0      	adds	r3, #176	@ 0xb0
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	4413      	add	r3, r2
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a230:	4611      	mov	r1, r2
 800a232:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b084      	sub	sp, #16
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	32b0      	adds	r2, #176	@ 0xb0
 800a250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a254:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e024      	b.n	800a2aa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	33b0      	adds	r3, #176	@ 0xb0
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d019      	beq.n	800a2a8 <USBD_CDC_EP0_RxReady+0x6a>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a27a:	2bff      	cmp	r3, #255	@ 0xff
 800a27c:	d014      	beq.n	800a2a8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	33b0      	adds	r3, #176	@ 0xb0
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a296:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a29e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	22ff      	movs	r2, #255	@ 0xff
 800a2a4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2bc:	2182      	movs	r1, #130	@ 0x82
 800a2be:	4818      	ldr	r0, [pc, #96]	@ (800a320 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2c0:	f000 fd4f 	bl	800ad62 <USBD_GetEpDesc>
 800a2c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	4815      	ldr	r0, [pc, #84]	@ (800a320 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2ca:	f000 fd4a 	bl	800ad62 <USBD_GetEpDesc>
 800a2ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2d0:	2181      	movs	r1, #129	@ 0x81
 800a2d2:	4813      	ldr	r0, [pc, #76]	@ (800a320 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2d4:	f000 fd45 	bl	800ad62 <USBD_GetEpDesc>
 800a2d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d002      	beq.n	800a2e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	2210      	movs	r2, #16
 800a2e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d006      	beq.n	800a2fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2f4:	711a      	strb	r2, [r3, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d006      	beq.n	800a30e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a308:	711a      	strb	r2, [r3, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2243      	movs	r2, #67	@ 0x43
 800a312:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a314:	4b02      	ldr	r3, [pc, #8]	@ (800a320 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a316:	4618      	mov	r0, r3
 800a318:	3718      	adds	r7, #24
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20000050 	.word	0x20000050

0800a324 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b086      	sub	sp, #24
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a32c:	2182      	movs	r1, #130	@ 0x82
 800a32e:	4818      	ldr	r0, [pc, #96]	@ (800a390 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a330:	f000 fd17 	bl	800ad62 <USBD_GetEpDesc>
 800a334:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a336:	2101      	movs	r1, #1
 800a338:	4815      	ldr	r0, [pc, #84]	@ (800a390 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a33a:	f000 fd12 	bl	800ad62 <USBD_GetEpDesc>
 800a33e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a340:	2181      	movs	r1, #129	@ 0x81
 800a342:	4813      	ldr	r0, [pc, #76]	@ (800a390 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a344:	f000 fd0d 	bl	800ad62 <USBD_GetEpDesc>
 800a348:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	2210      	movs	r2, #16
 800a354:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d006      	beq.n	800a36a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	2200      	movs	r2, #0
 800a360:	711a      	strb	r2, [r3, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f042 0202 	orr.w	r2, r2, #2
 800a368:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d006      	beq.n	800a37e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	711a      	strb	r2, [r3, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	f042 0202 	orr.w	r2, r2, #2
 800a37c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2243      	movs	r2, #67	@ 0x43
 800a382:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a384:	4b02      	ldr	r3, [pc, #8]	@ (800a390 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a386:	4618      	mov	r0, r3
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	20000050 	.word	0x20000050

0800a394 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a39c:	2182      	movs	r1, #130	@ 0x82
 800a39e:	4818      	ldr	r0, [pc, #96]	@ (800a400 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3a0:	f000 fcdf 	bl	800ad62 <USBD_GetEpDesc>
 800a3a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	4815      	ldr	r0, [pc, #84]	@ (800a400 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3aa:	f000 fcda 	bl	800ad62 <USBD_GetEpDesc>
 800a3ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a3b0:	2181      	movs	r1, #129	@ 0x81
 800a3b2:	4813      	ldr	r0, [pc, #76]	@ (800a400 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3b4:	f000 fcd5 	bl	800ad62 <USBD_GetEpDesc>
 800a3b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	2210      	movs	r2, #16
 800a3c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d006      	beq.n	800a3da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3d4:	711a      	strb	r2, [r3, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d006      	beq.n	800a3ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3e8:	711a      	strb	r2, [r3, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2243      	movs	r2, #67	@ 0x43
 800a3f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3f4:	4b02      	ldr	r3, [pc, #8]	@ (800a400 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	20000050 	.word	0x20000050

0800a404 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	220a      	movs	r2, #10
 800a410:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a412:	4b03      	ldr	r3, [pc, #12]	@ (800a420 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a414:	4618      	mov	r0, r3
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	2000000c 	.word	0x2000000c

0800a424 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d101      	bne.n	800a438 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a434:	2303      	movs	r3, #3
 800a436:	e009      	b.n	800a44c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	33b0      	adds	r3, #176	@ 0xb0
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	4413      	add	r3, r2
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a458:	b480      	push	{r7}
 800a45a:	b087      	sub	sp, #28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	32b0      	adds	r2, #176	@ 0xb0
 800a46e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a472:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e008      	b.n	800a490 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	371c      	adds	r7, #28
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	32b0      	adds	r2, #176	@ 0xb0
 800a4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e004      	b.n	800a4ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3714      	adds	r7, #20
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
	...

0800a4d8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	32b0      	adds	r2, #176	@ 0xb0
 800a4ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	e025      	b.n	800a54a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a504:	2b00      	cmp	r3, #0
 800a506:	d11f      	bne.n	800a548 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a510:	4b10      	ldr	r3, [pc, #64]	@ (800a554 <USBD_CDC_TransmitPacket+0x7c>)
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	f003 020f 	and.w	r2, r3, #15
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	4613      	mov	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	4413      	add	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4403      	add	r3, r0
 800a52a:	3318      	adds	r3, #24
 800a52c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a52e:	4b09      	ldr	r3, [pc, #36]	@ (800a554 <USBD_CDC_TransmitPacket+0x7c>)
 800a530:	7819      	ldrb	r1, [r3, #0]
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f002 f8d4 	bl	800c6ec <USBD_LL_Transmit>

    ret = USBD_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a548:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	20000093 	.word	0x20000093

0800a558 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	32b0      	adds	r2, #176	@ 0xb0
 800a56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a56e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	32b0      	adds	r2, #176	@ 0xb0
 800a57a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a582:	2303      	movs	r3, #3
 800a584:	e018      	b.n	800a5b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	7c1b      	ldrb	r3, [r3, #16]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d10a      	bne.n	800a5a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a58e:	4b0c      	ldr	r3, [pc, #48]	@ (800a5c0 <USBD_CDC_ReceivePacket+0x68>)
 800a590:	7819      	ldrb	r1, [r3, #0]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a598:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f002 f8dd 	bl	800c75c <USBD_LL_PrepareReceive>
 800a5a2:	e008      	b.n	800a5b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5a4:	4b06      	ldr	r3, [pc, #24]	@ (800a5c0 <USBD_CDC_ReceivePacket+0x68>)
 800a5a6:	7819      	ldrb	r1, [r3, #0]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a5ae:	2340      	movs	r3, #64	@ 0x40
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f002 f8d3 	bl	800c75c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	20000094 	.word	0x20000094

0800a5c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d101      	bne.n	800a5dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e01f      	b.n	800a61c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	79fa      	ldrb	r2, [r7, #7]
 800a60e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f001 feab 	bl	800c36c <USBD_LL_Init>
 800a616:	4603      	mov	r3, r0
 800a618:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3718      	adds	r7, #24
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a62e:	2300      	movs	r3, #0
 800a630:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d101      	bne.n	800a63c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a638:	2303      	movs	r3, #3
 800a63a:	e025      	b.n	800a688 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	32ae      	adds	r2, #174	@ 0xae
 800a64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00f      	beq.n	800a678 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	32ae      	adds	r2, #174	@ 0xae
 800a662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a668:	f107 020e 	add.w	r2, r7, #14
 800a66c:	4610      	mov	r0, r2
 800a66e:	4798      	blx	r3
 800a670:	4602      	mov	r2, r0
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a67e:	1c5a      	adds	r2, r3, #1
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f001 feb3 	bl	800c404 <USBD_LL_Start>
 800a69e:	4603      	mov	r3, r0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a6b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	370c      	adds	r7, #12
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d009      	beq.n	800a6ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	78fa      	ldrb	r2, [r7, #3]
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	4798      	blx	r3
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b084      	sub	sp, #16
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	460b      	mov	r3, r1
 800a700:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	78fa      	ldrb	r2, [r7, #3]
 800a710:	4611      	mov	r1, r2
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	4798      	blx	r3
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a71c:	2303      	movs	r3, #3
 800a71e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a720:	7bfb      	ldrb	r3, [r7, #15]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a73a:	6839      	ldr	r1, [r7, #0]
 800a73c:	4618      	mov	r0, r3
 800a73e:	f001 f936 	bl	800b9ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a750:	461a      	mov	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a75e:	f003 031f 	and.w	r3, r3, #31
 800a762:	2b02      	cmp	r3, #2
 800a764:	d01a      	beq.n	800a79c <USBD_LL_SetupStage+0x72>
 800a766:	2b02      	cmp	r3, #2
 800a768:	d822      	bhi.n	800a7b0 <USBD_LL_SetupStage+0x86>
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d002      	beq.n	800a774 <USBD_LL_SetupStage+0x4a>
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d00a      	beq.n	800a788 <USBD_LL_SetupStage+0x5e>
 800a772:	e01d      	b.n	800a7b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a77a:	4619      	mov	r1, r3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fb63 	bl	800ae48 <USBD_StdDevReq>
 800a782:	4603      	mov	r3, r0
 800a784:	73fb      	strb	r3, [r7, #15]
      break;
 800a786:	e020      	b.n	800a7ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a78e:	4619      	mov	r1, r3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fbcb 	bl	800af2c <USBD_StdItfReq>
 800a796:	4603      	mov	r3, r0
 800a798:	73fb      	strb	r3, [r7, #15]
      break;
 800a79a:	e016      	b.n	800a7ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fc2d 	bl	800b004 <USBD_StdEPReq>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ae:	e00c      	b.n	800a7ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a7b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	4619      	mov	r1, r3
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f001 fec6 	bl	800c550 <USBD_LL_StallEP>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a7c8:	bf00      	nop
  }

  return ret;
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a7e6:	7afb      	ldrb	r3, [r7, #11]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d16e      	bne.n	800a8ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a7f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7fa:	2b03      	cmp	r3, #3
 800a7fc:	f040 8098 	bne.w	800a930 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	689a      	ldr	r2, [r3, #8]
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d913      	bls.n	800a834 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	689a      	ldr	r2, [r3, #8]
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	1ad2      	subs	r2, r2, r3
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	68da      	ldr	r2, [r3, #12]
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	4293      	cmp	r3, r2
 800a824:	bf28      	it	cs
 800a826:	4613      	movcs	r3, r2
 800a828:	461a      	mov	r2, r3
 800a82a:	6879      	ldr	r1, [r7, #4]
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f001 f9b2 	bl	800bb96 <USBD_CtlContinueRx>
 800a832:	e07d      	b.n	800a930 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a83a:	f003 031f 	and.w	r3, r3, #31
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d014      	beq.n	800a86c <USBD_LL_DataOutStage+0x98>
 800a842:	2b02      	cmp	r3, #2
 800a844:	d81d      	bhi.n	800a882 <USBD_LL_DataOutStage+0xae>
 800a846:	2b00      	cmp	r3, #0
 800a848:	d002      	beq.n	800a850 <USBD_LL_DataOutStage+0x7c>
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d003      	beq.n	800a856 <USBD_LL_DataOutStage+0x82>
 800a84e:	e018      	b.n	800a882 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a850:	2300      	movs	r3, #0
 800a852:	75bb      	strb	r3, [r7, #22]
            break;
 800a854:	e018      	b.n	800a888 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	4619      	mov	r1, r3
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f000 fa64 	bl	800ad2e <USBD_CoreFindIF>
 800a866:	4603      	mov	r3, r0
 800a868:	75bb      	strb	r3, [r7, #22]
            break;
 800a86a:	e00d      	b.n	800a888 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a872:	b2db      	uxtb	r3, r3
 800a874:	4619      	mov	r1, r3
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f000 fa66 	bl	800ad48 <USBD_CoreFindEP>
 800a87c:	4603      	mov	r3, r0
 800a87e:	75bb      	strb	r3, [r7, #22]
            break;
 800a880:	e002      	b.n	800a888 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a882:	2300      	movs	r3, #0
 800a884:	75bb      	strb	r3, [r7, #22]
            break;
 800a886:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a888:	7dbb      	ldrb	r3, [r7, #22]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d119      	bne.n	800a8c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b03      	cmp	r3, #3
 800a898:	d113      	bne.n	800a8c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a89a:	7dba      	ldrb	r2, [r7, #22]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	32ae      	adds	r2, #174	@ 0xae
 800a8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00b      	beq.n	800a8c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a8aa:	7dba      	ldrb	r2, [r7, #22]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a8b2:	7dba      	ldrb	r2, [r7, #22]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	32ae      	adds	r2, #174	@ 0xae
 800a8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f001 f978 	bl	800bbb8 <USBD_CtlSendStatus>
 800a8c8:	e032      	b.n	800a930 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a8ca:	7afb      	ldrb	r3, [r7, #11]
 800a8cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f000 fa37 	bl	800ad48 <USBD_CoreFindEP>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8de:	7dbb      	ldrb	r3, [r7, #22]
 800a8e0:	2bff      	cmp	r3, #255	@ 0xff
 800a8e2:	d025      	beq.n	800a930 <USBD_LL_DataOutStage+0x15c>
 800a8e4:	7dbb      	ldrb	r3, [r7, #22]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d122      	bne.n	800a930 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	2b03      	cmp	r3, #3
 800a8f4:	d117      	bne.n	800a926 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a8f6:	7dba      	ldrb	r2, [r7, #22]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	32ae      	adds	r2, #174	@ 0xae
 800a8fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00f      	beq.n	800a926 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a906:	7dba      	ldrb	r2, [r7, #22]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a90e:	7dba      	ldrb	r2, [r7, #22]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	32ae      	adds	r2, #174	@ 0xae
 800a914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	7afa      	ldrb	r2, [r7, #11]
 800a91c:	4611      	mov	r1, r2
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	4798      	blx	r3
 800a922:	4603      	mov	r3, r0
 800a924:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a926:	7dfb      	ldrb	r3, [r7, #23]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	e000      	b.n	800a932 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b086      	sub	sp, #24
 800a93e:	af00      	add	r7, sp, #0
 800a940:	60f8      	str	r0, [r7, #12]
 800a942:	460b      	mov	r3, r1
 800a944:	607a      	str	r2, [r7, #4]
 800a946:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a948:	7afb      	ldrb	r3, [r7, #11]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d16f      	bne.n	800aa2e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3314      	adds	r3, #20
 800a952:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d15a      	bne.n	800aa14 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	689a      	ldr	r2, [r3, #8]
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	429a      	cmp	r2, r3
 800a968:	d914      	bls.n	800a994 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	689a      	ldr	r2, [r3, #8]
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	1ad2      	subs	r2, r2, r3
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	461a      	mov	r2, r3
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f001 f8da 	bl	800bb3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a986:	2300      	movs	r3, #0
 800a988:	2200      	movs	r2, #0
 800a98a:	2100      	movs	r1, #0
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f001 fee5 	bl	800c75c <USBD_LL_PrepareReceive>
 800a992:	e03f      	b.n	800aa14 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	68da      	ldr	r2, [r3, #12]
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d11c      	bne.n	800a9da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	685a      	ldr	r2, [r3, #4]
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d316      	bcc.n	800a9da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d20f      	bcs.n	800a9da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	2100      	movs	r1, #0
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f001 f8bb 	bl	800bb3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f001 fec2 	bl	800c75c <USBD_LL_PrepareReceive>
 800a9d8:	e01c      	b.n	800aa14 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d10f      	bne.n	800aa06 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d009      	beq.n	800aa06 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa06:	2180      	movs	r1, #128	@ 0x80
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f001 fda1 	bl	800c550 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f001 f8e5 	bl	800bbde <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d03a      	beq.n	800aa94 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f7ff fe42 	bl	800a6a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800aa2c:	e032      	b.n	800aa94 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aa2e:	7afb      	ldrb	r3, [r7, #11]
 800aa30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	4619      	mov	r1, r3
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f000 f985 	bl	800ad48 <USBD_CoreFindEP>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa42:	7dfb      	ldrb	r3, [r7, #23]
 800aa44:	2bff      	cmp	r3, #255	@ 0xff
 800aa46:	d025      	beq.n	800aa94 <USBD_LL_DataInStage+0x15a>
 800aa48:	7dfb      	ldrb	r3, [r7, #23]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d122      	bne.n	800aa94 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b03      	cmp	r3, #3
 800aa58:	d11c      	bne.n	800aa94 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aa5a:	7dfa      	ldrb	r2, [r7, #23]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	32ae      	adds	r2, #174	@ 0xae
 800aa60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d014      	beq.n	800aa94 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aa6a:	7dfa      	ldrb	r2, [r7, #23]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aa72:	7dfa      	ldrb	r2, [r7, #23]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	32ae      	adds	r2, #174	@ 0xae
 800aa78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa7c:	695b      	ldr	r3, [r3, #20]
 800aa7e:	7afa      	ldrb	r2, [r7, #11]
 800aa80:	4611      	mov	r1, r2
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	4798      	blx	r3
 800aa86:	4603      	mov	r3, r0
 800aa88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aa8a:	7dbb      	ldrb	r3, [r7, #22]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d001      	beq.n	800aa94 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aa90:	7dbb      	ldrb	r3, [r7, #22]
 800aa92:	e000      	b.n	800aa96 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b084      	sub	sp, #16
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d014      	beq.n	800ab04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00e      	beq.n	800ab04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	6852      	ldr	r2, [r2, #4]
 800aaf2:	b2d2      	uxtb	r2, r2
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	4798      	blx	r3
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ab00:	2303      	movs	r3, #3
 800ab02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab04:	2340      	movs	r3, #64	@ 0x40
 800ab06:	2200      	movs	r2, #0
 800ab08:	2100      	movs	r1, #0
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f001 fcac 	bl	800c468 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2240      	movs	r2, #64	@ 0x40
 800ab1c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab20:	2340      	movs	r3, #64	@ 0x40
 800ab22:	2200      	movs	r2, #0
 800ab24:	2180      	movs	r1, #128	@ 0x80
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f001 fc9e 	bl	800c468 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2240      	movs	r2, #64	@ 0x40
 800ab36:	621a      	str	r2, [r3, #32]

  return ret;
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	78fa      	ldrb	r2, [r7, #3]
 800ab52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab62:	b480      	push	{r7}
 800ab64:	b083      	sub	sp, #12
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b04      	cmp	r3, #4
 800ab74:	d006      	beq.n	800ab84 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2204      	movs	r2, #4
 800ab88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b04      	cmp	r3, #4
 800abac:	d106      	bne.n	800abbc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b082      	sub	sp, #8
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b03      	cmp	r3, #3
 800abdc:	d110      	bne.n	800ac00 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00b      	beq.n	800ac00 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abee:	69db      	ldr	r3, [r3, #28]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d005      	beq.n	800ac00 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abfa:	69db      	ldr	r3, [r3, #28]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b082      	sub	sp, #8
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	460b      	mov	r3, r1
 800ac14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	32ae      	adds	r2, #174	@ 0xae
 800ac20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e01c      	b.n	800ac66 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b03      	cmp	r3, #3
 800ac36:	d115      	bne.n	800ac64 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	32ae      	adds	r2, #174	@ 0xae
 800ac42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac46:	6a1b      	ldr	r3, [r3, #32]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00b      	beq.n	800ac64 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	32ae      	adds	r2, #174	@ 0xae
 800ac56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac5a:	6a1b      	ldr	r3, [r3, #32]
 800ac5c:	78fa      	ldrb	r2, [r7, #3]
 800ac5e:	4611      	mov	r1, r2
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b082      	sub	sp, #8
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	460b      	mov	r3, r1
 800ac78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	32ae      	adds	r2, #174	@ 0xae
 800ac84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d101      	bne.n	800ac90 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	e01c      	b.n	800acca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b03      	cmp	r3, #3
 800ac9a:	d115      	bne.n	800acc8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	32ae      	adds	r2, #174	@ 0xae
 800aca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00b      	beq.n	800acc8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	32ae      	adds	r2, #174	@ 0xae
 800acba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc0:	78fa      	ldrb	r2, [r7, #3]
 800acc2:	4611      	mov	r1, r2
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800acd2:	b480      	push	{r7}
 800acd4:	b083      	sub	sp, #12
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800acf0:	2300      	movs	r3, #0
 800acf2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00e      	beq.n	800ad24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	6852      	ldr	r2, [r2, #4]
 800ad12:	b2d2      	uxtb	r2, r2
 800ad14:	4611      	mov	r1, r2
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	4798      	blx	r3
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ad20:	2303      	movs	r3, #3
 800ad22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b083      	sub	sp, #12
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	460b      	mov	r3, r1
 800ad38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b086      	sub	sp, #24
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ad76:	2300      	movs	r3, #0
 800ad78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	885b      	ldrh	r3, [r3, #2]
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	7812      	ldrb	r2, [r2, #0]
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d91f      	bls.n	800adc8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ad8e:	e013      	b.n	800adb8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ad90:	f107 030a 	add.w	r3, r7, #10
 800ad94:	4619      	mov	r1, r3
 800ad96:	6978      	ldr	r0, [r7, #20]
 800ad98:	f000 f81b 	bl	800add2 <USBD_GetNextDesc>
 800ad9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	785b      	ldrb	r3, [r3, #1]
 800ada2:	2b05      	cmp	r3, #5
 800ada4:	d108      	bne.n	800adb8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	789b      	ldrb	r3, [r3, #2]
 800adae:	78fa      	ldrb	r2, [r7, #3]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d008      	beq.n	800adc6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800adb4:	2300      	movs	r3, #0
 800adb6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	885b      	ldrh	r3, [r3, #2]
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	897b      	ldrh	r3, [r7, #10]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d8e5      	bhi.n	800ad90 <USBD_GetEpDesc+0x2e>
 800adc4:	e000      	b.n	800adc8 <USBD_GetEpDesc+0x66>
          break;
 800adc6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800adc8:	693b      	ldr	r3, [r7, #16]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800add2:	b480      	push	{r7}
 800add4:	b085      	sub	sp, #20
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	881b      	ldrh	r3, [r3, #0]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	7812      	ldrb	r2, [r2, #0]
 800ade8:	4413      	add	r3, r2
 800adea:	b29a      	uxth	r2, r3
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	461a      	mov	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4413      	add	r3, r2
 800adfa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800adfc:	68fb      	ldr	r3, [r7, #12]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b087      	sub	sp, #28
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ae28:	8a3b      	ldrh	r3, [r7, #16]
 800ae2a:	021b      	lsls	r3, r3, #8
 800ae2c:	b21a      	sxth	r2, r3
 800ae2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	b21b      	sxth	r3, r3
 800ae36:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ae38:	89fb      	ldrh	r3, [r7, #14]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	371c      	adds	r7, #28
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
	...

0800ae48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae52:	2300      	movs	r3, #0
 800ae54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae5e:	2b40      	cmp	r3, #64	@ 0x40
 800ae60:	d005      	beq.n	800ae6e <USBD_StdDevReq+0x26>
 800ae62:	2b40      	cmp	r3, #64	@ 0x40
 800ae64:	d857      	bhi.n	800af16 <USBD_StdDevReq+0xce>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00f      	beq.n	800ae8a <USBD_StdDevReq+0x42>
 800ae6a:	2b20      	cmp	r3, #32
 800ae6c:	d153      	bne.n	800af16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	32ae      	adds	r2, #174	@ 0xae
 800ae78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	4798      	blx	r3
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
      break;
 800ae88:	e04a      	b.n	800af20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	785b      	ldrb	r3, [r3, #1]
 800ae8e:	2b09      	cmp	r3, #9
 800ae90:	d83b      	bhi.n	800af0a <USBD_StdDevReq+0xc2>
 800ae92:	a201      	add	r2, pc, #4	@ (adr r2, 800ae98 <USBD_StdDevReq+0x50>)
 800ae94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae98:	0800aeed 	.word	0x0800aeed
 800ae9c:	0800af01 	.word	0x0800af01
 800aea0:	0800af0b 	.word	0x0800af0b
 800aea4:	0800aef7 	.word	0x0800aef7
 800aea8:	0800af0b 	.word	0x0800af0b
 800aeac:	0800aecb 	.word	0x0800aecb
 800aeb0:	0800aec1 	.word	0x0800aec1
 800aeb4:	0800af0b 	.word	0x0800af0b
 800aeb8:	0800aee3 	.word	0x0800aee3
 800aebc:	0800aed5 	.word	0x0800aed5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fa3c 	bl	800b340 <USBD_GetDescriptor>
          break;
 800aec8:	e024      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fbcb 	bl	800b668 <USBD_SetAddress>
          break;
 800aed2:	e01f      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fc0a 	bl	800b6f0 <USBD_SetConfig>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]
          break;
 800aee0:	e018      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fcad 	bl	800b844 <USBD_GetConfig>
          break;
 800aeea:	e013      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fcde 	bl	800b8b0 <USBD_GetStatus>
          break;
 800aef4:	e00e      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fd0d 	bl	800b918 <USBD_SetFeature>
          break;
 800aefe:	e009      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fd31 	bl	800b96a <USBD_ClrFeature>
          break;
 800af08:	e004      	b.n	800af14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fd88 	bl	800ba22 <USBD_CtlError>
          break;
 800af12:	bf00      	nop
      }
      break;
 800af14:	e004      	b.n	800af20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fd82 	bl	800ba22 <USBD_CtlError>
      break;
 800af1e:	bf00      	nop
  }

  return ret;
 800af20:	7bfb      	ldrb	r3, [r7, #15]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop

0800af2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af42:	2b40      	cmp	r3, #64	@ 0x40
 800af44:	d005      	beq.n	800af52 <USBD_StdItfReq+0x26>
 800af46:	2b40      	cmp	r3, #64	@ 0x40
 800af48:	d852      	bhi.n	800aff0 <USBD_StdItfReq+0xc4>
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <USBD_StdItfReq+0x26>
 800af4e:	2b20      	cmp	r3, #32
 800af50:	d14e      	bne.n	800aff0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	3b01      	subs	r3, #1
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d840      	bhi.n	800afe2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	889b      	ldrh	r3, [r3, #4]
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b01      	cmp	r3, #1
 800af68:	d836      	bhi.n	800afd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	889b      	ldrh	r3, [r3, #4]
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	4619      	mov	r1, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7ff fedb 	bl	800ad2e <USBD_CoreFindIF>
 800af78:	4603      	mov	r3, r0
 800af7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af7c:	7bbb      	ldrb	r3, [r7, #14]
 800af7e:	2bff      	cmp	r3, #255	@ 0xff
 800af80:	d01d      	beq.n	800afbe <USBD_StdItfReq+0x92>
 800af82:	7bbb      	ldrb	r3, [r7, #14]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d11a      	bne.n	800afbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800af88:	7bba      	ldrb	r2, [r7, #14]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	32ae      	adds	r2, #174	@ 0xae
 800af8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00f      	beq.n	800afb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800af98:	7bba      	ldrb	r2, [r7, #14]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800afa0:	7bba      	ldrb	r2, [r7, #14]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	32ae      	adds	r2, #174	@ 0xae
 800afa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	6839      	ldr	r1, [r7, #0]
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	4798      	blx	r3
 800afb2:	4603      	mov	r3, r0
 800afb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800afb6:	e004      	b.n	800afc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800afb8:	2303      	movs	r3, #3
 800afba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800afbc:	e001      	b.n	800afc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800afbe:	2303      	movs	r3, #3
 800afc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	88db      	ldrh	r3, [r3, #6]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d110      	bne.n	800afec <USBD_StdItfReq+0xc0>
 800afca:	7bfb      	ldrb	r3, [r7, #15]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10d      	bne.n	800afec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fdf1 	bl	800bbb8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800afd6:	e009      	b.n	800afec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800afd8:	6839      	ldr	r1, [r7, #0]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fd21 	bl	800ba22 <USBD_CtlError>
          break;
 800afe0:	e004      	b.n	800afec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fd1c 	bl	800ba22 <USBD_CtlError>
          break;
 800afea:	e000      	b.n	800afee <USBD_StdItfReq+0xc2>
          break;
 800afec:	bf00      	nop
      }
      break;
 800afee:	e004      	b.n	800affa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fd15 	bl	800ba22 <USBD_CtlError>
      break;
 800aff8:	bf00      	nop
  }

  return ret;
 800affa:	7bfb      	ldrb	r3, [r7, #15]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	889b      	ldrh	r3, [r3, #4]
 800b016:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b020:	2b40      	cmp	r3, #64	@ 0x40
 800b022:	d007      	beq.n	800b034 <USBD_StdEPReq+0x30>
 800b024:	2b40      	cmp	r3, #64	@ 0x40
 800b026:	f200 817f 	bhi.w	800b328 <USBD_StdEPReq+0x324>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d02a      	beq.n	800b084 <USBD_StdEPReq+0x80>
 800b02e:	2b20      	cmp	r3, #32
 800b030:	f040 817a 	bne.w	800b328 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b034:	7bbb      	ldrb	r3, [r7, #14]
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff fe85 	bl	800ad48 <USBD_CoreFindEP>
 800b03e:	4603      	mov	r3, r0
 800b040:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b042:	7b7b      	ldrb	r3, [r7, #13]
 800b044:	2bff      	cmp	r3, #255	@ 0xff
 800b046:	f000 8174 	beq.w	800b332 <USBD_StdEPReq+0x32e>
 800b04a:	7b7b      	ldrb	r3, [r7, #13]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f040 8170 	bne.w	800b332 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b052:	7b7a      	ldrb	r2, [r7, #13]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b05a:	7b7a      	ldrb	r2, [r7, #13]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	32ae      	adds	r2, #174	@ 0xae
 800b060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 8163 	beq.w	800b332 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b06c:	7b7a      	ldrb	r2, [r7, #13]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	32ae      	adds	r2, #174	@ 0xae
 800b072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	4798      	blx	r3
 800b07e:	4603      	mov	r3, r0
 800b080:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b082:	e156      	b.n	800b332 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	785b      	ldrb	r3, [r3, #1]
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d008      	beq.n	800b09e <USBD_StdEPReq+0x9a>
 800b08c:	2b03      	cmp	r3, #3
 800b08e:	f300 8145 	bgt.w	800b31c <USBD_StdEPReq+0x318>
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 809b 	beq.w	800b1ce <USBD_StdEPReq+0x1ca>
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d03c      	beq.n	800b116 <USBD_StdEPReq+0x112>
 800b09c:	e13e      	b.n	800b31c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d002      	beq.n	800b0b0 <USBD_StdEPReq+0xac>
 800b0aa:	2b03      	cmp	r3, #3
 800b0ac:	d016      	beq.n	800b0dc <USBD_StdEPReq+0xd8>
 800b0ae:	e02c      	b.n	800b10a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00d      	beq.n	800b0d2 <USBD_StdEPReq+0xce>
 800b0b6:	7bbb      	ldrb	r3, [r7, #14]
 800b0b8:	2b80      	cmp	r3, #128	@ 0x80
 800b0ba:	d00a      	beq.n	800b0d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0bc:	7bbb      	ldrb	r3, [r7, #14]
 800b0be:	4619      	mov	r1, r3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f001 fa45 	bl	800c550 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0c6:	2180      	movs	r1, #128	@ 0x80
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f001 fa41 	bl	800c550 <USBD_LL_StallEP>
 800b0ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0d0:	e020      	b.n	800b114 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fca4 	bl	800ba22 <USBD_CtlError>
              break;
 800b0da:	e01b      	b.n	800b114 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	885b      	ldrh	r3, [r3, #2]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10e      	bne.n	800b102 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00b      	beq.n	800b102 <USBD_StdEPReq+0xfe>
 800b0ea:	7bbb      	ldrb	r3, [r7, #14]
 800b0ec:	2b80      	cmp	r3, #128	@ 0x80
 800b0ee:	d008      	beq.n	800b102 <USBD_StdEPReq+0xfe>
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	88db      	ldrh	r3, [r3, #6]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d104      	bne.n	800b102 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0f8:	7bbb      	ldrb	r3, [r7, #14]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f001 fa27 	bl	800c550 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fd58 	bl	800bbb8 <USBD_CtlSendStatus>

              break;
 800b108:	e004      	b.n	800b114 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fc88 	bl	800ba22 <USBD_CtlError>
              break;
 800b112:	bf00      	nop
          }
          break;
 800b114:	e107      	b.n	800b326 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d002      	beq.n	800b128 <USBD_StdEPReq+0x124>
 800b122:	2b03      	cmp	r3, #3
 800b124:	d016      	beq.n	800b154 <USBD_StdEPReq+0x150>
 800b126:	e04b      	b.n	800b1c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00d      	beq.n	800b14a <USBD_StdEPReq+0x146>
 800b12e:	7bbb      	ldrb	r3, [r7, #14]
 800b130:	2b80      	cmp	r3, #128	@ 0x80
 800b132:	d00a      	beq.n	800b14a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 fa09 	bl	800c550 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b13e:	2180      	movs	r1, #128	@ 0x80
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f001 fa05 	bl	800c550 <USBD_LL_StallEP>
 800b146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b148:	e040      	b.n	800b1cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b14a:	6839      	ldr	r1, [r7, #0]
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 fc68 	bl	800ba22 <USBD_CtlError>
              break;
 800b152:	e03b      	b.n	800b1cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	885b      	ldrh	r3, [r3, #2]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d136      	bne.n	800b1ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b15c:	7bbb      	ldrb	r3, [r7, #14]
 800b15e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b162:	2b00      	cmp	r3, #0
 800b164:	d004      	beq.n	800b170 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b166:	7bbb      	ldrb	r3, [r7, #14]
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f001 fa26 	bl	800c5bc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fd21 	bl	800bbb8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b176:	7bbb      	ldrb	r3, [r7, #14]
 800b178:	4619      	mov	r1, r3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f7ff fde4 	bl	800ad48 <USBD_CoreFindEP>
 800b180:	4603      	mov	r3, r0
 800b182:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b184:	7b7b      	ldrb	r3, [r7, #13]
 800b186:	2bff      	cmp	r3, #255	@ 0xff
 800b188:	d01f      	beq.n	800b1ca <USBD_StdEPReq+0x1c6>
 800b18a:	7b7b      	ldrb	r3, [r7, #13]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d11c      	bne.n	800b1ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b190:	7b7a      	ldrb	r2, [r7, #13]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b198:	7b7a      	ldrb	r2, [r7, #13]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	32ae      	adds	r2, #174	@ 0xae
 800b19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d010      	beq.n	800b1ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b1a8:	7b7a      	ldrb	r2, [r7, #13]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	32ae      	adds	r2, #174	@ 0xae
 800b1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	4798      	blx	r3
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b1be:	e004      	b.n	800b1ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b1c0:	6839      	ldr	r1, [r7, #0]
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fc2d 	bl	800ba22 <USBD_CtlError>
              break;
 800b1c8:	e000      	b.n	800b1cc <USBD_StdEPReq+0x1c8>
              break;
 800b1ca:	bf00      	nop
          }
          break;
 800b1cc:	e0ab      	b.n	800b326 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	d002      	beq.n	800b1e0 <USBD_StdEPReq+0x1dc>
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	d032      	beq.n	800b244 <USBD_StdEPReq+0x240>
 800b1de:	e097      	b.n	800b310 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1e0:	7bbb      	ldrb	r3, [r7, #14]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d007      	beq.n	800b1f6 <USBD_StdEPReq+0x1f2>
 800b1e6:	7bbb      	ldrb	r3, [r7, #14]
 800b1e8:	2b80      	cmp	r3, #128	@ 0x80
 800b1ea:	d004      	beq.n	800b1f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fc17 	bl	800ba22 <USBD_CtlError>
                break;
 800b1f4:	e091      	b.n	800b31a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	da0b      	bge.n	800b216 <USBD_StdEPReq+0x212>
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
 800b200:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b204:	4613      	mov	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	3310      	adds	r3, #16
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	4413      	add	r3, r2
 800b212:	3304      	adds	r3, #4
 800b214:	e00b      	b.n	800b22e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b216:	7bbb      	ldrb	r3, [r7, #14]
 800b218:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b21c:	4613      	mov	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	4413      	add	r3, r2
 800b22c:	3304      	adds	r3, #4
 800b22e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2202      	movs	r2, #2
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fc61 	bl	800bb04 <USBD_CtlSendData>
              break;
 800b242:	e06a      	b.n	800b31a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	da11      	bge.n	800b270 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b24c:	7bbb      	ldrb	r3, [r7, #14]
 800b24e:	f003 020f 	and.w	r2, r3, #15
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	440b      	add	r3, r1
 800b25e:	3324      	adds	r3, #36	@ 0x24
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d117      	bne.n	800b296 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b266:	6839      	ldr	r1, [r7, #0]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fbda 	bl	800ba22 <USBD_CtlError>
                  break;
 800b26e:	e054      	b.n	800b31a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b270:	7bbb      	ldrb	r3, [r7, #14]
 800b272:	f003 020f 	and.w	r2, r3, #15
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	4613      	mov	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4413      	add	r3, r2
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	440b      	add	r3, r1
 800b282:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d104      	bne.n	800b296 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fbc7 	bl	800ba22 <USBD_CtlError>
                  break;
 800b294:	e041      	b.n	800b31a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	da0b      	bge.n	800b2b6 <USBD_StdEPReq+0x2b2>
 800b29e:	7bbb      	ldrb	r3, [r7, #14]
 800b2a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	3310      	adds	r3, #16
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	e00b      	b.n	800b2ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2b6:	7bbb      	ldrb	r3, [r7, #14]
 800b2b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2bc:	4613      	mov	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	3304      	adds	r3, #4
 800b2ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b2d0:	7bbb      	ldrb	r3, [r7, #14]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d002      	beq.n	800b2dc <USBD_StdEPReq+0x2d8>
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	2b80      	cmp	r3, #128	@ 0x80
 800b2da:	d103      	bne.n	800b2e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	601a      	str	r2, [r3, #0]
 800b2e2:	e00e      	b.n	800b302 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b2e4:	7bbb      	ldrb	r3, [r7, #14]
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f001 f99d 	bl	800c628 <USBD_LL_IsStallEP>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d003      	beq.n	800b2fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]
 800b2fa:	e002      	b.n	800b302 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2200      	movs	r2, #0
 800b300:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	2202      	movs	r2, #2
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fbfb 	bl	800bb04 <USBD_CtlSendData>
              break;
 800b30e:	e004      	b.n	800b31a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fb85 	bl	800ba22 <USBD_CtlError>
              break;
 800b318:	bf00      	nop
          }
          break;
 800b31a:	e004      	b.n	800b326 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fb7f 	bl	800ba22 <USBD_CtlError>
          break;
 800b324:	bf00      	nop
      }
      break;
 800b326:	e005      	b.n	800b334 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fb79 	bl	800ba22 <USBD_CtlError>
      break;
 800b330:	e000      	b.n	800b334 <USBD_StdEPReq+0x330>
      break;
 800b332:	bf00      	nop
  }

  return ret;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
	...

0800b340 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b34e:	2300      	movs	r3, #0
 800b350:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b352:	2300      	movs	r3, #0
 800b354:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	885b      	ldrh	r3, [r3, #2]
 800b35a:	0a1b      	lsrs	r3, r3, #8
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	3b01      	subs	r3, #1
 800b360:	2b0e      	cmp	r3, #14
 800b362:	f200 8152 	bhi.w	800b60a <USBD_GetDescriptor+0x2ca>
 800b366:	a201      	add	r2, pc, #4	@ (adr r2, 800b36c <USBD_GetDescriptor+0x2c>)
 800b368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36c:	0800b3dd 	.word	0x0800b3dd
 800b370:	0800b3f5 	.word	0x0800b3f5
 800b374:	0800b435 	.word	0x0800b435
 800b378:	0800b60b 	.word	0x0800b60b
 800b37c:	0800b60b 	.word	0x0800b60b
 800b380:	0800b5ab 	.word	0x0800b5ab
 800b384:	0800b5d7 	.word	0x0800b5d7
 800b388:	0800b60b 	.word	0x0800b60b
 800b38c:	0800b60b 	.word	0x0800b60b
 800b390:	0800b60b 	.word	0x0800b60b
 800b394:	0800b60b 	.word	0x0800b60b
 800b398:	0800b60b 	.word	0x0800b60b
 800b39c:	0800b60b 	.word	0x0800b60b
 800b3a0:	0800b60b 	.word	0x0800b60b
 800b3a4:	0800b3a9 	.word	0x0800b3a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ae:	69db      	ldr	r3, [r3, #28]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00b      	beq.n	800b3cc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ba:	69db      	ldr	r3, [r3, #28]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	7c12      	ldrb	r2, [r2, #16]
 800b3c0:	f107 0108 	add.w	r1, r7, #8
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	4798      	blx	r3
 800b3c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3ca:	e126      	b.n	800b61a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b3cc:	6839      	ldr	r1, [r7, #0]
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fb27 	bl	800ba22 <USBD_CtlError>
        err++;
 800b3d4:	7afb      	ldrb	r3, [r7, #11]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	72fb      	strb	r3, [r7, #11]
      break;
 800b3da:	e11e      	b.n	800b61a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	7c12      	ldrb	r2, [r2, #16]
 800b3e8:	f107 0108 	add.w	r1, r7, #8
 800b3ec:	4610      	mov	r0, r2
 800b3ee:	4798      	blx	r3
 800b3f0:	60f8      	str	r0, [r7, #12]
      break;
 800b3f2:	e112      	b.n	800b61a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	7c1b      	ldrb	r3, [r3, #16]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10d      	bne.n	800b418 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b404:	f107 0208 	add.w	r2, r7, #8
 800b408:	4610      	mov	r0, r2
 800b40a:	4798      	blx	r3
 800b40c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	3301      	adds	r3, #1
 800b412:	2202      	movs	r2, #2
 800b414:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b416:	e100      	b.n	800b61a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b420:	f107 0208 	add.w	r2, r7, #8
 800b424:	4610      	mov	r0, r2
 800b426:	4798      	blx	r3
 800b428:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	3301      	adds	r3, #1
 800b42e:	2202      	movs	r2, #2
 800b430:	701a      	strb	r2, [r3, #0]
      break;
 800b432:	e0f2      	b.n	800b61a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	885b      	ldrh	r3, [r3, #2]
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	2b05      	cmp	r3, #5
 800b43c:	f200 80ac 	bhi.w	800b598 <USBD_GetDescriptor+0x258>
 800b440:	a201      	add	r2, pc, #4	@ (adr r2, 800b448 <USBD_GetDescriptor+0x108>)
 800b442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b446:	bf00      	nop
 800b448:	0800b461 	.word	0x0800b461
 800b44c:	0800b495 	.word	0x0800b495
 800b450:	0800b4c9 	.word	0x0800b4c9
 800b454:	0800b4fd 	.word	0x0800b4fd
 800b458:	0800b531 	.word	0x0800b531
 800b45c:	0800b565 	.word	0x0800b565
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00b      	beq.n	800b484 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	7c12      	ldrb	r2, [r2, #16]
 800b478:	f107 0108 	add.w	r1, r7, #8
 800b47c:	4610      	mov	r0, r2
 800b47e:	4798      	blx	r3
 800b480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b482:	e091      	b.n	800b5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 facb 	bl	800ba22 <USBD_CtlError>
            err++;
 800b48c:	7afb      	ldrb	r3, [r7, #11]
 800b48e:	3301      	adds	r3, #1
 800b490:	72fb      	strb	r3, [r7, #11]
          break;
 800b492:	e089      	b.n	800b5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00b      	beq.n	800b4b8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	7c12      	ldrb	r2, [r2, #16]
 800b4ac:	f107 0108 	add.w	r1, r7, #8
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	4798      	blx	r3
 800b4b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4b6:	e077      	b.n	800b5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fab1 	bl	800ba22 <USBD_CtlError>
            err++;
 800b4c0:	7afb      	ldrb	r3, [r7, #11]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b4c6:	e06f      	b.n	800b5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00b      	beq.n	800b4ec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	7c12      	ldrb	r2, [r2, #16]
 800b4e0:	f107 0108 	add.w	r1, r7, #8
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	4798      	blx	r3
 800b4e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ea:	e05d      	b.n	800b5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4ec:	6839      	ldr	r1, [r7, #0]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fa97 	bl	800ba22 <USBD_CtlError>
            err++;
 800b4f4:	7afb      	ldrb	r3, [r7, #11]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4fa:	e055      	b.n	800b5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b502:	691b      	ldr	r3, [r3, #16]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00b      	beq.n	800b520 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	7c12      	ldrb	r2, [r2, #16]
 800b514:	f107 0108 	add.w	r1, r7, #8
 800b518:	4610      	mov	r0, r2
 800b51a:	4798      	blx	r3
 800b51c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b51e:	e043      	b.n	800b5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fa7d 	bl	800ba22 <USBD_CtlError>
            err++;
 800b528:	7afb      	ldrb	r3, [r7, #11]
 800b52a:	3301      	adds	r3, #1
 800b52c:	72fb      	strb	r3, [r7, #11]
          break;
 800b52e:	e03b      	b.n	800b5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b536:	695b      	ldr	r3, [r3, #20]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00b      	beq.n	800b554 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b542:	695b      	ldr	r3, [r3, #20]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	7c12      	ldrb	r2, [r2, #16]
 800b548:	f107 0108 	add.w	r1, r7, #8
 800b54c:	4610      	mov	r0, r2
 800b54e:	4798      	blx	r3
 800b550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b552:	e029      	b.n	800b5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b554:	6839      	ldr	r1, [r7, #0]
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 fa63 	bl	800ba22 <USBD_CtlError>
            err++;
 800b55c:	7afb      	ldrb	r3, [r7, #11]
 800b55e:	3301      	adds	r3, #1
 800b560:	72fb      	strb	r3, [r7, #11]
          break;
 800b562:	e021      	b.n	800b5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00b      	beq.n	800b588 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	7c12      	ldrb	r2, [r2, #16]
 800b57c:	f107 0108 	add.w	r1, r7, #8
 800b580:	4610      	mov	r0, r2
 800b582:	4798      	blx	r3
 800b584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b586:	e00f      	b.n	800b5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fa49 	bl	800ba22 <USBD_CtlError>
            err++;
 800b590:	7afb      	ldrb	r3, [r7, #11]
 800b592:	3301      	adds	r3, #1
 800b594:	72fb      	strb	r3, [r7, #11]
          break;
 800b596:	e007      	b.n	800b5a8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fa41 	bl	800ba22 <USBD_CtlError>
          err++;
 800b5a0:	7afb      	ldrb	r3, [r7, #11]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b5a6:	bf00      	nop
      }
      break;
 800b5a8:	e037      	b.n	800b61a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	7c1b      	ldrb	r3, [r3, #16]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d109      	bne.n	800b5c6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5ba:	f107 0208 	add.w	r2, r7, #8
 800b5be:	4610      	mov	r0, r2
 800b5c0:	4798      	blx	r3
 800b5c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5c4:	e029      	b.n	800b61a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5c6:	6839      	ldr	r1, [r7, #0]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fa2a 	bl	800ba22 <USBD_CtlError>
        err++;
 800b5ce:	7afb      	ldrb	r3, [r7, #11]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	72fb      	strb	r3, [r7, #11]
      break;
 800b5d4:	e021      	b.n	800b61a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	7c1b      	ldrb	r3, [r3, #16]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10d      	bne.n	800b5fa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5e6:	f107 0208 	add.w	r2, r7, #8
 800b5ea:	4610      	mov	r0, r2
 800b5ec:	4798      	blx	r3
 800b5ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	2207      	movs	r2, #7
 800b5f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5f8:	e00f      	b.n	800b61a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5fa:	6839      	ldr	r1, [r7, #0]
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 fa10 	bl	800ba22 <USBD_CtlError>
        err++;
 800b602:	7afb      	ldrb	r3, [r7, #11]
 800b604:	3301      	adds	r3, #1
 800b606:	72fb      	strb	r3, [r7, #11]
      break;
 800b608:	e007      	b.n	800b61a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fa08 	bl	800ba22 <USBD_CtlError>
      err++;
 800b612:	7afb      	ldrb	r3, [r7, #11]
 800b614:	3301      	adds	r3, #1
 800b616:	72fb      	strb	r3, [r7, #11]
      break;
 800b618:	bf00      	nop
  }

  if (err != 0U)
 800b61a:	7afb      	ldrb	r3, [r7, #11]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d11e      	bne.n	800b65e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	88db      	ldrh	r3, [r3, #6]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d016      	beq.n	800b656 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b628:	893b      	ldrh	r3, [r7, #8]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00e      	beq.n	800b64c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	88da      	ldrh	r2, [r3, #6]
 800b632:	893b      	ldrh	r3, [r7, #8]
 800b634:	4293      	cmp	r3, r2
 800b636:	bf28      	it	cs
 800b638:	4613      	movcs	r3, r2
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b63e:	893b      	ldrh	r3, [r7, #8]
 800b640:	461a      	mov	r2, r3
 800b642:	68f9      	ldr	r1, [r7, #12]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fa5d 	bl	800bb04 <USBD_CtlSendData>
 800b64a:	e009      	b.n	800b660 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f9e7 	bl	800ba22 <USBD_CtlError>
 800b654:	e004      	b.n	800b660 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 faae 	bl	800bbb8 <USBD_CtlSendStatus>
 800b65c:	e000      	b.n	800b660 <USBD_GetDescriptor+0x320>
    return;
 800b65e:	bf00      	nop
  }
}
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop

0800b668 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	889b      	ldrh	r3, [r3, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d131      	bne.n	800b6de <USBD_SetAddress+0x76>
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	88db      	ldrh	r3, [r3, #6]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d12d      	bne.n	800b6de <USBD_SetAddress+0x76>
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	885b      	ldrh	r3, [r3, #2]
 800b686:	2b7f      	cmp	r3, #127	@ 0x7f
 800b688:	d829      	bhi.n	800b6de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	885b      	ldrh	r3, [r3, #2]
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b694:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d104      	bne.n	800b6ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f9bc 	bl	800ba22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6aa:	e01d      	b.n	800b6e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	7bfa      	ldrb	r2, [r7, #15]
 800b6b0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 ffe1 	bl	800c680 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fa7a 	bl	800bbb8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d004      	beq.n	800b6d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2202      	movs	r2, #2
 800b6ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6d2:	e009      	b.n	800b6e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6dc:	e004      	b.n	800b6e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b6de:	6839      	ldr	r1, [r7, #0]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 f99e 	bl	800ba22 <USBD_CtlError>
  }
}
 800b6e6:	bf00      	nop
 800b6e8:	bf00      	nop
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	885b      	ldrh	r3, [r3, #2]
 800b702:	b2da      	uxtb	r2, r3
 800b704:	4b4e      	ldr	r3, [pc, #312]	@ (800b840 <USBD_SetConfig+0x150>)
 800b706:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b708:	4b4d      	ldr	r3, [pc, #308]	@ (800b840 <USBD_SetConfig+0x150>)
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d905      	bls.n	800b71c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f985 	bl	800ba22 <USBD_CtlError>
    return USBD_FAIL;
 800b718:	2303      	movs	r3, #3
 800b71a:	e08c      	b.n	800b836 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b722:	b2db      	uxtb	r3, r3
 800b724:	2b02      	cmp	r3, #2
 800b726:	d002      	beq.n	800b72e <USBD_SetConfig+0x3e>
 800b728:	2b03      	cmp	r3, #3
 800b72a:	d029      	beq.n	800b780 <USBD_SetConfig+0x90>
 800b72c:	e075      	b.n	800b81a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b72e:	4b44      	ldr	r3, [pc, #272]	@ (800b840 <USBD_SetConfig+0x150>)
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d020      	beq.n	800b778 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b736:	4b42      	ldr	r3, [pc, #264]	@ (800b840 <USBD_SetConfig+0x150>)
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	461a      	mov	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b740:	4b3f      	ldr	r3, [pc, #252]	@ (800b840 <USBD_SetConfig+0x150>)
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	4619      	mov	r1, r3
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7fe ffb9 	bl	800a6be <USBD_SetClassConfig>
 800b74c:	4603      	mov	r3, r0
 800b74e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b750:	7bfb      	ldrb	r3, [r7, #15]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d008      	beq.n	800b768 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f962 	bl	800ba22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2202      	movs	r2, #2
 800b762:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b766:	e065      	b.n	800b834 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fa25 	bl	800bbb8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2203      	movs	r2, #3
 800b772:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b776:	e05d      	b.n	800b834 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fa1d 	bl	800bbb8 <USBD_CtlSendStatus>
      break;
 800b77e:	e059      	b.n	800b834 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b780:	4b2f      	ldr	r3, [pc, #188]	@ (800b840 <USBD_SetConfig+0x150>)
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d112      	bne.n	800b7ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2202      	movs	r2, #2
 800b78c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b790:	4b2b      	ldr	r3, [pc, #172]	@ (800b840 <USBD_SetConfig+0x150>)
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	461a      	mov	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b79a:	4b29      	ldr	r3, [pc, #164]	@ (800b840 <USBD_SetConfig+0x150>)
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	4619      	mov	r1, r3
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f7fe ffa8 	bl	800a6f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 fa06 	bl	800bbb8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b7ac:	e042      	b.n	800b834 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b7ae:	4b24      	ldr	r3, [pc, #144]	@ (800b840 <USBD_SetConfig+0x150>)
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d02a      	beq.n	800b812 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f7fe ff96 	bl	800a6f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b7ca:	4b1d      	ldr	r3, [pc, #116]	@ (800b840 <USBD_SetConfig+0x150>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7d4:	4b1a      	ldr	r3, [pc, #104]	@ (800b840 <USBD_SetConfig+0x150>)
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	4619      	mov	r1, r3
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7fe ff6f 	bl	800a6be <USBD_SetClassConfig>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00f      	beq.n	800b80a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 f918 	bl	800ba22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7fe ff7b 	bl	800a6f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2202      	movs	r2, #2
 800b804:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b808:	e014      	b.n	800b834 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f9d4 	bl	800bbb8 <USBD_CtlSendStatus>
      break;
 800b810:	e010      	b.n	800b834 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 f9d0 	bl	800bbb8 <USBD_CtlSendStatus>
      break;
 800b818:	e00c      	b.n	800b834 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f900 	bl	800ba22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b822:	4b07      	ldr	r3, [pc, #28]	@ (800b840 <USBD_SetConfig+0x150>)
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	4619      	mov	r1, r3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7fe ff64 	bl	800a6f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b82e:	2303      	movs	r3, #3
 800b830:	73fb      	strb	r3, [r7, #15]
      break;
 800b832:	bf00      	nop
  }

  return ret;
 800b834:	7bfb      	ldrb	r3, [r7, #15]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	2000a624 	.word	0x2000a624

0800b844 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	88db      	ldrh	r3, [r3, #6]
 800b852:	2b01      	cmp	r3, #1
 800b854:	d004      	beq.n	800b860 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b856:	6839      	ldr	r1, [r7, #0]
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 f8e2 	bl	800ba22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b85e:	e023      	b.n	800b8a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b02      	cmp	r3, #2
 800b86a:	dc02      	bgt.n	800b872 <USBD_GetConfig+0x2e>
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	dc03      	bgt.n	800b878 <USBD_GetConfig+0x34>
 800b870:	e015      	b.n	800b89e <USBD_GetConfig+0x5a>
 800b872:	2b03      	cmp	r3, #3
 800b874:	d00b      	beq.n	800b88e <USBD_GetConfig+0x4a>
 800b876:	e012      	b.n	800b89e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	3308      	adds	r3, #8
 800b882:	2201      	movs	r2, #1
 800b884:	4619      	mov	r1, r3
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 f93c 	bl	800bb04 <USBD_CtlSendData>
        break;
 800b88c:	e00c      	b.n	800b8a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	3304      	adds	r3, #4
 800b892:	2201      	movs	r2, #1
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f934 	bl	800bb04 <USBD_CtlSendData>
        break;
 800b89c:	e004      	b.n	800b8a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b89e:	6839      	ldr	r1, [r7, #0]
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 f8be 	bl	800ba22 <USBD_CtlError>
        break;
 800b8a6:	bf00      	nop
}
 800b8a8:	bf00      	nop
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d81e      	bhi.n	800b906 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	88db      	ldrh	r3, [r3, #6]
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	d004      	beq.n	800b8da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f8a5 	bl	800ba22 <USBD_CtlError>
        break;
 800b8d8:	e01a      	b.n	800b910 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d005      	beq.n	800b8f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	f043 0202 	orr.w	r2, r3, #2
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	330c      	adds	r3, #12
 800b8fa:	2202      	movs	r2, #2
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 f900 	bl	800bb04 <USBD_CtlSendData>
      break;
 800b904:	e004      	b.n	800b910 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f88a 	bl	800ba22 <USBD_CtlError>
      break;
 800b90e:	bf00      	nop
  }
}
 800b910:	bf00      	nop
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	885b      	ldrh	r3, [r3, #2]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d107      	bne.n	800b93a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 f940 	bl	800bbb8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b938:	e013      	b.n	800b962 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	885b      	ldrh	r3, [r3, #2]
 800b93e:	2b02      	cmp	r3, #2
 800b940:	d10b      	bne.n	800b95a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	889b      	ldrh	r3, [r3, #4]
 800b946:	0a1b      	lsrs	r3, r3, #8
 800b948:	b29b      	uxth	r3, r3
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f930 	bl	800bbb8 <USBD_CtlSendStatus>
}
 800b958:	e003      	b.n	800b962 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b95a:	6839      	ldr	r1, [r7, #0]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f860 	bl	800ba22 <USBD_CtlError>
}
 800b962:	bf00      	nop
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b082      	sub	sp, #8
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
 800b972:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	3b01      	subs	r3, #1
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d80b      	bhi.n	800b99a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	885b      	ldrh	r3, [r3, #2]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d10c      	bne.n	800b9a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f910 	bl	800bbb8 <USBD_CtlSendStatus>
      }
      break;
 800b998:	e004      	b.n	800b9a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b99a:	6839      	ldr	r1, [r7, #0]
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f840 	bl	800ba22 <USBD_CtlError>
      break;
 800b9a2:	e000      	b.n	800b9a6 <USBD_ClrFeature+0x3c>
      break;
 800b9a4:	bf00      	nop
  }
}
 800b9a6:	bf00      	nop
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	781a      	ldrb	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	781a      	ldrb	r2, [r3, #0]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f7ff fa16 	bl	800ae0a <SWAPBYTE>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f7ff fa09 	bl	800ae0a <SWAPBYTE>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	3301      	adds	r3, #1
 800ba04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f7ff f9fc 	bl	800ae0a <SWAPBYTE>
 800ba12:	4603      	mov	r3, r0
 800ba14:	461a      	mov	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	80da      	strh	r2, [r3, #6]
}
 800ba1a:	bf00      	nop
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b082      	sub	sp, #8
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba2c:	2180      	movs	r1, #128	@ 0x80
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 fd8e 	bl	800c550 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ba34:	2100      	movs	r1, #0
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 fd8a 	bl	800c550 <USBD_LL_StallEP>
}
 800ba3c:	bf00      	nop
 800ba3e:	3708      	adds	r7, #8
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba50:	2300      	movs	r3, #0
 800ba52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d036      	beq.n	800bac8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba5e:	6938      	ldr	r0, [r7, #16]
 800ba60:	f000 f836 	bl	800bad0 <USBD_GetLen>
 800ba64:	4603      	mov	r3, r0
 800ba66:	3301      	adds	r3, #1
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	005b      	lsls	r3, r3, #1
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
 800ba74:	68ba      	ldr	r2, [r7, #8]
 800ba76:	4413      	add	r3, r2
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	7812      	ldrb	r2, [r2, #0]
 800ba7c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba7e:	7dfb      	ldrb	r3, [r7, #23]
 800ba80:	3301      	adds	r3, #1
 800ba82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba84:	7dfb      	ldrb	r3, [r7, #23]
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	4413      	add	r3, r2
 800ba8a:	2203      	movs	r2, #3
 800ba8c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba8e:	7dfb      	ldrb	r3, [r7, #23]
 800ba90:	3301      	adds	r3, #1
 800ba92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba94:	e013      	b.n	800babe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ba96:	7dfb      	ldrb	r3, [r7, #23]
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	7812      	ldrb	r2, [r2, #0]
 800baa0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	3301      	adds	r3, #1
 800baa6:	613b      	str	r3, [r7, #16]
    idx++;
 800baa8:	7dfb      	ldrb	r3, [r7, #23]
 800baaa:	3301      	adds	r3, #1
 800baac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800baae:	7dfb      	ldrb	r3, [r7, #23]
 800bab0:	68ba      	ldr	r2, [r7, #8]
 800bab2:	4413      	add	r3, r2
 800bab4:	2200      	movs	r2, #0
 800bab6:	701a      	strb	r2, [r3, #0]
    idx++;
 800bab8:	7dfb      	ldrb	r3, [r7, #23]
 800baba:	3301      	adds	r3, #1
 800babc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1e7      	bne.n	800ba96 <USBD_GetString+0x52>
 800bac6:	e000      	b.n	800baca <USBD_GetString+0x86>
    return;
 800bac8:	bf00      	nop
  }
}
 800baca:	3718      	adds	r7, #24
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bad8:	2300      	movs	r3, #0
 800bada:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bae0:	e005      	b.n	800baee <USBD_GetLen+0x1e>
  {
    len++;
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
 800bae4:	3301      	adds	r3, #1
 800bae6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	3301      	adds	r3, #1
 800baec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1f5      	bne.n	800bae2 <USBD_GetLen+0x12>
  }

  return len;
 800baf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2202      	movs	r2, #2
 800bb14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	2100      	movs	r1, #0
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f000 fdde 	bl	800c6ec <USBD_LL_Transmit>

  return USBD_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b084      	sub	sp, #16
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f000 fdcd 	bl	800c6ec <USBD_LL_Transmit>

  return USBD_OK;
 800bb52:	2300      	movs	r3, #0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2203      	movs	r2, #3
 800bb6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	2100      	movs	r1, #0
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f000 fde8 	bl	800c75c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b084      	sub	sp, #16
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	60f8      	str	r0, [r7, #12]
 800bb9e:	60b9      	str	r1, [r7, #8]
 800bba0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	2100      	movs	r1, #0
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f000 fdd7 	bl	800c75c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2204      	movs	r2, #4
 800bbc4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbc8:	2300      	movs	r3, #0
 800bbca:	2200      	movs	r2, #0
 800bbcc:	2100      	movs	r1, #0
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 fd8c 	bl	800c6ec <USBD_LL_Transmit>

  return USBD_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2205      	movs	r2, #5
 800bbea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbee:	2300      	movs	r3, #0
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 fdb1 	bl	800c75c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	4912      	ldr	r1, [pc, #72]	@ (800bc54 <MX_USB_DEVICE_Init+0x50>)
 800bc0c:	4812      	ldr	r0, [pc, #72]	@ (800bc58 <MX_USB_DEVICE_Init+0x54>)
 800bc0e:	f7fe fcd9 	bl	800a5c4 <USBD_Init>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d001      	beq.n	800bc1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc18:	f7f5 f981 	bl	8000f1e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc1c:	490f      	ldr	r1, [pc, #60]	@ (800bc5c <MX_USB_DEVICE_Init+0x58>)
 800bc1e:	480e      	ldr	r0, [pc, #56]	@ (800bc58 <MX_USB_DEVICE_Init+0x54>)
 800bc20:	f7fe fd00 	bl	800a624 <USBD_RegisterClass>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d001      	beq.n	800bc2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc2a:	f7f5 f978 	bl	8000f1e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc2e:	490c      	ldr	r1, [pc, #48]	@ (800bc60 <MX_USB_DEVICE_Init+0x5c>)
 800bc30:	4809      	ldr	r0, [pc, #36]	@ (800bc58 <MX_USB_DEVICE_Init+0x54>)
 800bc32:	f7fe fbf7 	bl	800a424 <USBD_CDC_RegisterInterface>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d001      	beq.n	800bc40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bc3c:	f7f5 f96f 	bl	8000f1e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc40:	4805      	ldr	r0, [pc, #20]	@ (800bc58 <MX_USB_DEVICE_Init+0x54>)
 800bc42:	f7fe fd25 	bl	800a690 <USBD_Start>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bc4c:	f7f5 f967 	bl	8000f1e <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc50:	bf00      	nop
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	200000ac 	.word	0x200000ac
 800bc58:	2000a628 	.word	0x2000a628
 800bc5c:	20000018 	.word	0x20000018
 800bc60:	20000098 	.word	0x20000098

0800bc64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc68:	2200      	movs	r2, #0
 800bc6a:	4905      	ldr	r1, [pc, #20]	@ (800bc80 <CDC_Init_FS+0x1c>)
 800bc6c:	4805      	ldr	r0, [pc, #20]	@ (800bc84 <CDC_Init_FS+0x20>)
 800bc6e:	f7fe fbf3 	bl	800a458 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc72:	4905      	ldr	r1, [pc, #20]	@ (800bc88 <CDC_Init_FS+0x24>)
 800bc74:	4803      	ldr	r0, [pc, #12]	@ (800bc84 <CDC_Init_FS+0x20>)
 800bc76:	f7fe fc11 	bl	800a49c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	2000b104 	.word	0x2000b104
 800bc84:	2000a628 	.word	0x2000a628
 800bc88:	2000a904 	.word	0x2000a904

0800bc8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	4603      	mov	r3, r0
 800bca4:	6039      	str	r1, [r7, #0]
 800bca6:	71fb      	strb	r3, [r7, #7]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bcac:	79fb      	ldrb	r3, [r7, #7]
 800bcae:	2b23      	cmp	r3, #35	@ 0x23
 800bcb0:	d84a      	bhi.n	800bd48 <CDC_Control_FS+0xac>
 800bcb2:	a201      	add	r2, pc, #4	@ (adr r2, 800bcb8 <CDC_Control_FS+0x1c>)
 800bcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcb8:	0800bd49 	.word	0x0800bd49
 800bcbc:	0800bd49 	.word	0x0800bd49
 800bcc0:	0800bd49 	.word	0x0800bd49
 800bcc4:	0800bd49 	.word	0x0800bd49
 800bcc8:	0800bd49 	.word	0x0800bd49
 800bccc:	0800bd49 	.word	0x0800bd49
 800bcd0:	0800bd49 	.word	0x0800bd49
 800bcd4:	0800bd49 	.word	0x0800bd49
 800bcd8:	0800bd49 	.word	0x0800bd49
 800bcdc:	0800bd49 	.word	0x0800bd49
 800bce0:	0800bd49 	.word	0x0800bd49
 800bce4:	0800bd49 	.word	0x0800bd49
 800bce8:	0800bd49 	.word	0x0800bd49
 800bcec:	0800bd49 	.word	0x0800bd49
 800bcf0:	0800bd49 	.word	0x0800bd49
 800bcf4:	0800bd49 	.word	0x0800bd49
 800bcf8:	0800bd49 	.word	0x0800bd49
 800bcfc:	0800bd49 	.word	0x0800bd49
 800bd00:	0800bd49 	.word	0x0800bd49
 800bd04:	0800bd49 	.word	0x0800bd49
 800bd08:	0800bd49 	.word	0x0800bd49
 800bd0c:	0800bd49 	.word	0x0800bd49
 800bd10:	0800bd49 	.word	0x0800bd49
 800bd14:	0800bd49 	.word	0x0800bd49
 800bd18:	0800bd49 	.word	0x0800bd49
 800bd1c:	0800bd49 	.word	0x0800bd49
 800bd20:	0800bd49 	.word	0x0800bd49
 800bd24:	0800bd49 	.word	0x0800bd49
 800bd28:	0800bd49 	.word	0x0800bd49
 800bd2c:	0800bd49 	.word	0x0800bd49
 800bd30:	0800bd49 	.word	0x0800bd49
 800bd34:	0800bd49 	.word	0x0800bd49
 800bd38:	0800bd49 	.word	0x0800bd49
 800bd3c:	0800bd49 	.word	0x0800bd49
 800bd40:	0800bd49 	.word	0x0800bd49
 800bd44:	0800bd49 	.word	0x0800bd49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd48:	bf00      	nop
  }

  return (USBD_OK);
 800bd4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd62:	6879      	ldr	r1, [r7, #4]
 800bd64:	4808      	ldr	r0, [pc, #32]	@ (800bd88 <CDC_Receive_FS+0x30>)
 800bd66:	f7fe fb99 	bl	800a49c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd6a:	4807      	ldr	r0, [pc, #28]	@ (800bd88 <CDC_Receive_FS+0x30>)
 800bd6c:	f7fe fbf4 	bl	800a558 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); //funkce v main.c
  USB_My_Receive(Buf, *Len);
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4619      	mov	r1, r3
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f7f4 feae 	bl	8000ad8 <USB_My_Receive>

  return (USBD_OK);
 800bd7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	2000a628 	.word	0x2000a628

0800bd8c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	460b      	mov	r3, r1
 800bd96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bd9c:	4b0d      	ldr	r3, [pc, #52]	@ (800bdd4 <CDC_Transmit_FS+0x48>)
 800bd9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bda2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d001      	beq.n	800bdb2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e00b      	b.n	800bdca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bdb2:	887b      	ldrh	r3, [r7, #2]
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	6879      	ldr	r1, [r7, #4]
 800bdb8:	4806      	ldr	r0, [pc, #24]	@ (800bdd4 <CDC_Transmit_FS+0x48>)
 800bdba:	f7fe fb4d 	bl	800a458 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bdbe:	4805      	ldr	r0, [pc, #20]	@ (800bdd4 <CDC_Transmit_FS+0x48>)
 800bdc0:	f7fe fb8a 	bl	800a4d8 <USBD_CDC_TransmitPacket>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	2000a628 	.word	0x2000a628

0800bdd8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b087      	sub	sp, #28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	4613      	mov	r3, r2
 800bde4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bdea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	371c      	adds	r7, #28
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
	...

0800bdfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	4603      	mov	r3, r0
 800be04:	6039      	str	r1, [r7, #0]
 800be06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	2212      	movs	r2, #18
 800be0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be0e:	4b03      	ldr	r3, [pc, #12]	@ (800be1c <USBD_FS_DeviceDescriptor+0x20>)
}
 800be10:	4618      	mov	r0, r3
 800be12:	370c      	adds	r7, #12
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	200000cc 	.word	0x200000cc

0800be20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	4603      	mov	r3, r0
 800be28:	6039      	str	r1, [r7, #0]
 800be2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	2204      	movs	r2, #4
 800be30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be32:	4b03      	ldr	r3, [pc, #12]	@ (800be40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	200000ec 	.word	0x200000ec

0800be44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	4603      	mov	r3, r0
 800be4c:	6039      	str	r1, [r7, #0]
 800be4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be50:	79fb      	ldrb	r3, [r7, #7]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d105      	bne.n	800be62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	4907      	ldr	r1, [pc, #28]	@ (800be78 <USBD_FS_ProductStrDescriptor+0x34>)
 800be5a:	4808      	ldr	r0, [pc, #32]	@ (800be7c <USBD_FS_ProductStrDescriptor+0x38>)
 800be5c:	f7ff fdf2 	bl	800ba44 <USBD_GetString>
 800be60:	e004      	b.n	800be6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	4904      	ldr	r1, [pc, #16]	@ (800be78 <USBD_FS_ProductStrDescriptor+0x34>)
 800be66:	4805      	ldr	r0, [pc, #20]	@ (800be7c <USBD_FS_ProductStrDescriptor+0x38>)
 800be68:	f7ff fdec 	bl	800ba44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be6c:	4b02      	ldr	r3, [pc, #8]	@ (800be78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	2000b904 	.word	0x2000b904
 800be7c:	0800c958 	.word	0x0800c958

0800be80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	4603      	mov	r3, r0
 800be88:	6039      	str	r1, [r7, #0]
 800be8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	4904      	ldr	r1, [pc, #16]	@ (800bea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be90:	4804      	ldr	r0, [pc, #16]	@ (800bea4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be92:	f7ff fdd7 	bl	800ba44 <USBD_GetString>
  return USBD_StrDesc;
 800be96:	4b02      	ldr	r3, [pc, #8]	@ (800bea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	2000b904 	.word	0x2000b904
 800bea4:	0800c970 	.word	0x0800c970

0800bea8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	4603      	mov	r3, r0
 800beb0:	6039      	str	r1, [r7, #0]
 800beb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	221a      	movs	r2, #26
 800beb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800beba:	f000 f855 	bl	800bf68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bebe:	4b02      	ldr	r3, [pc, #8]	@ (800bec8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	200000f0 	.word	0x200000f0

0800becc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	4603      	mov	r3, r0
 800bed4:	6039      	str	r1, [r7, #0]
 800bed6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d105      	bne.n	800beea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	4907      	ldr	r1, [pc, #28]	@ (800bf00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bee2:	4808      	ldr	r0, [pc, #32]	@ (800bf04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bee4:	f7ff fdae 	bl	800ba44 <USBD_GetString>
 800bee8:	e004      	b.n	800bef4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	4904      	ldr	r1, [pc, #16]	@ (800bf00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800beee:	4805      	ldr	r0, [pc, #20]	@ (800bf04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bef0:	f7ff fda8 	bl	800ba44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bef4:	4b02      	ldr	r3, [pc, #8]	@ (800bf00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3708      	adds	r7, #8
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	2000b904 	.word	0x2000b904
 800bf04:	0800c984 	.word	0x0800c984

0800bf08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	6039      	str	r1, [r7, #0]
 800bf12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf14:	79fb      	ldrb	r3, [r7, #7]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d105      	bne.n	800bf26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf1a:	683a      	ldr	r2, [r7, #0]
 800bf1c:	4907      	ldr	r1, [pc, #28]	@ (800bf3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf1e:	4808      	ldr	r0, [pc, #32]	@ (800bf40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf20:	f7ff fd90 	bl	800ba44 <USBD_GetString>
 800bf24:	e004      	b.n	800bf30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf26:	683a      	ldr	r2, [r7, #0]
 800bf28:	4904      	ldr	r1, [pc, #16]	@ (800bf3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf2a:	4805      	ldr	r0, [pc, #20]	@ (800bf40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf2c:	f7ff fd8a 	bl	800ba44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf30:	4b02      	ldr	r3, [pc, #8]	@ (800bf3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	2000b904 	.word	0x2000b904
 800bf40:	0800c990 	.word	0x0800c990

0800bf44 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	6039      	str	r1, [r7, #0]
 800bf4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	220c      	movs	r2, #12
 800bf54:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bf56:	4b03      	ldr	r3, [pc, #12]	@ (800bf64 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr
 800bf64:	200000e0 	.word	0x200000e0

0800bf68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf6e:	4b0f      	ldr	r3, [pc, #60]	@ (800bfac <Get_SerialNum+0x44>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf74:	4b0e      	ldr	r3, [pc, #56]	@ (800bfb0 <Get_SerialNum+0x48>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf7a:	4b0e      	ldr	r3, [pc, #56]	@ (800bfb4 <Get_SerialNum+0x4c>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4413      	add	r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d009      	beq.n	800bfa2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf8e:	2208      	movs	r2, #8
 800bf90:	4909      	ldr	r1, [pc, #36]	@ (800bfb8 <Get_SerialNum+0x50>)
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f000 f814 	bl	800bfc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf98:	2204      	movs	r2, #4
 800bf9a:	4908      	ldr	r1, [pc, #32]	@ (800bfbc <Get_SerialNum+0x54>)
 800bf9c:	68b8      	ldr	r0, [r7, #8]
 800bf9e:	f000 f80f 	bl	800bfc0 <IntToUnicode>
  }
}
 800bfa2:	bf00      	nop
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	1fff7590 	.word	0x1fff7590
 800bfb0:	1fff7594 	.word	0x1fff7594
 800bfb4:	1fff7598 	.word	0x1fff7598
 800bfb8:	200000f2 	.word	0x200000f2
 800bfbc:	20000102 	.word	0x20000102

0800bfc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b087      	sub	sp, #28
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	4613      	mov	r3, r2
 800bfcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	75fb      	strb	r3, [r7, #23]
 800bfd6:	e027      	b.n	800c028 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	0f1b      	lsrs	r3, r3, #28
 800bfdc:	2b09      	cmp	r3, #9
 800bfde:	d80b      	bhi.n	800bff8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	0f1b      	lsrs	r3, r3, #28
 800bfe4:	b2da      	uxtb	r2, r3
 800bfe6:	7dfb      	ldrb	r3, [r7, #23]
 800bfe8:	005b      	lsls	r3, r3, #1
 800bfea:	4619      	mov	r1, r3
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	440b      	add	r3, r1
 800bff0:	3230      	adds	r2, #48	@ 0x30
 800bff2:	b2d2      	uxtb	r2, r2
 800bff4:	701a      	strb	r2, [r3, #0]
 800bff6:	e00a      	b.n	800c00e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	0f1b      	lsrs	r3, r3, #28
 800bffc:	b2da      	uxtb	r2, r3
 800bffe:	7dfb      	ldrb	r3, [r7, #23]
 800c000:	005b      	lsls	r3, r3, #1
 800c002:	4619      	mov	r1, r3
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	440b      	add	r3, r1
 800c008:	3237      	adds	r2, #55	@ 0x37
 800c00a:	b2d2      	uxtb	r2, r2
 800c00c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	011b      	lsls	r3, r3, #4
 800c012:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c014:	7dfb      	ldrb	r3, [r7, #23]
 800c016:	005b      	lsls	r3, r3, #1
 800c018:	3301      	adds	r3, #1
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	4413      	add	r3, r2
 800c01e:	2200      	movs	r2, #0
 800c020:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c022:	7dfb      	ldrb	r3, [r7, #23]
 800c024:	3301      	adds	r3, #1
 800c026:	75fb      	strb	r3, [r7, #23]
 800c028:	7dfa      	ldrb	r2, [r7, #23]
 800c02a:	79fb      	ldrb	r3, [r7, #7]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d3d3      	bcc.n	800bfd8 <IntToUnicode+0x18>
  }
}
 800c030:	bf00      	nop
 800c032:	bf00      	nop
 800c034:	371c      	adds	r7, #28
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
	...

0800c040 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b0b0      	sub	sp, #192	@ 0xc0
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c048:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800c04c:	2200      	movs	r2, #0
 800c04e:	601a      	str	r2, [r3, #0]
 800c050:	605a      	str	r2, [r3, #4]
 800c052:	609a      	str	r2, [r3, #8]
 800c054:	60da      	str	r2, [r3, #12]
 800c056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c058:	f107 0318 	add.w	r3, r7, #24
 800c05c:	2294      	movs	r2, #148	@ 0x94
 800c05e:	2100      	movs	r1, #0
 800c060:	4618      	mov	r0, r3
 800c062:	f000 fc33 	bl	800c8cc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c06e:	d174      	bne.n	800c15a <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c070:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c074:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c076:	2300      	movs	r3, #0
 800c078:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c07c:	f107 0318 	add.w	r3, r7, #24
 800c080:	4618      	mov	r0, r3
 800c082:	f7f9 ff4b 	bl	8005f1c <HAL_RCCEx_PeriphCLKConfig>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d001      	beq.n	800c090 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800c08c:	f7f4 ff47 	bl	8000f1e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c090:	4b34      	ldr	r3, [pc, #208]	@ (800c164 <HAL_PCD_MspInit+0x124>)
 800c092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c094:	4a33      	ldr	r2, [pc, #204]	@ (800c164 <HAL_PCD_MspInit+0x124>)
 800c096:	f043 0301 	orr.w	r3, r3, #1
 800c09a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c09c:	4b31      	ldr	r3, [pc, #196]	@ (800c164 <HAL_PCD_MspInit+0x124>)
 800c09e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0a0:	f003 0301 	and.w	r3, r3, #1
 800c0a4:	617b      	str	r3, [r7, #20]
 800c0a6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800c0a8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800c0ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0bc:	2303      	movs	r3, #3
 800c0be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c0c2:	230a      	movs	r3, #10
 800c0c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0c8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c0d2:	f7f7 fbe3 	bl	800389c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800c0d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c0da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c0ea:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c0f4:	f7f7 fbd2 	bl	800389c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c0f8:	4b1a      	ldr	r3, [pc, #104]	@ (800c164 <HAL_PCD_MspInit+0x124>)
 800c0fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0fc:	4a19      	ldr	r2, [pc, #100]	@ (800c164 <HAL_PCD_MspInit+0x124>)
 800c0fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c102:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c104:	4b17      	ldr	r3, [pc, #92]	@ (800c164 <HAL_PCD_MspInit+0x124>)
 800c106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c10c:	613b      	str	r3, [r7, #16]
 800c10e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c110:	4b14      	ldr	r3, [pc, #80]	@ (800c164 <HAL_PCD_MspInit+0x124>)
 800c112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d114      	bne.n	800c146 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c11c:	4b11      	ldr	r3, [pc, #68]	@ (800c164 <HAL_PCD_MspInit+0x124>)
 800c11e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c120:	4a10      	ldr	r2, [pc, #64]	@ (800c164 <HAL_PCD_MspInit+0x124>)
 800c122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c126:	6593      	str	r3, [r2, #88]	@ 0x58
 800c128:	4b0e      	ldr	r3, [pc, #56]	@ (800c164 <HAL_PCD_MspInit+0x124>)
 800c12a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c12c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c130:	60fb      	str	r3, [r7, #12]
 800c132:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800c134:	f7f8 fffa 	bl	800512c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c138:	4b0a      	ldr	r3, [pc, #40]	@ (800c164 <HAL_PCD_MspInit+0x124>)
 800c13a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c13c:	4a09      	ldr	r2, [pc, #36]	@ (800c164 <HAL_PCD_MspInit+0x124>)
 800c13e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c142:	6593      	str	r3, [r2, #88]	@ 0x58
 800c144:	e001      	b.n	800c14a <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800c146:	f7f8 fff1 	bl	800512c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c14a:	2200      	movs	r2, #0
 800c14c:	2100      	movs	r1, #0
 800c14e:	2043      	movs	r0, #67	@ 0x43
 800c150:	f7f6 fff7 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c154:	2043      	movs	r0, #67	@ 0x43
 800c156:	f7f7 f810 	bl	800317a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c15a:	bf00      	nop
 800c15c:	37c0      	adds	r7, #192	@ 0xc0
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	40021000 	.word	0x40021000

0800c168 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800c17c:	4619      	mov	r1, r3
 800c17e:	4610      	mov	r0, r2
 800c180:	f7fe fad3 	bl	800a72a <USBD_LL_SetupStage>
}
 800c184:	bf00      	nop
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	460b      	mov	r3, r1
 800c196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800c19e:	78fa      	ldrb	r2, [r7, #3]
 800c1a0:	6879      	ldr	r1, [r7, #4]
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	00db      	lsls	r3, r3, #3
 800c1a6:	4413      	add	r3, r2
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	440b      	add	r3, r1
 800c1ac:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	78fb      	ldrb	r3, [r7, #3]
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	f7fe fb0d 	bl	800a7d4 <USBD_LL_DataOutStage>
}
 800c1ba:	bf00      	nop
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800c1d4:	78fa      	ldrb	r2, [r7, #3]
 800c1d6:	6879      	ldr	r1, [r7, #4]
 800c1d8:	4613      	mov	r3, r2
 800c1da:	00db      	lsls	r3, r3, #3
 800c1dc:	4413      	add	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	440b      	add	r3, r1
 800c1e2:	3348      	adds	r3, #72	@ 0x48
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	78fb      	ldrb	r3, [r7, #3]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	f7fe fba6 	bl	800a93a <USBD_LL_DataInStage>
}
 800c1ee:	bf00      	nop
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b082      	sub	sp, #8
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c204:	4618      	mov	r0, r3
 800c206:	f7fe fce0 	bl	800abca <USBD_LL_SOF>
}
 800c20a:	bf00      	nop
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b084      	sub	sp, #16
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c21a:	2301      	movs	r3, #1
 800c21c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	2b02      	cmp	r3, #2
 800c224:	d001      	beq.n	800c22a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c226:	f7f4 fe7a 	bl	8000f1e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c230:	7bfa      	ldrb	r2, [r7, #15]
 800c232:	4611      	mov	r1, r2
 800c234:	4618      	mov	r0, r3
 800c236:	f7fe fc84 	bl	800ab42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c240:	4618      	mov	r0, r3
 800c242:	f7fe fc2c 	bl	800aa9e <USBD_LL_Reset>
}
 800c246:	bf00      	nop
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
	...

0800c250 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	6812      	ldr	r2, [r2, #0]
 800c266:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c26a:	f043 0301 	orr.w	r3, r3, #1
 800c26e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c276:	4618      	mov	r0, r3
 800c278:	f7fe fc73 	bl	800ab62 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6a1b      	ldr	r3, [r3, #32]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d005      	beq.n	800c290 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c284:	4b04      	ldr	r3, [pc, #16]	@ (800c298 <HAL_PCD_SuspendCallback+0x48>)
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	4a03      	ldr	r2, [pc, #12]	@ (800c298 <HAL_PCD_SuspendCallback+0x48>)
 800c28a:	f043 0306 	orr.w	r3, r3, #6
 800c28e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c290:	bf00      	nop
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	e000ed00 	.word	0xe000ed00

0800c29c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	6812      	ldr	r2, [r2, #0]
 800c2b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c2b6:	f023 0301 	bic.w	r3, r3, #1
 800c2ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a1b      	ldr	r3, [r3, #32]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d007      	beq.n	800c2d4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2c4:	4b08      	ldr	r3, [pc, #32]	@ (800c2e8 <HAL_PCD_ResumeCallback+0x4c>)
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	4a07      	ldr	r2, [pc, #28]	@ (800c2e8 <HAL_PCD_ResumeCallback+0x4c>)
 800c2ca:	f023 0306 	bic.w	r3, r3, #6
 800c2ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c2d0:	f000 faf6 	bl	800c8c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fe fc5d 	bl	800ab9a <USBD_LL_Resume>
}
 800c2e0:	bf00      	nop
 800c2e2:	3708      	adds	r7, #8
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	e000ed00 	.word	0xe000ed00

0800c2ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c2fe:	78fa      	ldrb	r2, [r7, #3]
 800c300:	4611      	mov	r1, r2
 800c302:	4618      	mov	r0, r3
 800c304:	f7fe fcb3 	bl	800ac6e <USBD_LL_IsoOUTIncomplete>
}
 800c308:	bf00      	nop
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	460b      	mov	r3, r1
 800c31a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c322:	78fa      	ldrb	r2, [r7, #3]
 800c324:	4611      	mov	r1, r2
 800c326:	4618      	mov	r0, r3
 800c328:	f7fe fc6f 	bl	800ac0a <USBD_LL_IsoINIncomplete>
}
 800c32c:	bf00      	nop
 800c32e:	3708      	adds	r7, #8
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c342:	4618      	mov	r0, r3
 800c344:	f7fe fcc5 	bl	800acd2 <USBD_LL_DevConnected>
}
 800c348:	bf00      	nop
 800c34a:	3708      	adds	r7, #8
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c35e:	4618      	mov	r0, r3
 800c360:	f7fe fcc2 	bl	800ace8 <USBD_LL_DevDisconnected>
}
 800c364:	bf00      	nop
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d13c      	bne.n	800c3f6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c37c:	4a20      	ldr	r2, [pc, #128]	@ (800c400 <USBD_LL_Init+0x94>)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	4a1e      	ldr	r2, [pc, #120]	@ (800c400 <USBD_LL_Init+0x94>)
 800c388:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c38c:	4b1c      	ldr	r3, [pc, #112]	@ (800c400 <USBD_LL_Init+0x94>)
 800c38e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c392:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c394:	4b1a      	ldr	r3, [pc, #104]	@ (800c400 <USBD_LL_Init+0x94>)
 800c396:	2206      	movs	r2, #6
 800c398:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c39a:	4b19      	ldr	r3, [pc, #100]	@ (800c400 <USBD_LL_Init+0x94>)
 800c39c:	2202      	movs	r2, #2
 800c39e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c3a0:	4b17      	ldr	r3, [pc, #92]	@ (800c400 <USBD_LL_Init+0x94>)
 800c3a2:	2202      	movs	r2, #2
 800c3a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800c3a6:	4b16      	ldr	r3, [pc, #88]	@ (800c400 <USBD_LL_Init+0x94>)
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c3ac:	4b14      	ldr	r3, [pc, #80]	@ (800c400 <USBD_LL_Init+0x94>)
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c3b2:	4b13      	ldr	r3, [pc, #76]	@ (800c400 <USBD_LL_Init+0x94>)
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800c3b8:	4b11      	ldr	r3, [pc, #68]	@ (800c400 <USBD_LL_Init+0x94>)
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c3be:	4b10      	ldr	r3, [pc, #64]	@ (800c400 <USBD_LL_Init+0x94>)
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c3c4:	4b0e      	ldr	r3, [pc, #56]	@ (800c400 <USBD_LL_Init+0x94>)
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c3ca:	480d      	ldr	r0, [pc, #52]	@ (800c400 <USBD_LL_Init+0x94>)
 800c3cc:	f7f7 fc42 	bl	8003c54 <HAL_PCD_Init>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d001      	beq.n	800c3da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c3d6:	f7f4 fda2 	bl	8000f1e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c3da:	2180      	movs	r1, #128	@ 0x80
 800c3dc:	4808      	ldr	r0, [pc, #32]	@ (800c400 <USBD_LL_Init+0x94>)
 800c3de:	f7f8 fdac 	bl	8004f3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c3e2:	2240      	movs	r2, #64	@ 0x40
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	4806      	ldr	r0, [pc, #24]	@ (800c400 <USBD_LL_Init+0x94>)
 800c3e8:	f7f8 fd60 	bl	8004eac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c3ec:	2280      	movs	r2, #128	@ 0x80
 800c3ee:	2101      	movs	r1, #1
 800c3f0:	4803      	ldr	r0, [pc, #12]	@ (800c400 <USBD_LL_Init+0x94>)
 800c3f2:	f7f8 fd5b 	bl	8004eac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	2000bb04 	.word	0x2000bb04

0800c404 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c40c:	2300      	movs	r3, #0
 800c40e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7f7 fd3e 	bl	8003e9c <HAL_PCD_Start>
 800c420:	4603      	mov	r3, r0
 800c422:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c424:	7bbb      	ldrb	r3, [r7, #14]
 800c426:	2b03      	cmp	r3, #3
 800c428:	d816      	bhi.n	800c458 <USBD_LL_Start+0x54>
 800c42a:	a201      	add	r2, pc, #4	@ (adr r2, 800c430 <USBD_LL_Start+0x2c>)
 800c42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c430:	0800c441 	.word	0x0800c441
 800c434:	0800c447 	.word	0x0800c447
 800c438:	0800c44d 	.word	0x0800c44d
 800c43c:	0800c453 	.word	0x0800c453
    case HAL_OK :
      usb_status = USBD_OK;
 800c440:	2300      	movs	r3, #0
 800c442:	73fb      	strb	r3, [r7, #15]
    break;
 800c444:	e00b      	b.n	800c45e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c446:	2303      	movs	r3, #3
 800c448:	73fb      	strb	r3, [r7, #15]
    break;
 800c44a:	e008      	b.n	800c45e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c44c:	2301      	movs	r3, #1
 800c44e:	73fb      	strb	r3, [r7, #15]
    break;
 800c450:	e005      	b.n	800c45e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c452:	2303      	movs	r3, #3
 800c454:	73fb      	strb	r3, [r7, #15]
    break;
 800c456:	e002      	b.n	800c45e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c458:	2303      	movs	r3, #3
 800c45a:	73fb      	strb	r3, [r7, #15]
    break;
 800c45c:	bf00      	nop
  }
  return usb_status;
 800c45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	4608      	mov	r0, r1
 800c472:	4611      	mov	r1, r2
 800c474:	461a      	mov	r2, r3
 800c476:	4603      	mov	r3, r0
 800c478:	70fb      	strb	r3, [r7, #3]
 800c47a:	460b      	mov	r3, r1
 800c47c:	70bb      	strb	r3, [r7, #2]
 800c47e:	4613      	mov	r3, r2
 800c480:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c482:	2300      	movs	r3, #0
 800c484:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c486:	2300      	movs	r3, #0
 800c488:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c490:	78bb      	ldrb	r3, [r7, #2]
 800c492:	883a      	ldrh	r2, [r7, #0]
 800c494:	78f9      	ldrb	r1, [r7, #3]
 800c496:	f7f8 f9e8 	bl	800486a <HAL_PCD_EP_Open>
 800c49a:	4603      	mov	r3, r0
 800c49c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c49e:	7bbb      	ldrb	r3, [r7, #14]
 800c4a0:	2b03      	cmp	r3, #3
 800c4a2:	d817      	bhi.n	800c4d4 <USBD_LL_OpenEP+0x6c>
 800c4a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c4ac <USBD_LL_OpenEP+0x44>)
 800c4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4aa:	bf00      	nop
 800c4ac:	0800c4bd 	.word	0x0800c4bd
 800c4b0:	0800c4c3 	.word	0x0800c4c3
 800c4b4:	0800c4c9 	.word	0x0800c4c9
 800c4b8:	0800c4cf 	.word	0x0800c4cf
    case HAL_OK :
      usb_status = USBD_OK;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	73fb      	strb	r3, [r7, #15]
    break;
 800c4c0:	e00b      	b.n	800c4da <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c4c6:	e008      	b.n	800c4da <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c4cc:	e005      	b.n	800c4da <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c4ce:	2303      	movs	r3, #3
 800c4d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d2:	e002      	b.n	800c4da <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c4d4:	2303      	movs	r3, #3
 800c4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d8:	bf00      	nop
  }
  return usb_status;
 800c4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3710      	adds	r7, #16
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4fe:	78fa      	ldrb	r2, [r7, #3]
 800c500:	4611      	mov	r1, r2
 800c502:	4618      	mov	r0, r3
 800c504:	f7f8 fa19 	bl	800493a <HAL_PCD_EP_Close>
 800c508:	4603      	mov	r3, r0
 800c50a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c50c:	7bbb      	ldrb	r3, [r7, #14]
 800c50e:	2b03      	cmp	r3, #3
 800c510:	d816      	bhi.n	800c540 <USBD_LL_CloseEP+0x5c>
 800c512:	a201      	add	r2, pc, #4	@ (adr r2, 800c518 <USBD_LL_CloseEP+0x34>)
 800c514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c518:	0800c529 	.word	0x0800c529
 800c51c:	0800c52f 	.word	0x0800c52f
 800c520:	0800c535 	.word	0x0800c535
 800c524:	0800c53b 	.word	0x0800c53b
    case HAL_OK :
      usb_status = USBD_OK;
 800c528:	2300      	movs	r3, #0
 800c52a:	73fb      	strb	r3, [r7, #15]
    break;
 800c52c:	e00b      	b.n	800c546 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c52e:	2303      	movs	r3, #3
 800c530:	73fb      	strb	r3, [r7, #15]
    break;
 800c532:	e008      	b.n	800c546 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c534:	2301      	movs	r3, #1
 800c536:	73fb      	strb	r3, [r7, #15]
    break;
 800c538:	e005      	b.n	800c546 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c53a:	2303      	movs	r3, #3
 800c53c:	73fb      	strb	r3, [r7, #15]
    break;
 800c53e:	e002      	b.n	800c546 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c540:	2303      	movs	r3, #3
 800c542:	73fb      	strb	r3, [r7, #15]
    break;
 800c544:	bf00      	nop
  }
  return usb_status;
 800c546:	7bfb      	ldrb	r3, [r7, #15]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3710      	adds	r7, #16
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	460b      	mov	r3, r1
 800c55a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c55c:	2300      	movs	r3, #0
 800c55e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c560:	2300      	movs	r3, #0
 800c562:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c56a:	78fa      	ldrb	r2, [r7, #3]
 800c56c:	4611      	mov	r1, r2
 800c56e:	4618      	mov	r0, r3
 800c570:	f7f8 faa8 	bl	8004ac4 <HAL_PCD_EP_SetStall>
 800c574:	4603      	mov	r3, r0
 800c576:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c578:	7bbb      	ldrb	r3, [r7, #14]
 800c57a:	2b03      	cmp	r3, #3
 800c57c:	d816      	bhi.n	800c5ac <USBD_LL_StallEP+0x5c>
 800c57e:	a201      	add	r2, pc, #4	@ (adr r2, 800c584 <USBD_LL_StallEP+0x34>)
 800c580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c584:	0800c595 	.word	0x0800c595
 800c588:	0800c59b 	.word	0x0800c59b
 800c58c:	0800c5a1 	.word	0x0800c5a1
 800c590:	0800c5a7 	.word	0x0800c5a7
    case HAL_OK :
      usb_status = USBD_OK;
 800c594:	2300      	movs	r3, #0
 800c596:	73fb      	strb	r3, [r7, #15]
    break;
 800c598:	e00b      	b.n	800c5b2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c59a:	2303      	movs	r3, #3
 800c59c:	73fb      	strb	r3, [r7, #15]
    break;
 800c59e:	e008      	b.n	800c5b2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a4:	e005      	b.n	800c5b2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5a6:	2303      	movs	r3, #3
 800c5a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c5aa:	e002      	b.n	800c5b2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c5b0:	bf00      	nop
  }
  return usb_status;
 800c5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c5d6:	78fa      	ldrb	r2, [r7, #3]
 800c5d8:	4611      	mov	r1, r2
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7f8 fad4 	bl	8004b88 <HAL_PCD_EP_ClrStall>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c5e4:	7bbb      	ldrb	r3, [r7, #14]
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	d816      	bhi.n	800c618 <USBD_LL_ClearStallEP+0x5c>
 800c5ea:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f0 <USBD_LL_ClearStallEP+0x34>)
 800c5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f0:	0800c601 	.word	0x0800c601
 800c5f4:	0800c607 	.word	0x0800c607
 800c5f8:	0800c60d 	.word	0x0800c60d
 800c5fc:	0800c613 	.word	0x0800c613
    case HAL_OK :
      usb_status = USBD_OK;
 800c600:	2300      	movs	r3, #0
 800c602:	73fb      	strb	r3, [r7, #15]
    break;
 800c604:	e00b      	b.n	800c61e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c606:	2303      	movs	r3, #3
 800c608:	73fb      	strb	r3, [r7, #15]
    break;
 800c60a:	e008      	b.n	800c61e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c60c:	2301      	movs	r3, #1
 800c60e:	73fb      	strb	r3, [r7, #15]
    break;
 800c610:	e005      	b.n	800c61e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c612:	2303      	movs	r3, #3
 800c614:	73fb      	strb	r3, [r7, #15]
    break;
 800c616:	e002      	b.n	800c61e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c618:	2303      	movs	r3, #3
 800c61a:	73fb      	strb	r3, [r7, #15]
    break;
 800c61c:	bf00      	nop
  }
  return usb_status;
 800c61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c620:	4618      	mov	r0, r3
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c628:	b480      	push	{r7}
 800c62a:	b085      	sub	sp, #20
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	460b      	mov	r3, r1
 800c632:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c63a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c63c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c640:	2b00      	cmp	r3, #0
 800c642:	da0b      	bge.n	800c65c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c644:	78fb      	ldrb	r3, [r7, #3]
 800c646:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c64a:	68f9      	ldr	r1, [r7, #12]
 800c64c:	4613      	mov	r3, r2
 800c64e:	00db      	lsls	r3, r3, #3
 800c650:	4413      	add	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	440b      	add	r3, r1
 800c656:	333e      	adds	r3, #62	@ 0x3e
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	e00b      	b.n	800c674 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c65c:	78fb      	ldrb	r3, [r7, #3]
 800c65e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c662:	68f9      	ldr	r1, [r7, #12]
 800c664:	4613      	mov	r3, r2
 800c666:	00db      	lsls	r3, r3, #3
 800c668:	4413      	add	r3, r2
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	440b      	add	r3, r1
 800c66e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800c672:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c674:	4618      	mov	r0, r3
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	460b      	mov	r3, r1
 800c68a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c68c:	2300      	movs	r3, #0
 800c68e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c690:	2300      	movs	r3, #0
 800c692:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c69a:	78fa      	ldrb	r2, [r7, #3]
 800c69c:	4611      	mov	r1, r2
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7f8 f8be 	bl	8004820 <HAL_PCD_SetAddress>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c6a8:	7bbb      	ldrb	r3, [r7, #14]
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	d816      	bhi.n	800c6dc <USBD_LL_SetUSBAddress+0x5c>
 800c6ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c6b4 <USBD_LL_SetUSBAddress+0x34>)
 800c6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b4:	0800c6c5 	.word	0x0800c6c5
 800c6b8:	0800c6cb 	.word	0x0800c6cb
 800c6bc:	0800c6d1 	.word	0x0800c6d1
 800c6c0:	0800c6d7 	.word	0x0800c6d7
    case HAL_OK :
      usb_status = USBD_OK;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c6c8:	e00b      	b.n	800c6e2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c6ca:	2303      	movs	r3, #3
 800c6cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c6ce:	e008      	b.n	800c6e2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c6d4:	e005      	b.n	800c6e2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c6d6:	2303      	movs	r3, #3
 800c6d8:	73fb      	strb	r3, [r7, #15]
    break;
 800c6da:	e002      	b.n	800c6e2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c6dc:	2303      	movs	r3, #3
 800c6de:	73fb      	strb	r3, [r7, #15]
    break;
 800c6e0:	bf00      	nop
  }
  return usb_status;
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b086      	sub	sp, #24
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	607a      	str	r2, [r7, #4]
 800c6f6:	603b      	str	r3, [r7, #0]
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c700:	2300      	movs	r3, #0
 800c702:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c70a:	7af9      	ldrb	r1, [r7, #11]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	f7f8 f9a7 	bl	8004a62 <HAL_PCD_EP_Transmit>
 800c714:	4603      	mov	r3, r0
 800c716:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c718:	7dbb      	ldrb	r3, [r7, #22]
 800c71a:	2b03      	cmp	r3, #3
 800c71c:	d816      	bhi.n	800c74c <USBD_LL_Transmit+0x60>
 800c71e:	a201      	add	r2, pc, #4	@ (adr r2, 800c724 <USBD_LL_Transmit+0x38>)
 800c720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c724:	0800c735 	.word	0x0800c735
 800c728:	0800c73b 	.word	0x0800c73b
 800c72c:	0800c741 	.word	0x0800c741
 800c730:	0800c747 	.word	0x0800c747
    case HAL_OK :
      usb_status = USBD_OK;
 800c734:	2300      	movs	r3, #0
 800c736:	75fb      	strb	r3, [r7, #23]
    break;
 800c738:	e00b      	b.n	800c752 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c73a:	2303      	movs	r3, #3
 800c73c:	75fb      	strb	r3, [r7, #23]
    break;
 800c73e:	e008      	b.n	800c752 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c740:	2301      	movs	r3, #1
 800c742:	75fb      	strb	r3, [r7, #23]
    break;
 800c744:	e005      	b.n	800c752 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c746:	2303      	movs	r3, #3
 800c748:	75fb      	strb	r3, [r7, #23]
    break;
 800c74a:	e002      	b.n	800c752 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c74c:	2303      	movs	r3, #3
 800c74e:	75fb      	strb	r3, [r7, #23]
    break;
 800c750:	bf00      	nop
  }
  return usb_status;
 800c752:	7dfb      	ldrb	r3, [r7, #23]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3718      	adds	r7, #24
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	607a      	str	r2, [r7, #4]
 800c766:	603b      	str	r3, [r7, #0]
 800c768:	460b      	mov	r3, r1
 800c76a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c76c:	2300      	movs	r3, #0
 800c76e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c77a:	7af9      	ldrb	r1, [r7, #11]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	f7f8 f925 	bl	80049ce <HAL_PCD_EP_Receive>
 800c784:	4603      	mov	r3, r0
 800c786:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c788:	7dbb      	ldrb	r3, [r7, #22]
 800c78a:	2b03      	cmp	r3, #3
 800c78c:	d816      	bhi.n	800c7bc <USBD_LL_PrepareReceive+0x60>
 800c78e:	a201      	add	r2, pc, #4	@ (adr r2, 800c794 <USBD_LL_PrepareReceive+0x38>)
 800c790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c794:	0800c7a5 	.word	0x0800c7a5
 800c798:	0800c7ab 	.word	0x0800c7ab
 800c79c:	0800c7b1 	.word	0x0800c7b1
 800c7a0:	0800c7b7 	.word	0x0800c7b7
    case HAL_OK :
      usb_status = USBD_OK;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	75fb      	strb	r3, [r7, #23]
    break;
 800c7a8:	e00b      	b.n	800c7c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	75fb      	strb	r3, [r7, #23]
    break;
 800c7ae:	e008      	b.n	800c7c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	75fb      	strb	r3, [r7, #23]
    break;
 800c7b4:	e005      	b.n	800c7c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	75fb      	strb	r3, [r7, #23]
    break;
 800c7ba:	e002      	b.n	800c7c2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	75fb      	strb	r3, [r7, #23]
    break;
 800c7c0:	bf00      	nop
  }
  return usb_status;
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3718      	adds	r7, #24
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c7de:	78fa      	ldrb	r2, [r7, #3]
 800c7e0:	4611      	mov	r1, r2
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7f8 f925 	bl	8004a32 <HAL_PCD_EP_GetRxCount>
 800c7e8:	4603      	mov	r3, r0
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3708      	adds	r7, #8
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
	...

0800c7f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c800:	78fb      	ldrb	r3, [r7, #3]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d002      	beq.n	800c80c <HAL_PCDEx_LPM_Callback+0x18>
 800c806:	2b01      	cmp	r3, #1
 800c808:	d01f      	beq.n	800c84a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c80a:	e03b      	b.n	800c884 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6a1b      	ldr	r3, [r3, #32]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d007      	beq.n	800c824 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c814:	f000 f854 	bl	800c8c0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c818:	4b1c      	ldr	r3, [pc, #112]	@ (800c88c <HAL_PCDEx_LPM_Callback+0x98>)
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	4a1b      	ldr	r2, [pc, #108]	@ (800c88c <HAL_PCDEx_LPM_Callback+0x98>)
 800c81e:	f023 0306 	bic.w	r3, r3, #6
 800c822:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	6812      	ldr	r2, [r2, #0]
 800c832:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c836:	f023 0301 	bic.w	r3, r3, #1
 800c83a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c842:	4618      	mov	r0, r3
 800c844:	f7fe f9a9 	bl	800ab9a <USBD_LL_Resume>
    break;
 800c848:	e01c      	b.n	800c884 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	6812      	ldr	r2, [r2, #0]
 800c858:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c85c:	f043 0301 	orr.w	r3, r3, #1
 800c860:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fe f97a 	bl	800ab62 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a1b      	ldr	r3, [r3, #32]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d005      	beq.n	800c882 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c876:	4b05      	ldr	r3, [pc, #20]	@ (800c88c <HAL_PCDEx_LPM_Callback+0x98>)
 800c878:	691b      	ldr	r3, [r3, #16]
 800c87a:	4a04      	ldr	r2, [pc, #16]	@ (800c88c <HAL_PCDEx_LPM_Callback+0x98>)
 800c87c:	f043 0306 	orr.w	r3, r3, #6
 800c880:	6113      	str	r3, [r2, #16]
    break;
 800c882:	bf00      	nop
}
 800c884:	bf00      	nop
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	e000ed00 	.word	0xe000ed00

0800c890 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c898:	4b03      	ldr	r3, [pc, #12]	@ (800c8a8 <USBD_static_malloc+0x18>)
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	370c      	adds	r7, #12
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	2000c010 	.word	0x2000c010

0800c8ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]

}
 800c8b4:	bf00      	nop
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr

0800c8c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c8c4:	f7f4 fad8 	bl	8000e78 <SystemClock_Config>
}
 800c8c8:	bf00      	nop
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <memset>:
 800c8cc:	4402      	add	r2, r0
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d100      	bne.n	800c8d6 <memset+0xa>
 800c8d4:	4770      	bx	lr
 800c8d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c8da:	e7f9      	b.n	800c8d0 <memset+0x4>

0800c8dc <__libc_init_array>:
 800c8dc:	b570      	push	{r4, r5, r6, lr}
 800c8de:	4d0d      	ldr	r5, [pc, #52]	@ (800c914 <__libc_init_array+0x38>)
 800c8e0:	4c0d      	ldr	r4, [pc, #52]	@ (800c918 <__libc_init_array+0x3c>)
 800c8e2:	1b64      	subs	r4, r4, r5
 800c8e4:	10a4      	asrs	r4, r4, #2
 800c8e6:	2600      	movs	r6, #0
 800c8e8:	42a6      	cmp	r6, r4
 800c8ea:	d109      	bne.n	800c900 <__libc_init_array+0x24>
 800c8ec:	4d0b      	ldr	r5, [pc, #44]	@ (800c91c <__libc_init_array+0x40>)
 800c8ee:	4c0c      	ldr	r4, [pc, #48]	@ (800c920 <__libc_init_array+0x44>)
 800c8f0:	f000 f826 	bl	800c940 <_init>
 800c8f4:	1b64      	subs	r4, r4, r5
 800c8f6:	10a4      	asrs	r4, r4, #2
 800c8f8:	2600      	movs	r6, #0
 800c8fa:	42a6      	cmp	r6, r4
 800c8fc:	d105      	bne.n	800c90a <__libc_init_array+0x2e>
 800c8fe:	bd70      	pop	{r4, r5, r6, pc}
 800c900:	f855 3b04 	ldr.w	r3, [r5], #4
 800c904:	4798      	blx	r3
 800c906:	3601      	adds	r6, #1
 800c908:	e7ee      	b.n	800c8e8 <__libc_init_array+0xc>
 800c90a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c90e:	4798      	blx	r3
 800c910:	3601      	adds	r6, #1
 800c912:	e7f2      	b.n	800c8fa <__libc_init_array+0x1e>
 800c914:	0800ca18 	.word	0x0800ca18
 800c918:	0800ca18 	.word	0x0800ca18
 800c91c:	0800ca18 	.word	0x0800ca18
 800c920:	0800ca1c 	.word	0x0800ca1c

0800c924 <memcpy>:
 800c924:	440a      	add	r2, r1
 800c926:	4291      	cmp	r1, r2
 800c928:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c92c:	d100      	bne.n	800c930 <memcpy+0xc>
 800c92e:	4770      	bx	lr
 800c930:	b510      	push	{r4, lr}
 800c932:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c93a:	4291      	cmp	r1, r2
 800c93c:	d1f9      	bne.n	800c932 <memcpy+0xe>
 800c93e:	bd10      	pop	{r4, pc}

0800c940 <_init>:
 800c940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c942:	bf00      	nop
 800c944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c946:	bc08      	pop	{r3}
 800c948:	469e      	mov	lr, r3
 800c94a:	4770      	bx	lr

0800c94c <_fini>:
 800c94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94e:	bf00      	nop
 800c950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c952:	bc08      	pop	{r3}
 800c954:	469e      	mov	lr, r3
 800c956:	4770      	bx	lr
