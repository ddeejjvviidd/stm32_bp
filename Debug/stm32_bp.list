
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d94c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800db08  0800db08  0000eb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbc0  0800dbc0  0000f10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbc0  0800dbc0  0000ebc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbc8  0800dbc8  0000f10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbc8  0800dbc8  0000ebc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbcc  0800dbcc  0000ebcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800dbd0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005490  2000010c  0800dcdc  0000f10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000559c  0800dcdc  0000f59c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024725  00000000  00000000  0000f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e4f  00000000  00000000  00033861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  000386b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001605  00000000  00000000  0003a318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff27  00000000  00000000  0003b91d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023891  00000000  00000000  0006b844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d978  00000000  00000000  0008f0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001aca4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077c4  00000000  00000000  001aca90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b4254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800daf0 	.word	0x0800daf0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800daf0 	.word	0x0800daf0

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <MX_ADC1_Init+0xe0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000530:	2200      	movs	r2, #0
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800056a:	f001 fcff 	bl	8001f6c <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 fef9 	bl	800136a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0xe4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000596:	f002 f87b 	bl	8002690 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 fee3 	bl	800136a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_ADC1_Init+0xe8>)
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a8:	230c      	movs	r3, #12
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 80005b2:	f002 f86d 	bl	8002690 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 fed5 	bl	800136a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000128 	.word	0x20000128
 80005cc:	50040000 	.word	0x50040000
 80005d0:	c7520000 	.word	0xc7520000
 80005d4:	04300002 	.word	0x04300002

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0ae      	sub	sp, #184	@ 0xb8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2294      	movs	r2, #148	@ 0x94
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00d fa3f 	bl	800da7c <memset>
  if(adcHandle->Instance==ADC1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <HAL_ADC_MspInit+0x12c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d179      	bne.n	80006fc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fe25 	bl	8006288 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000644:	f000 fe91 	bl	800136a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2e      	ldr	r2, [pc, #184]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800067e:	230b      	movs	r3, #11
 8000680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068e:	4619      	mov	r1, r3
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0x134>)
 8000692:	f003 fab9 	bl	8003c08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_ADC_MspInit+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 800069e:	2205      	movs	r2, #5
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006d2:	f002 ff23 	bl	800351c <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006dc:	f000 fe45 	bl	800136a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2012      	movs	r0, #18
 80006f2:	f002 fedc 	bl	80034ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f002 fef5 	bl	80034e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	37b8      	adds	r7, #184	@ 0xb8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	20000190 	.word	0x20000190
 8000714:	40020008 	.word	0x40020008

08000718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_DMA_Init+0xac>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <MX_DMA_Init+0xac>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_DMA_Init+0xb4>)
 8000752:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800075c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000760:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800077c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800078c:	f002 fec6 	bl	800351c <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000796:	f000 fde8 	bl	800136a <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200b      	movs	r0, #11
 80007a0:	f002 fe85 	bl	80034ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a4:	200b      	movs	r0, #11
 80007a6:	f002 fe9e 	bl	80034e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f002 fe7d 	bl	80034ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f002 fe96 	bl	80034e6 <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	4002001c 	.word	0x4002001c

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b55      	ldr	r3, [pc, #340]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a54      	ldr	r2, [pc, #336]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a4e      	ldr	r2, [pc, #312]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a48      	ldr	r2, [pc, #288]	@ (800093c <MX_GPIO_Init+0x16c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b46      	ldr	r3, [pc, #280]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x16c>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800085e:	f004 fe2b 	bl	80054b8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a35      	ldr	r2, [pc, #212]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000880:	482f      	ldr	r0, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x170>)
 8000882:	f003 fb53 	bl	8003f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	482e      	ldr	r0, [pc, #184]	@ (8000944 <MX_GPIO_Init+0x174>)
 800088c:	f003 fb4e 	bl	8003f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	482c      	ldr	r0, [pc, #176]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000896:	f003 fb49 	bl	8003f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4825      	ldr	r0, [pc, #148]	@ (8000948 <MX_GPIO_Init+0x178>)
 80008b2:	f003 f9a9 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	@ (8000940 <MX_GPIO_Init+0x170>)
 80008d0:	f003 f99a 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <MX_GPIO_Init+0x174>)
 80008e8:	f003 f98e 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_GPIO_Init+0x174>)
 8000904:	f003 f980 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000920:	f003 f972 	bl	8003c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2028      	movs	r0, #40	@ 0x28
 800092a:	f002 fdc0 	bl	80034ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f002 fdd9 	bl	80034e6 <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	@ 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	48001800 	.word	0x48001800
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d125      	bne.n	80009aa <HAL_GPIO_EXTI_Callback+0x5e>
		static bool previous;
		if(previous == false){
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000974:	f003 fada 	bl	8003f2c <HAL_GPIO_WritePin>
			previous = true;
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e008      	b.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
		} else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000986:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000988:	f003 fad0 	bl	8003f2c <HAL_GPIO_WritePin>
			previous = false;
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
		}

		int test = 1984;
 8000992:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000996:	60fb      	str	r3, [r7, #12]
		comms_append_int32(10, 1, &test);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	461a      	mov	r2, r3
 800099e:	2101      	movs	r1, #1
 80009a0:	200a      	movs	r0, #10
 80009a2:	f000 f8b5 	bl	8000b10 <comms_append_int32>
		comms_send();
 80009a6:	f000 f92b 	bl	8000c00 <comms_send>
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000250 	.word	0x20000250
 80009b8:	48000400 	.word	0x48000400

080009bc <comms_reset_active_tx_buffer>:
	DataValue data[255];
} CommsData;

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);

void comms_reset_active_tx_buffer() {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_tx_active_buffer)) = START_HEADER; // start bits
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <comms_reset_active_tx_buffer+0x38>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 80009c8:	801a      	strh	r2, [r3, #0]
	comms_tx_active_buffer[2] = 0; // buffer id
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <comms_reset_active_tx_buffer+0x38>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3302      	adds	r3, #2
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	*((uint16_t*) (comms_tx_active_buffer + 3)) = 0; // num of elements
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <comms_reset_active_tx_buffer+0x38>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3303      	adds	r3, #3
 80009da:	2200      	movs	r2, #0
 80009dc:	801a      	strh	r2, [r3, #0]
	comms_tx_active_wr_pointer = comms_tx_active_buffer + 5; // first empty position for data
 80009de:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <comms_reset_active_tx_buffer+0x38>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3305      	adds	r3, #5
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <comms_reset_active_tx_buffer+0x3c>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000a54 	.word	0x20000a54
 80009f8:	20000a58 	.word	0x20000a58

080009fc <comms_reset_active_rx_buffer>:

void comms_reset_active_rx_buffer() {
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	return;
 8000a00:	bf00      	nop
}
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <comms_uart_init>:

void comms_uart_init() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_buffer,
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <comms_uart_init+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2205      	movs	r2, #5
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <comms_uart_init+0x24>)
 8000a1c:	f006 ff28 	bl	8007870 <HAL_UART_Receive_IT>
 8000a20:	4603      	mov	r3, r0
 8000a22:	71fb      	strb	r3, [r7, #7]
			5);
	UNUSED(rcode);
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20001660 	.word	0x20001660
 8000a30:	20003864 	.word	0x20003864

08000a34 <comms_init>:

void comms_init() {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	comms_tx_active_buffer = comms_tx_buffer1;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <comms_init+0x40>)
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a78 <comms_init+0x44>)
 8000a3c:	601a      	str	r2, [r3, #0]
	comms_tx_prepared_buffer = comms_tx_buffer2;
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <comms_init+0x48>)
 8000a40:	4a0f      	ldr	r2, [pc, #60]	@ (8000a80 <comms_init+0x4c>)
 8000a42:	601a      	str	r2, [r3, #0]

	comms_reset_active_tx_buffer();
 8000a44:	f7ff ffba 	bl	80009bc <comms_reset_active_tx_buffer>
	comms_tx_prepared_wr_pointer = comms_tx_prepared_buffer + 5;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <comms_init+0x48>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	3305      	adds	r3, #5
 8000a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <comms_init+0x50>)
 8000a50:	6013      	str	r3, [r2, #0]

	if (comms_selected_interface == COMMS_UART){
 8000a52:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <comms_init+0x54>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <comms_init+0x2a>
		comms_uart_init();
 8000a5a:	f7ff ffd7 	bl	8000a0c <comms_uart_init>
	}

	comms_rx_active_buffer = comms_rx_buffer1;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <comms_init+0x58>)
 8000a60:	4a0b      	ldr	r2, [pc, #44]	@ (8000a90 <comms_init+0x5c>)
 8000a62:	601a      	str	r2, [r3, #0]
	comms_rx_prepared_buffer = comms_rx_buffer2;
 8000a64:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <comms_init+0x60>)
 8000a66:	4a0c      	ldr	r2, [pc, #48]	@ (8000a98 <comms_init+0x64>)
 8000a68:	601a      	str	r2, [r3, #0]

	comms_reset_active_rx_buffer();
 8000a6a:	f7ff ffc7 	bl	80009fc <comms_reset_active_rx_buffer>
	comms_rx_prepared_rd_pointer;
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000a54 	.word	0x20000a54
 8000a78:	20000254 	.word	0x20000254
 8000a7c:	20000a5c 	.word	0x20000a5c
 8000a80:	20000654 	.word	0x20000654
 8000a84:	20000a60 	.word	0x20000a60
 8000a88:	20001678 	.word	0x20001678
 8000a8c:	20001660 	.word	0x20001660
 8000a90:	20000e60 	.word	0x20000e60
 8000a94:	20001668 	.word	0x20001668
 8000a98:	20001260 	.word	0x20001260

08000a9c <comms_purge_id_register>:

void comms_purge_id_register() {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	memset(comms_tx_data_id_register, NULL, sizeof(comms_tx_data_id_register));
 8000aa0:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <comms_purge_id_register+0x14>)
 8000aa8:	f00c ffe8 	bl	800da7c <memset>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000a64 	.word	0x20000a64

08000ab4 <comms_find_existing_data>:

void* comms_find_existing_data(uint8_t data_id) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	if (comms_tx_data_id_register[data_id] != NULL) {
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <comms_find_existing_data+0x30>)
 8000ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d004      	beq.n	8000ad4 <comms_find_existing_data+0x20>
		return comms_tx_data_id_register[data_id];
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <comms_find_existing_data+0x30>)
 8000ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad2:	e000      	b.n	8000ad6 <comms_find_existing_data+0x22>
	}
	return NULL;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000a64 	.word	0x20000a64

08000ae8 <comms_increment_active_buffer_data>:

void comms_increment_active_buffer_data() {
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_tx_active_buffer + 3)) += 1;
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <comms_increment_active_buffer_data+0x24>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3303      	adds	r3, #3
 8000af2:	881a      	ldrh	r2, [r3, #0]
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <comms_increment_active_buffer_data+0x24>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	3303      	adds	r3, #3
 8000afa:	3201      	adds	r2, #1
 8000afc:	b292      	uxth	r2, r2
 8000afe:	801a      	strh	r2, [r3, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000a54 	.word	0x20000a54

08000b10 <comms_append_int32>:

int comms_append_int32(uint8_t data_id, uint8_t data_count, int *data) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	603a      	str	r2, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	71bb      	strb	r3, [r7, #6]
	// dissable interrupts
//	uint32_t primask = __get_PRIMASK();
//	__disable_irq();

	//check tx_register for same data id, return if existing
	if (comms_find_existing_data(data_id) != NULL) {
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ffc6 	bl	8000ab4 <comms_find_existing_data>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <comms_append_int32+0x22>
		return 1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e02d      	b.n	8000b8e <comms_append_int32+0x7e>
	}

	if (wr_status) {
 8000b32:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <comms_append_int32+0x88>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <comms_append_int32+0x2e>
		return COMMS_WR_LOCKED;
 8000b3a:	2305      	movs	r3, #5
 8000b3c:	e027      	b.n	8000b8e <comms_append_int32+0x7e>
	}
	else {
		wr_status = COMMS_INPROGRESS;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	@ (8000b98 <comms_append_int32+0x88>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
	}

	// save the pointer to new data to register
	comms_tx_data_id_register[data_id] = (void*) comms_tx_active_wr_pointer;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	4a15      	ldr	r2, [pc, #84]	@ (8000b9c <comms_append_int32+0x8c>)
 8000b48:	6812      	ldr	r2, [r2, #0]
 8000b4a:	4915      	ldr	r1, [pc, #84]	@ (8000ba0 <comms_append_int32+0x90>)
 8000b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// increment total data in buffer
	comms_increment_active_buffer_data();
 8000b50:	f7ff ffca 	bl	8000ae8 <comms_increment_active_buffer_data>

	// write id, bytes and count
	*comms_tx_active_wr_pointer = data_id;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <comms_append_int32+0x8c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	79fa      	ldrb	r2, [r7, #7]
 8000b5a:	701a      	strb	r2, [r3, #0]
	*(comms_tx_active_wr_pointer + 1) = (uint8_t) sizeof(*data);
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <comms_append_int32+0x8c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	2204      	movs	r2, #4
 8000b64:	701a      	strb	r2, [r3, #0]
	*(comms_tx_active_wr_pointer + 2) = data_count;
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <comms_append_int32+0x8c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	79ba      	ldrb	r2, [r7, #6]
 8000b6e:	701a      	strb	r2, [r3, #0]

	// write integer as 4 uint8_t to tx_buffer
	*((int*) (comms_tx_active_wr_pointer + 3)) = *data;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <comms_append_int32+0x8c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3303      	adds	r3, #3
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	601a      	str	r2, [r3, #0]

	// move pointer comms_tx_buffer_wr_pointer
	comms_tx_active_wr_pointer = (comms_tx_active_wr_pointer + 3 + sizeof(*data));
 8000b7c:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <comms_append_int32+0x8c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3307      	adds	r3, #7
 8000b82:	4a06      	ldr	r2, [pc, #24]	@ (8000b9c <comms_append_int32+0x8c>)
 8000b84:	6013      	str	r3, [r2, #0]

	wr_status = COMMS_READY;
 8000b86:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <comms_append_int32+0x88>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]

	// restore interrupts
//	__set_PRIMASK(primask);

	return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20001679 	.word	0x20001679
 8000b9c:	20000a58 	.word	0x20000a58
 8000ba0:	20000a64 	.word	0x20000a64

08000ba4 <comms_switch_tx_buffers>:

void comms_switch_tx_buffers() {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000baa:	f3ef 8310 	mrs	r3, PRIMASK
 8000bae:	603b      	str	r3, [r7, #0]
  return(result);
 8000bb0:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000bb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
	__disable_irq();

	// switch buffers
	uint8_t *_temp = comms_tx_prepared_buffer;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <comms_switch_tx_buffers+0x4c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60bb      	str	r3, [r7, #8]
	comms_tx_prepared_buffer = comms_tx_active_buffer;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <comms_switch_tx_buffers+0x50>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf0 <comms_switch_tx_buffers+0x4c>)
 8000bc4:	6013      	str	r3, [r2, #0]
	comms_tx_active_buffer = _temp;
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf4 <comms_switch_tx_buffers+0x50>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	6013      	str	r3, [r2, #0]

	// set pointer to the end of prepared buffer data
	comms_tx_prepared_wr_pointer = comms_tx_active_wr_pointer;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <comms_switch_tx_buffers+0x54>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <comms_switch_tx_buffers+0x58>)
 8000bd2:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_tx_buffer();
 8000bd4:	f7ff fef2 	bl	80009bc <comms_reset_active_tx_buffer>
	comms_purge_id_register();
 8000bd8:	f7ff ff60 	bl	8000a9c <comms_purge_id_register>
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f383 8810 	msr	PRIMASK, r3
}
 8000be6:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000a5c 	.word	0x20000a5c
 8000bf4:	20000a54 	.word	0x20000a54
 8000bf8:	20000a58 	.word	0x20000a58
 8000bfc:	20000a60 	.word	0x20000a60

08000c00 <comms_send>:

int comms_send() {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

	if (tx_status > 0) {
 8000c06:	4b32      	ldr	r3, [pc, #200]	@ (8000cd0 <comms_send+0xd0>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <comms_send+0x12>
		return COMMS_TX_LOCKED;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	e059      	b.n	8000cc6 <comms_send+0xc6>
	}

	tx_status = COMMS_INPROGRESS;
 8000c12:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd0 <comms_send+0xd0>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]

	// need to switch buffers
	comms_switch_tx_buffers();
 8000c18:	f7ff ffc4 	bl	8000ba4 <comms_switch_tx_buffers>

	// terminator at the end
	*comms_tx_prepared_wr_pointer = END_CR;
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd4 <comms_send+0xd4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	220d      	movs	r2, #13
 8000c22:	701a      	strb	r2, [r3, #0]
	*(comms_tx_prepared_wr_pointer + 1) = END_LF;
 8000c24:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd4 <comms_send+0xd4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	701a      	strb	r2, [r3, #0]
	comms_tx_prepared_wr_pointer += 2;
 8000c2e:	4b29      	ldr	r3, [pc, #164]	@ (8000cd4 <comms_send+0xd4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3302      	adds	r3, #2
 8000c34:	4a27      	ldr	r2, [pc, #156]	@ (8000cd4 <comms_send+0xd4>)
 8000c36:	6013      	str	r3, [r2, #0]

	// buffer is empty
	if (comms_tx_prepared_buffer[3] == 0) {
 8000c38:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <comms_send+0xd8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3303      	adds	r3, #3
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d109      	bne.n	8000c58 <comms_send+0x58>
		++empty; //DEBUG
 8000c44:	4b25      	ldr	r3, [pc, #148]	@ (8000cdc <comms_send+0xdc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4a24      	ldr	r2, [pc, #144]	@ (8000cdc <comms_send+0xdc>)
 8000c4c:	6013      	str	r3, [r2, #0]
		tx_status = COMMS_READY;
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <comms_send+0xd0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
		return COMMS_TX_BUFFER_EMPTY;
 8000c54:	2303      	movs	r3, #3
 8000c56:	e036      	b.n	8000cc6 <comms_send+0xc6>
	} else {
		full++;
 8000c58:	4b21      	ldr	r3, [pc, #132]	@ (8000ce0 <comms_send+0xe0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	4a20      	ldr	r2, [pc, #128]	@ (8000ce0 <comms_send+0xe0>)
 8000c60:	6013      	str	r3, [r2, #0]
	}

	// send data
	USBD_StatusTypeDef cdc_return = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_return = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	71bb      	strb	r3, [r7, #6]

	if(comms_selected_interface == COMMS_USB_OTG){
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <comms_send+0xe4>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d10d      	bne.n	8000c8e <comms_send+0x8e>
		cdc_return = CDC_Transmit_FS(comms_tx_prepared_buffer, comms_tx_prepared_wr_pointer - comms_tx_prepared_buffer);
 8000c72:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <comms_send+0xd8>)
 8000c74:	6818      	ldr	r0, [r3, #0]
 8000c76:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <comms_send+0xd4>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <comms_send+0xd8>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	4619      	mov	r1, r3
 8000c84:	f00c f95a 	bl	800cf3c <CDC_Transmit_FS>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	e00d      	b.n	8000caa <comms_send+0xaa>
	} else {
		uart_return = HAL_UART_Transmit(&hlpuart1, comms_tx_prepared_buffer, comms_tx_prepared_wr_pointer - comms_tx_prepared_buffer, 100);
 8000c8e:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <comms_send+0xd8>)
 8000c90:	6819      	ldr	r1, [r3, #0]
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <comms_send+0xd4>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <comms_send+0xd8>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	2364      	movs	r3, #100	@ 0x64
 8000ca0:	4811      	ldr	r0, [pc, #68]	@ (8000ce8 <comms_send+0xe8>)
 8000ca2:	f006 fd57 	bl	8007754 <HAL_UART_Transmit>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71bb      	strb	r3, [r7, #6]
	}

	tx_status = COMMS_READY;
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <comms_send+0xd0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]

	if (cdc_return) {
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <comms_send+0xba>
		return COMMS_TX_CDC_FAIL;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	e005      	b.n	8000cc6 <comms_send+0xc6>
	}

	if (uart_return) {
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <comms_send+0xc4>
		return COMMS_TX_UART_FAIL;
 8000cc0:	2306      	movs	r3, #6
 8000cc2:	e000      	b.n	8000cc6 <comms_send+0xc6>
	}

	return COMMS_SUCCESS;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000167a 	.word	0x2000167a
 8000cd4:	20000a60 	.word	0x20000a60
 8000cd8:	20000a5c 	.word	0x20000a5c
 8000cdc:	20001670 	.word	0x20001670
 8000ce0:	20001674 	.word	0x20001674
 8000ce4:	20001678 	.word	0x20001678
 8000ce8:	20003864 	.word	0x20003864

08000cec <comms_switch_rx_buffers>:

void comms_switch_rx_buffers(){
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8000cf6:	607b      	str	r3, [r7, #4]
  return(result);
 8000cf8:	687b      	ldr	r3, [r7, #4]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000cfa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	f383 8810 	msr	PRIMASK, r3
}
 8000d0a:	bf00      	nop

	//TODO: do

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <comms_cdc_rx_callback>:

void comms_cdc_rx_callback(uint8_t *buffer, uint32_t length) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
	// call this func inside of usbd_cdc_if.c in CDC_Receive_FS()

	if (comms_selected_interface != COMMS_USB_OTG){
 8000d22:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <comms_cdc_rx_callback+0x5c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d11b      	bne.n	8000d62 <comms_cdc_rx_callback+0x4a>
		// quit if UART is in use
		return;
	}

	if (rx_status) {
 8000d2a:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <comms_cdc_rx_callback+0x60>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d119      	bne.n	8000d66 <comms_cdc_rx_callback+0x4e>
		// not ready yet
		return;
	}

	if (length < 3) {
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d918      	bls.n	8000d6a <comms_cdc_rx_callback+0x52>
		// invalid buffer
		return;
	}

	rx_status = COMMS_INPROGRESS;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <comms_cdc_rx_callback+0x60>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]

	//copy to the active buffer
	memcpy(comms_rx_active_buffer, buffer, length);
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <comms_cdc_rx_callback+0x64>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f00c fec4 	bl	800dad4 <memcpy>
	comms_rx_active_rd_pointer = comms_rx_active_buffer + 5;
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <comms_cdc_rx_callback+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	3305      	adds	r3, #5
 8000d52:	4a0b      	ldr	r2, [pc, #44]	@ (8000d80 <comms_cdc_rx_callback+0x68>)
 8000d54:	6013      	str	r3, [r2, #0]

	comms_switch_rx_buffers();
 8000d56:	f7ff ffc9 	bl	8000cec <comms_switch_rx_buffers>

	rx_status = COMMS_RECEIVED;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	@ (8000d78 <comms_cdc_rx_callback+0x60>)
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	e004      	b.n	8000d6c <comms_cdc_rx_callback+0x54>
		return;
 8000d62:	bf00      	nop
 8000d64:	e002      	b.n	8000d6c <comms_cdc_rx_callback+0x54>
		return;
 8000d66:	bf00      	nop
 8000d68:	e000      	b.n	8000d6c <comms_cdc_rx_callback+0x54>
		return;
 8000d6a:	bf00      	nop
}
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20001678 	.word	0x20001678
 8000d78:	2000167b 	.word	0x2000167b
 8000d7c:	20001660 	.word	0x20001660
 8000d80:	20001664 	.word	0x20001664

08000d84 <comms_data_handler>:

__weak void comms_data_handler(CommsData *data) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

	if (data == NULL) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d00c      	beq.n	8000dac <comms_data_handler+0x28>
		return;
	}

	switch (data->data_id) {
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b05      	cmp	r3, #5
 8000d98:	d10a      	bne.n	8000db0 <comms_data_handler+0x2c>
	case 5:
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
				(GPIO_PinState) (data->data[0].u8));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	791b      	ldrb	r3, [r3, #4]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000da4:	4804      	ldr	r0, [pc, #16]	@ (8000db8 <comms_data_handler+0x34>)
 8000da6:	f003 f8c1 	bl	8003f2c <HAL_GPIO_WritePin>
		break;
 8000daa:	e002      	b.n	8000db2 <comms_data_handler+0x2e>
		return;
 8000dac:	bf00      	nop
 8000dae:	e000      	b.n	8000db2 <comms_data_handler+0x2e>
	default:
		break;
 8000db0:	bf00      	nop
	}

}
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	48000400 	.word	0x48000400

08000dbc <comms_rx_process>:

void comms_rx_process() {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8000dc2:	af00      	add	r7, sp, #0
	if (!rx_status) {
 8000dc4:	4b50      	ldr	r3, [pc, #320]	@ (8000f08 <comms_rx_process+0x14c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 8095 	beq.w	8000ef8 <comms_rx_process+0x13c>
		// no data yet
		return;
	}

	if (comms_rx_prepared_buffer[0] == 0) {
 8000dce:	4b4f      	ldr	r3, [pc, #316]	@ (8000f0c <comms_rx_process+0x150>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f040 808b 	bne.w	8000ef0 <comms_rx_process+0x134>
		uint16_t elements = *((uint16_t*) (comms_rx_prepared_buffer + 3));
 8000dda:	4b4c      	ldr	r3, [pc, #304]	@ (8000f0c <comms_rx_process+0x150>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000de2:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406

		for (; elements > 0; --elements) {
 8000de6:	e07e      	b.n	8000ee6 <comms_rx_process+0x12a>
			CommsData data;
			data.data_id = *comms_rx_prepared_rd_pointer;
 8000de8:	4b49      	ldr	r3, [pc, #292]	@ (8000f10 <comms_rx_process+0x154>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000df2:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000df6:	701a      	strb	r2, [r3, #0]
			data.data_size = *(comms_rx_prepared_rd_pointer + 1);
 8000df8:	4b45      	ldr	r3, [pc, #276]	@ (8000f10 <comms_rx_process+0x154>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	785a      	ldrb	r2, [r3, #1]
 8000dfe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000e02:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000e06:	705a      	strb	r2, [r3, #1]
			data.data_count = *(comms_rx_prepared_rd_pointer + 2);
 8000e08:	4b41      	ldr	r3, [pc, #260]	@ (8000f10 <comms_rx_process+0x154>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	789a      	ldrb	r2, [r3, #2]
 8000e0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000e12:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000e16:	709a      	strb	r2, [r3, #2]

			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000e1e:	e03d      	b.n	8000e9c <comms_rx_process+0xe0>
				switch (data.data_size) {
 8000e20:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000e24:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000e28:	785b      	ldrb	r3, [r3, #1]
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d023      	beq.n	8000e76 <comms_rx_process+0xba>
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	dc64      	bgt.n	8000efc <comms_rx_process+0x140>
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d002      	beq.n	8000e3c <comms_rx_process+0x80>
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d00e      	beq.n	8000e58 <comms_rx_process+0x9c>
				case 4:
					data.data[x].u32 =
							*((uint32_t*) (comms_rx_prepared_rd_pointer + 3));
					break;
				default:
					return;
 8000e3a:	e05f      	b.n	8000efc <comms_rx_process+0x140>
					data.data[x].u8 = *(comms_rx_prepared_rd_pointer + 3);
 8000e3c:	4b34      	ldr	r3, [pc, #208]	@ (8000f10 <comms_rx_process+0x154>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000e44:	78d1      	ldrb	r1, [r2, #3]
 8000e46:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000e4a:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	460a      	mov	r2, r1
 8000e54:	711a      	strb	r2, [r3, #4]
					break;
 8000e56:	e01c      	b.n	8000e92 <comms_rx_process+0xd6>
					data.data[x].u16 =
 8000e58:	4b2d      	ldr	r3, [pc, #180]	@ (8000f10 <comms_rx_process+0x154>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000e60:	f8b2 1003 	ldrh.w	r1, [r2, #3]
 8000e64:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000e68:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	460a      	mov	r2, r1
 8000e72:	809a      	strh	r2, [r3, #4]
					break;
 8000e74:	e00d      	b.n	8000e92 <comms_rx_process+0xd6>
					data.data[x].u32 =
 8000e76:	4b26      	ldr	r3, [pc, #152]	@ (8000f10 <comms_rx_process+0x154>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000e7e:	f8d2 2003 	ldr.w	r2, [r2, #3]
 8000e82:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8000e86:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	605a      	str	r2, [r3, #4]
					break;
 8000e90:	bf00      	nop
			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000e92:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000e96:	3301      	adds	r3, #1
 8000e98:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000e9c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000ea0:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000ea4:	789b      	ldrb	r3, [r3, #2]
 8000ea6:	f897 2405 	ldrb.w	r2, [r7, #1029]	@ 0x405
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d3b8      	bcc.n	8000e20 <comms_rx_process+0x64>
				}
			}

			comms_data_handler(&data);
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff67 	bl	8000d84 <comms_data_handler>

			comms_rx_prepared_rd_pointer = (comms_rx_prepared_rd_pointer + 3
					+ (data.data_size * data.data_count));
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <comms_rx_process+0x154>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000ebe:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000ec2:	785b      	ldrb	r3, [r3, #1]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000eca:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000ece:	789b      	ldrb	r3, [r3, #2]
 8000ed0:	fb01 f303 	mul.w	r3, r1, r3
 8000ed4:	3303      	adds	r3, #3
 8000ed6:	4413      	add	r3, r2
			comms_rx_prepared_rd_pointer = (comms_rx_prepared_rd_pointer + 3
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f10 <comms_rx_process+0x154>)
 8000eda:	6013      	str	r3, [r2, #0]
		for (; elements > 0; --elements) {
 8000edc:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406
 8000ee6:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f47f af7c 	bne.w	8000de8 <comms_rx_process+0x2c>
		}
	}

	rx_status = COMMS_READY;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <comms_rx_process+0x14c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	e002      	b.n	8000efe <comms_rx_process+0x142>
		return;
 8000ef8:	bf00      	nop
 8000efa:	e000      	b.n	8000efe <comms_rx_process+0x142>
					return;
 8000efc:	bf00      	nop
}
 8000efe:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000167b 	.word	0x2000167b
 8000f0c:	20001668 	.word	0x20001668
 8000f10:	2000166c 	.word	0x2000166c

08000f14 <comms_lpuart_rx_callback>:


void comms_lpuart_rx_callback(UART_HandleTypeDef *huart) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

	if (comms_selected_interface != COMMS_UART){
 8000f1c:	4b03      	ldr	r3, [pc, #12]	@ (8000f2c <comms_lpuart_rx_callback+0x18>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
	// get number of elements
	// FOR ELEMENT LOOP:
	//		load packet head
	//		load data based on that parameters

}
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	20001678 	.word	0x20001678

08000f30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	// user defined __weak callback from stm32l4xx_hal_uart.c
	// uart loaded data
	if (huart == &hlpuart1) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a05      	ldr	r2, [pc, #20]	@ (8000f50 <HAL_UART_RxCpltCallback+0x20>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d102      	bne.n	8000f46 <HAL_UART_RxCpltCallback+0x16>
		comms_lpuart_rx_callback(huart);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ffe7 	bl	8000f14 <comms_lpuart_rx_callback>
	}
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20003864 	.word	0x20003864

08000f54 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f98 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d10d      	bne.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f64:	2180      	movs	r1, #128	@ 0x80
 8000f66:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f68:	f002 fff8 	bl	8003f5c <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f74:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		comms_append_int32(1, 1, &periodical);
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff fdc8 	bl	8000b10 <comms_append_int32>
	}

	if (htim == &htim3) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d103      	bne.n	8000f90 <HAL_TIM_PeriodElapsedCallback+0x3c>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000f88:	2180      	movs	r1, #128	@ 0x80
 8000f8a:	4807      	ldr	r0, [pc, #28]	@ (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f8c:	f002 ffe6 	bl	8003f5c <HAL_GPIO_TogglePin>
		}
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20003818 	.word	0x20003818
 8000f9c:	48000400 	.word	0x48000400
 8000fa0:	2000167c 	.word	0x2000167c
 8000fa4:	20003780 	.word	0x20003780
 8000fa8:	48000800 	.word	0x48000800

08000fac <myDmaFunction>:

char testdata[10];

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <myDmaFunction+0x28>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fba:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <myDmaFunction+0x2c>)
 8000fbc:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8000fbe:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <myDmaFunction+0x28>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc4:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <myDmaFunction+0x30>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	200037cc 	.word	0x200037cc
 8000fd8:	20001688 	.word	0x20001688
 8000fdc:	2000168c 	.word	0x2000168c

08000fe0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fe8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fec:	485a      	ldr	r0, [pc, #360]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x178>)
 8000fee:	f002 ffb5 	bl	8003f5c <HAL_GPIO_TogglePin>

    ++call_count;
 8000ff2:	4b5a      	ldr	r3, [pc, #360]	@ (800115c <HAL_ADC_ConvCpltCallback+0x17c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	4a58      	ldr	r2, [pc, #352]	@ (800115c <HAL_ADC_ConvCpltCallback+0x17c>)
 8000ffa:	6013      	str	r3, [r2, #0]

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 8000ffc:	4b58      	ldr	r3, [pc, #352]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x180>)
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
    adcIn1 = 0.0f;
 8001004:	4b57      	ldr	r3, [pc, #348]	@ (8001164 <HAL_ADC_ConvCpltCallback+0x184>)
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 10; i++) {
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	e027      	b.n	8001062 <HAL_ADC_ConvCpltCallback+0x82>
        adcValue += dma_data_buffer[i + 10]; // Použití druhé poloviny DMA bufferu
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	330a      	adds	r3, #10
 8001016:	4a54      	ldr	r2, [pc, #336]	@ (8001168 <HAL_ADC_ConvCpltCallback+0x188>)
 8001018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001024:	4b4e      	ldr	r3, [pc, #312]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x180>)
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102e:	4b4c      	ldr	r3, [pc, #304]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x180>)
 8001030:	edc3 7a00 	vstr	s15, [r3]
        adcIn1 += dma_data_buffer[i + 1 + 10];
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	330b      	adds	r3, #11
 8001038:	4a4b      	ldr	r2, [pc, #300]	@ (8001168 <HAL_ADC_ConvCpltCallback+0x188>)
 800103a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800103e:	ee07 3a90 	vmov	s15, r3
 8001042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001046:	4b47      	ldr	r3, [pc, #284]	@ (8001164 <HAL_ADC_ConvCpltCallback+0x184>)
 8001048:	edd3 7a00 	vldr	s15, [r3]
 800104c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001050:	4b44      	ldr	r3, [pc, #272]	@ (8001164 <HAL_ADC_ConvCpltCallback+0x184>)
 8001052:	edc3 7a00 	vstr	s15, [r3]
        i++;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 10; i++) {
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2b09      	cmp	r3, #9
 8001066:	ddd4      	ble.n	8001012 <HAL_ADC_ConvCpltCallback+0x32>
    }
    adcValue /= 50.0f;
 8001068:	4b3d      	ldr	r3, [pc, #244]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x180>)
 800106a:	ed93 7a00 	vldr	s14, [r3]
 800106e:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 800116c <HAL_ADC_ConvCpltCallback+0x18c>
 8001072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001076:	4b3a      	ldr	r3, [pc, #232]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x180>)
 8001078:	edc3 7a00 	vstr	s15, [r3]
    adcIn1 /= 50.0f;
 800107c:	4b39      	ldr	r3, [pc, #228]	@ (8001164 <HAL_ADC_ConvCpltCallback+0x184>)
 800107e:	ed93 7a00 	vldr	s14, [r3]
 8001082:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800116c <HAL_ADC_ConvCpltCallback+0x18c>
 8001086:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800108a:	4b36      	ldr	r3, [pc, #216]	@ (8001164 <HAL_ADC_ConvCpltCallback+0x184>)
 800108c:	edc3 7a00 	vstr	s15, [r3]

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 8001090:	4b33      	ldr	r3, [pc, #204]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x180>)
 8001092:	ed93 7a00 	vldr	s14, [r3]
 8001096:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001170 <HAL_ADC_ConvCpltCallback+0x190>
 800109a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001174 <HAL_ADC_ConvCpltCallback+0x194>
 80010a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a6:	edc7 7a04 	vstr	s15, [r7, #16]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 80010aa:	4b33      	ldr	r3, [pc, #204]	@ (8001178 <HAL_ADC_ConvCpltCallback+0x198>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b6:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8001170 <HAL_ADC_ConvCpltCallback+0x190>
 80010ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010be:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001174 <HAL_ADC_ConvCpltCallback+0x194>
 80010c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c6:	edc7 7a03 	vstr	s15, [r7, #12]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 80010ca:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <HAL_ADC_ConvCpltCallback+0x19c>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010d6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001170 <HAL_ADC_ConvCpltCallback+0x190>
 80010da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010de:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001174 <HAL_ADC_ConvCpltCallback+0x194>
 80010e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e6:	edc7 7a02 	vstr	s15, [r7, #8]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 80010ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80010ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001180 <HAL_ADC_ConvCpltCallback+0x1a0>
 80010fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fe:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001102:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001106:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001108:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;
    numOfCalling++;
 800110c:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <HAL_ADC_ConvCpltCallback+0x1a8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	4a1d      	ldr	r2, [pc, #116]	@ (8001188 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001114:	6013      	str	r3, [r2, #0]

    // Odeslání teploty jako integer
    temperatureInt = (int)temperature;
 8001116:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001120:	ee17 2a90 	vmov	r2, s15
 8001124:	4b19      	ldr	r3, [pc, #100]	@ (800118c <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001126:	601a      	str	r2, [r3, #0]

    adcIn1Int = (int)adcIn1;
 8001128:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <HAL_ADC_ConvCpltCallback+0x184>)
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001132:	ee17 2a90 	vmov	r2, s15
 8001136:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001138:	601a      	str	r2, [r3, #0]

    full_adc++;
 800113a:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <HAL_ADC_ConvCpltCallback+0x1b4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	4a14      	ldr	r2, [pc, #80]	@ (8001194 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001142:	6013      	str	r3, [r2, #0]

    //comms_append_int32(2, 1, &temperatureInt);
    comms_append_int32(23, 1, &adcIn1Int);
 8001144:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001146:	2101      	movs	r1, #1
 8001148:	2017      	movs	r0, #23
 800114a:	f7ff fce1 	bl	8000b10 <comms_append_int32>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	48000400 	.word	0x48000400
 800115c:	20003778 	.word	0x20003778
 8001160:	20003760 	.word	0x20003760
 8001164:	20003768 	.word	0x20003768
 8001168:	200035d0 	.word	0x200035d0
 800116c:	42480000 	.word	0x42480000
 8001170:	45800000 	.word	0x45800000
 8001174:	40533333 	.word	0x40533333
 8001178:	1fff75a8 	.word	0x1fff75a8
 800117c:	1fff75ca 	.word	0x1fff75ca
 8001180:	42a00000 	.word	0x42a00000
 8001184:	20003764 	.word	0x20003764
 8001188:	2000376c 	.word	0x2000376c
 800118c:	20003770 	.word	0x20003770
 8001190:	20003774 	.word	0x20003774
 8001194:	2000377c 	.word	0x2000377c

08001198 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
//		adcValue = adcValue + dma_data_buffer[i];
//	}
//	adcValue = adcValue / 100;
//	adcValueInt = (int) adcValue;

}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b2:	f000 fc2e 	bl	8001a12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b6:	f000 f885 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ba:	f7ff fb09 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011be:	f7ff faab 	bl	8000718 <MX_DMA_Init>
  MX_TIM6_Init();
 80011c2:	f000 fa29 	bl	8001618 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 80011c6:	f00b fdf5 	bl	800cdb4 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 80011ca:	f000 f9d7 	bl	800157c <MX_TIM5_Init>
  MX_ADC1_Init();
 80011ce:	f7ff f98d 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 80011d2:	f000 f985 	bl	80014e0 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80011d6:	f000 faf9 	bl	80017cc <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 80011da:	f000 faab 	bl	8001734 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	482b      	ldr	r0, [pc, #172]	@ (8001290 <main+0xe4>)
 80011e4:	f002 fea2 	bl	8003f2c <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 80011e8:	482a      	ldr	r0, [pc, #168]	@ (8001294 <main+0xe8>)
 80011ea:	f005 fe25 	bl	8006e38 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 80011ee:	482a      	ldr	r0, [pc, #168]	@ (8001298 <main+0xec>)
 80011f0:	f005 fdba 	bl	8006d68 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	e00d      	b.n	8001216 <main+0x6a>
		dma[i] = i;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001204:	4a25      	ldr	r2, [pc, #148]	@ (800129c <main+0xf0>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3301      	adds	r3, #1
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800121c:	dbed      	blt.n	80011fa <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 800121e:	4a20      	ldr	r2, [pc, #128]	@ (80012a0 <main+0xf4>)
 8001220:	2100      	movs	r1, #0
 8001222:	4820      	ldr	r0, [pc, #128]	@ (80012a4 <main+0xf8>)
 8001224:	f002 fc08 	bl	8003a38 <HAL_DMA_RegisterCallback>
 8001228:	4603      	mov	r3, r0
 800122a:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <main+0xec>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001232:	4a1d      	ldr	r2, [pc, #116]	@ (80012a8 <main+0xfc>)
 8001234:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 8001236:	4919      	ldr	r1, [pc, #100]	@ (800129c <main+0xf0>)
 8001238:	4a1c      	ldr	r2, [pc, #112]	@ (80012ac <main+0x100>)
 800123a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123e:	4819      	ldr	r0, [pc, #100]	@ (80012a4 <main+0xf8>)
 8001240:	f002 fa14 	bl	800366c <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <main+0xec>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124a:	4a19      	ldr	r2, [pc, #100]	@ (80012b0 <main+0x104>)
 800124c:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <main+0xec>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001254:	4a17      	ldr	r2, [pc, #92]	@ (80012b4 <main+0x108>)
 8001256:	6013      	str	r3, [r2, #0]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001258:	217f      	movs	r1, #127	@ 0x7f
 800125a:	4817      	ldr	r0, [pc, #92]	@ (80012b8 <main+0x10c>)
 800125c:	f001 ffba 	bl	80031d4 <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 8001260:	2032      	movs	r0, #50	@ 0x32
 8001262:	f000 fc4b 	bl	8001afc <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 20);
 8001266:	2214      	movs	r2, #20
 8001268:	4914      	ldr	r1, [pc, #80]	@ (80012bc <main+0x110>)
 800126a:	4813      	ldr	r0, [pc, #76]	@ (80012b8 <main+0x10c>)
 800126c:	f000 ffc4 	bl	80021f8 <HAL_ADC_Start_DMA>
 8001270:	4603      	mov	r3, r0
 8001272:	70bb      	strb	r3, [r7, #2]

	HAL_TIM_Base_Start_IT(&htim3);
 8001274:	4812      	ldr	r0, [pc, #72]	@ (80012c0 <main+0x114>)
 8001276:	f005 fddf 	bl	8006e38 <HAL_TIM_Base_Start_IT>

	comms_init();
 800127a:	f7ff fbdb 	bl	8000a34 <comms_init>
	comms_uart_init();
 800127e:	f7ff fbc5 	bl	8000a0c <comms_uart_init>
//	    comms_append_int32(2, 1, &temperatureInt);

//	    comms_send();

		//load_CPU();
		comms_send();
 8001282:	f7ff fcbd 	bl	8000c00 <comms_send>
		comms_rx_process();
 8001286:	f7ff fd99 	bl	8000dbc <comms_rx_process>
		comms_send();
 800128a:	bf00      	nop
 800128c:	e7f9      	b.n	8001282 <main+0xd6>
 800128e:	bf00      	nop
 8001290:	48000800 	.word	0x48000800
 8001294:	20003818 	.word	0x20003818
 8001298:	200037cc 	.word	0x200037cc
 800129c:	20001690 	.word	0x20001690
 80012a0:	08000fad 	.word	0x08000fad
 80012a4:	200001f0 	.word	0x200001f0
 80012a8:	20001680 	.word	0x20001680
 80012ac:	20002630 	.word	0x20002630
 80012b0:	2000168c 	.word	0x2000168c
 80012b4:	20001684 	.word	0x20001684
 80012b8:	20000128 	.word	0x20000128
 80012bc:	200035d0 	.word	0x200035d0
 80012c0:	20003780 	.word	0x20003780

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b096      	sub	sp, #88	@ 0x58
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	2244      	movs	r2, #68	@ 0x44
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f00c fbd2 	bl	800da7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	463b      	mov	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80012e6:	2000      	movs	r0, #0
 80012e8:	f004 f832 	bl	8005350 <HAL_PWREx_ControlVoltageScaling>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80012f2:	f000 f83a 	bl	800136a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80012f6:	2322      	movs	r3, #34	@ 0x22
 80012f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001300:	2301      	movs	r3, #1
 8001302:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001304:	2340      	movs	r3, #64	@ 0x40
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001308:	2302      	movs	r3, #2
 800130a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800130c:	2302      	movs	r3, #2
 800130e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001310:	2302      	movs	r3, #2
 8001312:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001314:	231e      	movs	r3, #30
 8001316:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800131c:	2302      	movs	r3, #2
 800131e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001320:	2302      	movs	r3, #2
 8001322:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4618      	mov	r0, r3
 800132a:	f004 f8d5 	bl	80054d8 <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001334:	f000 f819 	bl	800136a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001338:	230f      	movs	r3, #15
 800133a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2303      	movs	r3, #3
 800133e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001344:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	2105      	movs	r1, #5
 8001352:	4618      	mov	r0, r3
 8001354:	f004 fcda 	bl	8005d0c <HAL_RCC_ClockConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800135e:	f000 f804 	bl	800136a <Error_Handler>
  }
}
 8001362:	bf00      	nop
 8001364:	3758      	adds	r7, #88	@ 0x58
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800136e:	b672      	cpsid	i
}
 8001370:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001372:	bf00      	nop
 8001374:	e7fd      	b.n	8001372 <Error_Handler+0x8>
	...

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <HAL_MspInit+0x44>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001382:	4a0e      	ldr	r2, [pc, #56]	@ (80013bc <HAL_MspInit+0x44>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6613      	str	r3, [r2, #96]	@ 0x60
 800138a:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <HAL_MspInit+0x44>)
 800138c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <HAL_MspInit+0x44>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139a:	4a08      	ldr	r2, [pc, #32]	@ (80013bc <HAL_MspInit+0x44>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_MspInit+0x44>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <NMI_Handler+0x4>

080013c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <MemManage_Handler+0x4>

080013d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001416:	f000 fb51 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001424:	4802      	ldr	r0, [pc, #8]	@ (8001430 <DMA1_Channel1_IRQHandler+0x10>)
 8001426:	f002 fa57 	bl	80038d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000190 	.word	0x20000190

08001434 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8001438:	4802      	ldr	r0, [pc, #8]	@ (8001444 <DMA1_Channel2_IRQHandler+0x10>)
 800143a:	f002 fa4d 	bl	80038d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001f0 	.word	0x200001f0

08001448 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <ADC1_IRQHandler+0x10>)
 800144e:	f000 ff57 	bl	8002300 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000128 	.word	0x20000128

0800145c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <TIM3_IRQHandler+0x10>)
 8001462:	f005 fd59 	bl	8006f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20003780 	.word	0x20003780

08001470 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001474:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001478:	f002 fd8a 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001484:	4802      	ldr	r0, [pc, #8]	@ (8001490 <TIM6_DAC_IRQHandler+0x10>)
 8001486:	f005 fd47 	bl	8006f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20003818 	.word	0x20003818

08001494 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <OTG_FS_IRQHandler+0x10>)
 800149a:	f002 fee4 	bl	8004266 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20004e70 	.word	0x20004e70

080014a8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80014ac:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <LPUART1_IRQHandler+0x10>)
 80014ae:	f006 fa2b 	bl	8007908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20003864 	.word	0x20003864

080014bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <SystemInit+0x20>)
 80014c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <SystemInit+0x20>)
 80014c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <MX_TIM3_Init+0x94>)
 8001500:	4a1d      	ldr	r2, [pc, #116]	@ (8001578 <MX_TIM3_Init+0x98>)
 8001502:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <MX_TIM3_Init+0x94>)
 8001506:	22c7      	movs	r2, #199	@ 0xc7
 8001508:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <MX_TIM3_Init+0x94>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8001510:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <MX_TIM3_Init+0x94>)
 8001512:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001516:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001518:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <MX_TIM3_Init+0x94>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <MX_TIM3_Init+0x94>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001524:	4813      	ldr	r0, [pc, #76]	@ (8001574 <MX_TIM3_Init+0x94>)
 8001526:	f005 fbc7 	bl	8006cb8 <HAL_TIM_Base_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001530:	f7ff ff1b 	bl	800136a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001534:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001538:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4619      	mov	r1, r3
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <MX_TIM3_Init+0x94>)
 8001542:	f005 fdeb 	bl	800711c <HAL_TIM_ConfigClockSource>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800154c:	f7ff ff0d 	bl	800136a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001550:	2320      	movs	r3, #32
 8001552:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	@ (8001574 <MX_TIM3_Init+0x94>)
 800155e:	f006 f803 	bl	8007568 <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001568:	f7ff feff 	bl	800136a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20003780 	.word	0x20003780
 8001578:	40000400 	.word	0x40000400

0800157c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800159a:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <MX_TIM5_Init+0x94>)
 800159c:	4a1d      	ldr	r2, [pc, #116]	@ (8001614 <MX_TIM5_Init+0x98>)
 800159e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <MX_TIM5_Init+0x94>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <MX_TIM5_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80015ac:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <MX_TIM5_Init+0x94>)
 80015ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b4:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <MX_TIM5_Init+0x94>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <MX_TIM5_Init+0x94>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015c0:	4813      	ldr	r0, [pc, #76]	@ (8001610 <MX_TIM5_Init+0x94>)
 80015c2:	f005 fb79 	bl	8006cb8 <HAL_TIM_Base_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80015cc:	f7ff fecd 	bl	800136a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	4619      	mov	r1, r3
 80015dc:	480c      	ldr	r0, [pc, #48]	@ (8001610 <MX_TIM5_Init+0x94>)
 80015de:	f005 fd9d 	bl	800711c <HAL_TIM_ConfigClockSource>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80015e8:	f7ff febf 	bl	800136a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	@ (8001610 <MX_TIM5_Init+0x94>)
 80015fa:	f005 ffb5 	bl	8007568 <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001604:	f7ff feb1 	bl	800136a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3720      	adds	r7, #32
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200037cc 	.word	0x200037cc
 8001614:	40000c00 	.word	0x40000c00

08001618 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <MX_TIM6_Init+0x68>)
 800162a:	4a16      	ldr	r2, [pc, #88]	@ (8001684 <MX_TIM6_Init+0x6c>)
 800162c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 800162e:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <MX_TIM6_Init+0x68>)
 8001630:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001634:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <MX_TIM6_Init+0x68>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 800163c:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <MX_TIM6_Init+0x68>)
 800163e:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001642:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001644:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <MX_TIM6_Init+0x68>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800164a:	480d      	ldr	r0, [pc, #52]	@ (8001680 <MX_TIM6_Init+0x68>)
 800164c:	f005 fb34 	bl	8006cb8 <HAL_TIM_Base_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001656:	f7ff fe88 	bl	800136a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800165a:	2320      	movs	r3, #32
 800165c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	4619      	mov	r1, r3
 8001666:	4806      	ldr	r0, [pc, #24]	@ (8001680 <MX_TIM6_Init+0x68>)
 8001668:	f005 ff7e 	bl	8007568 <HAL_TIMEx_MasterConfigSynchronization>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001672:	f7ff fe7a 	bl	800136a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20003818 	.word	0x20003818
 8001684:	40001000 	.word	0x40001000

08001688 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a23      	ldr	r2, [pc, #140]	@ (8001724 <HAL_TIM_Base_MspInit+0x9c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d114      	bne.n	80016c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800169a:	4b23      	ldr	r3, [pc, #140]	@ (8001728 <HAL_TIM_Base_MspInit+0xa0>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169e:	4a22      	ldr	r2, [pc, #136]	@ (8001728 <HAL_TIM_Base_MspInit+0xa0>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_TIM_Base_MspInit+0xa0>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	201d      	movs	r0, #29
 80016b8:	f001 fef9 	bl	80034ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016bc:	201d      	movs	r0, #29
 80016be:	f001 ff12 	bl	80034e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80016c2:	e02a      	b.n	800171a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a18      	ldr	r2, [pc, #96]	@ (800172c <HAL_TIM_Base_MspInit+0xa4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10c      	bne.n	80016e8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016ce:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <HAL_TIM_Base_MspInit+0xa0>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d2:	4a15      	ldr	r2, [pc, #84]	@ (8001728 <HAL_TIM_Base_MspInit+0xa0>)
 80016d4:	f043 0308 	orr.w	r3, r3, #8
 80016d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <HAL_TIM_Base_MspInit+0xa0>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
}
 80016e6:	e018      	b.n	800171a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a10      	ldr	r2, [pc, #64]	@ (8001730 <HAL_TIM_Base_MspInit+0xa8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d113      	bne.n	800171a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <HAL_TIM_Base_MspInit+0xa0>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001728 <HAL_TIM_Base_MspInit+0xa0>)
 80016f8:	f043 0310 	orr.w	r3, r3, #16
 80016fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <HAL_TIM_Base_MspInit+0xa0>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2036      	movs	r0, #54	@ 0x36
 8001710:	f001 fecd 	bl	80034ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001714:	2036      	movs	r0, #54	@ 0x36
 8001716:	f001 fee6 	bl	80034e6 <HAL_NVIC_EnableIRQ>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40000400 	.word	0x40000400
 8001728:	40021000 	.word	0x40021000
 800172c:	40000c00 	.word	0x40000c00
 8001730:	40001000 	.word	0x40001000

08001734 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001738:	4b22      	ldr	r3, [pc, #136]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 800173a:	4a23      	ldr	r2, [pc, #140]	@ (80017c8 <MX_LPUART1_UART_Init+0x94>)
 800173c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800173e:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 8001740:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001744:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001752:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001764:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800176a:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001770:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 8001772:	2200      	movs	r2, #0
 8001774:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001776:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800177c:	4811      	ldr	r0, [pc, #68]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 800177e:	f005 ff99 	bl	80076b4 <HAL_UART_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001788:	f7ff fdef 	bl	800136a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800178c:	2100      	movs	r1, #0
 800178e:	480d      	ldr	r0, [pc, #52]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 8001790:	f007 fff3 	bl	800977a <HAL_UARTEx_SetTxFifoThreshold>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800179a:	f7ff fde6 	bl	800136a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800179e:	2100      	movs	r1, #0
 80017a0:	4808      	ldr	r0, [pc, #32]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 80017a2:	f008 f828 	bl	80097f6 <HAL_UARTEx_SetRxFifoThreshold>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017ac:	f7ff fddd 	bl	800136a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80017b0:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <MX_LPUART1_UART_Init+0x90>)
 80017b2:	f007 ffa9 	bl	8009708 <HAL_UARTEx_DisableFifoMode>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017bc:	f7ff fdd5 	bl	800136a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20003864 	.word	0x20003864
 80017c8:	40008000 	.word	0x40008000

080017cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017d0:	4b22      	ldr	r3, [pc, #136]	@ (800185c <MX_USART3_UART_Init+0x90>)
 80017d2:	4a23      	ldr	r2, [pc, #140]	@ (8001860 <MX_USART3_UART_Init+0x94>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017d6:	4b21      	ldr	r3, [pc, #132]	@ (800185c <MX_USART3_UART_Init+0x90>)
 80017d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b1f      	ldr	r3, [pc, #124]	@ (800185c <MX_USART3_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <MX_USART3_UART_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b1c      	ldr	r3, [pc, #112]	@ (800185c <MX_USART3_UART_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <MX_USART3_UART_Init+0x90>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b19      	ldr	r3, [pc, #100]	@ (800185c <MX_USART3_UART_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b17      	ldr	r3, [pc, #92]	@ (800185c <MX_USART3_UART_Init+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001802:	4b16      	ldr	r3, [pc, #88]	@ (800185c <MX_USART3_UART_Init+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <MX_USART3_UART_Init+0x90>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180e:	4b13      	ldr	r3, [pc, #76]	@ (800185c <MX_USART3_UART_Init+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001814:	4811      	ldr	r0, [pc, #68]	@ (800185c <MX_USART3_UART_Init+0x90>)
 8001816:	f005 ff4d 	bl	80076b4 <HAL_UART_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001820:	f7ff fda3 	bl	800136a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001824:	2100      	movs	r1, #0
 8001826:	480d      	ldr	r0, [pc, #52]	@ (800185c <MX_USART3_UART_Init+0x90>)
 8001828:	f007 ffa7 	bl	800977a <HAL_UARTEx_SetTxFifoThreshold>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001832:	f7ff fd9a 	bl	800136a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001836:	2100      	movs	r1, #0
 8001838:	4808      	ldr	r0, [pc, #32]	@ (800185c <MX_USART3_UART_Init+0x90>)
 800183a:	f007 ffdc 	bl	80097f6 <HAL_UARTEx_SetRxFifoThreshold>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001844:	f7ff fd91 	bl	800136a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001848:	4804      	ldr	r0, [pc, #16]	@ (800185c <MX_USART3_UART_Init+0x90>)
 800184a:	f007 ff5d 	bl	8009708 <HAL_UARTEx_DisableFifoMode>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001854:	f7ff fd89 	bl	800136a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200038f8 	.word	0x200038f8
 8001860:	40004800 	.word	0x40004800

08001864 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b0b0      	sub	sp, #192	@ 0xc0
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	2294      	movs	r2, #148	@ 0x94
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f00c f8f9 	bl	800da7c <memset>
  if(uartHandle->Instance==LPUART1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a47      	ldr	r2, [pc, #284]	@ (80019ac <HAL_UART_MspInit+0x148>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d146      	bne.n	8001922 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001894:	2320      	movs	r3, #32
 8001896:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001898:	2300      	movs	r3, #0
 800189a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189c:	f107 0318 	add.w	r3, r7, #24
 80018a0:	4618      	mov	r0, r3
 80018a2:	f004 fcf1 	bl	8006288 <HAL_RCCEx_PeriphCLKConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018ac:	f7ff fd5d 	bl	800136a <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018b0:	4b3f      	ldr	r3, [pc, #252]	@ (80019b0 <HAL_UART_MspInit+0x14c>)
 80018b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b4:	4a3e      	ldr	r2, [pc, #248]	@ (80019b0 <HAL_UART_MspInit+0x14c>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80018bc:	4b3c      	ldr	r3, [pc, #240]	@ (80019b0 <HAL_UART_MspInit+0x14c>)
 80018be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018c8:	4b39      	ldr	r3, [pc, #228]	@ (80019b0 <HAL_UART_MspInit+0x14c>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018cc:	4a38      	ldr	r2, [pc, #224]	@ (80019b0 <HAL_UART_MspInit+0x14c>)
 80018ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d4:	4b36      	ldr	r3, [pc, #216]	@ (80019b0 <HAL_UART_MspInit+0x14c>)
 80018d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80018e0:	f003 fdea 	bl	80054b8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80018e4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80018e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80018fe:	2308      	movs	r3, #8
 8001900:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001904:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001908:	4619      	mov	r1, r3
 800190a:	482a      	ldr	r0, [pc, #168]	@ (80019b4 <HAL_UART_MspInit+0x150>)
 800190c:	f002 f97c 	bl	8003c08 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	2046      	movs	r0, #70	@ 0x46
 8001916:	f001 fdca 	bl	80034ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800191a:	2046      	movs	r0, #70	@ 0x46
 800191c:	f001 fde3 	bl	80034e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001920:	e040      	b.n	80019a4 <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART3)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a24      	ldr	r2, [pc, #144]	@ (80019b8 <HAL_UART_MspInit+0x154>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d13b      	bne.n	80019a4 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800192c:	2304      	movs	r3, #4
 800192e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001930:	2300      	movs	r3, #0
 8001932:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001934:	f107 0318 	add.w	r3, r7, #24
 8001938:	4618      	mov	r0, r3
 800193a:	f004 fca5 	bl	8006288 <HAL_RCCEx_PeriphCLKConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8001944:	f7ff fd11 	bl	800136a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001948:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <HAL_UART_MspInit+0x14c>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194c:	4a18      	ldr	r2, [pc, #96]	@ (80019b0 <HAL_UART_MspInit+0x14c>)
 800194e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001952:	6593      	str	r3, [r2, #88]	@ 0x58
 8001954:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <HAL_UART_MspInit+0x14c>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001958:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001960:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <HAL_UART_MspInit+0x14c>)
 8001962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001964:	4a12      	ldr	r2, [pc, #72]	@ (80019b0 <HAL_UART_MspInit+0x14c>)
 8001966:	f043 0308 	orr.w	r3, r3, #8
 800196a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800196c:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <HAL_UART_MspInit+0x14c>)
 800196e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001978:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800197c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001992:	2307      	movs	r3, #7
 8001994:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001998:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800199c:	4619      	mov	r1, r3
 800199e:	4807      	ldr	r0, [pc, #28]	@ (80019bc <HAL_UART_MspInit+0x158>)
 80019a0:	f002 f932 	bl	8003c08 <HAL_GPIO_Init>
}
 80019a4:	bf00      	nop
 80019a6:	37c0      	adds	r7, #192	@ 0xc0
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40008000 	.word	0x40008000
 80019b0:	40021000 	.word	0x40021000
 80019b4:	48001800 	.word	0x48001800
 80019b8:	40004800 	.word	0x40004800
 80019bc:	48000c00 	.word	0x48000c00

080019c0 <Reset_Handler>:
 80019c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f8 <LoopForever+0x2>
 80019c4:	f7ff fd7a 	bl	80014bc <SystemInit>
 80019c8:	480c      	ldr	r0, [pc, #48]	@ (80019fc <LoopForever+0x6>)
 80019ca:	490d      	ldr	r1, [pc, #52]	@ (8001a00 <LoopForever+0xa>)
 80019cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a04 <LoopForever+0xe>)
 80019ce:	2300      	movs	r3, #0
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:
 80019d2:	58d4      	ldr	r4, [r2, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:
 80019d8:	18c4      	adds	r4, r0, r3
 80019da:	428c      	cmp	r4, r1
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
 80019de:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <LoopForever+0x12>)
 80019e0:	4c0a      	ldr	r4, [pc, #40]	@ (8001a0c <LoopForever+0x16>)
 80019e2:	2300      	movs	r3, #0
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:
 80019ea:	42a2      	cmp	r2, r4
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>
 80019ee:	f00c f84d 	bl	800da8c <__libc_init_array>
 80019f2:	f7ff fbdb 	bl	80011ac <main>

080019f6 <LoopForever>:
 80019f6:	e7fe      	b.n	80019f6 <LoopForever>
 80019f8:	200a0000 	.word	0x200a0000
 80019fc:	20000000 	.word	0x20000000
 8001a00:	2000010c 	.word	0x2000010c
 8001a04:	0800dbd0 	.word	0x0800dbd0
 8001a08:	2000010c 	.word	0x2000010c
 8001a0c:	2000559c 	.word	0x2000559c

08001a10 <CAN1_RX0_IRQHandler>:
 8001a10:	e7fe      	b.n	8001a10 <CAN1_RX0_IRQHandler>

08001a12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f001 fd3b 	bl	8003498 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a22:	2000      	movs	r0, #0
 8001a24:	f000 f80e 	bl	8001a44 <HAL_InitTick>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	71fb      	strb	r3, [r7, #7]
 8001a32:	e001      	b.n	8001a38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a34:	f7ff fca0 	bl	8001378 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a38:	79fb      	ldrb	r3, [r7, #7]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <HAL_InitTick+0x6c>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d023      	beq.n	8001aa0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a58:	4b16      	ldr	r3, [pc, #88]	@ (8001ab4 <HAL_InitTick+0x70>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <HAL_InitTick+0x6c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f001 fd47 	bl	8003502 <HAL_SYSTICK_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10f      	bne.n	8001a9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b0f      	cmp	r3, #15
 8001a7e:	d809      	bhi.n	8001a94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a80:	2200      	movs	r2, #0
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a88:	f001 fd11 	bl	80034ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <HAL_InitTick+0x74>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e007      	b.n	8001aa4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	e004      	b.n	8001aa4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	73fb      	strb	r3, [r7, #15]
 8001a9e:	e001      	b.n	8001aa4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_IncTick+0x20>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_IncTick+0x24>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <HAL_IncTick+0x24>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	2000398c 	.word	0x2000398c

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <HAL_GetTick+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	2000398c 	.word	0x2000398c

08001afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff ffee 	bl	8001ae4 <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b14:	d005      	beq.n	8001b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b16:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <HAL_Delay+0x44>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b22:	bf00      	nop
 8001b24:	f7ff ffde 	bl	8001ae4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d8f7      	bhi.n	8001b24 <HAL_Delay+0x28>
  {
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000008 	.word	0x20000008

08001b44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	609a      	str	r2, [r3, #8]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3360      	adds	r3, #96	@ 0x60
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <LL_ADC_SetOffset+0x44>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001be4:	bf00      	nop
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	03fff000 	.word	0x03fff000

08001bf4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3360      	adds	r3, #96	@ 0x60
 8001c02:	461a      	mov	r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	3360      	adds	r3, #96	@ 0x60
 8001c30:	461a      	mov	r2, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c4a:	bf00      	nop
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	615a      	str	r2, [r3, #20]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b087      	sub	sp, #28
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3330      	adds	r3, #48	@ 0x30
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	4413      	add	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	211f      	movs	r1, #31
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	0e9b      	lsrs	r3, r3, #26
 8001cda:	f003 011f 	and.w	r1, r3, #31
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3314      	adds	r3, #20
 8001d30:	461a      	mov	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	0e5b      	lsrs	r3, r3, #25
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	0d1b      	lsrs	r3, r3, #20
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	2107      	movs	r1, #7
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	401a      	ands	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	0d1b      	lsrs	r3, r3, #20
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	431a      	orrs	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d6a:	bf00      	nop
 8001d6c:	371c      	adds	r7, #28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d90:	43db      	mvns	r3, r3
 8001d92:	401a      	ands	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0318 	and.w	r3, r3, #24
 8001d9a:	4908      	ldr	r1, [pc, #32]	@ (8001dbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d9c:	40d9      	lsrs	r1, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	400b      	ands	r3, r1
 8001da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da6:	431a      	orrs	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	0007ffff 	.word	0x0007ffff

08001dc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001dd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6093      	str	r3, [r2, #8]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001df8:	d101      	bne.n	8001dfe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e48:	d101      	bne.n	8001e4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e98:	f043 0202 	orr.w	r2, r3, #2
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <LL_ADC_IsEnabled+0x18>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <LL_ADC_IsEnabled+0x1a>
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d101      	bne.n	8001eea <LL_ADC_IsDisableOngoing+0x18>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_ADC_IsDisableOngoing+0x1a>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f0c:	f043 0204 	orr.w	r2, r3, #4
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d101      	bne.n	8001f38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d101      	bne.n	8001f5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e129      	b.n	80021da <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7fe fb1f 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff19 	bl	8001de4 <LL_ADC_IsDeepPowerDownEnabled>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d004      	beq.n	8001fc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff feff 	bl	8001dc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff34 	bl	8001e34 <LL_ADC_IsInternalRegulatorEnabled>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d115      	bne.n	8001ffe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff18 	bl	8001e0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fdc:	4b81      	ldr	r3, [pc, #516]	@ (80021e4 <HAL_ADC_Init+0x278>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	4a81      	ldr	r2, [pc, #516]	@ (80021e8 <HAL_ADC_Init+0x27c>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	3301      	adds	r3, #1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ff0:	e002      	b.n	8001ff8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f9      	bne.n	8001ff2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff16 	bl	8001e34 <LL_ADC_IsInternalRegulatorEnabled>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10d      	bne.n	800202a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	f043 0210 	orr.w	r2, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff76 	bl	8001f20 <LL_ADC_REG_IsConversionOngoing>
 8002034:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 80c2 	bne.w	80021c8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 80be 	bne.w	80021c8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002050:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002054:	f043 0202 	orr.w	r2, r3, #2
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff23 	bl	8001eac <LL_ADC_IsEnabled>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10b      	bne.n	8002084 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800206c:	485f      	ldr	r0, [pc, #380]	@ (80021ec <HAL_ADC_Init+0x280>)
 800206e:	f7ff ff1d 	bl	8001eac <LL_ADC_IsEnabled>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4619      	mov	r1, r3
 800207e:	485c      	ldr	r0, [pc, #368]	@ (80021f0 <HAL_ADC_Init+0x284>)
 8002080:	f7ff fd60 	bl	8001b44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7e5b      	ldrb	r3, [r3, #25]
 8002088:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800208e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002094:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800209a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d106      	bne.n	80020c0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	3b01      	subs	r3, #1
 80020b8:	045b      	lsls	r3, r3, #17
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d009      	beq.n	80020dc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	4b44      	ldr	r3, [pc, #272]	@ (80021f4 <HAL_ADC_Init+0x288>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	69b9      	ldr	r1, [r7, #24]
 80020ec:	430b      	orrs	r3, r1
 80020ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff26 	bl	8001f46 <LL_ADC_INJ_IsConversionOngoing>
 80020fa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d140      	bne.n	8002184 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d13d      	bne.n	8002184 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7e1b      	ldrb	r3, [r3, #24]
 8002110:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002112:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800211a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800212a:	f023 0306 	bic.w	r3, r3, #6
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	69b9      	ldr	r1, [r7, #24]
 8002134:	430b      	orrs	r3, r1
 8002136:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800213e:	2b01      	cmp	r3, #1
 8002140:	d118      	bne.n	8002174 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002164:	430a      	orrs	r2, r1
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	611a      	str	r2, [r3, #16]
 8002172:	e007      	b.n	8002184 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d10c      	bne.n	80021a6 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	f023 010f 	bic.w	r1, r3, #15
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	1e5a      	subs	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80021a4:	e007      	b.n	80021b6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 020f 	bic.w	r2, r2, #15
 80021b4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ba:	f023 0303 	bic.w	r3, r3, #3
 80021be:	f043 0201 	orr.w	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80021c6:	e007      	b.n	80021d8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021cc:	f043 0210 	orr.w	r2, r3, #16
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000000 	.word	0x20000000
 80021e8:	053e2d63 	.word	0x053e2d63
 80021ec:	50040000 	.word	0x50040000
 80021f0:	50040300 	.word	0x50040300
 80021f4:	fff0c007 	.word	0xfff0c007

080021f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fe89 	bl	8001f20 <LL_ADC_REG_IsConversionOngoing>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d167      	bne.n	80022e4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_ADC_Start_DMA+0x2a>
 800221e:	2302      	movs	r3, #2
 8002220:	e063      	b.n	80022ea <HAL_ADC_Start_DMA+0xf2>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fe2c 	bl	8002e88 <ADC_Enable>
 8002230:	4603      	mov	r3, r0
 8002232:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002234:	7dfb      	ldrb	r3, [r7, #23]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d14f      	bne.n	80022da <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002252:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225e:	f023 0206 	bic.w	r2, r3, #6
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002266:	e002      	b.n	800226e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002272:	4a20      	ldr	r2, [pc, #128]	@ (80022f4 <HAL_ADC_Start_DMA+0xfc>)
 8002274:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800227a:	4a1f      	ldr	r2, [pc, #124]	@ (80022f8 <HAL_ADC_Start_DMA+0x100>)
 800227c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002282:	4a1e      	ldr	r2, [pc, #120]	@ (80022fc <HAL_ADC_Start_DMA+0x104>)
 8002284:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	221c      	movs	r2, #28
 800228c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0210 	orr.w	r2, r2, #16
 80022a4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0201 	orr.w	r2, r2, #1
 80022b4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3340      	adds	r3, #64	@ 0x40
 80022c0:	4619      	mov	r1, r3
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f001 f9d1 	bl	800366c <HAL_DMA_Start_IT>
 80022ca:	4603      	mov	r3, r0
 80022cc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fe10 	bl	8001ef8 <LL_ADC_REG_StartConversion>
 80022d8:	e006      	b.n	80022e8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80022e2:	e001      	b.n	80022e8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022e4:	2302      	movs	r3, #2
 80022e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	08003053 	.word	0x08003053
 80022f8:	0800312b 	.word	0x0800312b
 80022fc:	08003147 	.word	0x08003147

08002300 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d017      	beq.n	8002356 <HAL_ADC_IRQHandler+0x56>
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d012      	beq.n	8002356 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002340:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 ffcb 	bl	80032e4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2202      	movs	r2, #2
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <HAL_ADC_IRQHandler+0x6a>
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002370:	2b00      	cmp	r3, #0
 8002372:	d05e      	beq.n	8002432 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d059      	beq.n	8002432 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	d105      	bne.n	8002396 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fc6e 	bl	8001c7c <LL_ADC_REG_IsTriggerSourceSWStart>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d03e      	beq.n	8002424 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d135      	bne.n	8002424 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d12e      	bne.n	8002424 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fda8 	bl	8001f20 <LL_ADC_REG_IsConversionOngoing>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d11a      	bne.n	800240c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 020c 	bic.w	r2, r2, #12
 80023e4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d112      	bne.n	8002424 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002402:	f043 0201 	orr.w	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	659a      	str	r2, [r3, #88]	@ 0x58
 800240a:	e00b      	b.n	8002424 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002410:	f043 0210 	orr.w	r2, r3, #16
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7fe fddb 	bl	8000fe0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	220c      	movs	r2, #12
 8002430:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b00      	cmp	r3, #0
 800243a:	d004      	beq.n	8002446 <HAL_ADC_IRQHandler+0x146>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800244c:	2b00      	cmp	r3, #0
 800244e:	d072      	beq.n	8002536 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d06d      	beq.n	8002536 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fc3f 	bl	8001cfa <LL_ADC_INJ_IsTriggerSourceSWStart>
 800247c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fbfa 	bl	8001c7c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002488:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d047      	beq.n	8002528 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <HAL_ADC_IRQHandler+0x1b2>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d03f      	beq.n	8002528 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d13a      	bne.n	8002528 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024bc:	2b40      	cmp	r3, #64	@ 0x40
 80024be:	d133      	bne.n	8002528 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d12e      	bne.n	8002528 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fd39 	bl	8001f46 <LL_ADC_INJ_IsConversionOngoing>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d11a      	bne.n	8002510 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80024e8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d112      	bne.n	8002528 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002506:	f043 0201 	orr.w	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	659a      	str	r2, [r3, #88]	@ 0x58
 800250e:	e00b      	b.n	8002528 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	f043 0210 	orr.w	r2, r3, #16
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 feb3 	bl	8003294 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2260      	movs	r2, #96	@ 0x60
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800253c:	2b00      	cmp	r3, #0
 800253e:	d011      	beq.n	8002564 <HAL_ADC_IRQHandler+0x264>
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00c      	beq.n	8002564 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f886 	bl	8002668 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2280      	movs	r2, #128	@ 0x80
 8002562:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d012      	beq.n	8002594 <HAL_ADC_IRQHandler+0x294>
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00d      	beq.n	8002594 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fe99 	bl	80032bc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002592:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800259a:	2b00      	cmp	r3, #0
 800259c:	d012      	beq.n	80025c4 <HAL_ADC_IRQHandler+0x2c4>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00d      	beq.n	80025c4 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fe8b 	bl	80032d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d02a      	beq.n	8002624 <HAL_ADC_IRQHandler+0x324>
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d025      	beq.n	8002624 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80025e0:	2301      	movs	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	e008      	b.n	80025f8 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80025f4:	2301      	movs	r3, #1
 80025f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d10e      	bne.n	800261c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002602:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260e:	f043 0202 	orr.w	r2, r3, #2
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f830 	bl	800267c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2210      	movs	r2, #16
 8002622:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262a:	2b00      	cmp	r3, #0
 800262c:	d018      	beq.n	8002660 <HAL_ADC_IRQHandler+0x360>
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002648:	f043 0208 	orr.w	r2, r3, #8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002658:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fe24 	bl	80032a8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002660:	bf00      	nop
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0b6      	sub	sp, #216	@ 0xd8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x22>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e3d5      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x7ce>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fc2e 	bl	8001f20 <LL_ADC_REG_IsConversionOngoing>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f040 83ba 	bne.w	8002e40 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b05      	cmp	r3, #5
 80026da:	d824      	bhi.n	8002726 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	3b02      	subs	r3, #2
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d81b      	bhi.n	800271e <HAL_ADC_ConfigChannel+0x8e>
 80026e6:	a201      	add	r2, pc, #4	@ (adr r2, 80026ec <HAL_ADC_ConfigChannel+0x5c>)
 80026e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ec:	080026fd 	.word	0x080026fd
 80026f0:	08002705 	.word	0x08002705
 80026f4:	0800270d 	.word	0x0800270d
 80026f8:	08002715 	.word	0x08002715
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80026fc:	230c      	movs	r3, #12
 80026fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002702:	e010      	b.n	8002726 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002704:	2312      	movs	r3, #18
 8002706:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800270a:	e00c      	b.n	8002726 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800270c:	2318      	movs	r3, #24
 800270e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002712:	e008      	b.n	8002726 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002714:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002718:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800271c:	e003      	b.n	8002726 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800271e:	2306      	movs	r3, #6
 8002720:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002724:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002734:	f7ff fab5 	bl	8001ca2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fbef 	bl	8001f20 <LL_ADC_REG_IsConversionOngoing>
 8002742:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fbfb 	bl	8001f46 <LL_ADC_INJ_IsConversionOngoing>
 8002750:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002758:	2b00      	cmp	r3, #0
 800275a:	f040 81bf 	bne.w	8002adc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800275e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 81ba 	bne.w	8002adc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002770:	d10f      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2200      	movs	r2, #0
 800277c:	4619      	mov	r1, r3
 800277e:	f7ff facf 	bl	8001d20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fa63 	bl	8001c56 <LL_ADC_SetSamplingTimeCommonConfig>
 8002790:	e00e      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	461a      	mov	r2, r3
 80027a0:	f7ff fabe 	bl	8001d20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fa53 	bl	8001c56 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	695a      	ldr	r2, [r3, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	08db      	lsrs	r3, r3, #3
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d00a      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6919      	ldr	r1, [r3, #16]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027e2:	f7ff f9e3 	bl	8001bac <LL_ADC_SetOffset>
 80027e6:	e179      	b.n	8002adc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fa00 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10a      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x184>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff f9f5 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 800280a:	4603      	mov	r3, r0
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	f003 021f 	and.w	r2, r3, #31
 8002812:	e01e      	b.n	8002852 <HAL_ADC_ConfigChannel+0x1c2>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff f9ea 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002820:	4603      	mov	r3, r0
 8002822:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002832:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002836:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800283a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002842:	2320      	movs	r3, #32
 8002844:	e004      	b.n	8002850 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002846:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285a:	2b00      	cmp	r3, #0
 800285c:	d105      	bne.n	800286a <HAL_ADC_ConfigChannel+0x1da>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	0e9b      	lsrs	r3, r3, #26
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	e018      	b.n	800289c <HAL_ADC_ConfigChannel+0x20c>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800287e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002882:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002886:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800288e:	2320      	movs	r3, #32
 8002890:	e004      	b.n	800289c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002892:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800289c:	429a      	cmp	r2, r3
 800289e:	d106      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff f9b9 	bl	8001c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2101      	movs	r1, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff f99d 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <HAL_ADC_ConfigChannel+0x24a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2101      	movs	r1, #1
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff f992 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	e01e      	b.n	8002918 <HAL_ADC_ConfigChannel+0x288>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2101      	movs	r1, #1
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff f987 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028f0:	fa93 f3a3 	rbit	r3, r3
 80028f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80028f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002900:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002908:	2320      	movs	r3, #32
 800290a:	e004      	b.n	8002916 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800290c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x2a0>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	e018      	b.n	8002962 <HAL_ADC_ConfigChannel+0x2d2>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002944:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800294c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002954:	2320      	movs	r3, #32
 8002956:	e004      	b.n	8002962 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002958:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002962:	429a      	cmp	r2, r3
 8002964:	d106      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2200      	movs	r2, #0
 800296c:	2101      	movs	r1, #1
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f956 	bl	8001c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2102      	movs	r1, #2
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff f93a 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002980:	4603      	mov	r3, r0
 8002982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x310>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2102      	movs	r1, #2
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff f92f 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002996:	4603      	mov	r3, r0
 8002998:	0e9b      	lsrs	r3, r3, #26
 800299a:	f003 021f 	and.w	r2, r3, #31
 800299e:	e01e      	b.n	80029de <HAL_ADC_ConfigChannel+0x34e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2102      	movs	r1, #2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff f924 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80029be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80029c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80029ce:	2320      	movs	r3, #32
 80029d0:	e004      	b.n	80029dc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80029d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x366>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	e014      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x390>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002a0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002a12:	2320      	movs	r3, #32
 8002a14:	e004      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002a16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d106      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff f8f7 	bl	8001c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2103      	movs	r1, #3
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f8db 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x3ce>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2103      	movs	r1, #3
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f8d0 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	0e9b      	lsrs	r3, r3, #26
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	e017      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x3fe>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2103      	movs	r1, #3
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f8c5 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a78:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e003      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002a84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d105      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x416>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	0e9b      	lsrs	r3, r3, #26
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	e011      	b.n	8002aca <HAL_ADC_ConfigChannel+0x43a>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002ab4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ab6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002ab8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	e003      	b.n	8002aca <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002ac2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d106      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2103      	movs	r1, #3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff f8a2 	bl	8001c20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff f9e3 	bl	8001eac <LL_ADC_IsEnabled>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f040 813f 	bne.w	8002d6c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f7ff f93c 	bl	8001d78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4a8e      	ldr	r2, [pc, #568]	@ (8002d40 <HAL_ADC_ConfigChannel+0x6b0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	f040 8130 	bne.w	8002d6c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x4a4>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	0e9b      	lsrs	r3, r3, #26
 8002b22:	3301      	adds	r3, #1
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	2b09      	cmp	r3, #9
 8002b2a:	bf94      	ite	ls
 8002b2c:	2301      	movls	r3, #1
 8002b2e:	2300      	movhi	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e019      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x4d8>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e003      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002b50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2b09      	cmp	r3, #9
 8002b60:	bf94      	ite	ls
 8002b62:	2301      	movls	r3, #1
 8002b64:	2300      	movhi	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d079      	beq.n	8002c60 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x4f8>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	3301      	adds	r3, #1
 8002b80:	069b      	lsls	r3, r3, #26
 8002b82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b86:	e015      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x524>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b98:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002b9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	e003      	b.n	8002bac <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002ba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	069b      	lsls	r3, r3, #26
 8002bb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x544>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	e017      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x574>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002be4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e003      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	ea42 0103 	orr.w	r1, r2, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x59a>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0e9b      	lsrs	r3, r3, #26
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	051b      	lsls	r3, r3, #20
 8002c28:	e018      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x5cc>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002c42:	2320      	movs	r3, #32
 8002c44:	e003      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	e080      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x5ec>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	3301      	adds	r3, #1
 8002c74:	069b      	lsls	r3, r3, #26
 8002c76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c7a:	e015      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x618>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002c94:	2320      	movs	r3, #32
 8002c96:	e003      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	069b      	lsls	r3, r3, #26
 8002ca4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x638>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	e017      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x668>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	61bb      	str	r3, [r7, #24]
  return result;
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e003      	b.n	8002cec <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3301      	adds	r3, #1
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	ea42 0103 	orr.w	r1, r2, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10d      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x694>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	3b1e      	subs	r3, #30
 8002d1c:	051b      	lsls	r3, r3, #20
 8002d1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d22:	e01d      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x6d0>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	60fb      	str	r3, [r7, #12]
  return result;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d103      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002d3c:	2320      	movs	r3, #32
 8002d3e:	e005      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x6bc>
 8002d40:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f003 021f 	and.w	r2, r3, #31
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	3b1e      	subs	r3, #30
 8002d5a:	051b      	lsls	r3, r3, #20
 8002d5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d60:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d66:	4619      	mov	r1, r3
 8002d68:	f7fe ffda 	bl	8001d20 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b3d      	ldr	r3, [pc, #244]	@ (8002e68 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d06c      	beq.n	8002e52 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d78:	483c      	ldr	r0, [pc, #240]	@ (8002e6c <HAL_ADC_ConfigChannel+0x7dc>)
 8002d7a:	f7fe ff09 	bl	8001b90 <LL_ADC_GetCommonPathInternalCh>
 8002d7e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a3a      	ldr	r2, [pc, #232]	@ (8002e70 <HAL_ADC_ConfigChannel+0x7e0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d127      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d121      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a35      	ldr	r2, [pc, #212]	@ (8002e74 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d157      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002da6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002daa:	4619      	mov	r1, r3
 8002dac:	482f      	ldr	r0, [pc, #188]	@ (8002e6c <HAL_ADC_ConfigChannel+0x7dc>)
 8002dae:	f7fe fedc 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002db2:	4b31      	ldr	r3, [pc, #196]	@ (8002e78 <HAL_ADC_ConfigChannel+0x7e8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	099b      	lsrs	r3, r3, #6
 8002db8:	4a30      	ldr	r2, [pc, #192]	@ (8002e7c <HAL_ADC_ConfigChannel+0x7ec>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	099b      	lsrs	r3, r3, #6
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002dcc:	e002      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f9      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dda:	e03a      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a27      	ldr	r2, [pc, #156]	@ (8002e80 <HAL_ADC_ConfigChannel+0x7f0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d113      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002de6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10d      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e74 <HAL_ADC_ConfigChannel+0x7e4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d12a      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e04:	4619      	mov	r1, r3
 8002e06:	4819      	ldr	r0, [pc, #100]	@ (8002e6c <HAL_ADC_ConfigChannel+0x7dc>)
 8002e08:	f7fe feaf 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e0c:	e021      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1c      	ldr	r2, [pc, #112]	@ (8002e84 <HAL_ADC_ConfigChannel+0x7f4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d11c      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d116      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a12      	ldr	r2, [pc, #72]	@ (8002e74 <HAL_ADC_ConfigChannel+0x7e4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d111      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e36:	4619      	mov	r1, r3
 8002e38:	480c      	ldr	r0, [pc, #48]	@ (8002e6c <HAL_ADC_ConfigChannel+0x7dc>)
 8002e3a:	f7fe fe96 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
 8002e3e:	e008      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	f043 0220 	orr.w	r2, r3, #32
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002e5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	37d8      	adds	r7, #216	@ 0xd8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	80080000 	.word	0x80080000
 8002e6c:	50040300 	.word	0x50040300
 8002e70:	c7520000 	.word	0xc7520000
 8002e74:	50040000 	.word	0x50040000
 8002e78:	20000000 	.word	0x20000000
 8002e7c:	053e2d63 	.word	0x053e2d63
 8002e80:	cb840000 	.word	0xcb840000
 8002e84:	80000001 	.word	0x80000001

08002e88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff f807 	bl	8001eac <LL_ADC_IsEnabled>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d169      	bne.n	8002f78 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	4b36      	ldr	r3, [pc, #216]	@ (8002f84 <ADC_Enable+0xfc>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00d      	beq.n	8002ece <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb6:	f043 0210 	orr.w	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e055      	b.n	8002f7a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe ffc2 	bl	8001e5c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ed8:	482b      	ldr	r0, [pc, #172]	@ (8002f88 <ADC_Enable+0x100>)
 8002eda:	f7fe fe59 	bl	8001b90 <LL_ADC_GetCommonPathInternalCh>
 8002ede:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ee0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d013      	beq.n	8002f10 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ee8:	4b28      	ldr	r3, [pc, #160]	@ (8002f8c <ADC_Enable+0x104>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	099b      	lsrs	r3, r3, #6
 8002eee:	4a28      	ldr	r2, [pc, #160]	@ (8002f90 <ADC_Enable+0x108>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	099b      	lsrs	r3, r3, #6
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f02:	e002      	b.n	8002f0a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f9      	bne.n	8002f04 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f10:	f7fe fde8 	bl	8001ae4 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f16:	e028      	b.n	8002f6a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe ffc5 	bl	8001eac <LL_ADC_IsEnabled>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d104      	bne.n	8002f32 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe ff95 	bl	8001e5c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f32:	f7fe fdd7 	bl	8001ae4 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d914      	bls.n	8002f6a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d00d      	beq.n	8002f6a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f52:	f043 0210 	orr.w	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e007      	b.n	8002f7a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d1cf      	bne.n	8002f18 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	8000003f 	.word	0x8000003f
 8002f88:	50040300 	.word	0x50040300
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	053e2d63 	.word	0x053e2d63

08002f94 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe ff96 	bl	8001ed2 <LL_ADC_IsDisableOngoing>
 8002fa6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fe ff7d 	bl	8001eac <LL_ADC_IsEnabled>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d047      	beq.n	8003048 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d144      	bne.n	8003048 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 030d 	and.w	r3, r3, #13
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10c      	bne.n	8002fe6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fe ff57 	bl	8001e84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2203      	movs	r2, #3
 8002fdc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fde:	f7fe fd81 	bl	8001ae4 <HAL_GetTick>
 8002fe2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fe4:	e029      	b.n	800303a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fea:	f043 0210 	orr.w	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff6:	f043 0201 	orr.w	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e023      	b.n	800304a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003002:	f7fe fd6f 	bl	8001ae4 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d914      	bls.n	800303a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003022:	f043 0210 	orr.w	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e007      	b.n	800304a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1dc      	bne.n	8003002 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003068:	2b00      	cmp	r3, #0
 800306a:	d14b      	bne.n	8003104 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003070:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d021      	beq.n	80030ca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fdf6 	bl	8001c7c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d032      	beq.n	80030fc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d12b      	bne.n	80030fc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d11f      	bne.n	80030fc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80030c8:	e018      	b.n	80030fc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d111      	bne.n	80030fc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f4:	f043 0201 	orr.w	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f7fd ff6f 	bl	8000fe0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003102:	e00e      	b.n	8003122 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7ff fab3 	bl	800267c <HAL_ADC_ErrorCallback>
}
 8003116:	e004      	b.n	8003122 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800311c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
}
 8003122:	bf00      	nop
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003136:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7fe f82d 	bl	8001198 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003152:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003158:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003164:	f043 0204 	orr.w	r2, r3, #4
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f7ff fa85 	bl	800267c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <LL_ADC_StartCalibration>:
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800318c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003196:	4313      	orrs	r3, r2
 8003198:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	609a      	str	r2, [r3, #8]
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <LL_ADC_IsCalibrationOnGoing>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031c0:	d101      	bne.n	80031c6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_ADCEx_Calibration_Start+0x1c>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e04d      	b.n	800328c <HAL_ADCEx_Calibration_Start+0xb8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff fecb 	bl	8002f94 <ADC_Disable>
 80031fe:	4603      	mov	r3, r0
 8003200:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d136      	bne.n	8003276 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003210:	f023 0302 	bic.w	r3, r3, #2
 8003214:	f043 0202 	orr.w	r2, r3, #2
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6839      	ldr	r1, [r7, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff ffa9 	bl	800317a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003228:	e014      	b.n	8003254 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	3301      	adds	r3, #1
 800322e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003236:	d30d      	bcc.n	8003254 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323c:	f023 0312 	bic.w	r3, r3, #18
 8003240:	f043 0210 	orr.w	r2, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e01b      	b.n	800328c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ffa7 	bl	80031ac <LL_ADC_IsCalibrationOnGoing>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e2      	bne.n	800322a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003268:	f023 0303 	bic.w	r3, r3, #3
 800326c:	f043 0201 	orr.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	659a      	str	r2, [r3, #88]	@ 0x58
 8003274:	e005      	b.n	8003282 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327a:	f043 0210 	orr.w	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003308:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <__NVIC_SetPriorityGrouping+0x44>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003314:	4013      	ands	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332a:	4a04      	ldr	r2, [pc, #16]	@ (800333c <__NVIC_SetPriorityGrouping+0x44>)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	60d3      	str	r3, [r2, #12]
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003344:	4b04      	ldr	r3, [pc, #16]	@ (8003358 <__NVIC_GetPriorityGrouping+0x18>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	0a1b      	lsrs	r3, r3, #8
 800334a:	f003 0307 	and.w	r3, r3, #7
}
 800334e:	4618      	mov	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	2b00      	cmp	r3, #0
 800336c:	db0b      	blt.n	8003386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	f003 021f 	and.w	r2, r3, #31
 8003374:	4907      	ldr	r1, [pc, #28]	@ (8003394 <__NVIC_EnableIRQ+0x38>)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2001      	movs	r0, #1
 800337e:	fa00 f202 	lsl.w	r2, r0, r2
 8003382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	e000e100 	.word	0xe000e100

08003398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	db0a      	blt.n	80033c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	490c      	ldr	r1, [pc, #48]	@ (80033e4 <__NVIC_SetPriority+0x4c>)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	0112      	lsls	r2, r2, #4
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	440b      	add	r3, r1
 80033bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c0:	e00a      	b.n	80033d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4908      	ldr	r1, [pc, #32]	@ (80033e8 <__NVIC_SetPriority+0x50>)
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	3b04      	subs	r3, #4
 80033d0:	0112      	lsls	r2, r2, #4
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	440b      	add	r3, r1
 80033d6:	761a      	strb	r2, [r3, #24]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000e100 	.word	0xe000e100
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	@ 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f1c3 0307 	rsb	r3, r3, #7
 8003406:	2b04      	cmp	r3, #4
 8003408:	bf28      	it	cs
 800340a:	2304      	movcs	r3, #4
 800340c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3304      	adds	r3, #4
 8003412:	2b06      	cmp	r3, #6
 8003414:	d902      	bls.n	800341c <NVIC_EncodePriority+0x30>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3b03      	subs	r3, #3
 800341a:	e000      	b.n	800341e <NVIC_EncodePriority+0x32>
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003420:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	401a      	ands	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003434:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa01 f303 	lsl.w	r3, r1, r3
 800343e:	43d9      	mvns	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003444:	4313      	orrs	r3, r2
         );
}
 8003446:	4618      	mov	r0, r3
 8003448:	3724      	adds	r7, #36	@ 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3b01      	subs	r3, #1
 8003460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003464:	d301      	bcc.n	800346a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003466:	2301      	movs	r3, #1
 8003468:	e00f      	b.n	800348a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346a:	4a0a      	ldr	r2, [pc, #40]	@ (8003494 <SysTick_Config+0x40>)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3b01      	subs	r3, #1
 8003470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003472:	210f      	movs	r1, #15
 8003474:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003478:	f7ff ff8e 	bl	8003398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800347c:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <SysTick_Config+0x40>)
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003482:	4b04      	ldr	r3, [pc, #16]	@ (8003494 <SysTick_Config+0x40>)
 8003484:	2207      	movs	r2, #7
 8003486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	e000e010 	.word	0xe000e010

08003498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff ff29 	bl	80032f8 <__NVIC_SetPriorityGrouping>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b086      	sub	sp, #24
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034c0:	f7ff ff3e 	bl	8003340 <__NVIC_GetPriorityGrouping>
 80034c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	6978      	ldr	r0, [r7, #20]
 80034cc:	f7ff ff8e 	bl	80033ec <NVIC_EncodePriority>
 80034d0:	4602      	mov	r2, r0
 80034d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff5d 	bl	8003398 <__NVIC_SetPriority>
}
 80034de:	bf00      	nop
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff31 	bl	800335c <__NVIC_EnableIRQ>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ffa2 	bl	8003454 <SysTick_Config>
 8003510:	4603      	mov	r3, r0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e08d      	b.n	800364a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	4b47      	ldr	r3, [pc, #284]	@ (8003654 <HAL_DMA_Init+0x138>)
 8003536:	429a      	cmp	r2, r3
 8003538:	d80f      	bhi.n	800355a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	4b45      	ldr	r3, [pc, #276]	@ (8003658 <HAL_DMA_Init+0x13c>)
 8003542:	4413      	add	r3, r2
 8003544:	4a45      	ldr	r2, [pc, #276]	@ (800365c <HAL_DMA_Init+0x140>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	009a      	lsls	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a42      	ldr	r2, [pc, #264]	@ (8003660 <HAL_DMA_Init+0x144>)
 8003556:	641a      	str	r2, [r3, #64]	@ 0x40
 8003558:	e00e      	b.n	8003578 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	4b40      	ldr	r3, [pc, #256]	@ (8003664 <HAL_DMA_Init+0x148>)
 8003562:	4413      	add	r3, r2
 8003564:	4a3d      	ldr	r2, [pc, #244]	@ (800365c <HAL_DMA_Init+0x140>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	009a      	lsls	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a3c      	ldr	r2, [pc, #240]	@ (8003668 <HAL_DMA_Init+0x14c>)
 8003576:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800358e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003592:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800359c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 faba 	bl	8003b44 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035d8:	d102      	bne.n	80035e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035f4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d010      	beq.n	8003620 <HAL_DMA_Init+0x104>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b04      	cmp	r3, #4
 8003604:	d80c      	bhi.n	8003620 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fada 	bl	8003bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	e008      	b.n	8003632 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40020407 	.word	0x40020407
 8003658:	bffdfff8 	.word	0xbffdfff8
 800365c:	cccccccd 	.word	0xcccccccd
 8003660:	40020000 	.word	0x40020000
 8003664:	bffdfbf8 	.word	0xbffdfbf8
 8003668:	40020400 	.word	0x40020400

0800366c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_DMA_Start_IT+0x20>
 8003688:	2302      	movs	r3, #2
 800368a:	e066      	b.n	800375a <HAL_DMA_Start_IT+0xee>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d155      	bne.n	800374c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f9ff 	bl	8003ac8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 020e 	orr.w	r2, r2, #14
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e00f      	b.n	8003704 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0204 	bic.w	r2, r2, #4
 80036f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 020a 	orr.w	r2, r2, #10
 8003702:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800371c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003720:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003734:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003738:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e005      	b.n	8003758 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003754:	2302      	movs	r3, #2
 8003756:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003758:	7dfb      	ldrb	r3, [r7, #23]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d008      	beq.n	800378c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2204      	movs	r2, #4
 800377e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e040      	b.n	800380e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 020e 	bic.w	r2, r2, #14
 800379a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037aa:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c0:	f003 021c 	and.w	r2, r3, #28
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	2101      	movs	r1, #1
 80037ca:	fa01 f202 	lsl.w	r2, r1, r2
 80037ce:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00c      	beq.n	80037fc <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037fa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800380c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d005      	beq.n	800383e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2204      	movs	r2, #4
 8003836:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
 800383c:	e047      	b.n	80038ce <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 020e 	bic.w	r2, r2, #14
 800384c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003868:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800386c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003872:	f003 021c 	and.w	r2, r3, #28
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	2101      	movs	r1, #1
 800387c:	fa01 f202 	lsl.w	r2, r1, r2
 8003880:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800388a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00c      	beq.n	80038ae <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038ac:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
    }
  }
  return status;
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f4:	f003 031c 	and.w	r3, r3, #28
 80038f8:	2204      	movs	r2, #4
 80038fa:	409a      	lsls	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d026      	beq.n	8003952 <HAL_DMA_IRQHandler+0x7a>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d021      	beq.n	8003952 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d107      	bne.n	800392c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0204 	bic.w	r2, r2, #4
 800392a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003930:	f003 021c 	and.w	r2, r3, #28
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	2104      	movs	r1, #4
 800393a:	fa01 f202 	lsl.w	r2, r1, r2
 800393e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003944:	2b00      	cmp	r3, #0
 8003946:	d071      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003950:	e06c      	b.n	8003a2c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003956:	f003 031c 	and.w	r3, r3, #28
 800395a:	2202      	movs	r2, #2
 800395c:	409a      	lsls	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4013      	ands	r3, r2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d02e      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xec>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d029      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 020a 	bic.w	r2, r2, #10
 800398c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	f003 021c 	and.w	r2, r3, #28
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	2102      	movs	r1, #2
 80039a4:	fa01 f202 	lsl.w	r2, r1, r2
 80039a8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d038      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039c2:	e033      	b.n	8003a2c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c8:	f003 031c 	and.w	r3, r3, #28
 80039cc:	2208      	movs	r2, #8
 80039ce:	409a      	lsls	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d02a      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x156>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d025      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 020e 	bic.w	r2, r2, #14
 80039f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	f003 021c 	and.w	r2, r3, #28
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	2101      	movs	r1, #1
 8003a00:	fa01 f202 	lsl.w	r2, r1, r2
 8003a04:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
}
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	460b      	mov	r3, r1
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_DMA_RegisterCallback+0x20>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e031      	b.n	8003abc <HAL_DMA_RegisterCallback+0x84>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d120      	bne.n	8003aae <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003a6c:	7afb      	ldrb	r3, [r7, #11]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d81a      	bhi.n	8003aa8 <HAL_DMA_RegisterCallback+0x70>
 8003a72:	a201      	add	r2, pc, #4	@ (adr r2, 8003a78 <HAL_DMA_RegisterCallback+0x40>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a91 	.word	0x08003a91
 8003a80:	08003a99 	.word	0x08003a99
 8003a84:	08003aa1 	.word	0x08003aa1
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003a8e:	e010      	b.n	8003ab2 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8003a96:	e00c      	b.n	8003ab2 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003a9e:	e008      	b.n	8003ab2 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003aa6:	e004      	b.n	8003ab2 <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	75fb      	strb	r3, [r7, #23]
        break;
 8003aac:	e001      	b.n	8003ab2 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ade:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003af0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	f003 021c 	and.w	r2, r3, #28
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	2101      	movs	r1, #1
 8003b00:	fa01 f202 	lsl.w	r2, r1, r2
 8003b04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d108      	bne.n	8003b28 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b26:	e007      	b.n	8003b38 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	60da      	str	r2, [r3, #12]
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	4b17      	ldr	r3, [pc, #92]	@ (8003bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d80a      	bhi.n	8003b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b64:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6493      	str	r3, [r2, #72]	@ 0x48
 8003b6c:	e007      	b.n	8003b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	009a      	lsls	r2, r3, #2
 8003b76:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b78:	4413      	add	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	3b08      	subs	r3, #8
 8003b86:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a0a      	ldr	r2, [pc, #40]	@ (8003bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b94:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ba4:	bf00      	nop
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	40020407 	.word	0x40020407
 8003bb4:	4002081c 	.word	0x4002081c
 8003bb8:	cccccccd 	.word	0xcccccccd
 8003bbc:	40020880 	.word	0x40020880

08003bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	461a      	mov	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a08      	ldr	r2, [pc, #32]	@ (8003c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003be2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2201      	movs	r2, #1
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	1000823f 	.word	0x1000823f
 8003c04:	40020940 	.word	0x40020940

08003c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c16:	e166      	b.n	8003ee6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	fa01 f303 	lsl.w	r3, r1, r3
 8003c24:	4013      	ands	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 8158 	beq.w	8003ee0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d005      	beq.n	8003c48 <HAL_GPIO_Init+0x40>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d130      	bne.n	8003caa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	2203      	movs	r2, #3
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c7e:	2201      	movs	r2, #1
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	f003 0201 	and.w	r2, r3, #1
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d017      	beq.n	8003ce6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d123      	bne.n	8003d3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	08da      	lsrs	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3208      	adds	r2, #8
 8003cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	220f      	movs	r2, #15
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4013      	ands	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	08da      	lsrs	r2, r3, #3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3208      	adds	r2, #8
 8003d34:	6939      	ldr	r1, [r7, #16]
 8003d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	2203      	movs	r2, #3
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 0203 	and.w	r2, r3, #3
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80b2 	beq.w	8003ee0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7c:	4b61      	ldr	r3, [pc, #388]	@ (8003f04 <HAL_GPIO_Init+0x2fc>)
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d80:	4a60      	ldr	r2, [pc, #384]	@ (8003f04 <HAL_GPIO_Init+0x2fc>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d88:	4b5e      	ldr	r3, [pc, #376]	@ (8003f04 <HAL_GPIO_Init+0x2fc>)
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d94:	4a5c      	ldr	r2, [pc, #368]	@ (8003f08 <HAL_GPIO_Init+0x300>)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	089b      	lsrs	r3, r3, #2
 8003d9a:	3302      	adds	r3, #2
 8003d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	220f      	movs	r2, #15
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003dbe:	d02b      	beq.n	8003e18 <HAL_GPIO_Init+0x210>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a52      	ldr	r2, [pc, #328]	@ (8003f0c <HAL_GPIO_Init+0x304>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d025      	beq.n	8003e14 <HAL_GPIO_Init+0x20c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a51      	ldr	r2, [pc, #324]	@ (8003f10 <HAL_GPIO_Init+0x308>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d01f      	beq.n	8003e10 <HAL_GPIO_Init+0x208>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a50      	ldr	r2, [pc, #320]	@ (8003f14 <HAL_GPIO_Init+0x30c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d019      	beq.n	8003e0c <HAL_GPIO_Init+0x204>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a4f      	ldr	r2, [pc, #316]	@ (8003f18 <HAL_GPIO_Init+0x310>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d013      	beq.n	8003e08 <HAL_GPIO_Init+0x200>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a4e      	ldr	r2, [pc, #312]	@ (8003f1c <HAL_GPIO_Init+0x314>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00d      	beq.n	8003e04 <HAL_GPIO_Init+0x1fc>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a4d      	ldr	r2, [pc, #308]	@ (8003f20 <HAL_GPIO_Init+0x318>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d007      	beq.n	8003e00 <HAL_GPIO_Init+0x1f8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a4c      	ldr	r2, [pc, #304]	@ (8003f24 <HAL_GPIO_Init+0x31c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <HAL_GPIO_Init+0x1f4>
 8003df8:	2307      	movs	r3, #7
 8003dfa:	e00e      	b.n	8003e1a <HAL_GPIO_Init+0x212>
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	e00c      	b.n	8003e1a <HAL_GPIO_Init+0x212>
 8003e00:	2306      	movs	r3, #6
 8003e02:	e00a      	b.n	8003e1a <HAL_GPIO_Init+0x212>
 8003e04:	2305      	movs	r3, #5
 8003e06:	e008      	b.n	8003e1a <HAL_GPIO_Init+0x212>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	e006      	b.n	8003e1a <HAL_GPIO_Init+0x212>
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e004      	b.n	8003e1a <HAL_GPIO_Init+0x212>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e002      	b.n	8003e1a <HAL_GPIO_Init+0x212>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_GPIO_Init+0x212>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	f002 0203 	and.w	r2, r2, #3
 8003e20:	0092      	lsls	r2, r2, #2
 8003e22:	4093      	lsls	r3, r2
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e2a:	4937      	ldr	r1, [pc, #220]	@ (8003f08 <HAL_GPIO_Init+0x300>)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	089b      	lsrs	r3, r3, #2
 8003e30:	3302      	adds	r3, #2
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e38:	4b3b      	ldr	r3, [pc, #236]	@ (8003f28 <HAL_GPIO_Init+0x320>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e5c:	4a32      	ldr	r2, [pc, #200]	@ (8003f28 <HAL_GPIO_Init+0x320>)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e62:	4b31      	ldr	r3, [pc, #196]	@ (8003f28 <HAL_GPIO_Init+0x320>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e86:	4a28      	ldr	r2, [pc, #160]	@ (8003f28 <HAL_GPIO_Init+0x320>)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e8c:	4b26      	ldr	r3, [pc, #152]	@ (8003f28 <HAL_GPIO_Init+0x320>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f28 <HAL_GPIO_Init+0x320>)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f28 <HAL_GPIO_Init+0x320>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eda:	4a13      	ldr	r2, [pc, #76]	@ (8003f28 <HAL_GPIO_Init+0x320>)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f47f ae91 	bne.w	8003c18 <HAL_GPIO_Init+0x10>
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	48000400 	.word	0x48000400
 8003f10:	48000800 	.word	0x48000800
 8003f14:	48000c00 	.word	0x48000c00
 8003f18:	48001000 	.word	0x48001000
 8003f1c:	48001400 	.word	0x48001400
 8003f20:	48001800 	.word	0x48001800
 8003f24:	48001c00 	.word	0x48001c00
 8003f28:	40010400 	.word	0x40010400

08003f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	807b      	strh	r3, [r7, #2]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f3c:	787b      	ldrb	r3, [r7, #1]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f42:	887a      	ldrh	r2, [r7, #2]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f48:	e002      	b.n	8003f50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f6e:	887a      	ldrh	r2, [r7, #2]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4013      	ands	r3, r2
 8003f74:	041a      	lsls	r2, r3, #16
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	43d9      	mvns	r1, r3
 8003f7a:	887b      	ldrh	r3, [r7, #2]
 8003f7c:	400b      	ands	r3, r1
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	619a      	str	r2, [r3, #24]
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f9a:	4b08      	ldr	r3, [pc, #32]	@ (8003fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d006      	beq.n	8003fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fa6:	4a05      	ldr	r2, [pc, #20]	@ (8003fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc fccc 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40010400 	.word	0x40010400

08003fc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc2:	b08f      	sub	sp, #60	@ 0x3c
 8003fc4:	af0a      	add	r7, sp, #40	@ 0x28
 8003fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e116      	b.n	8004200 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f009 f8ff 	bl	800d1f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d102      	bne.n	800400c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f005 fd56 	bl	8009ac2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	687e      	ldr	r6, [r7, #4]
 800401e:	466d      	mov	r5, sp
 8004020:	f106 0410 	add.w	r4, r6, #16
 8004024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800402a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800402c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004030:	e885 0003 	stmia.w	r5, {r0, r1}
 8004034:	1d33      	adds	r3, r6, #4
 8004036:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004038:	6838      	ldr	r0, [r7, #0]
 800403a:	f005 fc69 	bl	8009910 <USB_CoreInit>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0d7      	b.n	8004200 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2100      	movs	r1, #0
 8004056:	4618      	mov	r0, r3
 8004058:	f005 fd44 	bl	8009ae4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]
 8004060:	e04a      	b.n	80040f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004062:	7bfa      	ldrb	r2, [r7, #15]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	333d      	adds	r3, #61	@ 0x3d
 8004072:	2201      	movs	r2, #1
 8004074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004076:	7bfa      	ldrb	r2, [r7, #15]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	333c      	adds	r3, #60	@ 0x3c
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800408a:	7bfa      	ldrb	r2, [r7, #15]
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	b298      	uxth	r0, r3
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	3356      	adds	r3, #86	@ 0x56
 800409e:	4602      	mov	r2, r0
 80040a0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	3340      	adds	r3, #64	@ 0x40
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040b6:	7bfa      	ldrb	r2, [r7, #15]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4413      	add	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	3344      	adds	r3, #68	@ 0x44
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040ca:	7bfa      	ldrb	r2, [r7, #15]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	3348      	adds	r3, #72	@ 0x48
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040de:	7bfa      	ldrb	r2, [r7, #15]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	334c      	adds	r3, #76	@ 0x4c
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	3301      	adds	r3, #1
 80040f6:	73fb      	strb	r3, [r7, #15]
 80040f8:	7bfa      	ldrb	r2, [r7, #15]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d3af      	bcc.n	8004062 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004102:	2300      	movs	r3, #0
 8004104:	73fb      	strb	r3, [r7, #15]
 8004106:	e044      	b.n	8004192 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004108:	7bfa      	ldrb	r2, [r7, #15]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800411e:	7bfa      	ldrb	r2, [r7, #15]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004130:	7bfa      	ldrb	r2, [r7, #15]
 8004132:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004134:	7bfa      	ldrb	r2, [r7, #15]
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800414a:	7bfa      	ldrb	r2, [r7, #15]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004160:	7bfa      	ldrb	r2, [r7, #15]
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004176:	7bfa      	ldrb	r2, [r7, #15]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	3301      	adds	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	d3b5      	bcc.n	8004108 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	603b      	str	r3, [r7, #0]
 80041a2:	687e      	ldr	r6, [r7, #4]
 80041a4:	466d      	mov	r5, sp
 80041a6:	f106 0410 	add.w	r4, r6, #16
 80041aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80041ba:	1d33      	adds	r3, r6, #4
 80041bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041be:	6838      	ldr	r0, [r7, #0]
 80041c0:	f005 fcdc 	bl	8009b7c <USB_DevInit>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2202      	movs	r2, #2
 80041ce:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e014      	b.n	8004200 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d102      	bne.n	80041f4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f001 f86a 	bl	80052c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f006 fc8a 	bl	800ab12 <USB_DevDisconnect>

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004208 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_PCD_Start+0x1c>
 8004220:	2302      	movs	r3, #2
 8004222:	e01c      	b.n	800425e <HAL_PCD_Start+0x56>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004230:	2b01      	cmp	r3, #1
 8004232:	d105      	bne.n	8004240 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004238:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f005 fc2b 	bl	8009aa0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f006 fc3e 	bl	800aad0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004266:	b590      	push	{r4, r7, lr}
 8004268:	b08d      	sub	sp, #52	@ 0x34
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f006 fcfc 	bl	800ac7a <USB_GetMode>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 847e 	bne.w	8004b86 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f006 fc60 	bl	800ab54 <USB_ReadInterrupts>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8474 	beq.w	8004b84 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	0a1b      	lsrs	r3, r3, #8
 80042a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f006 fc4d 	bl	800ab54 <USB_ReadInterrupts>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d107      	bne.n	80042d4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f002 0202 	and.w	r2, r2, #2
 80042d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f006 fc3b 	bl	800ab54 <USB_ReadInterrupts>
 80042de:	4603      	mov	r3, r0
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	d161      	bne.n	80043ac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0210 	bic.w	r2, r2, #16
 80042f6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f003 020f 	and.w	r2, r3, #15
 8004304:	4613      	mov	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4413      	add	r3, r2
 8004314:	3304      	adds	r3, #4
 8004316:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	0c5b      	lsrs	r3, r3, #17
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	2b02      	cmp	r3, #2
 8004322:	d124      	bne.n	800436e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800432a:	4013      	ands	r3, r2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d035      	beq.n	800439c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	091b      	lsrs	r3, r3, #4
 8004338:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800433a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800433e:	b29b      	uxth	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	6a38      	ldr	r0, [r7, #32]
 8004344:	f006 fa72 	bl	800a82c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004354:	441a      	add	r2, r3
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	695a      	ldr	r2, [r3, #20]
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004366:	441a      	add	r2, r3
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	615a      	str	r2, [r3, #20]
 800436c:	e016      	b.n	800439c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	0c5b      	lsrs	r3, r3, #17
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	2b06      	cmp	r3, #6
 8004378:	d110      	bne.n	800439c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004380:	2208      	movs	r2, #8
 8004382:	4619      	mov	r1, r3
 8004384:	6a38      	ldr	r0, [r7, #32]
 8004386:	f006 fa51 	bl	800a82c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	695a      	ldr	r2, [r3, #20]
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004396:	441a      	add	r2, r3
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0210 	orr.w	r2, r2, #16
 80043aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f006 fbcf 	bl	800ab54 <USB_ReadInterrupts>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80043c0:	f040 80a7 	bne.w	8004512 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f006 fbd4 	bl	800ab7a <USB_ReadDevAllOutEpInterrupt>
 80043d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80043d4:	e099      	b.n	800450a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80043d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 808e 	beq.w	80044fe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f006 fbf8 	bl	800abe2 <USB_ReadDevOutEPInterrupt>
 80043f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800440a:	461a      	mov	r2, r3
 800440c:	2301      	movs	r3, #1
 800440e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004410:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fe7e 	bl	8005114 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800442e:	461a      	mov	r2, r3
 8004430:	2308      	movs	r3, #8
 8004432:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004434:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 feba 	bl	80051b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004452:	461a      	mov	r2, r3
 8004454:	2310      	movs	r3, #16
 8004456:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d030      	beq.n	80044c4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446a:	2b80      	cmp	r3, #128	@ 0x80
 800446c:	d109      	bne.n	8004482 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800447c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004480:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4413      	add	r3, r2
 8004494:	3304      	adds	r3, #4
 8004496:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	78db      	ldrb	r3, [r3, #3]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d108      	bne.n	80044b2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2200      	movs	r2, #0
 80044a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f008 fff5 	bl	800d49c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044be:	461a      	mov	r2, r3
 80044c0:	2302      	movs	r3, #2
 80044c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044da:	461a      	mov	r2, r3
 80044dc:	2320      	movs	r3, #32
 80044de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f6:	461a      	mov	r2, r3
 80044f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80044fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	3301      	adds	r3, #1
 8004502:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800450a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450c:	2b00      	cmp	r3, #0
 800450e:	f47f af62 	bne.w	80043d6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f006 fb1c 	bl	800ab54 <USB_ReadInterrupts>
 800451c:	4603      	mov	r3, r0
 800451e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004522:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004526:	f040 80a4 	bne.w	8004672 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f006 fb3d 	bl	800abae <USB_ReadDevAllInEpInterrupt>
 8004534:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800453a:	e096      	b.n	800466a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800453c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 808b 	beq.w	800465e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	4611      	mov	r1, r2
 8004552:	4618      	mov	r0, r3
 8004554:	f006 fb63 	bl	800ac1e <USB_ReadDevInEPInterrupt>
 8004558:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d020      	beq.n	80045a6 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	2201      	movs	r2, #1
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004578:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	43db      	mvns	r3, r3
 800457e:	69f9      	ldr	r1, [r7, #28]
 8004580:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004584:	4013      	ands	r3, r2
 8004586:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004594:	461a      	mov	r2, r3
 8004596:	2301      	movs	r3, #1
 8004598:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	b2db      	uxtb	r3, r3
 800459e:	4619      	mov	r1, r3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f008 fee6 	bl	800d372 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045bc:	461a      	mov	r2, r3
 80045be:	2308      	movs	r3, #8
 80045c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045d8:	461a      	mov	r2, r3
 80045da:	2310      	movs	r3, #16
 80045dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f4:	461a      	mov	r2, r3
 80045f6:	2340      	movs	r3, #64	@ 0x40
 80045f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d023      	beq.n	800464c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004604:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004606:	6a38      	ldr	r0, [r7, #32]
 8004608:	f005 fbfa 	bl	8009e00 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800460c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800460e:	4613      	mov	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	3338      	adds	r3, #56	@ 0x38
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4413      	add	r3, r2
 800461c:	3304      	adds	r3, #4
 800461e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	78db      	ldrb	r3, [r3, #3]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d108      	bne.n	800463a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2200      	movs	r2, #0
 800462c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	b2db      	uxtb	r3, r3
 8004632:	4619      	mov	r1, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f008 ff43 	bl	800d4c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004646:	461a      	mov	r2, r3
 8004648:	2302      	movs	r3, #2
 800464a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004656:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fcd2 	bl	8005002 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	3301      	adds	r3, #1
 8004662:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004666:	085b      	lsrs	r3, r3, #1
 8004668:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800466a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466c:	2b00      	cmp	r3, #0
 800466e:	f47f af65 	bne.w	800453c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f006 fa6c 	bl	800ab54 <USB_ReadInterrupts>
 800467c:	4603      	mov	r3, r0
 800467e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004682:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004686:	d122      	bne.n	80046ce <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d108      	bne.n	80046b8 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80046ae:	2100      	movs	r1, #0
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f009 f977 	bl	800d9a4 <HAL_PCDEx_LPM_Callback>
 80046b6:	e002      	b.n	80046be <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f008 fec7 	bl	800d44c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695a      	ldr	r2, [r3, #20]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80046cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f006 fa3e 	bl	800ab54 <USB_ReadInterrupts>
 80046d8:	4603      	mov	r3, r0
 80046da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046e2:	d112      	bne.n	800470a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d102      	bne.n	80046fa <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f008 fe83 	bl	800d400 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004708:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f006 fa20 	bl	800ab54 <USB_ReadInterrupts>
 8004714:	4603      	mov	r3, r0
 8004716:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800471a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800471e:	d121      	bne.n	8004764 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800472e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004736:	2b00      	cmp	r3, #0
 8004738:	d111      	bne.n	800475e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004748:	089b      	lsrs	r3, r3, #2
 800474a:	f003 020f 	and.w	r2, r3, #15
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004754:	2101      	movs	r1, #1
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f009 f924 	bl	800d9a4 <HAL_PCDEx_LPM_Callback>
 800475c:	e002      	b.n	8004764 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f008 fe4e 	bl	800d400 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f006 f9f3 	bl	800ab54 <USB_ReadInterrupts>
 800476e:	4603      	mov	r3, r0
 8004770:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004778:	f040 80b5 	bne.w	80048e6 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800478a:	f023 0301 	bic.w	r3, r3, #1
 800478e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2110      	movs	r1, #16
 8004796:	4618      	mov	r0, r3
 8004798:	f005 fb32 	bl	8009e00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800479c:	2300      	movs	r3, #0
 800479e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047a0:	e046      	b.n	8004830 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80047a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ae:	461a      	mov	r2, r3
 80047b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047c6:	0151      	lsls	r1, r2, #5
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	440a      	add	r2, r1
 80047cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80047d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e2:	461a      	mov	r2, r3
 80047e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047fa:	0151      	lsls	r1, r2, #5
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	440a      	add	r2, r1
 8004800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004804:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004808:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800480a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800481a:	0151      	lsls	r1, r2, #5
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	440a      	add	r2, r1
 8004820:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004824:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004828:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800482a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482c:	3301      	adds	r3, #1
 800482e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004836:	429a      	cmp	r2, r3
 8004838:	d3b3      	bcc.n	80047a2 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004848:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800484c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004852:	2b00      	cmp	r3, #0
 8004854:	d016      	beq.n	8004884 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800485c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004866:	f043 030b 	orr.w	r3, r3, #11
 800486a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800487c:	f043 030b 	orr.w	r3, r3, #11
 8004880:	6453      	str	r3, [r2, #68]	@ 0x44
 8004882:	e015      	b.n	80048b0 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004892:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004896:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800489a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048aa:	f043 030b 	orr.w	r3, r3, #11
 80048ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80048c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80048ce:	4619      	mov	r1, r3
 80048d0:	4610      	mov	r0, r2
 80048d2:	f006 fa03 	bl	800acdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80048e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f006 f932 	bl	800ab54 <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048fa:	d124      	bne.n	8004946 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f006 f9c8 	bl	800ac96 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f005 faf5 	bl	8009efa <USB_GetDevSpeed>
 8004910:	4603      	mov	r3, r0
 8004912:	461a      	mov	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681c      	ldr	r4, [r3, #0]
 800491c:	f001 fbbc 	bl	8006098 <HAL_RCC_GetHCLKFreq>
 8004920:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004926:	b2db      	uxtb	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	4620      	mov	r0, r4
 800492c:	f005 f81c 	bl	8009968 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f008 fd46 	bl	800d3c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695a      	ldr	r2, [r3, #20]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004944:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f006 f902 	bl	800ab54 <USB_ReadInterrupts>
 8004950:	4603      	mov	r3, r0
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b08      	cmp	r3, #8
 8004958:	d10a      	bne.n	8004970 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f008 fd23 	bl	800d3a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f002 0208 	and.w	r2, r2, #8
 800496e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f006 f8ed 	bl	800ab54 <USB_ReadInterrupts>
 800497a:	4603      	mov	r3, r0
 800497c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004980:	2b80      	cmp	r3, #128	@ 0x80
 8004982:	d122      	bne.n	80049ca <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004990:	2301      	movs	r3, #1
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
 8004994:	e014      	b.n	80049c0 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499a:	4613      	mov	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d105      	bne.n	80049ba <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	4619      	mov	r1, r3
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 faf3 	bl	8004fa0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	3301      	adds	r3, #1
 80049be:	627b      	str	r3, [r7, #36]	@ 0x24
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d3e5      	bcc.n	8004996 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f006 f8c0 	bl	800ab54 <USB_ReadInterrupts>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049de:	d13b      	bne.n	8004a58 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049e0:	2301      	movs	r3, #1
 80049e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e4:	e02b      	b.n	8004a3e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049fa:	4613      	mov	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	3340      	adds	r3, #64	@ 0x40
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d115      	bne.n	8004a38 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004a0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	da12      	bge.n	8004a38 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a16:	4613      	mov	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	333f      	adds	r3, #63	@ 0x3f
 8004a22:	2201      	movs	r2, #1
 8004a24:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4619      	mov	r1, r3
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fab4 	bl	8004fa0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d3ce      	bcc.n	80049e6 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f006 f879 	bl	800ab54 <USB_ReadInterrupts>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a6c:	d155      	bne.n	8004b1a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a6e:	2301      	movs	r3, #1
 8004a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a72:	e045      	b.n	8004b00 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a88:	4613      	mov	r3, r2
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d12e      	bne.n	8004afa <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a9c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	da2b      	bge.n	8004afa <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004aae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d121      	bne.n	8004afa <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aba:	4613      	mov	r3, r2
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	4413      	add	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004ac8:	2201      	movs	r2, #1
 8004aca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004af2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004af6:	6053      	str	r3, [r2, #4]
            break;
 8004af8:	e007      	b.n	8004b0a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	3301      	adds	r3, #1
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d3b4      	bcc.n	8004a74 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695a      	ldr	r2, [r3, #20]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f006 f818 	bl	800ab54 <USB_ReadInterrupts>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b2e:	d10a      	bne.n	8004b46 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f008 fcd7 	bl	800d4e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695a      	ldr	r2, [r3, #20]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f006 f802 	bl	800ab54 <USB_ReadInterrupts>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d115      	bne.n	8004b86 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f008 fcc7 	bl	800d500 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6859      	ldr	r1, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
 8004b82:	e000      	b.n	8004b86 <HAL_PCD_IRQHandler+0x920>
      return;
 8004b84:	bf00      	nop
    }
  }
}
 8004b86:	3734      	adds	r7, #52	@ 0x34
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd90      	pop	{r4, r7, pc}

08004b8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_PCD_SetAddress+0x1a>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e013      	b.n	8004bce <HAL_PCD_SetAddress+0x42>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	78fa      	ldrb	r2, [r7, #3]
 8004bb2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	78fa      	ldrb	r2, [r7, #3]
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f005 ff60 	bl	800aa84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	4608      	mov	r0, r1
 8004be0:	4611      	mov	r1, r2
 8004be2:	461a      	mov	r2, r3
 8004be4:	4603      	mov	r3, r0
 8004be6:	70fb      	strb	r3, [r7, #3]
 8004be8:	460b      	mov	r3, r1
 8004bea:	803b      	strh	r3, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	da0f      	bge.n	8004c1c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	f003 020f 	and.w	r2, r3, #15
 8004c02:	4613      	mov	r3, r2
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	3338      	adds	r3, #56	@ 0x38
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	4413      	add	r3, r2
 8004c10:	3304      	adds	r3, #4
 8004c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	705a      	strb	r2, [r3, #1]
 8004c1a:	e00f      	b.n	8004c3c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	f003 020f 	and.w	r2, r3, #15
 8004c22:	4613      	mov	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	3304      	adds	r3, #4
 8004c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004c48:	883a      	ldrh	r2, [r7, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	78ba      	ldrb	r2, [r7, #2]
 8004c52:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	785b      	ldrb	r3, [r3, #1]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d004      	beq.n	8004c66 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004c66:	78bb      	ldrb	r3, [r7, #2]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d102      	bne.n	8004c72 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_PCD_EP_Open+0xaa>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e00e      	b.n	8004c9e <HAL_PCD_EP_Open+0xc8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68f9      	ldr	r1, [r7, #12]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f005 f952 	bl	8009f38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004c9c:	7afb      	ldrb	r3, [r7, #11]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004cb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	da0f      	bge.n	8004cda <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	f003 020f 	and.w	r2, r3, #15
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	3338      	adds	r3, #56	@ 0x38
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	4413      	add	r3, r2
 8004cce:	3304      	adds	r3, #4
 8004cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	705a      	strb	r2, [r3, #1]
 8004cd8:	e00f      	b.n	8004cfa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cda:	78fb      	ldrb	r3, [r7, #3]
 8004cdc:	f003 020f 	and.w	r2, r3, #15
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	4413      	add	r3, r2
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_PCD_EP_Close+0x6e>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e00e      	b.n	8004d32 <HAL_PCD_EP_Close+0x8c>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68f9      	ldr	r1, [r7, #12]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f005 f990 	bl	800a048 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b086      	sub	sp, #24
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
 8004d46:	460b      	mov	r3, r1
 8004d48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d4a:	7afb      	ldrb	r3, [r7, #11]
 8004d4c:	f003 020f 	and.w	r2, r3, #15
 8004d50:	4613      	mov	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	3304      	adds	r3, #4
 8004d62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2200      	movs	r2, #0
 8004d74:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d7c:	7afb      	ldrb	r3, [r7, #11]
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6979      	ldr	r1, [r7, #20]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f005 fa36 	bl	800a200 <USB_EPStartXfer>

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	460b      	mov	r3, r1
 8004da8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	f003 020f 	and.w	r2, r3, #15
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004dc0:	681b      	ldr	r3, [r3, #0]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b086      	sub	sp, #24
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dde:	7afb      	ldrb	r3, [r7, #11]
 8004de0:	f003 020f 	and.w	r2, r3, #15
 8004de4:	4613      	mov	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4413      	add	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	3338      	adds	r3, #56	@ 0x38
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	3304      	adds	r3, #4
 8004df4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2200      	movs	r2, #0
 8004e06:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e0e:	7afb      	ldrb	r3, [r7, #11]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6979      	ldr	r1, [r7, #20]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f005 f9ed 	bl	800a200 <USB_EPStartXfer>

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	f003 020f 	and.w	r2, r3, #15
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d901      	bls.n	8004e4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e04e      	b.n	8004eec <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	da0f      	bge.n	8004e76 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e56:	78fb      	ldrb	r3, [r7, #3]
 8004e58:	f003 020f 	and.w	r2, r3, #15
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	3338      	adds	r3, #56	@ 0x38
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	4413      	add	r3, r2
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	705a      	strb	r2, [r3, #1]
 8004e74:	e00d      	b.n	8004e92 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	4413      	add	r3, r2
 8004e88:	3304      	adds	r3, #4
 8004e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_PCD_EP_SetStall+0x82>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e01c      	b.n	8004eec <HAL_PCD_EP_SetStall+0xbc>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f005 fd0b 	bl	800a8dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d108      	bne.n	8004ee2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f005 fefd 	bl	800acdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	f003 020f 	and.w	r2, r3, #15
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d901      	bls.n	8004f12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e042      	b.n	8004f98 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	da0f      	bge.n	8004f3a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	f003 020f 	and.w	r2, r3, #15
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	3338      	adds	r3, #56	@ 0x38
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3304      	adds	r3, #4
 8004f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	705a      	strb	r2, [r3, #1]
 8004f38:	e00f      	b.n	8004f5a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	f003 020f 	and.w	r2, r3, #15
 8004f40:	4613      	mov	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	4413      	add	r3, r2
 8004f50:	3304      	adds	r3, #4
 8004f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_PCD_EP_ClrStall+0x86>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e00e      	b.n	8004f98 <HAL_PCD_EP_ClrStall+0xa4>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f005 fd15 	bl	800a9b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	da0c      	bge.n	8004fce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	f003 020f 	and.w	r2, r3, #15
 8004fba:	4613      	mov	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	3338      	adds	r3, #56	@ 0x38
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	3304      	adds	r3, #4
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	e00c      	b.n	8004fe8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	f003 020f 	and.w	r2, r3, #15
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68f9      	ldr	r1, [r7, #12]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f005 fb38 	bl	800a664 <USB_EPStopXfer>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004ff8:	7afb      	ldrb	r3, [r7, #11]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b088      	sub	sp, #32
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	3338      	adds	r3, #56	@ 0x38
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	4413      	add	r3, r2
 8005026:	3304      	adds	r3, #4
 8005028:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	429a      	cmp	r2, r3
 8005034:	d901      	bls.n	800503a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e067      	b.n	800510a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	429a      	cmp	r2, r3
 800504e:	d902      	bls.n	8005056 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3303      	adds	r3, #3
 800505a:	089b      	lsrs	r3, r3, #2
 800505c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800505e:	e026      	b.n	80050ae <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	429a      	cmp	r2, r3
 8005074:	d902      	bls.n	800507c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	3303      	adds	r3, #3
 8005080:	089b      	lsrs	r3, r3, #2
 8005082:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	68d9      	ldr	r1, [r3, #12]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	b2da      	uxtb	r2, r3
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	b29b      	uxth	r3, r3
 8005090:	6978      	ldr	r0, [r7, #20]
 8005092:	f005 fb91 	bl	800a7b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	441a      	add	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	441a      	add	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d809      	bhi.n	80050d8 <PCD_WriteEmptyTxFifo+0xd6>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d203      	bcs.n	80050d8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1c3      	bne.n	8005060 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d811      	bhi.n	8005108 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	2201      	movs	r2, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	43db      	mvns	r3, r3
 80050fe:	6939      	ldr	r1, [r7, #16]
 8005100:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005104:	4013      	ands	r3, r2
 8005106:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	333c      	adds	r3, #60	@ 0x3c
 800512c:	3304      	adds	r3, #4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4a19      	ldr	r2, [pc, #100]	@ (80051ac <PCD_EP_OutXfrComplete_int+0x98>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d124      	bne.n	8005194 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005160:	461a      	mov	r2, r3
 8005162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005166:	6093      	str	r3, [r2, #8]
 8005168:	e01a      	b.n	80051a0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005180:	461a      	mov	r2, r3
 8005182:	2320      	movs	r3, #32
 8005184:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f008 f8d5 	bl	800d33c <HAL_PCD_DataOutStageCallback>
 8005192:	e005      	b.n	80051a0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	4619      	mov	r1, r3
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f008 f8ce 	bl	800d33c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	4f54310a 	.word	0x4f54310a

080051b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	333c      	adds	r3, #60	@ 0x3c
 80051c8:	3304      	adds	r3, #4
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005214 <PCD_EP_OutSetupPacket_int+0x64>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d90e      	bls.n	8005204 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d009      	beq.n	8005204 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051fc:	461a      	mov	r2, r3
 80051fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005202:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f008 f887 	bl	800d318 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	4f54300a 	.word	0x4f54300a

08005218 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	70fb      	strb	r3, [r7, #3]
 8005224:	4613      	mov	r3, r2
 8005226:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d107      	bne.n	8005246 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005236:	883b      	ldrh	r3, [r7, #0]
 8005238:	0419      	lsls	r1, r3, #16
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	430a      	orrs	r2, r1
 8005242:	629a      	str	r2, [r3, #40]	@ 0x28
 8005244:	e028      	b.n	8005298 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524c:	0c1b      	lsrs	r3, r3, #16
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4413      	add	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005254:	2300      	movs	r3, #0
 8005256:	73fb      	strb	r3, [r7, #15]
 8005258:	e00d      	b.n	8005276 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	3340      	adds	r3, #64	@ 0x40
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	0c1b      	lsrs	r3, r3, #16
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	4413      	add	r3, r2
 800526e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	3301      	adds	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
 8005276:	7bfa      	ldrb	r2, [r7, #15]
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	3b01      	subs	r3, #1
 800527c:	429a      	cmp	r2, r3
 800527e:	d3ec      	bcc.n	800525a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005280:	883b      	ldrh	r3, [r7, #0]
 8005282:	0418      	lsls	r0, r3, #16
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6819      	ldr	r1, [r3, #0]
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	3b01      	subs	r3, #1
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	4302      	orrs	r2, r0
 8005290:	3340      	adds	r3, #64	@ 0x40
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	887a      	ldrh	r2, [r7, #2]
 80052b8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052fa:	f043 0303 	orr.w	r3, r3, #3
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005314:	4b0d      	ldr	r3, [pc, #52]	@ (800534c <HAL_PWREx_GetVoltageRange+0x3c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800531c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005320:	d102      	bne.n	8005328 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005322:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005326:	e00b      	b.n	8005340 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005328:	4b08      	ldr	r3, [pc, #32]	@ (800534c <HAL_PWREx_GetVoltageRange+0x3c>)
 800532a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800532e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005336:	d102      	bne.n	800533e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005338:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800533c:	e000      	b.n	8005340 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800533e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005340:	4618      	mov	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40007000 	.word	0x40007000

08005350 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d141      	bne.n	80053e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800535e:	4b4b      	ldr	r3, [pc, #300]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800536a:	d131      	bne.n	80053d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800536c:	4b47      	ldr	r3, [pc, #284]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800536e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005372:	4a46      	ldr	r2, [pc, #280]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005378:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800537c:	4b43      	ldr	r3, [pc, #268]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005384:	4a41      	ldr	r2, [pc, #260]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005386:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800538a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800538c:	4b40      	ldr	r3, [pc, #256]	@ (8005490 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2232      	movs	r2, #50	@ 0x32
 8005392:	fb02 f303 	mul.w	r3, r2, r3
 8005396:	4a3f      	ldr	r2, [pc, #252]	@ (8005494 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	0c9b      	lsrs	r3, r3, #18
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053a2:	e002      	b.n	80053aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053aa:	4b38      	ldr	r3, [pc, #224]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053b6:	d102      	bne.n	80053be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f2      	bne.n	80053a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053be:	4b33      	ldr	r3, [pc, #204]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ca:	d158      	bne.n	800547e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e057      	b.n	8005480 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053d0:	4b2e      	ldr	r3, [pc, #184]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053d6:	4a2d      	ldr	r2, [pc, #180]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80053e0:	e04d      	b.n	800547e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053e8:	d141      	bne.n	800546e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053ea:	4b28      	ldr	r3, [pc, #160]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053f6:	d131      	bne.n	800545c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053f8:	4b24      	ldr	r3, [pc, #144]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053fe:	4a23      	ldr	r2, [pc, #140]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005404:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005408:	4b20      	ldr	r3, [pc, #128]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005410:	4a1e      	ldr	r2, [pc, #120]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005412:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005416:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005418:	4b1d      	ldr	r3, [pc, #116]	@ (8005490 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2232      	movs	r2, #50	@ 0x32
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	4a1c      	ldr	r2, [pc, #112]	@ (8005494 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005424:	fba2 2303 	umull	r2, r3, r2, r3
 8005428:	0c9b      	lsrs	r3, r3, #18
 800542a:	3301      	adds	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800542e:	e002      	b.n	8005436 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	3b01      	subs	r3, #1
 8005434:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005436:	4b15      	ldr	r3, [pc, #84]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800543e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005442:	d102      	bne.n	800544a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f2      	bne.n	8005430 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800544a:	4b10      	ldr	r3, [pc, #64]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005456:	d112      	bne.n	800547e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e011      	b.n	8005480 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800545c:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800545e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005462:	4a0a      	ldr	r2, [pc, #40]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005468:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800546c:	e007      	b.n	800547e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800546e:	4b07      	ldr	r3, [pc, #28]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005476:	4a05      	ldr	r2, [pc, #20]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005478:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800547c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	40007000 	.word	0x40007000
 8005490:	20000000 	.word	0x20000000
 8005494:	431bde83 	.word	0x431bde83

08005498 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800549c:	4b05      	ldr	r3, [pc, #20]	@ (80054b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4a04      	ldr	r2, [pc, #16]	@ (80054b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80054a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054a6:	6053      	str	r3, [r2, #4]
}
 80054a8:	bf00      	nop
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40007000 	.word	0x40007000

080054b8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80054bc:	4b05      	ldr	r3, [pc, #20]	@ (80054d4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a04      	ldr	r2, [pc, #16]	@ (80054d4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80054c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054c6:	6053      	str	r3, [r2, #4]
}
 80054c8:	bf00      	nop
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40007000 	.word	0x40007000

080054d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	f000 bc08 	b.w	8005cfc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054ec:	4b96      	ldr	r3, [pc, #600]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 030c 	and.w	r3, r3, #12
 80054f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054f6:	4b94      	ldr	r3, [pc, #592]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 80e4 	beq.w	80056d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d007      	beq.n	8005524 <HAL_RCC_OscConfig+0x4c>
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b0c      	cmp	r3, #12
 8005518:	f040 808b 	bne.w	8005632 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b01      	cmp	r3, #1
 8005520:	f040 8087 	bne.w	8005632 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005524:	4b88      	ldr	r3, [pc, #544]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <HAL_RCC_OscConfig+0x64>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e3df      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	4b81      	ldr	r3, [pc, #516]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d004      	beq.n	8005556 <HAL_RCC_OscConfig+0x7e>
 800554c:	4b7e      	ldr	r3, [pc, #504]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005554:	e005      	b.n	8005562 <HAL_RCC_OscConfig+0x8a>
 8005556:	4b7c      	ldr	r3, [pc, #496]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800555c:	091b      	lsrs	r3, r3, #4
 800555e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005562:	4293      	cmp	r3, r2
 8005564:	d223      	bcs.n	80055ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fdcc 	bl	8006108 <RCC_SetFlashLatencyFromMSIRange>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e3c0      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800557a:	4b73      	ldr	r3, [pc, #460]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a72      	ldr	r2, [pc, #456]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005580:	f043 0308 	orr.w	r3, r3, #8
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4b70      	ldr	r3, [pc, #448]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	496d      	ldr	r1, [pc, #436]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005594:	4313      	orrs	r3, r2
 8005596:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005598:	4b6b      	ldr	r3, [pc, #428]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	021b      	lsls	r3, r3, #8
 80055a6:	4968      	ldr	r1, [pc, #416]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	604b      	str	r3, [r1, #4]
 80055ac:	e025      	b.n	80055fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055ae:	4b66      	ldr	r3, [pc, #408]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a65      	ldr	r2, [pc, #404]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 80055b4:	f043 0308 	orr.w	r3, r3, #8
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	4b63      	ldr	r3, [pc, #396]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	4960      	ldr	r1, [pc, #384]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055cc:	4b5e      	ldr	r3, [pc, #376]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	495b      	ldr	r1, [pc, #364]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fd8c 	bl	8006108 <RCC_SetFlashLatencyFromMSIRange>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e380      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055fa:	f000 fcc1 	bl	8005f80 <HAL_RCC_GetSysClockFreq>
 80055fe:	4602      	mov	r2, r0
 8005600:	4b51      	ldr	r3, [pc, #324]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	091b      	lsrs	r3, r3, #4
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	4950      	ldr	r1, [pc, #320]	@ (800574c <HAL_RCC_OscConfig+0x274>)
 800560c:	5ccb      	ldrb	r3, [r1, r3]
 800560e:	f003 031f 	and.w	r3, r3, #31
 8005612:	fa22 f303 	lsr.w	r3, r2, r3
 8005616:	4a4e      	ldr	r2, [pc, #312]	@ (8005750 <HAL_RCC_OscConfig+0x278>)
 8005618:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800561a:	4b4e      	ldr	r3, [pc, #312]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f7fc fa10 	bl	8001a44 <HAL_InitTick>
 8005624:	4603      	mov	r3, r0
 8005626:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d052      	beq.n	80056d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	e364      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d032      	beq.n	80056a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800563a:	4b43      	ldr	r3, [pc, #268]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a42      	ldr	r2, [pc, #264]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005646:	f7fc fa4d 	bl	8001ae4 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800564e:	f7fc fa49 	bl	8001ae4 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e34d      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005660:	4b39      	ldr	r3, [pc, #228]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800566c:	4b36      	ldr	r3, [pc, #216]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a35      	ldr	r2, [pc, #212]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005672:	f043 0308 	orr.w	r3, r3, #8
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	4b33      	ldr	r3, [pc, #204]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	4930      	ldr	r1, [pc, #192]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005686:	4313      	orrs	r3, r2
 8005688:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800568a:	4b2f      	ldr	r3, [pc, #188]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	021b      	lsls	r3, r3, #8
 8005698:	492b      	ldr	r1, [pc, #172]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 800569a:	4313      	orrs	r3, r2
 800569c:	604b      	str	r3, [r1, #4]
 800569e:	e01a      	b.n	80056d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056a0:	4b29      	ldr	r3, [pc, #164]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a28      	ldr	r2, [pc, #160]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 80056a6:	f023 0301 	bic.w	r3, r3, #1
 80056aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056ac:	f7fc fa1a 	bl	8001ae4 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056b4:	f7fc fa16 	bl	8001ae4 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e31a      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056c6:	4b20      	ldr	r3, [pc, #128]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x1dc>
 80056d2:	e000      	b.n	80056d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d073      	beq.n	80057ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d005      	beq.n	80056f4 <HAL_RCC_OscConfig+0x21c>
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	2b0c      	cmp	r3, #12
 80056ec:	d10e      	bne.n	800570c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d10b      	bne.n	800570c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f4:	4b14      	ldr	r3, [pc, #80]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d063      	beq.n	80057c8 <HAL_RCC_OscConfig+0x2f0>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d15f      	bne.n	80057c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e2f7      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005714:	d106      	bne.n	8005724 <HAL_RCC_OscConfig+0x24c>
 8005716:	4b0c      	ldr	r3, [pc, #48]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a0b      	ldr	r2, [pc, #44]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 800571c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e025      	b.n	8005770 <HAL_RCC_OscConfig+0x298>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800572c:	d114      	bne.n	8005758 <HAL_RCC_OscConfig+0x280>
 800572e:	4b06      	ldr	r3, [pc, #24]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a05      	ldr	r2, [pc, #20]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	4b03      	ldr	r3, [pc, #12]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a02      	ldr	r2, [pc, #8]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e013      	b.n	8005770 <HAL_RCC_OscConfig+0x298>
 8005748:	40021000 	.word	0x40021000
 800574c:	0800db50 	.word	0x0800db50
 8005750:	20000000 	.word	0x20000000
 8005754:	20000004 	.word	0x20000004
 8005758:	4ba0      	ldr	r3, [pc, #640]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a9f      	ldr	r2, [pc, #636]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 800575e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	4b9d      	ldr	r3, [pc, #628]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a9c      	ldr	r2, [pc, #624]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 800576a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800576e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d013      	beq.n	80057a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fc f9b4 	bl	8001ae4 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005780:	f7fc f9b0 	bl	8001ae4 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b64      	cmp	r3, #100	@ 0x64
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e2b4      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005792:	4b92      	ldr	r3, [pc, #584]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0x2a8>
 800579e:	e014      	b.n	80057ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fc f9a0 	bl	8001ae4 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057a8:	f7fc f99c 	bl	8001ae4 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b64      	cmp	r3, #100	@ 0x64
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e2a0      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057ba:	4b88      	ldr	r3, [pc, #544]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x2d0>
 80057c6:	e000      	b.n	80057ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d060      	beq.n	8005898 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d005      	beq.n	80057e8 <HAL_RCC_OscConfig+0x310>
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b0c      	cmp	r3, #12
 80057e0:	d119      	bne.n	8005816 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d116      	bne.n	8005816 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057e8:	4b7c      	ldr	r3, [pc, #496]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <HAL_RCC_OscConfig+0x328>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e27d      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005800:	4b76      	ldr	r3, [pc, #472]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	061b      	lsls	r3, r3, #24
 800580e:	4973      	ldr	r1, [pc, #460]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 8005810:	4313      	orrs	r3, r2
 8005812:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005814:	e040      	b.n	8005898 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d023      	beq.n	8005866 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800581e:	4b6f      	ldr	r3, [pc, #444]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a6e      	ldr	r2, [pc, #440]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 8005824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582a:	f7fc f95b 	bl	8001ae4 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005832:	f7fc f957 	bl	8001ae4 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e25b      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005844:	4b65      	ldr	r3, [pc, #404]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f0      	beq.n	8005832 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005850:	4b62      	ldr	r3, [pc, #392]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	061b      	lsls	r3, r3, #24
 800585e:	495f      	ldr	r1, [pc, #380]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 8005860:	4313      	orrs	r3, r2
 8005862:	604b      	str	r3, [r1, #4]
 8005864:	e018      	b.n	8005898 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005866:	4b5d      	ldr	r3, [pc, #372]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a5c      	ldr	r2, [pc, #368]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 800586c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005872:	f7fc f937 	bl	8001ae4 <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800587a:	f7fc f933 	bl	8001ae4 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e237      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800588c:	4b53      	ldr	r3, [pc, #332]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f0      	bne.n	800587a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d03c      	beq.n	800591e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01c      	beq.n	80058e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058ac:	4b4b      	ldr	r3, [pc, #300]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 80058ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058b2:	4a4a      	ldr	r2, [pc, #296]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 80058b4:	f043 0301 	orr.w	r3, r3, #1
 80058b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058bc:	f7fc f912 	bl	8001ae4 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058c2:	e008      	b.n	80058d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058c4:	f7fc f90e 	bl	8001ae4 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e212      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058d6:	4b41      	ldr	r3, [pc, #260]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 80058d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0ef      	beq.n	80058c4 <HAL_RCC_OscConfig+0x3ec>
 80058e4:	e01b      	b.n	800591e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058e6:	4b3d      	ldr	r3, [pc, #244]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 80058e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058ec:	4a3b      	ldr	r2, [pc, #236]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f6:	f7fc f8f5 	bl	8001ae4 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058fe:	f7fc f8f1 	bl	8001ae4 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e1f5      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005910:	4b32      	ldr	r3, [pc, #200]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 8005912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1ef      	bne.n	80058fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 80a6 	beq.w	8005a78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800592c:	2300      	movs	r3, #0
 800592e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005930:	4b2a      	ldr	r3, [pc, #168]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 8005932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10d      	bne.n	8005958 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800593c:	4b27      	ldr	r3, [pc, #156]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 800593e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005940:	4a26      	ldr	r2, [pc, #152]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 8005942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005946:	6593      	str	r3, [r2, #88]	@ 0x58
 8005948:	4b24      	ldr	r3, [pc, #144]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005954:	2301      	movs	r3, #1
 8005956:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005958:	4b21      	ldr	r3, [pc, #132]	@ (80059e0 <HAL_RCC_OscConfig+0x508>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005960:	2b00      	cmp	r3, #0
 8005962:	d118      	bne.n	8005996 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005964:	4b1e      	ldr	r3, [pc, #120]	@ (80059e0 <HAL_RCC_OscConfig+0x508>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1d      	ldr	r2, [pc, #116]	@ (80059e0 <HAL_RCC_OscConfig+0x508>)
 800596a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800596e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005970:	f7fc f8b8 	bl	8001ae4 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005978:	f7fc f8b4 	bl	8001ae4 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e1b8      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800598a:	4b15      	ldr	r3, [pc, #84]	@ (80059e0 <HAL_RCC_OscConfig+0x508>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d108      	bne.n	80059b0 <HAL_RCC_OscConfig+0x4d8>
 800599e:	4b0f      	ldr	r3, [pc, #60]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a4:	4a0d      	ldr	r2, [pc, #52]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059ae:	e029      	b.n	8005a04 <HAL_RCC_OscConfig+0x52c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2b05      	cmp	r3, #5
 80059b6:	d115      	bne.n	80059e4 <HAL_RCC_OscConfig+0x50c>
 80059b8:	4b08      	ldr	r3, [pc, #32]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059be:	4a07      	ldr	r2, [pc, #28]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 80059c0:	f043 0304 	orr.w	r3, r3, #4
 80059c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059c8:	4b04      	ldr	r3, [pc, #16]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 80059ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ce:	4a03      	ldr	r2, [pc, #12]	@ (80059dc <HAL_RCC_OscConfig+0x504>)
 80059d0:	f043 0301 	orr.w	r3, r3, #1
 80059d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059d8:	e014      	b.n	8005a04 <HAL_RCC_OscConfig+0x52c>
 80059da:	bf00      	nop
 80059dc:	40021000 	.word	0x40021000
 80059e0:	40007000 	.word	0x40007000
 80059e4:	4b9d      	ldr	r3, [pc, #628]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ea:	4a9c      	ldr	r2, [pc, #624]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 80059ec:	f023 0301 	bic.w	r3, r3, #1
 80059f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059f4:	4b99      	ldr	r3, [pc, #612]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fa:	4a98      	ldr	r2, [pc, #608]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 80059fc:	f023 0304 	bic.w	r3, r3, #4
 8005a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d016      	beq.n	8005a3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0c:	f7fc f86a 	bl	8001ae4 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a12:	e00a      	b.n	8005a2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a14:	f7fc f866 	bl	8001ae4 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e168      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a2a:	4b8c      	ldr	r3, [pc, #560]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0ed      	beq.n	8005a14 <HAL_RCC_OscConfig+0x53c>
 8005a38:	e015      	b.n	8005a66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3a:	f7fc f853 	bl	8001ae4 <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a40:	e00a      	b.n	8005a58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a42:	f7fc f84f 	bl	8001ae4 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e151      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a58:	4b80      	ldr	r3, [pc, #512]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1ed      	bne.n	8005a42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a66:	7ffb      	ldrb	r3, [r7, #31]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d105      	bne.n	8005a78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a6c:	4b7b      	ldr	r3, [pc, #492]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a70:	4a7a      	ldr	r2, [pc, #488]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d03c      	beq.n	8005afe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01c      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a8c:	4b73      	ldr	r3, [pc, #460]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a92:	4a72      	ldr	r2, [pc, #456]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005a94:	f043 0301 	orr.w	r3, r3, #1
 8005a98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9c:	f7fc f822 	bl	8001ae4 <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aa4:	f7fc f81e 	bl	8001ae4 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e122      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ab6:	4b69      	ldr	r3, [pc, #420]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0ef      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x5cc>
 8005ac4:	e01b      	b.n	8005afe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ac6:	4b65      	ldr	r3, [pc, #404]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005acc:	4a63      	ldr	r2, [pc, #396]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005ace:	f023 0301 	bic.w	r3, r3, #1
 8005ad2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad6:	f7fc f805 	bl	8001ae4 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ade:	f7fc f801 	bl	8001ae4 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e105      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005af0:	4b5a      	ldr	r3, [pc, #360]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1ef      	bne.n	8005ade <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 80f9 	beq.w	8005cfa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	f040 80cf 	bne.w	8005cb0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b12:	4b52      	ldr	r3, [pc, #328]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f003 0203 	and.w	r2, r3, #3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d12c      	bne.n	8005b80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b30:	3b01      	subs	r3, #1
 8005b32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d123      	bne.n	8005b80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d11b      	bne.n	8005b80 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d113      	bne.n	8005b80 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b62:	085b      	lsrs	r3, r3, #1
 8005b64:	3b01      	subs	r3, #1
 8005b66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d109      	bne.n	8005b80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d071      	beq.n	8005c64 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	2b0c      	cmp	r3, #12
 8005b84:	d068      	beq.n	8005c58 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b86:	4b35      	ldr	r3, [pc, #212]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d105      	bne.n	8005b9e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005b92:	4b32      	ldr	r3, [pc, #200]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e0ac      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005ba8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bae:	f7fb ff99 	bl	8001ae4 <HAL_GetTick>
 8005bb2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb6:	f7fb ff95 	bl	8001ae4 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e099      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bc8:	4b24      	ldr	r3, [pc, #144]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1f0      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bd4:	4b21      	ldr	r3, [pc, #132]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	4b21      	ldr	r3, [pc, #132]	@ (8005c60 <HAL_RCC_OscConfig+0x788>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005be4:	3a01      	subs	r2, #1
 8005be6:	0112      	lsls	r2, r2, #4
 8005be8:	4311      	orrs	r1, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005bee:	0212      	lsls	r2, r2, #8
 8005bf0:	4311      	orrs	r1, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005bf6:	0852      	lsrs	r2, r2, #1
 8005bf8:	3a01      	subs	r2, #1
 8005bfa:	0552      	lsls	r2, r2, #21
 8005bfc:	4311      	orrs	r1, r2
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c02:	0852      	lsrs	r2, r2, #1
 8005c04:	3a01      	subs	r2, #1
 8005c06:	0652      	lsls	r2, r2, #25
 8005c08:	4311      	orrs	r1, r2
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c0e:	06d2      	lsls	r2, r2, #27
 8005c10:	430a      	orrs	r2, r1
 8005c12:	4912      	ldr	r1, [pc, #72]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c18:	4b10      	ldr	r3, [pc, #64]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c24:	4b0d      	ldr	r3, [pc, #52]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	4a0c      	ldr	r2, [pc, #48]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005c2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c30:	f7fb ff58 	bl	8001ae4 <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c38:	f7fb ff54 	bl	8001ae4 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e058      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c4a:	4b04      	ldr	r3, [pc, #16]	@ (8005c5c <HAL_RCC_OscConfig+0x784>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f0      	beq.n	8005c38 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c56:	e050      	b.n	8005cfa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e04f      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c64:	4b27      	ldr	r3, [pc, #156]	@ (8005d04 <HAL_RCC_OscConfig+0x82c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d144      	bne.n	8005cfa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c70:	4b24      	ldr	r3, [pc, #144]	@ (8005d04 <HAL_RCC_OscConfig+0x82c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a23      	ldr	r2, [pc, #140]	@ (8005d04 <HAL_RCC_OscConfig+0x82c>)
 8005c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c7c:	4b21      	ldr	r3, [pc, #132]	@ (8005d04 <HAL_RCC_OscConfig+0x82c>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4a20      	ldr	r2, [pc, #128]	@ (8005d04 <HAL_RCC_OscConfig+0x82c>)
 8005c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c88:	f7fb ff2c 	bl	8001ae4 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c90:	f7fb ff28 	bl	8001ae4 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e02c      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ca2:	4b18      	ldr	r3, [pc, #96]	@ (8005d04 <HAL_RCC_OscConfig+0x82c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0f0      	beq.n	8005c90 <HAL_RCC_OscConfig+0x7b8>
 8005cae:	e024      	b.n	8005cfa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	2b0c      	cmp	r3, #12
 8005cb4:	d01f      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb6:	4b13      	ldr	r3, [pc, #76]	@ (8005d04 <HAL_RCC_OscConfig+0x82c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a12      	ldr	r2, [pc, #72]	@ (8005d04 <HAL_RCC_OscConfig+0x82c>)
 8005cbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc2:	f7fb ff0f 	bl	8001ae4 <HAL_GetTick>
 8005cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cc8:	e008      	b.n	8005cdc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cca:	f7fb ff0b 	bl	8001ae4 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e00f      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cdc:	4b09      	ldr	r3, [pc, #36]	@ (8005d04 <HAL_RCC_OscConfig+0x82c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1f0      	bne.n	8005cca <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005ce8:	4b06      	ldr	r3, [pc, #24]	@ (8005d04 <HAL_RCC_OscConfig+0x82c>)
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	4905      	ldr	r1, [pc, #20]	@ (8005d04 <HAL_RCC_OscConfig+0x82c>)
 8005cee:	4b06      	ldr	r3, [pc, #24]	@ (8005d08 <HAL_RCC_OscConfig+0x830>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	60cb      	str	r3, [r1, #12]
 8005cf4:	e001      	b.n	8005cfa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3720      	adds	r7, #32
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40021000 	.word	0x40021000
 8005d08:	feeefffc 	.word	0xfeeefffc

08005d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e11d      	b.n	8005f60 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d24:	4b90      	ldr	r3, [pc, #576]	@ (8005f68 <HAL_RCC_ClockConfig+0x25c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d910      	bls.n	8005d54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d32:	4b8d      	ldr	r3, [pc, #564]	@ (8005f68 <HAL_RCC_ClockConfig+0x25c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 020f 	bic.w	r2, r3, #15
 8005d3a:	498b      	ldr	r1, [pc, #556]	@ (8005f68 <HAL_RCC_ClockConfig+0x25c>)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d42:	4b89      	ldr	r3, [pc, #548]	@ (8005f68 <HAL_RCC_ClockConfig+0x25c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e105      	b.n	8005f60 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d010      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	4b81      	ldr	r3, [pc, #516]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d908      	bls.n	8005d82 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d70:	4b7e      	ldr	r3, [pc, #504]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	497b      	ldr	r1, [pc, #492]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d079      	beq.n	8005e82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d11e      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d96:	4b75      	ldr	r3, [pc, #468]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e0dc      	b.n	8005f60 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005da6:	f000 fa09 	bl	80061bc <RCC_GetSysClockFreqFromPLLSource>
 8005daa:	4603      	mov	r3, r0
 8005dac:	4a70      	ldr	r2, [pc, #448]	@ (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d946      	bls.n	8005e40 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005db2:	4b6e      	ldr	r3, [pc, #440]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d140      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005dbe:	4b6b      	ldr	r3, [pc, #428]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dc6:	4a69      	ldr	r2, [pc, #420]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dcc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005dce:	2380      	movs	r3, #128	@ 0x80
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	e035      	b.n	8005e40 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d107      	bne.n	8005dec <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ddc:	4b63      	ldr	r3, [pc, #396]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d115      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0b9      	b.n	8005f60 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d107      	bne.n	8005e04 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005df4:	4b5d      	ldr	r3, [pc, #372]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d109      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0ad      	b.n	8005f60 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e04:	4b59      	ldr	r3, [pc, #356]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0a5      	b.n	8005f60 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005e14:	f000 f8b4 	bl	8005f80 <HAL_RCC_GetSysClockFreq>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	4a55      	ldr	r2, [pc, #340]	@ (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d90f      	bls.n	8005e40 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005e20:	4b52      	ldr	r3, [pc, #328]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d109      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e2c:	4b4f      	ldr	r3, [pc, #316]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e34:	4a4d      	ldr	r2, [pc, #308]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e3a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e3c:	2380      	movs	r3, #128	@ 0x80
 8005e3e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e40:	4b4a      	ldr	r3, [pc, #296]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f023 0203 	bic.w	r2, r3, #3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	4947      	ldr	r1, [pc, #284]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e52:	f7fb fe47 	bl	8001ae4 <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e58:	e00a      	b.n	8005e70 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e5a:	f7fb fe43 	bl	8001ae4 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e077      	b.n	8005f60 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e70:	4b3e      	ldr	r3, [pc, #248]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 020c 	and.w	r2, r3, #12
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d1eb      	bne.n	8005e5a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b80      	cmp	r3, #128	@ 0x80
 8005e86:	d105      	bne.n	8005e94 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005e88:	4b38      	ldr	r3, [pc, #224]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	4a37      	ldr	r2, [pc, #220]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005e8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e92:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d010      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	4b31      	ldr	r3, [pc, #196]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d208      	bcs.n	8005ec2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	492b      	ldr	r1, [pc, #172]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec2:	4b29      	ldr	r3, [pc, #164]	@ (8005f68 <HAL_RCC_ClockConfig+0x25c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d210      	bcs.n	8005ef2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed0:	4b25      	ldr	r3, [pc, #148]	@ (8005f68 <HAL_RCC_ClockConfig+0x25c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f023 020f 	bic.w	r2, r3, #15
 8005ed8:	4923      	ldr	r1, [pc, #140]	@ (8005f68 <HAL_RCC_ClockConfig+0x25c>)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee0:	4b21      	ldr	r3, [pc, #132]	@ (8005f68 <HAL_RCC_ClockConfig+0x25c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 030f 	and.w	r3, r3, #15
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d001      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e036      	b.n	8005f60 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d008      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005efe:	4b1b      	ldr	r3, [pc, #108]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	4918      	ldr	r1, [pc, #96]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d009      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f1c:	4b13      	ldr	r3, [pc, #76]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	4910      	ldr	r1, [pc, #64]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f30:	f000 f826 	bl	8005f80 <HAL_RCC_GetSysClockFreq>
 8005f34:	4602      	mov	r2, r0
 8005f36:	4b0d      	ldr	r3, [pc, #52]	@ (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	091b      	lsrs	r3, r3, #4
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	490c      	ldr	r1, [pc, #48]	@ (8005f74 <HAL_RCC_ClockConfig+0x268>)
 8005f42:	5ccb      	ldrb	r3, [r1, r3]
 8005f44:	f003 031f 	and.w	r3, r3, #31
 8005f48:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8005f78 <HAL_RCC_ClockConfig+0x26c>)
 8005f4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f50:	4b0a      	ldr	r3, [pc, #40]	@ (8005f7c <HAL_RCC_ClockConfig+0x270>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fb fd75 	bl	8001a44 <HAL_InitTick>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	73fb      	strb	r3, [r7, #15]

  return status;
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40022000 	.word	0x40022000
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	04c4b400 	.word	0x04c4b400
 8005f74:	0800db50 	.word	0x0800db50
 8005f78:	20000000 	.word	0x20000000
 8005f7c:	20000004 	.word	0x20000004

08005f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b089      	sub	sp, #36	@ 0x24
 8005f84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 030c 	and.w	r3, r3, #12
 8005f96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f98:	4b3b      	ldr	r3, [pc, #236]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	2b0c      	cmp	r3, #12
 8005fac:	d121      	bne.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d11e      	bne.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005fb4:	4b34      	ldr	r3, [pc, #208]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d107      	bne.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005fc0:	4b31      	ldr	r3, [pc, #196]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fc6:	0a1b      	lsrs	r3, r3, #8
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	e005      	b.n	8005fdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	091b      	lsrs	r3, r3, #4
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800608c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10d      	bne.n	8006008 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ff0:	e00a      	b.n	8006008 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d102      	bne.n	8005ffe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ff8:	4b25      	ldr	r3, [pc, #148]	@ (8006090 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	e004      	b.n	8006008 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2b08      	cmp	r3, #8
 8006002:	d101      	bne.n	8006008 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006004:	4b23      	ldr	r3, [pc, #140]	@ (8006094 <HAL_RCC_GetSysClockFreq+0x114>)
 8006006:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	2b0c      	cmp	r3, #12
 800600c:	d134      	bne.n	8006078 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800600e:	4b1e      	ldr	r3, [pc, #120]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x108>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b02      	cmp	r3, #2
 800601c:	d003      	beq.n	8006026 <HAL_RCC_GetSysClockFreq+0xa6>
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b03      	cmp	r3, #3
 8006022:	d003      	beq.n	800602c <HAL_RCC_GetSysClockFreq+0xac>
 8006024:	e005      	b.n	8006032 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006026:	4b1a      	ldr	r3, [pc, #104]	@ (8006090 <HAL_RCC_GetSysClockFreq+0x110>)
 8006028:	617b      	str	r3, [r7, #20]
      break;
 800602a:	e005      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800602c:	4b19      	ldr	r3, [pc, #100]	@ (8006094 <HAL_RCC_GetSysClockFreq+0x114>)
 800602e:	617b      	str	r3, [r7, #20]
      break;
 8006030:	e002      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	617b      	str	r3, [r7, #20]
      break;
 8006036:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006038:	4b13      	ldr	r3, [pc, #76]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x108>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	091b      	lsrs	r3, r3, #4
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	3301      	adds	r3, #1
 8006044:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006046:	4b10      	ldr	r3, [pc, #64]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x108>)
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	0a1b      	lsrs	r3, r3, #8
 800604c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	fb03 f202 	mul.w	r2, r3, r2
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	fbb2 f3f3 	udiv	r3, r2, r3
 800605c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800605e:	4b0a      	ldr	r3, [pc, #40]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x108>)
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	0e5b      	lsrs	r3, r3, #25
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	3301      	adds	r3, #1
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	fbb2 f3f3 	udiv	r3, r2, r3
 8006076:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006078:	69bb      	ldr	r3, [r7, #24]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3724      	adds	r7, #36	@ 0x24
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40021000 	.word	0x40021000
 800608c:	0800db68 	.word	0x0800db68
 8006090:	00f42400 	.word	0x00f42400
 8006094:	007a1200 	.word	0x007a1200

08006098 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800609c:	4b03      	ldr	r3, [pc, #12]	@ (80060ac <HAL_RCC_GetHCLKFreq+0x14>)
 800609e:	681b      	ldr	r3, [r3, #0]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	20000000 	.word	0x20000000

080060b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80060b4:	f7ff fff0 	bl	8006098 <HAL_RCC_GetHCLKFreq>
 80060b8:	4602      	mov	r2, r0
 80060ba:	4b06      	ldr	r3, [pc, #24]	@ (80060d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	0a1b      	lsrs	r3, r3, #8
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	4904      	ldr	r1, [pc, #16]	@ (80060d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060c6:	5ccb      	ldrb	r3, [r1, r3]
 80060c8:	f003 031f 	and.w	r3, r3, #31
 80060cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	40021000 	.word	0x40021000
 80060d8:	0800db60 	.word	0x0800db60

080060dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80060e0:	f7ff ffda 	bl	8006098 <HAL_RCC_GetHCLKFreq>
 80060e4:	4602      	mov	r2, r0
 80060e6:	4b06      	ldr	r3, [pc, #24]	@ (8006100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	0adb      	lsrs	r3, r3, #11
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	4904      	ldr	r1, [pc, #16]	@ (8006104 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060f2:	5ccb      	ldrb	r3, [r1, r3]
 80060f4:	f003 031f 	and.w	r3, r3, #31
 80060f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40021000 	.word	0x40021000
 8006104:	0800db60 	.word	0x0800db60

08006108 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006110:	2300      	movs	r3, #0
 8006112:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006114:	4b27      	ldr	r3, [pc, #156]	@ (80061b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006120:	f7ff f8f6 	bl	8005310 <HAL_PWREx_GetVoltageRange>
 8006124:	6178      	str	r0, [r7, #20]
 8006126:	e014      	b.n	8006152 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006128:	4b22      	ldr	r3, [pc, #136]	@ (80061b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800612a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612c:	4a21      	ldr	r2, [pc, #132]	@ (80061b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800612e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006132:	6593      	str	r3, [r2, #88]	@ 0x58
 8006134:	4b1f      	ldr	r3, [pc, #124]	@ (80061b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006140:	f7ff f8e6 	bl	8005310 <HAL_PWREx_GetVoltageRange>
 8006144:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006146:	4b1b      	ldr	r3, [pc, #108]	@ (80061b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800614a:	4a1a      	ldr	r2, [pc, #104]	@ (80061b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800614c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006150:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006158:	d10b      	bne.n	8006172 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b80      	cmp	r3, #128	@ 0x80
 800615e:	d913      	bls.n	8006188 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2ba0      	cmp	r3, #160	@ 0xa0
 8006164:	d902      	bls.n	800616c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006166:	2302      	movs	r3, #2
 8006168:	613b      	str	r3, [r7, #16]
 800616a:	e00d      	b.n	8006188 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800616c:	2301      	movs	r3, #1
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	e00a      	b.n	8006188 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b7f      	cmp	r3, #127	@ 0x7f
 8006176:	d902      	bls.n	800617e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006178:	2302      	movs	r3, #2
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	e004      	b.n	8006188 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b70      	cmp	r3, #112	@ 0x70
 8006182:	d101      	bne.n	8006188 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006184:	2301      	movs	r3, #1
 8006186:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006188:	4b0b      	ldr	r3, [pc, #44]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f023 020f 	bic.w	r2, r3, #15
 8006190:	4909      	ldr	r1, [pc, #36]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006198:	4b07      	ldr	r3, [pc, #28]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d001      	beq.n	80061aa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e000      	b.n	80061ac <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	40021000 	.word	0x40021000
 80061b8:	40022000 	.word	0x40022000

080061bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061c2:	4b2d      	ldr	r3, [pc, #180]	@ (8006278 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d00b      	beq.n	80061ea <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d825      	bhi.n	8006224 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d008      	beq.n	80061f0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d11f      	bne.n	8006224 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80061e4:	4b25      	ldr	r3, [pc, #148]	@ (800627c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80061e6:	613b      	str	r3, [r7, #16]
    break;
 80061e8:	e01f      	b.n	800622a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80061ea:	4b25      	ldr	r3, [pc, #148]	@ (8006280 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80061ec:	613b      	str	r3, [r7, #16]
    break;
 80061ee:	e01c      	b.n	800622a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061f0:	4b21      	ldr	r3, [pc, #132]	@ (8006278 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d107      	bne.n	800620c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006278 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80061fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006202:	0a1b      	lsrs	r3, r3, #8
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	e005      	b.n	8006218 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800620c:	4b1a      	ldr	r3, [pc, #104]	@ (8006278 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	091b      	lsrs	r3, r3, #4
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006218:	4a1a      	ldr	r2, [pc, #104]	@ (8006284 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006220:	613b      	str	r3, [r7, #16]
    break;
 8006222:	e002      	b.n	800622a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006224:	2300      	movs	r3, #0
 8006226:	613b      	str	r3, [r7, #16]
    break;
 8006228:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800622a:	4b13      	ldr	r3, [pc, #76]	@ (8006278 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	091b      	lsrs	r3, r3, #4
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	3301      	adds	r3, #1
 8006236:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006238:	4b0f      	ldr	r3, [pc, #60]	@ (8006278 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	0a1b      	lsrs	r3, r3, #8
 800623e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	fb03 f202 	mul.w	r2, r3, r2
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	fbb2 f3f3 	udiv	r3, r2, r3
 800624e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006250:	4b09      	ldr	r3, [pc, #36]	@ (8006278 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	0e5b      	lsrs	r3, r3, #25
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	3301      	adds	r3, #1
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800626a:	683b      	ldr	r3, [r7, #0]
}
 800626c:	4618      	mov	r0, r3
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	40021000 	.word	0x40021000
 800627c:	00f42400 	.word	0x00f42400
 8006280:	007a1200 	.word	0x007a1200
 8006284:	0800db68 	.word	0x0800db68

08006288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006290:	2300      	movs	r3, #0
 8006292:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006294:	2300      	movs	r3, #0
 8006296:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d040      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062a8:	2b80      	cmp	r3, #128	@ 0x80
 80062aa:	d02a      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062ac:	2b80      	cmp	r3, #128	@ 0x80
 80062ae:	d825      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80062b0:	2b60      	cmp	r3, #96	@ 0x60
 80062b2:	d026      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062b4:	2b60      	cmp	r3, #96	@ 0x60
 80062b6:	d821      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80062b8:	2b40      	cmp	r3, #64	@ 0x40
 80062ba:	d006      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x42>
 80062bc:	2b40      	cmp	r3, #64	@ 0x40
 80062be:	d81d      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d009      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d010      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x62>
 80062c8:	e018      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062ca:	4b89      	ldr	r3, [pc, #548]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	4a88      	ldr	r2, [pc, #544]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80062d6:	e015      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3304      	adds	r3, #4
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fb02 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80062e8:	e00c      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3320      	adds	r3, #32
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fbed 	bl	8006ad0 <RCCEx_PLLSAI2_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80062fa:	e003      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	74fb      	strb	r3, [r7, #19]
      break;
 8006300:	e000      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006304:	7cfb      	ldrb	r3, [r7, #19]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10b      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800630a:	4b79      	ldr	r3, [pc, #484]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800630c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006310:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006318:	4975      	ldr	r1, [pc, #468]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006320:	e001      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006322:	7cfb      	ldrb	r3, [r7, #19]
 8006324:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d047      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800633a:	d030      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800633c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006340:	d82a      	bhi.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006342:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006346:	d02a      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006348:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800634c:	d824      	bhi.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800634e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006352:	d008      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006358:	d81e      	bhi.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800635e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006362:	d010      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006364:	e018      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006366:	4b62      	ldr	r3, [pc, #392]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	4a61      	ldr	r2, [pc, #388]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800636c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006370:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006372:	e015      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3304      	adds	r3, #4
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fab4 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006384:	e00c      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3320      	adds	r3, #32
 800638a:	2100      	movs	r1, #0
 800638c:	4618      	mov	r0, r3
 800638e:	f000 fb9f 	bl	8006ad0 <RCCEx_PLLSAI2_Config>
 8006392:	4603      	mov	r3, r0
 8006394:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006396:	e003      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	74fb      	strb	r3, [r7, #19]
      break;
 800639c:	e000      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800639e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a0:	7cfb      	ldrb	r3, [r7, #19]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10b      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80063a6:	4b52      	ldr	r3, [pc, #328]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b4:	494e      	ldr	r1, [pc, #312]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80063bc:	e001      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063be:	7cfb      	ldrb	r3, [r7, #19]
 80063c0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 809f 	beq.w	800650e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063d0:	2300      	movs	r3, #0
 80063d2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063d4:	4b46      	ldr	r3, [pc, #280]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80063e0:	2301      	movs	r3, #1
 80063e2:	e000      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80063e4:	2300      	movs	r3, #0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00d      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ea:	4b41      	ldr	r3, [pc, #260]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ee:	4a40      	ldr	r2, [pc, #256]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80063f6:	4b3e      	ldr	r3, [pc, #248]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063fe:	60bb      	str	r3, [r7, #8]
 8006400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006402:	2301      	movs	r3, #1
 8006404:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006406:	4b3b      	ldr	r3, [pc, #236]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a3a      	ldr	r2, [pc, #232]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800640c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006410:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006412:	f7fb fb67 	bl	8001ae4 <HAL_GetTick>
 8006416:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006418:	e009      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800641a:	f7fb fb63 	bl	8001ae4 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d902      	bls.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	74fb      	strb	r3, [r7, #19]
        break;
 800642c:	e005      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800642e:	4b31      	ldr	r3, [pc, #196]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0ef      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800643a:	7cfb      	ldrb	r3, [r7, #19]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d15b      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006440:	4b2b      	ldr	r3, [pc, #172]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800644a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d01f      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	429a      	cmp	r2, r3
 800645c:	d019      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800645e:	4b24      	ldr	r3, [pc, #144]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006468:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800646a:	4b21      	ldr	r3, [pc, #132]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800646c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006470:	4a1f      	ldr	r2, [pc, #124]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006476:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800647a:	4b1d      	ldr	r3, [pc, #116]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800647c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006480:	4a1b      	ldr	r2, [pc, #108]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006486:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800648a:	4a19      	ldr	r2, [pc, #100]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d016      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649c:	f7fb fb22 	bl	8001ae4 <HAL_GetTick>
 80064a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064a2:	e00b      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064a4:	f7fb fb1e 	bl	8001ae4 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d902      	bls.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	74fb      	strb	r3, [r7, #19]
            break;
 80064ba:	e006      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064bc:	4b0c      	ldr	r3, [pc, #48]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0ec      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80064ca:	7cfb      	ldrb	r3, [r7, #19]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10c      	bne.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064d0:	4b07      	ldr	r3, [pc, #28]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e0:	4903      	ldr	r1, [pc, #12]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80064e8:	e008      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064ea:	7cfb      	ldrb	r3, [r7, #19]
 80064ec:	74bb      	strb	r3, [r7, #18]
 80064ee:	e005      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80064f0:	40021000 	.word	0x40021000
 80064f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f8:	7cfb      	ldrb	r3, [r7, #19]
 80064fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064fc:	7c7b      	ldrb	r3, [r7, #17]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d105      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006502:	4ba0      	ldr	r3, [pc, #640]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006506:	4a9f      	ldr	r2, [pc, #636]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800650c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800651a:	4b9a      	ldr	r3, [pc, #616]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800651c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006520:	f023 0203 	bic.w	r2, r3, #3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006528:	4996      	ldr	r1, [pc, #600]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800653c:	4b91      	ldr	r3, [pc, #580]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800653e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006542:	f023 020c 	bic.w	r2, r3, #12
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654a:	498e      	ldr	r1, [pc, #568]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800655e:	4b89      	ldr	r3, [pc, #548]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006564:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656c:	4985      	ldr	r1, [pc, #532]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006580:	4b80      	ldr	r3, [pc, #512]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006586:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800658e:	497d      	ldr	r1, [pc, #500]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0310 	and.w	r3, r3, #16
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80065a2:	4b78      	ldr	r3, [pc, #480]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065b0:	4974      	ldr	r1, [pc, #464]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065c4:	4b6f      	ldr	r3, [pc, #444]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d2:	496c      	ldr	r1, [pc, #432]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065e6:	4b67      	ldr	r3, [pc, #412]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065f4:	4963      	ldr	r1, [pc, #396]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006608:	4b5e      	ldr	r3, [pc, #376]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006616:	495b      	ldr	r1, [pc, #364]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800662a:	4b56      	ldr	r3, [pc, #344]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800662c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006630:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006638:	4952      	ldr	r1, [pc, #328]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800663a:	4313      	orrs	r3, r2
 800663c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800664c:	4b4d      	ldr	r3, [pc, #308]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800664e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006652:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665a:	494a      	ldr	r1, [pc, #296]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800665c:	4313      	orrs	r3, r2
 800665e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800666e:	4b45      	ldr	r3, [pc, #276]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006674:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800667c:	4941      	ldr	r1, [pc, #260]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006690:	4b3c      	ldr	r3, [pc, #240]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006692:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006696:	f023 0203 	bic.w	r2, r3, #3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800669e:	4939      	ldr	r1, [pc, #228]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d028      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066b2:	4b34      	ldr	r3, [pc, #208]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066c0:	4930      	ldr	r1, [pc, #192]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066d0:	d106      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066d2:	4b2c      	ldr	r3, [pc, #176]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	4a2b      	ldr	r2, [pc, #172]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066dc:	60d3      	str	r3, [r2, #12]
 80066de:	e011      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066e8:	d10c      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3304      	adds	r3, #4
 80066ee:	2101      	movs	r1, #1
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 f8f9 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 80066f6:	4603      	mov	r3, r0
 80066f8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80066fa:	7cfb      	ldrb	r3, [r7, #19]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006700:	7cfb      	ldrb	r3, [r7, #19]
 8006702:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d04d      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006714:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006718:	d108      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800671a:	4b1a      	ldr	r3, [pc, #104]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800671c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006720:	4a18      	ldr	r2, [pc, #96]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006722:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006726:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800672a:	e012      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800672c:	4b15      	ldr	r3, [pc, #84]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800672e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006732:	4a14      	ldr	r2, [pc, #80]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006734:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006738:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800673c:	4b11      	ldr	r3, [pc, #68]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800673e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006742:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800674a:	490e      	ldr	r1, [pc, #56]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800674c:	4313      	orrs	r3, r2
 800674e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006756:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800675a:	d106      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800675c:	4b09      	ldr	r3, [pc, #36]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	4a08      	ldr	r2, [pc, #32]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006762:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006766:	60d3      	str	r3, [r2, #12]
 8006768:	e020      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800676e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006772:	d109      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006774:	4b03      	ldr	r3, [pc, #12]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	4a02      	ldr	r2, [pc, #8]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800677a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800677e:	60d3      	str	r3, [r2, #12]
 8006780:	e014      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006782:	bf00      	nop
 8006784:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800678c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006790:	d10c      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3304      	adds	r3, #4
 8006796:	2101      	movs	r1, #1
 8006798:	4618      	mov	r0, r3
 800679a:	f000 f8a5 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 800679e:	4603      	mov	r3, r0
 80067a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067a2:	7cfb      	ldrb	r3, [r7, #19]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80067a8:	7cfb      	ldrb	r3, [r7, #19]
 80067aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d028      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067b8:	4b4a      	ldr	r3, [pc, #296]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067c6:	4947      	ldr	r1, [pc, #284]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067d6:	d106      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067d8:	4b42      	ldr	r3, [pc, #264]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	4a41      	ldr	r2, [pc, #260]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067e2:	60d3      	str	r3, [r2, #12]
 80067e4:	e011      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067ee:	d10c      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3304      	adds	r3, #4
 80067f4:	2101      	movs	r1, #1
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 f876 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006800:	7cfb      	ldrb	r3, [r7, #19]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006806:	7cfb      	ldrb	r3, [r7, #19]
 8006808:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01e      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006816:	4b33      	ldr	r3, [pc, #204]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800681c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006826:	492f      	ldr	r1, [pc, #188]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006828:	4313      	orrs	r3, r2
 800682a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006838:	d10c      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3304      	adds	r3, #4
 800683e:	2102      	movs	r1, #2
 8006840:	4618      	mov	r0, r3
 8006842:	f000 f851 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 8006846:	4603      	mov	r3, r0
 8006848:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800684a:	7cfb      	ldrb	r3, [r7, #19]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006850:	7cfb      	ldrb	r3, [r7, #19]
 8006852:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00b      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006860:	4b20      	ldr	r3, [pc, #128]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006862:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006866:	f023 0204 	bic.w	r2, r3, #4
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006870:	491c      	ldr	r1, [pc, #112]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006872:	4313      	orrs	r3, r2
 8006874:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006884:	4b17      	ldr	r3, [pc, #92]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006886:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800688a:	f023 0218 	bic.w	r2, r3, #24
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006894:	4913      	ldr	r1, [pc, #76]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d017      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80068a8:	4b0e      	ldr	r3, [pc, #56]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068b8:	490a      	ldr	r1, [pc, #40]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068ca:	d105      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068cc:	4b05      	ldr	r3, [pc, #20]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	4a04      	ldr	r2, [pc, #16]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80068d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	40021000 	.word	0x40021000

080068e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068f6:	4b72      	ldr	r3, [pc, #456]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00e      	beq.n	8006920 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006902:	4b6f      	ldr	r3, [pc, #444]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f003 0203 	and.w	r2, r3, #3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d103      	bne.n	800691a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
       ||
 8006916:	2b00      	cmp	r3, #0
 8006918:	d142      	bne.n	80069a0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	73fb      	strb	r3, [r7, #15]
 800691e:	e03f      	b.n	80069a0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b03      	cmp	r3, #3
 8006926:	d018      	beq.n	800695a <RCCEx_PLLSAI1_Config+0x72>
 8006928:	2b03      	cmp	r3, #3
 800692a:	d825      	bhi.n	8006978 <RCCEx_PLLSAI1_Config+0x90>
 800692c:	2b01      	cmp	r3, #1
 800692e:	d002      	beq.n	8006936 <RCCEx_PLLSAI1_Config+0x4e>
 8006930:	2b02      	cmp	r3, #2
 8006932:	d009      	beq.n	8006948 <RCCEx_PLLSAI1_Config+0x60>
 8006934:	e020      	b.n	8006978 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006936:	4b62      	ldr	r3, [pc, #392]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d11d      	bne.n	800697e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006946:	e01a      	b.n	800697e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006948:	4b5d      	ldr	r3, [pc, #372]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006950:	2b00      	cmp	r3, #0
 8006952:	d116      	bne.n	8006982 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006958:	e013      	b.n	8006982 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800695a:	4b59      	ldr	r3, [pc, #356]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10f      	bne.n	8006986 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006966:	4b56      	ldr	r3, [pc, #344]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006976:	e006      	b.n	8006986 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	73fb      	strb	r3, [r7, #15]
      break;
 800697c:	e004      	b.n	8006988 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800697e:	bf00      	nop
 8006980:	e002      	b.n	8006988 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006982:	bf00      	nop
 8006984:	e000      	b.n	8006988 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006986:	bf00      	nop
    }

    if(status == HAL_OK)
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d108      	bne.n	80069a0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800698e:	4b4c      	ldr	r3, [pc, #304]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f023 0203 	bic.w	r2, r3, #3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4949      	ldr	r1, [pc, #292]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800699c:	4313      	orrs	r3, r2
 800699e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f040 8086 	bne.w	8006ab4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80069a8:	4b45      	ldr	r3, [pc, #276]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a44      	ldr	r2, [pc, #272]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069b4:	f7fb f896 	bl	8001ae4 <HAL_GetTick>
 80069b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069ba:	e009      	b.n	80069d0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069bc:	f7fb f892 	bl	8001ae4 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d902      	bls.n	80069d0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	73fb      	strb	r3, [r7, #15]
        break;
 80069ce:	e005      	b.n	80069dc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069d0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1ef      	bne.n	80069bc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d168      	bne.n	8006ab4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d113      	bne.n	8006a10 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069e8:	4b35      	ldr	r3, [pc, #212]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	4b35      	ldr	r3, [pc, #212]	@ (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80069ee:	4013      	ands	r3, r2
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	6892      	ldr	r2, [r2, #8]
 80069f4:	0211      	lsls	r1, r2, #8
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	68d2      	ldr	r2, [r2, #12]
 80069fa:	06d2      	lsls	r2, r2, #27
 80069fc:	4311      	orrs	r1, r2
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6852      	ldr	r2, [r2, #4]
 8006a02:	3a01      	subs	r2, #1
 8006a04:	0112      	lsls	r2, r2, #4
 8006a06:	430a      	orrs	r2, r1
 8006a08:	492d      	ldr	r1, [pc, #180]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	610b      	str	r3, [r1, #16]
 8006a0e:	e02d      	b.n	8006a6c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d115      	bne.n	8006a42 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a16:	4b2a      	ldr	r3, [pc, #168]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8006ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6892      	ldr	r2, [r2, #8]
 8006a22:	0211      	lsls	r1, r2, #8
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6912      	ldr	r2, [r2, #16]
 8006a28:	0852      	lsrs	r2, r2, #1
 8006a2a:	3a01      	subs	r2, #1
 8006a2c:	0552      	lsls	r2, r2, #21
 8006a2e:	4311      	orrs	r1, r2
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6852      	ldr	r2, [r2, #4]
 8006a34:	3a01      	subs	r2, #1
 8006a36:	0112      	lsls	r2, r2, #4
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	4921      	ldr	r1, [pc, #132]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	610b      	str	r3, [r1, #16]
 8006a40:	e014      	b.n	8006a6c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a42:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a44:	691a      	ldr	r2, [r3, #16]
 8006a46:	4b21      	ldr	r3, [pc, #132]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6892      	ldr	r2, [r2, #8]
 8006a4e:	0211      	lsls	r1, r2, #8
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6952      	ldr	r2, [r2, #20]
 8006a54:	0852      	lsrs	r2, r2, #1
 8006a56:	3a01      	subs	r2, #1
 8006a58:	0652      	lsls	r2, r2, #25
 8006a5a:	4311      	orrs	r1, r2
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6852      	ldr	r2, [r2, #4]
 8006a60:	3a01      	subs	r2, #1
 8006a62:	0112      	lsls	r2, r2, #4
 8006a64:	430a      	orrs	r2, r1
 8006a66:	4916      	ldr	r1, [pc, #88]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a6c:	4b14      	ldr	r3, [pc, #80]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a13      	ldr	r2, [pc, #76]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a78:	f7fb f834 	bl	8001ae4 <HAL_GetTick>
 8006a7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a7e:	e009      	b.n	8006a94 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a80:	f7fb f830 	bl	8001ae4 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d902      	bls.n	8006a94 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	73fb      	strb	r3, [r7, #15]
          break;
 8006a92:	e005      	b.n	8006aa0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a94:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0ef      	beq.n	8006a80 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d106      	bne.n	8006ab4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006aa6:	4b06      	ldr	r3, [pc, #24]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	4904      	ldr	r1, [pc, #16]	@ (8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40021000 	.word	0x40021000
 8006ac4:	07ff800f 	.word	0x07ff800f
 8006ac8:	ff9f800f 	.word	0xff9f800f
 8006acc:	f9ff800f 	.word	0xf9ff800f

08006ad0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ade:	4b72      	ldr	r3, [pc, #456]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00e      	beq.n	8006b08 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006aea:	4b6f      	ldr	r3, [pc, #444]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f003 0203 	and.w	r2, r3, #3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d103      	bne.n	8006b02 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
       ||
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d142      	bne.n	8006b88 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	73fb      	strb	r3, [r7, #15]
 8006b06:	e03f      	b.n	8006b88 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	d018      	beq.n	8006b42 <RCCEx_PLLSAI2_Config+0x72>
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d825      	bhi.n	8006b60 <RCCEx_PLLSAI2_Config+0x90>
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d002      	beq.n	8006b1e <RCCEx_PLLSAI2_Config+0x4e>
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d009      	beq.n	8006b30 <RCCEx_PLLSAI2_Config+0x60>
 8006b1c:	e020      	b.n	8006b60 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b1e:	4b62      	ldr	r3, [pc, #392]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d11d      	bne.n	8006b66 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b2e:	e01a      	b.n	8006b66 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b30:	4b5d      	ldr	r3, [pc, #372]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d116      	bne.n	8006b6a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b40:	e013      	b.n	8006b6a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b42:	4b59      	ldr	r3, [pc, #356]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10f      	bne.n	8006b6e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b4e:	4b56      	ldr	r3, [pc, #344]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d109      	bne.n	8006b6e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b5e:	e006      	b.n	8006b6e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	73fb      	strb	r3, [r7, #15]
      break;
 8006b64:	e004      	b.n	8006b70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b66:	bf00      	nop
 8006b68:	e002      	b.n	8006b70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b6a:	bf00      	nop
 8006b6c:	e000      	b.n	8006b70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d108      	bne.n	8006b88 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006b76:	4b4c      	ldr	r3, [pc, #304]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f023 0203 	bic.w	r2, r3, #3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4949      	ldr	r1, [pc, #292]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f040 8086 	bne.w	8006c9c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006b90:	4b45      	ldr	r3, [pc, #276]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a44      	ldr	r2, [pc, #272]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b9c:	f7fa ffa2 	bl	8001ae4 <HAL_GetTick>
 8006ba0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ba2:	e009      	b.n	8006bb8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ba4:	f7fa ff9e 	bl	8001ae4 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d902      	bls.n	8006bb8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	73fb      	strb	r3, [r7, #15]
        break;
 8006bb6:	e005      	b.n	8006bc4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1ef      	bne.n	8006ba4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d168      	bne.n	8006c9c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d113      	bne.n	8006bf8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bd0:	4b35      	ldr	r3, [pc, #212]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bd2:	695a      	ldr	r2, [r3, #20]
 8006bd4:	4b35      	ldr	r3, [pc, #212]	@ (8006cac <RCCEx_PLLSAI2_Config+0x1dc>)
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6892      	ldr	r2, [r2, #8]
 8006bdc:	0211      	lsls	r1, r2, #8
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	68d2      	ldr	r2, [r2, #12]
 8006be2:	06d2      	lsls	r2, r2, #27
 8006be4:	4311      	orrs	r1, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6852      	ldr	r2, [r2, #4]
 8006bea:	3a01      	subs	r2, #1
 8006bec:	0112      	lsls	r2, r2, #4
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	492d      	ldr	r1, [pc, #180]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	614b      	str	r3, [r1, #20]
 8006bf6:	e02d      	b.n	8006c54 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d115      	bne.n	8006c2a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c00:	695a      	ldr	r2, [r3, #20]
 8006c02:	4b2b      	ldr	r3, [pc, #172]	@ (8006cb0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006c04:	4013      	ands	r3, r2
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	6892      	ldr	r2, [r2, #8]
 8006c0a:	0211      	lsls	r1, r2, #8
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6912      	ldr	r2, [r2, #16]
 8006c10:	0852      	lsrs	r2, r2, #1
 8006c12:	3a01      	subs	r2, #1
 8006c14:	0552      	lsls	r2, r2, #21
 8006c16:	4311      	orrs	r1, r2
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	6852      	ldr	r2, [r2, #4]
 8006c1c:	3a01      	subs	r2, #1
 8006c1e:	0112      	lsls	r2, r2, #4
 8006c20:	430a      	orrs	r2, r1
 8006c22:	4921      	ldr	r1, [pc, #132]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	614b      	str	r3, [r1, #20]
 8006c28:	e014      	b.n	8006c54 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c2c:	695a      	ldr	r2, [r3, #20]
 8006c2e:	4b21      	ldr	r3, [pc, #132]	@ (8006cb4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6892      	ldr	r2, [r2, #8]
 8006c36:	0211      	lsls	r1, r2, #8
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6952      	ldr	r2, [r2, #20]
 8006c3c:	0852      	lsrs	r2, r2, #1
 8006c3e:	3a01      	subs	r2, #1
 8006c40:	0652      	lsls	r2, r2, #25
 8006c42:	4311      	orrs	r1, r2
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6852      	ldr	r2, [r2, #4]
 8006c48:	3a01      	subs	r2, #1
 8006c4a:	0112      	lsls	r2, r2, #4
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	4916      	ldr	r1, [pc, #88]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c54:	4b14      	ldr	r3, [pc, #80]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a13      	ldr	r2, [pc, #76]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c60:	f7fa ff40 	bl	8001ae4 <HAL_GetTick>
 8006c64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c66:	e009      	b.n	8006c7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c68:	f7fa ff3c 	bl	8001ae4 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d902      	bls.n	8006c7c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	73fb      	strb	r3, [r7, #15]
          break;
 8006c7a:	e005      	b.n	8006c88 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0ef      	beq.n	8006c68 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d106      	bne.n	8006c9c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006c8e:	4b06      	ldr	r3, [pc, #24]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c90:	695a      	ldr	r2, [r3, #20]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	4904      	ldr	r1, [pc, #16]	@ (8006ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	40021000 	.word	0x40021000
 8006cac:	07ff800f 	.word	0x07ff800f
 8006cb0:	ff9f800f 	.word	0xff9f800f
 8006cb4:	f9ff800f 	.word	0xf9ff800f

08006cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e049      	b.n	8006d5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fa fcd2 	bl	8001688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	f000 fb02 	bl	8007300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d001      	beq.n	8006d80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e047      	b.n	8006e10 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a23      	ldr	r2, [pc, #140]	@ (8006e1c <HAL_TIM_Base_Start+0xb4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d01d      	beq.n	8006dce <HAL_TIM_Base_Start+0x66>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d9a:	d018      	beq.n	8006dce <HAL_TIM_Base_Start+0x66>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1f      	ldr	r2, [pc, #124]	@ (8006e20 <HAL_TIM_Base_Start+0xb8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d013      	beq.n	8006dce <HAL_TIM_Base_Start+0x66>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1e      	ldr	r2, [pc, #120]	@ (8006e24 <HAL_TIM_Base_Start+0xbc>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d00e      	beq.n	8006dce <HAL_TIM_Base_Start+0x66>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e28 <HAL_TIM_Base_Start+0xc0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d009      	beq.n	8006dce <HAL_TIM_Base_Start+0x66>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8006e2c <HAL_TIM_Base_Start+0xc4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d004      	beq.n	8006dce <HAL_TIM_Base_Start+0x66>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a19      	ldr	r2, [pc, #100]	@ (8006e30 <HAL_TIM_Base_Start+0xc8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d115      	bne.n	8006dfa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	4b17      	ldr	r3, [pc, #92]	@ (8006e34 <HAL_TIM_Base_Start+0xcc>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b06      	cmp	r3, #6
 8006dde:	d015      	beq.n	8006e0c <HAL_TIM_Base_Start+0xa4>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006de6:	d011      	beq.n	8006e0c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0201 	orr.w	r2, r2, #1
 8006df6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df8:	e008      	b.n	8006e0c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f042 0201 	orr.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	e000      	b.n	8006e0e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40012c00 	.word	0x40012c00
 8006e20:	40000400 	.word	0x40000400
 8006e24:	40000800 	.word	0x40000800
 8006e28:	40000c00 	.word	0x40000c00
 8006e2c:	40013400 	.word	0x40013400
 8006e30:	40014000 	.word	0x40014000
 8006e34:	00010007 	.word	0x00010007

08006e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d001      	beq.n	8006e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e04f      	b.n	8006ef0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0201 	orr.w	r2, r2, #1
 8006e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a23      	ldr	r2, [pc, #140]	@ (8006efc <HAL_TIM_Base_Start_IT+0xc4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d01d      	beq.n	8006eae <HAL_TIM_Base_Start_IT+0x76>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e7a:	d018      	beq.n	8006eae <HAL_TIM_Base_Start_IT+0x76>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a1f      	ldr	r2, [pc, #124]	@ (8006f00 <HAL_TIM_Base_Start_IT+0xc8>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d013      	beq.n	8006eae <HAL_TIM_Base_Start_IT+0x76>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8006f04 <HAL_TIM_Base_Start_IT+0xcc>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00e      	beq.n	8006eae <HAL_TIM_Base_Start_IT+0x76>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a1c      	ldr	r2, [pc, #112]	@ (8006f08 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d009      	beq.n	8006eae <HAL_TIM_Base_Start_IT+0x76>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8006f0c <HAL_TIM_Base_Start_IT+0xd4>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d004      	beq.n	8006eae <HAL_TIM_Base_Start_IT+0x76>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a19      	ldr	r2, [pc, #100]	@ (8006f10 <HAL_TIM_Base_Start_IT+0xd8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d115      	bne.n	8006eda <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	4b17      	ldr	r3, [pc, #92]	@ (8006f14 <HAL_TIM_Base_Start_IT+0xdc>)
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b06      	cmp	r3, #6
 8006ebe:	d015      	beq.n	8006eec <HAL_TIM_Base_Start_IT+0xb4>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec6:	d011      	beq.n	8006eec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0201 	orr.w	r2, r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed8:	e008      	b.n	8006eec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0201 	orr.w	r2, r2, #1
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	e000      	b.n	8006eee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	40012c00 	.word	0x40012c00
 8006f00:	40000400 	.word	0x40000400
 8006f04:	40000800 	.word	0x40000800
 8006f08:	40000c00 	.word	0x40000c00
 8006f0c:	40013400 	.word	0x40013400
 8006f10:	40014000 	.word	0x40014000
 8006f14:	00010007 	.word	0x00010007

08006f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d020      	beq.n	8006f7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01b      	beq.n	8006f7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f06f 0202 	mvn.w	r2, #2
 8006f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f9ad 	bl	80072c2 <HAL_TIM_IC_CaptureCallback>
 8006f68:	e005      	b.n	8006f76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f99f 	bl	80072ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f9b0 	bl	80072d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f003 0304 	and.w	r3, r3, #4
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d020      	beq.n	8006fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01b      	beq.n	8006fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0204 	mvn.w	r2, #4
 8006f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f987 	bl	80072c2 <HAL_TIM_IC_CaptureCallback>
 8006fb4:	e005      	b.n	8006fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f979 	bl	80072ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f98a 	bl	80072d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f003 0308 	and.w	r3, r3, #8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d020      	beq.n	8007014 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f003 0308 	and.w	r3, r3, #8
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01b      	beq.n	8007014 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0208 	mvn.w	r2, #8
 8006fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2204      	movs	r2, #4
 8006fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f961 	bl	80072c2 <HAL_TIM_IC_CaptureCallback>
 8007000:	e005      	b.n	800700e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f953 	bl	80072ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f964 	bl	80072d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f003 0310 	and.w	r3, r3, #16
 800701a:	2b00      	cmp	r3, #0
 800701c:	d020      	beq.n	8007060 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f003 0310 	and.w	r3, r3, #16
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01b      	beq.n	8007060 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f06f 0210 	mvn.w	r2, #16
 8007030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2208      	movs	r2, #8
 8007036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f93b 	bl	80072c2 <HAL_TIM_IC_CaptureCallback>
 800704c:	e005      	b.n	800705a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f92d 	bl	80072ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f93e 	bl	80072d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00c      	beq.n	8007084 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	2b00      	cmp	r3, #0
 8007072:	d007      	beq.n	8007084 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0201 	mvn.w	r2, #1
 800707c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7f9 ff68 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00c      	beq.n	80070a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007094:	2b00      	cmp	r3, #0
 8007096:	d007      	beq.n	80070a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80070a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 faf2 	bl	800768c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00c      	beq.n	80070cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d007      	beq.n	80070cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80070c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 faea 	bl	80076a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00c      	beq.n	80070f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d007      	beq.n	80070f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80070e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f8fd 	bl	80072ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00c      	beq.n	8007114 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b00      	cmp	r3, #0
 8007102:	d007      	beq.n	8007114 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f06f 0220 	mvn.w	r2, #32
 800710c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fab2 	bl	8007678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007114:	bf00      	nop
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007130:	2b01      	cmp	r3, #1
 8007132:	d101      	bne.n	8007138 <HAL_TIM_ConfigClockSource+0x1c>
 8007134:	2302      	movs	r3, #2
 8007136:	e0b6      	b.n	80072a6 <HAL_TIM_ConfigClockSource+0x18a>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007156:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800715a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007174:	d03e      	beq.n	80071f4 <HAL_TIM_ConfigClockSource+0xd8>
 8007176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800717a:	f200 8087 	bhi.w	800728c <HAL_TIM_ConfigClockSource+0x170>
 800717e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007182:	f000 8086 	beq.w	8007292 <HAL_TIM_ConfigClockSource+0x176>
 8007186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800718a:	d87f      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x170>
 800718c:	2b70      	cmp	r3, #112	@ 0x70
 800718e:	d01a      	beq.n	80071c6 <HAL_TIM_ConfigClockSource+0xaa>
 8007190:	2b70      	cmp	r3, #112	@ 0x70
 8007192:	d87b      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x170>
 8007194:	2b60      	cmp	r3, #96	@ 0x60
 8007196:	d050      	beq.n	800723a <HAL_TIM_ConfigClockSource+0x11e>
 8007198:	2b60      	cmp	r3, #96	@ 0x60
 800719a:	d877      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x170>
 800719c:	2b50      	cmp	r3, #80	@ 0x50
 800719e:	d03c      	beq.n	800721a <HAL_TIM_ConfigClockSource+0xfe>
 80071a0:	2b50      	cmp	r3, #80	@ 0x50
 80071a2:	d873      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x170>
 80071a4:	2b40      	cmp	r3, #64	@ 0x40
 80071a6:	d058      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x13e>
 80071a8:	2b40      	cmp	r3, #64	@ 0x40
 80071aa:	d86f      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x170>
 80071ac:	2b30      	cmp	r3, #48	@ 0x30
 80071ae:	d064      	beq.n	800727a <HAL_TIM_ConfigClockSource+0x15e>
 80071b0:	2b30      	cmp	r3, #48	@ 0x30
 80071b2:	d86b      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x170>
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d060      	beq.n	800727a <HAL_TIM_ConfigClockSource+0x15e>
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	d867      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x170>
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d05c      	beq.n	800727a <HAL_TIM_ConfigClockSource+0x15e>
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d05a      	beq.n	800727a <HAL_TIM_ConfigClockSource+0x15e>
 80071c4:	e062      	b.n	800728c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071d6:	f000 f9a7 	bl	8007528 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80071e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	609a      	str	r2, [r3, #8]
      break;
 80071f2:	e04f      	b.n	8007294 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007204:	f000 f990 	bl	8007528 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689a      	ldr	r2, [r3, #8]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007216:	609a      	str	r2, [r3, #8]
      break;
 8007218:	e03c      	b.n	8007294 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007226:	461a      	mov	r2, r3
 8007228:	f000 f904 	bl	8007434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2150      	movs	r1, #80	@ 0x50
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f95d 	bl	80074f2 <TIM_ITRx_SetConfig>
      break;
 8007238:	e02c      	b.n	8007294 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007246:	461a      	mov	r2, r3
 8007248:	f000 f923 	bl	8007492 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2160      	movs	r1, #96	@ 0x60
 8007252:	4618      	mov	r0, r3
 8007254:	f000 f94d 	bl	80074f2 <TIM_ITRx_SetConfig>
      break;
 8007258:	e01c      	b.n	8007294 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007266:	461a      	mov	r2, r3
 8007268:	f000 f8e4 	bl	8007434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2140      	movs	r1, #64	@ 0x40
 8007272:	4618      	mov	r0, r3
 8007274:	f000 f93d 	bl	80074f2 <TIM_ITRx_SetConfig>
      break;
 8007278:	e00c      	b.n	8007294 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4619      	mov	r1, r3
 8007284:	4610      	mov	r0, r2
 8007286:	f000 f934 	bl	80074f2 <TIM_ITRx_SetConfig>
      break;
 800728a:	e003      	b.n	8007294 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	73fb      	strb	r3, [r7, #15]
      break;
 8007290:	e000      	b.n	8007294 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b083      	sub	sp, #12
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072b6:	bf00      	nop
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072de:	bf00      	nop
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b083      	sub	sp, #12
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072f2:	bf00      	nop
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
	...

08007300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a40      	ldr	r2, [pc, #256]	@ (8007414 <TIM_Base_SetConfig+0x114>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d013      	beq.n	8007340 <TIM_Base_SetConfig+0x40>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800731e:	d00f      	beq.n	8007340 <TIM_Base_SetConfig+0x40>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a3d      	ldr	r2, [pc, #244]	@ (8007418 <TIM_Base_SetConfig+0x118>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00b      	beq.n	8007340 <TIM_Base_SetConfig+0x40>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a3c      	ldr	r2, [pc, #240]	@ (800741c <TIM_Base_SetConfig+0x11c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d007      	beq.n	8007340 <TIM_Base_SetConfig+0x40>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a3b      	ldr	r2, [pc, #236]	@ (8007420 <TIM_Base_SetConfig+0x120>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d003      	beq.n	8007340 <TIM_Base_SetConfig+0x40>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a3a      	ldr	r2, [pc, #232]	@ (8007424 <TIM_Base_SetConfig+0x124>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d108      	bne.n	8007352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a2f      	ldr	r2, [pc, #188]	@ (8007414 <TIM_Base_SetConfig+0x114>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d01f      	beq.n	800739a <TIM_Base_SetConfig+0x9a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007360:	d01b      	beq.n	800739a <TIM_Base_SetConfig+0x9a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a2c      	ldr	r2, [pc, #176]	@ (8007418 <TIM_Base_SetConfig+0x118>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d017      	beq.n	800739a <TIM_Base_SetConfig+0x9a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a2b      	ldr	r2, [pc, #172]	@ (800741c <TIM_Base_SetConfig+0x11c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <TIM_Base_SetConfig+0x9a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a2a      	ldr	r2, [pc, #168]	@ (8007420 <TIM_Base_SetConfig+0x120>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00f      	beq.n	800739a <TIM_Base_SetConfig+0x9a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a29      	ldr	r2, [pc, #164]	@ (8007424 <TIM_Base_SetConfig+0x124>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00b      	beq.n	800739a <TIM_Base_SetConfig+0x9a>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a28      	ldr	r2, [pc, #160]	@ (8007428 <TIM_Base_SetConfig+0x128>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d007      	beq.n	800739a <TIM_Base_SetConfig+0x9a>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a27      	ldr	r2, [pc, #156]	@ (800742c <TIM_Base_SetConfig+0x12c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d003      	beq.n	800739a <TIM_Base_SetConfig+0x9a>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a26      	ldr	r2, [pc, #152]	@ (8007430 <TIM_Base_SetConfig+0x130>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d108      	bne.n	80073ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	689a      	ldr	r2, [r3, #8]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a10      	ldr	r2, [pc, #64]	@ (8007414 <TIM_Base_SetConfig+0x114>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00f      	beq.n	80073f8 <TIM_Base_SetConfig+0xf8>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a12      	ldr	r2, [pc, #72]	@ (8007424 <TIM_Base_SetConfig+0x124>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00b      	beq.n	80073f8 <TIM_Base_SetConfig+0xf8>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a11      	ldr	r2, [pc, #68]	@ (8007428 <TIM_Base_SetConfig+0x128>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d007      	beq.n	80073f8 <TIM_Base_SetConfig+0xf8>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a10      	ldr	r2, [pc, #64]	@ (800742c <TIM_Base_SetConfig+0x12c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_Base_SetConfig+0xf8>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a0f      	ldr	r2, [pc, #60]	@ (8007430 <TIM_Base_SetConfig+0x130>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d103      	bne.n	8007400 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	691a      	ldr	r2, [r3, #16]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	615a      	str	r2, [r3, #20]
}
 8007406:	bf00      	nop
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	40012c00 	.word	0x40012c00
 8007418:	40000400 	.word	0x40000400
 800741c:	40000800 	.word	0x40000800
 8007420:	40000c00 	.word	0x40000c00
 8007424:	40013400 	.word	0x40013400
 8007428:	40014000 	.word	0x40014000
 800742c:	40014400 	.word	0x40014400
 8007430:	40014800 	.word	0x40014800

08007434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	f023 0201 	bic.w	r2, r3, #1
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800745e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f023 030a 	bic.w	r3, r3, #10
 8007470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	621a      	str	r2, [r3, #32]
}
 8007486:	bf00      	nop
 8007488:	371c      	adds	r7, #28
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007492:	b480      	push	{r7}
 8007494:	b087      	sub	sp, #28
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	f023 0210 	bic.w	r2, r3, #16
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	031b      	lsls	r3, r3, #12
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80074ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	621a      	str	r2, [r3, #32]
}
 80074e6:	bf00      	nop
 80074e8:	371c      	adds	r7, #28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007508:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4313      	orrs	r3, r2
 8007510:	f043 0307 	orr.w	r3, r3, #7
 8007514:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	609a      	str	r2, [r3, #8]
}
 800751c:	bf00      	nop
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
 8007534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	021a      	lsls	r2, r3, #8
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	431a      	orrs	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	4313      	orrs	r3, r2
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	4313      	orrs	r3, r2
 8007554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	609a      	str	r2, [r3, #8]
}
 800755c:	bf00      	nop
 800755e:	371c      	adds	r7, #28
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800757c:	2302      	movs	r3, #2
 800757e:	e068      	b.n	8007652 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a2e      	ldr	r2, [pc, #184]	@ (8007660 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d004      	beq.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a2d      	ldr	r2, [pc, #180]	@ (8007664 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d108      	bne.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80075ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007660 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d01d      	beq.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075f2:	d018      	beq.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d013      	beq.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a1a      	ldr	r2, [pc, #104]	@ (800766c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d00e      	beq.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a18      	ldr	r2, [pc, #96]	@ (8007670 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d009      	beq.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a13      	ldr	r2, [pc, #76]	@ (8007664 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d004      	beq.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a14      	ldr	r2, [pc, #80]	@ (8007674 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d10c      	bne.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800762c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	4313      	orrs	r3, r2
 8007636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	40012c00 	.word	0x40012c00
 8007664:	40013400 	.word	0x40013400
 8007668:	40000400 	.word	0x40000400
 800766c:	40000800 	.word	0x40000800
 8007670:	40000c00 	.word	0x40000c00
 8007674:	40014000 	.word	0x40014000

08007678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e042      	b.n	800774c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7fa f8c3 	bl	8001864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2224      	movs	r2, #36	@ 0x24
 80076e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0201 	bic.w	r2, r2, #1
 80076f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 ff42 	bl	8008588 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fc43 	bl	8007f90 <UART_SetConfig>
 800770a:	4603      	mov	r3, r0
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e01b      	b.n	800774c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007722:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007732:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0201 	orr.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 ffc1 	bl	80086cc <UART_CheckIdleState>
 800774a:	4603      	mov	r3, r0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08a      	sub	sp, #40	@ 0x28
 8007758:	af02      	add	r7, sp, #8
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	603b      	str	r3, [r7, #0]
 8007760:	4613      	mov	r3, r2
 8007762:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800776a:	2b20      	cmp	r3, #32
 800776c:	d17b      	bne.n	8007866 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <HAL_UART_Transmit+0x26>
 8007774:	88fb      	ldrh	r3, [r7, #6]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e074      	b.n	8007868 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2221      	movs	r2, #33	@ 0x21
 800778a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800778e:	f7fa f9a9 	bl	8001ae4 <HAL_GetTick>
 8007792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	88fa      	ldrh	r2, [r7, #6]
 8007798:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	88fa      	ldrh	r2, [r7, #6]
 80077a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ac:	d108      	bne.n	80077c0 <HAL_UART_Transmit+0x6c>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d104      	bne.n	80077c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	e003      	b.n	80077c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077c4:	2300      	movs	r3, #0
 80077c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077c8:	e030      	b.n	800782c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2200      	movs	r2, #0
 80077d2:	2180      	movs	r1, #128	@ 0x80
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f001 f823 	bl	8008820 <UART_WaitOnFlagUntilTimeout>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e03d      	b.n	8007868 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10b      	bne.n	800780a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	881a      	ldrh	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077fe:	b292      	uxth	r2, r2
 8007800:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	3302      	adds	r3, #2
 8007806:	61bb      	str	r3, [r7, #24]
 8007808:	e007      	b.n	800781a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	781a      	ldrb	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	3301      	adds	r3, #1
 8007818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007820:	b29b      	uxth	r3, r3
 8007822:	3b01      	subs	r3, #1
 8007824:	b29a      	uxth	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007832:	b29b      	uxth	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1c8      	bne.n	80077ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2200      	movs	r2, #0
 8007840:	2140      	movs	r1, #64	@ 0x40
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 ffec 	bl	8008820 <UART_WaitOnFlagUntilTimeout>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2220      	movs	r2, #32
 8007852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e006      	b.n	8007868 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2220      	movs	r2, #32
 800785e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	e000      	b.n	8007868 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007866:	2302      	movs	r3, #2
  }
}
 8007868:	4618      	mov	r0, r3
 800786a:	3720      	adds	r7, #32
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08a      	sub	sp, #40	@ 0x28
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007884:	2b20      	cmp	r3, #32
 8007886:	d137      	bne.n	80078f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <HAL_UART_Receive_IT+0x24>
 800788e:	88fb      	ldrh	r3, [r7, #6]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e030      	b.n	80078fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a18      	ldr	r2, [pc, #96]	@ (8007904 <HAL_UART_Receive_IT+0x94>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d01f      	beq.n	80078e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d018      	beq.n	80078e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	613b      	str	r3, [r7, #16]
   return(result);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d4:	623b      	str	r3, [r7, #32]
 80078d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	69f9      	ldr	r1, [r7, #28]
 80078da:	6a3a      	ldr	r2, [r7, #32]
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e6      	bne.n	80078b6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80078e8:	88fb      	ldrh	r3, [r7, #6]
 80078ea:	461a      	mov	r2, r3
 80078ec:	68b9      	ldr	r1, [r7, #8]
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 fffe 	bl	80088f0 <UART_Start_Receive_IT>
 80078f4:	4603      	mov	r3, r0
 80078f6:	e000      	b.n	80078fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
  }
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3728      	adds	r7, #40	@ 0x28
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	40008000 	.word	0x40008000

08007908 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b0ba      	sub	sp, #232	@ 0xe8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800792e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007932:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007936:	4013      	ands	r3, r2
 8007938:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800793c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d11b      	bne.n	800797c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b00      	cmp	r3, #0
 800794e:	d015      	beq.n	800797c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007954:	f003 0320 	and.w	r3, r3, #32
 8007958:	2b00      	cmp	r3, #0
 800795a:	d105      	bne.n	8007968 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800795c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d009      	beq.n	800797c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 82e3 	beq.w	8007f38 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
      }
      return;
 800797a:	e2dd      	b.n	8007f38 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800797c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 8123 	beq.w	8007bcc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007986:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800798a:	4b8d      	ldr	r3, [pc, #564]	@ (8007bc0 <HAL_UART_IRQHandler+0x2b8>)
 800798c:	4013      	ands	r3, r2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007996:	4b8b      	ldr	r3, [pc, #556]	@ (8007bc4 <HAL_UART_IRQHandler+0x2bc>)
 8007998:	4013      	ands	r3, r2
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 8116 	beq.w	8007bcc <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d011      	beq.n	80079d0 <HAL_UART_IRQHandler+0xc8>
 80079ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2201      	movs	r2, #1
 80079be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079c6:	f043 0201 	orr.w	r2, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d011      	beq.n	8007a00 <HAL_UART_IRQHandler+0xf8>
 80079dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00b      	beq.n	8007a00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2202      	movs	r2, #2
 80079ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f6:	f043 0204 	orr.w	r2, r3, #4
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a04:	f003 0304 	and.w	r3, r3, #4
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d011      	beq.n	8007a30 <HAL_UART_IRQHandler+0x128>
 8007a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2204      	movs	r2, #4
 8007a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a26:	f043 0202 	orr.w	r2, r3, #2
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a34:	f003 0308 	and.w	r3, r3, #8
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d017      	beq.n	8007a6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a40:	f003 0320 	and.w	r3, r3, #32
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d105      	bne.n	8007a54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8007bc0 <HAL_UART_IRQHandler+0x2b8>)
 8007a4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00b      	beq.n	8007a6c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2208      	movs	r2, #8
 8007a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a62:	f043 0208 	orr.w	r2, r3, #8
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d012      	beq.n	8007a9e <HAL_UART_IRQHandler+0x196>
 8007a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00c      	beq.n	8007a9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a94:	f043 0220 	orr.w	r2, r3, #32
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 8249 	beq.w	8007f3c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d013      	beq.n	8007ade <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d105      	bne.n	8007ace <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d007      	beq.n	8007ade <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af2:	2b40      	cmp	r3, #64	@ 0x40
 8007af4:	d005      	beq.n	8007b02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007afa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d054      	beq.n	8007bac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 f816 	bl	8008b34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b12:	2b40      	cmp	r3, #64	@ 0x40
 8007b14:	d146      	bne.n	8007ba4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1d9      	bne.n	8007b16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d017      	beq.n	8007b9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b72:	4a15      	ldr	r2, [pc, #84]	@ (8007bc8 <HAL_UART_IRQHandler+0x2c0>)
 8007b74:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fb fe4c 	bl	800381a <HAL_DMA_Abort_IT>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d019      	beq.n	8007bbc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007b96:	4610      	mov	r0, r2
 8007b98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b9a:	e00f      	b.n	8007bbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f9e1 	bl	8007f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba2:	e00b      	b.n	8007bbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f9dd 	bl	8007f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007baa:	e007      	b.n	8007bbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f9d9 	bl	8007f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007bba:	e1bf      	b.n	8007f3c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bbc:	bf00      	nop
    return;
 8007bbe:	e1bd      	b.n	8007f3c <HAL_UART_IRQHandler+0x634>
 8007bc0:	10000001 	.word	0x10000001
 8007bc4:	04000120 	.word	0x04000120
 8007bc8:	08008c01 	.word	0x08008c01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	f040 8153 	bne.w	8007e7c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bda:	f003 0310 	and.w	r3, r3, #16
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 814c 	beq.w	8007e7c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007be8:	f003 0310 	and.w	r3, r3, #16
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 8145 	beq.w	8007e7c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2210      	movs	r2, #16
 8007bf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c04:	2b40      	cmp	r3, #64	@ 0x40
 8007c06:	f040 80bb 	bne.w	8007d80 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 818f 	beq.w	8007f40 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	f080 8187 	bcs.w	8007f40 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f040 8087 	bne.w	8007d5e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
 8007c76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1da      	bne.n	8007c50 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007caa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cac:	f023 0301 	bic.w	r3, r3, #1
 8007cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3308      	adds	r3, #8
 8007cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007cbe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007cc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007cd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e1      	bne.n	8007c9a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ce6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ce8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007cfa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e3      	bne.n	8007cd6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d2c:	f023 0310 	bic.w	r3, r3, #16
 8007d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e4      	bne.n	8007d1c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fb fd02 	bl	8003762 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2202      	movs	r2, #2
 8007d62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f8fd 	bl	8007f78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d7e:	e0df      	b.n	8007f40 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 80d1 	beq.w	8007f44 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007da2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 80cc 	beq.w	8007f44 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dd0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e4      	bne.n	8007dac <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	623b      	str	r3, [r7, #32]
   return(result);
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007df8:	f023 0301 	bic.w	r3, r3, #1
 8007dfc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3308      	adds	r3, #8
 8007e06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e1      	bne.n	8007de2 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2220      	movs	r2, #32
 8007e22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	e853 3f00 	ldrex	r3, [r3]
 8007e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 0310 	bic.w	r3, r3, #16
 8007e46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e54:	61fb      	str	r3, [r7, #28]
 8007e56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	69b9      	ldr	r1, [r7, #24]
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	617b      	str	r3, [r7, #20]
   return(result);
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e4      	bne.n	8007e32 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f87f 	bl	8007f78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e7a:	e063      	b.n	8007f44 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00e      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x59e>
 8007e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d008      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fc14 	bl	80096cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ea4:	e051      	b.n	8007f4a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d014      	beq.n	8007edc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d105      	bne.n	8007eca <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d008      	beq.n	8007edc <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d03a      	beq.n	8007f48 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	4798      	blx	r3
    }
    return;
 8007eda:	e035      	b.n	8007f48 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d009      	beq.n	8007efc <HAL_UART_IRQHandler+0x5f4>
 8007ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fe99 	bl	8008c2c <UART_EndTransmit_IT>
    return;
 8007efa:	e026      	b.n	8007f4a <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d009      	beq.n	8007f1c <HAL_UART_IRQHandler+0x614>
 8007f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 fbed 	bl	80096f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f1a:	e016      	b.n	8007f4a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d010      	beq.n	8007f4a <HAL_UART_IRQHandler+0x642>
 8007f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	da0c      	bge.n	8007f4a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 fbd5 	bl	80096e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f36:	e008      	b.n	8007f4a <HAL_UART_IRQHandler+0x642>
      return;
 8007f38:	bf00      	nop
 8007f3a:	e006      	b.n	8007f4a <HAL_UART_IRQHandler+0x642>
    return;
 8007f3c:	bf00      	nop
 8007f3e:	e004      	b.n	8007f4a <HAL_UART_IRQHandler+0x642>
      return;
 8007f40:	bf00      	nop
 8007f42:	e002      	b.n	8007f4a <HAL_UART_IRQHandler+0x642>
      return;
 8007f44:	bf00      	nop
 8007f46:	e000      	b.n	8007f4a <HAL_UART_IRQHandler+0x642>
    return;
 8007f48:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007f4a:	37e8      	adds	r7, #232	@ 0xe8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f94:	b08c      	sub	sp, #48	@ 0x30
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	431a      	orrs	r2, r3
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	4baa      	ldr	r3, [pc, #680]	@ (8008268 <UART_SetConfig+0x2d8>)
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	68da      	ldr	r2, [r3, #12]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a9f      	ldr	r2, [pc, #636]	@ (800826c <UART_SetConfig+0x2dc>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d004      	beq.n	8007ffc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008006:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	6812      	ldr	r2, [r2, #0]
 800800e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008010:	430b      	orrs	r3, r1
 8008012:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801a:	f023 010f 	bic.w	r1, r3, #15
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	430a      	orrs	r2, r1
 8008028:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a90      	ldr	r2, [pc, #576]	@ (8008270 <UART_SetConfig+0x2e0>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d125      	bne.n	8008080 <UART_SetConfig+0xf0>
 8008034:	4b8f      	ldr	r3, [pc, #572]	@ (8008274 <UART_SetConfig+0x2e4>)
 8008036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	2b03      	cmp	r3, #3
 8008040:	d81a      	bhi.n	8008078 <UART_SetConfig+0xe8>
 8008042:	a201      	add	r2, pc, #4	@ (adr r2, 8008048 <UART_SetConfig+0xb8>)
 8008044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008048:	08008059 	.word	0x08008059
 800804c:	08008069 	.word	0x08008069
 8008050:	08008061 	.word	0x08008061
 8008054:	08008071 	.word	0x08008071
 8008058:	2301      	movs	r3, #1
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805e:	e116      	b.n	800828e <UART_SetConfig+0x2fe>
 8008060:	2302      	movs	r3, #2
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008066:	e112      	b.n	800828e <UART_SetConfig+0x2fe>
 8008068:	2304      	movs	r3, #4
 800806a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800806e:	e10e      	b.n	800828e <UART_SetConfig+0x2fe>
 8008070:	2308      	movs	r3, #8
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008076:	e10a      	b.n	800828e <UART_SetConfig+0x2fe>
 8008078:	2310      	movs	r3, #16
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800807e:	e106      	b.n	800828e <UART_SetConfig+0x2fe>
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a7c      	ldr	r2, [pc, #496]	@ (8008278 <UART_SetConfig+0x2e8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d138      	bne.n	80080fc <UART_SetConfig+0x16c>
 800808a:	4b7a      	ldr	r3, [pc, #488]	@ (8008274 <UART_SetConfig+0x2e4>)
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008090:	f003 030c 	and.w	r3, r3, #12
 8008094:	2b0c      	cmp	r3, #12
 8008096:	d82d      	bhi.n	80080f4 <UART_SetConfig+0x164>
 8008098:	a201      	add	r2, pc, #4	@ (adr r2, 80080a0 <UART_SetConfig+0x110>)
 800809a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809e:	bf00      	nop
 80080a0:	080080d5 	.word	0x080080d5
 80080a4:	080080f5 	.word	0x080080f5
 80080a8:	080080f5 	.word	0x080080f5
 80080ac:	080080f5 	.word	0x080080f5
 80080b0:	080080e5 	.word	0x080080e5
 80080b4:	080080f5 	.word	0x080080f5
 80080b8:	080080f5 	.word	0x080080f5
 80080bc:	080080f5 	.word	0x080080f5
 80080c0:	080080dd 	.word	0x080080dd
 80080c4:	080080f5 	.word	0x080080f5
 80080c8:	080080f5 	.word	0x080080f5
 80080cc:	080080f5 	.word	0x080080f5
 80080d0:	080080ed 	.word	0x080080ed
 80080d4:	2300      	movs	r3, #0
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080da:	e0d8      	b.n	800828e <UART_SetConfig+0x2fe>
 80080dc:	2302      	movs	r3, #2
 80080de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e2:	e0d4      	b.n	800828e <UART_SetConfig+0x2fe>
 80080e4:	2304      	movs	r3, #4
 80080e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ea:	e0d0      	b.n	800828e <UART_SetConfig+0x2fe>
 80080ec:	2308      	movs	r3, #8
 80080ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080f2:	e0cc      	b.n	800828e <UART_SetConfig+0x2fe>
 80080f4:	2310      	movs	r3, #16
 80080f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080fa:	e0c8      	b.n	800828e <UART_SetConfig+0x2fe>
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a5e      	ldr	r2, [pc, #376]	@ (800827c <UART_SetConfig+0x2ec>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d125      	bne.n	8008152 <UART_SetConfig+0x1c2>
 8008106:	4b5b      	ldr	r3, [pc, #364]	@ (8008274 <UART_SetConfig+0x2e4>)
 8008108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800810c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008110:	2b30      	cmp	r3, #48	@ 0x30
 8008112:	d016      	beq.n	8008142 <UART_SetConfig+0x1b2>
 8008114:	2b30      	cmp	r3, #48	@ 0x30
 8008116:	d818      	bhi.n	800814a <UART_SetConfig+0x1ba>
 8008118:	2b20      	cmp	r3, #32
 800811a:	d00a      	beq.n	8008132 <UART_SetConfig+0x1a2>
 800811c:	2b20      	cmp	r3, #32
 800811e:	d814      	bhi.n	800814a <UART_SetConfig+0x1ba>
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <UART_SetConfig+0x19a>
 8008124:	2b10      	cmp	r3, #16
 8008126:	d008      	beq.n	800813a <UART_SetConfig+0x1aa>
 8008128:	e00f      	b.n	800814a <UART_SetConfig+0x1ba>
 800812a:	2300      	movs	r3, #0
 800812c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008130:	e0ad      	b.n	800828e <UART_SetConfig+0x2fe>
 8008132:	2302      	movs	r3, #2
 8008134:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008138:	e0a9      	b.n	800828e <UART_SetConfig+0x2fe>
 800813a:	2304      	movs	r3, #4
 800813c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008140:	e0a5      	b.n	800828e <UART_SetConfig+0x2fe>
 8008142:	2308      	movs	r3, #8
 8008144:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008148:	e0a1      	b.n	800828e <UART_SetConfig+0x2fe>
 800814a:	2310      	movs	r3, #16
 800814c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008150:	e09d      	b.n	800828e <UART_SetConfig+0x2fe>
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a4a      	ldr	r2, [pc, #296]	@ (8008280 <UART_SetConfig+0x2f0>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d125      	bne.n	80081a8 <UART_SetConfig+0x218>
 800815c:	4b45      	ldr	r3, [pc, #276]	@ (8008274 <UART_SetConfig+0x2e4>)
 800815e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008162:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008166:	2bc0      	cmp	r3, #192	@ 0xc0
 8008168:	d016      	beq.n	8008198 <UART_SetConfig+0x208>
 800816a:	2bc0      	cmp	r3, #192	@ 0xc0
 800816c:	d818      	bhi.n	80081a0 <UART_SetConfig+0x210>
 800816e:	2b80      	cmp	r3, #128	@ 0x80
 8008170:	d00a      	beq.n	8008188 <UART_SetConfig+0x1f8>
 8008172:	2b80      	cmp	r3, #128	@ 0x80
 8008174:	d814      	bhi.n	80081a0 <UART_SetConfig+0x210>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <UART_SetConfig+0x1f0>
 800817a:	2b40      	cmp	r3, #64	@ 0x40
 800817c:	d008      	beq.n	8008190 <UART_SetConfig+0x200>
 800817e:	e00f      	b.n	80081a0 <UART_SetConfig+0x210>
 8008180:	2300      	movs	r3, #0
 8008182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008186:	e082      	b.n	800828e <UART_SetConfig+0x2fe>
 8008188:	2302      	movs	r3, #2
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800818e:	e07e      	b.n	800828e <UART_SetConfig+0x2fe>
 8008190:	2304      	movs	r3, #4
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008196:	e07a      	b.n	800828e <UART_SetConfig+0x2fe>
 8008198:	2308      	movs	r3, #8
 800819a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800819e:	e076      	b.n	800828e <UART_SetConfig+0x2fe>
 80081a0:	2310      	movs	r3, #16
 80081a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081a6:	e072      	b.n	800828e <UART_SetConfig+0x2fe>
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a35      	ldr	r2, [pc, #212]	@ (8008284 <UART_SetConfig+0x2f4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d12a      	bne.n	8008208 <UART_SetConfig+0x278>
 80081b2:	4b30      	ldr	r3, [pc, #192]	@ (8008274 <UART_SetConfig+0x2e4>)
 80081b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081c0:	d01a      	beq.n	80081f8 <UART_SetConfig+0x268>
 80081c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081c6:	d81b      	bhi.n	8008200 <UART_SetConfig+0x270>
 80081c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081cc:	d00c      	beq.n	80081e8 <UART_SetConfig+0x258>
 80081ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d2:	d815      	bhi.n	8008200 <UART_SetConfig+0x270>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d003      	beq.n	80081e0 <UART_SetConfig+0x250>
 80081d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081dc:	d008      	beq.n	80081f0 <UART_SetConfig+0x260>
 80081de:	e00f      	b.n	8008200 <UART_SetConfig+0x270>
 80081e0:	2300      	movs	r3, #0
 80081e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081e6:	e052      	b.n	800828e <UART_SetConfig+0x2fe>
 80081e8:	2302      	movs	r3, #2
 80081ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ee:	e04e      	b.n	800828e <UART_SetConfig+0x2fe>
 80081f0:	2304      	movs	r3, #4
 80081f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081f6:	e04a      	b.n	800828e <UART_SetConfig+0x2fe>
 80081f8:	2308      	movs	r3, #8
 80081fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081fe:	e046      	b.n	800828e <UART_SetConfig+0x2fe>
 8008200:	2310      	movs	r3, #16
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008206:	e042      	b.n	800828e <UART_SetConfig+0x2fe>
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a17      	ldr	r2, [pc, #92]	@ (800826c <UART_SetConfig+0x2dc>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d13a      	bne.n	8008288 <UART_SetConfig+0x2f8>
 8008212:	4b18      	ldr	r3, [pc, #96]	@ (8008274 <UART_SetConfig+0x2e4>)
 8008214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008218:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800821c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008220:	d01a      	beq.n	8008258 <UART_SetConfig+0x2c8>
 8008222:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008226:	d81b      	bhi.n	8008260 <UART_SetConfig+0x2d0>
 8008228:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800822c:	d00c      	beq.n	8008248 <UART_SetConfig+0x2b8>
 800822e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008232:	d815      	bhi.n	8008260 <UART_SetConfig+0x2d0>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <UART_SetConfig+0x2b0>
 8008238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800823c:	d008      	beq.n	8008250 <UART_SetConfig+0x2c0>
 800823e:	e00f      	b.n	8008260 <UART_SetConfig+0x2d0>
 8008240:	2300      	movs	r3, #0
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008246:	e022      	b.n	800828e <UART_SetConfig+0x2fe>
 8008248:	2302      	movs	r3, #2
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800824e:	e01e      	b.n	800828e <UART_SetConfig+0x2fe>
 8008250:	2304      	movs	r3, #4
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008256:	e01a      	b.n	800828e <UART_SetConfig+0x2fe>
 8008258:	2308      	movs	r3, #8
 800825a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800825e:	e016      	b.n	800828e <UART_SetConfig+0x2fe>
 8008260:	2310      	movs	r3, #16
 8008262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008266:	e012      	b.n	800828e <UART_SetConfig+0x2fe>
 8008268:	cfff69f3 	.word	0xcfff69f3
 800826c:	40008000 	.word	0x40008000
 8008270:	40013800 	.word	0x40013800
 8008274:	40021000 	.word	0x40021000
 8008278:	40004400 	.word	0x40004400
 800827c:	40004800 	.word	0x40004800
 8008280:	40004c00 	.word	0x40004c00
 8008284:	40005000 	.word	0x40005000
 8008288:	2310      	movs	r3, #16
 800828a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4aae      	ldr	r2, [pc, #696]	@ (800854c <UART_SetConfig+0x5bc>)
 8008294:	4293      	cmp	r3, r2
 8008296:	f040 8097 	bne.w	80083c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800829a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d823      	bhi.n	80082ea <UART_SetConfig+0x35a>
 80082a2:	a201      	add	r2, pc, #4	@ (adr r2, 80082a8 <UART_SetConfig+0x318>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	080082cd 	.word	0x080082cd
 80082ac:	080082eb 	.word	0x080082eb
 80082b0:	080082d5 	.word	0x080082d5
 80082b4:	080082eb 	.word	0x080082eb
 80082b8:	080082db 	.word	0x080082db
 80082bc:	080082eb 	.word	0x080082eb
 80082c0:	080082eb 	.word	0x080082eb
 80082c4:	080082eb 	.word	0x080082eb
 80082c8:	080082e3 	.word	0x080082e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082cc:	f7fd fef0 	bl	80060b0 <HAL_RCC_GetPCLK1Freq>
 80082d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082d2:	e010      	b.n	80082f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082d4:	4b9e      	ldr	r3, [pc, #632]	@ (8008550 <UART_SetConfig+0x5c0>)
 80082d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082d8:	e00d      	b.n	80082f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082da:	f7fd fe51 	bl	8005f80 <HAL_RCC_GetSysClockFreq>
 80082de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082e0:	e009      	b.n	80082f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082e8:	e005      	b.n	80082f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 8130 	beq.w	800855e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008302:	4a94      	ldr	r2, [pc, #592]	@ (8008554 <UART_SetConfig+0x5c4>)
 8008304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008308:	461a      	mov	r2, r3
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008310:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	4613      	mov	r3, r2
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	4413      	add	r3, r2
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	429a      	cmp	r2, r3
 8008320:	d305      	bcc.n	800832e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	429a      	cmp	r2, r3
 800832c:	d903      	bls.n	8008336 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008334:	e113      	b.n	800855e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008338:	2200      	movs	r2, #0
 800833a:	60bb      	str	r3, [r7, #8]
 800833c:	60fa      	str	r2, [r7, #12]
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008342:	4a84      	ldr	r2, [pc, #528]	@ (8008554 <UART_SetConfig+0x5c4>)
 8008344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008348:	b29b      	uxth	r3, r3
 800834a:	2200      	movs	r2, #0
 800834c:	603b      	str	r3, [r7, #0]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008354:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008358:	f7f7 ff50 	bl	80001fc <__aeabi_uldivmod>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4610      	mov	r0, r2
 8008362:	4619      	mov	r1, r3
 8008364:	f04f 0200 	mov.w	r2, #0
 8008368:	f04f 0300 	mov.w	r3, #0
 800836c:	020b      	lsls	r3, r1, #8
 800836e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008372:	0202      	lsls	r2, r0, #8
 8008374:	6979      	ldr	r1, [r7, #20]
 8008376:	6849      	ldr	r1, [r1, #4]
 8008378:	0849      	lsrs	r1, r1, #1
 800837a:	2000      	movs	r0, #0
 800837c:	460c      	mov	r4, r1
 800837e:	4605      	mov	r5, r0
 8008380:	eb12 0804 	adds.w	r8, r2, r4
 8008384:	eb43 0905 	adc.w	r9, r3, r5
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	469a      	mov	sl, r3
 8008390:	4693      	mov	fp, r2
 8008392:	4652      	mov	r2, sl
 8008394:	465b      	mov	r3, fp
 8008396:	4640      	mov	r0, r8
 8008398:	4649      	mov	r1, r9
 800839a:	f7f7 ff2f 	bl	80001fc <__aeabi_uldivmod>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4613      	mov	r3, r2
 80083a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083ac:	d308      	bcc.n	80083c0 <UART_SetConfig+0x430>
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083b4:	d204      	bcs.n	80083c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6a3a      	ldr	r2, [r7, #32]
 80083bc:	60da      	str	r2, [r3, #12]
 80083be:	e0ce      	b.n	800855e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083c6:	e0ca      	b.n	800855e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083d0:	d166      	bne.n	80084a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80083d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083d6:	2b08      	cmp	r3, #8
 80083d8:	d827      	bhi.n	800842a <UART_SetConfig+0x49a>
 80083da:	a201      	add	r2, pc, #4	@ (adr r2, 80083e0 <UART_SetConfig+0x450>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	08008405 	.word	0x08008405
 80083e4:	0800840d 	.word	0x0800840d
 80083e8:	08008415 	.word	0x08008415
 80083ec:	0800842b 	.word	0x0800842b
 80083f0:	0800841b 	.word	0x0800841b
 80083f4:	0800842b 	.word	0x0800842b
 80083f8:	0800842b 	.word	0x0800842b
 80083fc:	0800842b 	.word	0x0800842b
 8008400:	08008423 	.word	0x08008423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008404:	f7fd fe54 	bl	80060b0 <HAL_RCC_GetPCLK1Freq>
 8008408:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800840a:	e014      	b.n	8008436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800840c:	f7fd fe66 	bl	80060dc <HAL_RCC_GetPCLK2Freq>
 8008410:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008412:	e010      	b.n	8008436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008414:	4b4e      	ldr	r3, [pc, #312]	@ (8008550 <UART_SetConfig+0x5c0>)
 8008416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008418:	e00d      	b.n	8008436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800841a:	f7fd fdb1 	bl	8005f80 <HAL_RCC_GetSysClockFreq>
 800841e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008420:	e009      	b.n	8008436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008426:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008428:	e005      	b.n	8008436 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 8090 	beq.w	800855e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008442:	4a44      	ldr	r2, [pc, #272]	@ (8008554 <UART_SetConfig+0x5c4>)
 8008444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008448:	461a      	mov	r2, r3
 800844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008450:	005a      	lsls	r2, r3, #1
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	085b      	lsrs	r3, r3, #1
 8008458:	441a      	add	r2, r3
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008462:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	2b0f      	cmp	r3, #15
 8008468:	d916      	bls.n	8008498 <UART_SetConfig+0x508>
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008470:	d212      	bcs.n	8008498 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	b29b      	uxth	r3, r3
 8008476:	f023 030f 	bic.w	r3, r3, #15
 800847a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	085b      	lsrs	r3, r3, #1
 8008480:	b29b      	uxth	r3, r3
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	b29a      	uxth	r2, r3
 8008488:	8bfb      	ldrh	r3, [r7, #30]
 800848a:	4313      	orrs	r3, r2
 800848c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	8bfa      	ldrh	r2, [r7, #30]
 8008494:	60da      	str	r2, [r3, #12]
 8008496:	e062      	b.n	800855e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800849e:	e05e      	b.n	800855e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80084a4:	2b08      	cmp	r3, #8
 80084a6:	d828      	bhi.n	80084fa <UART_SetConfig+0x56a>
 80084a8:	a201      	add	r2, pc, #4	@ (adr r2, 80084b0 <UART_SetConfig+0x520>)
 80084aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ae:	bf00      	nop
 80084b0:	080084d5 	.word	0x080084d5
 80084b4:	080084dd 	.word	0x080084dd
 80084b8:	080084e5 	.word	0x080084e5
 80084bc:	080084fb 	.word	0x080084fb
 80084c0:	080084eb 	.word	0x080084eb
 80084c4:	080084fb 	.word	0x080084fb
 80084c8:	080084fb 	.word	0x080084fb
 80084cc:	080084fb 	.word	0x080084fb
 80084d0:	080084f3 	.word	0x080084f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084d4:	f7fd fdec 	bl	80060b0 <HAL_RCC_GetPCLK1Freq>
 80084d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084da:	e014      	b.n	8008506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084dc:	f7fd fdfe 	bl	80060dc <HAL_RCC_GetPCLK2Freq>
 80084e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084e2:	e010      	b.n	8008506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008550 <UART_SetConfig+0x5c0>)
 80084e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084e8:	e00d      	b.n	8008506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084ea:	f7fd fd49 	bl	8005f80 <HAL_RCC_GetSysClockFreq>
 80084ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084f0:	e009      	b.n	8008506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084f8:	e005      	b.n	8008506 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008504:	bf00      	nop
    }

    if (pclk != 0U)
 8008506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008508:	2b00      	cmp	r3, #0
 800850a:	d028      	beq.n	800855e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008510:	4a10      	ldr	r2, [pc, #64]	@ (8008554 <UART_SetConfig+0x5c4>)
 8008512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008516:	461a      	mov	r2, r3
 8008518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851a:	fbb3 f2f2 	udiv	r2, r3, r2
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	085b      	lsrs	r3, r3, #1
 8008524:	441a      	add	r2, r3
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	fbb2 f3f3 	udiv	r3, r2, r3
 800852e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	2b0f      	cmp	r3, #15
 8008534:	d910      	bls.n	8008558 <UART_SetConfig+0x5c8>
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800853c:	d20c      	bcs.n	8008558 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	b29a      	uxth	r2, r3
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60da      	str	r2, [r3, #12]
 8008548:	e009      	b.n	800855e <UART_SetConfig+0x5ce>
 800854a:	bf00      	nop
 800854c:	40008000 	.word	0x40008000
 8008550:	00f42400 	.word	0x00f42400
 8008554:	0800db98 	.word	0x0800db98
      }
      else
      {
        ret = HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2201      	movs	r2, #1
 8008562:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2201      	movs	r2, #1
 800856a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2200      	movs	r2, #0
 8008572:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2200      	movs	r2, #0
 8008578:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800857a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800857e:	4618      	mov	r0, r3
 8008580:	3730      	adds	r7, #48	@ 0x30
 8008582:	46bd      	mov	sp, r7
 8008584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008594:	f003 0308 	and.w	r3, r3, #8
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00a      	beq.n	80085b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fa:	f003 0304 	and.w	r3, r3, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800861c:	f003 0310 	and.w	r3, r3, #16
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00a      	beq.n	800863a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	430a      	orrs	r2, r1
 800865a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01a      	beq.n	800869e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008686:	d10a      	bne.n	800869e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	605a      	str	r2, [r3, #4]
  }
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b098      	sub	sp, #96	@ 0x60
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086dc:	f7f9 fa02 	bl	8001ae4 <HAL_GetTick>
 80086e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d12f      	bne.n	8008750 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086f8:	2200      	movs	r2, #0
 80086fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f88e 	bl	8008820 <UART_WaitOnFlagUntilTimeout>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d022      	beq.n	8008750 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008712:	e853 3f00 	ldrex	r3, [r3]
 8008716:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800871e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	461a      	mov	r2, r3
 8008726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008728:	647b      	str	r3, [r7, #68]	@ 0x44
 800872a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800872e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008730:	e841 2300 	strex	r3, r2, [r1]
 8008734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1e6      	bne.n	800870a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e063      	b.n	8008818 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 0304 	and.w	r3, r3, #4
 800875a:	2b04      	cmp	r3, #4
 800875c:	d149      	bne.n	80087f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800875e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008766:	2200      	movs	r2, #0
 8008768:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f857 	bl	8008820 <UART_WaitOnFlagUntilTimeout>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d03c      	beq.n	80087f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008780:	e853 3f00 	ldrex	r3, [r3]
 8008784:	623b      	str	r3, [r7, #32]
   return(result);
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800878c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008796:	633b      	str	r3, [r7, #48]	@ 0x30
 8008798:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800879c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e6      	bne.n	8008778 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3308      	adds	r3, #8
 80087b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	e853 3f00 	ldrex	r3, [r3]
 80087b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f023 0301 	bic.w	r3, r3, #1
 80087c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3308      	adds	r3, #8
 80087c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087ca:	61fa      	str	r2, [r7, #28]
 80087cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ce:	69b9      	ldr	r1, [r7, #24]
 80087d0:	69fa      	ldr	r2, [r7, #28]
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	617b      	str	r3, [r7, #20]
   return(result);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e5      	bne.n	80087aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e012      	b.n	8008818 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2220      	movs	r2, #32
 80087f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2220      	movs	r2, #32
 80087fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3758      	adds	r7, #88	@ 0x58
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	603b      	str	r3, [r7, #0]
 800882c:	4613      	mov	r3, r2
 800882e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008830:	e049      	b.n	80088c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008838:	d045      	beq.n	80088c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800883a:	f7f9 f953 	bl	8001ae4 <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	69ba      	ldr	r2, [r7, #24]
 8008846:	429a      	cmp	r2, r3
 8008848:	d302      	bcc.n	8008850 <UART_WaitOnFlagUntilTimeout+0x30>
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e048      	b.n	80088e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0304 	and.w	r3, r3, #4
 800885e:	2b00      	cmp	r3, #0
 8008860:	d031      	beq.n	80088c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	f003 0308 	and.w	r3, r3, #8
 800886c:	2b08      	cmp	r3, #8
 800886e:	d110      	bne.n	8008892 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2208      	movs	r2, #8
 8008876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 f95b 	bl	8008b34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2208      	movs	r2, #8
 8008882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e029      	b.n	80088e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800889c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088a0:	d111      	bne.n	80088c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 f941 	bl	8008b34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2220      	movs	r2, #32
 80088b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e00f      	b.n	80088e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	69da      	ldr	r2, [r3, #28]
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	4013      	ands	r3, r2
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	bf0c      	ite	eq
 80088d6:	2301      	moveq	r3, #1
 80088d8:	2300      	movne	r3, #0
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	461a      	mov	r2, r3
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d0a6      	beq.n	8008832 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b0a3      	sub	sp, #140	@ 0x8c
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	4613      	mov	r3, r2
 80088fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	88fa      	ldrh	r2, [r7, #6]
 8008908:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	88fa      	ldrh	r2, [r7, #6]
 8008910:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008922:	d10e      	bne.n	8008942 <UART_Start_Receive_IT+0x52>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d105      	bne.n	8008938 <UART_Start_Receive_IT+0x48>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008932:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008936:	e02d      	b.n	8008994 <UART_Start_Receive_IT+0xa4>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	22ff      	movs	r2, #255	@ 0xff
 800893c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008940:	e028      	b.n	8008994 <UART_Start_Receive_IT+0xa4>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10d      	bne.n	8008966 <UART_Start_Receive_IT+0x76>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d104      	bne.n	800895c <UART_Start_Receive_IT+0x6c>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	22ff      	movs	r2, #255	@ 0xff
 8008956:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800895a:	e01b      	b.n	8008994 <UART_Start_Receive_IT+0xa4>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	227f      	movs	r2, #127	@ 0x7f
 8008960:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008964:	e016      	b.n	8008994 <UART_Start_Receive_IT+0xa4>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800896e:	d10d      	bne.n	800898c <UART_Start_Receive_IT+0x9c>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d104      	bne.n	8008982 <UART_Start_Receive_IT+0x92>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	227f      	movs	r2, #127	@ 0x7f
 800897c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008980:	e008      	b.n	8008994 <UART_Start_Receive_IT+0xa4>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	223f      	movs	r2, #63	@ 0x3f
 8008986:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800898a:	e003      	b.n	8008994 <UART_Start_Receive_IT+0xa4>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2222      	movs	r2, #34	@ 0x22
 80089a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3308      	adds	r3, #8
 80089aa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089ae:	e853 3f00 	ldrex	r3, [r3]
 80089b2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80089b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089b6:	f043 0301 	orr.w	r3, r3, #1
 80089ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3308      	adds	r3, #8
 80089c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80089c8:	673a      	str	r2, [r7, #112]	@ 0x70
 80089ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089cc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80089ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80089d0:	e841 2300 	strex	r3, r2, [r1]
 80089d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80089d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1e3      	bne.n	80089a4 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089e4:	d14f      	bne.n	8008a86 <UART_Start_Receive_IT+0x196>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80089ec:	88fa      	ldrh	r2, [r7, #6]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d349      	bcc.n	8008a86 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089fa:	d107      	bne.n	8008a0c <UART_Start_Receive_IT+0x11c>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d103      	bne.n	8008a0c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4a47      	ldr	r2, [pc, #284]	@ (8008b24 <UART_Start_Receive_IT+0x234>)
 8008a08:	675a      	str	r2, [r3, #116]	@ 0x74
 8008a0a:	e002      	b.n	8008a12 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	4a46      	ldr	r2, [pc, #280]	@ (8008b28 <UART_Start_Receive_IT+0x238>)
 8008a10:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d01a      	beq.n	8008a50 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a22:	e853 3f00 	ldrex	r3, [r3]
 8008a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a3e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a40:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008a42:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008a44:	e841 2300 	strex	r3, r2, [r1]
 8008a48:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e4      	bne.n	8008a1a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	3308      	adds	r3, #8
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a5a:	e853 3f00 	ldrex	r3, [r3]
 8008a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008a70:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008a72:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e5      	bne.n	8008a50 <UART_Start_Receive_IT+0x160>
 8008a84:	e046      	b.n	8008b14 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a8e:	d107      	bne.n	8008aa0 <UART_Start_Receive_IT+0x1b0>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d103      	bne.n	8008aa0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4a24      	ldr	r2, [pc, #144]	@ (8008b2c <UART_Start_Receive_IT+0x23c>)
 8008a9c:	675a      	str	r2, [r3, #116]	@ 0x74
 8008a9e:	e002      	b.n	8008aa6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4a23      	ldr	r2, [pc, #140]	@ (8008b30 <UART_Start_Receive_IT+0x240>)
 8008aa4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d019      	beq.n	8008ae2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab6:	e853 3f00 	ldrex	r3, [r3]
 8008aba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008ac2:	677b      	str	r3, [r7, #116]	@ 0x74
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ace:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ad2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e6      	bne.n	8008aae <UART_Start_Receive_IT+0x1be>
 8008ae0:	e018      	b.n	8008b14 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	613b      	str	r3, [r7, #16]
   return(result);
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f043 0320 	orr.w	r3, r3, #32
 8008af6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	461a      	mov	r2, r3
 8008afe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b00:	623b      	str	r3, [r7, #32]
 8008b02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	69f9      	ldr	r1, [r7, #28]
 8008b06:	6a3a      	ldr	r2, [r7, #32]
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e6      	bne.n	8008ae2 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	378c      	adds	r7, #140	@ 0x8c
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	08009361 	.word	0x08009361
 8008b28:	08008ffd 	.word	0x08008ffd
 8008b2c:	08008e41 	.word	0x08008e41
 8008b30:	08008c85 	.word	0x08008c85

08008b34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b095      	sub	sp, #84	@ 0x54
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b44:	e853 3f00 	ldrex	r3, [r3]
 8008b48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e6      	bne.n	8008b3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3308      	adds	r3, #8
 8008b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b84:	f023 0301 	bic.w	r3, r3, #1
 8008b88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3308      	adds	r3, #8
 8008b90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e3      	bne.n	8008b6e <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d118      	bne.n	8008be0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f023 0310 	bic.w	r3, r3, #16
 8008bc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bcc:	61bb      	str	r3, [r7, #24]
 8008bce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	6979      	ldr	r1, [r7, #20]
 8008bd2:	69ba      	ldr	r2, [r7, #24]
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e6      	bne.n	8008bae <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2220      	movs	r2, #32
 8008be4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008bf4:	bf00      	nop
 8008bf6:	3754      	adds	r7, #84	@ 0x54
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f7ff f9a0 	bl	8007f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c24:	bf00      	nop
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	e853 3f00 	ldrex	r3, [r3]
 8008c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c48:	61fb      	str	r3, [r7, #28]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	61bb      	str	r3, [r7, #24]
 8008c54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c56:	6979      	ldr	r1, [r7, #20]
 8008c58:	69ba      	ldr	r2, [r7, #24]
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e6      	bne.n	8008c34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff f96b 	bl	8007f50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c7a:	bf00      	nop
 8008c7c:	3720      	adds	r7, #32
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
	...

08008c84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b09c      	sub	sp, #112	@ 0x70
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c9c:	2b22      	cmp	r3, #34	@ 0x22
 8008c9e:	f040 80be 	bne.w	8008e1e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008ca8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008cac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008cb0:	b2d9      	uxtb	r1, r3
 8008cb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cbc:	400a      	ands	r2, r1
 8008cbe:	b2d2      	uxtb	r2, r2
 8008cc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cc6:	1c5a      	adds	r2, r3, #1
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f040 80a3 	bne.w	8008e32 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cf4:	e853 3f00 	ldrex	r3, [r3]
 8008cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e6      	bne.n	8008cec <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3308      	adds	r3, #8
 8008d24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d28:	e853 3f00 	ldrex	r3, [r3]
 8008d2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d30:	f023 0301 	bic.w	r3, r3, #1
 8008d34:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3308      	adds	r3, #8
 8008d3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008d3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1e5      	bne.n	8008d1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2220      	movs	r2, #32
 8008d56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a34      	ldr	r2, [pc, #208]	@ (8008e3c <UART_RxISR_8BIT+0x1b8>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d01f      	beq.n	8008db0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d018      	beq.n	8008db0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	623b      	str	r3, [r7, #32]
   return(result);
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d92:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e6      	bne.n	8008d7e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d12e      	bne.n	8008e16 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	e853 3f00 	ldrex	r3, [r3]
 8008dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 0310 	bic.w	r3, r3, #16
 8008dd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ddc:	61fb      	str	r3, [r7, #28]
 8008dde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	69b9      	ldr	r1, [r7, #24]
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	e841 2300 	strex	r3, r2, [r1]
 8008de8:	617b      	str	r3, [r7, #20]
   return(result);
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e6      	bne.n	8008dbe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	f003 0310 	and.w	r3, r3, #16
 8008dfa:	2b10      	cmp	r3, #16
 8008dfc:	d103      	bne.n	8008e06 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2210      	movs	r2, #16
 8008e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff f8b2 	bl	8007f78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e14:	e00d      	b.n	8008e32 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7f8 f88a 	bl	8000f30 <HAL_UART_RxCpltCallback>
}
 8008e1c:	e009      	b.n	8008e32 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	8b1b      	ldrh	r3, [r3, #24]
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0208 	orr.w	r2, r2, #8
 8008e2e:	b292      	uxth	r2, r2
 8008e30:	831a      	strh	r2, [r3, #24]
}
 8008e32:	bf00      	nop
 8008e34:	3770      	adds	r7, #112	@ 0x70
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	40008000 	.word	0x40008000

08008e40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b09c      	sub	sp, #112	@ 0x70
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e4e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e58:	2b22      	cmp	r3, #34	@ 0x22
 8008e5a:	f040 80be 	bne.w	8008fda <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008e64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e6e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008e72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008e76:	4013      	ands	r3, r2
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e82:	1c9a      	adds	r2, r3, #2
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	3b01      	subs	r3, #1
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f040 80a3 	bne.w	8008fee <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ebc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ec6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ec8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ecc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008ece:	e841 2300 	strex	r3, r2, [r1]
 8008ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1e6      	bne.n	8008ea8 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3308      	adds	r3, #8
 8008ee0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eec:	f023 0301 	bic.w	r3, r3, #1
 8008ef0:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008efa:	643a      	str	r2, [r7, #64]	@ 0x40
 8008efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f02:	e841 2300 	strex	r3, r2, [r1]
 8008f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1e5      	bne.n	8008eda <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2220      	movs	r2, #32
 8008f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a34      	ldr	r2, [pc, #208]	@ (8008ff8 <UART_RxISR_16BIT+0x1b8>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d01f      	beq.n	8008f6c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d018      	beq.n	8008f6c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	e853 3f00 	ldrex	r3, [r3]
 8008f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	461a      	mov	r2, r3
 8008f56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f5a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f60:	e841 2300 	strex	r3, r2, [r1]
 8008f64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1e6      	bne.n	8008f3a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d12e      	bne.n	8008fd2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	e853 3f00 	ldrex	r3, [r3]
 8008f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	f023 0310 	bic.w	r3, r3, #16
 8008f8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	461a      	mov	r2, r3
 8008f96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f98:	61bb      	str	r3, [r7, #24]
 8008f9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9c:	6979      	ldr	r1, [r7, #20]
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	e841 2300 	strex	r3, r2, [r1]
 8008fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1e6      	bne.n	8008f7a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	f003 0310 	and.w	r3, r3, #16
 8008fb6:	2b10      	cmp	r3, #16
 8008fb8:	d103      	bne.n	8008fc2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2210      	movs	r2, #16
 8008fc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7fe ffd4 	bl	8007f78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fd0:	e00d      	b.n	8008fee <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7f7 ffac 	bl	8000f30 <HAL_UART_RxCpltCallback>
}
 8008fd8:	e009      	b.n	8008fee <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	8b1b      	ldrh	r3, [r3, #24]
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0208 	orr.w	r2, r2, #8
 8008fea:	b292      	uxth	r2, r2
 8008fec:	831a      	strh	r2, [r3, #24]
}
 8008fee:	bf00      	nop
 8008ff0:	3770      	adds	r7, #112	@ 0x70
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	40008000 	.word	0x40008000

08008ffc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b0ac      	sub	sp, #176	@ 0xb0
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800900a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009032:	2b22      	cmp	r3, #34	@ 0x22
 8009034:	f040 8182 	bne.w	800933c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800903e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009042:	e125      	b.n	8009290 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800904a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800904e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009052:	b2d9      	uxtb	r1, r3
 8009054:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009058:	b2da      	uxtb	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800905e:	400a      	ands	r2, r1
 8009060:	b2d2      	uxtb	r2, r2
 8009062:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009068:	1c5a      	adds	r2, r3, #1
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009074:	b29b      	uxth	r3, r3
 8009076:	3b01      	subs	r3, #1
 8009078:	b29a      	uxth	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	69db      	ldr	r3, [r3, #28]
 8009086:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800908a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	2b00      	cmp	r3, #0
 8009094:	d053      	beq.n	800913e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d011      	beq.n	80090c6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80090a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80090a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00b      	beq.n	80090c6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2201      	movs	r2, #1
 80090b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090bc:	f043 0201 	orr.w	r2, r3, #1
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090ca:	f003 0302 	and.w	r3, r3, #2
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d011      	beq.n	80090f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80090d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00b      	beq.n	80090f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2202      	movs	r2, #2
 80090e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ec:	f043 0204 	orr.w	r2, r3, #4
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090fa:	f003 0304 	and.w	r3, r3, #4
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d011      	beq.n	8009126 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00b      	beq.n	8009126 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2204      	movs	r2, #4
 8009114:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800911c:	f043 0202 	orr.w	r2, r3, #2
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800912c:	2b00      	cmp	r3, #0
 800912e:	d006      	beq.n	800913e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7fe ff17 	bl	8007f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009144:	b29b      	uxth	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	f040 80a2 	bne.w	8009290 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009152:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009154:	e853 3f00 	ldrex	r3, [r3]
 8009158:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800915a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800915c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	461a      	mov	r2, r3
 800916a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800916e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009170:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009174:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800917c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e4      	bne.n	800914c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3308      	adds	r3, #8
 8009188:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009192:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009194:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009198:	f023 0301 	bic.w	r3, r3, #1
 800919c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3308      	adds	r3, #8
 80091a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80091aa:	66ba      	str	r2, [r7, #104]	@ 0x68
 80091ac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80091b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80091b2:	e841 2300 	strex	r3, r2, [r1]
 80091b6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80091b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e1      	bne.n	8009182 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2220      	movs	r2, #32
 80091c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a60      	ldr	r2, [pc, #384]	@ (8009358 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d021      	beq.n	8009220 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d01a      	beq.n	8009220 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091f2:	e853 3f00 	ldrex	r3, [r3]
 80091f6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80091f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800920c:	657b      	str	r3, [r7, #84]	@ 0x54
 800920e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009212:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009214:	e841 2300 	strex	r3, r2, [r1]
 8009218:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800921a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e4      	bne.n	80091ea <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009224:	2b01      	cmp	r3, #1
 8009226:	d130      	bne.n	800928a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009236:	e853 3f00 	ldrex	r3, [r3]
 800923a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800923c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923e:	f023 0310 	bic.w	r3, r3, #16
 8009242:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009250:	643b      	str	r3, [r7, #64]	@ 0x40
 8009252:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009256:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800925e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e4      	bne.n	800922e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	f003 0310 	and.w	r3, r3, #16
 800926e:	2b10      	cmp	r3, #16
 8009270:	d103      	bne.n	800927a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2210      	movs	r2, #16
 8009278:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7fe fe78 	bl	8007f78 <HAL_UARTEx_RxEventCallback>
 8009288:	e002      	b.n	8009290 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7f7 fe50 	bl	8000f30 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009290:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009294:	2b00      	cmp	r3, #0
 8009296:	d006      	beq.n	80092a6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800929c:	f003 0320 	and.w	r3, r3, #32
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f47f aecf 	bne.w	8009044 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80092b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d04b      	beq.n	8009350 <UART_RxISR_8BIT_FIFOEN+0x354>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80092be:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d244      	bcs.n	8009350 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3308      	adds	r3, #8
 80092cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6a3b      	ldr	r3, [r7, #32]
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3308      	adds	r3, #8
 80092e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80092ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e3      	bne.n	80092c6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a16      	ldr	r2, [pc, #88]	@ (800935c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009302:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	60bb      	str	r3, [r7, #8]
   return(result);
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	f043 0320 	orr.w	r3, r3, #32
 8009318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	461a      	mov	r2, r3
 8009322:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009326:	61bb      	str	r3, [r7, #24]
 8009328:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	6979      	ldr	r1, [r7, #20]
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	613b      	str	r3, [r7, #16]
   return(result);
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e4      	bne.n	8009304 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800933a:	e009      	b.n	8009350 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	8b1b      	ldrh	r3, [r3, #24]
 8009342:	b29a      	uxth	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f042 0208 	orr.w	r2, r2, #8
 800934c:	b292      	uxth	r2, r2
 800934e:	831a      	strh	r2, [r3, #24]
}
 8009350:	bf00      	nop
 8009352:	37b0      	adds	r7, #176	@ 0xb0
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	40008000 	.word	0x40008000
 800935c:	08008c85 	.word	0x08008c85

08009360 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b0ae      	sub	sp, #184	@ 0xb8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800936e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009396:	2b22      	cmp	r3, #34	@ 0x22
 8009398:	f040 8186 	bne.w	80096a8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80093a2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093a6:	e129      	b.n	80095fc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80093ae:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80093ba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80093be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80093c2:	4013      	ands	r3, r2
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80093ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093d0:	1c9a      	adds	r2, r3, #2
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093dc:	b29b      	uxth	r3, r3
 80093de:	3b01      	subs	r3, #1
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80093f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093f6:	f003 0307 	and.w	r3, r3, #7
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d053      	beq.n	80094a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	2b00      	cmp	r3, #0
 8009408:	d011      	beq.n	800942e <UART_RxISR_16BIT_FIFOEN+0xce>
 800940a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800940e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00b      	beq.n	800942e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2201      	movs	r2, #1
 800941c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009424:	f043 0201 	orr.w	r2, r3, #1
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800942e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009432:	f003 0302 	and.w	r3, r3, #2
 8009436:	2b00      	cmp	r3, #0
 8009438:	d011      	beq.n	800945e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800943a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00b      	beq.n	800945e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2202      	movs	r2, #2
 800944c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009454:	f043 0204 	orr.w	r2, r3, #4
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800945e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009462:	f003 0304 	and.w	r3, r3, #4
 8009466:	2b00      	cmp	r3, #0
 8009468:	d011      	beq.n	800948e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800946a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00b      	beq.n	800948e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2204      	movs	r2, #4
 800947c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009484:	f043 0202 	orr.w	r2, r3, #2
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009494:	2b00      	cmp	r3, #0
 8009496:	d006      	beq.n	80094a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f7fe fd63 	bl	8007f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f040 80a4 	bne.w	80095fc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094bc:	e853 3f00 	ldrex	r3, [r3]
 80094c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80094c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	461a      	mov	r2, r3
 80094d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094da:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80094de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80094e2:	e841 2300 	strex	r3, r2, [r1]
 80094e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80094e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1e2      	bne.n	80094b4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3308      	adds	r3, #8
 80094f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094f8:	e853 3f00 	ldrex	r3, [r3]
 80094fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80094fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009500:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009504:	f023 0301 	bic.w	r3, r3, #1
 8009508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	3308      	adds	r3, #8
 8009512:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009516:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009518:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800951c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800951e:	e841 2300 	strex	r3, r2, [r1]
 8009522:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009524:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1e1      	bne.n	80094ee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2220      	movs	r2, #32
 800952e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a60      	ldr	r2, [pc, #384]	@ (80096c4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d021      	beq.n	800958c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d01a      	beq.n	800958c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800955e:	e853 3f00 	ldrex	r3, [r3]
 8009562:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009566:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800956a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009578:	65bb      	str	r3, [r7, #88]	@ 0x58
 800957a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800957e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009580:	e841 2300 	strex	r3, r2, [r1]
 8009584:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e4      	bne.n	8009556 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009590:	2b01      	cmp	r3, #1
 8009592:	d130      	bne.n	80095f6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095aa:	f023 0310 	bic.w	r3, r3, #16
 80095ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80095bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80095be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095c4:	e841 2300 	strex	r3, r2, [r1]
 80095c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1e4      	bne.n	800959a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	f003 0310 	and.w	r3, r3, #16
 80095da:	2b10      	cmp	r3, #16
 80095dc:	d103      	bne.n	80095e6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2210      	movs	r2, #16
 80095e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7fe fcc2 	bl	8007f78 <HAL_UARTEx_RxEventCallback>
 80095f4:	e002      	b.n	80095fc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7f7 fc9a 	bl	8000f30 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095fc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009600:	2b00      	cmp	r3, #0
 8009602:	d006      	beq.n	8009612 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009604:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009608:	f003 0320 	and.w	r3, r3, #32
 800960c:	2b00      	cmp	r3, #0
 800960e:	f47f aecb 	bne.w	80093a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009618:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800961c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009620:	2b00      	cmp	r3, #0
 8009622:	d04b      	beq.n	80096bc <UART_RxISR_16BIT_FIFOEN+0x35c>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800962a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800962e:	429a      	cmp	r2, r3
 8009630:	d244      	bcs.n	80096bc <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3308      	adds	r3, #8
 8009638:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963c:	e853 3f00 	ldrex	r3, [r3]
 8009640:	623b      	str	r3, [r7, #32]
   return(result);
 8009642:	6a3b      	ldr	r3, [r7, #32]
 8009644:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3308      	adds	r3, #8
 8009652:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009656:	633a      	str	r2, [r7, #48]	@ 0x30
 8009658:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800965c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e3      	bne.n	8009632 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a16      	ldr	r2, [pc, #88]	@ (80096c8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800966e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	e853 3f00 	ldrex	r3, [r3]
 800967c:	60fb      	str	r3, [r7, #12]
   return(result);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f043 0320 	orr.w	r3, r3, #32
 8009684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	461a      	mov	r2, r3
 800968e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009692:	61fb      	str	r3, [r7, #28]
 8009694:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009696:	69b9      	ldr	r1, [r7, #24]
 8009698:	69fa      	ldr	r2, [r7, #28]
 800969a:	e841 2300 	strex	r3, r2, [r1]
 800969e:	617b      	str	r3, [r7, #20]
   return(result);
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1e4      	bne.n	8009670 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096a6:	e009      	b.n	80096bc <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	8b1b      	ldrh	r3, [r3, #24]
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f042 0208 	orr.w	r2, r2, #8
 80096b8:	b292      	uxth	r2, r2
 80096ba:	831a      	strh	r2, [r3, #24]
}
 80096bc:	bf00      	nop
 80096be:	37b8      	adds	r7, #184	@ 0xb8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	40008000 	.word	0x40008000
 80096c8:	08008e41 	.word	0x08008e41

080096cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009716:	2b01      	cmp	r3, #1
 8009718:	d101      	bne.n	800971e <HAL_UARTEx_DisableFifoMode+0x16>
 800971a:	2302      	movs	r3, #2
 800971c:	e027      	b.n	800976e <HAL_UARTEx_DisableFifoMode+0x66>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2224      	movs	r2, #36	@ 0x24
 800972a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f022 0201 	bic.w	r2, r2, #1
 8009744:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800974c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2220      	movs	r2, #32
 8009760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800978a:	2b01      	cmp	r3, #1
 800978c:	d101      	bne.n	8009792 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800978e:	2302      	movs	r3, #2
 8009790:	e02d      	b.n	80097ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2224      	movs	r2, #36	@ 0x24
 800979e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f022 0201 	bic.w	r2, r2, #1
 80097b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f850 	bl	8009874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2220      	movs	r2, #32
 80097e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009806:	2b01      	cmp	r3, #1
 8009808:	d101      	bne.n	800980e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800980a:	2302      	movs	r3, #2
 800980c:	e02d      	b.n	800986a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2224      	movs	r2, #36	@ 0x24
 800981a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 0201 	bic.w	r2, r2, #1
 8009834:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	683a      	ldr	r2, [r7, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f812 	bl	8009874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2220      	movs	r2, #32
 800985c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
	...

08009874 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009880:	2b00      	cmp	r3, #0
 8009882:	d108      	bne.n	8009896 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009894:	e031      	b.n	80098fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009896:	2308      	movs	r3, #8
 8009898:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800989a:	2308      	movs	r3, #8
 800989c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	0e5b      	lsrs	r3, r3, #25
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	f003 0307 	and.w	r3, r3, #7
 80098ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	0f5b      	lsrs	r3, r3, #29
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	f003 0307 	and.w	r3, r3, #7
 80098bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	7b3a      	ldrb	r2, [r7, #12]
 80098c2:	4911      	ldr	r1, [pc, #68]	@ (8009908 <UARTEx_SetNbDataToProcess+0x94>)
 80098c4:	5c8a      	ldrb	r2, [r1, r2]
 80098c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098ca:	7b3a      	ldrb	r2, [r7, #12]
 80098cc:	490f      	ldr	r1, [pc, #60]	@ (800990c <UARTEx_SetNbDataToProcess+0x98>)
 80098ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	7b7a      	ldrb	r2, [r7, #13]
 80098e0:	4909      	ldr	r1, [pc, #36]	@ (8009908 <UARTEx_SetNbDataToProcess+0x94>)
 80098e2:	5c8a      	ldrb	r2, [r1, r2]
 80098e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098e8:	7b7a      	ldrb	r2, [r7, #13]
 80098ea:	4908      	ldr	r1, [pc, #32]	@ (800990c <UARTEx_SetNbDataToProcess+0x98>)
 80098ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	0800dbb0 	.word	0x0800dbb0
 800990c:	0800dbb8 	.word	0x0800dbb8

08009910 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009910:	b084      	sub	sp, #16
 8009912:	b580      	push	{r7, lr}
 8009914:	b084      	sub	sp, #16
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	f107 001c 	add.w	r0, r7, #28
 800991e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f001 fa1c 	bl	800ad6c <USB_CoreReset>
 8009934:	4603      	mov	r3, r0
 8009936:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800993a:	2b00      	cmp	r3, #0
 800993c:	d106      	bne.n	800994c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009942:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	639a      	str	r2, [r3, #56]	@ 0x38
 800994a:	e005      	b.n	8009958 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009950:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8009958:	7bfb      	ldrb	r3, [r7, #15]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009964:	b004      	add	sp, #16
 8009966:	4770      	bx	lr

08009968 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	4613      	mov	r3, r2
 8009974:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009976:	79fb      	ldrb	r3, [r7, #7]
 8009978:	2b02      	cmp	r3, #2
 800997a:	d165      	bne.n	8009a48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	4a3e      	ldr	r2, [pc, #248]	@ (8009a78 <USB_SetTurnaroundTime+0x110>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d906      	bls.n	8009992 <USB_SetTurnaroundTime+0x2a>
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	4a3d      	ldr	r2, [pc, #244]	@ (8009a7c <USB_SetTurnaroundTime+0x114>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d202      	bcs.n	8009992 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800998c:	230f      	movs	r3, #15
 800998e:	617b      	str	r3, [r7, #20]
 8009990:	e05c      	b.n	8009a4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	4a39      	ldr	r2, [pc, #228]	@ (8009a7c <USB_SetTurnaroundTime+0x114>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d306      	bcc.n	80099a8 <USB_SetTurnaroundTime+0x40>
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	4a38      	ldr	r2, [pc, #224]	@ (8009a80 <USB_SetTurnaroundTime+0x118>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d202      	bcs.n	80099a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80099a2:	230e      	movs	r3, #14
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	e051      	b.n	8009a4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	4a35      	ldr	r2, [pc, #212]	@ (8009a80 <USB_SetTurnaroundTime+0x118>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d306      	bcc.n	80099be <USB_SetTurnaroundTime+0x56>
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	4a34      	ldr	r2, [pc, #208]	@ (8009a84 <USB_SetTurnaroundTime+0x11c>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d202      	bcs.n	80099be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80099b8:	230d      	movs	r3, #13
 80099ba:	617b      	str	r3, [r7, #20]
 80099bc:	e046      	b.n	8009a4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	4a30      	ldr	r2, [pc, #192]	@ (8009a84 <USB_SetTurnaroundTime+0x11c>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d306      	bcc.n	80099d4 <USB_SetTurnaroundTime+0x6c>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	4a2f      	ldr	r2, [pc, #188]	@ (8009a88 <USB_SetTurnaroundTime+0x120>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d802      	bhi.n	80099d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80099ce:	230c      	movs	r3, #12
 80099d0:	617b      	str	r3, [r7, #20]
 80099d2:	e03b      	b.n	8009a4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	4a2c      	ldr	r2, [pc, #176]	@ (8009a88 <USB_SetTurnaroundTime+0x120>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d906      	bls.n	80099ea <USB_SetTurnaroundTime+0x82>
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	4a2b      	ldr	r2, [pc, #172]	@ (8009a8c <USB_SetTurnaroundTime+0x124>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d802      	bhi.n	80099ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80099e4:	230b      	movs	r3, #11
 80099e6:	617b      	str	r3, [r7, #20]
 80099e8:	e030      	b.n	8009a4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	4a27      	ldr	r2, [pc, #156]	@ (8009a8c <USB_SetTurnaroundTime+0x124>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d906      	bls.n	8009a00 <USB_SetTurnaroundTime+0x98>
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	4a26      	ldr	r2, [pc, #152]	@ (8009a90 <USB_SetTurnaroundTime+0x128>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d802      	bhi.n	8009a00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80099fa:	230a      	movs	r3, #10
 80099fc:	617b      	str	r3, [r7, #20]
 80099fe:	e025      	b.n	8009a4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	4a23      	ldr	r2, [pc, #140]	@ (8009a90 <USB_SetTurnaroundTime+0x128>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d906      	bls.n	8009a16 <USB_SetTurnaroundTime+0xae>
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	4a22      	ldr	r2, [pc, #136]	@ (8009a94 <USB_SetTurnaroundTime+0x12c>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d202      	bcs.n	8009a16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009a10:	2309      	movs	r3, #9
 8009a12:	617b      	str	r3, [r7, #20]
 8009a14:	e01a      	b.n	8009a4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	4a1e      	ldr	r2, [pc, #120]	@ (8009a94 <USB_SetTurnaroundTime+0x12c>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d306      	bcc.n	8009a2c <USB_SetTurnaroundTime+0xc4>
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	4a1d      	ldr	r2, [pc, #116]	@ (8009a98 <USB_SetTurnaroundTime+0x130>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d802      	bhi.n	8009a2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009a26:	2308      	movs	r3, #8
 8009a28:	617b      	str	r3, [r7, #20]
 8009a2a:	e00f      	b.n	8009a4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8009a98 <USB_SetTurnaroundTime+0x130>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d906      	bls.n	8009a42 <USB_SetTurnaroundTime+0xda>
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	4a19      	ldr	r2, [pc, #100]	@ (8009a9c <USB_SetTurnaroundTime+0x134>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d202      	bcs.n	8009a42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009a3c:	2307      	movs	r3, #7
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	e004      	b.n	8009a4c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009a42:	2306      	movs	r3, #6
 8009a44:	617b      	str	r3, [r7, #20]
 8009a46:	e001      	b.n	8009a4c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009a48:	2309      	movs	r3, #9
 8009a4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	68da      	ldr	r2, [r3, #12]
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	029b      	lsls	r3, r3, #10
 8009a60:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009a64:	431a      	orrs	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	371c      	adds	r7, #28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr
 8009a78:	00d8acbf 	.word	0x00d8acbf
 8009a7c:	00e4e1c0 	.word	0x00e4e1c0
 8009a80:	00f42400 	.word	0x00f42400
 8009a84:	01067380 	.word	0x01067380
 8009a88:	011a499f 	.word	0x011a499f
 8009a8c:	01312cff 	.word	0x01312cff
 8009a90:	014ca43f 	.word	0x014ca43f
 8009a94:	016e3600 	.word	0x016e3600
 8009a98:	01a6ab1f 	.word	0x01a6ab1f
 8009a9c:	01e84800 	.word	0x01e84800

08009aa0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	f043 0201 	orr.w	r2, r3, #1
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b083      	sub	sp, #12
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	f023 0201 	bic.w	r2, r3, #1
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	460b      	mov	r3, r1
 8009aee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009af0:	2300      	movs	r3, #0
 8009af2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d115      	bne.n	8009b32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009b12:	2001      	movs	r0, #1
 8009b14:	f7f7 fff2 	bl	8001afc <HAL_Delay>
      ms++;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f001 f8ab 	bl	800ac7a <USB_GetMode>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d01e      	beq.n	8009b68 <USB_SetCurrentMode+0x84>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2b31      	cmp	r3, #49	@ 0x31
 8009b2e:	d9f0      	bls.n	8009b12 <USB_SetCurrentMode+0x2e>
 8009b30:	e01a      	b.n	8009b68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009b32:	78fb      	ldrb	r3, [r7, #3]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d115      	bne.n	8009b64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009b44:	2001      	movs	r0, #1
 8009b46:	f7f7 ffd9 	bl	8001afc <HAL_Delay>
      ms++;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f001 f892 	bl	800ac7a <USB_GetMode>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d005      	beq.n	8009b68 <USB_SetCurrentMode+0x84>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2b31      	cmp	r3, #49	@ 0x31
 8009b60:	d9f0      	bls.n	8009b44 <USB_SetCurrentMode+0x60>
 8009b62:	e001      	b.n	8009b68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e005      	b.n	8009b74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b32      	cmp	r3, #50	@ 0x32
 8009b6c:	d101      	bne.n	8009b72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e000      	b.n	8009b74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b7c:	b084      	sub	sp, #16
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b086      	sub	sp, #24
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b96:	2300      	movs	r3, #0
 8009b98:	613b      	str	r3, [r7, #16]
 8009b9a:	e009      	b.n	8009bb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	3340      	adds	r3, #64	@ 0x40
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	3301      	adds	r3, #1
 8009bae:	613b      	str	r3, [r7, #16]
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	2b0e      	cmp	r3, #14
 8009bb4:	d9f2      	bls.n	8009b9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d11c      	bne.n	8009bf6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bca:	f043 0302 	orr.w	r3, r3, #2
 8009bce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	601a      	str	r2, [r3, #0]
 8009bf4:	e005      	b.n	8009c02 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bfa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c08:	461a      	mov	r2, r3
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009c0e:	2103      	movs	r1, #3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f959 	bl	8009ec8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009c16:	2110      	movs	r1, #16
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f8f1 	bl	8009e00 <USB_FlushTxFifo>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d001      	beq.n	8009c28 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f91d 	bl	8009e68 <USB_FlushRxFifo>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c3e:	461a      	mov	r2, r3
 8009c40:	2300      	movs	r3, #0
 8009c42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c56:	461a      	mov	r2, r3
 8009c58:	2300      	movs	r3, #0
 8009c5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	613b      	str	r3, [r7, #16]
 8009c60:	e043      	b.n	8009cea <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	015a      	lsls	r2, r3, #5
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	4413      	add	r3, r2
 8009c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c78:	d118      	bne.n	8009cac <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10a      	bne.n	8009c96 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009c92:	6013      	str	r3, [r2, #0]
 8009c94:	e013      	b.n	8009cbe <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	015a      	lsls	r2, r3, #5
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009ca8:	6013      	str	r3, [r2, #0]
 8009caa:	e008      	b.n	8009cbe <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cb8:	461a      	mov	r2, r3
 8009cba:	2300      	movs	r3, #0
 8009cbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	015a      	lsls	r2, r3, #5
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cca:	461a      	mov	r2, r3
 8009ccc:	2300      	movs	r3, #0
 8009cce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cdc:	461a      	mov	r2, r3
 8009cde:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009ce2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	613b      	str	r3, [r7, #16]
 8009cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d3b7      	bcc.n	8009c62 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	613b      	str	r3, [r7, #16]
 8009cf6:	e043      	b.n	8009d80 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d0e:	d118      	bne.n	8009d42 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10a      	bne.n	8009d2c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d22:	461a      	mov	r2, r3
 8009d24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d28:	6013      	str	r3, [r2, #0]
 8009d2a:	e013      	b.n	8009d54 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d38:	461a      	mov	r2, r3
 8009d3a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	e008      	b.n	8009d54 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	015a      	lsls	r2, r3, #5
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d4e:	461a      	mov	r2, r3
 8009d50:	2300      	movs	r3, #0
 8009d52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	015a      	lsls	r2, r3, #5
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d60:	461a      	mov	r2, r3
 8009d62:	2300      	movs	r3, #0
 8009d64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	015a      	lsls	r2, r3, #5
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d72:	461a      	mov	r2, r3
 8009d74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009d78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	613b      	str	r3, [r7, #16]
 8009d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d3b7      	bcc.n	8009cf8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009da8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	f043 0210 	orr.w	r2, r3, #16
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	699a      	ldr	r2, [r3, #24]
 8009dba:	4b10      	ldr	r3, [pc, #64]	@ (8009dfc <USB_DevInit+0x280>)
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d005      	beq.n	8009dd4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	699b      	ldr	r3, [r3, #24]
 8009dcc:	f043 0208 	orr.w	r2, r3, #8
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d107      	bne.n	8009dea <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009de2:	f043 0304 	orr.w	r3, r3, #4
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009df6:	b004      	add	sp, #16
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	803c3800 	.word	0x803c3800

08009e00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	3301      	adds	r3, #1
 8009e12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	4a13      	ldr	r2, [pc, #76]	@ (8009e64 <USB_FlushTxFifo+0x64>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d901      	bls.n	8009e20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e01b      	b.n	8009e58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	daf2      	bge.n	8009e0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	019b      	lsls	r3, r3, #6
 8009e30:	f043 0220 	orr.w	r2, r3, #32
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	4a08      	ldr	r2, [pc, #32]	@ (8009e64 <USB_FlushTxFifo+0x64>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d901      	bls.n	8009e4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009e46:	2303      	movs	r3, #3
 8009e48:	e006      	b.n	8009e58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	f003 0320 	and.w	r3, r3, #32
 8009e52:	2b20      	cmp	r3, #32
 8009e54:	d0f0      	beq.n	8009e38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	00030d40 	.word	0x00030d40

08009e68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e70:	2300      	movs	r3, #0
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	3301      	adds	r3, #1
 8009e78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	4a11      	ldr	r2, [pc, #68]	@ (8009ec4 <USB_FlushRxFifo+0x5c>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d901      	bls.n	8009e86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e018      	b.n	8009eb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	daf2      	bge.n	8009e74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2210      	movs	r2, #16
 8009e96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	4a08      	ldr	r2, [pc, #32]	@ (8009ec4 <USB_FlushRxFifo+0x5c>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d901      	bls.n	8009eaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e006      	b.n	8009eb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	f003 0310 	and.w	r3, r3, #16
 8009eb2:	2b10      	cmp	r3, #16
 8009eb4:	d0f0      	beq.n	8009e98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	00030d40 	.word	0x00030d40

08009ec8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	78fb      	ldrb	r3, [r7, #3]
 8009ee2:	68f9      	ldr	r1, [r7, #12]
 8009ee4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b087      	sub	sp, #28
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f003 0306 	and.w	r3, r3, #6
 8009f12:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d002      	beq.n	8009f20 <USB_GetDevSpeed+0x26>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2b06      	cmp	r3, #6
 8009f1e:	d102      	bne.n	8009f26 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009f20:	2302      	movs	r3, #2
 8009f22:	75fb      	strb	r3, [r7, #23]
 8009f24:	e001      	b.n	8009f2a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009f26:	230f      	movs	r3, #15
 8009f28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	371c      	adds	r7, #28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	785b      	ldrb	r3, [r3, #1]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d13a      	bne.n	8009fca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f5a:	69da      	ldr	r2, [r3, #28]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	f003 030f 	and.w	r3, r3, #15
 8009f64:	2101      	movs	r1, #1
 8009f66:	fa01 f303 	lsl.w	r3, r1, r3
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	68f9      	ldr	r1, [r7, #12]
 8009f6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f72:	4313      	orrs	r3, r2
 8009f74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	015a      	lsls	r2, r3, #5
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d155      	bne.n	800a038 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	015a      	lsls	r2, r3, #5
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	4413      	add	r3, r2
 8009f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	791b      	ldrb	r3, [r3, #4]
 8009fa6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009fa8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	059b      	lsls	r3, r3, #22
 8009fae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	0151      	lsls	r1, r2, #5
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	440a      	add	r2, r1
 8009fba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fc6:	6013      	str	r3, [r2, #0]
 8009fc8:	e036      	b.n	800a038 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fd0:	69da      	ldr	r2, [r3, #28]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	f003 030f 	and.w	r3, r3, #15
 8009fda:	2101      	movs	r1, #1
 8009fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8009fe0:	041b      	lsls	r3, r3, #16
 8009fe2:	68f9      	ldr	r1, [r7, #12]
 8009fe4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d11a      	bne.n	800a038 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	015a      	lsls	r2, r3, #5
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	4413      	add	r3, r2
 800a00a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	791b      	ldrb	r3, [r3, #4]
 800a01c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a01e:	430b      	orrs	r3, r1
 800a020:	4313      	orrs	r3, r2
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	0151      	lsls	r1, r2, #5
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	440a      	add	r2, r1
 800a02a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a02e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a036:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
	...

0800a048 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	785b      	ldrb	r3, [r3, #1]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d161      	bne.n	800a128 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a076:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a07a:	d11f      	bne.n	800a0bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	4413      	add	r3, r2
 800a084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	0151      	lsls	r1, r2, #5
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	440a      	add	r2, r1
 800a092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a096:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a09a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	0151      	lsls	r1, r2, #5
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	440a      	add	r2, r1
 800a0b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	f003 030f 	and.w	r3, r3, #15
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	43db      	mvns	r3, r3
 800a0d6:	68f9      	ldr	r1, [r7, #12]
 800a0d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0dc:	4013      	ands	r3, r2
 800a0de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0e6:	69da      	ldr	r2, [r3, #28]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	f003 030f 	and.w	r3, r3, #15
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	43db      	mvns	r3, r3
 800a0fa:	68f9      	ldr	r1, [r7, #12]
 800a0fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a100:	4013      	ands	r3, r2
 800a102:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	015a      	lsls	r2, r3, #5
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	4413      	add	r3, r2
 800a10c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	0159      	lsls	r1, r3, #5
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	440b      	add	r3, r1
 800a11a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a11e:	4619      	mov	r1, r3
 800a120:	4b35      	ldr	r3, [pc, #212]	@ (800a1f8 <USB_DeactivateEndpoint+0x1b0>)
 800a122:	4013      	ands	r3, r2
 800a124:	600b      	str	r3, [r1, #0]
 800a126:	e060      	b.n	800a1ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	015a      	lsls	r2, r3, #5
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4413      	add	r3, r2
 800a130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a13a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a13e:	d11f      	bne.n	800a180 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	015a      	lsls	r2, r3, #5
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	4413      	add	r3, r2
 800a148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	0151      	lsls	r1, r2, #5
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	440a      	add	r2, r1
 800a156:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a15a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a15e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	015a      	lsls	r2, r3, #5
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	4413      	add	r3, r2
 800a168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	0151      	lsls	r1, r2, #5
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	440a      	add	r2, r1
 800a176:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a17a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a17e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a186:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	f003 030f 	and.w	r3, r3, #15
 800a190:	2101      	movs	r1, #1
 800a192:	fa01 f303 	lsl.w	r3, r1, r3
 800a196:	041b      	lsls	r3, r3, #16
 800a198:	43db      	mvns	r3, r3
 800a19a:	68f9      	ldr	r1, [r7, #12]
 800a19c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1aa:	69da      	ldr	r2, [r3, #28]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	f003 030f 	and.w	r3, r3, #15
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ba:	041b      	lsls	r3, r3, #16
 800a1bc:	43db      	mvns	r3, r3
 800a1be:	68f9      	ldr	r1, [r7, #12]
 800a1c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	0159      	lsls	r1, r3, #5
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	440b      	add	r3, r1
 800a1de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	4b05      	ldr	r3, [pc, #20]	@ (800a1fc <USB_DeactivateEndpoint+0x1b4>)
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	ec337800 	.word	0xec337800
 800a1fc:	eff37800 	.word	0xeff37800

0800a200 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	785b      	ldrb	r3, [r3, #1]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	f040 8128 	bne.w	800a46e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d132      	bne.n	800a28c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	015a      	lsls	r2, r3, #5
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	4413      	add	r3, r2
 800a22e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	0151      	lsls	r1, r2, #5
 800a238:	697a      	ldr	r2, [r7, #20]
 800a23a:	440a      	add	r2, r1
 800a23c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a240:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a244:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a248:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	015a      	lsls	r2, r3, #5
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	4413      	add	r3, r2
 800a252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	0151      	lsls	r1, r2, #5
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	440a      	add	r2, r1
 800a260:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a264:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a268:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	0151      	lsls	r1, r2, #5
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	440a      	add	r2, r1
 800a280:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a284:	0cdb      	lsrs	r3, r3, #19
 800a286:	04db      	lsls	r3, r3, #19
 800a288:	6113      	str	r3, [r2, #16]
 800a28a:	e092      	b.n	800a3b2 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	0151      	lsls	r1, r2, #5
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2a6:	0cdb      	lsrs	r3, r3, #19
 800a2a8:	04db      	lsls	r3, r3, #19
 800a2aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	0151      	lsls	r1, r2, #5
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	440a      	add	r2, r1
 800a2c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2c6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a2ca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a2ce:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d11a      	bne.n	800a30c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	691a      	ldr	r2, [r3, #16]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d903      	bls.n	800a2ea <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	689a      	ldr	r2, [r3, #8]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	015a      	lsls	r2, r3, #5
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	0151      	lsls	r1, r2, #5
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	440a      	add	r2, r1
 800a300:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a304:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a308:	6113      	str	r3, [r2, #16]
 800a30a:	e01b      	b.n	800a344 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	015a      	lsls	r2, r3, #5
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	4413      	add	r3, r2
 800a314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a318:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	6919      	ldr	r1, [r3, #16]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	440b      	add	r3, r1
 800a324:	1e59      	subs	r1, r3, #1
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a32e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a330:	4b8d      	ldr	r3, [pc, #564]	@ (800a568 <USB_EPStartXfer+0x368>)
 800a332:	400b      	ands	r3, r1
 800a334:	6939      	ldr	r1, [r7, #16]
 800a336:	0148      	lsls	r0, r1, #5
 800a338:	6979      	ldr	r1, [r7, #20]
 800a33a:	4401      	add	r1, r0
 800a33c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a340:	4313      	orrs	r3, r2
 800a342:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	015a      	lsls	r2, r3, #5
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	4413      	add	r3, r2
 800a34c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a350:	691a      	ldr	r2, [r3, #16]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a35a:	6939      	ldr	r1, [r7, #16]
 800a35c:	0148      	lsls	r0, r1, #5
 800a35e:	6979      	ldr	r1, [r7, #20]
 800a360:	4401      	add	r1, r0
 800a362:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a366:	4313      	orrs	r3, r2
 800a368:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	791b      	ldrb	r3, [r3, #4]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d11f      	bne.n	800a3b2 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	015a      	lsls	r2, r3, #5
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	4413      	add	r3, r2
 800a37a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a37e:	691b      	ldr	r3, [r3, #16]
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	0151      	lsls	r1, r2, #5
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	440a      	add	r2, r1
 800a388:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a38c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a390:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	015a      	lsls	r2, r3, #5
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	4413      	add	r3, r2
 800a39a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	0151      	lsls	r1, r2, #5
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	440a      	add	r2, r1
 800a3a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3b0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	015a      	lsls	r2, r3, #5
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	0151      	lsls	r1, r2, #5
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	440a      	add	r2, r1
 800a3c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3cc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a3d0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	791b      	ldrb	r3, [r3, #4]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d015      	beq.n	800a406 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f000 8139 	beq.w	800a656 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	f003 030f 	and.w	r3, r3, #15
 800a3f4:	2101      	movs	r1, #1
 800a3f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a3fa:	6979      	ldr	r1, [r7, #20]
 800a3fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a400:	4313      	orrs	r3, r2
 800a402:	634b      	str	r3, [r1, #52]	@ 0x34
 800a404:	e127      	b.n	800a656 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a412:	2b00      	cmp	r3, #0
 800a414:	d110      	bne.n	800a438 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	015a      	lsls	r2, r3, #5
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	4413      	add	r3, r2
 800a41e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	0151      	lsls	r1, r2, #5
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	440a      	add	r2, r1
 800a42c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a430:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a434:	6013      	str	r3, [r2, #0]
 800a436:	e00f      	b.n	800a458 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	015a      	lsls	r2, r3, #5
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	4413      	add	r3, r2
 800a440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	693a      	ldr	r2, [r7, #16]
 800a448:	0151      	lsls	r1, r2, #5
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	440a      	add	r2, r1
 800a44e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a456:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	68d9      	ldr	r1, [r3, #12]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	781a      	ldrb	r2, [r3, #0]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	b29b      	uxth	r3, r3
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f9a6 	bl	800a7b8 <USB_WritePacket>
 800a46c:	e0f3      	b.n	800a656 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	4413      	add	r3, r2
 800a476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	0151      	lsls	r1, r2, #5
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	440a      	add	r2, r1
 800a484:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a488:	0cdb      	lsrs	r3, r3, #19
 800a48a:	04db      	lsls	r3, r3, #19
 800a48c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	4413      	add	r3, r2
 800a496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	0151      	lsls	r1, r2, #5
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	440a      	add	r2, r1
 800a4a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4a8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a4ac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a4b0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d12f      	bne.n	800a518 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d003      	beq.n	800a4c8 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	689a      	ldr	r2, [r3, #8]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4dc:	691a      	ldr	r2, [r3, #16]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4e6:	6939      	ldr	r1, [r7, #16]
 800a4e8:	0148      	lsls	r0, r1, #5
 800a4ea:	6979      	ldr	r1, [r7, #20]
 800a4ec:	4401      	add	r1, r0
 800a4ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a502:	691b      	ldr	r3, [r3, #16]
 800a504:	693a      	ldr	r2, [r7, #16]
 800a506:	0151      	lsls	r1, r2, #5
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	440a      	add	r2, r1
 800a50c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a510:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a514:	6113      	str	r3, [r2, #16]
 800a516:	e061      	b.n	800a5dc <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d125      	bne.n	800a56c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	015a      	lsls	r2, r3, #5
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	4413      	add	r3, r2
 800a528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a52c:	691a      	ldr	r2, [r3, #16]
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a536:	6939      	ldr	r1, [r7, #16]
 800a538:	0148      	lsls	r0, r1, #5
 800a53a:	6979      	ldr	r1, [r7, #20]
 800a53c:	4401      	add	r1, r0
 800a53e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a542:	4313      	orrs	r3, r2
 800a544:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	015a      	lsls	r2, r3, #5
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	4413      	add	r3, r2
 800a54e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	0151      	lsls	r1, r2, #5
 800a558:	697a      	ldr	r2, [r7, #20]
 800a55a:	440a      	add	r2, r1
 800a55c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a560:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a564:	6113      	str	r3, [r2, #16]
 800a566:	e039      	b.n	800a5dc <USB_EPStartXfer+0x3dc>
 800a568:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	691a      	ldr	r2, [r3, #16]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	4413      	add	r3, r2
 800a576:	1e5a      	subs	r2, r3, #1
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a580:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	89fa      	ldrh	r2, [r7, #14]
 800a588:	fb03 f202 	mul.w	r2, r3, r2
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a59c:	691a      	ldr	r2, [r3, #16]
 800a59e:	89fb      	ldrh	r3, [r7, #14]
 800a5a0:	04d9      	lsls	r1, r3, #19
 800a5a2:	4b2f      	ldr	r3, [pc, #188]	@ (800a660 <USB_EPStartXfer+0x460>)
 800a5a4:	400b      	ands	r3, r1
 800a5a6:	6939      	ldr	r1, [r7, #16]
 800a5a8:	0148      	lsls	r0, r1, #5
 800a5aa:	6979      	ldr	r1, [r7, #20]
 800a5ac:	4401      	add	r1, r0
 800a5ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	015a      	lsls	r2, r3, #5
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	4413      	add	r3, r2
 800a5be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5c2:	691a      	ldr	r2, [r3, #16]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	6a1b      	ldr	r3, [r3, #32]
 800a5c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5cc:	6939      	ldr	r1, [r7, #16]
 800a5ce:	0148      	lsls	r0, r1, #5
 800a5d0:	6979      	ldr	r1, [r7, #20]
 800a5d2:	4401      	add	r1, r0
 800a5d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	791b      	ldrb	r3, [r3, #4]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d128      	bne.n	800a636 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d110      	bne.n	800a616 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	693a      	ldr	r2, [r7, #16]
 800a604:	0151      	lsls	r1, r2, #5
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	440a      	add	r2, r1
 800a60a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a60e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a612:	6013      	str	r3, [r2, #0]
 800a614:	e00f      	b.n	800a636 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	015a      	lsls	r2, r3, #5
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	4413      	add	r3, r2
 800a61e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	0151      	lsls	r1, r2, #5
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	440a      	add	r2, r1
 800a62c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a634:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	015a      	lsls	r2, r3, #5
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	4413      	add	r3, r2
 800a63e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	693a      	ldr	r2, [r7, #16]
 800a646:	0151      	lsls	r1, r2, #5
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	440a      	add	r2, r1
 800a64c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a650:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a654:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3718      	adds	r7, #24
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	1ff80000 	.word	0x1ff80000

0800a664 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a664:	b480      	push	{r7}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a66e:	2300      	movs	r3, #0
 800a670:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	785b      	ldrb	r3, [r3, #1]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d14a      	bne.n	800a718 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	015a      	lsls	r2, r3, #5
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	4413      	add	r3, r2
 800a68c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a696:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a69a:	f040 8086 	bne.w	800a7aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	015a      	lsls	r2, r3, #5
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	7812      	ldrb	r2, [r2, #0]
 800a6b2:	0151      	lsls	r1, r2, #5
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	440a      	add	r2, r1
 800a6b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a6c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	015a      	lsls	r2, r3, #5
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	683a      	ldr	r2, [r7, #0]
 800a6d4:	7812      	ldrb	r2, [r2, #0]
 800a6d6:	0151      	lsls	r1, r2, #5
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	440a      	add	r2, r1
 800a6dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a6e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d902      	bls.n	800a6fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	75fb      	strb	r3, [r7, #23]
          break;
 800a6fa:	e056      	b.n	800a7aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	015a      	lsls	r2, r3, #5
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	4413      	add	r3, r2
 800a706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a710:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a714:	d0e7      	beq.n	800a6e6 <USB_EPStopXfer+0x82>
 800a716:	e048      	b.n	800a7aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	015a      	lsls	r2, r3, #5
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	4413      	add	r3, r2
 800a722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a72c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a730:	d13b      	bne.n	800a7aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	015a      	lsls	r2, r3, #5
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	7812      	ldrb	r2, [r2, #0]
 800a746:	0151      	lsls	r1, r2, #5
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	440a      	add	r2, r1
 800a74c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a750:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a754:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	7812      	ldrb	r2, [r2, #0]
 800a76a:	0151      	lsls	r1, r2, #5
 800a76c:	693a      	ldr	r2, [r7, #16]
 800a76e:	440a      	add	r2, r1
 800a770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a774:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a778:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3301      	adds	r3, #1
 800a77e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a786:	4293      	cmp	r3, r2
 800a788:	d902      	bls.n	800a790 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	75fb      	strb	r3, [r7, #23]
          break;
 800a78e:	e00c      	b.n	800a7aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7a8:	d0e7      	beq.n	800a77a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a7aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	371c      	adds	r7, #28
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b089      	sub	sp, #36	@ 0x24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	71fb      	strb	r3, [r7, #7]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a7d6:	88bb      	ldrh	r3, [r7, #4]
 800a7d8:	3303      	adds	r3, #3
 800a7da:	089b      	lsrs	r3, r3, #2
 800a7dc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a7de:	2300      	movs	r3, #0
 800a7e0:	61bb      	str	r3, [r7, #24]
 800a7e2:	e018      	b.n	800a816 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a7e4:	79fb      	ldrb	r3, [r7, #7]
 800a7e6:	031a      	lsls	r2, r3, #12
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	3301      	adds	r3, #1
 800a802:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	3301      	adds	r3, #1
 800a808:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	3301      	adds	r3, #1
 800a80e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	3301      	adds	r3, #1
 800a814:	61bb      	str	r3, [r7, #24]
 800a816:	69ba      	ldr	r2, [r7, #24]
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d3e2      	bcc.n	800a7e4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3724      	adds	r7, #36	@ 0x24
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b08b      	sub	sp, #44	@ 0x2c
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	4613      	mov	r3, r2
 800a838:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a842:	88fb      	ldrh	r3, [r7, #6]
 800a844:	089b      	lsrs	r3, r3, #2
 800a846:	b29b      	uxth	r3, r3
 800a848:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a84a:	88fb      	ldrh	r3, [r7, #6]
 800a84c:	f003 0303 	and.w	r3, r3, #3
 800a850:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a852:	2300      	movs	r3, #0
 800a854:	623b      	str	r3, [r7, #32]
 800a856:	e014      	b.n	800a882 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a862:	601a      	str	r2, [r3, #0]
    pDest++;
 800a864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a866:	3301      	adds	r3, #1
 800a868:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86c:	3301      	adds	r3, #1
 800a86e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a872:	3301      	adds	r3, #1
 800a874:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a878:	3301      	adds	r3, #1
 800a87a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a87c:	6a3b      	ldr	r3, [r7, #32]
 800a87e:	3301      	adds	r3, #1
 800a880:	623b      	str	r3, [r7, #32]
 800a882:	6a3a      	ldr	r2, [r7, #32]
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	429a      	cmp	r2, r3
 800a888:	d3e6      	bcc.n	800a858 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a88a:	8bfb      	ldrh	r3, [r7, #30]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d01e      	beq.n	800a8ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a890:	2300      	movs	r3, #0
 800a892:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a89a:	461a      	mov	r2, r3
 800a89c:	f107 0310 	add.w	r3, r7, #16
 800a8a0:	6812      	ldr	r2, [r2, #0]
 800a8a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	6a3b      	ldr	r3, [r7, #32]
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	00db      	lsls	r3, r3, #3
 800a8ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b4:	701a      	strb	r2, [r3, #0]
      i++;
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	623b      	str	r3, [r7, #32]
      pDest++;
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8be:	3301      	adds	r3, #1
 800a8c0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a8c2:	8bfb      	ldrh	r3, [r7, #30]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a8c8:	8bfb      	ldrh	r3, [r7, #30]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1ea      	bne.n	800a8a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	372c      	adds	r7, #44	@ 0x2c
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	785b      	ldrb	r3, [r3, #1]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d12c      	bne.n	800a952 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	015a      	lsls	r2, r3, #5
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	4413      	add	r3, r2
 800a900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	db12      	blt.n	800a930 <USB_EPSetStall+0x54>
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00f      	beq.n	800a930 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	015a      	lsls	r2, r3, #5
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	4413      	add	r3, r2
 800a918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	0151      	lsls	r1, r2, #5
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	440a      	add	r2, r1
 800a926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a92a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a92e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	015a      	lsls	r2, r3, #5
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4413      	add	r3, r2
 800a938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	0151      	lsls	r1, r2, #5
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	440a      	add	r2, r1
 800a946:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a94a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	e02b      	b.n	800a9aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	015a      	lsls	r2, r3, #5
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4413      	add	r3, r2
 800a95a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	db12      	blt.n	800a98a <USB_EPSetStall+0xae>
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00f      	beq.n	800a98a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	015a      	lsls	r2, r3, #5
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4413      	add	r3, r2
 800a972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	0151      	lsls	r1, r2, #5
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	440a      	add	r2, r1
 800a980:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a984:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a988:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	015a      	lsls	r2, r3, #5
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	4413      	add	r3, r2
 800a992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	0151      	lsls	r1, r2, #5
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	440a      	add	r2, r1
 800a9a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a9a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	785b      	ldrb	r3, [r3, #1]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d128      	bne.n	800aa26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	015a      	lsls	r2, r3, #5
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	4413      	add	r3, r2
 800a9dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	0151      	lsls	r1, r2, #5
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	440a      	add	r2, r1
 800a9ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a9f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	791b      	ldrb	r3, [r3, #4]
 800a9f8:	2b03      	cmp	r3, #3
 800a9fa:	d003      	beq.n	800aa04 <USB_EPClearStall+0x4c>
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	791b      	ldrb	r3, [r3, #4]
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d138      	bne.n	800aa76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	0151      	lsls	r1, r2, #5
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	440a      	add	r2, r1
 800aa1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa22:	6013      	str	r3, [r2, #0]
 800aa24:	e027      	b.n	800aa76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	015a      	lsls	r2, r3, #5
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	68ba      	ldr	r2, [r7, #8]
 800aa36:	0151      	lsls	r1, r2, #5
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	440a      	add	r2, r1
 800aa3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aa44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	791b      	ldrb	r3, [r3, #4]
 800aa4a:	2b03      	cmp	r3, #3
 800aa4c:	d003      	beq.n	800aa56 <USB_EPClearStall+0x9e>
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	791b      	ldrb	r3, [r3, #4]
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d10f      	bne.n	800aa76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	015a      	lsls	r2, r3, #5
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	0151      	lsls	r1, r2, #5
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	440a      	add	r2, r1
 800aa6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3714      	adds	r7, #20
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aaa2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800aaa6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	011b      	lsls	r3, r3, #4
 800aab4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800aab8:	68f9      	ldr	r1, [r7, #12]
 800aaba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aabe:	4313      	orrs	r3, r2
 800aac0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aaea:	f023 0303 	bic.w	r3, r3, #3
 800aaee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aafe:	f023 0302 	bic.w	r3, r3, #2
 800ab02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b085      	sub	sp, #20
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab2c:	f023 0303 	bic.w	r3, r3, #3
 800ab30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab40:	f043 0302 	orr.w	r3, r3, #2
 800ab44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	4013      	ands	r3, r2
 800ab6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b085      	sub	sp, #20
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab8c:	699b      	ldr	r3, [r3, #24]
 800ab8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab96:	69db      	ldr	r3, [r3, #28]
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	0c1b      	lsrs	r3, r3, #16
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800abae:	b480      	push	{r7}
 800abb0:	b085      	sub	sp, #20
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abc0:	699b      	ldr	r3, [r3, #24]
 800abc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abca:	69db      	ldr	r3, [r3, #28]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	4013      	ands	r3, r2
 800abd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	b29b      	uxth	r3, r3
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3714      	adds	r7, #20
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800abe2:	b480      	push	{r7}
 800abe4:	b085      	sub	sp, #20
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	460b      	mov	r3, r1
 800abec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800abf2:	78fb      	ldrb	r3, [r7, #3]
 800abf4:	015a      	lsls	r2, r3, #5
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	4413      	add	r3, r2
 800abfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac10:	68bb      	ldr	r3, [r7, #8]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b087      	sub	sp, #28
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	460b      	mov	r3, r1
 800ac28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac42:	78fb      	ldrb	r3, [r7, #3]
 800ac44:	f003 030f 	and.w	r3, r3, #15
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac4e:	01db      	lsls	r3, r3, #7
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	693a      	ldr	r2, [r7, #16]
 800ac54:	4313      	orrs	r3, r2
 800ac56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ac58:	78fb      	ldrb	r3, [r7, #3]
 800ac5a:	015a      	lsls	r2, r3, #5
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	4013      	ands	r3, r2
 800ac6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	371c      	adds	r7, #28
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ac7a:	b480      	push	{r7}
 800ac7c:	b083      	sub	sp, #12
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	f003 0301 	and.w	r3, r3, #1
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b085      	sub	sp, #20
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acb0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800acb4:	f023 0307 	bic.w	r3, r3, #7
 800acb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800accc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3714      	adds	r7, #20
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	333c      	adds	r3, #60	@ 0x3c
 800acee:	3304      	adds	r3, #4
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	4a1c      	ldr	r2, [pc, #112]	@ (800ad68 <USB_EP0_OutStart+0x8c>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d90a      	bls.n	800ad12 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad0c:	d101      	bne.n	800ad12 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	e024      	b.n	800ad5c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad18:	461a      	mov	r2, r3
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad40:	f043 0318 	orr.w	r3, r3, #24
 800ad44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad54:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ad58:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3714      	adds	r7, #20
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	4f54300a 	.word	0x4f54300a

0800ad6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad74:	2300      	movs	r3, #0
 800ad76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	4a13      	ldr	r2, [pc, #76]	@ (800add0 <USB_CoreReset+0x64>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d901      	bls.n	800ad8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad86:	2303      	movs	r3, #3
 800ad88:	e01b      	b.n	800adc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	daf2      	bge.n	800ad78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad92:	2300      	movs	r3, #0
 800ad94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	f043 0201 	orr.w	r2, r3, #1
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	3301      	adds	r3, #1
 800ada6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	4a09      	ldr	r2, [pc, #36]	@ (800add0 <USB_CoreReset+0x64>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d901      	bls.n	800adb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800adb0:	2303      	movs	r3, #3
 800adb2:	e006      	b.n	800adc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	f003 0301 	and.w	r3, r3, #1
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d0f0      	beq.n	800ada2 <USB_CoreReset+0x36>

  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3714      	adds	r7, #20
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	00030d40 	.word	0x00030d40

0800add4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	460b      	mov	r3, r1
 800adde:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ade0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ade4:	f002 fe2c 	bl	800da40 <USBD_static_malloc>
 800ade8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d109      	bne.n	800ae04 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	32b0      	adds	r2, #176	@ 0xb0
 800adfa:	2100      	movs	r1, #0
 800adfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ae00:	2302      	movs	r3, #2
 800ae02:	e0d4      	b.n	800afae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ae04:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ae08:	2100      	movs	r1, #0
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f002 fe36 	bl	800da7c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	32b0      	adds	r2, #176	@ 0xb0
 800ae1a:	68f9      	ldr	r1, [r7, #12]
 800ae1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	32b0      	adds	r2, #176	@ 0xb0
 800ae2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	7c1b      	ldrb	r3, [r3, #16]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d138      	bne.n	800aeae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ae3c:	4b5e      	ldr	r3, [pc, #376]	@ (800afb8 <USBD_CDC_Init+0x1e4>)
 800ae3e:	7819      	ldrb	r1, [r3, #0]
 800ae40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae44:	2202      	movs	r2, #2
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f002 fbe6 	bl	800d618 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ae4c:	4b5a      	ldr	r3, [pc, #360]	@ (800afb8 <USBD_CDC_Init+0x1e4>)
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	f003 020f 	and.w	r2, r3, #15
 800ae54:	6879      	ldr	r1, [r7, #4]
 800ae56:	4613      	mov	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	440b      	add	r3, r1
 800ae60:	3324      	adds	r3, #36	@ 0x24
 800ae62:	2201      	movs	r2, #1
 800ae64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ae66:	4b55      	ldr	r3, [pc, #340]	@ (800afbc <USBD_CDC_Init+0x1e8>)
 800ae68:	7819      	ldrb	r1, [r3, #0]
 800ae6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae6e:	2202      	movs	r2, #2
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f002 fbd1 	bl	800d618 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ae76:	4b51      	ldr	r3, [pc, #324]	@ (800afbc <USBD_CDC_Init+0x1e8>)
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	f003 020f 	and.w	r2, r3, #15
 800ae7e:	6879      	ldr	r1, [r7, #4]
 800ae80:	4613      	mov	r3, r2
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4413      	add	r3, r2
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	440b      	add	r3, r1
 800ae8a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae8e:	2201      	movs	r2, #1
 800ae90:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ae92:	4b4b      	ldr	r3, [pc, #300]	@ (800afc0 <USBD_CDC_Init+0x1ec>)
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	f003 020f 	and.w	r2, r3, #15
 800ae9a:	6879      	ldr	r1, [r7, #4]
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	440b      	add	r3, r1
 800aea6:	3326      	adds	r3, #38	@ 0x26
 800aea8:	2210      	movs	r2, #16
 800aeaa:	801a      	strh	r2, [r3, #0]
 800aeac:	e035      	b.n	800af1a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aeae:	4b42      	ldr	r3, [pc, #264]	@ (800afb8 <USBD_CDC_Init+0x1e4>)
 800aeb0:	7819      	ldrb	r1, [r3, #0]
 800aeb2:	2340      	movs	r3, #64	@ 0x40
 800aeb4:	2202      	movs	r2, #2
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f002 fbae 	bl	800d618 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aebc:	4b3e      	ldr	r3, [pc, #248]	@ (800afb8 <USBD_CDC_Init+0x1e4>)
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	f003 020f 	and.w	r2, r3, #15
 800aec4:	6879      	ldr	r1, [r7, #4]
 800aec6:	4613      	mov	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4413      	add	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	440b      	add	r3, r1
 800aed0:	3324      	adds	r3, #36	@ 0x24
 800aed2:	2201      	movs	r2, #1
 800aed4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aed6:	4b39      	ldr	r3, [pc, #228]	@ (800afbc <USBD_CDC_Init+0x1e8>)
 800aed8:	7819      	ldrb	r1, [r3, #0]
 800aeda:	2340      	movs	r3, #64	@ 0x40
 800aedc:	2202      	movs	r2, #2
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f002 fb9a 	bl	800d618 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aee4:	4b35      	ldr	r3, [pc, #212]	@ (800afbc <USBD_CDC_Init+0x1e8>)
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	f003 020f 	and.w	r2, r3, #15
 800aeec:	6879      	ldr	r1, [r7, #4]
 800aeee:	4613      	mov	r3, r2
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	4413      	add	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	440b      	add	r3, r1
 800aef8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aefc:	2201      	movs	r2, #1
 800aefe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af00:	4b2f      	ldr	r3, [pc, #188]	@ (800afc0 <USBD_CDC_Init+0x1ec>)
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	f003 020f 	and.w	r2, r3, #15
 800af08:	6879      	ldr	r1, [r7, #4]
 800af0a:	4613      	mov	r3, r2
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	4413      	add	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	440b      	add	r3, r1
 800af14:	3326      	adds	r3, #38	@ 0x26
 800af16:	2210      	movs	r2, #16
 800af18:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af1a:	4b29      	ldr	r3, [pc, #164]	@ (800afc0 <USBD_CDC_Init+0x1ec>)
 800af1c:	7819      	ldrb	r1, [r3, #0]
 800af1e:	2308      	movs	r3, #8
 800af20:	2203      	movs	r2, #3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f002 fb78 	bl	800d618 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800af28:	4b25      	ldr	r3, [pc, #148]	@ (800afc0 <USBD_CDC_Init+0x1ec>)
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	f003 020f 	and.w	r2, r3, #15
 800af30:	6879      	ldr	r1, [r7, #4]
 800af32:	4613      	mov	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4413      	add	r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	440b      	add	r3, r1
 800af3c:	3324      	adds	r3, #36	@ 0x24
 800af3e:	2201      	movs	r2, #1
 800af40:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	33b0      	adds	r3, #176	@ 0xb0
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	4413      	add	r3, r2
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2200      	movs	r2, #0
 800af62:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2200      	movs	r2, #0
 800af6a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800af74:	2b00      	cmp	r3, #0
 800af76:	d101      	bne.n	800af7c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800af78:	2302      	movs	r3, #2
 800af7a:	e018      	b.n	800afae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	7c1b      	ldrb	r3, [r3, #16]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10a      	bne.n	800af9a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af84:	4b0d      	ldr	r3, [pc, #52]	@ (800afbc <USBD_CDC_Init+0x1e8>)
 800af86:	7819      	ldrb	r1, [r3, #0]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f002 fcba 	bl	800d90c <USBD_LL_PrepareReceive>
 800af98:	e008      	b.n	800afac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af9a:	4b08      	ldr	r3, [pc, #32]	@ (800afbc <USBD_CDC_Init+0x1e8>)
 800af9c:	7819      	ldrb	r1, [r3, #0]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afa4:	2340      	movs	r3, #64	@ 0x40
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f002 fcb0 	bl	800d90c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	20000093 	.word	0x20000093
 800afbc:	20000094 	.word	0x20000094
 800afc0:	20000095 	.word	0x20000095

0800afc4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	460b      	mov	r3, r1
 800afce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800afd0:	4b3a      	ldr	r3, [pc, #232]	@ (800b0bc <USBD_CDC_DeInit+0xf8>)
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f002 fb5c 	bl	800d694 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800afdc:	4b37      	ldr	r3, [pc, #220]	@ (800b0bc <USBD_CDC_DeInit+0xf8>)
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	f003 020f 	and.w	r2, r3, #15
 800afe4:	6879      	ldr	r1, [r7, #4]
 800afe6:	4613      	mov	r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	4413      	add	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	440b      	add	r3, r1
 800aff0:	3324      	adds	r3, #36	@ 0x24
 800aff2:	2200      	movs	r2, #0
 800aff4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aff6:	4b32      	ldr	r3, [pc, #200]	@ (800b0c0 <USBD_CDC_DeInit+0xfc>)
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	4619      	mov	r1, r3
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f002 fb49 	bl	800d694 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b002:	4b2f      	ldr	r3, [pc, #188]	@ (800b0c0 <USBD_CDC_DeInit+0xfc>)
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	f003 020f 	and.w	r2, r3, #15
 800b00a:	6879      	ldr	r1, [r7, #4]
 800b00c:	4613      	mov	r3, r2
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	4413      	add	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	440b      	add	r3, r1
 800b016:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b01a:	2200      	movs	r2, #0
 800b01c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b01e:	4b29      	ldr	r3, [pc, #164]	@ (800b0c4 <USBD_CDC_DeInit+0x100>)
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f002 fb35 	bl	800d694 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b02a:	4b26      	ldr	r3, [pc, #152]	@ (800b0c4 <USBD_CDC_DeInit+0x100>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	f003 020f 	and.w	r2, r3, #15
 800b032:	6879      	ldr	r1, [r7, #4]
 800b034:	4613      	mov	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4413      	add	r3, r2
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	440b      	add	r3, r1
 800b03e:	3324      	adds	r3, #36	@ 0x24
 800b040:	2200      	movs	r2, #0
 800b042:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b044:	4b1f      	ldr	r3, [pc, #124]	@ (800b0c4 <USBD_CDC_DeInit+0x100>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	f003 020f 	and.w	r2, r3, #15
 800b04c:	6879      	ldr	r1, [r7, #4]
 800b04e:	4613      	mov	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	440b      	add	r3, r1
 800b058:	3326      	adds	r3, #38	@ 0x26
 800b05a:	2200      	movs	r2, #0
 800b05c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	32b0      	adds	r2, #176	@ 0xb0
 800b068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d01f      	beq.n	800b0b0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	33b0      	adds	r3, #176	@ 0xb0
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	4413      	add	r3, r2
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	32b0      	adds	r2, #176	@ 0xb0
 800b08e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b092:	4618      	mov	r0, r3
 800b094:	f002 fce2 	bl	800da5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	32b0      	adds	r2, #176	@ 0xb0
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20000093 	.word	0x20000093
 800b0c0:	20000094 	.word	0x20000094
 800b0c4:	20000095 	.word	0x20000095

0800b0c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	32b0      	adds	r2, #176	@ 0xb0
 800b0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d101      	bne.n	800b0f8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	e0bf      	b.n	800b278 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b100:	2b00      	cmp	r3, #0
 800b102:	d050      	beq.n	800b1a6 <USBD_CDC_Setup+0xde>
 800b104:	2b20      	cmp	r3, #32
 800b106:	f040 80af 	bne.w	800b268 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	88db      	ldrh	r3, [r3, #6]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d03a      	beq.n	800b188 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	b25b      	sxtb	r3, r3
 800b118:	2b00      	cmp	r3, #0
 800b11a:	da1b      	bge.n	800b154 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	33b0      	adds	r3, #176	@ 0xb0
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	4413      	add	r3, r2
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b132:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	88d2      	ldrh	r2, [r2, #6]
 800b138:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	88db      	ldrh	r3, [r3, #6]
 800b13e:	2b07      	cmp	r3, #7
 800b140:	bf28      	it	cs
 800b142:	2307      	movcs	r3, #7
 800b144:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	89fa      	ldrh	r2, [r7, #14]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f001 fdb1 	bl	800ccb4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b152:	e090      	b.n	800b276 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	785a      	ldrb	r2, [r3, #1]
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	88db      	ldrh	r3, [r3, #6]
 800b162:	2b3f      	cmp	r3, #63	@ 0x3f
 800b164:	d803      	bhi.n	800b16e <USBD_CDC_Setup+0xa6>
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	88db      	ldrh	r3, [r3, #6]
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	e000      	b.n	800b170 <USBD_CDC_Setup+0xa8>
 800b16e:	2240      	movs	r2, #64	@ 0x40
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b176:	6939      	ldr	r1, [r7, #16]
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b17e:	461a      	mov	r2, r3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f001 fdc3 	bl	800cd0c <USBD_CtlPrepareRx>
      break;
 800b186:	e076      	b.n	800b276 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	33b0      	adds	r3, #176	@ 0xb0
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	7850      	ldrb	r0, [r2, #1]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	6839      	ldr	r1, [r7, #0]
 800b1a2:	4798      	blx	r3
      break;
 800b1a4:	e067      	b.n	800b276 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	785b      	ldrb	r3, [r3, #1]
 800b1aa:	2b0b      	cmp	r3, #11
 800b1ac:	d851      	bhi.n	800b252 <USBD_CDC_Setup+0x18a>
 800b1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b1b4 <USBD_CDC_Setup+0xec>)
 800b1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b4:	0800b1e5 	.word	0x0800b1e5
 800b1b8:	0800b261 	.word	0x0800b261
 800b1bc:	0800b253 	.word	0x0800b253
 800b1c0:	0800b253 	.word	0x0800b253
 800b1c4:	0800b253 	.word	0x0800b253
 800b1c8:	0800b253 	.word	0x0800b253
 800b1cc:	0800b253 	.word	0x0800b253
 800b1d0:	0800b253 	.word	0x0800b253
 800b1d4:	0800b253 	.word	0x0800b253
 800b1d8:	0800b253 	.word	0x0800b253
 800b1dc:	0800b20f 	.word	0x0800b20f
 800b1e0:	0800b239 	.word	0x0800b239
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	2b03      	cmp	r3, #3
 800b1ee:	d107      	bne.n	800b200 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b1f0:	f107 030a 	add.w	r3, r7, #10
 800b1f4:	2202      	movs	r2, #2
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f001 fd5b 	bl	800ccb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b1fe:	e032      	b.n	800b266 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f001 fce5 	bl	800cbd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b208:	2303      	movs	r3, #3
 800b20a:	75fb      	strb	r3, [r7, #23]
          break;
 800b20c:	e02b      	b.n	800b266 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b03      	cmp	r3, #3
 800b218:	d107      	bne.n	800b22a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b21a:	f107 030d 	add.w	r3, r7, #13
 800b21e:	2201      	movs	r2, #1
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f001 fd46 	bl	800ccb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b228:	e01d      	b.n	800b266 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f001 fcd0 	bl	800cbd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b232:	2303      	movs	r3, #3
 800b234:	75fb      	strb	r3, [r7, #23]
          break;
 800b236:	e016      	b.n	800b266 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	2b03      	cmp	r3, #3
 800b242:	d00f      	beq.n	800b264 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f001 fcc3 	bl	800cbd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b24c:	2303      	movs	r3, #3
 800b24e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b250:	e008      	b.n	800b264 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f001 fcbc 	bl	800cbd2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b25a:	2303      	movs	r3, #3
 800b25c:	75fb      	strb	r3, [r7, #23]
          break;
 800b25e:	e002      	b.n	800b266 <USBD_CDC_Setup+0x19e>
          break;
 800b260:	bf00      	nop
 800b262:	e008      	b.n	800b276 <USBD_CDC_Setup+0x1ae>
          break;
 800b264:	bf00      	nop
      }
      break;
 800b266:	e006      	b.n	800b276 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b268:	6839      	ldr	r1, [r7, #0]
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f001 fcb1 	bl	800cbd2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b270:	2303      	movs	r3, #3
 800b272:	75fb      	strb	r3, [r7, #23]
      break;
 800b274:	bf00      	nop
  }

  return (uint8_t)ret;
 800b276:	7dfb      	ldrb	r3, [r7, #23]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	460b      	mov	r3, r1
 800b28a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b292:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	32b0      	adds	r2, #176	@ 0xb0
 800b29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d101      	bne.n	800b2aa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	e065      	b.n	800b376 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	32b0      	adds	r2, #176	@ 0xb0
 800b2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b2ba:	78fb      	ldrb	r3, [r7, #3]
 800b2bc:	f003 020f 	and.w	r2, r3, #15
 800b2c0:	6879      	ldr	r1, [r7, #4]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	4413      	add	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	440b      	add	r3, r1
 800b2cc:	3318      	adds	r3, #24
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d02f      	beq.n	800b334 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b2d4:	78fb      	ldrb	r3, [r7, #3]
 800b2d6:	f003 020f 	and.w	r2, r3, #15
 800b2da:	6879      	ldr	r1, [r7, #4]
 800b2dc:	4613      	mov	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4413      	add	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	440b      	add	r3, r1
 800b2e6:	3318      	adds	r3, #24
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	78fb      	ldrb	r3, [r7, #3]
 800b2ec:	f003 010f 	and.w	r1, r3, #15
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	00db      	lsls	r3, r3, #3
 800b2f6:	440b      	add	r3, r1
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	4403      	add	r3, r0
 800b2fc:	3344      	adds	r3, #68	@ 0x44
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	fbb2 f1f3 	udiv	r1, r2, r3
 800b304:	fb01 f303 	mul.w	r3, r1, r3
 800b308:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d112      	bne.n	800b334 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b30e:	78fb      	ldrb	r3, [r7, #3]
 800b310:	f003 020f 	and.w	r2, r3, #15
 800b314:	6879      	ldr	r1, [r7, #4]
 800b316:	4613      	mov	r3, r2
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	4413      	add	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	440b      	add	r3, r1
 800b320:	3318      	adds	r3, #24
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b326:	78f9      	ldrb	r1, [r7, #3]
 800b328:	2300      	movs	r3, #0
 800b32a:	2200      	movs	r2, #0
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f002 fab5 	bl	800d89c <USBD_LL_Transmit>
 800b332:	e01f      	b.n	800b374 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2200      	movs	r2, #0
 800b338:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	33b0      	adds	r3, #176	@ 0xb0
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4413      	add	r3, r2
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d010      	beq.n	800b374 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	33b0      	adds	r3, #176	@ 0xb0
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	4413      	add	r3, r2
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	691b      	ldr	r3, [r3, #16]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b370:	78fa      	ldrb	r2, [r7, #3]
 800b372:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b084      	sub	sp, #16
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	460b      	mov	r3, r1
 800b388:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	32b0      	adds	r2, #176	@ 0xb0
 800b394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b398:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	32b0      	adds	r2, #176	@ 0xb0
 800b3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d101      	bne.n	800b3b0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	e01a      	b.n	800b3e6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b3b0:	78fb      	ldrb	r3, [r7, #3]
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f002 fae1 	bl	800d97c <USBD_LL_GetRxDataSize>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	33b0      	adds	r3, #176	@ 0xb0
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b084      	sub	sp, #16
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	32b0      	adds	r2, #176	@ 0xb0
 800b400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b404:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e024      	b.n	800b45a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	33b0      	adds	r3, #176	@ 0xb0
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	4413      	add	r3, r2
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d019      	beq.n	800b458 <USBD_CDC_EP0_RxReady+0x6a>
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b42a:	2bff      	cmp	r3, #255	@ 0xff
 800b42c:	d014      	beq.n	800b458 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	33b0      	adds	r3, #176	@ 0xb0
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	4413      	add	r3, r2
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b446:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b44e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	22ff      	movs	r2, #255	@ 0xff
 800b454:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
	...

0800b464 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b46c:	2182      	movs	r1, #130	@ 0x82
 800b46e:	4818      	ldr	r0, [pc, #96]	@ (800b4d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b470:	f000 fd4f 	bl	800bf12 <USBD_GetEpDesc>
 800b474:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b476:	2101      	movs	r1, #1
 800b478:	4815      	ldr	r0, [pc, #84]	@ (800b4d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b47a:	f000 fd4a 	bl	800bf12 <USBD_GetEpDesc>
 800b47e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b480:	2181      	movs	r1, #129	@ 0x81
 800b482:	4813      	ldr	r0, [pc, #76]	@ (800b4d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b484:	f000 fd45 	bl	800bf12 <USBD_GetEpDesc>
 800b488:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d002      	beq.n	800b496 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	2210      	movs	r2, #16
 800b494:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d006      	beq.n	800b4aa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4a4:	711a      	strb	r2, [r3, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d006      	beq.n	800b4be <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4b8:	711a      	strb	r2, [r3, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2243      	movs	r2, #67	@ 0x43
 800b4c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b4c4:	4b02      	ldr	r3, [pc, #8]	@ (800b4d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	20000050 	.word	0x20000050

0800b4d4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b4dc:	2182      	movs	r1, #130	@ 0x82
 800b4de:	4818      	ldr	r0, [pc, #96]	@ (800b540 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b4e0:	f000 fd17 	bl	800bf12 <USBD_GetEpDesc>
 800b4e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b4e6:	2101      	movs	r1, #1
 800b4e8:	4815      	ldr	r0, [pc, #84]	@ (800b540 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b4ea:	f000 fd12 	bl	800bf12 <USBD_GetEpDesc>
 800b4ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b4f0:	2181      	movs	r1, #129	@ 0x81
 800b4f2:	4813      	ldr	r0, [pc, #76]	@ (800b540 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b4f4:	f000 fd0d 	bl	800bf12 <USBD_GetEpDesc>
 800b4f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d002      	beq.n	800b506 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	2210      	movs	r2, #16
 800b504:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d006      	beq.n	800b51a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	2200      	movs	r2, #0
 800b510:	711a      	strb	r2, [r3, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	f042 0202 	orr.w	r2, r2, #2
 800b518:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d006      	beq.n	800b52e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	711a      	strb	r2, [r3, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	f042 0202 	orr.w	r2, r2, #2
 800b52c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2243      	movs	r2, #67	@ 0x43
 800b532:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b534:	4b02      	ldr	r3, [pc, #8]	@ (800b540 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b536:	4618      	mov	r0, r3
 800b538:	3718      	adds	r7, #24
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	20000050 	.word	0x20000050

0800b544 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b54c:	2182      	movs	r1, #130	@ 0x82
 800b54e:	4818      	ldr	r0, [pc, #96]	@ (800b5b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b550:	f000 fcdf 	bl	800bf12 <USBD_GetEpDesc>
 800b554:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b556:	2101      	movs	r1, #1
 800b558:	4815      	ldr	r0, [pc, #84]	@ (800b5b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b55a:	f000 fcda 	bl	800bf12 <USBD_GetEpDesc>
 800b55e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b560:	2181      	movs	r1, #129	@ 0x81
 800b562:	4813      	ldr	r0, [pc, #76]	@ (800b5b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b564:	f000 fcd5 	bl	800bf12 <USBD_GetEpDesc>
 800b568:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	2210      	movs	r2, #16
 800b574:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d006      	beq.n	800b58a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	2200      	movs	r2, #0
 800b580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b584:	711a      	strb	r2, [r3, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d006      	beq.n	800b59e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b598:	711a      	strb	r2, [r3, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2243      	movs	r2, #67	@ 0x43
 800b5a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5a4:	4b02      	ldr	r3, [pc, #8]	@ (800b5b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3718      	adds	r7, #24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	20000050 	.word	0x20000050

0800b5b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	220a      	movs	r2, #10
 800b5c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b5c2:	4b03      	ldr	r3, [pc, #12]	@ (800b5d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	2000000c 	.word	0x2000000c

0800b5d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d101      	bne.n	800b5e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b5e4:	2303      	movs	r3, #3
 800b5e6:	e009      	b.n	800b5fc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	33b0      	adds	r3, #176	@ 0xb0
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4413      	add	r3, r2
 800b5f6:	683a      	ldr	r2, [r7, #0]
 800b5f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b608:	b480      	push	{r7}
 800b60a:	b087      	sub	sp, #28
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	32b0      	adds	r2, #176	@ 0xb0
 800b61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b622:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d101      	bne.n	800b62e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b62a:	2303      	movs	r3, #3
 800b62c:	e008      	b.n	800b640 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	68ba      	ldr	r2, [r7, #8]
 800b632:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	371c      	adds	r7, #28
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b085      	sub	sp, #20
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	32b0      	adds	r2, #176	@ 0xb0
 800b660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b664:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b66c:	2303      	movs	r3, #3
 800b66e:	e004      	b.n	800b67a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3714      	adds	r7, #20
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr
	...

0800b688 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	32b0      	adds	r2, #176	@ 0xb0
 800b69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b69e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d101      	bne.n	800b6ae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e025      	b.n	800b6fa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d11f      	bne.n	800b6f8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b6c0:	4b10      	ldr	r3, [pc, #64]	@ (800b704 <USBD_CDC_TransmitPacket+0x7c>)
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	f003 020f 	and.w	r2, r3, #15
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	4413      	add	r3, r2
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	4403      	add	r3, r0
 800b6da:	3318      	adds	r3, #24
 800b6dc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b6de:	4b09      	ldr	r3, [pc, #36]	@ (800b704 <USBD_CDC_TransmitPacket+0x7c>)
 800b6e0:	7819      	ldrb	r1, [r3, #0]
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f002 f8d4 	bl	800d89c <USBD_LL_Transmit>

    ret = USBD_OK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	20000093 	.word	0x20000093

0800b708 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	32b0      	adds	r2, #176	@ 0xb0
 800b71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b71e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	32b0      	adds	r2, #176	@ 0xb0
 800b72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b732:	2303      	movs	r3, #3
 800b734:	e018      	b.n	800b768 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	7c1b      	ldrb	r3, [r3, #16]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10a      	bne.n	800b754 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b73e:	4b0c      	ldr	r3, [pc, #48]	@ (800b770 <USBD_CDC_ReceivePacket+0x68>)
 800b740:	7819      	ldrb	r1, [r3, #0]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b748:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f002 f8dd 	bl	800d90c <USBD_LL_PrepareReceive>
 800b752:	e008      	b.n	800b766 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b754:	4b06      	ldr	r3, [pc, #24]	@ (800b770 <USBD_CDC_ReceivePacket+0x68>)
 800b756:	7819      	ldrb	r1, [r3, #0]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b75e:	2340      	movs	r3, #64	@ 0x40
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f002 f8d3 	bl	800d90c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	20000094 	.word	0x20000094

0800b774 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	4613      	mov	r3, r2
 800b780:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b788:	2303      	movs	r3, #3
 800b78a:	e01f      	b.n	800b7cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2200      	movs	r2, #0
 800b790:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2200      	movs	r2, #0
 800b798:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d003      	beq.n	800b7b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	79fa      	ldrb	r2, [r7, #7]
 800b7be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f001 feab 	bl	800d51c <USBD_LL_Init>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b7ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3718      	adds	r7, #24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d101      	bne.n	800b7ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	e025      	b.n	800b838 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	32ae      	adds	r2, #174	@ 0xae
 800b7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b804:	2b00      	cmp	r3, #0
 800b806:	d00f      	beq.n	800b828 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	32ae      	adds	r2, #174	@ 0xae
 800b812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b818:	f107 020e 	add.w	r2, r7, #14
 800b81c:	4610      	mov	r0, r2
 800b81e:	4798      	blx	r3
 800b820:	4602      	mov	r2, r0
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f001 feb3 	bl	800d5b4 <USBD_LL_Start>
 800b84e:	4603      	mov	r3, r0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b860:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b862:	4618      	mov	r0, r3
 800b864:	370c      	adds	r7, #12
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b084      	sub	sp, #16
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	460b      	mov	r3, r1
 800b878:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b884:	2b00      	cmp	r3, #0
 800b886:	d009      	beq.n	800b89c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	78fa      	ldrb	r2, [r7, #3]
 800b892:	4611      	mov	r1, r2
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	4798      	blx	r3
 800b898:	4603      	mov	r3, r0
 800b89a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b084      	sub	sp, #16
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	78fa      	ldrb	r2, [r7, #3]
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	4798      	blx	r3
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d001      	beq.n	800b8d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b8ea:	6839      	ldr	r1, [r7, #0]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 f936 	bl	800cb5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b900:	461a      	mov	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b90e:	f003 031f 	and.w	r3, r3, #31
 800b912:	2b02      	cmp	r3, #2
 800b914:	d01a      	beq.n	800b94c <USBD_LL_SetupStage+0x72>
 800b916:	2b02      	cmp	r3, #2
 800b918:	d822      	bhi.n	800b960 <USBD_LL_SetupStage+0x86>
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d002      	beq.n	800b924 <USBD_LL_SetupStage+0x4a>
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d00a      	beq.n	800b938 <USBD_LL_SetupStage+0x5e>
 800b922:	e01d      	b.n	800b960 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b92a:	4619      	mov	r1, r3
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 fb63 	bl	800bff8 <USBD_StdDevReq>
 800b932:	4603      	mov	r3, r0
 800b934:	73fb      	strb	r3, [r7, #15]
      break;
 800b936:	e020      	b.n	800b97a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fbcb 	bl	800c0dc <USBD_StdItfReq>
 800b946:	4603      	mov	r3, r0
 800b948:	73fb      	strb	r3, [r7, #15]
      break;
 800b94a:	e016      	b.n	800b97a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fc2d 	bl	800c1b4 <USBD_StdEPReq>
 800b95a:	4603      	mov	r3, r0
 800b95c:	73fb      	strb	r3, [r7, #15]
      break;
 800b95e:	e00c      	b.n	800b97a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b966:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	4619      	mov	r1, r3
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f001 fec6 	bl	800d700 <USBD_LL_StallEP>
 800b974:	4603      	mov	r3, r0
 800b976:	73fb      	strb	r3, [r7, #15]
      break;
 800b978:	bf00      	nop
  }

  return ret;
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	460b      	mov	r3, r1
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b992:	2300      	movs	r3, #0
 800b994:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b996:	7afb      	ldrb	r3, [r7, #11]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d16e      	bne.n	800ba7a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b9a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b9aa:	2b03      	cmp	r3, #3
 800b9ac:	f040 8098 	bne.w	800bae0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d913      	bls.n	800b9e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	689a      	ldr	r2, [r3, #8]
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	1ad2      	subs	r2, r2, r3
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	68da      	ldr	r2, [r3, #12]
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	bf28      	it	cs
 800b9d6:	4613      	movcs	r3, r2
 800b9d8:	461a      	mov	r2, r3
 800b9da:	6879      	ldr	r1, [r7, #4]
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f001 f9b2 	bl	800cd46 <USBD_CtlContinueRx>
 800b9e2:	e07d      	b.n	800bae0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b9ea:	f003 031f 	and.w	r3, r3, #31
 800b9ee:	2b02      	cmp	r3, #2
 800b9f0:	d014      	beq.n	800ba1c <USBD_LL_DataOutStage+0x98>
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d81d      	bhi.n	800ba32 <USBD_LL_DataOutStage+0xae>
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d002      	beq.n	800ba00 <USBD_LL_DataOutStage+0x7c>
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d003      	beq.n	800ba06 <USBD_LL_DataOutStage+0x82>
 800b9fe:	e018      	b.n	800ba32 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ba00:	2300      	movs	r3, #0
 800ba02:	75bb      	strb	r3, [r7, #22]
            break;
 800ba04:	e018      	b.n	800ba38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	4619      	mov	r1, r3
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 fa64 	bl	800bede <USBD_CoreFindIF>
 800ba16:	4603      	mov	r3, r0
 800ba18:	75bb      	strb	r3, [r7, #22]
            break;
 800ba1a:	e00d      	b.n	800ba38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	4619      	mov	r1, r3
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f000 fa66 	bl	800bef8 <USBD_CoreFindEP>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	75bb      	strb	r3, [r7, #22]
            break;
 800ba30:	e002      	b.n	800ba38 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ba32:	2300      	movs	r3, #0
 800ba34:	75bb      	strb	r3, [r7, #22]
            break;
 800ba36:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ba38:	7dbb      	ldrb	r3, [r7, #22]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d119      	bne.n	800ba72 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b03      	cmp	r3, #3
 800ba48:	d113      	bne.n	800ba72 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ba4a:	7dba      	ldrb	r2, [r7, #22]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	32ae      	adds	r2, #174	@ 0xae
 800ba50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00b      	beq.n	800ba72 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ba5a:	7dba      	ldrb	r2, [r7, #22]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ba62:	7dba      	ldrb	r2, [r7, #22]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	32ae      	adds	r2, #174	@ 0xae
 800ba68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f001 f978 	bl	800cd68 <USBD_CtlSendStatus>
 800ba78:	e032      	b.n	800bae0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ba7a:	7afb      	ldrb	r3, [r7, #11]
 800ba7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	4619      	mov	r1, r3
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f000 fa37 	bl	800bef8 <USBD_CoreFindEP>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba8e:	7dbb      	ldrb	r3, [r7, #22]
 800ba90:	2bff      	cmp	r3, #255	@ 0xff
 800ba92:	d025      	beq.n	800bae0 <USBD_LL_DataOutStage+0x15c>
 800ba94:	7dbb      	ldrb	r3, [r7, #22]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d122      	bne.n	800bae0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	2b03      	cmp	r3, #3
 800baa4:	d117      	bne.n	800bad6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800baa6:	7dba      	ldrb	r2, [r7, #22]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	32ae      	adds	r2, #174	@ 0xae
 800baac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab0:	699b      	ldr	r3, [r3, #24]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00f      	beq.n	800bad6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bab6:	7dba      	ldrb	r2, [r7, #22]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800babe:	7dba      	ldrb	r2, [r7, #22]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	32ae      	adds	r2, #174	@ 0xae
 800bac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac8:	699b      	ldr	r3, [r3, #24]
 800baca:	7afa      	ldrb	r2, [r7, #11]
 800bacc:	4611      	mov	r1, r2
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	4798      	blx	r3
 800bad2:	4603      	mov	r3, r0
 800bad4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bad6:	7dfb      	ldrb	r3, [r7, #23]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800badc:	7dfb      	ldrb	r3, [r7, #23]
 800bade:	e000      	b.n	800bae2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b086      	sub	sp, #24
 800baee:	af00      	add	r7, sp, #0
 800baf0:	60f8      	str	r0, [r7, #12]
 800baf2:	460b      	mov	r3, r1
 800baf4:	607a      	str	r2, [r7, #4]
 800baf6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800baf8:	7afb      	ldrb	r3, [r7, #11]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d16f      	bne.n	800bbde <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3314      	adds	r3, #20
 800bb02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d15a      	bne.n	800bbc4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	689a      	ldr	r2, [r3, #8]
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d914      	bls.n	800bb44 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	689a      	ldr	r2, [r3, #8]
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	1ad2      	subs	r2, r2, r3
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	6879      	ldr	r1, [r7, #4]
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f001 f8da 	bl	800ccea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb36:	2300      	movs	r3, #0
 800bb38:	2200      	movs	r2, #0
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f001 fee5 	bl	800d90c <USBD_LL_PrepareReceive>
 800bb42:	e03f      	b.n	800bbc4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	68da      	ldr	r2, [r3, #12]
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d11c      	bne.n	800bb8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	685a      	ldr	r2, [r3, #4]
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d316      	bcc.n	800bb8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	685a      	ldr	r2, [r3, #4]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d20f      	bcs.n	800bb8a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	2100      	movs	r1, #0
 800bb6e:	68f8      	ldr	r0, [r7, #12]
 800bb70:	f001 f8bb 	bl	800ccea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	2200      	movs	r2, #0
 800bb80:	2100      	movs	r1, #0
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f001 fec2 	bl	800d90c <USBD_LL_PrepareReceive>
 800bb88:	e01c      	b.n	800bbc4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	d10f      	bne.n	800bbb6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d009      	beq.n	800bbb6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbb6:	2180      	movs	r1, #128	@ 0x80
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f001 fda1 	bl	800d700 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f001 f8e5 	bl	800cd8e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d03a      	beq.n	800bc44 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f7ff fe42 	bl	800b858 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bbdc:	e032      	b.n	800bc44 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bbde:	7afb      	ldrb	r3, [r7, #11]
 800bbe0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f000 f985 	bl	800bef8 <USBD_CoreFindEP>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bbf2:	7dfb      	ldrb	r3, [r7, #23]
 800bbf4:	2bff      	cmp	r3, #255	@ 0xff
 800bbf6:	d025      	beq.n	800bc44 <USBD_LL_DataInStage+0x15a>
 800bbf8:	7dfb      	ldrb	r3, [r7, #23]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d122      	bne.n	800bc44 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	2b03      	cmp	r3, #3
 800bc08:	d11c      	bne.n	800bc44 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bc0a:	7dfa      	ldrb	r2, [r7, #23]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	32ae      	adds	r2, #174	@ 0xae
 800bc10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc14:	695b      	ldr	r3, [r3, #20]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d014      	beq.n	800bc44 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bc1a:	7dfa      	ldrb	r2, [r7, #23]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bc22:	7dfa      	ldrb	r2, [r7, #23]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	32ae      	adds	r2, #174	@ 0xae
 800bc28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	7afa      	ldrb	r2, [r7, #11]
 800bc30:	4611      	mov	r1, r2
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	4798      	blx	r3
 800bc36:	4603      	mov	r3, r0
 800bc38:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bc3a:	7dbb      	ldrb	r3, [r7, #22]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d001      	beq.n	800bc44 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bc40:	7dbb      	ldrb	r3, [r7, #22]
 800bc42:	e000      	b.n	800bc46 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3718      	adds	r7, #24
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b084      	sub	sp, #16
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc56:	2300      	movs	r3, #0
 800bc58:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d014      	beq.n	800bcb4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00e      	beq.n	800bcb4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	6852      	ldr	r2, [r2, #4]
 800bca2:	b2d2      	uxtb	r2, r2
 800bca4:	4611      	mov	r1, r2
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	4798      	blx	r3
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bcb4:	2340      	movs	r3, #64	@ 0x40
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	2100      	movs	r1, #0
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f001 fcac 	bl	800d618 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2240      	movs	r2, #64	@ 0x40
 800bccc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bcd0:	2340      	movs	r3, #64	@ 0x40
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	2180      	movs	r1, #128	@ 0x80
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f001 fc9e 	bl	800d618 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2240      	movs	r2, #64	@ 0x40
 800bce6:	621a      	str	r2, [r3, #32]

  return ret;
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bcf2:	b480      	push	{r7}
 800bcf4:	b083      	sub	sp, #12
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	78fa      	ldrb	r2, [r7, #3]
 800bd02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd12:	b480      	push	{r7}
 800bd14:	b083      	sub	sp, #12
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b04      	cmp	r3, #4
 800bd24:	d006      	beq.n	800bd34 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2204      	movs	r2, #4
 800bd38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	370c      	adds	r7, #12
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd4a:	b480      	push	{r7}
 800bd4c:	b083      	sub	sp, #12
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b04      	cmp	r3, #4
 800bd5c:	d106      	bne.n	800bd6c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bd64:	b2da      	uxtb	r2, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	370c      	adds	r7, #12
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b082      	sub	sp, #8
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	2b03      	cmp	r3, #3
 800bd8c:	d110      	bne.n	800bdb0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00b      	beq.n	800bdb0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd9e:	69db      	ldr	r3, [r3, #28]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d005      	beq.n	800bdb0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdaa:	69db      	ldr	r3, [r3, #28]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b082      	sub	sp, #8
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	32ae      	adds	r2, #174	@ 0xae
 800bdd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d101      	bne.n	800bddc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bdd8:	2303      	movs	r3, #3
 800bdda:	e01c      	b.n	800be16 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	2b03      	cmp	r3, #3
 800bde6:	d115      	bne.n	800be14 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	32ae      	adds	r2, #174	@ 0xae
 800bdf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf6:	6a1b      	ldr	r3, [r3, #32]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00b      	beq.n	800be14 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	32ae      	adds	r2, #174	@ 0xae
 800be06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be0a:	6a1b      	ldr	r3, [r3, #32]
 800be0c:	78fa      	ldrb	r2, [r7, #3]
 800be0e:	4611      	mov	r1, r2
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	3708      	adds	r7, #8
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800be1e:	b580      	push	{r7, lr}
 800be20:	b082      	sub	sp, #8
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	460b      	mov	r3, r1
 800be28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	32ae      	adds	r2, #174	@ 0xae
 800be34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d101      	bne.n	800be40 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800be3c:	2303      	movs	r3, #3
 800be3e:	e01c      	b.n	800be7a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be46:	b2db      	uxtb	r3, r3
 800be48:	2b03      	cmp	r3, #3
 800be4a:	d115      	bne.n	800be78 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	32ae      	adds	r2, #174	@ 0xae
 800be56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00b      	beq.n	800be78 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	32ae      	adds	r2, #174	@ 0xae
 800be6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be70:	78fa      	ldrb	r2, [r7, #3]
 800be72:	4611      	mov	r1, r2
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800be82:	b480      	push	{r7}
 800be84:	b083      	sub	sp, #12
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bea0:	2300      	movs	r3, #0
 800bea2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d00e      	beq.n	800bed4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	6852      	ldr	r2, [r2, #4]
 800bec2:	b2d2      	uxtb	r2, r2
 800bec4:	4611      	mov	r1, r2
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	4798      	blx	r3
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d001      	beq.n	800bed4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bed0:	2303      	movs	r3, #3
 800bed2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bede:	b480      	push	{r7}
 800bee0:	b083      	sub	sp, #12
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
 800bee6:	460b      	mov	r3, r1
 800bee8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800beea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800beec:	4618      	mov	r0, r3
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	460b      	mov	r3, r1
 800bf02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	370c      	adds	r7, #12
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr

0800bf12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b086      	sub	sp, #24
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	885b      	ldrh	r3, [r3, #2]
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	7812      	ldrb	r2, [r2, #0]
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d91f      	bls.n	800bf78 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bf3e:	e013      	b.n	800bf68 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bf40:	f107 030a 	add.w	r3, r7, #10
 800bf44:	4619      	mov	r1, r3
 800bf46:	6978      	ldr	r0, [r7, #20]
 800bf48:	f000 f81b 	bl	800bf82 <USBD_GetNextDesc>
 800bf4c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	785b      	ldrb	r3, [r3, #1]
 800bf52:	2b05      	cmp	r3, #5
 800bf54:	d108      	bne.n	800bf68 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	789b      	ldrb	r3, [r3, #2]
 800bf5e:	78fa      	ldrb	r2, [r7, #3]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d008      	beq.n	800bf76 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bf64:	2300      	movs	r3, #0
 800bf66:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	885b      	ldrh	r3, [r3, #2]
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	897b      	ldrh	r3, [r7, #10]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d8e5      	bhi.n	800bf40 <USBD_GetEpDesc+0x2e>
 800bf74:	e000      	b.n	800bf78 <USBD_GetEpDesc+0x66>
          break;
 800bf76:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bf78:	693b      	ldr	r3, [r7, #16]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3718      	adds	r7, #24
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bf82:	b480      	push	{r7}
 800bf84:	b085      	sub	sp, #20
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	881b      	ldrh	r3, [r3, #0]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	7812      	ldrb	r2, [r2, #0]
 800bf98:	4413      	add	r3, r2
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bfac:	68fb      	ldr	r3, [r7, #12]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bfba:	b480      	push	{r7}
 800bfbc:	b087      	sub	sp, #28
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bfd8:	8a3b      	ldrh	r3, [r7, #16]
 800bfda:	021b      	lsls	r3, r3, #8
 800bfdc:	b21a      	sxth	r2, r3
 800bfde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	b21b      	sxth	r3, r3
 800bfe6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bfe8:	89fb      	ldrh	r3, [r7, #14]
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	371c      	adds	r7, #28
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
	...

0800bff8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c002:	2300      	movs	r3, #0
 800c004:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c00e:	2b40      	cmp	r3, #64	@ 0x40
 800c010:	d005      	beq.n	800c01e <USBD_StdDevReq+0x26>
 800c012:	2b40      	cmp	r3, #64	@ 0x40
 800c014:	d857      	bhi.n	800c0c6 <USBD_StdDevReq+0xce>
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00f      	beq.n	800c03a <USBD_StdDevReq+0x42>
 800c01a:	2b20      	cmp	r3, #32
 800c01c:	d153      	bne.n	800c0c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	32ae      	adds	r2, #174	@ 0xae
 800c028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c02c:	689b      	ldr	r3, [r3, #8]
 800c02e:	6839      	ldr	r1, [r7, #0]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	4798      	blx	r3
 800c034:	4603      	mov	r3, r0
 800c036:	73fb      	strb	r3, [r7, #15]
      break;
 800c038:	e04a      	b.n	800c0d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	785b      	ldrb	r3, [r3, #1]
 800c03e:	2b09      	cmp	r3, #9
 800c040:	d83b      	bhi.n	800c0ba <USBD_StdDevReq+0xc2>
 800c042:	a201      	add	r2, pc, #4	@ (adr r2, 800c048 <USBD_StdDevReq+0x50>)
 800c044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c048:	0800c09d 	.word	0x0800c09d
 800c04c:	0800c0b1 	.word	0x0800c0b1
 800c050:	0800c0bb 	.word	0x0800c0bb
 800c054:	0800c0a7 	.word	0x0800c0a7
 800c058:	0800c0bb 	.word	0x0800c0bb
 800c05c:	0800c07b 	.word	0x0800c07b
 800c060:	0800c071 	.word	0x0800c071
 800c064:	0800c0bb 	.word	0x0800c0bb
 800c068:	0800c093 	.word	0x0800c093
 800c06c:	0800c085 	.word	0x0800c085
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fa3c 	bl	800c4f0 <USBD_GetDescriptor>
          break;
 800c078:	e024      	b.n	800c0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 fbcb 	bl	800c818 <USBD_SetAddress>
          break;
 800c082:	e01f      	b.n	800c0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fc0a 	bl	800c8a0 <USBD_SetConfig>
 800c08c:	4603      	mov	r3, r0
 800c08e:	73fb      	strb	r3, [r7, #15]
          break;
 800c090:	e018      	b.n	800c0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fcad 	bl	800c9f4 <USBD_GetConfig>
          break;
 800c09a:	e013      	b.n	800c0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c09c:	6839      	ldr	r1, [r7, #0]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 fcde 	bl	800ca60 <USBD_GetStatus>
          break;
 800c0a4:	e00e      	b.n	800c0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 fd0d 	bl	800cac8 <USBD_SetFeature>
          break;
 800c0ae:	e009      	b.n	800c0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c0b0:	6839      	ldr	r1, [r7, #0]
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fd31 	bl	800cb1a <USBD_ClrFeature>
          break;
 800c0b8:	e004      	b.n	800c0c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fd88 	bl	800cbd2 <USBD_CtlError>
          break;
 800c0c2:	bf00      	nop
      }
      break;
 800c0c4:	e004      	b.n	800c0d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c0c6:	6839      	ldr	r1, [r7, #0]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 fd82 	bl	800cbd2 <USBD_CtlError>
      break;
 800c0ce:	bf00      	nop
  }

  return ret;
 800c0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop

0800c0dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c0f2:	2b40      	cmp	r3, #64	@ 0x40
 800c0f4:	d005      	beq.n	800c102 <USBD_StdItfReq+0x26>
 800c0f6:	2b40      	cmp	r3, #64	@ 0x40
 800c0f8:	d852      	bhi.n	800c1a0 <USBD_StdItfReq+0xc4>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <USBD_StdItfReq+0x26>
 800c0fe:	2b20      	cmp	r3, #32
 800c100:	d14e      	bne.n	800c1a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	3b01      	subs	r3, #1
 800c10c:	2b02      	cmp	r3, #2
 800c10e:	d840      	bhi.n	800c192 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	889b      	ldrh	r3, [r3, #4]
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b01      	cmp	r3, #1
 800c118:	d836      	bhi.n	800c188 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	889b      	ldrh	r3, [r3, #4]
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	4619      	mov	r1, r3
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7ff fedb 	bl	800bede <USBD_CoreFindIF>
 800c128:	4603      	mov	r3, r0
 800c12a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
 800c12e:	2bff      	cmp	r3, #255	@ 0xff
 800c130:	d01d      	beq.n	800c16e <USBD_StdItfReq+0x92>
 800c132:	7bbb      	ldrb	r3, [r7, #14]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d11a      	bne.n	800c16e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c138:	7bba      	ldrb	r2, [r7, #14]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	32ae      	adds	r2, #174	@ 0xae
 800c13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d00f      	beq.n	800c168 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c148:	7bba      	ldrb	r2, [r7, #14]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c150:	7bba      	ldrb	r2, [r7, #14]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	32ae      	adds	r2, #174	@ 0xae
 800c156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	4798      	blx	r3
 800c162:	4603      	mov	r3, r0
 800c164:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c166:	e004      	b.n	800c172 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c168:	2303      	movs	r3, #3
 800c16a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c16c:	e001      	b.n	800c172 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c16e:	2303      	movs	r3, #3
 800c170:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	88db      	ldrh	r3, [r3, #6]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d110      	bne.n	800c19c <USBD_StdItfReq+0xc0>
 800c17a:	7bfb      	ldrb	r3, [r7, #15]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10d      	bne.n	800c19c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fdf1 	bl	800cd68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c186:	e009      	b.n	800c19c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 fd21 	bl	800cbd2 <USBD_CtlError>
          break;
 800c190:	e004      	b.n	800c19c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fd1c 	bl	800cbd2 <USBD_CtlError>
          break;
 800c19a:	e000      	b.n	800c19e <USBD_StdItfReq+0xc2>
          break;
 800c19c:	bf00      	nop
      }
      break;
 800c19e:	e004      	b.n	800c1aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c1a0:	6839      	ldr	r1, [r7, #0]
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fd15 	bl	800cbd2 <USBD_CtlError>
      break;
 800c1a8:	bf00      	nop
  }

  return ret;
 800c1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3710      	adds	r7, #16
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	889b      	ldrh	r3, [r3, #4]
 800c1c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c1d0:	2b40      	cmp	r3, #64	@ 0x40
 800c1d2:	d007      	beq.n	800c1e4 <USBD_StdEPReq+0x30>
 800c1d4:	2b40      	cmp	r3, #64	@ 0x40
 800c1d6:	f200 817f 	bhi.w	800c4d8 <USBD_StdEPReq+0x324>
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d02a      	beq.n	800c234 <USBD_StdEPReq+0x80>
 800c1de:	2b20      	cmp	r3, #32
 800c1e0:	f040 817a 	bne.w	800c4d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f7ff fe85 	bl	800bef8 <USBD_CoreFindEP>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1f2:	7b7b      	ldrb	r3, [r7, #13]
 800c1f4:	2bff      	cmp	r3, #255	@ 0xff
 800c1f6:	f000 8174 	beq.w	800c4e2 <USBD_StdEPReq+0x32e>
 800c1fa:	7b7b      	ldrb	r3, [r7, #13]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f040 8170 	bne.w	800c4e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c202:	7b7a      	ldrb	r2, [r7, #13]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c20a:	7b7a      	ldrb	r2, [r7, #13]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	32ae      	adds	r2, #174	@ 0xae
 800c210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	2b00      	cmp	r3, #0
 800c218:	f000 8163 	beq.w	800c4e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c21c:	7b7a      	ldrb	r2, [r7, #13]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	32ae      	adds	r2, #174	@ 0xae
 800c222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	6839      	ldr	r1, [r7, #0]
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	4798      	blx	r3
 800c22e:	4603      	mov	r3, r0
 800c230:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c232:	e156      	b.n	800c4e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	785b      	ldrb	r3, [r3, #1]
 800c238:	2b03      	cmp	r3, #3
 800c23a:	d008      	beq.n	800c24e <USBD_StdEPReq+0x9a>
 800c23c:	2b03      	cmp	r3, #3
 800c23e:	f300 8145 	bgt.w	800c4cc <USBD_StdEPReq+0x318>
 800c242:	2b00      	cmp	r3, #0
 800c244:	f000 809b 	beq.w	800c37e <USBD_StdEPReq+0x1ca>
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d03c      	beq.n	800c2c6 <USBD_StdEPReq+0x112>
 800c24c:	e13e      	b.n	800c4cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c254:	b2db      	uxtb	r3, r3
 800c256:	2b02      	cmp	r3, #2
 800c258:	d002      	beq.n	800c260 <USBD_StdEPReq+0xac>
 800c25a:	2b03      	cmp	r3, #3
 800c25c:	d016      	beq.n	800c28c <USBD_StdEPReq+0xd8>
 800c25e:	e02c      	b.n	800c2ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c260:	7bbb      	ldrb	r3, [r7, #14]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00d      	beq.n	800c282 <USBD_StdEPReq+0xce>
 800c266:	7bbb      	ldrb	r3, [r7, #14]
 800c268:	2b80      	cmp	r3, #128	@ 0x80
 800c26a:	d00a      	beq.n	800c282 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c26c:	7bbb      	ldrb	r3, [r7, #14]
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f001 fa45 	bl	800d700 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c276:	2180      	movs	r1, #128	@ 0x80
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f001 fa41 	bl	800d700 <USBD_LL_StallEP>
 800c27e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c280:	e020      	b.n	800c2c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c282:	6839      	ldr	r1, [r7, #0]
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 fca4 	bl	800cbd2 <USBD_CtlError>
              break;
 800c28a:	e01b      	b.n	800c2c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	885b      	ldrh	r3, [r3, #2]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d10e      	bne.n	800c2b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c294:	7bbb      	ldrb	r3, [r7, #14]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00b      	beq.n	800c2b2 <USBD_StdEPReq+0xfe>
 800c29a:	7bbb      	ldrb	r3, [r7, #14]
 800c29c:	2b80      	cmp	r3, #128	@ 0x80
 800c29e:	d008      	beq.n	800c2b2 <USBD_StdEPReq+0xfe>
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	88db      	ldrh	r3, [r3, #6]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d104      	bne.n	800c2b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2a8:	7bbb      	ldrb	r3, [r7, #14]
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f001 fa27 	bl	800d700 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fd58 	bl	800cd68 <USBD_CtlSendStatus>

              break;
 800c2b8:	e004      	b.n	800c2c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c2ba:	6839      	ldr	r1, [r7, #0]
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 fc88 	bl	800cbd2 <USBD_CtlError>
              break;
 800c2c2:	bf00      	nop
          }
          break;
 800c2c4:	e107      	b.n	800c4d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	d002      	beq.n	800c2d8 <USBD_StdEPReq+0x124>
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	d016      	beq.n	800c304 <USBD_StdEPReq+0x150>
 800c2d6:	e04b      	b.n	800c370 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00d      	beq.n	800c2fa <USBD_StdEPReq+0x146>
 800c2de:	7bbb      	ldrb	r3, [r7, #14]
 800c2e0:	2b80      	cmp	r3, #128	@ 0x80
 800c2e2:	d00a      	beq.n	800c2fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2e4:	7bbb      	ldrb	r3, [r7, #14]
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f001 fa09 	bl	800d700 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2ee:	2180      	movs	r1, #128	@ 0x80
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f001 fa05 	bl	800d700 <USBD_LL_StallEP>
 800c2f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c2f8:	e040      	b.n	800c37c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 fc68 	bl	800cbd2 <USBD_CtlError>
              break;
 800c302:	e03b      	b.n	800c37c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	885b      	ldrh	r3, [r3, #2]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d136      	bne.n	800c37a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c30c:	7bbb      	ldrb	r3, [r7, #14]
 800c30e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c312:	2b00      	cmp	r3, #0
 800c314:	d004      	beq.n	800c320 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c316:	7bbb      	ldrb	r3, [r7, #14]
 800c318:	4619      	mov	r1, r3
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f001 fa26 	bl	800d76c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 fd21 	bl	800cd68 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c326:	7bbb      	ldrb	r3, [r7, #14]
 800c328:	4619      	mov	r1, r3
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f7ff fde4 	bl	800bef8 <USBD_CoreFindEP>
 800c330:	4603      	mov	r3, r0
 800c332:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c334:	7b7b      	ldrb	r3, [r7, #13]
 800c336:	2bff      	cmp	r3, #255	@ 0xff
 800c338:	d01f      	beq.n	800c37a <USBD_StdEPReq+0x1c6>
 800c33a:	7b7b      	ldrb	r3, [r7, #13]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d11c      	bne.n	800c37a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c340:	7b7a      	ldrb	r2, [r7, #13]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c348:	7b7a      	ldrb	r2, [r7, #13]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	32ae      	adds	r2, #174	@ 0xae
 800c34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d010      	beq.n	800c37a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c358:	7b7a      	ldrb	r2, [r7, #13]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	32ae      	adds	r2, #174	@ 0xae
 800c35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	6839      	ldr	r1, [r7, #0]
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	4798      	blx	r3
 800c36a:	4603      	mov	r3, r0
 800c36c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c36e:	e004      	b.n	800c37a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c370:	6839      	ldr	r1, [r7, #0]
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 fc2d 	bl	800cbd2 <USBD_CtlError>
              break;
 800c378:	e000      	b.n	800c37c <USBD_StdEPReq+0x1c8>
              break;
 800c37a:	bf00      	nop
          }
          break;
 800c37c:	e0ab      	b.n	800c4d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c384:	b2db      	uxtb	r3, r3
 800c386:	2b02      	cmp	r3, #2
 800c388:	d002      	beq.n	800c390 <USBD_StdEPReq+0x1dc>
 800c38a:	2b03      	cmp	r3, #3
 800c38c:	d032      	beq.n	800c3f4 <USBD_StdEPReq+0x240>
 800c38e:	e097      	b.n	800c4c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c390:	7bbb      	ldrb	r3, [r7, #14]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d007      	beq.n	800c3a6 <USBD_StdEPReq+0x1f2>
 800c396:	7bbb      	ldrb	r3, [r7, #14]
 800c398:	2b80      	cmp	r3, #128	@ 0x80
 800c39a:	d004      	beq.n	800c3a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c39c:	6839      	ldr	r1, [r7, #0]
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 fc17 	bl	800cbd2 <USBD_CtlError>
                break;
 800c3a4:	e091      	b.n	800c4ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	da0b      	bge.n	800c3c6 <USBD_StdEPReq+0x212>
 800c3ae:	7bbb      	ldrb	r3, [r7, #14]
 800c3b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	4413      	add	r3, r2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	3310      	adds	r3, #16
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	e00b      	b.n	800c3de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c3c6:	7bbb      	ldrb	r3, [r7, #14]
 800c3c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	4413      	add	r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	4413      	add	r3, r2
 800c3dc:	3304      	adds	r3, #4
 800c3de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	2202      	movs	r2, #2
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 fc61 	bl	800ccb4 <USBD_CtlSendData>
              break;
 800c3f2:	e06a      	b.n	800c4ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c3f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	da11      	bge.n	800c420 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c3fc:	7bbb      	ldrb	r3, [r7, #14]
 800c3fe:	f003 020f 	and.w	r2, r3, #15
 800c402:	6879      	ldr	r1, [r7, #4]
 800c404:	4613      	mov	r3, r2
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	4413      	add	r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	440b      	add	r3, r1
 800c40e:	3324      	adds	r3, #36	@ 0x24
 800c410:	881b      	ldrh	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d117      	bne.n	800c446 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c416:	6839      	ldr	r1, [r7, #0]
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fbda 	bl	800cbd2 <USBD_CtlError>
                  break;
 800c41e:	e054      	b.n	800c4ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c420:	7bbb      	ldrb	r3, [r7, #14]
 800c422:	f003 020f 	and.w	r2, r3, #15
 800c426:	6879      	ldr	r1, [r7, #4]
 800c428:	4613      	mov	r3, r2
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	4413      	add	r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	440b      	add	r3, r1
 800c432:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c436:	881b      	ldrh	r3, [r3, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d104      	bne.n	800c446 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c43c:	6839      	ldr	r1, [r7, #0]
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fbc7 	bl	800cbd2 <USBD_CtlError>
                  break;
 800c444:	e041      	b.n	800c4ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c446:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	da0b      	bge.n	800c466 <USBD_StdEPReq+0x2b2>
 800c44e:	7bbb      	ldrb	r3, [r7, #14]
 800c450:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c454:	4613      	mov	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	4413      	add	r3, r2
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	3310      	adds	r3, #16
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	4413      	add	r3, r2
 800c462:	3304      	adds	r3, #4
 800c464:	e00b      	b.n	800c47e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c466:	7bbb      	ldrb	r3, [r7, #14]
 800c468:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c46c:	4613      	mov	r3, r2
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	4413      	add	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	4413      	add	r3, r2
 800c47c:	3304      	adds	r3, #4
 800c47e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c480:	7bbb      	ldrb	r3, [r7, #14]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d002      	beq.n	800c48c <USBD_StdEPReq+0x2d8>
 800c486:	7bbb      	ldrb	r3, [r7, #14]
 800c488:	2b80      	cmp	r3, #128	@ 0x80
 800c48a:	d103      	bne.n	800c494 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	2200      	movs	r2, #0
 800c490:	601a      	str	r2, [r3, #0]
 800c492:	e00e      	b.n	800c4b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c494:	7bbb      	ldrb	r3, [r7, #14]
 800c496:	4619      	mov	r1, r3
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f001 f99d 	bl	800d7d8 <USBD_LL_IsStallEP>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d003      	beq.n	800c4ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	601a      	str	r2, [r3, #0]
 800c4aa:	e002      	b.n	800c4b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2202      	movs	r2, #2
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 fbfb 	bl	800ccb4 <USBD_CtlSendData>
              break;
 800c4be:	e004      	b.n	800c4ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fb85 	bl	800cbd2 <USBD_CtlError>
              break;
 800c4c8:	bf00      	nop
          }
          break;
 800c4ca:	e004      	b.n	800c4d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fb7f 	bl	800cbd2 <USBD_CtlError>
          break;
 800c4d4:	bf00      	nop
      }
      break;
 800c4d6:	e005      	b.n	800c4e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c4d8:	6839      	ldr	r1, [r7, #0]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 fb79 	bl	800cbd2 <USBD_CtlError>
      break;
 800c4e0:	e000      	b.n	800c4e4 <USBD_StdEPReq+0x330>
      break;
 800c4e2:	bf00      	nop
  }

  return ret;
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
	...

0800c4f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c4fe:	2300      	movs	r3, #0
 800c500:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c502:	2300      	movs	r3, #0
 800c504:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	885b      	ldrh	r3, [r3, #2]
 800c50a:	0a1b      	lsrs	r3, r3, #8
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	3b01      	subs	r3, #1
 800c510:	2b0e      	cmp	r3, #14
 800c512:	f200 8152 	bhi.w	800c7ba <USBD_GetDescriptor+0x2ca>
 800c516:	a201      	add	r2, pc, #4	@ (adr r2, 800c51c <USBD_GetDescriptor+0x2c>)
 800c518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51c:	0800c58d 	.word	0x0800c58d
 800c520:	0800c5a5 	.word	0x0800c5a5
 800c524:	0800c5e5 	.word	0x0800c5e5
 800c528:	0800c7bb 	.word	0x0800c7bb
 800c52c:	0800c7bb 	.word	0x0800c7bb
 800c530:	0800c75b 	.word	0x0800c75b
 800c534:	0800c787 	.word	0x0800c787
 800c538:	0800c7bb 	.word	0x0800c7bb
 800c53c:	0800c7bb 	.word	0x0800c7bb
 800c540:	0800c7bb 	.word	0x0800c7bb
 800c544:	0800c7bb 	.word	0x0800c7bb
 800c548:	0800c7bb 	.word	0x0800c7bb
 800c54c:	0800c7bb 	.word	0x0800c7bb
 800c550:	0800c7bb 	.word	0x0800c7bb
 800c554:	0800c559 	.word	0x0800c559
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c55e:	69db      	ldr	r3, [r3, #28]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00b      	beq.n	800c57c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c56a:	69db      	ldr	r3, [r3, #28]
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	7c12      	ldrb	r2, [r2, #16]
 800c570:	f107 0108 	add.w	r1, r7, #8
 800c574:	4610      	mov	r0, r2
 800c576:	4798      	blx	r3
 800c578:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c57a:	e126      	b.n	800c7ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fb27 	bl	800cbd2 <USBD_CtlError>
        err++;
 800c584:	7afb      	ldrb	r3, [r7, #11]
 800c586:	3301      	adds	r3, #1
 800c588:	72fb      	strb	r3, [r7, #11]
      break;
 800c58a:	e11e      	b.n	800c7ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	7c12      	ldrb	r2, [r2, #16]
 800c598:	f107 0108 	add.w	r1, r7, #8
 800c59c:	4610      	mov	r0, r2
 800c59e:	4798      	blx	r3
 800c5a0:	60f8      	str	r0, [r7, #12]
      break;
 800c5a2:	e112      	b.n	800c7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	7c1b      	ldrb	r3, [r3, #16]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10d      	bne.n	800c5c8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5b4:	f107 0208 	add.w	r2, r7, #8
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	4798      	blx	r3
 800c5bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	2202      	movs	r2, #2
 800c5c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c5c6:	e100      	b.n	800c7ca <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5d0:	f107 0208 	add.w	r2, r7, #8
 800c5d4:	4610      	mov	r0, r2
 800c5d6:	4798      	blx	r3
 800c5d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	2202      	movs	r2, #2
 800c5e0:	701a      	strb	r2, [r3, #0]
      break;
 800c5e2:	e0f2      	b.n	800c7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	885b      	ldrh	r3, [r3, #2]
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b05      	cmp	r3, #5
 800c5ec:	f200 80ac 	bhi.w	800c748 <USBD_GetDescriptor+0x258>
 800c5f0:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f8 <USBD_GetDescriptor+0x108>)
 800c5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f6:	bf00      	nop
 800c5f8:	0800c611 	.word	0x0800c611
 800c5fc:	0800c645 	.word	0x0800c645
 800c600:	0800c679 	.word	0x0800c679
 800c604:	0800c6ad 	.word	0x0800c6ad
 800c608:	0800c6e1 	.word	0x0800c6e1
 800c60c:	0800c715 	.word	0x0800c715
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d00b      	beq.n	800c634 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	7c12      	ldrb	r2, [r2, #16]
 800c628:	f107 0108 	add.w	r1, r7, #8
 800c62c:	4610      	mov	r0, r2
 800c62e:	4798      	blx	r3
 800c630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c632:	e091      	b.n	800c758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c634:	6839      	ldr	r1, [r7, #0]
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 facb 	bl	800cbd2 <USBD_CtlError>
            err++;
 800c63c:	7afb      	ldrb	r3, [r7, #11]
 800c63e:	3301      	adds	r3, #1
 800c640:	72fb      	strb	r3, [r7, #11]
          break;
 800c642:	e089      	b.n	800c758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00b      	beq.n	800c668 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c656:	689b      	ldr	r3, [r3, #8]
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	7c12      	ldrb	r2, [r2, #16]
 800c65c:	f107 0108 	add.w	r1, r7, #8
 800c660:	4610      	mov	r0, r2
 800c662:	4798      	blx	r3
 800c664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c666:	e077      	b.n	800c758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c668:	6839      	ldr	r1, [r7, #0]
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 fab1 	bl	800cbd2 <USBD_CtlError>
            err++;
 800c670:	7afb      	ldrb	r3, [r7, #11]
 800c672:	3301      	adds	r3, #1
 800c674:	72fb      	strb	r3, [r7, #11]
          break;
 800c676:	e06f      	b.n	800c758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00b      	beq.n	800c69c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	7c12      	ldrb	r2, [r2, #16]
 800c690:	f107 0108 	add.w	r1, r7, #8
 800c694:	4610      	mov	r0, r2
 800c696:	4798      	blx	r3
 800c698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c69a:	e05d      	b.n	800c758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c69c:	6839      	ldr	r1, [r7, #0]
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 fa97 	bl	800cbd2 <USBD_CtlError>
            err++;
 800c6a4:	7afb      	ldrb	r3, [r7, #11]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c6aa:	e055      	b.n	800c758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6b2:	691b      	ldr	r3, [r3, #16]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d00b      	beq.n	800c6d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	7c12      	ldrb	r2, [r2, #16]
 800c6c4:	f107 0108 	add.w	r1, r7, #8
 800c6c8:	4610      	mov	r0, r2
 800c6ca:	4798      	blx	r3
 800c6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6ce:	e043      	b.n	800c758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6d0:	6839      	ldr	r1, [r7, #0]
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 fa7d 	bl	800cbd2 <USBD_CtlError>
            err++;
 800c6d8:	7afb      	ldrb	r3, [r7, #11]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c6de:	e03b      	b.n	800c758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6e6:	695b      	ldr	r3, [r3, #20]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d00b      	beq.n	800c704 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6f2:	695b      	ldr	r3, [r3, #20]
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	7c12      	ldrb	r2, [r2, #16]
 800c6f8:	f107 0108 	add.w	r1, r7, #8
 800c6fc:	4610      	mov	r0, r2
 800c6fe:	4798      	blx	r3
 800c700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c702:	e029      	b.n	800c758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c704:	6839      	ldr	r1, [r7, #0]
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 fa63 	bl	800cbd2 <USBD_CtlError>
            err++;
 800c70c:	7afb      	ldrb	r3, [r7, #11]
 800c70e:	3301      	adds	r3, #1
 800c710:	72fb      	strb	r3, [r7, #11]
          break;
 800c712:	e021      	b.n	800c758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c71a:	699b      	ldr	r3, [r3, #24]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00b      	beq.n	800c738 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c726:	699b      	ldr	r3, [r3, #24]
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	7c12      	ldrb	r2, [r2, #16]
 800c72c:	f107 0108 	add.w	r1, r7, #8
 800c730:	4610      	mov	r0, r2
 800c732:	4798      	blx	r3
 800c734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c736:	e00f      	b.n	800c758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c738:	6839      	ldr	r1, [r7, #0]
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 fa49 	bl	800cbd2 <USBD_CtlError>
            err++;
 800c740:	7afb      	ldrb	r3, [r7, #11]
 800c742:	3301      	adds	r3, #1
 800c744:	72fb      	strb	r3, [r7, #11]
          break;
 800c746:	e007      	b.n	800c758 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fa41 	bl	800cbd2 <USBD_CtlError>
          err++;
 800c750:	7afb      	ldrb	r3, [r7, #11]
 800c752:	3301      	adds	r3, #1
 800c754:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c756:	bf00      	nop
      }
      break;
 800c758:	e037      	b.n	800c7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	7c1b      	ldrb	r3, [r3, #16]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d109      	bne.n	800c776 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c76a:	f107 0208 	add.w	r2, r7, #8
 800c76e:	4610      	mov	r0, r2
 800c770:	4798      	blx	r3
 800c772:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c774:	e029      	b.n	800c7ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c776:	6839      	ldr	r1, [r7, #0]
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fa2a 	bl	800cbd2 <USBD_CtlError>
        err++;
 800c77e:	7afb      	ldrb	r3, [r7, #11]
 800c780:	3301      	adds	r3, #1
 800c782:	72fb      	strb	r3, [r7, #11]
      break;
 800c784:	e021      	b.n	800c7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	7c1b      	ldrb	r3, [r3, #16]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10d      	bne.n	800c7aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c796:	f107 0208 	add.w	r2, r7, #8
 800c79a:	4610      	mov	r0, r2
 800c79c:	4798      	blx	r3
 800c79e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	2207      	movs	r2, #7
 800c7a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7a8:	e00f      	b.n	800c7ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c7aa:	6839      	ldr	r1, [r7, #0]
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fa10 	bl	800cbd2 <USBD_CtlError>
        err++;
 800c7b2:	7afb      	ldrb	r3, [r7, #11]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	72fb      	strb	r3, [r7, #11]
      break;
 800c7b8:	e007      	b.n	800c7ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 fa08 	bl	800cbd2 <USBD_CtlError>
      err++;
 800c7c2:	7afb      	ldrb	r3, [r7, #11]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	72fb      	strb	r3, [r7, #11]
      break;
 800c7c8:	bf00      	nop
  }

  if (err != 0U)
 800c7ca:	7afb      	ldrb	r3, [r7, #11]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d11e      	bne.n	800c80e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	88db      	ldrh	r3, [r3, #6]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d016      	beq.n	800c806 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c7d8:	893b      	ldrh	r3, [r7, #8]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d00e      	beq.n	800c7fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	88da      	ldrh	r2, [r3, #6]
 800c7e2:	893b      	ldrh	r3, [r7, #8]
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	bf28      	it	cs
 800c7e8:	4613      	movcs	r3, r2
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c7ee:	893b      	ldrh	r3, [r7, #8]
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	68f9      	ldr	r1, [r7, #12]
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fa5d 	bl	800ccb4 <USBD_CtlSendData>
 800c7fa:	e009      	b.n	800c810 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c7fc:	6839      	ldr	r1, [r7, #0]
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f9e7 	bl	800cbd2 <USBD_CtlError>
 800c804:	e004      	b.n	800c810 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 faae 	bl	800cd68 <USBD_CtlSendStatus>
 800c80c:	e000      	b.n	800c810 <USBD_GetDescriptor+0x320>
    return;
 800c80e:	bf00      	nop
  }
}
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop

0800c818 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	889b      	ldrh	r3, [r3, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d131      	bne.n	800c88e <USBD_SetAddress+0x76>
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	88db      	ldrh	r3, [r3, #6]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d12d      	bne.n	800c88e <USBD_SetAddress+0x76>
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	885b      	ldrh	r3, [r3, #2]
 800c836:	2b7f      	cmp	r3, #127	@ 0x7f
 800c838:	d829      	bhi.n	800c88e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	885b      	ldrh	r3, [r3, #2]
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c844:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	2b03      	cmp	r3, #3
 800c850:	d104      	bne.n	800c85c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f9bc 	bl	800cbd2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c85a:	e01d      	b.n	800c898 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	7bfa      	ldrb	r2, [r7, #15]
 800c860:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c864:	7bfb      	ldrb	r3, [r7, #15]
 800c866:	4619      	mov	r1, r3
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 ffe1 	bl	800d830 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 fa7a 	bl	800cd68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c874:	7bfb      	ldrb	r3, [r7, #15]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d004      	beq.n	800c884 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2202      	movs	r2, #2
 800c87e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c882:	e009      	b.n	800c898 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2201      	movs	r2, #1
 800c888:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c88c:	e004      	b.n	800c898 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c88e:	6839      	ldr	r1, [r7, #0]
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 f99e 	bl	800cbd2 <USBD_CtlError>
  }
}
 800c896:	bf00      	nop
 800c898:	bf00      	nop
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	885b      	ldrh	r3, [r3, #2]
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	4b4e      	ldr	r3, [pc, #312]	@ (800c9f0 <USBD_SetConfig+0x150>)
 800c8b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c8b8:	4b4d      	ldr	r3, [pc, #308]	@ (800c9f0 <USBD_SetConfig+0x150>)
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d905      	bls.n	800c8cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c8c0:	6839      	ldr	r1, [r7, #0]
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f985 	bl	800cbd2 <USBD_CtlError>
    return USBD_FAIL;
 800c8c8:	2303      	movs	r3, #3
 800c8ca:	e08c      	b.n	800c9e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d002      	beq.n	800c8de <USBD_SetConfig+0x3e>
 800c8d8:	2b03      	cmp	r3, #3
 800c8da:	d029      	beq.n	800c930 <USBD_SetConfig+0x90>
 800c8dc:	e075      	b.n	800c9ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c8de:	4b44      	ldr	r3, [pc, #272]	@ (800c9f0 <USBD_SetConfig+0x150>)
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d020      	beq.n	800c928 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c8e6:	4b42      	ldr	r3, [pc, #264]	@ (800c9f0 <USBD_SetConfig+0x150>)
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c8f0:	4b3f      	ldr	r3, [pc, #252]	@ (800c9f0 <USBD_SetConfig+0x150>)
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f7fe ffb9 	bl	800b86e <USBD_SetClassConfig>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c900:	7bfb      	ldrb	r3, [r7, #15]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d008      	beq.n	800c918 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f962 	bl	800cbd2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2202      	movs	r2, #2
 800c912:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c916:	e065      	b.n	800c9e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 fa25 	bl	800cd68 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2203      	movs	r2, #3
 800c922:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c926:	e05d      	b.n	800c9e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 fa1d 	bl	800cd68 <USBD_CtlSendStatus>
      break;
 800c92e:	e059      	b.n	800c9e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c930:	4b2f      	ldr	r3, [pc, #188]	@ (800c9f0 <USBD_SetConfig+0x150>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d112      	bne.n	800c95e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2202      	movs	r2, #2
 800c93c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c940:	4b2b      	ldr	r3, [pc, #172]	@ (800c9f0 <USBD_SetConfig+0x150>)
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	461a      	mov	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c94a:	4b29      	ldr	r3, [pc, #164]	@ (800c9f0 <USBD_SetConfig+0x150>)
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	4619      	mov	r1, r3
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f7fe ffa8 	bl	800b8a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 fa06 	bl	800cd68 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c95c:	e042      	b.n	800c9e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c95e:	4b24      	ldr	r3, [pc, #144]	@ (800c9f0 <USBD_SetConfig+0x150>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	461a      	mov	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d02a      	beq.n	800c9c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	b2db      	uxtb	r3, r3
 800c972:	4619      	mov	r1, r3
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7fe ff96 	bl	800b8a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c97a:	4b1d      	ldr	r3, [pc, #116]	@ (800c9f0 <USBD_SetConfig+0x150>)
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	461a      	mov	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c984:	4b1a      	ldr	r3, [pc, #104]	@ (800c9f0 <USBD_SetConfig+0x150>)
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	4619      	mov	r1, r3
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7fe ff6f 	bl	800b86e <USBD_SetClassConfig>
 800c990:	4603      	mov	r3, r0
 800c992:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c994:	7bfb      	ldrb	r3, [r7, #15]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00f      	beq.n	800c9ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c99a:	6839      	ldr	r1, [r7, #0]
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 f918 	bl	800cbd2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7fe ff7b 	bl	800b8a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2202      	movs	r2, #2
 800c9b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c9b8:	e014      	b.n	800c9e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 f9d4 	bl	800cd68 <USBD_CtlSendStatus>
      break;
 800c9c0:	e010      	b.n	800c9e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 f9d0 	bl	800cd68 <USBD_CtlSendStatus>
      break;
 800c9c8:	e00c      	b.n	800c9e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c9ca:	6839      	ldr	r1, [r7, #0]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 f900 	bl	800cbd2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9d2:	4b07      	ldr	r3, [pc, #28]	@ (800c9f0 <USBD_SetConfig+0x150>)
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7fe ff64 	bl	800b8a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c9de:	2303      	movs	r3, #3
 800c9e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c9e2:	bf00      	nop
  }

  return ret;
 800c9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	20003990 	.word	0x20003990

0800c9f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	88db      	ldrh	r3, [r3, #6]
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d004      	beq.n	800ca10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ca06:	6839      	ldr	r1, [r7, #0]
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 f8e2 	bl	800cbd2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ca0e:	e023      	b.n	800ca58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	2b02      	cmp	r3, #2
 800ca1a:	dc02      	bgt.n	800ca22 <USBD_GetConfig+0x2e>
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	dc03      	bgt.n	800ca28 <USBD_GetConfig+0x34>
 800ca20:	e015      	b.n	800ca4e <USBD_GetConfig+0x5a>
 800ca22:	2b03      	cmp	r3, #3
 800ca24:	d00b      	beq.n	800ca3e <USBD_GetConfig+0x4a>
 800ca26:	e012      	b.n	800ca4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	3308      	adds	r3, #8
 800ca32:	2201      	movs	r2, #1
 800ca34:	4619      	mov	r1, r3
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f000 f93c 	bl	800ccb4 <USBD_CtlSendData>
        break;
 800ca3c:	e00c      	b.n	800ca58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	3304      	adds	r3, #4
 800ca42:	2201      	movs	r2, #1
 800ca44:	4619      	mov	r1, r3
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 f934 	bl	800ccb4 <USBD_CtlSendData>
        break;
 800ca4c:	e004      	b.n	800ca58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ca4e:	6839      	ldr	r1, [r7, #0]
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 f8be 	bl	800cbd2 <USBD_CtlError>
        break;
 800ca56:	bf00      	nop
}
 800ca58:	bf00      	nop
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	3b01      	subs	r3, #1
 800ca74:	2b02      	cmp	r3, #2
 800ca76:	d81e      	bhi.n	800cab6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	88db      	ldrh	r3, [r3, #6]
 800ca7c:	2b02      	cmp	r3, #2
 800ca7e:	d004      	beq.n	800ca8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 f8a5 	bl	800cbd2 <USBD_CtlError>
        break;
 800ca88:	e01a      	b.n	800cac0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d005      	beq.n	800caa6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	f043 0202 	orr.w	r2, r3, #2
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	330c      	adds	r3, #12
 800caaa:	2202      	movs	r2, #2
 800caac:	4619      	mov	r1, r3
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 f900 	bl	800ccb4 <USBD_CtlSendData>
      break;
 800cab4:	e004      	b.n	800cac0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cab6:	6839      	ldr	r1, [r7, #0]
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 f88a 	bl	800cbd2 <USBD_CtlError>
      break;
 800cabe:	bf00      	nop
  }
}
 800cac0:	bf00      	nop
 800cac2:	3708      	adds	r7, #8
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	885b      	ldrh	r3, [r3, #2]
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d107      	bne.n	800caea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2201      	movs	r2, #1
 800cade:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f000 f940 	bl	800cd68 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cae8:	e013      	b.n	800cb12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	885b      	ldrh	r3, [r3, #2]
 800caee:	2b02      	cmp	r3, #2
 800caf0:	d10b      	bne.n	800cb0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	889b      	ldrh	r3, [r3, #4]
 800caf6:	0a1b      	lsrs	r3, r3, #8
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 f930 	bl	800cd68 <USBD_CtlSendStatus>
}
 800cb08:	e003      	b.n	800cb12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cb0a:	6839      	ldr	r1, [r7, #0]
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f860 	bl	800cbd2 <USBD_CtlError>
}
 800cb12:	bf00      	nop
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	d80b      	bhi.n	800cb4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	885b      	ldrh	r3, [r3, #2]
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d10c      	bne.n	800cb54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 f910 	bl	800cd68 <USBD_CtlSendStatus>
      }
      break;
 800cb48:	e004      	b.n	800cb54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cb4a:	6839      	ldr	r1, [r7, #0]
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 f840 	bl	800cbd2 <USBD_CtlError>
      break;
 800cb52:	e000      	b.n	800cb56 <USBD_ClrFeature+0x3c>
      break;
 800cb54:	bf00      	nop
  }
}
 800cb56:	bf00      	nop
 800cb58:	3708      	adds	r7, #8
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b084      	sub	sp, #16
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	781a      	ldrb	r2, [r3, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	3301      	adds	r3, #1
 800cb78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	781a      	ldrb	r2, [r3, #0]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	3301      	adds	r3, #1
 800cb86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cb88:	68f8      	ldr	r0, [r7, #12]
 800cb8a:	f7ff fa16 	bl	800bfba <SWAPBYTE>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	461a      	mov	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f7ff fa09 	bl	800bfba <SWAPBYTE>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	461a      	mov	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f7ff f9fc 	bl	800bfba <SWAPBYTE>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	80da      	strh	r2, [r3, #6]
}
 800cbca:	bf00      	nop
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b082      	sub	sp, #8
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
 800cbda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbdc:	2180      	movs	r1, #128	@ 0x80
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 fd8e 	bl	800d700 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f000 fd8a 	bl	800d700 <USBD_LL_StallEP>
}
 800cbec:	bf00      	nop
 800cbee:	3708      	adds	r7, #8
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b086      	sub	sp, #24
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc00:	2300      	movs	r3, #0
 800cc02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d036      	beq.n	800cc78 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cc0e:	6938      	ldr	r0, [r7, #16]
 800cc10:	f000 f836 	bl	800cc80 <USBD_GetLen>
 800cc14:	4603      	mov	r3, r0
 800cc16:	3301      	adds	r3, #1
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cc22:	7dfb      	ldrb	r3, [r7, #23]
 800cc24:	68ba      	ldr	r2, [r7, #8]
 800cc26:	4413      	add	r3, r2
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	7812      	ldrb	r2, [r2, #0]
 800cc2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc2e:	7dfb      	ldrb	r3, [r7, #23]
 800cc30:	3301      	adds	r3, #1
 800cc32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cc34:	7dfb      	ldrb	r3, [r7, #23]
 800cc36:	68ba      	ldr	r2, [r7, #8]
 800cc38:	4413      	add	r3, r2
 800cc3a:	2203      	movs	r2, #3
 800cc3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc3e:	7dfb      	ldrb	r3, [r7, #23]
 800cc40:	3301      	adds	r3, #1
 800cc42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cc44:	e013      	b.n	800cc6e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cc46:	7dfb      	ldrb	r3, [r7, #23]
 800cc48:	68ba      	ldr	r2, [r7, #8]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	693a      	ldr	r2, [r7, #16]
 800cc4e:	7812      	ldrb	r2, [r2, #0]
 800cc50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	3301      	adds	r3, #1
 800cc56:	613b      	str	r3, [r7, #16]
    idx++;
 800cc58:	7dfb      	ldrb	r3, [r7, #23]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cc5e:	7dfb      	ldrb	r3, [r7, #23]
 800cc60:	68ba      	ldr	r2, [r7, #8]
 800cc62:	4413      	add	r3, r2
 800cc64:	2200      	movs	r2, #0
 800cc66:	701a      	strb	r2, [r3, #0]
    idx++;
 800cc68:	7dfb      	ldrb	r3, [r7, #23]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1e7      	bne.n	800cc46 <USBD_GetString+0x52>
 800cc76:	e000      	b.n	800cc7a <USBD_GetString+0x86>
    return;
 800cc78:	bf00      	nop
  }
}
 800cc7a:	3718      	adds	r7, #24
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b085      	sub	sp, #20
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cc90:	e005      	b.n	800cc9e <USBD_GetLen+0x1e>
  {
    len++;
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
 800cc94:	3301      	adds	r3, #1
 800cc96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d1f5      	bne.n	800cc92 <USBD_GetLen+0x12>
  }

  return len;
 800cca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3714      	adds	r7, #20
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr

0800ccb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2202      	movs	r2, #2
 800ccc4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	2100      	movs	r1, #0
 800ccda:	68f8      	ldr	r0, [r7, #12]
 800ccdc:	f000 fdde 	bl	800d89c <USBD_LL_Transmit>

  return USBD_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3710      	adds	r7, #16
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b084      	sub	sp, #16
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	60f8      	str	r0, [r7, #12]
 800ccf2:	60b9      	str	r1, [r7, #8]
 800ccf4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68ba      	ldr	r2, [r7, #8]
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f000 fdcd 	bl	800d89c <USBD_LL_Transmit>

  return USBD_OK;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3710      	adds	r7, #16
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2203      	movs	r2, #3
 800cd1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	68ba      	ldr	r2, [r7, #8]
 800cd34:	2100      	movs	r1, #0
 800cd36:	68f8      	ldr	r0, [r7, #12]
 800cd38:	f000 fde8 	bl	800d90c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b084      	sub	sp, #16
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	60f8      	str	r0, [r7, #12]
 800cd4e:	60b9      	str	r1, [r7, #8]
 800cd50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	2100      	movs	r1, #0
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f000 fdd7 	bl	800d90c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2204      	movs	r2, #4
 800cd74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cd78:	2300      	movs	r3, #0
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 fd8c 	bl	800d89c <USBD_LL_Transmit>

  return USBD_OK;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b082      	sub	sp, #8
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2205      	movs	r2, #5
 800cd9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd9e:	2300      	movs	r3, #0
 800cda0:	2200      	movs	r2, #0
 800cda2:	2100      	movs	r1, #0
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 fdb1 	bl	800d90c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cdb8:	2200      	movs	r2, #0
 800cdba:	4912      	ldr	r1, [pc, #72]	@ (800ce04 <MX_USB_DEVICE_Init+0x50>)
 800cdbc:	4812      	ldr	r0, [pc, #72]	@ (800ce08 <MX_USB_DEVICE_Init+0x54>)
 800cdbe:	f7fe fcd9 	bl	800b774 <USBD_Init>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d001      	beq.n	800cdcc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cdc8:	f7f4 facf 	bl	800136a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cdcc:	490f      	ldr	r1, [pc, #60]	@ (800ce0c <MX_USB_DEVICE_Init+0x58>)
 800cdce:	480e      	ldr	r0, [pc, #56]	@ (800ce08 <MX_USB_DEVICE_Init+0x54>)
 800cdd0:	f7fe fd00 	bl	800b7d4 <USBD_RegisterClass>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d001      	beq.n	800cdde <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cdda:	f7f4 fac6 	bl	800136a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cdde:	490c      	ldr	r1, [pc, #48]	@ (800ce10 <MX_USB_DEVICE_Init+0x5c>)
 800cde0:	4809      	ldr	r0, [pc, #36]	@ (800ce08 <MX_USB_DEVICE_Init+0x54>)
 800cde2:	f7fe fbf7 	bl	800b5d4 <USBD_CDC_RegisterInterface>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d001      	beq.n	800cdf0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cdec:	f7f4 fabd 	bl	800136a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cdf0:	4805      	ldr	r0, [pc, #20]	@ (800ce08 <MX_USB_DEVICE_Init+0x54>)
 800cdf2:	f7fe fd25 	bl	800b840 <USBD_Start>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d001      	beq.n	800ce00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cdfc:	f7f4 fab5 	bl	800136a <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce00:	bf00      	nop
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	200000ac 	.word	0x200000ac
 800ce08:	20003994 	.word	0x20003994
 800ce0c:	20000018 	.word	0x20000018
 800ce10:	20000098 	.word	0x20000098

0800ce14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce18:	2200      	movs	r2, #0
 800ce1a:	4905      	ldr	r1, [pc, #20]	@ (800ce30 <CDC_Init_FS+0x1c>)
 800ce1c:	4805      	ldr	r0, [pc, #20]	@ (800ce34 <CDC_Init_FS+0x20>)
 800ce1e:	f7fe fbf3 	bl	800b608 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ce22:	4905      	ldr	r1, [pc, #20]	@ (800ce38 <CDC_Init_FS+0x24>)
 800ce24:	4803      	ldr	r0, [pc, #12]	@ (800ce34 <CDC_Init_FS+0x20>)
 800ce26:	f7fe fc11 	bl	800b64c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ce2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	20004470 	.word	0x20004470
 800ce34:	20003994 	.word	0x20003994
 800ce38:	20003c70 	.word	0x20003c70

0800ce3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ce40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr

0800ce4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	4603      	mov	r3, r0
 800ce54:	6039      	str	r1, [r7, #0]
 800ce56:	71fb      	strb	r3, [r7, #7]
 800ce58:	4613      	mov	r3, r2
 800ce5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ce5c:	79fb      	ldrb	r3, [r7, #7]
 800ce5e:	2b23      	cmp	r3, #35	@ 0x23
 800ce60:	d84a      	bhi.n	800cef8 <CDC_Control_FS+0xac>
 800ce62:	a201      	add	r2, pc, #4	@ (adr r2, 800ce68 <CDC_Control_FS+0x1c>)
 800ce64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce68:	0800cef9 	.word	0x0800cef9
 800ce6c:	0800cef9 	.word	0x0800cef9
 800ce70:	0800cef9 	.word	0x0800cef9
 800ce74:	0800cef9 	.word	0x0800cef9
 800ce78:	0800cef9 	.word	0x0800cef9
 800ce7c:	0800cef9 	.word	0x0800cef9
 800ce80:	0800cef9 	.word	0x0800cef9
 800ce84:	0800cef9 	.word	0x0800cef9
 800ce88:	0800cef9 	.word	0x0800cef9
 800ce8c:	0800cef9 	.word	0x0800cef9
 800ce90:	0800cef9 	.word	0x0800cef9
 800ce94:	0800cef9 	.word	0x0800cef9
 800ce98:	0800cef9 	.word	0x0800cef9
 800ce9c:	0800cef9 	.word	0x0800cef9
 800cea0:	0800cef9 	.word	0x0800cef9
 800cea4:	0800cef9 	.word	0x0800cef9
 800cea8:	0800cef9 	.word	0x0800cef9
 800ceac:	0800cef9 	.word	0x0800cef9
 800ceb0:	0800cef9 	.word	0x0800cef9
 800ceb4:	0800cef9 	.word	0x0800cef9
 800ceb8:	0800cef9 	.word	0x0800cef9
 800cebc:	0800cef9 	.word	0x0800cef9
 800cec0:	0800cef9 	.word	0x0800cef9
 800cec4:	0800cef9 	.word	0x0800cef9
 800cec8:	0800cef9 	.word	0x0800cef9
 800cecc:	0800cef9 	.word	0x0800cef9
 800ced0:	0800cef9 	.word	0x0800cef9
 800ced4:	0800cef9 	.word	0x0800cef9
 800ced8:	0800cef9 	.word	0x0800cef9
 800cedc:	0800cef9 	.word	0x0800cef9
 800cee0:	0800cef9 	.word	0x0800cef9
 800cee4:	0800cef9 	.word	0x0800cef9
 800cee8:	0800cef9 	.word	0x0800cef9
 800ceec:	0800cef9 	.word	0x0800cef9
 800cef0:	0800cef9 	.word	0x0800cef9
 800cef4:	0800cef9 	.word	0x0800cef9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cef8:	bf00      	nop
  }

  return (USBD_OK);
 800cefa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cf12:	6879      	ldr	r1, [r7, #4]
 800cf14:	4808      	ldr	r0, [pc, #32]	@ (800cf38 <CDC_Receive_FS+0x30>)
 800cf16:	f7fe fb99 	bl	800b64c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cf1a:	4807      	ldr	r0, [pc, #28]	@ (800cf38 <CDC_Receive_FS+0x30>)
 800cf1c:	f7fe fbf4 	bl	800b708 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  //USB_My_Receive(Buf, *Len);
  comms_cdc_rx_callback(Buf, *Len);
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7f3 fef6 	bl	8000d18 <comms_cdc_rx_callback>

  return (USBD_OK);
 800cf2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3708      	adds	r7, #8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	20003994 	.word	0x20003994

0800cf3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b084      	sub	sp, #16
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	460b      	mov	r3, r1
 800cf46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cf4c:	4b0d      	ldr	r3, [pc, #52]	@ (800cf84 <CDC_Transmit_FS+0x48>)
 800cf4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cf52:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d001      	beq.n	800cf62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	e00b      	b.n	800cf7a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cf62:	887b      	ldrh	r3, [r7, #2]
 800cf64:	461a      	mov	r2, r3
 800cf66:	6879      	ldr	r1, [r7, #4]
 800cf68:	4806      	ldr	r0, [pc, #24]	@ (800cf84 <CDC_Transmit_FS+0x48>)
 800cf6a:	f7fe fb4d 	bl	800b608 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cf6e:	4805      	ldr	r0, [pc, #20]	@ (800cf84 <CDC_Transmit_FS+0x48>)
 800cf70:	f7fe fb8a 	bl	800b688 <USBD_CDC_TransmitPacket>
 800cf74:	4603      	mov	r3, r0
 800cf76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cf78:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	20003994 	.word	0x20003994

0800cf88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b087      	sub	sp, #28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	4613      	mov	r3, r2
 800cf94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cf96:	2300      	movs	r3, #0
 800cf98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cf9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	371c      	adds	r7, #28
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr
	...

0800cfac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	6039      	str	r1, [r7, #0]
 800cfb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	2212      	movs	r2, #18
 800cfbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cfbe:	4b03      	ldr	r3, [pc, #12]	@ (800cfcc <USBD_FS_DeviceDescriptor+0x20>)
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr
 800cfcc:	200000cc 	.word	0x200000cc

0800cfd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	6039      	str	r1, [r7, #0]
 800cfda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	2204      	movs	r2, #4
 800cfe0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cfe2:	4b03      	ldr	r3, [pc, #12]	@ (800cff0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	200000ec 	.word	0x200000ec

0800cff4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	4603      	mov	r3, r0
 800cffc:	6039      	str	r1, [r7, #0]
 800cffe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d000:	79fb      	ldrb	r3, [r7, #7]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d105      	bne.n	800d012 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d006:	683a      	ldr	r2, [r7, #0]
 800d008:	4907      	ldr	r1, [pc, #28]	@ (800d028 <USBD_FS_ProductStrDescriptor+0x34>)
 800d00a:	4808      	ldr	r0, [pc, #32]	@ (800d02c <USBD_FS_ProductStrDescriptor+0x38>)
 800d00c:	f7ff fdf2 	bl	800cbf4 <USBD_GetString>
 800d010:	e004      	b.n	800d01c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d012:	683a      	ldr	r2, [r7, #0]
 800d014:	4904      	ldr	r1, [pc, #16]	@ (800d028 <USBD_FS_ProductStrDescriptor+0x34>)
 800d016:	4805      	ldr	r0, [pc, #20]	@ (800d02c <USBD_FS_ProductStrDescriptor+0x38>)
 800d018:	f7ff fdec 	bl	800cbf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d01c:	4b02      	ldr	r3, [pc, #8]	@ (800d028 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3708      	adds	r7, #8
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	20004c70 	.word	0x20004c70
 800d02c:	0800db08 	.word	0x0800db08

0800d030 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	4603      	mov	r3, r0
 800d038:	6039      	str	r1, [r7, #0]
 800d03a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	4904      	ldr	r1, [pc, #16]	@ (800d050 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d040:	4804      	ldr	r0, [pc, #16]	@ (800d054 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d042:	f7ff fdd7 	bl	800cbf4 <USBD_GetString>
  return USBD_StrDesc;
 800d046:	4b02      	ldr	r3, [pc, #8]	@ (800d050 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	20004c70 	.word	0x20004c70
 800d054:	0800db20 	.word	0x0800db20

0800d058 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	4603      	mov	r3, r0
 800d060:	6039      	str	r1, [r7, #0]
 800d062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	221a      	movs	r2, #26
 800d068:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d06a:	f000 f855 	bl	800d118 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d06e:	4b02      	ldr	r3, [pc, #8]	@ (800d078 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d070:	4618      	mov	r0, r3
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	200000f0 	.word	0x200000f0

0800d07c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	4603      	mov	r3, r0
 800d084:	6039      	str	r1, [r7, #0]
 800d086:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d088:	79fb      	ldrb	r3, [r7, #7]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d105      	bne.n	800d09a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	4907      	ldr	r1, [pc, #28]	@ (800d0b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d092:	4808      	ldr	r0, [pc, #32]	@ (800d0b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d094:	f7ff fdae 	bl	800cbf4 <USBD_GetString>
 800d098:	e004      	b.n	800d0a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d09a:	683a      	ldr	r2, [r7, #0]
 800d09c:	4904      	ldr	r1, [pc, #16]	@ (800d0b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d09e:	4805      	ldr	r0, [pc, #20]	@ (800d0b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d0a0:	f7ff fda8 	bl	800cbf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0a4:	4b02      	ldr	r3, [pc, #8]	@ (800d0b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3708      	adds	r7, #8
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	20004c70 	.word	0x20004c70
 800d0b4:	0800db34 	.word	0x0800db34

0800d0b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	4603      	mov	r3, r0
 800d0c0:	6039      	str	r1, [r7, #0]
 800d0c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d0c4:	79fb      	ldrb	r3, [r7, #7]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d105      	bne.n	800d0d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0ca:	683a      	ldr	r2, [r7, #0]
 800d0cc:	4907      	ldr	r1, [pc, #28]	@ (800d0ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0ce:	4808      	ldr	r0, [pc, #32]	@ (800d0f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0d0:	f7ff fd90 	bl	800cbf4 <USBD_GetString>
 800d0d4:	e004      	b.n	800d0e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0d6:	683a      	ldr	r2, [r7, #0]
 800d0d8:	4904      	ldr	r1, [pc, #16]	@ (800d0ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0da:	4805      	ldr	r0, [pc, #20]	@ (800d0f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0dc:	f7ff fd8a 	bl	800cbf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0e0:	4b02      	ldr	r3, [pc, #8]	@ (800d0ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3708      	adds	r7, #8
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	20004c70 	.word	0x20004c70
 800d0f0:	0800db40 	.word	0x0800db40

0800d0f4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	6039      	str	r1, [r7, #0]
 800d0fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	220c      	movs	r2, #12
 800d104:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d106:	4b03      	ldr	r3, [pc, #12]	@ (800d114 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d108:	4618      	mov	r0, r3
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	200000e0 	.word	0x200000e0

0800d118 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d11e:	4b0f      	ldr	r3, [pc, #60]	@ (800d15c <Get_SerialNum+0x44>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d124:	4b0e      	ldr	r3, [pc, #56]	@ (800d160 <Get_SerialNum+0x48>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d12a:	4b0e      	ldr	r3, [pc, #56]	@ (800d164 <Get_SerialNum+0x4c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4413      	add	r3, r2
 800d136:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d009      	beq.n	800d152 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d13e:	2208      	movs	r2, #8
 800d140:	4909      	ldr	r1, [pc, #36]	@ (800d168 <Get_SerialNum+0x50>)
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f000 f814 	bl	800d170 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d148:	2204      	movs	r2, #4
 800d14a:	4908      	ldr	r1, [pc, #32]	@ (800d16c <Get_SerialNum+0x54>)
 800d14c:	68b8      	ldr	r0, [r7, #8]
 800d14e:	f000 f80f 	bl	800d170 <IntToUnicode>
  }
}
 800d152:	bf00      	nop
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	1fff7590 	.word	0x1fff7590
 800d160:	1fff7594 	.word	0x1fff7594
 800d164:	1fff7598 	.word	0x1fff7598
 800d168:	200000f2 	.word	0x200000f2
 800d16c:	20000102 	.word	0x20000102

0800d170 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d170:	b480      	push	{r7}
 800d172:	b087      	sub	sp, #28
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	4613      	mov	r3, r2
 800d17c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d182:	2300      	movs	r3, #0
 800d184:	75fb      	strb	r3, [r7, #23]
 800d186:	e027      	b.n	800d1d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	0f1b      	lsrs	r3, r3, #28
 800d18c:	2b09      	cmp	r3, #9
 800d18e:	d80b      	bhi.n	800d1a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	0f1b      	lsrs	r3, r3, #28
 800d194:	b2da      	uxtb	r2, r3
 800d196:	7dfb      	ldrb	r3, [r7, #23]
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	4619      	mov	r1, r3
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	440b      	add	r3, r1
 800d1a0:	3230      	adds	r2, #48	@ 0x30
 800d1a2:	b2d2      	uxtb	r2, r2
 800d1a4:	701a      	strb	r2, [r3, #0]
 800d1a6:	e00a      	b.n	800d1be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	0f1b      	lsrs	r3, r3, #28
 800d1ac:	b2da      	uxtb	r2, r3
 800d1ae:	7dfb      	ldrb	r3, [r7, #23]
 800d1b0:	005b      	lsls	r3, r3, #1
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	440b      	add	r3, r1
 800d1b8:	3237      	adds	r2, #55	@ 0x37
 800d1ba:	b2d2      	uxtb	r2, r2
 800d1bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	011b      	lsls	r3, r3, #4
 800d1c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	68ba      	ldr	r2, [r7, #8]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d1d2:	7dfb      	ldrb	r3, [r7, #23]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	75fb      	strb	r3, [r7, #23]
 800d1d8:	7dfa      	ldrb	r2, [r7, #23]
 800d1da:	79fb      	ldrb	r3, [r7, #7]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d3d3      	bcc.n	800d188 <IntToUnicode+0x18>
  }
}
 800d1e0:	bf00      	nop
 800d1e2:	bf00      	nop
 800d1e4:	371c      	adds	r7, #28
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr
	...

0800d1f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b0b0      	sub	sp, #192	@ 0xc0
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1f8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	601a      	str	r2, [r3, #0]
 800d200:	605a      	str	r2, [r3, #4]
 800d202:	609a      	str	r2, [r3, #8]
 800d204:	60da      	str	r2, [r3, #12]
 800d206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d208:	f107 0318 	add.w	r3, r7, #24
 800d20c:	2294      	movs	r2, #148	@ 0x94
 800d20e:	2100      	movs	r1, #0
 800d210:	4618      	mov	r0, r3
 800d212:	f000 fc33 	bl	800da7c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d21e:	d174      	bne.n	800d30a <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d220:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d224:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d226:	2300      	movs	r3, #0
 800d228:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d22c:	f107 0318 	add.w	r3, r7, #24
 800d230:	4618      	mov	r0, r3
 800d232:	f7f9 f829 	bl	8006288 <HAL_RCCEx_PeriphCLKConfig>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d001      	beq.n	800d240 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d23c:	f7f4 f895 	bl	800136a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d240:	4b34      	ldr	r3, [pc, #208]	@ (800d314 <HAL_PCD_MspInit+0x124>)
 800d242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d244:	4a33      	ldr	r2, [pc, #204]	@ (800d314 <HAL_PCD_MspInit+0x124>)
 800d246:	f043 0301 	orr.w	r3, r3, #1
 800d24a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d24c:	4b31      	ldr	r3, [pc, #196]	@ (800d314 <HAL_PCD_MspInit+0x124>)
 800d24e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d250:	f003 0301 	and.w	r3, r3, #1
 800d254:	617b      	str	r3, [r7, #20]
 800d256:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d258:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800d25c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d260:	2302      	movs	r3, #2
 800d262:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d266:	2300      	movs	r3, #0
 800d268:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d26c:	2303      	movs	r3, #3
 800d26e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d272:	230a      	movs	r3, #10
 800d274:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d278:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d27c:	4619      	mov	r1, r3
 800d27e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d282:	f7f6 fcc1 	bl	8003c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d286:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d28a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d28e:	2300      	movs	r3, #0
 800d290:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d294:	2300      	movs	r3, #0
 800d296:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d29a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d29e:	4619      	mov	r1, r3
 800d2a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d2a4:	f7f6 fcb0 	bl	8003c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d2a8:	4b1a      	ldr	r3, [pc, #104]	@ (800d314 <HAL_PCD_MspInit+0x124>)
 800d2aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2ac:	4a19      	ldr	r2, [pc, #100]	@ (800d314 <HAL_PCD_MspInit+0x124>)
 800d2ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d2b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d2b4:	4b17      	ldr	r3, [pc, #92]	@ (800d314 <HAL_PCD_MspInit+0x124>)
 800d2b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d2bc:	613b      	str	r3, [r7, #16]
 800d2be:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d2c0:	4b14      	ldr	r3, [pc, #80]	@ (800d314 <HAL_PCD_MspInit+0x124>)
 800d2c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d114      	bne.n	800d2f6 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d2cc:	4b11      	ldr	r3, [pc, #68]	@ (800d314 <HAL_PCD_MspInit+0x124>)
 800d2ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2d0:	4a10      	ldr	r2, [pc, #64]	@ (800d314 <HAL_PCD_MspInit+0x124>)
 800d2d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d2d6:	6593      	str	r3, [r2, #88]	@ 0x58
 800d2d8:	4b0e      	ldr	r3, [pc, #56]	@ (800d314 <HAL_PCD_MspInit+0x124>)
 800d2da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2e0:	60fb      	str	r3, [r7, #12]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800d2e4:	f7f8 f8d8 	bl	8005498 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d314 <HAL_PCD_MspInit+0x124>)
 800d2ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2ec:	4a09      	ldr	r2, [pc, #36]	@ (800d314 <HAL_PCD_MspInit+0x124>)
 800d2ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d2f2:	6593      	str	r3, [r2, #88]	@ 0x58
 800d2f4:	e001      	b.n	800d2fa <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d2f6:	f7f8 f8cf 	bl	8005498 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	2043      	movs	r0, #67	@ 0x43
 800d300:	f7f6 f8d5 	bl	80034ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d304:	2043      	movs	r0, #67	@ 0x43
 800d306:	f7f6 f8ee 	bl	80034e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d30a:	bf00      	nop
 800d30c:	37c0      	adds	r7, #192	@ 0xc0
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	40021000 	.word	0x40021000

0800d318 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800d32c:	4619      	mov	r1, r3
 800d32e:	4610      	mov	r0, r2
 800d330:	f7fe fad3 	bl	800b8da <USBD_LL_SetupStage>
}
 800d334:	bf00      	nop
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	460b      	mov	r3, r1
 800d346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d34e:	78fa      	ldrb	r2, [r7, #3]
 800d350:	6879      	ldr	r1, [r7, #4]
 800d352:	4613      	mov	r3, r2
 800d354:	00db      	lsls	r3, r3, #3
 800d356:	4413      	add	r3, r2
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	440b      	add	r3, r1
 800d35c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	78fb      	ldrb	r3, [r7, #3]
 800d364:	4619      	mov	r1, r3
 800d366:	f7fe fb0d 	bl	800b984 <USBD_LL_DataOutStage>
}
 800d36a:	bf00      	nop
 800d36c:	3708      	adds	r7, #8
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}

0800d372 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d372:	b580      	push	{r7, lr}
 800d374:	b082      	sub	sp, #8
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
 800d37a:	460b      	mov	r3, r1
 800d37c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d384:	78fa      	ldrb	r2, [r7, #3]
 800d386:	6879      	ldr	r1, [r7, #4]
 800d388:	4613      	mov	r3, r2
 800d38a:	00db      	lsls	r3, r3, #3
 800d38c:	4413      	add	r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	440b      	add	r3, r1
 800d392:	3348      	adds	r3, #72	@ 0x48
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	78fb      	ldrb	r3, [r7, #3]
 800d398:	4619      	mov	r1, r3
 800d39a:	f7fe fba6 	bl	800baea <USBD_LL_DataInStage>
}
 800d39e:	bf00      	nop
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b082      	sub	sp, #8
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fe fce0 	bl	800bd7a <USBD_LL_SOF>
}
 800d3ba:	bf00      	nop
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b084      	sub	sp, #16
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	691b      	ldr	r3, [r3, #16]
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d001      	beq.n	800d3da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d3d6:	f7f3 ffc8 	bl	800136a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d3e0:	7bfa      	ldrb	r2, [r7, #15]
 800d3e2:	4611      	mov	r1, r2
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7fe fc84 	bl	800bcf2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7fe fc2c 	bl	800bc4e <USBD_LL_Reset>
}
 800d3f6:	bf00      	nop
 800d3f8:	3710      	adds	r7, #16
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
	...

0800d400 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	6812      	ldr	r2, [r2, #0]
 800d416:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d41a:	f043 0301 	orr.w	r3, r3, #1
 800d41e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe fc73 	bl	800bd12 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6a1b      	ldr	r3, [r3, #32]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d005      	beq.n	800d440 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d434:	4b04      	ldr	r3, [pc, #16]	@ (800d448 <HAL_PCD_SuspendCallback+0x48>)
 800d436:	691b      	ldr	r3, [r3, #16]
 800d438:	4a03      	ldr	r2, [pc, #12]	@ (800d448 <HAL_PCD_SuspendCallback+0x48>)
 800d43a:	f043 0306 	orr.w	r3, r3, #6
 800d43e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d440:	bf00      	nop
 800d442:	3708      	adds	r7, #8
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	e000ed00 	.word	0xe000ed00

0800d44c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	6812      	ldr	r2, [r2, #0]
 800d462:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d466:	f023 0301 	bic.w	r3, r3, #1
 800d46a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6a1b      	ldr	r3, [r3, #32]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d007      	beq.n	800d484 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d474:	4b08      	ldr	r3, [pc, #32]	@ (800d498 <HAL_PCD_ResumeCallback+0x4c>)
 800d476:	691b      	ldr	r3, [r3, #16]
 800d478:	4a07      	ldr	r2, [pc, #28]	@ (800d498 <HAL_PCD_ResumeCallback+0x4c>)
 800d47a:	f023 0306 	bic.w	r3, r3, #6
 800d47e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d480:	f000 faf6 	bl	800da70 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fe fc5d 	bl	800bd4a <USBD_LL_Resume>
}
 800d490:	bf00      	nop
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	e000ed00 	.word	0xe000ed00

0800d49c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d4ae:	78fa      	ldrb	r2, [r7, #3]
 800d4b0:	4611      	mov	r1, r2
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7fe fcb3 	bl	800be1e <USBD_LL_IsoOUTIncomplete>
}
 800d4b8:	bf00      	nop
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d4d2:	78fa      	ldrb	r2, [r7, #3]
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fe fc6f 	bl	800bdba <USBD_LL_IsoINIncomplete>
}
 800d4dc:	bf00      	nop
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fe fcc5 	bl	800be82 <USBD_LL_DevConnected>
}
 800d4f8:	bf00      	nop
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d50e:	4618      	mov	r0, r3
 800d510:	f7fe fcc2 	bl	800be98 <USBD_LL_DevDisconnected>
}
 800d514:	bf00      	nop
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d13c      	bne.n	800d5a6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d52c:	4a20      	ldr	r2, [pc, #128]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4a1e      	ldr	r2, [pc, #120]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d538:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d53c:	4b1c      	ldr	r3, [pc, #112]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d53e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d542:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d544:	4b1a      	ldr	r3, [pc, #104]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d546:	2206      	movs	r2, #6
 800d548:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d54a:	4b19      	ldr	r3, [pc, #100]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d54c:	2202      	movs	r2, #2
 800d54e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d550:	4b17      	ldr	r3, [pc, #92]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d552:	2202      	movs	r2, #2
 800d554:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d556:	4b16      	ldr	r3, [pc, #88]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d558:	2200      	movs	r2, #0
 800d55a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d55c:	4b14      	ldr	r3, [pc, #80]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d55e:	2200      	movs	r2, #0
 800d560:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d562:	4b13      	ldr	r3, [pc, #76]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d564:	2200      	movs	r2, #0
 800d566:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d568:	4b11      	ldr	r3, [pc, #68]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d56a:	2200      	movs	r2, #0
 800d56c:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d56e:	4b10      	ldr	r3, [pc, #64]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d570:	2200      	movs	r2, #0
 800d572:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d574:	4b0e      	ldr	r3, [pc, #56]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d576:	2200      	movs	r2, #0
 800d578:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d57a:	480d      	ldr	r0, [pc, #52]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d57c:	f7f6 fd20 	bl	8003fc0 <HAL_PCD_Init>
 800d580:	4603      	mov	r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	d001      	beq.n	800d58a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d586:	f7f3 fef0 	bl	800136a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d58a:	2180      	movs	r1, #128	@ 0x80
 800d58c:	4808      	ldr	r0, [pc, #32]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d58e:	f7f7 fe8a 	bl	80052a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d592:	2240      	movs	r2, #64	@ 0x40
 800d594:	2100      	movs	r1, #0
 800d596:	4806      	ldr	r0, [pc, #24]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d598:	f7f7 fe3e 	bl	8005218 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d59c:	2280      	movs	r2, #128	@ 0x80
 800d59e:	2101      	movs	r1, #1
 800d5a0:	4803      	ldr	r0, [pc, #12]	@ (800d5b0 <USBD_LL_Init+0x94>)
 800d5a2:	f7f7 fe39 	bl	8005218 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d5a6:	2300      	movs	r3, #0
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3708      	adds	r7, #8
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	20004e70 	.word	0x20004e70

0800d5b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7f6 fe1c 	bl	8004208 <HAL_PCD_Start>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d5d4:	7bbb      	ldrb	r3, [r7, #14]
 800d5d6:	2b03      	cmp	r3, #3
 800d5d8:	d816      	bhi.n	800d608 <USBD_LL_Start+0x54>
 800d5da:	a201      	add	r2, pc, #4	@ (adr r2, 800d5e0 <USBD_LL_Start+0x2c>)
 800d5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5e0:	0800d5f1 	.word	0x0800d5f1
 800d5e4:	0800d5f7 	.word	0x0800d5f7
 800d5e8:	0800d5fd 	.word	0x0800d5fd
 800d5ec:	0800d603 	.word	0x0800d603
    case HAL_OK :
      usb_status = USBD_OK;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d5f4:	e00b      	b.n	800d60e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5f6:	2303      	movs	r3, #3
 800d5f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d5fa:	e008      	b.n	800d60e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d600:	e005      	b.n	800d60e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d602:	2303      	movs	r3, #3
 800d604:	73fb      	strb	r3, [r7, #15]
    break;
 800d606:	e002      	b.n	800d60e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d608:	2303      	movs	r3, #3
 800d60a:	73fb      	strb	r3, [r7, #15]
    break;
 800d60c:	bf00      	nop
  }
  return usb_status;
 800d60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3710      	adds	r7, #16
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	4608      	mov	r0, r1
 800d622:	4611      	mov	r1, r2
 800d624:	461a      	mov	r2, r3
 800d626:	4603      	mov	r3, r0
 800d628:	70fb      	strb	r3, [r7, #3]
 800d62a:	460b      	mov	r3, r1
 800d62c:	70bb      	strb	r3, [r7, #2]
 800d62e:	4613      	mov	r3, r2
 800d630:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d632:	2300      	movs	r3, #0
 800d634:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d640:	78bb      	ldrb	r3, [r7, #2]
 800d642:	883a      	ldrh	r2, [r7, #0]
 800d644:	78f9      	ldrb	r1, [r7, #3]
 800d646:	f7f7 fac6 	bl	8004bd6 <HAL_PCD_EP_Open>
 800d64a:	4603      	mov	r3, r0
 800d64c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d64e:	7bbb      	ldrb	r3, [r7, #14]
 800d650:	2b03      	cmp	r3, #3
 800d652:	d817      	bhi.n	800d684 <USBD_LL_OpenEP+0x6c>
 800d654:	a201      	add	r2, pc, #4	@ (adr r2, 800d65c <USBD_LL_OpenEP+0x44>)
 800d656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d65a:	bf00      	nop
 800d65c:	0800d66d 	.word	0x0800d66d
 800d660:	0800d673 	.word	0x0800d673
 800d664:	0800d679 	.word	0x0800d679
 800d668:	0800d67f 	.word	0x0800d67f
    case HAL_OK :
      usb_status = USBD_OK;
 800d66c:	2300      	movs	r3, #0
 800d66e:	73fb      	strb	r3, [r7, #15]
    break;
 800d670:	e00b      	b.n	800d68a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d672:	2303      	movs	r3, #3
 800d674:	73fb      	strb	r3, [r7, #15]
    break;
 800d676:	e008      	b.n	800d68a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d678:	2301      	movs	r3, #1
 800d67a:	73fb      	strb	r3, [r7, #15]
    break;
 800d67c:	e005      	b.n	800d68a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d67e:	2303      	movs	r3, #3
 800d680:	73fb      	strb	r3, [r7, #15]
    break;
 800d682:	e002      	b.n	800d68a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d684:	2303      	movs	r3, #3
 800d686:	73fb      	strb	r3, [r7, #15]
    break;
 800d688:	bf00      	nop
  }
  return usb_status;
 800d68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3710      	adds	r7, #16
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	460b      	mov	r3, r1
 800d69e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6ae:	78fa      	ldrb	r2, [r7, #3]
 800d6b0:	4611      	mov	r1, r2
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7f7 faf7 	bl	8004ca6 <HAL_PCD_EP_Close>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d6bc:	7bbb      	ldrb	r3, [r7, #14]
 800d6be:	2b03      	cmp	r3, #3
 800d6c0:	d816      	bhi.n	800d6f0 <USBD_LL_CloseEP+0x5c>
 800d6c2:	a201      	add	r2, pc, #4	@ (adr r2, 800d6c8 <USBD_LL_CloseEP+0x34>)
 800d6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c8:	0800d6d9 	.word	0x0800d6d9
 800d6cc:	0800d6df 	.word	0x0800d6df
 800d6d0:	0800d6e5 	.word	0x0800d6e5
 800d6d4:	0800d6eb 	.word	0x0800d6eb
    case HAL_OK :
      usb_status = USBD_OK;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	73fb      	strb	r3, [r7, #15]
    break;
 800d6dc:	e00b      	b.n	800d6f6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6de:	2303      	movs	r3, #3
 800d6e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d6e2:	e008      	b.n	800d6f6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d6e8:	e005      	b.n	800d6f6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6ea:	2303      	movs	r3, #3
 800d6ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d6ee:	e002      	b.n	800d6f6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d6f4:	bf00      	nop
  }
  return usb_status;
 800d6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3710      	adds	r7, #16
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	460b      	mov	r3, r1
 800d70a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d70c:	2300      	movs	r3, #0
 800d70e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d710:	2300      	movs	r3, #0
 800d712:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d71a:	78fa      	ldrb	r2, [r7, #3]
 800d71c:	4611      	mov	r1, r2
 800d71e:	4618      	mov	r0, r3
 800d720:	f7f7 fb86 	bl	8004e30 <HAL_PCD_EP_SetStall>
 800d724:	4603      	mov	r3, r0
 800d726:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d728:	7bbb      	ldrb	r3, [r7, #14]
 800d72a:	2b03      	cmp	r3, #3
 800d72c:	d816      	bhi.n	800d75c <USBD_LL_StallEP+0x5c>
 800d72e:	a201      	add	r2, pc, #4	@ (adr r2, 800d734 <USBD_LL_StallEP+0x34>)
 800d730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d734:	0800d745 	.word	0x0800d745
 800d738:	0800d74b 	.word	0x0800d74b
 800d73c:	0800d751 	.word	0x0800d751
 800d740:	0800d757 	.word	0x0800d757
    case HAL_OK :
      usb_status = USBD_OK;
 800d744:	2300      	movs	r3, #0
 800d746:	73fb      	strb	r3, [r7, #15]
    break;
 800d748:	e00b      	b.n	800d762 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d74a:	2303      	movs	r3, #3
 800d74c:	73fb      	strb	r3, [r7, #15]
    break;
 800d74e:	e008      	b.n	800d762 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d750:	2301      	movs	r3, #1
 800d752:	73fb      	strb	r3, [r7, #15]
    break;
 800d754:	e005      	b.n	800d762 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d756:	2303      	movs	r3, #3
 800d758:	73fb      	strb	r3, [r7, #15]
    break;
 800d75a:	e002      	b.n	800d762 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d75c:	2303      	movs	r3, #3
 800d75e:	73fb      	strb	r3, [r7, #15]
    break;
 800d760:	bf00      	nop
  }
  return usb_status;
 800d762:	7bfb      	ldrb	r3, [r7, #15]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	460b      	mov	r3, r1
 800d776:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d778:	2300      	movs	r3, #0
 800d77a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d77c:	2300      	movs	r3, #0
 800d77e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d786:	78fa      	ldrb	r2, [r7, #3]
 800d788:	4611      	mov	r1, r2
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7f7 fbb2 	bl	8004ef4 <HAL_PCD_EP_ClrStall>
 800d790:	4603      	mov	r3, r0
 800d792:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d794:	7bbb      	ldrb	r3, [r7, #14]
 800d796:	2b03      	cmp	r3, #3
 800d798:	d816      	bhi.n	800d7c8 <USBD_LL_ClearStallEP+0x5c>
 800d79a:	a201      	add	r2, pc, #4	@ (adr r2, 800d7a0 <USBD_LL_ClearStallEP+0x34>)
 800d79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a0:	0800d7b1 	.word	0x0800d7b1
 800d7a4:	0800d7b7 	.word	0x0800d7b7
 800d7a8:	0800d7bd 	.word	0x0800d7bd
 800d7ac:	0800d7c3 	.word	0x0800d7c3
    case HAL_OK :
      usb_status = USBD_OK;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d7b4:	e00b      	b.n	800d7ce <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7b6:	2303      	movs	r3, #3
 800d7b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ba:	e008      	b.n	800d7ce <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	73fb      	strb	r3, [r7, #15]
    break;
 800d7c0:	e005      	b.n	800d7ce <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7c2:	2303      	movs	r3, #3
 800d7c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d7c6:	e002      	b.n	800d7ce <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d7c8:	2303      	movs	r3, #3
 800d7ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d7cc:	bf00      	nop
  }
  return usb_status;
 800d7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3710      	adds	r7, #16
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d7ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	da0b      	bge.n	800d80c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d7f4:	78fb      	ldrb	r3, [r7, #3]
 800d7f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d7fa:	68f9      	ldr	r1, [r7, #12]
 800d7fc:	4613      	mov	r3, r2
 800d7fe:	00db      	lsls	r3, r3, #3
 800d800:	4413      	add	r3, r2
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	440b      	add	r3, r1
 800d806:	333e      	adds	r3, #62	@ 0x3e
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	e00b      	b.n	800d824 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d80c:	78fb      	ldrb	r3, [r7, #3]
 800d80e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d812:	68f9      	ldr	r1, [r7, #12]
 800d814:	4613      	mov	r3, r2
 800d816:	00db      	lsls	r3, r3, #3
 800d818:	4413      	add	r3, r2
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	440b      	add	r3, r1
 800d81e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800d822:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d824:	4618      	mov	r0, r3
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	460b      	mov	r3, r1
 800d83a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d83c:	2300      	movs	r3, #0
 800d83e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d840:	2300      	movs	r3, #0
 800d842:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d84a:	78fa      	ldrb	r2, [r7, #3]
 800d84c:	4611      	mov	r1, r2
 800d84e:	4618      	mov	r0, r3
 800d850:	f7f7 f99c 	bl	8004b8c <HAL_PCD_SetAddress>
 800d854:	4603      	mov	r3, r0
 800d856:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d858:	7bbb      	ldrb	r3, [r7, #14]
 800d85a:	2b03      	cmp	r3, #3
 800d85c:	d816      	bhi.n	800d88c <USBD_LL_SetUSBAddress+0x5c>
 800d85e:	a201      	add	r2, pc, #4	@ (adr r2, 800d864 <USBD_LL_SetUSBAddress+0x34>)
 800d860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d864:	0800d875 	.word	0x0800d875
 800d868:	0800d87b 	.word	0x0800d87b
 800d86c:	0800d881 	.word	0x0800d881
 800d870:	0800d887 	.word	0x0800d887
    case HAL_OK :
      usb_status = USBD_OK;
 800d874:	2300      	movs	r3, #0
 800d876:	73fb      	strb	r3, [r7, #15]
    break;
 800d878:	e00b      	b.n	800d892 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d87a:	2303      	movs	r3, #3
 800d87c:	73fb      	strb	r3, [r7, #15]
    break;
 800d87e:	e008      	b.n	800d892 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d880:	2301      	movs	r3, #1
 800d882:	73fb      	strb	r3, [r7, #15]
    break;
 800d884:	e005      	b.n	800d892 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d886:	2303      	movs	r3, #3
 800d888:	73fb      	strb	r3, [r7, #15]
    break;
 800d88a:	e002      	b.n	800d892 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d88c:	2303      	movs	r3, #3
 800d88e:	73fb      	strb	r3, [r7, #15]
    break;
 800d890:	bf00      	nop
  }
  return usb_status;
 800d892:	7bfb      	ldrb	r3, [r7, #15]
}
 800d894:	4618      	mov	r0, r3
 800d896:	3710      	adds	r7, #16
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	607a      	str	r2, [r7, #4]
 800d8a6:	603b      	str	r3, [r7, #0]
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d8ba:	7af9      	ldrb	r1, [r7, #11]
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	f7f7 fa85 	bl	8004dce <HAL_PCD_EP_Transmit>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d8c8:	7dbb      	ldrb	r3, [r7, #22]
 800d8ca:	2b03      	cmp	r3, #3
 800d8cc:	d816      	bhi.n	800d8fc <USBD_LL_Transmit+0x60>
 800d8ce:	a201      	add	r2, pc, #4	@ (adr r2, 800d8d4 <USBD_LL_Transmit+0x38>)
 800d8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d4:	0800d8e5 	.word	0x0800d8e5
 800d8d8:	0800d8eb 	.word	0x0800d8eb
 800d8dc:	0800d8f1 	.word	0x0800d8f1
 800d8e0:	0800d8f7 	.word	0x0800d8f7
    case HAL_OK :
      usb_status = USBD_OK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	75fb      	strb	r3, [r7, #23]
    break;
 800d8e8:	e00b      	b.n	800d902 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8ea:	2303      	movs	r3, #3
 800d8ec:	75fb      	strb	r3, [r7, #23]
    break;
 800d8ee:	e008      	b.n	800d902 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	75fb      	strb	r3, [r7, #23]
    break;
 800d8f4:	e005      	b.n	800d902 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	75fb      	strb	r3, [r7, #23]
    break;
 800d8fa:	e002      	b.n	800d902 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d8fc:	2303      	movs	r3, #3
 800d8fe:	75fb      	strb	r3, [r7, #23]
    break;
 800d900:	bf00      	nop
  }
  return usb_status;
 800d902:	7dfb      	ldrb	r3, [r7, #23]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3718      	adds	r7, #24
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	607a      	str	r2, [r7, #4]
 800d916:	603b      	str	r3, [r7, #0]
 800d918:	460b      	mov	r3, r1
 800d91a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d91c:	2300      	movs	r3, #0
 800d91e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d920:	2300      	movs	r3, #0
 800d922:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d92a:	7af9      	ldrb	r1, [r7, #11]
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	f7f7 fa03 	bl	8004d3a <HAL_PCD_EP_Receive>
 800d934:	4603      	mov	r3, r0
 800d936:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d938:	7dbb      	ldrb	r3, [r7, #22]
 800d93a:	2b03      	cmp	r3, #3
 800d93c:	d816      	bhi.n	800d96c <USBD_LL_PrepareReceive+0x60>
 800d93e:	a201      	add	r2, pc, #4	@ (adr r2, 800d944 <USBD_LL_PrepareReceive+0x38>)
 800d940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d944:	0800d955 	.word	0x0800d955
 800d948:	0800d95b 	.word	0x0800d95b
 800d94c:	0800d961 	.word	0x0800d961
 800d950:	0800d967 	.word	0x0800d967
    case HAL_OK :
      usb_status = USBD_OK;
 800d954:	2300      	movs	r3, #0
 800d956:	75fb      	strb	r3, [r7, #23]
    break;
 800d958:	e00b      	b.n	800d972 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d95a:	2303      	movs	r3, #3
 800d95c:	75fb      	strb	r3, [r7, #23]
    break;
 800d95e:	e008      	b.n	800d972 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d960:	2301      	movs	r3, #1
 800d962:	75fb      	strb	r3, [r7, #23]
    break;
 800d964:	e005      	b.n	800d972 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d966:	2303      	movs	r3, #3
 800d968:	75fb      	strb	r3, [r7, #23]
    break;
 800d96a:	e002      	b.n	800d972 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d96c:	2303      	movs	r3, #3
 800d96e:	75fb      	strb	r3, [r7, #23]
    break;
 800d970:	bf00      	nop
  }
  return usb_status;
 800d972:	7dfb      	ldrb	r3, [r7, #23]
}
 800d974:	4618      	mov	r0, r3
 800d976:	3718      	adds	r7, #24
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	460b      	mov	r3, r1
 800d986:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d98e:	78fa      	ldrb	r2, [r7, #3]
 800d990:	4611      	mov	r1, r2
 800d992:	4618      	mov	r0, r3
 800d994:	f7f7 fa03 	bl	8004d9e <HAL_PCD_EP_GetRxCount>
 800d998:	4603      	mov	r3, r0
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
	...

0800d9a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b082      	sub	sp, #8
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d9b0:	78fb      	ldrb	r3, [r7, #3]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d002      	beq.n	800d9bc <HAL_PCDEx_LPM_Callback+0x18>
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d01f      	beq.n	800d9fa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d9ba:	e03b      	b.n	800da34 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6a1b      	ldr	r3, [r3, #32]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d007      	beq.n	800d9d4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d9c4:	f000 f854 	bl	800da70 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9c8:	4b1c      	ldr	r3, [pc, #112]	@ (800da3c <HAL_PCDEx_LPM_Callback+0x98>)
 800d9ca:	691b      	ldr	r3, [r3, #16]
 800d9cc:	4a1b      	ldr	r2, [pc, #108]	@ (800da3c <HAL_PCDEx_LPM_Callback+0x98>)
 800d9ce:	f023 0306 	bic.w	r3, r3, #6
 800d9d2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	6812      	ldr	r2, [r2, #0]
 800d9e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d9e6:	f023 0301 	bic.w	r3, r3, #1
 800d9ea:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7fe f9a9 	bl	800bd4a <USBD_LL_Resume>
    break;
 800d9f8:	e01c      	b.n	800da34 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	6812      	ldr	r2, [r2, #0]
 800da08:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800da0c:	f043 0301 	orr.w	r3, r3, #1
 800da10:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800da18:	4618      	mov	r0, r3
 800da1a:	f7fe f97a 	bl	800bd12 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6a1b      	ldr	r3, [r3, #32]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d005      	beq.n	800da32 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da26:	4b05      	ldr	r3, [pc, #20]	@ (800da3c <HAL_PCDEx_LPM_Callback+0x98>)
 800da28:	691b      	ldr	r3, [r3, #16]
 800da2a:	4a04      	ldr	r2, [pc, #16]	@ (800da3c <HAL_PCDEx_LPM_Callback+0x98>)
 800da2c:	f043 0306 	orr.w	r3, r3, #6
 800da30:	6113      	str	r3, [r2, #16]
    break;
 800da32:	bf00      	nop
}
 800da34:	bf00      	nop
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	e000ed00 	.word	0xe000ed00

0800da40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da48:	4b03      	ldr	r3, [pc, #12]	@ (800da58 <USBD_static_malloc+0x18>)
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	370c      	adds	r7, #12
 800da4e:	46bd      	mov	sp, r7
 800da50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da54:	4770      	bx	lr
 800da56:	bf00      	nop
 800da58:	2000537c 	.word	0x2000537c

0800da5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]

}
 800da64:	bf00      	nop
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800da74:	f7f3 fc26 	bl	80012c4 <SystemClock_Config>
}
 800da78:	bf00      	nop
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <memset>:
 800da7c:	4402      	add	r2, r0
 800da7e:	4603      	mov	r3, r0
 800da80:	4293      	cmp	r3, r2
 800da82:	d100      	bne.n	800da86 <memset+0xa>
 800da84:	4770      	bx	lr
 800da86:	f803 1b01 	strb.w	r1, [r3], #1
 800da8a:	e7f9      	b.n	800da80 <memset+0x4>

0800da8c <__libc_init_array>:
 800da8c:	b570      	push	{r4, r5, r6, lr}
 800da8e:	4d0d      	ldr	r5, [pc, #52]	@ (800dac4 <__libc_init_array+0x38>)
 800da90:	4c0d      	ldr	r4, [pc, #52]	@ (800dac8 <__libc_init_array+0x3c>)
 800da92:	1b64      	subs	r4, r4, r5
 800da94:	10a4      	asrs	r4, r4, #2
 800da96:	2600      	movs	r6, #0
 800da98:	42a6      	cmp	r6, r4
 800da9a:	d109      	bne.n	800dab0 <__libc_init_array+0x24>
 800da9c:	4d0b      	ldr	r5, [pc, #44]	@ (800dacc <__libc_init_array+0x40>)
 800da9e:	4c0c      	ldr	r4, [pc, #48]	@ (800dad0 <__libc_init_array+0x44>)
 800daa0:	f000 f826 	bl	800daf0 <_init>
 800daa4:	1b64      	subs	r4, r4, r5
 800daa6:	10a4      	asrs	r4, r4, #2
 800daa8:	2600      	movs	r6, #0
 800daaa:	42a6      	cmp	r6, r4
 800daac:	d105      	bne.n	800daba <__libc_init_array+0x2e>
 800daae:	bd70      	pop	{r4, r5, r6, pc}
 800dab0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dab4:	4798      	blx	r3
 800dab6:	3601      	adds	r6, #1
 800dab8:	e7ee      	b.n	800da98 <__libc_init_array+0xc>
 800daba:	f855 3b04 	ldr.w	r3, [r5], #4
 800dabe:	4798      	blx	r3
 800dac0:	3601      	adds	r6, #1
 800dac2:	e7f2      	b.n	800daaa <__libc_init_array+0x1e>
 800dac4:	0800dbc8 	.word	0x0800dbc8
 800dac8:	0800dbc8 	.word	0x0800dbc8
 800dacc:	0800dbc8 	.word	0x0800dbc8
 800dad0:	0800dbcc 	.word	0x0800dbcc

0800dad4 <memcpy>:
 800dad4:	440a      	add	r2, r1
 800dad6:	4291      	cmp	r1, r2
 800dad8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dadc:	d100      	bne.n	800dae0 <memcpy+0xc>
 800dade:	4770      	bx	lr
 800dae0:	b510      	push	{r4, lr}
 800dae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800daea:	4291      	cmp	r1, r2
 800daec:	d1f9      	bne.n	800dae2 <memcpy+0xe>
 800daee:	bd10      	pop	{r4, pc}

0800daf0 <_init>:
 800daf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf2:	bf00      	nop
 800daf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daf6:	bc08      	pop	{r3}
 800daf8:	469e      	mov	lr, r3
 800dafa:	4770      	bx	lr

0800dafc <_fini>:
 800dafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dafe:	bf00      	nop
 800db00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db02:	bc08      	pop	{r3}
 800db04:	469e      	mov	lr, r3
 800db06:	4770      	bx	lr
