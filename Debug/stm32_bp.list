
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7f0  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800c9ac  0800c9ac  0000d9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca64  0800ca64  0000e15c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca64  0800ca64  0000da64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca6c  0800ca6c  0000e15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca6c  0800ca6c  0000da6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca70  0800ca70  0000da70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800ca74  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c1b0  2000015c  0800cbd0  0000e15c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c30c  0800cbd0  0000e30c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e15c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d04  00000000  00000000  0000e18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d8d  00000000  00000000  00031e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c38  00000000  00000000  00036c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015bd  00000000  00000000  00038858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030063  00000000  00000000  00039e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000235a8  00000000  00000000  00069e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d1ab  00000000  00000000  0008d420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001aa5cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b00  00000000  00000000  001aa654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b2154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000015c 	.word	0x2000015c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800c994 	.word	0x0800c994

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000160 	.word	0x20000160
 80001f8:	0800c994 	.word	0x0800c994

080001fc <__aeabi_dmul>:
 80001fc:	b570      	push	{r4, r5, r6, lr}
 80001fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000202:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000206:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020a:	bf1d      	ittte	ne
 800020c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000210:	ea94 0f0c 	teqne	r4, ip
 8000214:	ea95 0f0c 	teqne	r5, ip
 8000218:	f000 f8de 	bleq	80003d8 <__aeabi_dmul+0x1dc>
 800021c:	442c      	add	r4, r5
 800021e:	ea81 0603 	eor.w	r6, r1, r3
 8000222:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000226:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800022e:	bf18      	it	ne
 8000230:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800023c:	d038      	beq.n	80002b0 <__aeabi_dmul+0xb4>
 800023e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000242:	f04f 0500 	mov.w	r5, #0
 8000246:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800024e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000252:	f04f 0600 	mov.w	r6, #0
 8000256:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025a:	f09c 0f00 	teq	ip, #0
 800025e:	bf18      	it	ne
 8000260:	f04e 0e01 	orrne.w	lr, lr, #1
 8000264:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000268:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800026c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000270:	d204      	bcs.n	800027c <__aeabi_dmul+0x80>
 8000272:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000276:	416d      	adcs	r5, r5
 8000278:	eb46 0606 	adc.w	r6, r6, r6
 800027c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000280:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000284:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000288:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800028c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000290:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000294:	bf88      	it	hi
 8000296:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800029a:	d81e      	bhi.n	80002da <__aeabi_dmul+0xde>
 800029c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002a0:	bf08      	it	eq
 80002a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002a6:	f150 0000 	adcs.w	r0, r0, #0
 80002aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002b4:	ea46 0101 	orr.w	r1, r6, r1
 80002b8:	ea40 0002 	orr.w	r0, r0, r2
 80002bc:	ea81 0103 	eor.w	r1, r1, r3
 80002c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c4:	bfc2      	ittt	gt
 80002c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ce:	bd70      	popgt	{r4, r5, r6, pc}
 80002d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002d4:	f04f 0e00 	mov.w	lr, #0
 80002d8:	3c01      	subs	r4, #1
 80002da:	f300 80ab 	bgt.w	8000434 <__aeabi_dmul+0x238>
 80002de:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002e2:	bfde      	ittt	le
 80002e4:	2000      	movle	r0, #0
 80002e6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002ea:	bd70      	pople	{r4, r5, r6, pc}
 80002ec:	f1c4 0400 	rsb	r4, r4, #0
 80002f0:	3c20      	subs	r4, #32
 80002f2:	da35      	bge.n	8000360 <__aeabi_dmul+0x164>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc1b      	bgt.n	8000330 <__aeabi_dmul+0x134>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0520 	rsb	r5, r4, #32
 8000300:	fa00 f305 	lsl.w	r3, r0, r5
 8000304:	fa20 f004 	lsr.w	r0, r0, r4
 8000308:	fa01 f205 	lsl.w	r2, r1, r5
 800030c:	ea40 0002 	orr.w	r0, r0, r2
 8000310:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000314:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	fa21 f604 	lsr.w	r6, r1, r4
 8000320:	eb42 0106 	adc.w	r1, r2, r6
 8000324:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000328:	bf08      	it	eq
 800032a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f1c4 040c 	rsb	r4, r4, #12
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f304 	lsl.w	r3, r0, r4
 800033c:	fa20 f005 	lsr.w	r0, r0, r5
 8000340:	fa01 f204 	lsl.w	r2, r1, r4
 8000344:	ea40 0002 	orr.w	r0, r0, r2
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000358:	bf08      	it	eq
 800035a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035e:	bd70      	pop	{r4, r5, r6, pc}
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f205 	lsl.w	r2, r0, r5
 8000368:	ea4e 0e02 	orr.w	lr, lr, r2
 800036c:	fa20 f304 	lsr.w	r3, r0, r4
 8000370:	fa01 f205 	lsl.w	r2, r1, r5
 8000374:	ea43 0302 	orr.w	r3, r3, r2
 8000378:	fa21 f004 	lsr.w	r0, r1, r4
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	fa21 f204 	lsr.w	r2, r1, r4
 8000384:	ea20 0002 	bic.w	r0, r0, r2
 8000388:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800038c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000390:	bf08      	it	eq
 8000392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f094 0f00 	teq	r4, #0
 800039c:	d10f      	bne.n	80003be <__aeabi_dmul+0x1c2>
 800039e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003a2:	0040      	lsls	r0, r0, #1
 80003a4:	eb41 0101 	adc.w	r1, r1, r1
 80003a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003ac:	bf08      	it	eq
 80003ae:	3c01      	subeq	r4, #1
 80003b0:	d0f7      	beq.n	80003a2 <__aeabi_dmul+0x1a6>
 80003b2:	ea41 0106 	orr.w	r1, r1, r6
 80003b6:	f095 0f00 	teq	r5, #0
 80003ba:	bf18      	it	ne
 80003bc:	4770      	bxne	lr
 80003be:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003c2:	0052      	lsls	r2, r2, #1
 80003c4:	eb43 0303 	adc.w	r3, r3, r3
 80003c8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003cc:	bf08      	it	eq
 80003ce:	3d01      	subeq	r5, #1
 80003d0:	d0f7      	beq.n	80003c2 <__aeabi_dmul+0x1c6>
 80003d2:	ea43 0306 	orr.w	r3, r3, r6
 80003d6:	4770      	bx	lr
 80003d8:	ea94 0f0c 	teq	r4, ip
 80003dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e0:	bf18      	it	ne
 80003e2:	ea95 0f0c 	teqne	r5, ip
 80003e6:	d00c      	beq.n	8000402 <__aeabi_dmul+0x206>
 80003e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ec:	bf18      	it	ne
 80003ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f2:	d1d1      	bne.n	8000398 <__aeabi_dmul+0x19c>
 80003f4:	ea81 0103 	eor.w	r1, r1, r3
 80003f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003fc:	f04f 0000 	mov.w	r0, #0
 8000400:	bd70      	pop	{r4, r5, r6, pc}
 8000402:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000406:	bf06      	itte	eq
 8000408:	4610      	moveq	r0, r2
 800040a:	4619      	moveq	r1, r3
 800040c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000410:	d019      	beq.n	8000446 <__aeabi_dmul+0x24a>
 8000412:	ea94 0f0c 	teq	r4, ip
 8000416:	d102      	bne.n	800041e <__aeabi_dmul+0x222>
 8000418:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800041c:	d113      	bne.n	8000446 <__aeabi_dmul+0x24a>
 800041e:	ea95 0f0c 	teq	r5, ip
 8000422:	d105      	bne.n	8000430 <__aeabi_dmul+0x234>
 8000424:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000428:	bf1c      	itt	ne
 800042a:	4610      	movne	r0, r2
 800042c:	4619      	movne	r1, r3
 800042e:	d10a      	bne.n	8000446 <__aeabi_dmul+0x24a>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000438:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd70      	pop	{r4, r5, r6, pc}
 8000446:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800044a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800044e:	bd70      	pop	{r4, r5, r6, pc}

08000450 <__aeabi_drsub>:
 8000450:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e002      	b.n	800045c <__adddf3>
 8000456:	bf00      	nop

08000458 <__aeabi_dsub>:
 8000458:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800045c <__adddf3>:
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000462:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000466:	ea94 0f05 	teq	r4, r5
 800046a:	bf08      	it	eq
 800046c:	ea90 0f02 	teqeq	r0, r2
 8000470:	bf1f      	itttt	ne
 8000472:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000476:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800047e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000482:	f000 80e2 	beq.w	800064a <__adddf3+0x1ee>
 8000486:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800048e:	bfb8      	it	lt
 8000490:	426d      	neglt	r5, r5
 8000492:	dd0c      	ble.n	80004ae <__adddf3+0x52>
 8000494:	442c      	add	r4, r5
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	ea82 0000 	eor.w	r0, r2, r0
 80004a2:	ea83 0101 	eor.w	r1, r3, r1
 80004a6:	ea80 0202 	eor.w	r2, r0, r2
 80004aa:	ea81 0303 	eor.w	r3, r1, r3
 80004ae:	2d36      	cmp	r5, #54	@ 0x36
 80004b0:	bf88      	it	hi
 80004b2:	bd30      	pophi	{r4, r5, pc}
 80004b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x70>
 80004c6:	4240      	negs	r0, r0
 80004c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004d8:	d002      	beq.n	80004e0 <__adddf3+0x84>
 80004da:	4252      	negs	r2, r2
 80004dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e0:	ea94 0f05 	teq	r4, r5
 80004e4:	f000 80a7 	beq.w	8000636 <__adddf3+0x1da>
 80004e8:	f1a4 0401 	sub.w	r4, r4, #1
 80004ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f0:	db0d      	blt.n	800050e <__adddf3+0xb2>
 80004f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004f6:	fa22 f205 	lsr.w	r2, r2, r5
 80004fa:	1880      	adds	r0, r0, r2
 80004fc:	f141 0100 	adc.w	r1, r1, #0
 8000500:	fa03 f20e 	lsl.w	r2, r3, lr
 8000504:	1880      	adds	r0, r0, r2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	4159      	adcs	r1, r3
 800050c:	e00e      	b.n	800052c <__adddf3+0xd0>
 800050e:	f1a5 0520 	sub.w	r5, r5, #32
 8000512:	f10e 0e20 	add.w	lr, lr, #32
 8000516:	2a01      	cmp	r2, #1
 8000518:	fa03 fc0e 	lsl.w	ip, r3, lr
 800051c:	bf28      	it	cs
 800051e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	18c0      	adds	r0, r0, r3
 8000528:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000530:	d507      	bpl.n	8000542 <__adddf3+0xe6>
 8000532:	f04f 0e00 	mov.w	lr, #0
 8000536:	f1dc 0c00 	rsbs	ip, ip, #0
 800053a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800053e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000542:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000546:	d31b      	bcc.n	8000580 <__adddf3+0x124>
 8000548:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800054c:	d30c      	bcc.n	8000568 <__adddf3+0x10c>
 800054e:	0849      	lsrs	r1, r1, #1
 8000550:	ea5f 0030 	movs.w	r0, r0, rrx
 8000554:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000558:	f104 0401 	add.w	r4, r4, #1
 800055c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000560:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000564:	f080 809a 	bcs.w	800069c <__adddf3+0x240>
 8000568:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	ea41 0105 	orr.w	r1, r1, r5
 800057e:	bd30      	pop	{r4, r5, pc}
 8000580:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000584:	4140      	adcs	r0, r0
 8000586:	eb41 0101 	adc.w	r1, r1, r1
 800058a:	3c01      	subs	r4, #1
 800058c:	bf28      	it	cs
 800058e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000592:	d2e9      	bcs.n	8000568 <__adddf3+0x10c>
 8000594:	f091 0f00 	teq	r1, #0
 8000598:	bf04      	itt	eq
 800059a:	4601      	moveq	r1, r0
 800059c:	2000      	moveq	r0, #0
 800059e:	fab1 f381 	clz	r3, r1
 80005a2:	bf08      	it	eq
 80005a4:	3320      	addeq	r3, #32
 80005a6:	f1a3 030b 	sub.w	r3, r3, #11
 80005aa:	f1b3 0220 	subs.w	r2, r3, #32
 80005ae:	da0c      	bge.n	80005ca <__adddf3+0x16e>
 80005b0:	320c      	adds	r2, #12
 80005b2:	dd08      	ble.n	80005c6 <__adddf3+0x16a>
 80005b4:	f102 0c14 	add.w	ip, r2, #20
 80005b8:	f1c2 020c 	rsb	r2, r2, #12
 80005bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c0:	fa21 f102 	lsr.w	r1, r1, r2
 80005c4:	e00c      	b.n	80005e0 <__adddf3+0x184>
 80005c6:	f102 0214 	add.w	r2, r2, #20
 80005ca:	bfd8      	it	le
 80005cc:	f1c2 0c20 	rsble	ip, r2, #32
 80005d0:	fa01 f102 	lsl.w	r1, r1, r2
 80005d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005d8:	bfdc      	itt	le
 80005da:	ea41 010c 	orrle.w	r1, r1, ip
 80005de:	4090      	lslle	r0, r2
 80005e0:	1ae4      	subs	r4, r4, r3
 80005e2:	bfa2      	ittt	ge
 80005e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005e8:	4329      	orrge	r1, r5
 80005ea:	bd30      	popge	{r4, r5, pc}
 80005ec:	ea6f 0404 	mvn.w	r4, r4
 80005f0:	3c1f      	subs	r4, #31
 80005f2:	da1c      	bge.n	800062e <__adddf3+0x1d2>
 80005f4:	340c      	adds	r4, #12
 80005f6:	dc0e      	bgt.n	8000616 <__adddf3+0x1ba>
 80005f8:	f104 0414 	add.w	r4, r4, #20
 80005fc:	f1c4 0220 	rsb	r2, r4, #32
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f302 	lsl.w	r3, r1, r2
 8000608:	ea40 0003 	orr.w	r0, r0, r3
 800060c:	fa21 f304 	lsr.w	r3, r1, r4
 8000610:	ea45 0103 	orr.w	r1, r5, r3
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	f1c4 040c 	rsb	r4, r4, #12
 800061a:	f1c4 0220 	rsb	r2, r4, #32
 800061e:	fa20 f002 	lsr.w	r0, r0, r2
 8000622:	fa01 f304 	lsl.w	r3, r1, r4
 8000626:	ea40 0003 	orr.w	r0, r0, r3
 800062a:	4629      	mov	r1, r5
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	fa21 f004 	lsr.w	r0, r1, r4
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	f094 0f00 	teq	r4, #0
 800063a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800063e:	bf06      	itte	eq
 8000640:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000644:	3401      	addeq	r4, #1
 8000646:	3d01      	subne	r5, #1
 8000648:	e74e      	b.n	80004e8 <__adddf3+0x8c>
 800064a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800064e:	bf18      	it	ne
 8000650:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000654:	d029      	beq.n	80006aa <__adddf3+0x24e>
 8000656:	ea94 0f05 	teq	r4, r5
 800065a:	bf08      	it	eq
 800065c:	ea90 0f02 	teqeq	r0, r2
 8000660:	d005      	beq.n	800066e <__adddf3+0x212>
 8000662:	ea54 0c00 	orrs.w	ip, r4, r0
 8000666:	bf04      	itt	eq
 8000668:	4619      	moveq	r1, r3
 800066a:	4610      	moveq	r0, r2
 800066c:	bd30      	pop	{r4, r5, pc}
 800066e:	ea91 0f03 	teq	r1, r3
 8000672:	bf1e      	ittt	ne
 8000674:	2100      	movne	r1, #0
 8000676:	2000      	movne	r0, #0
 8000678:	bd30      	popne	{r4, r5, pc}
 800067a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800067e:	d105      	bne.n	800068c <__adddf3+0x230>
 8000680:	0040      	lsls	r0, r0, #1
 8000682:	4149      	adcs	r1, r1
 8000684:	bf28      	it	cs
 8000686:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800068a:	bd30      	pop	{r4, r5, pc}
 800068c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000690:	bf3c      	itt	cc
 8000692:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000696:	bd30      	popcc	{r4, r5, pc}
 8000698:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800069c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006a4:	f04f 0000 	mov.w	r0, #0
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ae:	bf1a      	itte	ne
 80006b0:	4619      	movne	r1, r3
 80006b2:	4610      	movne	r0, r2
 80006b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006b8:	bf1c      	itt	ne
 80006ba:	460b      	movne	r3, r1
 80006bc:	4602      	movne	r2, r0
 80006be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c2:	bf06      	itte	eq
 80006c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006c8:	ea91 0f03 	teqeq	r1, r3
 80006cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	bf00      	nop

080006d4 <__aeabi_ui2d>:
 80006d4:	f090 0f00 	teq	r0, #0
 80006d8:	bf04      	itt	eq
 80006da:	2100      	moveq	r1, #0
 80006dc:	4770      	bxeq	lr
 80006de:	b530      	push	{r4, r5, lr}
 80006e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e8:	f04f 0500 	mov.w	r5, #0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e750      	b.n	8000594 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_i2d>:
 80006f4:	f090 0f00 	teq	r0, #0
 80006f8:	bf04      	itt	eq
 80006fa:	2100      	moveq	r1, #0
 80006fc:	4770      	bxeq	lr
 80006fe:	b530      	push	{r4, r5, lr}
 8000700:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000704:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000708:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800070c:	bf48      	it	mi
 800070e:	4240      	negmi	r0, r0
 8000710:	f04f 0100 	mov.w	r1, #0
 8000714:	e73e      	b.n	8000594 <__adddf3+0x138>
 8000716:	bf00      	nop

08000718 <__aeabi_f2d>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800071e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000722:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000726:	bf1f      	itttt	ne
 8000728:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800072c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000730:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000734:	4770      	bxne	lr
 8000736:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800073a:	bf08      	it	eq
 800073c:	4770      	bxeq	lr
 800073e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000742:	bf04      	itt	eq
 8000744:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000748:	4770      	bxeq	lr
 800074a:	b530      	push	{r4, r5, lr}
 800074c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000750:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	e71c      	b.n	8000594 <__adddf3+0x138>
 800075a:	bf00      	nop

0800075c <__aeabi_ul2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f04f 0500 	mov.w	r5, #0
 800076a:	e00a      	b.n	8000782 <__aeabi_l2d+0x16>

0800076c <__aeabi_l2d>:
 800076c:	ea50 0201 	orrs.w	r2, r0, r1
 8000770:	bf08      	it	eq
 8000772:	4770      	bxeq	lr
 8000774:	b530      	push	{r4, r5, lr}
 8000776:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800077a:	d502      	bpl.n	8000782 <__aeabi_l2d+0x16>
 800077c:	4240      	negs	r0, r0
 800077e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000782:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000786:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800078e:	f43f aed8 	beq.w	8000542 <__adddf3+0xe6>
 8000792:	f04f 0203 	mov.w	r2, #3
 8000796:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079a:	bf18      	it	ne
 800079c:	3203      	addne	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007aa:	f1c2 0320 	rsb	r3, r2, #32
 80007ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b2:	fa20 f002 	lsr.w	r0, r0, r2
 80007b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ba:	ea40 000e 	orr.w	r0, r0, lr
 80007be:	fa21 f102 	lsr.w	r1, r1, r2
 80007c2:	4414      	add	r4, r2
 80007c4:	e6bd      	b.n	8000542 <__adddf3+0xe6>
 80007c6:	bf00      	nop

080007c8 <__aeabi_d2f>:
 80007c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007d0:	bf24      	itt	cs
 80007d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007da:	d90d      	bls.n	80007f8 <__aeabi_d2f+0x30>
 80007dc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007e8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007f0:	bf08      	it	eq
 80007f2:	f020 0001 	biceq.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007fc:	d121      	bne.n	8000842 <__aeabi_d2f+0x7a>
 80007fe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000802:	bfbc      	itt	lt
 8000804:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000808:	4770      	bxlt	lr
 800080a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800080e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000812:	f1c2 0218 	rsb	r2, r2, #24
 8000816:	f1c2 0c20 	rsb	ip, r2, #32
 800081a:	fa10 f30c 	lsls.w	r3, r0, ip
 800081e:	fa20 f002 	lsr.w	r0, r0, r2
 8000822:	bf18      	it	ne
 8000824:	f040 0001 	orrne.w	r0, r0, #1
 8000828:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800082c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000830:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000834:	ea40 000c 	orr.w	r0, r0, ip
 8000838:	fa23 f302 	lsr.w	r3, r3, r2
 800083c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000840:	e7cc      	b.n	80007dc <__aeabi_d2f+0x14>
 8000842:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000846:	d107      	bne.n	8000858 <__aeabi_d2f+0x90>
 8000848:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800084c:	bf1e      	ittt	ne
 800084e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000852:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000856:	4770      	bxne	lr
 8000858:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800085c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000860:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop

08000868 <__aeabi_uldivmod>:
 8000868:	b953      	cbnz	r3, 8000880 <__aeabi_uldivmod+0x18>
 800086a:	b94a      	cbnz	r2, 8000880 <__aeabi_uldivmod+0x18>
 800086c:	2900      	cmp	r1, #0
 800086e:	bf08      	it	eq
 8000870:	2800      	cmpeq	r0, #0
 8000872:	bf1c      	itt	ne
 8000874:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000878:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800087c:	f000 b96a 	b.w	8000b54 <__aeabi_idiv0>
 8000880:	f1ad 0c08 	sub.w	ip, sp, #8
 8000884:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000888:	f000 f806 	bl	8000898 <__udivmoddi4>
 800088c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000890:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000894:	b004      	add	sp, #16
 8000896:	4770      	bx	lr

08000898 <__udivmoddi4>:
 8000898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800089c:	9d08      	ldr	r5, [sp, #32]
 800089e:	460c      	mov	r4, r1
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d14e      	bne.n	8000942 <__udivmoddi4+0xaa>
 80008a4:	4694      	mov	ip, r2
 80008a6:	458c      	cmp	ip, r1
 80008a8:	4686      	mov	lr, r0
 80008aa:	fab2 f282 	clz	r2, r2
 80008ae:	d962      	bls.n	8000976 <__udivmoddi4+0xde>
 80008b0:	b14a      	cbz	r2, 80008c6 <__udivmoddi4+0x2e>
 80008b2:	f1c2 0320 	rsb	r3, r2, #32
 80008b6:	4091      	lsls	r1, r2
 80008b8:	fa20 f303 	lsr.w	r3, r0, r3
 80008bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80008c0:	4319      	orrs	r1, r3
 80008c2:	fa00 fe02 	lsl.w	lr, r0, r2
 80008c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ca:	fa1f f68c 	uxth.w	r6, ip
 80008ce:	fbb1 f4f7 	udiv	r4, r1, r7
 80008d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d6:	fb07 1114 	mls	r1, r7, r4, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb04 f106 	mul.w	r1, r4, r6
 80008e2:	4299      	cmp	r1, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x64>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80008ee:	f080 8112 	bcs.w	8000b16 <__udivmoddi4+0x27e>
 80008f2:	4299      	cmp	r1, r3
 80008f4:	f240 810f 	bls.w	8000b16 <__udivmoddi4+0x27e>
 80008f8:	3c02      	subs	r4, #2
 80008fa:	4463      	add	r3, ip
 80008fc:	1a59      	subs	r1, r3, r1
 80008fe:	fa1f f38e 	uxth.w	r3, lr
 8000902:	fbb1 f0f7 	udiv	r0, r1, r7
 8000906:	fb07 1110 	mls	r1, r7, r0, r1
 800090a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800090e:	fb00 f606 	mul.w	r6, r0, r6
 8000912:	429e      	cmp	r6, r3
 8000914:	d90a      	bls.n	800092c <__udivmoddi4+0x94>
 8000916:	eb1c 0303 	adds.w	r3, ip, r3
 800091a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800091e:	f080 80fc 	bcs.w	8000b1a <__udivmoddi4+0x282>
 8000922:	429e      	cmp	r6, r3
 8000924:	f240 80f9 	bls.w	8000b1a <__udivmoddi4+0x282>
 8000928:	4463      	add	r3, ip
 800092a:	3802      	subs	r0, #2
 800092c:	1b9b      	subs	r3, r3, r6
 800092e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000932:	2100      	movs	r1, #0
 8000934:	b11d      	cbz	r5, 800093e <__udivmoddi4+0xa6>
 8000936:	40d3      	lsrs	r3, r2
 8000938:	2200      	movs	r2, #0
 800093a:	e9c5 3200 	strd	r3, r2, [r5]
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	428b      	cmp	r3, r1
 8000944:	d905      	bls.n	8000952 <__udivmoddi4+0xba>
 8000946:	b10d      	cbz	r5, 800094c <__udivmoddi4+0xb4>
 8000948:	e9c5 0100 	strd	r0, r1, [r5]
 800094c:	2100      	movs	r1, #0
 800094e:	4608      	mov	r0, r1
 8000950:	e7f5      	b.n	800093e <__udivmoddi4+0xa6>
 8000952:	fab3 f183 	clz	r1, r3
 8000956:	2900      	cmp	r1, #0
 8000958:	d146      	bne.n	80009e8 <__udivmoddi4+0x150>
 800095a:	42a3      	cmp	r3, r4
 800095c:	d302      	bcc.n	8000964 <__udivmoddi4+0xcc>
 800095e:	4290      	cmp	r0, r2
 8000960:	f0c0 80f0 	bcc.w	8000b44 <__udivmoddi4+0x2ac>
 8000964:	1a86      	subs	r6, r0, r2
 8000966:	eb64 0303 	sbc.w	r3, r4, r3
 800096a:	2001      	movs	r0, #1
 800096c:	2d00      	cmp	r5, #0
 800096e:	d0e6      	beq.n	800093e <__udivmoddi4+0xa6>
 8000970:	e9c5 6300 	strd	r6, r3, [r5]
 8000974:	e7e3      	b.n	800093e <__udivmoddi4+0xa6>
 8000976:	2a00      	cmp	r2, #0
 8000978:	f040 8090 	bne.w	8000a9c <__udivmoddi4+0x204>
 800097c:	eba1 040c 	sub.w	r4, r1, ip
 8000980:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000984:	fa1f f78c 	uxth.w	r7, ip
 8000988:	2101      	movs	r1, #1
 800098a:	fbb4 f6f8 	udiv	r6, r4, r8
 800098e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000992:	fb08 4416 	mls	r4, r8, r6, r4
 8000996:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800099a:	fb07 f006 	mul.w	r0, r7, r6
 800099e:	4298      	cmp	r0, r3
 80009a0:	d908      	bls.n	80009b4 <__udivmoddi4+0x11c>
 80009a2:	eb1c 0303 	adds.w	r3, ip, r3
 80009a6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80009aa:	d202      	bcs.n	80009b2 <__udivmoddi4+0x11a>
 80009ac:	4298      	cmp	r0, r3
 80009ae:	f200 80cd 	bhi.w	8000b4c <__udivmoddi4+0x2b4>
 80009b2:	4626      	mov	r6, r4
 80009b4:	1a1c      	subs	r4, r3, r0
 80009b6:	fa1f f38e 	uxth.w	r3, lr
 80009ba:	fbb4 f0f8 	udiv	r0, r4, r8
 80009be:	fb08 4410 	mls	r4, r8, r0, r4
 80009c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009c6:	fb00 f707 	mul.w	r7, r0, r7
 80009ca:	429f      	cmp	r7, r3
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x148>
 80009ce:	eb1c 0303 	adds.w	r3, ip, r3
 80009d2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x146>
 80009d8:	429f      	cmp	r7, r3
 80009da:	f200 80b0 	bhi.w	8000b3e <__udivmoddi4+0x2a6>
 80009de:	4620      	mov	r0, r4
 80009e0:	1bdb      	subs	r3, r3, r7
 80009e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009e6:	e7a5      	b.n	8000934 <__udivmoddi4+0x9c>
 80009e8:	f1c1 0620 	rsb	r6, r1, #32
 80009ec:	408b      	lsls	r3, r1
 80009ee:	fa22 f706 	lsr.w	r7, r2, r6
 80009f2:	431f      	orrs	r7, r3
 80009f4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009f8:	fa04 f301 	lsl.w	r3, r4, r1
 80009fc:	ea43 030c 	orr.w	r3, r3, ip
 8000a00:	40f4      	lsrs	r4, r6
 8000a02:	fa00 f801 	lsl.w	r8, r0, r1
 8000a06:	0c38      	lsrs	r0, r7, #16
 8000a08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000a10:	fa1f fc87 	uxth.w	ip, r7
 8000a14:	fb00 441e 	mls	r4, r0, lr, r4
 8000a18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000a20:	45a1      	cmp	r9, r4
 8000a22:	fa02 f201 	lsl.w	r2, r2, r1
 8000a26:	d90a      	bls.n	8000a3e <__udivmoddi4+0x1a6>
 8000a28:	193c      	adds	r4, r7, r4
 8000a2a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a2e:	f080 8084 	bcs.w	8000b3a <__udivmoddi4+0x2a2>
 8000a32:	45a1      	cmp	r9, r4
 8000a34:	f240 8081 	bls.w	8000b3a <__udivmoddi4+0x2a2>
 8000a38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a3c:	443c      	add	r4, r7
 8000a3e:	eba4 0409 	sub.w	r4, r4, r9
 8000a42:	fa1f f983 	uxth.w	r9, r3
 8000a46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a56:	45a4      	cmp	ip, r4
 8000a58:	d907      	bls.n	8000a6a <__udivmoddi4+0x1d2>
 8000a5a:	193c      	adds	r4, r7, r4
 8000a5c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a60:	d267      	bcs.n	8000b32 <__udivmoddi4+0x29a>
 8000a62:	45a4      	cmp	ip, r4
 8000a64:	d965      	bls.n	8000b32 <__udivmoddi4+0x29a>
 8000a66:	3b02      	subs	r3, #2
 8000a68:	443c      	add	r4, r7
 8000a6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a72:	eba4 040c 	sub.w	r4, r4, ip
 8000a76:	429c      	cmp	r4, r3
 8000a78:	46ce      	mov	lr, r9
 8000a7a:	469c      	mov	ip, r3
 8000a7c:	d351      	bcc.n	8000b22 <__udivmoddi4+0x28a>
 8000a7e:	d04e      	beq.n	8000b1e <__udivmoddi4+0x286>
 8000a80:	b155      	cbz	r5, 8000a98 <__udivmoddi4+0x200>
 8000a82:	ebb8 030e 	subs.w	r3, r8, lr
 8000a86:	eb64 040c 	sbc.w	r4, r4, ip
 8000a8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a8e:	40cb      	lsrs	r3, r1
 8000a90:	431e      	orrs	r6, r3
 8000a92:	40cc      	lsrs	r4, r1
 8000a94:	e9c5 6400 	strd	r6, r4, [r5]
 8000a98:	2100      	movs	r1, #0
 8000a9a:	e750      	b.n	800093e <__udivmoddi4+0xa6>
 8000a9c:	f1c2 0320 	rsb	r3, r2, #32
 8000aa0:	fa20 f103 	lsr.w	r1, r0, r3
 8000aa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa8:	fa24 f303 	lsr.w	r3, r4, r3
 8000aac:	4094      	lsls	r4, r2
 8000aae:	430c      	orrs	r4, r1
 8000ab0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab8:	fa1f f78c 	uxth.w	r7, ip
 8000abc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ac0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ac4:	0c23      	lsrs	r3, r4, #16
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb00 f107 	mul.w	r1, r0, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d908      	bls.n	8000ae4 <__udivmoddi4+0x24c>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000ada:	d22c      	bcs.n	8000b36 <__udivmoddi4+0x29e>
 8000adc:	4299      	cmp	r1, r3
 8000ade:	d92a      	bls.n	8000b36 <__udivmoddi4+0x29e>
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	1a5b      	subs	r3, r3, r1
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000aec:	fb08 3311 	mls	r3, r8, r1, r3
 8000af0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af4:	fb01 f307 	mul.w	r3, r1, r7
 8000af8:	42a3      	cmp	r3, r4
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x276>
 8000afc:	eb1c 0404 	adds.w	r4, ip, r4
 8000b00:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b04:	d213      	bcs.n	8000b2e <__udivmoddi4+0x296>
 8000b06:	42a3      	cmp	r3, r4
 8000b08:	d911      	bls.n	8000b2e <__udivmoddi4+0x296>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4464      	add	r4, ip
 8000b0e:	1ae4      	subs	r4, r4, r3
 8000b10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b14:	e739      	b.n	800098a <__udivmoddi4+0xf2>
 8000b16:	4604      	mov	r4, r0
 8000b18:	e6f0      	b.n	80008fc <__udivmoddi4+0x64>
 8000b1a:	4608      	mov	r0, r1
 8000b1c:	e706      	b.n	800092c <__udivmoddi4+0x94>
 8000b1e:	45c8      	cmp	r8, r9
 8000b20:	d2ae      	bcs.n	8000a80 <__udivmoddi4+0x1e8>
 8000b22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b2a:	3801      	subs	r0, #1
 8000b2c:	e7a8      	b.n	8000a80 <__udivmoddi4+0x1e8>
 8000b2e:	4631      	mov	r1, r6
 8000b30:	e7ed      	b.n	8000b0e <__udivmoddi4+0x276>
 8000b32:	4603      	mov	r3, r0
 8000b34:	e799      	b.n	8000a6a <__udivmoddi4+0x1d2>
 8000b36:	4630      	mov	r0, r6
 8000b38:	e7d4      	b.n	8000ae4 <__udivmoddi4+0x24c>
 8000b3a:	46d6      	mov	lr, sl
 8000b3c:	e77f      	b.n	8000a3e <__udivmoddi4+0x1a6>
 8000b3e:	4463      	add	r3, ip
 8000b40:	3802      	subs	r0, #2
 8000b42:	e74d      	b.n	80009e0 <__udivmoddi4+0x148>
 8000b44:	4606      	mov	r6, r0
 8000b46:	4623      	mov	r3, r4
 8000b48:	4608      	mov	r0, r1
 8000b4a:	e70f      	b.n	800096c <__udivmoddi4+0xd4>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	e730      	b.n	80009b4 <__udivmoddi4+0x11c>
 8000b52:	bf00      	nop

08000b54 <__aeabi_idiv0>:
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b6e:	4b31      	ldr	r3, [pc, #196]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000b70:	4a31      	ldr	r2, [pc, #196]	@ (8000c38 <MX_ADC1_Init+0xe0>)
 8000b72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b74:	4b2f      	ldr	r3, [pc, #188]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000b76:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b82:	4b2c      	ldr	r3, [pc, #176]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b88:	4b2a      	ldr	r3, [pc, #168]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b8e:	4b29      	ldr	r3, [pc, #164]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000b90:	2204      	movs	r2, #4
 8000b92:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b94:	4b27      	ldr	r3, [pc, #156]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b9a:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000ba0:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ba6:	4b23      	ldr	r3, [pc, #140]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000bae:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000bb0:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000bb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000bb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bd4:	4817      	ldr	r0, [pc, #92]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000bd6:	f001 fb7d 	bl	80022d4 <HAL_ADC_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000be0:	f000 fd51 	bl	8001686 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000be4:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <MX_ADC1_Init+0xe4>)
 8000be6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be8:	2306      	movs	r3, #6
 8000bea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000bec:	2306      	movs	r3, #6
 8000bee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bf0:	237f      	movs	r3, #127	@ 0x7f
 8000bf2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000c02:	f001 fef9 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000c0c:	f000 fd3b 	bl	8001686 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c10:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000c12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c14:	230c      	movs	r3, #12
 8000c16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000c1e:	f001 feeb 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000c28:	f000 fd2d 	bl	8001686 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000178 	.word	0x20000178
 8000c38:	50040000 	.word	0x50040000
 8000c3c:	80000001 	.word	0x80000001
 8000c40:	c7520000 	.word	0xc7520000

08000c44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0ae      	sub	sp, #184	@ 0xb8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	2294      	movs	r2, #148	@ 0x94
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f00b fdf9 	bl	800c85c <memset>
  if(adcHandle->Instance==ADC1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a40      	ldr	r2, [pc, #256]	@ (8000d70 <HAL_ADC_MspInit+0x12c>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d179      	bne.n	8000d68 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c7a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c82:	2302      	movs	r3, #2
 8000c84:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f005 fbe7 	bl	8006478 <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000cb0:	f000 fce9 	bl	8001686 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d74 <HAL_ADC_MspInit+0x130>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb8:	4a2e      	ldr	r2, [pc, #184]	@ (8000d74 <HAL_ADC_MspInit+0x130>)
 8000cba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d74 <HAL_ADC_MspInit+0x130>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ccc:	4b29      	ldr	r3, [pc, #164]	@ (8000d74 <HAL_ADC_MspInit+0x130>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd0:	4a28      	ldr	r2, [pc, #160]	@ (8000d74 <HAL_ADC_MspInit+0x130>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd8:	4b26      	ldr	r3, [pc, #152]	@ (8000d74 <HAL_ADC_MspInit+0x130>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cea:	230b      	movs	r3, #11
 8000cec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	481e      	ldr	r0, [pc, #120]	@ (8000d78 <HAL_ADC_MspInit+0x134>)
 8000cfe:	f003 f87b 	bl	8003df8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d02:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <HAL_ADC_MspInit+0x138>)
 8000d04:	4a1e      	ldr	r2, [pc, #120]	@ (8000d80 <HAL_ADC_MspInit+0x13c>)
 8000d06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d08:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <HAL_ADC_MspInit+0x138>)
 8000d0a:	2205      	movs	r2, #5
 8000d0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <HAL_ADC_MspInit+0x138>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d14:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <HAL_ADC_MspInit+0x138>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <HAL_ADC_MspInit+0x138>)
 8000d1c:	2280      	movs	r2, #128	@ 0x80
 8000d1e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d20:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <HAL_ADC_MspInit+0x138>)
 8000d22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d26:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d28:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <HAL_ADC_MspInit+0x138>)
 8000d2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d2e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <HAL_ADC_MspInit+0x138>)
 8000d32:	2220      	movs	r2, #32
 8000d34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <HAL_ADC_MspInit+0x138>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d3c:	480f      	ldr	r0, [pc, #60]	@ (8000d7c <HAL_ADC_MspInit+0x138>)
 8000d3e:	f002 fda1 	bl	8003884 <HAL_DMA_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8000d48:	f000 fc9d 	bl	8001686 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d7c <HAL_ADC_MspInit+0x138>)
 8000d50:	651a      	str	r2, [r3, #80]	@ 0x50
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <HAL_ADC_MspInit+0x138>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2012      	movs	r0, #18
 8000d5e:	f002 fd5a 	bl	8003816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000d62:	2012      	movs	r0, #18
 8000d64:	f002 fd73 	bl	800384e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d68:	bf00      	nop
 8000d6a:	37b8      	adds	r7, #184	@ 0xb8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	50040000 	.word	0x50040000
 8000d74:	40021000 	.word	0x40021000
 8000d78:	48000800 	.word	0x48000800
 8000d7c:	200001e0 	.word	0x200001e0
 8000d80:	40020008 	.word	0x40020008

08000d84 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d8a:	4b29      	ldr	r3, [pc, #164]	@ (8000e30 <MX_DMA_Init+0xac>)
 8000d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d8e:	4a28      	ldr	r2, [pc, #160]	@ (8000e30 <MX_DMA_Init+0xac>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d96:	4b26      	ldr	r3, [pc, #152]	@ (8000e30 <MX_DMA_Init+0xac>)
 8000d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000da2:	4b23      	ldr	r3, [pc, #140]	@ (8000e30 <MX_DMA_Init+0xac>)
 8000da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000da6:	4a22      	ldr	r2, [pc, #136]	@ (8000e30 <MX_DMA_Init+0xac>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6493      	str	r3, [r2, #72]	@ 0x48
 8000dae:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <MX_DMA_Init+0xac>)
 8000db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	@ (8000e34 <MX_DMA_Init+0xb0>)
 8000dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8000e38 <MX_DMA_Init+0xb4>)
 8000dbe:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <MX_DMA_Init+0xb0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <MX_DMA_Init+0xb0>)
 8000dc8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dcc:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <MX_DMA_Init+0xb0>)
 8000dd0:	2240      	movs	r2, #64	@ 0x40
 8000dd2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <MX_DMA_Init+0xb0>)
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dda:	4b16      	ldr	r3, [pc, #88]	@ (8000e34 <MX_DMA_Init+0xb0>)
 8000ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000de0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000de2:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <MX_DMA_Init+0xb0>)
 8000de4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000de8:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 8000dea:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <MX_DMA_Init+0xb0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000df0:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <MX_DMA_Init+0xb0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8000df6:	480f      	ldr	r0, [pc, #60]	@ (8000e34 <MX_DMA_Init+0xb0>)
 8000df8:	f002 fd44 	bl	8003884 <HAL_DMA_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000e02:	f000 fc40 	bl	8001686 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	200b      	movs	r0, #11
 8000e0c:	f002 fd03 	bl	8003816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e10:	200b      	movs	r0, #11
 8000e12:	f002 fd1c 	bl	800384e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	200c      	movs	r0, #12
 8000e1c:	f002 fcfb 	bl	8003816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e20:	200c      	movs	r0, #12
 8000e22:	f002 fd14 	bl	800384e <HAL_NVIC_EnableIRQ>

}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000
 8000e34:	20000240 	.word	0x20000240
 8000e38:	4002001c 	.word	0x4002001c

08000e3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	@ 0x30
 8000e40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b55      	ldr	r3, [pc, #340]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	4a54      	ldr	r2, [pc, #336]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5e:	4b52      	ldr	r3, [pc, #328]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	61bb      	str	r3, [r7, #24]
 8000e68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	4a4e      	ldr	r2, [pc, #312]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e76:	4b4c      	ldr	r3, [pc, #304]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	4b49      	ldr	r3, [pc, #292]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	4a48      	ldr	r2, [pc, #288]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8e:	4b46      	ldr	r3, [pc, #280]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	4b43      	ldr	r3, [pc, #268]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	4a42      	ldr	r2, [pc, #264]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea6:	4b40      	ldr	r3, [pc, #256]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	4a3c      	ldr	r2, [pc, #240]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000eb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebe:	4b3a      	ldr	r3, [pc, #232]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000eca:	f004 fbed 	bl	80056a8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	4b36      	ldr	r3, [pc, #216]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	4a35      	ldr	r2, [pc, #212]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eda:	4b33      	ldr	r3, [pc, #204]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000eec:	482f      	ldr	r0, [pc, #188]	@ (8000fac <MX_GPIO_Init+0x170>)
 8000eee:	f003 f915 	bl	800411c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2140      	movs	r1, #64	@ 0x40
 8000ef6:	482e      	ldr	r0, [pc, #184]	@ (8000fb0 <MX_GPIO_Init+0x174>)
 8000ef8:	f003 f910 	bl	800411c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2180      	movs	r1, #128	@ 0x80
 8000f00:	482c      	ldr	r0, [pc, #176]	@ (8000fb4 <MX_GPIO_Init+0x178>)
 8000f02:	f003 f90b 	bl	800411c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f0c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4825      	ldr	r0, [pc, #148]	@ (8000fb4 <MX_GPIO_Init+0x178>)
 8000f1e:	f002 ff6b 	bl	8003df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000f22:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481c      	ldr	r0, [pc, #112]	@ (8000fac <MX_GPIO_Init+0x170>)
 8000f3c:	f002 ff5c 	bl	8003df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f40:	2320      	movs	r3, #32
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	4817      	ldr	r0, [pc, #92]	@ (8000fb0 <MX_GPIO_Init+0x174>)
 8000f54:	f002 ff50 	bl	8003df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f58:	2340      	movs	r3, #64	@ 0x40
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4810      	ldr	r0, [pc, #64]	@ (8000fb0 <MX_GPIO_Init+0x174>)
 8000f70:	f002 ff42 	bl	8003df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000f74:	2380      	movs	r3, #128	@ 0x80
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480a      	ldr	r0, [pc, #40]	@ (8000fb4 <MX_GPIO_Init+0x178>)
 8000f8c:	f002 ff34 	bl	8003df8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	2028      	movs	r0, #40	@ 0x28
 8000f96:	f002 fc3e 	bl	8003816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f9a:	2028      	movs	r0, #40	@ 0x28
 8000f9c:	f002 fc57 	bl	800384e <HAL_NVIC_EnableIRQ>

}
 8000fa0:	bf00      	nop
 8000fa2:	3730      	adds	r7, #48	@ 0x30
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48000400 	.word	0x48000400
 8000fb0:	48001800 	.word	0x48001800
 8000fb4:	48000800 	.word	0x48000800

08000fb8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fc8:	d119      	bne.n	8000ffe <HAL_GPIO_EXTI_Callback+0x46>
		static bool previous;
		if(previous == false){
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <HAL_GPIO_EXTI_Callback+0x50>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	f083 0301 	eor.w	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d009      	beq.n	8000fec <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fde:	480b      	ldr	r0, [pc, #44]	@ (800100c <HAL_GPIO_EXTI_Callback+0x54>)
 8000fe0:	f003 f89c 	bl	800411c <HAL_GPIO_WritePin>
			previous = true;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <HAL_GPIO_EXTI_Callback+0x50>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000fea:	e008      	b.n	8000ffe <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ff2:	4806      	ldr	r0, [pc, #24]	@ (800100c <HAL_GPIO_EXTI_Callback+0x54>)
 8000ff4:	f003 f892 	bl	800411c <HAL_GPIO_WritePin>
			previous = false;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <HAL_GPIO_EXTI_Callback+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200002a0 	.word	0x200002a0
 800100c:	48000400 	.word	0x48000400

08001010 <DataTransmit2MTLB>:

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);
extern void DataReceive_MTLB_Callback(uint16_t iD, uint32_t *xData, uint16_t nData_in_values);

// Send float or uint32 or none data
int DataTransmit2MTLB(uint16_t iD, uint8_t *xData, uint16_t nData_in_values) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	80fb      	strh	r3, [r7, #6]
 800101c:	4613      	mov	r3, r2
 800101e:	80bb      	strh	r3, [r7, #4]
	// USB busy
	if (s2m_Status)
 8001020:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <DataTransmit2MTLB+0x88>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <DataTransmit2MTLB+0x1e>
		return -1;
 8001028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800102c:	e02f      	b.n	800108e <DataTransmit2MTLB+0x7e>

	if ((sizeof(buf_M_TX) - 4) < (nData_in_values * 4)) {
 800102e:	88bb      	ldrh	r3, [r7, #4]
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001036:	d902      	bls.n	800103e <DataTransmit2MTLB+0x2e>
		// vystupni buffer je mensi nez odesilana data
		return -2;
 8001038:	f06f 0301 	mvn.w	r3, #1
 800103c:	e027      	b.n	800108e <DataTransmit2MTLB+0x7e>
	}

	s2m_Status = 1; // manualni nastaveni na USB busy, predpoklada se cinnost
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <DataTransmit2MTLB+0x88>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]

	// prekopirovani dat do bufferu
	((uint16_t*) buf_M_TX)[0] = iD;
 8001044:	4a15      	ldr	r2, [pc, #84]	@ (800109c <DataTransmit2MTLB+0x8c>)
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	8013      	strh	r3, [r2, #0]
	((uint16_t*) buf_M_TX)[1] = nData_in_values;
 800104a:	4a15      	ldr	r2, [pc, #84]	@ (80010a0 <DataTransmit2MTLB+0x90>)
 800104c:	88bb      	ldrh	r3, [r7, #4]
 800104e:	8013      	strh	r3, [r2, #0]
	if (nData_in_values > 0)
 8001050:	88bb      	ldrh	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d006      	beq.n	8001064 <DataTransmit2MTLB+0x54>
		memcpy(buf_M_TX + 1, xData, nData_in_values * 4);
 8001056:	4813      	ldr	r0, [pc, #76]	@ (80010a4 <DataTransmit2MTLB+0x94>)
 8001058:	88bb      	ldrh	r3, [r7, #4]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	461a      	mov	r2, r3
 800105e:	6839      	ldr	r1, [r7, #0]
 8001060:	f00b fc40 	bl	800c8e4 <memcpy>

	// volani funkce na transmit dat
	s2m_Status = CDC_Transmit_FS((uint8_t*) buf_M_TX, nData_in_values * 4 + 4);
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	3301      	adds	r3, #1
 8001068:	b29b      	uxth	r3, r3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	b29b      	uxth	r3, r3
 800106e:	4619      	mov	r1, r3
 8001070:	480a      	ldr	r0, [pc, #40]	@ (800109c <DataTransmit2MTLB+0x8c>)
 8001072:	f00a fd95 	bl	800bba0 <CDC_Transmit_FS>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <DataTransmit2MTLB+0x88>)
 800107c:	601a      	str	r2, [r3, #0]

	if (s2m_Status) {
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <DataTransmit2MTLB+0x88>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <DataTransmit2MTLB+0x7c>
		// USB busy, vyresetuje na USB_OK
		s2m_Status = 0;
 8001086:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <DataTransmit2MTLB+0x88>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
	}

	return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200082a8 	.word	0x200082a8
 800109c:	200002a4 	.word	0x200002a4
 80010a0:	200002a6 	.word	0x200002a6
 80010a4:	200002a8 	.word	0x200002a8

080010a8 <SendInt2MTLB>:

int SendData2MTLB(uint16_t iD, uint8_t *xData, uint16_t nData_in_values) {
	return DataTransmit2MTLB(iD, xData, nData_in_values);
}

int SendInt2MTLB(uint16_t iD, int *xInt) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	80fb      	strh	r3, [r7, #6]
	return DataTransmit2MTLB(iD, (uint8_t*) xInt, 1);
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	2201      	movs	r2, #1
 80010b8:	6839      	ldr	r1, [r7, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ffa8 	bl	8001010 <DataTransmit2MTLB>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <m2s_Process>:

void m2s_Process() {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	// funkce volana z nekonecne smycky

	if (!m2s_Status)
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <m2s_Process+0x50>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d01e      	beq.n	8001116 <m2s_Process+0x4a>
		return; // pokud neprisla data, ukonci se

	if (m2s_Status == 1) {
 80010d8:	4b10      	ldr	r3, [pc, #64]	@ (800111c <m2s_Process+0x50>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d111      	bne.n	8001104 <m2s_Process+0x38>
		// zpracuje data
		DataReceive_MTLB_Callback(m2s_ID, m2s_buf, m2s_nData_in_bytes / 4);
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <m2s_Process+0x54>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	b298      	uxth	r0, r3
 80010e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <m2s_Process+0x58>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	da00      	bge.n	80010f0 <m2s_Process+0x24>
 80010ee:	3303      	adds	r3, #3
 80010f0:	109b      	asrs	r3, r3, #2
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	461a      	mov	r2, r3
 80010f6:	490c      	ldr	r1, [pc, #48]	@ (8001128 <m2s_Process+0x5c>)
 80010f8:	f000 f88c 	bl	8001214 <DataReceive_MTLB_Callback>
		m2s_Status = 0;
 80010fc:	4b07      	ldr	r3, [pc, #28]	@ (800111c <m2s_Process+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
		return;
 8001102:	e009      	b.n	8001118 <m2s_Process+0x4c>
	}

	if (m2s_Status == -1) {
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <m2s_Process+0x50>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800110c:	d104      	bne.n	8001118 <m2s_Process+0x4c>
		// inicializace
		m2s_Status = 0;
 800110e:	4b03      	ldr	r3, [pc, #12]	@ (800111c <m2s_Process+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
		return;
 8001114:	e000      	b.n	8001118 <m2s_Process+0x4c>
		return; // pokud neprisla data, ukonci se
 8001116:	bf00      	nop
	}

}
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200082ac 	.word	0x200082ac
 8001120:	200082b0 	.word	0x200082b0
 8001124:	200082b4 	.word	0x200082b4
 8001128:	200042a8 	.word	0x200042a8

0800112c <USB_My_Receive>:

void USB_My_Receive(uint8_t *Buf, uint32_t Len) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]

	// callback na prijem dat

	if (m2s_Status == 0) {
 8001136:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <USB_My_Receive+0x94>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10c      	bne.n	8001158 <USB_My_Receive+0x2c>
		// iD
		m2s_ID = ((uint16_t*) Buf)[0];
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	4b1f      	ldr	r3, [pc, #124]	@ (80011c4 <USB_My_Receive+0x98>)
 8001146:	601a      	str	r2, [r3, #0]
		if (m2s_ID == 0)
 8001148:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <USB_My_Receive+0x98>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d030      	beq.n	80011b2 <USB_My_Receive+0x86>
			return;
		m2s_Status = 100;
 8001150:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <USB_My_Receive+0x94>)
 8001152:	2264      	movs	r2, #100	@ 0x64
 8001154:	601a      	str	r2, [r3, #0]
		return;
 8001156:	e02f      	b.n	80011b8 <USB_My_Receive+0x8c>
	}
	if (m2s_Status == 100) {
 8001158:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <USB_My_Receive+0x94>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b64      	cmp	r3, #100	@ 0x64
 800115e:	d110      	bne.n	8001182 <USB_My_Receive+0x56>
		// nData
		m2s_nData_in_bytes = ((uint16_t*) Buf)[0] * 4;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4a18      	ldr	r2, [pc, #96]	@ (80011c8 <USB_My_Receive+0x9c>)
 8001168:	6013      	str	r3, [r2, #0]
		if (m2s_nData_in_bytes == 0) {
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <USB_My_Receive+0x9c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d103      	bne.n	800117a <USB_My_Receive+0x4e>
			m2s_Status = 1;
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <USB_My_Receive+0x94>)
 8001174:	2201      	movs	r2, #1
 8001176:	601a      	str	r2, [r3, #0]
			return;
 8001178:	e01e      	b.n	80011b8 <USB_My_Receive+0x8c>
		}
		m2s_Status = 3; //wait for xData
 800117a:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <USB_My_Receive+0x94>)
 800117c:	2203      	movs	r2, #3
 800117e:	601a      	str	r2, [r3, #0]
		return;
 8001180:	e01a      	b.n	80011b8 <USB_My_Receive+0x8c>
	}
	if (m2s_Status == 3) {
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <USB_My_Receive+0x94>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d115      	bne.n	80011b6 <USB_My_Receive+0x8a>
		// xData
		if (Len < m2s_nData_in_bytes)
 800118a:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <USB_My_Receive+0x9c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4293      	cmp	r3, r2
 8001194:	d202      	bcs.n	800119c <USB_My_Receive+0x70>
			m2s_nData_in_bytes = Len;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	4a0b      	ldr	r2, [pc, #44]	@ (80011c8 <USB_My_Receive+0x9c>)
 800119a:	6013      	str	r3, [r2, #0]
		memcpy(m2s_buf, Buf, m2s_nData_in_bytes);
 800119c:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <USB_My_Receive+0x9c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4809      	ldr	r0, [pc, #36]	@ (80011cc <USB_My_Receive+0xa0>)
 80011a6:	f00b fb9d 	bl	800c8e4 <memcpy>
		m2s_Status = 1;
 80011aa:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <USB_My_Receive+0x94>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	601a      	str	r2, [r3, #0]
		return;
 80011b0:	e002      	b.n	80011b8 <USB_My_Receive+0x8c>
			return;
 80011b2:	bf00      	nop
 80011b4:	e000      	b.n	80011b8 <USB_My_Receive+0x8c>
	}

	return;
 80011b6:	bf00      	nop
}
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200082ac 	.word	0x200082ac
 80011c4:	200082b0 	.word	0x200082b0
 80011c8:	200082b4 	.word	0x200082b4
 80011cc:	200042a8 	.word	0x200042a8

080011d0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a0b      	ldr	r2, [pc, #44]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d10e      	bne.n	80011fe <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	480a      	ldr	r0, [pc, #40]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80011e4:	f002 ffb2 	bl	800414c <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a08      	ldr	r2, [pc, #32]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80011f0:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		DataTransmit2MTLB(1010, &periodical, 1);
 80011f2:	2201      	movs	r2, #1
 80011f4:	4906      	ldr	r1, [pc, #24]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80011f6:	f240 30f2 	movw	r0, #1010	@ 0x3f2
 80011fa:	f7ff ff09 	bl	8001010 <DataTransmit2MTLB>
	}
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000a440 	.word	0x2000a440
 800120c:	48000400 	.word	0x48000400
 8001210:	200082b8 	.word	0x200082b8

08001214 <DataReceive_MTLB_Callback>:
//    	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t*)testdata, 10);
//    }

}

void DataReceive_MTLB_Callback(uint16_t iD, uint32_t *xData, uint16_t nData_in_values) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	80fb      	strh	r3, [r7, #6]
 8001220:	4613      	mov	r3, r2
 8001222:	80bb      	strh	r3, [r7, #4]
	// funkce volana po prijmu dat

	switch (iD) {
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	2b14      	cmp	r3, #20
 8001228:	d106      	bne.n	8001238 <DataReceive_MTLB_Callback+0x24>
	case 20:
		//data odesilam zpet do matlabu
		DataTransmit2MTLB(20, xData, nData_in_values);
 800122a:	88bb      	ldrh	r3, [r7, #4]
 800122c:	461a      	mov	r2, r3
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	2014      	movs	r0, #20
 8001232:	f7ff feed 	bl	8001010 <DataTransmit2MTLB>
		break;
 8001236:	e000      	b.n	800123a <DataReceive_MTLB_Callback+0x26>

	default:
		break;
 8001238:	bf00      	nop
	}
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <myDmaFunction>:

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 800124c:	4b07      	ldr	r3, [pc, #28]	@ (800126c <myDmaFunction+0x28>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001252:	4a07      	ldr	r2, [pc, #28]	@ (8001270 <myDmaFunction+0x2c>)
 8001254:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8001256:	4b05      	ldr	r3, [pc, #20]	@ (800126c <myDmaFunction+0x28>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125c:	4a05      	ldr	r2, [pc, #20]	@ (8001274 <myDmaFunction+0x30>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	2000a3f4 	.word	0x2000a3f4
 8001270:	200082c4 	.word	0x200082c4
 8001274:	200082c8 	.word	0x200082c8

08001278 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	@ 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	// Callback pro naplneni celeho kruhoveho bufferu

	UNUSED(hadc);

	potenciometer = 0;
 8001280:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <HAL_ADC_ConvCpltCallback+0x110>)
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 100; i++) {
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
 800128c:	e013      	b.n	80012b6 <HAL_ADC_ConvCpltCallback+0x3e>
		potenciometer = potenciometer + dma_data_buffer[i + 100];
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	3364      	adds	r3, #100	@ 0x64
 8001292:	4a3e      	ldr	r2, [pc, #248]	@ (800138c <HAL_ADC_ConvCpltCallback+0x114>)
 8001294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001298:	ee07 3a90 	vmov	s15, r3
 800129c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a0:	4b39      	ldr	r3, [pc, #228]	@ (8001388 <HAL_ADC_ConvCpltCallback+0x110>)
 80012a2:	edd3 7a00 	vldr	s15, [r3]
 80012a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012aa:	4b37      	ldr	r3, [pc, #220]	@ (8001388 <HAL_ADC_ConvCpltCallback+0x110>)
 80012ac:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 100; i++) {
 80012b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b2:	3301      	adds	r3, #1
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80012b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b8:	2b63      	cmp	r3, #99	@ 0x63
 80012ba:	dde8      	ble.n	800128e <HAL_ADC_ConvCpltCallback+0x16>
	}
	potenciometer /= 100;
 80012bc:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <HAL_ADC_ConvCpltCallback+0x110>)
 80012be:	ed93 7a00 	vldr	s14, [r3]
 80012c2:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001390 <HAL_ADC_ConvCpltCallback+0x118>
 80012c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001388 <HAL_ADC_ConvCpltCallback+0x110>)
 80012cc:	edc3 7a00 	vstr	s15, [r3]

    // Constants from the microcontroller's memory
    uint16_t TS_CAL1 = *((uint16_t*)0x1FFF75A8); // @30°C
 80012d0:	4b30      	ldr	r3, [pc, #192]	@ (8001394 <HAL_ADC_ConvCpltCallback+0x11c>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t TS_CAL2 = *((uint16_t*)0x1FFF75CA); // @110°C
 80012d6:	4b30      	ldr	r3, [pc, #192]	@ (8001398 <HAL_ADC_ConvCpltCallback+0x120>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	843b      	strh	r3, [r7, #32]
    uint16_t VREFINT_CAL = *((uint16_t*)0x1FFF75AA); // Reference voltage calibration
 80012dc:	4b2f      	ldr	r3, [pc, #188]	@ (800139c <HAL_ADC_ConvCpltCallback+0x124>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	83fb      	strh	r3, [r7, #30]
    VREFINT_CAL = 1212;
 80012e2:	f240 43bc 	movw	r3, #1212	@ 0x4bc
 80012e6:	83fb      	strh	r3, [r7, #30]

    // Adjust for VREF if necessary
    float VREF = 3.0; // Assumed external reference voltage in volts
 80012e8:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <HAL_ADC_ConvCpltCallback+0x128>)
 80012ea:	61bb      	str	r3, [r7, #24]
    float vdda = VREF * VREFINT_CAL / potenciometer;
 80012ec:	8bfb      	ldrh	r3, [r7, #30]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80012fa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80012fe:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <HAL_ADC_ConvCpltCallback+0x110>)
 8001300:	ed93 7a00 	vldr	s14, [r3]
 8001304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001308:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert to temperature
    float temperature = ((float)(potenciometer - TS_CAL1) / (TS_CAL2 - TS_CAL1)) * (110.0 - 30.0) + 30.0;
 800130c:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <HAL_ADC_ConvCpltCallback+0x110>)
 800130e:	ed93 7a00 	vldr	s14, [r3]
 8001312:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001320:	8c3a      	ldrh	r2, [r7, #32]
 8001322:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001332:	ee16 0a90 	vmov	r0, s13
 8001336:	f7ff f9ef 	bl	8000718 <__aeabi_f2d>
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001340:	f7fe ff5c 	bl	80001fc <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <HAL_ADC_ConvCpltCallback+0x130>)
 8001352:	f7ff f883 	bl	800045c <__adddf3>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fa33 	bl	80007c8 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	613b      	str	r3, [r7, #16]
    //float temperature = ((110 - 30)/(TS_CAL2 - TS_CAL1)) * (potenciometer - 30) + 30;

    // Převedení na celé číslo pro výstup
    int temperatureInt = (int)temperature;
 8001366:	edd7 7a04 	vldr	s15, [r7, #16]
 800136a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136e:	ee17 3a90 	vmov	r3, s15
 8001372:	60fb      	str	r3, [r7, #12]
	SendInt2MTLB(23, &temperatureInt);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	2017      	movs	r0, #23
 800137c:	f7ff fe94 	bl	80010a8 <SendInt2MTLB>
}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	@ 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000a39c 	.word	0x2000a39c
 800138c:	2000a20c 	.word	0x2000a20c
 8001390:	42c80000 	.word	0x42c80000
 8001394:	1fff75a8 	.word	0x1fff75a8
 8001398:	1fff75ca 	.word	0x1fff75ca
 800139c:	1fff75aa 	.word	0x1fff75aa
 80013a0:	40400000 	.word	0x40400000
 80013a4:	40540000 	.word	0x40540000
 80013a8:	403e0000 	.word	0x403e0000

080013ac <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);

	potenciometer = 0;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 100; i++) {
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e012      	b.n	80013e8 <HAL_ADC_ConvHalfCpltCallback+0x3c>
		potenciometer = potenciometer + dma_data_buffer[i];
 80013c2:	4a18      	ldr	r2, [pc, #96]	@ (8001424 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d2:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013dc:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 80013de:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 100; i++) {
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b63      	cmp	r3, #99	@ 0x63
 80013ec:	dde9      	ble.n	80013c2 <HAL_ADC_ConvHalfCpltCallback+0x16>
	}
	potenciometer = potenciometer / 100;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 80013f0:	ed93 7a00 	vldr	s14, [r3]
 80013f4:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001428 <HAL_ADC_ConvHalfCpltCallback+0x7c>
 80013f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 80013fe:	edc3 7a00 	vstr	s15, [r3]
	potenciometerInt = (int) potenciometer;
 8001402:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140c:	ee17 2a90 	vmov	r2, s15
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8001412:	601a      	str	r2, [r3, #0]

	//SendInt2MTLB(23, &potenciometerInt);
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	2000a39c 	.word	0x2000a39c
 8001424:	2000a20c 	.word	0x2000a20c
 8001428:	42c80000 	.word	0x42c80000
 800142c:	2000a3a0 	.word	0x2000a3a0

08001430 <load_CPU>:

void load_CPU() {
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
    // Alokace dvou velkých polí
    uint32_t *src_array = (uint32_t*)malloc(1000000 * sizeof(uint32_t));
 8001436:	4825      	ldr	r0, [pc, #148]	@ (80014cc <load_CPU+0x9c>)
 8001438:	f00b f952 	bl	800c6e0 <malloc>
 800143c:	4603      	mov	r3, r0
 800143e:	60bb      	str	r3, [r7, #8]
    uint32_t *dest_array = (uint32_t*)malloc(1000000 * sizeof(uint32_t));
 8001440:	4822      	ldr	r0, [pc, #136]	@ (80014cc <load_CPU+0x9c>)
 8001442:	f00b f94d 	bl	800c6e0 <malloc>
 8001446:	4603      	mov	r3, r0
 8001448:	607b      	str	r3, [r7, #4]

    if (src_array == NULL || dest_array == NULL) {
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d039      	beq.n	80014c4 <load_CPU+0x94>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d036      	beq.n	80014c4 <load_CPU+0x94>
        // Pokud se nepodaří alokovat paměť
        return;
    }

    // Naplnění zdrojového pole hodnotami
    for (uint32_t i = 0; i < 1000000; i++) {
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e008      	b.n	800146e <load_CPU+0x3e>
        src_array[i] = i;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	4413      	add	r3, r2
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 1000000; i++) {
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3301      	adds	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	4a17      	ldr	r2, [pc, #92]	@ (80014d0 <load_CPU+0xa0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d9f2      	bls.n	800145c <load_CPU+0x2c>
    }

    // Opakované kopírování polí pro zatížení CPU
    for (uint32_t repeat = 0; repeat < 100000; repeat++) {
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	e018      	b.n	80014ae <load_CPU+0x7e>
        for (uint32_t i = 0; i < 1000000; i++) {
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	e00e      	b.n	80014a0 <load_CPU+0x70>
            dest_array[i] = src_array[i];
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	441a      	add	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	440b      	add	r3, r1
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	601a      	str	r2, [r3, #0]
            int test = 999999999 / 190241835;
 8001496:	2305      	movs	r3, #5
 8001498:	603b      	str	r3, [r7, #0]
        for (uint32_t i = 0; i < 1000000; i++) {
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3301      	adds	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4a0b      	ldr	r2, [pc, #44]	@ (80014d0 <load_CPU+0xa0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d9ec      	bls.n	8001482 <load_CPU+0x52>
    for (uint32_t repeat = 0; repeat < 100000; repeat++) {
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	3301      	adds	r3, #1
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4a08      	ldr	r2, [pc, #32]	@ (80014d4 <load_CPU+0xa4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d9e2      	bls.n	800147c <load_CPU+0x4c>
        }
    }

    // Uvolnění paměti
    free(src_array);
 80014b6:	68b8      	ldr	r0, [r7, #8]
 80014b8:	f00b f91a 	bl	800c6f0 <free>
    free(dest_array);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f00b f917 	bl	800c6f0 <free>
 80014c2:	e000      	b.n	80014c6 <load_CPU+0x96>
        return;
 80014c4:	bf00      	nop
}
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	003d0900 	.word	0x003d0900
 80014d0:	000f423f 	.word	0x000f423f
 80014d4:	0001869f 	.word	0x0001869f

080014d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014de:	f000 fc4c 	bl	8001d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e2:	f000 f87d 	bl	80015e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e6:	f7ff fca9 	bl	8000e3c <MX_GPIO_Init>
  MX_DMA_Init();
 80014ea:	f7ff fc4b 	bl	8000d84 <MX_DMA_Init>
  MX_TIM6_Init();
 80014ee:	f000 fa4d 	bl	800198c <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 80014f2:	f00a fa91 	bl	800ba18 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 80014f6:	f000 f9fb 	bl	80018f0 <MX_TIM5_Init>
  MX_ADC1_Init();
 80014fa:	f7ff fb2d 	bl	8000b58 <MX_ADC1_Init>
  MX_TIM3_Init();
 80014fe:	f000 f9a9 	bl	8001854 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001502:	f000 fb1f 	bl	8001b44 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8001506:	f000 facf 	bl	8001aa8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */



	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2180      	movs	r1, #128	@ 0x80
 800150e:	4827      	ldr	r0, [pc, #156]	@ (80015ac <main+0xd4>)
 8001510:	f002 fe04 	bl	800411c <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 8001514:	4826      	ldr	r0, [pc, #152]	@ (80015b0 <main+0xd8>)
 8001516:	f005 fd87 	bl	8007028 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 800151a:	4826      	ldr	r0, [pc, #152]	@ (80015b4 <main+0xdc>)
 800151c:	f005 fd1c 	bl	8006f58 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	e00d      	b.n	8001542 <main+0x6a>
		dma[i] = i;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001530:	4a21      	ldr	r2, [pc, #132]	@ (80015b8 <main+0xe0>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3301      	adds	r3, #1
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001548:	dbed      	blt.n	8001526 <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 800154a:	4a1c      	ldr	r2, [pc, #112]	@ (80015bc <main+0xe4>)
 800154c:	2100      	movs	r1, #0
 800154e:	481c      	ldr	r0, [pc, #112]	@ (80015c0 <main+0xe8>)
 8001550:	f002 fb6a 	bl	8003c28 <HAL_DMA_RegisterCallback>
 8001554:	4603      	mov	r3, r0
 8001556:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 8001558:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <main+0xdc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <main+0xec>)
 8001560:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 8001562:	4915      	ldr	r1, [pc, #84]	@ (80015b8 <main+0xe0>)
 8001564:	4a18      	ldr	r2, [pc, #96]	@ (80015c8 <main+0xf0>)
 8001566:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800156a:	4815      	ldr	r0, [pc, #84]	@ (80015c0 <main+0xe8>)
 800156c:	f002 fa32 	bl	80039d4 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 8001570:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <main+0xdc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	4a15      	ldr	r2, [pc, #84]	@ (80015cc <main+0xf4>)
 8001578:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <main+0xdc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001580:	4a13      	ldr	r2, [pc, #76]	@ (80015d0 <main+0xf8>)
 8001582:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start_IT(&htim3);
 8001584:	4813      	ldr	r0, [pc, #76]	@ (80015d4 <main+0xfc>)
 8001586:	f005 fd4f 	bl	8007028 <HAL_TIM_Base_Start_IT>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800158a:	217f      	movs	r1, #127	@ 0x7f
 800158c:	4812      	ldr	r0, [pc, #72]	@ (80015d8 <main+0x100>)
 800158e:	f001 ffd5 	bl	800353c <HAL_ADCEx_Calibration_Start>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 200);
 8001592:	22c8      	movs	r2, #200	@ 0xc8
 8001594:	4911      	ldr	r1, [pc, #68]	@ (80015dc <main+0x104>)
 8001596:	4810      	ldr	r0, [pc, #64]	@ (80015d8 <main+0x100>)
 8001598:	f000 ffe2 	bl	8002560 <HAL_ADC_Start_DMA>
 800159c:	4603      	mov	r3, r0
 800159e:	70bb      	strb	r3, [r7, #2]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		load_CPU();
 80015a0:	f7ff ff46 	bl	8001430 <load_CPU>
		m2s_Process();
 80015a4:	f7ff fd92 	bl	80010cc <m2s_Process>
		load_CPU();
 80015a8:	bf00      	nop
 80015aa:	e7f9      	b.n	80015a0 <main+0xc8>
 80015ac:	48000800 	.word	0x48000800
 80015b0:	2000a440 	.word	0x2000a440
 80015b4:	2000a3f4 	.word	0x2000a3f4
 80015b8:	200082cc 	.word	0x200082cc
 80015bc:	08001245 	.word	0x08001245
 80015c0:	20000240 	.word	0x20000240
 80015c4:	200082bc 	.word	0x200082bc
 80015c8:	2000926c 	.word	0x2000926c
 80015cc:	200082c8 	.word	0x200082c8
 80015d0:	200082c0 	.word	0x200082c0
 80015d4:	2000a3a8 	.word	0x2000a3a8
 80015d8:	20000178 	.word	0x20000178
 80015dc:	2000a20c 	.word	0x2000a20c

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b096      	sub	sp, #88	@ 0x58
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	2244      	movs	r2, #68	@ 0x44
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00b f934 	bl	800c85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	463b      	mov	r3, r7
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001602:	2000      	movs	r0, #0
 8001604:	f003 ff9c 	bl	8005540 <HAL_PWREx_ControlVoltageScaling>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800160e:	f000 f83a 	bl	8001686 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001612:	2322      	movs	r3, #34	@ 0x22
 8001614:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001616:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800161a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800161c:	2301      	movs	r3, #1
 800161e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001620:	2340      	movs	r3, #64	@ 0x40
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001624:	2302      	movs	r3, #2
 8001626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001628:	2302      	movs	r3, #2
 800162a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800162c:	2302      	movs	r3, #2
 800162e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001630:	231e      	movs	r3, #30
 8001632:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001634:	2302      	movs	r3, #2
 8001636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001638:	2302      	movs	r3, #2
 800163a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800163c:	2302      	movs	r3, #2
 800163e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4618      	mov	r0, r3
 8001646:	f004 f83f 	bl	80056c8 <HAL_RCC_OscConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001650:	f000 f819 	bl	8001686 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001654:	230f      	movs	r3, #15
 8001656:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001658:	2303      	movs	r3, #3
 800165a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	2105      	movs	r1, #5
 800166e:	4618      	mov	r0, r3
 8001670:	f004 fc44 	bl	8005efc <HAL_RCC_ClockConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800167a:	f000 f804 	bl	8001686 <Error_Handler>
  }
}
 800167e:	bf00      	nop
 8001680:	3758      	adds	r7, #88	@ 0x58
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168a:	b672      	cpsid	i
}
 800168c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800168e:	bf00      	nop
 8001690:	e7fd      	b.n	800168e <Error_Handler+0x8>
	...

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <HAL_MspInit+0x44>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800169e:	4a0e      	ldr	r2, [pc, #56]	@ (80016d8 <HAL_MspInit+0x44>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <HAL_MspInit+0x44>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <HAL_MspInit+0x44>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b6:	4a08      	ldr	r2, [pc, #32]	@ (80016d8 <HAL_MspInit+0x44>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_MspInit+0x44>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <NMI_Handler+0x4>

080016e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <MemManage_Handler+0x4>

080016f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <UsageFault_Handler+0x4>

08001704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001732:	f000 fb77 	bl	8001e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <DMA1_Channel1_IRQHandler+0x10>)
 8001742:	f002 f9c2 	bl	8003aca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200001e0 	.word	0x200001e0

08001750 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <DMA1_Channel2_IRQHandler+0x10>)
 8001756:	f002 f9b8 	bl	8003aca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000240 	.word	0x20000240

08001764 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <ADC1_IRQHandler+0x10>)
 800176a:	f000 ff7d 	bl	8002668 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000178 	.word	0x20000178

08001778 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <TIM3_IRQHandler+0x10>)
 800177e:	f005 fcc3 	bl	8007108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000a3a8 	.word	0x2000a3a8

0800178c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001790:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001794:	f002 fcf4 	bl	8004180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <TIM6_DAC_IRQHandler+0x10>)
 80017a2:	f005 fcb1 	bl	8007108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000a440 	.word	0x2000a440

080017b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <OTG_FS_IRQHandler+0x10>)
 80017b6:	f002 fe4e 	bl	8004456 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000ba98 	.word	0x2000ba98

080017c4 <_sbrk>:
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
 80017f4:	f00b f84a 	bl	800c88c <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200a0000 	.word	0x200a0000
 8001824:	00000400 	.word	0x00000400
 8001828:	2000a3a4 	.word	0x2000a3a4
 800182c:	2000c310 	.word	0x2000c310

08001830 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <SystemInit+0x20>)
 8001836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800183a:	4a05      	ldr	r2, [pc, #20]	@ (8001850 <SystemInit+0x20>)
 800183c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001840:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185a:	f107 0310 	add.w	r3, r7, #16
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001872:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <MX_TIM3_Init+0x94>)
 8001874:	4a1d      	ldr	r2, [pc, #116]	@ (80018ec <MX_TIM3_Init+0x98>)
 8001876:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <MX_TIM3_Init+0x94>)
 800187a:	2217      	movs	r2, #23
 800187c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <MX_TIM3_Init+0x94>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001884:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <MX_TIM3_Init+0x94>)
 8001886:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800188a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188c:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <MX_TIM3_Init+0x94>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <MX_TIM3_Init+0x94>)
 8001894:	2280      	movs	r2, #128	@ 0x80
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001898:	4813      	ldr	r0, [pc, #76]	@ (80018e8 <MX_TIM3_Init+0x94>)
 800189a:	f005 fb05 	bl	8006ea8 <HAL_TIM_Base_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80018a4:	f7ff feef 	bl	8001686 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018ae:	f107 0310 	add.w	r3, r7, #16
 80018b2:	4619      	mov	r1, r3
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <MX_TIM3_Init+0x94>)
 80018b6:	f005 fd29 	bl	800730c <HAL_TIM_ConfigClockSource>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80018c0:	f7ff fee1 	bl	8001686 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018c4:	2320      	movs	r3, #32
 80018c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <MX_TIM3_Init+0x94>)
 80018d2:	f005 ff41 	bl	8007758 <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018dc:	f7ff fed3 	bl	8001686 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2000a3a8 	.word	0x2000a3a8
 80018ec:	40000400 	.word	0x40000400

080018f0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800190e:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <MX_TIM5_Init+0x94>)
 8001910:	4a1d      	ldr	r2, [pc, #116]	@ (8001988 <MX_TIM5_Init+0x98>)
 8001912:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001914:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <MX_TIM5_Init+0x94>)
 8001916:	2200      	movs	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <MX_TIM5_Init+0x94>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001920:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <MX_TIM5_Init+0x94>)
 8001922:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001926:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001928:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <MX_TIM5_Init+0x94>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <MX_TIM5_Init+0x94>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001934:	4813      	ldr	r0, [pc, #76]	@ (8001984 <MX_TIM5_Init+0x94>)
 8001936:	f005 fab7 	bl	8006ea8 <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001940:	f7ff fea1 	bl	8001686 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001948:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	4619      	mov	r1, r3
 8001950:	480c      	ldr	r0, [pc, #48]	@ (8001984 <MX_TIM5_Init+0x94>)
 8001952:	f005 fcdb 	bl	800730c <HAL_TIM_ConfigClockSource>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800195c:	f7ff fe93 	bl	8001686 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	@ (8001984 <MX_TIM5_Init+0x94>)
 800196e:	f005 fef3 	bl	8007758 <HAL_TIMEx_MasterConfigSynchronization>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001978:	f7ff fe85 	bl	8001686 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	2000a3f4 	.word	0x2000a3f4
 8001988:	40000c00 	.word	0x40000c00

0800198c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800199c:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <MX_TIM6_Init+0x68>)
 800199e:	4a16      	ldr	r2, [pc, #88]	@ (80019f8 <MX_TIM6_Init+0x6c>)
 80019a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 80019a2:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <MX_TIM6_Init+0x68>)
 80019a4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80019a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019aa:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <MX_TIM6_Init+0x68>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 80019b0:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <MX_TIM6_Init+0x68>)
 80019b2:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80019b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <MX_TIM6_Init+0x68>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019be:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <MX_TIM6_Init+0x68>)
 80019c0:	f005 fa72 	bl	8006ea8 <HAL_TIM_Base_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80019ca:	f7ff fe5c 	bl	8001686 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4806      	ldr	r0, [pc, #24]	@ (80019f4 <MX_TIM6_Init+0x68>)
 80019dc:	f005 febc 	bl	8007758 <HAL_TIMEx_MasterConfigSynchronization>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80019e6:	f7ff fe4e 	bl	8001686 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2000a440 	.word	0x2000a440
 80019f8:	40001000 	.word	0x40001000

080019fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a23      	ldr	r2, [pc, #140]	@ (8001a98 <HAL_TIM_Base_MspInit+0x9c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d114      	bne.n	8001a38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a0e:	4b23      	ldr	r3, [pc, #140]	@ (8001a9c <HAL_TIM_Base_MspInit+0xa0>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	4a22      	ldr	r2, [pc, #136]	@ (8001a9c <HAL_TIM_Base_MspInit+0xa0>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a1a:	4b20      	ldr	r3, [pc, #128]	@ (8001a9c <HAL_TIM_Base_MspInit+0xa0>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	201d      	movs	r0, #29
 8001a2c:	f001 fef3 	bl	8003816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a30:	201d      	movs	r0, #29
 8001a32:	f001 ff0c 	bl	800384e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001a36:	e02a      	b.n	8001a8e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a18      	ldr	r2, [pc, #96]	@ (8001aa0 <HAL_TIM_Base_MspInit+0xa4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10c      	bne.n	8001a5c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a42:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <HAL_TIM_Base_MspInit+0xa0>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a46:	4a15      	ldr	r2, [pc, #84]	@ (8001a9c <HAL_TIM_Base_MspInit+0xa0>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a4e:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <HAL_TIM_Base_MspInit+0xa0>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
}
 8001a5a:	e018      	b.n	8001a8e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a10      	ldr	r2, [pc, #64]	@ (8001aa4 <HAL_TIM_Base_MspInit+0xa8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d113      	bne.n	8001a8e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a66:	4b0d      	ldr	r3, [pc, #52]	@ (8001a9c <HAL_TIM_Base_MspInit+0xa0>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a9c <HAL_TIM_Base_MspInit+0xa0>)
 8001a6c:	f043 0310 	orr.w	r3, r3, #16
 8001a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a72:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_TIM_Base_MspInit+0xa0>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	2036      	movs	r0, #54	@ 0x36
 8001a84:	f001 fec7 	bl	8003816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a88:	2036      	movs	r0, #54	@ 0x36
 8001a8a:	f001 fee0 	bl	800384e <HAL_NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40000400 	.word	0x40000400
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40000c00 	.word	0x40000c00
 8001aa4:	40001000 	.word	0x40001000

08001aa8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001aac:	4b22      	ldr	r3, [pc, #136]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001aae:	4a23      	ldr	r2, [pc, #140]	@ (8001b3c <MX_LPUART1_UART_Init+0x94>)
 8001ab0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001ab4:	4a22      	ldr	r2, [pc, #136]	@ (8001b40 <MX_LPUART1_UART_Init+0x98>)
 8001ab6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001abe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad8:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ade:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001aea:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001af0:	4811      	ldr	r0, [pc, #68]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001af2:	f005 fed7 	bl	80078a4 <HAL_UART_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001afc:	f7ff fdc3 	bl	8001686 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b00:	2100      	movs	r1, #0
 8001b02:	480d      	ldr	r0, [pc, #52]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001b04:	f006 fc6c 	bl	80083e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b0e:	f7ff fdba 	bl	8001686 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b12:	2100      	movs	r1, #0
 8001b14:	4808      	ldr	r0, [pc, #32]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001b16:	f006 fca1 	bl	800845c <HAL_UARTEx_SetRxFifoThreshold>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b20:	f7ff fdb1 	bl	8001686 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b24:	4804      	ldr	r0, [pc, #16]	@ (8001b38 <MX_LPUART1_UART_Init+0x90>)
 8001b26:	f006 fc22 	bl	800836e <HAL_UARTEx_DisableFifoMode>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b30:	f7ff fda9 	bl	8001686 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	2000a48c 	.word	0x2000a48c
 8001b3c:	40008000 	.word	0x40008000
 8001b40:	00033324 	.word	0x00033324

08001b44 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b48:	4b22      	ldr	r3, [pc, #136]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001b4a:	4a23      	ldr	r2, [pc, #140]	@ (8001bd8 <MX_USART3_UART_Init+0x94>)
 8001b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b4e:	4b21      	ldr	r3, [pc, #132]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001b50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b56:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b62:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7a:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b80:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b86:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b8c:	4811      	ldr	r0, [pc, #68]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001b8e:	f005 fe89 	bl	80078a4 <HAL_UART_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001b98:	f7ff fd75 	bl	8001686 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	480d      	ldr	r0, [pc, #52]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001ba0:	f006 fc1e 	bl	80083e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001baa:	f7ff fd6c 	bl	8001686 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4808      	ldr	r0, [pc, #32]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001bb2:	f006 fc53 	bl	800845c <HAL_UARTEx_SetRxFifoThreshold>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001bbc:	f7ff fd63 	bl	8001686 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001bc0:	4804      	ldr	r0, [pc, #16]	@ (8001bd4 <MX_USART3_UART_Init+0x90>)
 8001bc2:	f006 fbd4 	bl	800836e <HAL_UARTEx_DisableFifoMode>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001bcc:	f7ff fd5b 	bl	8001686 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000a520 	.word	0x2000a520
 8001bd8:	40004800 	.word	0x40004800

08001bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b0b0      	sub	sp, #192	@ 0xc0
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf4:	f107 0318 	add.w	r3, r7, #24
 8001bf8:	2294      	movs	r2, #148	@ 0x94
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f00a fe2d 	bl	800c85c <memset>
  if(uartHandle->Instance==LPUART1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a43      	ldr	r2, [pc, #268]	@ (8001d14 <HAL_UART_MspInit+0x138>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d13e      	bne.n	8001c8a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c14:	f107 0318 	add.w	r3, r7, #24
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f004 fc2d 	bl	8006478 <HAL_RCCEx_PeriphCLKConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c24:	f7ff fd2f 	bl	8001686 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c28:	4b3b      	ldr	r3, [pc, #236]	@ (8001d18 <HAL_UART_MspInit+0x13c>)
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2c:	4a3a      	ldr	r2, [pc, #232]	@ (8001d18 <HAL_UART_MspInit+0x13c>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001c34:	4b38      	ldr	r3, [pc, #224]	@ (8001d18 <HAL_UART_MspInit+0x13c>)
 8001c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c40:	4b35      	ldr	r3, [pc, #212]	@ (8001d18 <HAL_UART_MspInit+0x13c>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c44:	4a34      	ldr	r2, [pc, #208]	@ (8001d18 <HAL_UART_MspInit+0x13c>)
 8001c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4c:	4b32      	ldr	r3, [pc, #200]	@ (8001d18 <HAL_UART_MspInit+0x13c>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001c58:	f003 fd26 	bl	80056a8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001c5c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001c60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001c76:	2308      	movs	r3, #8
 8001c78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c7c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c80:	4619      	mov	r1, r3
 8001c82:	4826      	ldr	r0, [pc, #152]	@ (8001d1c <HAL_UART_MspInit+0x140>)
 8001c84:	f002 f8b8 	bl	8003df8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c88:	e040      	b.n	8001d0c <HAL_UART_MspInit+0x130>
  else if(uartHandle->Instance==USART3)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a24      	ldr	r2, [pc, #144]	@ (8001d20 <HAL_UART_MspInit+0x144>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d13b      	bne.n	8001d0c <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c94:	2304      	movs	r3, #4
 8001c96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c9c:	f107 0318 	add.w	r3, r7, #24
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f004 fbe9 	bl	8006478 <HAL_RCCEx_PeriphCLKConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001cac:	f7ff fceb 	bl	8001686 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cb0:	4b19      	ldr	r3, [pc, #100]	@ (8001d18 <HAL_UART_MspInit+0x13c>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb4:	4a18      	ldr	r2, [pc, #96]	@ (8001d18 <HAL_UART_MspInit+0x13c>)
 8001cb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cbc:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <HAL_UART_MspInit+0x13c>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc8:	4b13      	ldr	r3, [pc, #76]	@ (8001d18 <HAL_UART_MspInit+0x13c>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ccc:	4a12      	ldr	r2, [pc, #72]	@ (8001d18 <HAL_UART_MspInit+0x13c>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cd4:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_UART_MspInit+0x13c>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ce0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d00:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d04:	4619      	mov	r1, r3
 8001d06:	4807      	ldr	r0, [pc, #28]	@ (8001d24 <HAL_UART_MspInit+0x148>)
 8001d08:	f002 f876 	bl	8003df8 <HAL_GPIO_Init>
}
 8001d0c:	bf00      	nop
 8001d0e:	37c0      	adds	r7, #192	@ 0xc0
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40008000 	.word	0x40008000
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	48001800 	.word	0x48001800
 8001d20:	40004800 	.word	0x40004800
 8001d24:	48000c00 	.word	0x48000c00

08001d28 <Reset_Handler>:
 8001d28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d60 <LoopForever+0x2>
 8001d2c:	f7ff fd80 	bl	8001830 <SystemInit>
 8001d30:	480c      	ldr	r0, [pc, #48]	@ (8001d64 <LoopForever+0x6>)
 8001d32:	490d      	ldr	r1, [pc, #52]	@ (8001d68 <LoopForever+0xa>)
 8001d34:	4a0d      	ldr	r2, [pc, #52]	@ (8001d6c <LoopForever+0xe>)
 8001d36:	2300      	movs	r3, #0
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:
 8001d3a:	58d4      	ldr	r4, [r2, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:
 8001d40:	18c4      	adds	r4, r0, r3
 8001d42:	428c      	cmp	r4, r1
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>
 8001d46:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <LoopForever+0x12>)
 8001d48:	4c0a      	ldr	r4, [pc, #40]	@ (8001d74 <LoopForever+0x16>)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:
 8001d52:	42a2      	cmp	r2, r4
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>
 8001d56:	f00a fd9f 	bl	800c898 <__libc_init_array>
 8001d5a:	f7ff fbbd 	bl	80014d8 <main>

08001d5e <LoopForever>:
 8001d5e:	e7fe      	b.n	8001d5e <LoopForever>
 8001d60:	200a0000 	.word	0x200a0000
 8001d64:	20000000 	.word	0x20000000
 8001d68:	2000015c 	.word	0x2000015c
 8001d6c:	0800ca74 	.word	0x0800ca74
 8001d70:	2000015c 	.word	0x2000015c
 8001d74:	2000c30c 	.word	0x2000c30c

08001d78 <CAN1_RX0_IRQHandler>:
 8001d78:	e7fe      	b.n	8001d78 <CAN1_RX0_IRQHandler>

08001d7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f001 fd3b 	bl	8003800 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f000 f80e 	bl	8001dac <HAL_InitTick>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	e001      	b.n	8001da0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d9c:	f7ff fc7a 	bl	8001694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001da0:	79fb      	ldrb	r3, [r7, #7]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001db8:	4b17      	ldr	r3, [pc, #92]	@ (8001e18 <HAL_InitTick+0x6c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d023      	beq.n	8001e08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dc0:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <HAL_InitTick+0x70>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <HAL_InitTick+0x6c>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 fd47 	bl	800386a <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10f      	bne.n	8001e02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b0f      	cmp	r3, #15
 8001de6:	d809      	bhi.n	8001dfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de8:	2200      	movs	r2, #0
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001df0:	f001 fd11 	bl	8003816 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001df4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e20 <HAL_InitTick+0x74>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e007      	b.n	8001e0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e004      	b.n	8001e0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e001      	b.n	8001e0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000004 	.word	0x20000004

08001e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_IncTick+0x20>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_IncTick+0x24>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <HAL_IncTick+0x24>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000008 	.word	0x20000008
 8001e48:	2000a5b4 	.word	0x2000a5b4

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b03      	ldr	r3, [pc, #12]	@ (8001e60 <HAL_GetTick+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	2000a5b4 	.word	0x2000a5b4

08001e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff ffee 	bl	8001e4c <HAL_GetTick>
 8001e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e7c:	d005      	beq.n	8001e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_Delay+0x44>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8a:	bf00      	nop
 8001e8c:	f7ff ffde 	bl	8001e4c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d8f7      	bhi.n	8001e8c <HAL_Delay+0x28>
  {
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000008 	.word	0x20000008

08001eac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	609a      	str	r2, [r3, #8]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3360      	adds	r3, #96	@ 0x60
 8001f26:	461a      	mov	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <LL_ADC_SetOffset+0x44>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f4c:	bf00      	nop
 8001f4e:	371c      	adds	r7, #28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	03fff000 	.word	0x03fff000

08001f5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3360      	adds	r3, #96	@ 0x60
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3360      	adds	r3, #96	@ 0x60
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fb2:	bf00      	nop
 8001fb4:	371c      	adds	r7, #28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	615a      	str	r2, [r3, #20]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800200a:	b480      	push	{r7}
 800200c:	b087      	sub	sp, #28
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3330      	adds	r3, #48	@ 0x30
 800201a:	461a      	mov	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	4413      	add	r3, r2
 8002028:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	211f      	movs	r1, #31
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	401a      	ands	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0e9b      	lsrs	r3, r3, #26
 8002042:	f003 011f 	and.w	r1, r3, #31
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	431a      	orrs	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002056:	bf00      	nop
 8002058:	371c      	adds	r7, #28
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3314      	adds	r3, #20
 8002098:	461a      	mov	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	0e5b      	lsrs	r3, r3, #25
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	4413      	add	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	0d1b      	lsrs	r3, r3, #20
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	2107      	movs	r1, #7
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	401a      	ands	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	0d1b      	lsrs	r3, r3, #20
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	431a      	orrs	r2, r3
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020d2:	bf00      	nop
 80020d4:	371c      	adds	r7, #28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f8:	43db      	mvns	r3, r3
 80020fa:	401a      	ands	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0318 	and.w	r3, r3, #24
 8002102:	4908      	ldr	r1, [pc, #32]	@ (8002124 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002104:	40d9      	lsrs	r1, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	400b      	ands	r3, r1
 800210a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210e:	431a      	orrs	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	0007ffff 	.word	0x0007ffff

08002128 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002138:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6093      	str	r3, [r2, #8]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800215c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002160:	d101      	bne.n	8002166 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002184:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002188:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021b0:	d101      	bne.n	80021b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021d8:	f043 0201 	orr.w	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002200:	f043 0202 	orr.w	r2, r3, #2
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <LL_ADC_IsEnabled+0x18>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <LL_ADC_IsEnabled+0x1a>
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b02      	cmp	r3, #2
 800224c:	d101      	bne.n	8002252 <LL_ADC_IsDisableOngoing+0x18>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <LL_ADC_IsDisableOngoing+0x1a>
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002270:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002274:	f043 0204 	orr.w	r2, r3, #4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d101      	bne.n	80022a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e129      	b.n	8002542 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7fe fca1 	bl	8000c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff19 	bl	800214c <LL_ADC_IsDeepPowerDownEnabled>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d004      	beq.n	800232a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff feff 	bl	8002128 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff34 	bl	800219c <LL_ADC_IsInternalRegulatorEnabled>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d115      	bne.n	8002366 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ff18 	bl	8002174 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002344:	4b81      	ldr	r3, [pc, #516]	@ (800254c <HAL_ADC_Init+0x278>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	099b      	lsrs	r3, r3, #6
 800234a:	4a81      	ldr	r2, [pc, #516]	@ (8002550 <HAL_ADC_Init+0x27c>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	3301      	adds	r3, #1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002358:	e002      	b.n	8002360 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3b01      	subs	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f9      	bne.n	800235a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff16 	bl	800219c <LL_ADC_IsInternalRegulatorEnabled>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	f043 0210 	orr.w	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff76 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 800239c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f040 80c2 	bne.w	8002530 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 80be 	bne.w	8002530 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023bc:	f043 0202 	orr.w	r2, r3, #2
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff23 	bl	8002214 <LL_ADC_IsEnabled>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023d4:	485f      	ldr	r0, [pc, #380]	@ (8002554 <HAL_ADC_Init+0x280>)
 80023d6:	f7ff ff1d 	bl	8002214 <LL_ADC_IsEnabled>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d105      	bne.n	80023ec <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4619      	mov	r1, r3
 80023e6:	485c      	ldr	r0, [pc, #368]	@ (8002558 <HAL_ADC_Init+0x284>)
 80023e8:	f7ff fd60 	bl	8001eac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7e5b      	ldrb	r3, [r3, #25]
 80023f0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023f6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023fc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002402:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800240a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d106      	bne.n	8002428 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	3b01      	subs	r3, #1
 8002420:	045b      	lsls	r3, r3, #17
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	d009      	beq.n	8002444 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002434:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	4b44      	ldr	r3, [pc, #272]	@ (800255c <HAL_ADC_Init+0x288>)
 800244c:	4013      	ands	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	430b      	orrs	r3, r1
 8002456:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff26 	bl	80022ae <LL_ADC_INJ_IsConversionOngoing>
 8002462:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d140      	bne.n	80024ec <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d13d      	bne.n	80024ec <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e1b      	ldrb	r3, [r3, #24]
 8002478:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800247a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002482:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002492:	f023 0306 	bic.w	r3, r3, #6
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	69b9      	ldr	r1, [r7, #24]
 800249c:	430b      	orrs	r3, r1
 800249e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d118      	bne.n	80024dc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80024b4:	f023 0304 	bic.w	r3, r3, #4
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80024c0:	4311      	orrs	r1, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024cc:	430a      	orrs	r2, r1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	611a      	str	r2, [r3, #16]
 80024da:	e007      	b.n	80024ec <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10c      	bne.n	800250e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f023 010f 	bic.w	r1, r3, #15
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	1e5a      	subs	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
 800250c:	e007      	b.n	800251e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 020f 	bic.w	r2, r2, #15
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	659a      	str	r2, [r3, #88]	@ 0x58
 800252e:	e007      	b.n	8002540 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	f043 0210 	orr.w	r2, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002540:	7ffb      	ldrb	r3, [r7, #31]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000000 	.word	0x20000000
 8002550:	053e2d63 	.word	0x053e2d63
 8002554:	50040000 	.word	0x50040000
 8002558:	50040300 	.word	0x50040300
 800255c:	fff0c007 	.word	0xfff0c007

08002560 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fe89 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d167      	bne.n	800264c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_ADC_Start_DMA+0x2a>
 8002586:	2302      	movs	r3, #2
 8002588:	e063      	b.n	8002652 <HAL_ADC_Start_DMA+0xf2>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fe2c 	bl	80031f0 <ADC_Enable>
 8002598:	4603      	mov	r3, r0
 800259a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d14f      	bne.n	8002642 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d006      	beq.n	80025d0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c6:	f023 0206 	bic.w	r2, r3, #6
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025ce:	e002      	b.n	80025d6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025da:	4a20      	ldr	r2, [pc, #128]	@ (800265c <HAL_ADC_Start_DMA+0xfc>)
 80025dc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002660 <HAL_ADC_Start_DMA+0x100>)
 80025e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002664 <HAL_ADC_Start_DMA+0x104>)
 80025ec:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	221c      	movs	r2, #28
 80025f4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0210 	orr.w	r2, r2, #16
 800260c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	3340      	adds	r3, #64	@ 0x40
 8002628:	4619      	mov	r1, r3
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f001 f9d1 	bl	80039d4 <HAL_DMA_Start_IT>
 8002632:	4603      	mov	r3, r0
 8002634:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fe10 	bl	8002260 <LL_ADC_REG_StartConversion>
 8002640:	e006      	b.n	8002650 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800264a:	e001      	b.n	8002650 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800264c:	2302      	movs	r3, #2
 800264e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002650:	7dfb      	ldrb	r3, [r7, #23]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	080033bb 	.word	0x080033bb
 8002660:	08003493 	.word	0x08003493
 8002664:	080034af 	.word	0x080034af

08002668 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d017      	beq.n	80026be <HAL_ADC_IRQHandler+0x56>
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d012      	beq.n	80026be <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 ffcb 	bl	800364c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2202      	movs	r2, #2
 80026bc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <HAL_ADC_IRQHandler+0x6a>
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d05e      	beq.n	800279a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d059      	beq.n	800279a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d105      	bne.n	80026fe <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fc6e 	bl	8001fe4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d03e      	beq.n	800278c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d135      	bne.n	800278c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b08      	cmp	r3, #8
 800272c:	d12e      	bne.n	800278c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fda8 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11a      	bne.n	8002774 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 020c 	bic.w	r2, r2, #12
 800274c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002752:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d112      	bne.n	800278c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276a:	f043 0201 	orr.w	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	659a      	str	r2, [r3, #88]	@ 0x58
 8002772:	e00b      	b.n	800278c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002778:	f043 0210 	orr.w	r2, r3, #16
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002784:	f043 0201 	orr.w	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7fe fd73 	bl	8001278 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	220c      	movs	r2, #12
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <HAL_ADC_IRQHandler+0x146>
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d072      	beq.n	800289e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d06d      	beq.n	800289e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d105      	bne.n	80027da <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fc3f 	bl	8002062 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80027e4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fbfa 	bl	8001fe4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027f0:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d047      	beq.n	8002890 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_ADC_IRQHandler+0x1b2>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d03f      	beq.n	8002890 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002816:	2b00      	cmp	r3, #0
 8002818:	d13a      	bne.n	8002890 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002824:	2b40      	cmp	r3, #64	@ 0x40
 8002826:	d133      	bne.n	8002890 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d12e      	bne.n	8002890 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fd39 	bl	80022ae <LL_ADC_INJ_IsConversionOngoing>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d11a      	bne.n	8002878 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002850:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002856:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d112      	bne.n	8002890 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	659a      	str	r2, [r3, #88]	@ 0x58
 8002876:	e00b      	b.n	8002890 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	f043 0210 	orr.w	r2, r3, #16
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002888:	f043 0201 	orr.w	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 feb3 	bl	80035fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2260      	movs	r2, #96	@ 0x60
 800289c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d011      	beq.n	80028cc <HAL_ADC_IRQHandler+0x264>
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00c      	beq.n	80028cc <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f886 	bl	80029d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2280      	movs	r2, #128	@ 0x80
 80028ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d012      	beq.n	80028fc <HAL_ADC_IRQHandler+0x294>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00d      	beq.n	80028fc <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fe99 	bl	8003624 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002902:	2b00      	cmp	r3, #0
 8002904:	d012      	beq.n	800292c <HAL_ADC_IRQHandler+0x2c4>
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00d      	beq.n	800292c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002914:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fe8b 	bl	8003638 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800292a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	d02a      	beq.n	800298c <HAL_ADC_IRQHandler+0x324>
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	d025      	beq.n	800298c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002948:	2301      	movs	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	e008      	b.n	8002960 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800295c:	2301      	movs	r3, #1
 800295e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d10e      	bne.n	8002984 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002976:	f043 0202 	orr.w	r2, r3, #2
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f830 	bl	80029e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2210      	movs	r2, #16
 800298a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002992:	2b00      	cmp	r3, #0
 8002994:	d018      	beq.n	80029c8 <HAL_ADC_IRQHandler+0x360>
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b0:	f043 0208 	orr.w	r2, r3, #8
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029c0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fe24 	bl	8003610 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80029c8:	bf00      	nop
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b0b6      	sub	sp, #216	@ 0xd8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x22>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e3d5      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x7ce>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fc2e 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 83ba 	bne.w	80031a8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d824      	bhi.n	8002a8e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	3b02      	subs	r3, #2
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d81b      	bhi.n	8002a86 <HAL_ADC_ConfigChannel+0x8e>
 8002a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a54 <HAL_ADC_ConfigChannel+0x5c>)
 8002a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a54:	08002a65 	.word	0x08002a65
 8002a58:	08002a6d 	.word	0x08002a6d
 8002a5c:	08002a75 	.word	0x08002a75
 8002a60:	08002a7d 	.word	0x08002a7d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002a64:	230c      	movs	r3, #12
 8002a66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a6a:	e010      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002a6c:	2312      	movs	r3, #18
 8002a6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a72:	e00c      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002a74:	2318      	movs	r3, #24
 8002a76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a7a:	e008      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002a7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a84:	e003      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002a86:	2306      	movs	r3, #6
 8002a88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a8c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002a9c:	f7ff fab5 	bl	800200a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fbef 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 8002aaa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fbfb 	bl	80022ae <LL_ADC_INJ_IsConversionOngoing>
 8002ab8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f040 81bf 	bne.w	8002e44 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 81ba 	bne.w	8002e44 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ad8:	d10f      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7ff facf 	bl	8002088 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fa63 	bl	8001fbe <LL_ADC_SetSamplingTimeCommonConfig>
 8002af8:	e00e      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6819      	ldr	r1, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f7ff fabe 	bl	8002088 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fa53 	bl	8001fbe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	08db      	lsrs	r3, r3, #3
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d00a      	beq.n	8002b50 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6919      	ldr	r1, [r3, #16]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b4a:	f7ff f9e3 	bl	8001f14 <LL_ADC_SetOffset>
 8002b4e:	e179      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fa00 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10a      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x184>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff f9f5 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	0e9b      	lsrs	r3, r3, #26
 8002b76:	f003 021f 	and.w	r2, r3, #31
 8002b7a:	e01e      	b.n	8002bba <HAL_ADC_ConfigChannel+0x1c2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f9ea 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ba2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002baa:	2320      	movs	r3, #32
 8002bac:	e004      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002bae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d105      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x1da>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	0e9b      	lsrs	r3, r3, #26
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	e018      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x20c>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002be6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002bee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	e004      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002bfa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d106      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff f9b9 	bl	8001f88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff f99d 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x24a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2101      	movs	r1, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff f992 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	0e9b      	lsrs	r3, r3, #26
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	e01e      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x288>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2101      	movs	r1, #1
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff f987 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002c68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002c70:	2320      	movs	r3, #32
 8002c72:	e004      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002c74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x2a0>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0e9b      	lsrs	r3, r3, #26
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	e018      	b.n	8002cca <HAL_ADC_ConfigChannel+0x2d2>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002cac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e004      	b.n	8002cca <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d106      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff f956 	bl	8001f88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff f93a 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x310>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2102      	movs	r1, #2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f92f 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	f003 021f 	and.w	r2, r3, #31
 8002d06:	e01e      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x34e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff f924 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002d26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002d36:	2320      	movs	r3, #32
 8002d38:	e004      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d105      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x366>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	0e9b      	lsrs	r3, r3, #26
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	e014      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x390>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002d6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002d72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002d7a:	2320      	movs	r3, #32
 8002d7c:	e004      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d106      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2102      	movs	r1, #2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff f8f7 	bl	8001f88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2103      	movs	r1, #3
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff f8db 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10a      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x3ce>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2103      	movs	r1, #3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff f8d0 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	0e9b      	lsrs	r3, r3, #26
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	e017      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x3fe>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2103      	movs	r1, #3
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff f8c5 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002dde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002de0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002de2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002de8:	2320      	movs	r3, #32
 8002dea:	e003      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002dec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d105      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x416>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	0e9b      	lsrs	r3, r3, #26
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	e011      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x43a>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002e1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e1e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002e20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002e26:	2320      	movs	r3, #32
 8002e28:	e003      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002e2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d106      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2103      	movs	r1, #3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff f8a2 	bl	8001f88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff f9e3 	bl	8002214 <LL_ADC_IsEnabled>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f040 813f 	bne.w	80030d4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	461a      	mov	r2, r3
 8002e64:	f7ff f93c 	bl	80020e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4a8e      	ldr	r2, [pc, #568]	@ (80030a8 <HAL_ADC_ConfigChannel+0x6b0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	f040 8130 	bne.w	80030d4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x4a4>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0e9b      	lsrs	r3, r3, #26
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2b09      	cmp	r3, #9
 8002e92:	bf94      	ite	ls
 8002e94:	2301      	movls	r3, #1
 8002e96:	2300      	movhi	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e019      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x4d8>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002eae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	e003      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002eb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2b09      	cmp	r3, #9
 8002ec8:	bf94      	ite	ls
 8002eca:	2301      	movls	r3, #1
 8002ecc:	2300      	movhi	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d079      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d107      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x4f8>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0e9b      	lsrs	r3, r3, #26
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	069b      	lsls	r3, r3, #26
 8002eea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002eee:	e015      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x524>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f00:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002f02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002f08:	2320      	movs	r3, #32
 8002f0a:	e003      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002f0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	3301      	adds	r3, #1
 8002f16:	069b      	lsls	r3, r3, #26
 8002f18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x544>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	0e9b      	lsrs	r3, r3, #26
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	2101      	movs	r1, #1
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	e017      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x574>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f4c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002f4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002f54:	2320      	movs	r3, #32
 8002f56:	e003      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	3301      	adds	r3, #1
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	ea42 0103 	orr.w	r1, r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x59a>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	0e9b      	lsrs	r3, r3, #26
 8002f82:	3301      	adds	r3, #1
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	051b      	lsls	r3, r3, #20
 8002f90:	e018      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x5cc>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002faa:	2320      	movs	r3, #32
 8002fac:	e003      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	f003 021f 	and.w	r2, r3, #31
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	e080      	b.n	80030ca <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x5ec>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0e9b      	lsrs	r3, r3, #26
 8002fda:	3301      	adds	r3, #1
 8002fdc:	069b      	lsls	r3, r3, #26
 8002fde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fe2:	e015      	b.n	8003010 <HAL_ADC_ConfigChannel+0x618>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	e003      	b.n	8003008 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	3301      	adds	r3, #1
 800300a:	069b      	lsls	r3, r3, #26
 800300c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003018:	2b00      	cmp	r3, #0
 800301a:	d109      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x638>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	0e9b      	lsrs	r3, r3, #26
 8003022:	3301      	adds	r3, #1
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	2101      	movs	r1, #1
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	e017      	b.n	8003060 <HAL_ADC_ConfigChannel+0x668>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	61bb      	str	r3, [r7, #24]
  return result;
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003048:	2320      	movs	r3, #32
 800304a:	e003      	b.n	8003054 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	3301      	adds	r3, #1
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	2101      	movs	r1, #1
 800305c:	fa01 f303 	lsl.w	r3, r1, r3
 8003060:	ea42 0103 	orr.w	r1, r2, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10d      	bne.n	800308c <HAL_ADC_ConfigChannel+0x694>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	3301      	adds	r3, #1
 8003078:	f003 021f 	and.w	r2, r3, #31
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	3b1e      	subs	r3, #30
 8003084:	051b      	lsls	r3, r3, #20
 8003086:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800308a:	e01d      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x6d0>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	60fb      	str	r3, [r7, #12]
  return result;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d103      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80030a4:	2320      	movs	r3, #32
 80030a6:	e005      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x6bc>
 80030a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	3301      	adds	r3, #1
 80030b6:	f003 021f 	and.w	r2, r3, #31
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	3b1e      	subs	r3, #30
 80030c2:	051b      	lsls	r3, r3, #20
 80030c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ce:	4619      	mov	r1, r3
 80030d0:	f7fe ffda 	bl	8002088 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b3d      	ldr	r3, [pc, #244]	@ (80031d0 <HAL_ADC_ConfigChannel+0x7d8>)
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d06c      	beq.n	80031ba <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030e0:	483c      	ldr	r0, [pc, #240]	@ (80031d4 <HAL_ADC_ConfigChannel+0x7dc>)
 80030e2:	f7fe ff09 	bl	8001ef8 <LL_ADC_GetCommonPathInternalCh>
 80030e6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a3a      	ldr	r2, [pc, #232]	@ (80031d8 <HAL_ADC_ConfigChannel+0x7e0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d127      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d121      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a35      	ldr	r2, [pc, #212]	@ (80031dc <HAL_ADC_ConfigChannel+0x7e4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d157      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800310a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800310e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003112:	4619      	mov	r1, r3
 8003114:	482f      	ldr	r0, [pc, #188]	@ (80031d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003116:	f7fe fedc 	bl	8001ed2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800311a:	4b31      	ldr	r3, [pc, #196]	@ (80031e0 <HAL_ADC_ConfigChannel+0x7e8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	099b      	lsrs	r3, r3, #6
 8003120:	4a30      	ldr	r2, [pc, #192]	@ (80031e4 <HAL_ADC_ConfigChannel+0x7ec>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	099b      	lsrs	r3, r3, #6
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	4613      	mov	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003134:	e002      	b.n	800313c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3b01      	subs	r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f9      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003142:	e03a      	b.n	80031ba <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a27      	ldr	r2, [pc, #156]	@ (80031e8 <HAL_ADC_ConfigChannel+0x7f0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d113      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800314e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003152:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10d      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1f      	ldr	r2, [pc, #124]	@ (80031dc <HAL_ADC_ConfigChannel+0x7e4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d12a      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003168:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800316c:	4619      	mov	r1, r3
 800316e:	4819      	ldr	r0, [pc, #100]	@ (80031d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003170:	f7fe feaf 	bl	8001ed2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003174:	e021      	b.n	80031ba <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1c      	ldr	r2, [pc, #112]	@ (80031ec <HAL_ADC_ConfigChannel+0x7f4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d11c      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003184:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d116      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a12      	ldr	r2, [pc, #72]	@ (80031dc <HAL_ADC_ConfigChannel+0x7e4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d111      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003196:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800319a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800319e:	4619      	mov	r1, r3
 80031a0:	480c      	ldr	r0, [pc, #48]	@ (80031d4 <HAL_ADC_ConfigChannel+0x7dc>)
 80031a2:	f7fe fe96 	bl	8001ed2 <LL_ADC_SetCommonPathInternalCh>
 80031a6:	e008      	b.n	80031ba <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80031c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	37d8      	adds	r7, #216	@ 0xd8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	80080000 	.word	0x80080000
 80031d4:	50040300 	.word	0x50040300
 80031d8:	c7520000 	.word	0xc7520000
 80031dc:	50040000 	.word	0x50040000
 80031e0:	20000000 	.word	0x20000000
 80031e4:	053e2d63 	.word	0x053e2d63
 80031e8:	cb840000 	.word	0xcb840000
 80031ec:	80000001 	.word	0x80000001

080031f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff f807 	bl	8002214 <LL_ADC_IsEnabled>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d169      	bne.n	80032e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	4b36      	ldr	r3, [pc, #216]	@ (80032ec <ADC_Enable+0xfc>)
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00d      	beq.n	8003236 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321e:	f043 0210 	orr.w	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322a:	f043 0201 	orr.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e055      	b.n	80032e2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe ffc2 	bl	80021c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003240:	482b      	ldr	r0, [pc, #172]	@ (80032f0 <ADC_Enable+0x100>)
 8003242:	f7fe fe59 	bl	8001ef8 <LL_ADC_GetCommonPathInternalCh>
 8003246:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003248:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003250:	4b28      	ldr	r3, [pc, #160]	@ (80032f4 <ADC_Enable+0x104>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	099b      	lsrs	r3, r3, #6
 8003256:	4a28      	ldr	r2, [pc, #160]	@ (80032f8 <ADC_Enable+0x108>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800326a:	e002      	b.n	8003272 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	3b01      	subs	r3, #1
 8003270:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f9      	bne.n	800326c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003278:	f7fe fde8 	bl	8001e4c <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800327e:	e028      	b.n	80032d2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe ffc5 	bl	8002214 <LL_ADC_IsEnabled>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7fe ff95 	bl	80021c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800329a:	f7fe fdd7 	bl	8001e4c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d914      	bls.n	80032d2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d00d      	beq.n	80032d2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ba:	f043 0210 	orr.w	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	f043 0201 	orr.w	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e007      	b.n	80032e2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d1cf      	bne.n	8003280 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	8000003f 	.word	0x8000003f
 80032f0:	50040300 	.word	0x50040300
 80032f4:	20000000 	.word	0x20000000
 80032f8:	053e2d63 	.word	0x053e2d63

080032fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe ff96 	bl	800223a <LL_ADC_IsDisableOngoing>
 800330e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe ff7d 	bl	8002214 <LL_ADC_IsEnabled>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d047      	beq.n	80033b0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d144      	bne.n	80033b0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 030d 	and.w	r3, r3, #13
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10c      	bne.n	800334e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe ff57 	bl	80021ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2203      	movs	r2, #3
 8003344:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003346:	f7fe fd81 	bl	8001e4c <HAL_GetTick>
 800334a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800334c:	e029      	b.n	80033a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	f043 0210 	orr.w	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e023      	b.n	80033b2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800336a:	f7fe fd6f 	bl	8001e4c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d914      	bls.n	80033a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338a:	f043 0210 	orr.w	r2, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003396:	f043 0201 	orr.w	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e007      	b.n	80033b2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1dc      	bne.n	800336a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d14b      	bne.n	800346c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d021      	beq.n	8003432 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fdf6 	bl	8001fe4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d032      	beq.n	8003464 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d12b      	bne.n	8003464 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003410:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d11f      	bne.n	8003464 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003428:	f043 0201 	orr.w	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003430:	e018      	b.n	8003464 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d111      	bne.n	8003464 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003444:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003450:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d105      	bne.n	8003464 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345c:	f043 0201 	orr.w	r2, r3, #1
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7fd ff07 	bl	8001278 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800346a:	e00e      	b.n	800348a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f7ff fab3 	bl	80029e4 <HAL_ADC_ErrorCallback>
}
 800347e:	e004      	b.n	800348a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
}
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7fd ff83 	bl	80013ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034cc:	f043 0204 	orr.w	r2, r3, #4
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff fa85 	bl	80029e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <LL_ADC_StartCalibration>:
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80034f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80034fe:	4313      	orrs	r3, r2
 8003500:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	609a      	str	r2, [r3, #8]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_ADC_IsCalibrationOnGoing>:
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003524:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003528:	d101      	bne.n	800352e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_ADCEx_Calibration_Start+0x1c>
 8003554:	2302      	movs	r3, #2
 8003556:	e04d      	b.n	80035f4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff fecb 	bl	80032fc <ADC_Disable>
 8003566:	4603      	mov	r3, r0
 8003568:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d136      	bne.n	80035de <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003574:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003578:	f023 0302 	bic.w	r3, r3, #2
 800357c:	f043 0202 	orr.w	r2, r3, #2
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6839      	ldr	r1, [r7, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff ffa9 	bl	80034e2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003590:	e014      	b.n	80035bc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3301      	adds	r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800359e:	d30d      	bcc.n	80035bc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a4:	f023 0312 	bic.w	r3, r3, #18
 80035a8:	f043 0210 	orr.w	r2, r3, #16
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e01b      	b.n	80035f4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ffa7 	bl	8003514 <LL_ADC_IsCalibrationOnGoing>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e2      	bne.n	8003592 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	f023 0303 	bic.w	r3, r3, #3
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	659a      	str	r2, [r3, #88]	@ 0x58
 80035dc:	e005      	b.n	80035ea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e2:	f043 0210 	orr.w	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003670:	4b0c      	ldr	r3, [pc, #48]	@ (80036a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800367c:	4013      	ands	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003688:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800368c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003692:	4a04      	ldr	r2, [pc, #16]	@ (80036a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	60d3      	str	r3, [r2, #12]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036ac:	4b04      	ldr	r3, [pc, #16]	@ (80036c0 <__NVIC_GetPriorityGrouping+0x18>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	0a1b      	lsrs	r3, r3, #8
 80036b2:	f003 0307 	and.w	r3, r3, #7
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	db0b      	blt.n	80036ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	f003 021f 	and.w	r2, r3, #31
 80036dc:	4907      	ldr	r1, [pc, #28]	@ (80036fc <__NVIC_EnableIRQ+0x38>)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	2001      	movs	r0, #1
 80036e6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	e000e100 	.word	0xe000e100

08003700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	6039      	str	r1, [r7, #0]
 800370a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800370c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003710:	2b00      	cmp	r3, #0
 8003712:	db0a      	blt.n	800372a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	490c      	ldr	r1, [pc, #48]	@ (800374c <__NVIC_SetPriority+0x4c>)
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	0112      	lsls	r2, r2, #4
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	440b      	add	r3, r1
 8003724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003728:	e00a      	b.n	8003740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	4908      	ldr	r1, [pc, #32]	@ (8003750 <__NVIC_SetPriority+0x50>)
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	3b04      	subs	r3, #4
 8003738:	0112      	lsls	r2, r2, #4
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	440b      	add	r3, r1
 800373e:	761a      	strb	r2, [r3, #24]
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000e100 	.word	0xe000e100
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003754:	b480      	push	{r7}
 8003756:	b089      	sub	sp, #36	@ 0x24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f1c3 0307 	rsb	r3, r3, #7
 800376e:	2b04      	cmp	r3, #4
 8003770:	bf28      	it	cs
 8003772:	2304      	movcs	r3, #4
 8003774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3304      	adds	r3, #4
 800377a:	2b06      	cmp	r3, #6
 800377c:	d902      	bls.n	8003784 <NVIC_EncodePriority+0x30>
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3b03      	subs	r3, #3
 8003782:	e000      	b.n	8003786 <NVIC_EncodePriority+0x32>
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003788:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43da      	mvns	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	401a      	ands	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800379c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	43d9      	mvns	r1, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ac:	4313      	orrs	r3, r2
         );
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3724      	adds	r7, #36	@ 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037cc:	d301      	bcc.n	80037d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ce:	2301      	movs	r3, #1
 80037d0:	e00f      	b.n	80037f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037d2:	4a0a      	ldr	r2, [pc, #40]	@ (80037fc <SysTick_Config+0x40>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037da:	210f      	movs	r1, #15
 80037dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037e0:	f7ff ff8e 	bl	8003700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e4:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <SysTick_Config+0x40>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ea:	4b04      	ldr	r3, [pc, #16]	@ (80037fc <SysTick_Config+0x40>)
 80037ec:	2207      	movs	r2, #7
 80037ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	e000e010 	.word	0xe000e010

08003800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff29 	bl	8003660 <__NVIC_SetPriorityGrouping>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b086      	sub	sp, #24
 800381a:	af00      	add	r7, sp, #0
 800381c:	4603      	mov	r3, r0
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003828:	f7ff ff3e 	bl	80036a8 <__NVIC_GetPriorityGrouping>
 800382c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	6978      	ldr	r0, [r7, #20]
 8003834:	f7ff ff8e 	bl	8003754 <NVIC_EncodePriority>
 8003838:	4602      	mov	r2, r0
 800383a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff5d 	bl	8003700 <__NVIC_SetPriority>
}
 8003846:	bf00      	nop
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	4603      	mov	r3, r0
 8003856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff31 	bl	80036c4 <__NVIC_EnableIRQ>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ffa2 	bl	80037bc <SysTick_Config>
 8003878:	4603      	mov	r3, r0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e08d      	b.n	80039b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	4b47      	ldr	r3, [pc, #284]	@ (80039bc <HAL_DMA_Init+0x138>)
 800389e:	429a      	cmp	r2, r3
 80038a0:	d80f      	bhi.n	80038c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	4b45      	ldr	r3, [pc, #276]	@ (80039c0 <HAL_DMA_Init+0x13c>)
 80038aa:	4413      	add	r3, r2
 80038ac:	4a45      	ldr	r2, [pc, #276]	@ (80039c4 <HAL_DMA_Init+0x140>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	009a      	lsls	r2, r3, #2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a42      	ldr	r2, [pc, #264]	@ (80039c8 <HAL_DMA_Init+0x144>)
 80038be:	641a      	str	r2, [r3, #64]	@ 0x40
 80038c0:	e00e      	b.n	80038e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	4b40      	ldr	r3, [pc, #256]	@ (80039cc <HAL_DMA_Init+0x148>)
 80038ca:	4413      	add	r3, r2
 80038cc:	4a3d      	ldr	r2, [pc, #244]	@ (80039c4 <HAL_DMA_Init+0x140>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	009a      	lsls	r2, r3, #2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a3c      	ldr	r2, [pc, #240]	@ (80039d0 <HAL_DMA_Init+0x14c>)
 80038de:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80038f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800391c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f9fe 	bl	8003d34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003940:	d102      	bne.n	8003948 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800395c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d010      	beq.n	8003988 <HAL_DMA_Init+0x104>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b04      	cmp	r3, #4
 800396c:	d80c      	bhi.n	8003988 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fa1e 	bl	8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	e008      	b.n	800399a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40020407 	.word	0x40020407
 80039c0:	bffdfff8 	.word	0xbffdfff8
 80039c4:	cccccccd 	.word	0xcccccccd
 80039c8:	40020000 	.word	0x40020000
 80039cc:	bffdfbf8 	.word	0xbffdfbf8
 80039d0:	40020400 	.word	0x40020400

080039d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_DMA_Start_IT+0x20>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e066      	b.n	8003ac2 <HAL_DMA_Start_IT+0xee>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d155      	bne.n	8003ab4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f943 	bl	8003cb8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d008      	beq.n	8003a4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 020e 	orr.w	r2, r2, #14
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	e00f      	b.n	8003a6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0204 	bic.w	r2, r2, #4
 8003a5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 020a 	orr.w	r2, r2, #10
 8003a6a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d007      	beq.n	8003a8a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a88:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aa0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e005      	b.n	8003ac0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
 8003abe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae6:	f003 031c 	and.w	r3, r3, #28
 8003aea:	2204      	movs	r2, #4
 8003aec:	409a      	lsls	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d026      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x7a>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d021      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d107      	bne.n	8003b1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0204 	bic.w	r2, r2, #4
 8003b1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b22:	f003 021c 	and.w	r2, r3, #28
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	2104      	movs	r1, #4
 8003b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d071      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b42:	e06c      	b.n	8003c1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b48:	f003 031c 	and.w	r3, r3, #28
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02e      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xec>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d029      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10b      	bne.n	8003b88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 020a 	bic.w	r2, r2, #10
 8003b7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8c:	f003 021c 	and.w	r2, r3, #28
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b94:	2102      	movs	r1, #2
 8003b96:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d038      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003bb4:	e033      	b.n	8003c1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bba:	f003 031c 	and.w	r3, r3, #28
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d02a      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x156>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d025      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 020e 	bic.w	r2, r2, #14
 8003be2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be8:	f003 021c 	and.w	r2, r3, #28
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d004      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c1e:	bf00      	nop
 8003c20:	bf00      	nop
}
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	460b      	mov	r3, r1
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_DMA_RegisterCallback+0x20>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e031      	b.n	8003cac <HAL_DMA_RegisterCallback+0x84>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d120      	bne.n	8003c9e <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003c5c:	7afb      	ldrb	r3, [r7, #11]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d81a      	bhi.n	8003c98 <HAL_DMA_RegisterCallback+0x70>
 8003c62:	a201      	add	r2, pc, #4	@ (adr r2, 8003c68 <HAL_DMA_RegisterCallback+0x40>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003c79 	.word	0x08003c79
 8003c6c:	08003c81 	.word	0x08003c81
 8003c70:	08003c89 	.word	0x08003c89
 8003c74:	08003c91 	.word	0x08003c91
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003c7e:	e010      	b.n	8003ca2 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8003c86:	e00c      	b.n	8003ca2 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003c8e:	e008      	b.n	8003ca2 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003c96:	e004      	b.n	8003ca2 <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	75fb      	strb	r3, [r7, #23]
        break;
 8003c9c:	e001      	b.n	8003ca2 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003cce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d004      	beq.n	8003ce2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ce0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce6:	f003 021c 	and.w	r2, r3, #28
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	2101      	movs	r1, #1
 8003cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d108      	bne.n	8003d18 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d16:	e007      	b.n	8003d28 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	60da      	str	r2, [r3, #12]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b17      	ldr	r3, [pc, #92]	@ (8003da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d80a      	bhi.n	8003d5e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d54:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6493      	str	r3, [r2, #72]	@ 0x48
 8003d5c:	e007      	b.n	8003d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d62:	089b      	lsrs	r3, r3, #2
 8003d64:	009a      	lsls	r2, r3, #2
 8003d66:	4b0f      	ldr	r3, [pc, #60]	@ (8003da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d68:	4413      	add	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	3b08      	subs	r3, #8
 8003d76:	4a0c      	ldr	r2, [pc, #48]	@ (8003da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a0a      	ldr	r2, [pc, #40]	@ (8003dac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d84:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	409a      	lsls	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d94:	bf00      	nop
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	40020407 	.word	0x40020407
 8003da4:	4002081c 	.word	0x4002081c
 8003da8:	cccccccd 	.word	0xcccccccd
 8003dac:	40020880 	.word	0x40020880

08003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	461a      	mov	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a08      	ldr	r2, [pc, #32]	@ (8003df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003dd2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2201      	movs	r2, #1
 8003dde:	409a      	lsls	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	1000823f 	.word	0x1000823f
 8003df4:	40020940 	.word	0x40020940

08003df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e06:	e166      	b.n	80040d6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	fa01 f303 	lsl.w	r3, r1, r3
 8003e14:	4013      	ands	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8158 	beq.w	80040d0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d005      	beq.n	8003e38 <HAL_GPIO_Init+0x40>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d130      	bne.n	8003e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	2203      	movs	r2, #3
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e6e:	2201      	movs	r2, #1
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	f003 0201 	and.w	r2, r3, #1
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d017      	beq.n	8003ed6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d123      	bne.n	8003f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	08da      	lsrs	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3208      	adds	r2, #8
 8003eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	220f      	movs	r2, #15
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4013      	ands	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	08da      	lsrs	r2, r3, #3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3208      	adds	r2, #8
 8003f24:	6939      	ldr	r1, [r7, #16]
 8003f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	2203      	movs	r2, #3
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f003 0203 	and.w	r2, r3, #3
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 80b2 	beq.w	80040d0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f6c:	4b61      	ldr	r3, [pc, #388]	@ (80040f4 <HAL_GPIO_Init+0x2fc>)
 8003f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f70:	4a60      	ldr	r2, [pc, #384]	@ (80040f4 <HAL_GPIO_Init+0x2fc>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f78:	4b5e      	ldr	r3, [pc, #376]	@ (80040f4 <HAL_GPIO_Init+0x2fc>)
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f84:	4a5c      	ldr	r2, [pc, #368]	@ (80040f8 <HAL_GPIO_Init+0x300>)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	089b      	lsrs	r3, r3, #2
 8003f8a:	3302      	adds	r3, #2
 8003f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	220f      	movs	r2, #15
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003fae:	d02b      	beq.n	8004008 <HAL_GPIO_Init+0x210>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a52      	ldr	r2, [pc, #328]	@ (80040fc <HAL_GPIO_Init+0x304>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d025      	beq.n	8004004 <HAL_GPIO_Init+0x20c>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a51      	ldr	r2, [pc, #324]	@ (8004100 <HAL_GPIO_Init+0x308>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d01f      	beq.n	8004000 <HAL_GPIO_Init+0x208>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a50      	ldr	r2, [pc, #320]	@ (8004104 <HAL_GPIO_Init+0x30c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d019      	beq.n	8003ffc <HAL_GPIO_Init+0x204>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a4f      	ldr	r2, [pc, #316]	@ (8004108 <HAL_GPIO_Init+0x310>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <HAL_GPIO_Init+0x200>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a4e      	ldr	r2, [pc, #312]	@ (800410c <HAL_GPIO_Init+0x314>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_GPIO_Init+0x1fc>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a4d      	ldr	r2, [pc, #308]	@ (8004110 <HAL_GPIO_Init+0x318>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <HAL_GPIO_Init+0x1f8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a4c      	ldr	r2, [pc, #304]	@ (8004114 <HAL_GPIO_Init+0x31c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d101      	bne.n	8003fec <HAL_GPIO_Init+0x1f4>
 8003fe8:	2307      	movs	r3, #7
 8003fea:	e00e      	b.n	800400a <HAL_GPIO_Init+0x212>
 8003fec:	2308      	movs	r3, #8
 8003fee:	e00c      	b.n	800400a <HAL_GPIO_Init+0x212>
 8003ff0:	2306      	movs	r3, #6
 8003ff2:	e00a      	b.n	800400a <HAL_GPIO_Init+0x212>
 8003ff4:	2305      	movs	r3, #5
 8003ff6:	e008      	b.n	800400a <HAL_GPIO_Init+0x212>
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	e006      	b.n	800400a <HAL_GPIO_Init+0x212>
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e004      	b.n	800400a <HAL_GPIO_Init+0x212>
 8004000:	2302      	movs	r3, #2
 8004002:	e002      	b.n	800400a <HAL_GPIO_Init+0x212>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <HAL_GPIO_Init+0x212>
 8004008:	2300      	movs	r3, #0
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	f002 0203 	and.w	r2, r2, #3
 8004010:	0092      	lsls	r2, r2, #2
 8004012:	4093      	lsls	r3, r2
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800401a:	4937      	ldr	r1, [pc, #220]	@ (80040f8 <HAL_GPIO_Init+0x300>)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	3302      	adds	r3, #2
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004028:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <HAL_GPIO_Init+0x320>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	43db      	mvns	r3, r3
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800404c:	4a32      	ldr	r2, [pc, #200]	@ (8004118 <HAL_GPIO_Init+0x320>)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004052:	4b31      	ldr	r3, [pc, #196]	@ (8004118 <HAL_GPIO_Init+0x320>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	43db      	mvns	r3, r3
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4013      	ands	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004076:	4a28      	ldr	r2, [pc, #160]	@ (8004118 <HAL_GPIO_Init+0x320>)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800407c:	4b26      	ldr	r3, [pc, #152]	@ (8004118 <HAL_GPIO_Init+0x320>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	43db      	mvns	r3, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4013      	ands	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004118 <HAL_GPIO_Init+0x320>)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004118 <HAL_GPIO_Init+0x320>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040ca:	4a13      	ldr	r2, [pc, #76]	@ (8004118 <HAL_GPIO_Init+0x320>)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	3301      	adds	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f47f ae91 	bne.w	8003e08 <HAL_GPIO_Init+0x10>
  }
}
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40010000 	.word	0x40010000
 80040fc:	48000400 	.word	0x48000400
 8004100:	48000800 	.word	0x48000800
 8004104:	48000c00 	.word	0x48000c00
 8004108:	48001000 	.word	0x48001000
 800410c:	48001400 	.word	0x48001400
 8004110:	48001800 	.word	0x48001800
 8004114:	48001c00 	.word	0x48001c00
 8004118:	40010400 	.word	0x40010400

0800411c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	807b      	strh	r3, [r7, #2]
 8004128:	4613      	mov	r3, r2
 800412a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800412c:	787b      	ldrb	r3, [r7, #1]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004132:	887a      	ldrh	r2, [r7, #2]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004138:	e002      	b.n	8004140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800413a:	887a      	ldrh	r2, [r7, #2]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4013      	ands	r3, r2
 8004164:	041a      	lsls	r2, r3, #16
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	43d9      	mvns	r1, r3
 800416a:	887b      	ldrh	r3, [r7, #2]
 800416c:	400b      	ands	r3, r1
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	619a      	str	r2, [r3, #24]
}
 8004174:	bf00      	nop
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800418a:	4b08      	ldr	r3, [pc, #32]	@ (80041ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	4013      	ands	r3, r2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d006      	beq.n	80041a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004196:	4a05      	ldr	r2, [pc, #20]	@ (80041ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fc ff0a 	bl	8000fb8 <HAL_GPIO_EXTI_Callback>
  }
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40010400 	.word	0x40010400

080041b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b2:	b08f      	sub	sp, #60	@ 0x3c
 80041b4:	af0a      	add	r7, sp, #40	@ 0x28
 80041b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e116      	b.n	80043f0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d106      	bne.n	80041e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f007 fe39 	bl	800be54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2203      	movs	r2, #3
 80041e6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f004 fa90 	bl	8008726 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	687e      	ldr	r6, [r7, #4]
 800420e:	466d      	mov	r5, sp
 8004210:	f106 0410 	add.w	r4, r6, #16
 8004214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800421a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800421c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004220:	e885 0003 	stmia.w	r5, {r0, r1}
 8004224:	1d33      	adds	r3, r6, #4
 8004226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004228:	6838      	ldr	r0, [r7, #0]
 800422a:	f004 f9a3 	bl	8008574 <USB_CoreInit>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0d7      	b.n	80043f0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2100      	movs	r1, #0
 8004246:	4618      	mov	r0, r3
 8004248:	f004 fa7e 	bl	8008748 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800424c:	2300      	movs	r3, #0
 800424e:	73fb      	strb	r3, [r7, #15]
 8004250:	e04a      	b.n	80042e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	333d      	adds	r3, #61	@ 0x3d
 8004262:	2201      	movs	r2, #1
 8004264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004266:	7bfa      	ldrb	r2, [r7, #15]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	333c      	adds	r3, #60	@ 0x3c
 8004276:	7bfa      	ldrb	r2, [r7, #15]
 8004278:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800427a:	7bfa      	ldrb	r2, [r7, #15]
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	b298      	uxth	r0, r3
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	3356      	adds	r3, #86	@ 0x56
 800428e:	4602      	mov	r2, r0
 8004290:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004292:	7bfa      	ldrb	r2, [r7, #15]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	3340      	adds	r3, #64	@ 0x40
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042a6:	7bfa      	ldrb	r2, [r7, #15]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	3344      	adds	r3, #68	@ 0x44
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042ba:	7bfa      	ldrb	r2, [r7, #15]
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	3348      	adds	r3, #72	@ 0x48
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042ce:	7bfa      	ldrb	r2, [r7, #15]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	334c      	adds	r3, #76	@ 0x4c
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	3301      	adds	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
 80042e8:	7bfa      	ldrb	r2, [r7, #15]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d3af      	bcc.n	8004252 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f2:	2300      	movs	r3, #0
 80042f4:	73fb      	strb	r3, [r7, #15]
 80042f6:	e044      	b.n	8004382 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042f8:	7bfa      	ldrb	r2, [r7, #15]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800430a:	2200      	movs	r2, #0
 800430c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800430e:	7bfa      	ldrb	r2, [r7, #15]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004320:	7bfa      	ldrb	r2, [r7, #15]
 8004322:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004324:	7bfa      	ldrb	r2, [r7, #15]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800433a:	7bfa      	ldrb	r2, [r7, #15]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004350:	7bfa      	ldrb	r2, [r7, #15]
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004366:	7bfa      	ldrb	r2, [r7, #15]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	3301      	adds	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
 8004382:	7bfa      	ldrb	r2, [r7, #15]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	429a      	cmp	r2, r3
 800438a:	d3b5      	bcc.n	80042f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	687e      	ldr	r6, [r7, #4]
 8004394:	466d      	mov	r5, sp
 8004396:	f106 0410 	add.w	r4, r6, #16
 800439a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800439c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800439e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80043aa:	1d33      	adds	r3, r6, #4
 80043ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043ae:	6838      	ldr	r0, [r7, #0]
 80043b0:	f004 fa16 	bl	80087e0 <USB_DevInit>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e014      	b.n	80043f0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d102      	bne.n	80043e4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f001 f86a 	bl	80054b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f005 f9c4 	bl	8009776 <USB_DevDisconnect>

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_PCD_Start+0x1c>
 8004410:	2302      	movs	r3, #2
 8004412:	e01c      	b.n	800444e <HAL_PCD_Start+0x56>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	2b01      	cmp	r3, #1
 8004422:	d105      	bne.n	8004430 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004428:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f004 f965 	bl	8008704 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f005 f978 	bl	8009734 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004456:	b590      	push	{r4, r7, lr}
 8004458:	b08d      	sub	sp, #52	@ 0x34
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f005 fa36 	bl	80098de <USB_GetMode>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	f040 847e 	bne.w	8004d76 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f005 f99a 	bl	80097b8 <USB_ReadInterrupts>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8474 	beq.w	8004d74 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	0a1b      	lsrs	r3, r3, #8
 8004496:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f005 f987 	bl	80097b8 <USB_ReadInterrupts>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d107      	bne.n	80044c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f002 0202 	and.w	r2, r2, #2
 80044c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f005 f975 	bl	80097b8 <USB_ReadInterrupts>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d161      	bne.n	800459c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0210 	bic.w	r2, r2, #16
 80044e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f003 020f 	and.w	r2, r3, #15
 80044f4:	4613      	mov	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4413      	add	r3, r2
 8004504:	3304      	adds	r3, #4
 8004506:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	0c5b      	lsrs	r3, r3, #17
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	2b02      	cmp	r3, #2
 8004512:	d124      	bne.n	800455e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d035      	beq.n	800458c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800452a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800452e:	b29b      	uxth	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	6a38      	ldr	r0, [r7, #32]
 8004534:	f004 ffac 	bl	8009490 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004544:	441a      	add	r2, r3
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	695a      	ldr	r2, [r3, #20]
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004556:	441a      	add	r2, r3
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	615a      	str	r2, [r3, #20]
 800455c:	e016      	b.n	800458c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	0c5b      	lsrs	r3, r3, #17
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	2b06      	cmp	r3, #6
 8004568:	d110      	bne.n	800458c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004570:	2208      	movs	r2, #8
 8004572:	4619      	mov	r1, r3
 8004574:	6a38      	ldr	r0, [r7, #32]
 8004576:	f004 ff8b 	bl	8009490 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004586:	441a      	add	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0210 	orr.w	r2, r2, #16
 800459a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f005 f909 	bl	80097b8 <USB_ReadInterrupts>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80045b0:	f040 80a7 	bne.w	8004702 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f005 f90e 	bl	80097de <USB_ReadDevAllOutEpInterrupt>
 80045c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80045c4:	e099      	b.n	80046fa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80045c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 808e 	beq.w	80046ee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f005 f932 	bl	8009846 <USB_ReadDevOutEPInterrupt>
 80045e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00c      	beq.n	8004608 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fa:	461a      	mov	r2, r3
 80045fc:	2301      	movs	r3, #1
 80045fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004600:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fe7e 	bl	8005304 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00c      	beq.n	800462c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461e:	461a      	mov	r2, r3
 8004620:	2308      	movs	r3, #8
 8004622:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004624:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 feba 	bl	80053a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004642:	461a      	mov	r2, r3
 8004644:	2310      	movs	r3, #16
 8004646:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d030      	beq.n	80046b4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465a:	2b80      	cmp	r3, #128	@ 0x80
 800465c:	d109      	bne.n	8004672 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800466c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004670:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	3304      	adds	r3, #4
 8004686:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	78db      	ldrb	r3, [r3, #3]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d108      	bne.n	80046a2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2200      	movs	r2, #0
 8004694:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	b2db      	uxtb	r3, r3
 800469a:	4619      	mov	r1, r3
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f007 fd2f 	bl	800c100 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ae:	461a      	mov	r2, r3
 80046b0:	2302      	movs	r3, #2
 80046b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ca:	461a      	mov	r2, r3
 80046cc:	2320      	movs	r3, #32
 80046ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d009      	beq.n	80046ee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e6:	461a      	mov	r2, r3
 80046e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	3301      	adds	r3, #1
 80046f2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80046f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80046fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f47f af62 	bne.w	80045c6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f005 f856 	bl	80097b8 <USB_ReadInterrupts>
 800470c:	4603      	mov	r3, r0
 800470e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004712:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004716:	f040 80a4 	bne.w	8004862 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f005 f877 	bl	8009812 <USB_ReadDevAllInEpInterrupt>
 8004724:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800472a:	e096      	b.n	800485a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800472c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 808b 	beq.w	800484e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	4611      	mov	r1, r2
 8004742:	4618      	mov	r0, r3
 8004744:	f005 f89d 	bl	8009882 <USB_ReadDevInEPInterrupt>
 8004748:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d020      	beq.n	8004796 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	2201      	movs	r2, #1
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	43db      	mvns	r3, r3
 800476e:	69f9      	ldr	r1, [r7, #28]
 8004770:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004774:	4013      	ands	r3, r2
 8004776:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004784:	461a      	mov	r2, r3
 8004786:	2301      	movs	r3, #1
 8004788:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	b2db      	uxtb	r3, r3
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f007 fc20 	bl	800bfd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ac:	461a      	mov	r2, r3
 80047ae:	2308      	movs	r3, #8
 80047b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c8:	461a      	mov	r2, r3
 80047ca:	2310      	movs	r3, #16
 80047cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e4:	461a      	mov	r2, r3
 80047e6:	2340      	movs	r3, #64	@ 0x40
 80047e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d023      	beq.n	800483c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80047f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047f6:	6a38      	ldr	r0, [r7, #32]
 80047f8:	f004 f934 	bl	8008a64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80047fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	3338      	adds	r3, #56	@ 0x38
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	4413      	add	r3, r2
 800480c:	3304      	adds	r3, #4
 800480e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	78db      	ldrb	r3, [r3, #3]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d108      	bne.n	800482a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2200      	movs	r2, #0
 800481c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	b2db      	uxtb	r3, r3
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f007 fc7d 	bl	800c124 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004836:	461a      	mov	r2, r3
 8004838:	2302      	movs	r3, #2
 800483a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004846:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fcd2 	bl	80051f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	3301      	adds	r3, #1
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004856:	085b      	lsrs	r3, r3, #1
 8004858:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800485a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	f47f af65 	bne.w	800472c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f004 ffa6 	bl	80097b8 <USB_ReadInterrupts>
 800486c:	4603      	mov	r3, r0
 800486e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004872:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004876:	d122      	bne.n	80048be <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004892:	2b01      	cmp	r3, #1
 8004894:	d108      	bne.n	80048a8 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800489e:	2100      	movs	r1, #0
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f007 feb1 	bl	800c608 <HAL_PCDEx_LPM_Callback>
 80048a6:	e002      	b.n	80048ae <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f007 fc01 	bl	800c0b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695a      	ldr	r2, [r3, #20]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80048bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f004 ff78 	bl	80097b8 <USB_ReadInterrupts>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d2:	d112      	bne.n	80048fa <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d102      	bne.n	80048ea <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f007 fbbd 	bl	800c064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80048f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f004 ff5a 	bl	80097b8 <USB_ReadInterrupts>
 8004904:	4603      	mov	r3, r0
 8004906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800490a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800490e:	d121      	bne.n	8004954 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695a      	ldr	r2, [r3, #20]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800491e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d111      	bne.n	800494e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004938:	089b      	lsrs	r3, r3, #2
 800493a:	f003 020f 	and.w	r2, r3, #15
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004944:	2101      	movs	r1, #1
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f007 fe5e 	bl	800c608 <HAL_PCDEx_LPM_Callback>
 800494c:	e002      	b.n	8004954 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f007 fb88 	bl	800c064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f004 ff2d 	bl	80097b8 <USB_ReadInterrupts>
 800495e:	4603      	mov	r3, r0
 8004960:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004968:	f040 80b5 	bne.w	8004ad6 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2110      	movs	r1, #16
 8004986:	4618      	mov	r0, r3
 8004988:	f004 f86c 	bl	8008a64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800498c:	2300      	movs	r3, #0
 800498e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004990:	e046      	b.n	8004a20 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800499e:	461a      	mov	r2, r3
 80049a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049b6:	0151      	lsls	r1, r2, #5
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	440a      	add	r2, r1
 80049bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80049c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d2:	461a      	mov	r2, r3
 80049d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a18:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d3b3      	bcc.n	8004992 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a38:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004a3c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d016      	beq.n	8004a74 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a56:	f043 030b 	orr.w	r3, r3, #11
 8004a5a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a6c:	f043 030b 	orr.w	r3, r3, #11
 8004a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a72:	e015      	b.n	8004aa0 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004a86:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004a8a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a9a:	f043 030b 	orr.w	r3, r3, #11
 8004a9e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004ab2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f004 ff3d 	bl	8009940 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f004 fe6c 	bl	80097b8 <USB_ReadInterrupts>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aea:	d124      	bne.n	8004b36 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f004 ff02 	bl	80098fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f004 f82f 	bl	8008b5e <USB_GetDevSpeed>
 8004b00:	4603      	mov	r3, r0
 8004b02:	461a      	mov	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681c      	ldr	r4, [r3, #0]
 8004b0c:	f001 fbbc 	bl	8006288 <HAL_RCC_GetHCLKFreq>
 8004b10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f003 fd56 	bl	80085cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f007 fa80 	bl	800c026 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695a      	ldr	r2, [r3, #20]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f004 fe3c 	bl	80097b8 <USB_ReadInterrupts>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d10a      	bne.n	8004b60 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f007 fa5d 	bl	800c00a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f002 0208 	and.w	r2, r2, #8
 8004b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f004 fe27 	bl	80097b8 <USB_ReadInterrupts>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b70:	2b80      	cmp	r3, #128	@ 0x80
 8004b72:	d122      	bne.n	8004bba <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b80:	2301      	movs	r3, #1
 8004b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b84:	e014      	b.n	8004bb0 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d105      	bne.n	8004baa <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 faf3 	bl	8005190 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	3301      	adds	r3, #1
 8004bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d3e5      	bcc.n	8004b86 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f004 fdfa 	bl	80097b8 <USB_ReadInterrupts>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bce:	d13b      	bne.n	8004c48 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd4:	e02b      	b.n	8004c2e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bea:	4613      	mov	r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	3340      	adds	r3, #64	@ 0x40
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d115      	bne.n	8004c28 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004bfc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	da12      	bge.n	8004c28 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c06:	4613      	mov	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	440b      	add	r3, r1
 8004c10:	333f      	adds	r3, #63	@ 0x3f
 8004c12:	2201      	movs	r2, #1
 8004c14:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	4619      	mov	r1, r3
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fab4 	bl	8005190 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d3ce      	bcc.n	8004bd6 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695a      	ldr	r2, [r3, #20]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f004 fdb3 	bl	80097b8 <USB_ReadInterrupts>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c5c:	d155      	bne.n	8004d0a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c5e:	2301      	movs	r3, #1
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c62:	e045      	b.n	8004cf0 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c78:	4613      	mov	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d12e      	bne.n	8004cea <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	da2b      	bge.n	8004cea <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004c9e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d121      	bne.n	8004cea <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004caa:	4613      	mov	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004cb8:	2201      	movs	r2, #1
 8004cba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ce2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ce6:	6053      	str	r3, [r2, #4]
            break;
 8004ce8:	e007      	b.n	8004cfa <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	3301      	adds	r3, #1
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d3b4      	bcc.n	8004c64 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f004 fd52 	bl	80097b8 <USB_ReadInterrupts>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d1e:	d10a      	bne.n	8004d36 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f007 fa11 	bl	800c148 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004d34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f004 fd3c 	bl	80097b8 <USB_ReadInterrupts>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d115      	bne.n	8004d76 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f007 fa01 	bl	800c164 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6859      	ldr	r1, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	e000      	b.n	8004d76 <HAL_PCD_IRQHandler+0x920>
      return;
 8004d74:	bf00      	nop
    }
  }
}
 8004d76:	3734      	adds	r7, #52	@ 0x34
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd90      	pop	{r4, r7, pc}

08004d7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_PCD_SetAddress+0x1a>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e013      	b.n	8004dbe <HAL_PCD_SetAddress+0x42>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	78fa      	ldrb	r2, [r7, #3]
 8004da2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	78fa      	ldrb	r2, [r7, #3]
 8004dac:	4611      	mov	r1, r2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f004 fc9a 	bl	80096e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	4608      	mov	r0, r1
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	70fb      	strb	r3, [r7, #3]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	803b      	strh	r3, [r7, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	da0f      	bge.n	8004e0c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	f003 020f 	and.w	r2, r3, #15
 8004df2:	4613      	mov	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	3338      	adds	r3, #56	@ 0x38
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	4413      	add	r3, r2
 8004e00:	3304      	adds	r3, #4
 8004e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2201      	movs	r2, #1
 8004e08:	705a      	strb	r2, [r3, #1]
 8004e0a:	e00f      	b.n	8004e2c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	f003 020f 	and.w	r2, r3, #15
 8004e12:	4613      	mov	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	4413      	add	r3, r2
 8004e22:	3304      	adds	r3, #4
 8004e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e38:	883a      	ldrh	r2, [r7, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	78ba      	ldrb	r2, [r7, #2]
 8004e42:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d004      	beq.n	8004e56 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e56:	78bb      	ldrb	r3, [r7, #2]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d102      	bne.n	8004e62 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_PCD_EP_Open+0xaa>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e00e      	b.n	8004e8e <HAL_PCD_EP_Open+0xc8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68f9      	ldr	r1, [r7, #12]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f003 fe8c 	bl	8008b9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004e8c:	7afb      	ldrb	r3, [r7, #11]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	da0f      	bge.n	8004eca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	f003 020f 	and.w	r2, r3, #15
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	3338      	adds	r3, #56	@ 0x38
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	705a      	strb	r2, [r3, #1]
 8004ec8:	e00f      	b.n	8004eea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f003 020f 	and.w	r2, r3, #15
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	4413      	add	r3, r2
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_PCD_EP_Close+0x6e>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e00e      	b.n	8004f22 <HAL_PCD_EP_Close+0x8c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68f9      	ldr	r1, [r7, #12]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f003 feca 	bl	8008cac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b086      	sub	sp, #24
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	460b      	mov	r3, r1
 8004f38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f3a:	7afb      	ldrb	r3, [r7, #11]
 8004f3c:	f003 020f 	and.w	r2, r3, #15
 8004f40:	4613      	mov	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	3304      	adds	r3, #4
 8004f52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2200      	movs	r2, #0
 8004f64:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f6c:	7afb      	ldrb	r3, [r7, #11]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6979      	ldr	r1, [r7, #20]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f003 ff70 	bl	8008e64 <USB_EPStartXfer>

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	460b      	mov	r3, r1
 8004f98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	f003 020f 	and.w	r2, r3, #15
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004fb0:	681b      	ldr	r3, [r3, #0]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fce:	7afb      	ldrb	r3, [r7, #11]
 8004fd0:	f003 020f 	and.w	r2, r3, #15
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	3338      	adds	r3, #56	@ 0x38
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ffe:	7afb      	ldrb	r3, [r7, #11]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	b2da      	uxtb	r2, r3
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6979      	ldr	r1, [r7, #20]
 8005010:	4618      	mov	r0, r3
 8005012:	f003 ff27 	bl	8008e64 <USB_EPStartXfer>

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	f003 020f 	and.w	r2, r3, #15
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	429a      	cmp	r2, r3
 8005038:	d901      	bls.n	800503e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e04e      	b.n	80050dc <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800503e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005042:	2b00      	cmp	r3, #0
 8005044:	da0f      	bge.n	8005066 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005046:	78fb      	ldrb	r3, [r7, #3]
 8005048:	f003 020f 	and.w	r2, r3, #15
 800504c:	4613      	mov	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	3338      	adds	r3, #56	@ 0x38
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	4413      	add	r3, r2
 800505a:	3304      	adds	r3, #4
 800505c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	705a      	strb	r2, [r3, #1]
 8005064:	e00d      	b.n	8005082 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005066:	78fa      	ldrb	r2, [r7, #3]
 8005068:	4613      	mov	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	4413      	add	r3, r2
 8005078:	3304      	adds	r3, #4
 800507a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	b2da      	uxtb	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_PCD_EP_SetStall+0x82>
 800509e:	2302      	movs	r3, #2
 80050a0:	e01c      	b.n	80050dc <HAL_PCD_EP_SetStall+0xbc>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68f9      	ldr	r1, [r7, #12]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f004 fa45 	bl	8009540 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d108      	bne.n	80050d2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f004 fc37 	bl	8009940 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	f003 020f 	and.w	r2, r3, #15
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d901      	bls.n	8005102 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e042      	b.n	8005188 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005106:	2b00      	cmp	r3, #0
 8005108:	da0f      	bge.n	800512a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	f003 020f 	and.w	r2, r3, #15
 8005110:	4613      	mov	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	3338      	adds	r3, #56	@ 0x38
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	3304      	adds	r3, #4
 8005120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	705a      	strb	r2, [r3, #1]
 8005128:	e00f      	b.n	800514a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800512a:	78fb      	ldrb	r3, [r7, #3]
 800512c:	f003 020f 	and.w	r2, r3, #15
 8005130:	4613      	mov	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	4413      	add	r3, r2
 8005140:	3304      	adds	r3, #4
 8005142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	b2da      	uxtb	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_PCD_EP_ClrStall+0x86>
 8005166:	2302      	movs	r3, #2
 8005168:	e00e      	b.n	8005188 <HAL_PCD_EP_ClrStall+0xa4>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68f9      	ldr	r1, [r7, #12]
 8005178:	4618      	mov	r0, r3
 800517a:	f004 fa4f 	bl	800961c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800519c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	da0c      	bge.n	80051be <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	f003 020f 	and.w	r2, r3, #15
 80051aa:	4613      	mov	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	3338      	adds	r3, #56	@ 0x38
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	4413      	add	r3, r2
 80051b8:	3304      	adds	r3, #4
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	e00c      	b.n	80051d8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	f003 020f 	and.w	r2, r3, #15
 80051c4:	4613      	mov	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	3304      	adds	r3, #4
 80051d6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	4618      	mov	r0, r3
 80051e0:	f004 f872 	bl	80092c8 <USB_EPStopXfer>
 80051e4:	4603      	mov	r3, r0
 80051e6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80051e8:	7afb      	ldrb	r3, [r7, #11]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b088      	sub	sp, #32
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	4613      	mov	r3, r2
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	3338      	adds	r3, #56	@ 0x38
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4413      	add	r3, r2
 8005216:	3304      	adds	r3, #4
 8005218:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	695a      	ldr	r2, [r3, #20]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	429a      	cmp	r2, r3
 8005224:	d901      	bls.n	800522a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e067      	b.n	80052fa <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	429a      	cmp	r2, r3
 800523e:	d902      	bls.n	8005246 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3303      	adds	r3, #3
 800524a:	089b      	lsrs	r3, r3, #2
 800524c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800524e:	e026      	b.n	800529e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	691a      	ldr	r2, [r3, #16]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	429a      	cmp	r2, r3
 8005264:	d902      	bls.n	800526c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	3303      	adds	r3, #3
 8005270:	089b      	lsrs	r3, r3, #2
 8005272:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	68d9      	ldr	r1, [r3, #12]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	b2da      	uxtb	r2, r3
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	b29b      	uxth	r3, r3
 8005280:	6978      	ldr	r0, [r7, #20]
 8005282:	f004 f8cb 	bl	800941c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	441a      	add	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	441a      	add	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d809      	bhi.n	80052c8 <PCD_WriteEmptyTxFifo+0xd6>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	695a      	ldr	r2, [r3, #20]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052bc:	429a      	cmp	r2, r3
 80052be:	d203      	bcs.n	80052c8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1c3      	bne.n	8005250 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d811      	bhi.n	80052f8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	2201      	movs	r2, #1
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	43db      	mvns	r3, r3
 80052ee:	6939      	ldr	r1, [r7, #16]
 80052f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052f4:	4013      	ands	r3, r2
 80052f6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	333c      	adds	r3, #60	@ 0x3c
 800531c:	3304      	adds	r3, #4
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4a19      	ldr	r2, [pc, #100]	@ (800539c <PCD_EP_OutXfrComplete_int+0x98>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d124      	bne.n	8005384 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005350:	461a      	mov	r2, r3
 8005352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005356:	6093      	str	r3, [r2, #8]
 8005358:	e01a      	b.n	8005390 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005370:	461a      	mov	r2, r3
 8005372:	2320      	movs	r3, #32
 8005374:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	b2db      	uxtb	r3, r3
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f006 fe0f 	bl	800bfa0 <HAL_PCD_DataOutStageCallback>
 8005382:	e005      	b.n	8005390 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	4619      	mov	r1, r3
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f006 fe08 	bl	800bfa0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	4f54310a 	.word	0x4f54310a

080053a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	333c      	adds	r3, #60	@ 0x3c
 80053b8:	3304      	adds	r3, #4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005404 <PCD_EP_OutSetupPacket_int+0x64>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d90e      	bls.n	80053f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d009      	beq.n	80053f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ec:	461a      	mov	r2, r3
 80053ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f006 fdc1 	bl	800bf7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	4f54300a 	.word	0x4f54300a

08005408 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	70fb      	strb	r3, [r7, #3]
 8005414:	4613      	mov	r3, r2
 8005416:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d107      	bne.n	8005436 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005426:	883b      	ldrh	r3, [r7, #0]
 8005428:	0419      	lsls	r1, r3, #16
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	430a      	orrs	r2, r1
 8005432:	629a      	str	r2, [r3, #40]	@ 0x28
 8005434:	e028      	b.n	8005488 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543c:	0c1b      	lsrs	r3, r3, #16
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	4413      	add	r3, r2
 8005442:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005444:	2300      	movs	r3, #0
 8005446:	73fb      	strb	r3, [r7, #15]
 8005448:	e00d      	b.n	8005466 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	3340      	adds	r3, #64	@ 0x40
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	4413      	add	r3, r2
 800545e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	3301      	adds	r3, #1
 8005464:	73fb      	strb	r3, [r7, #15]
 8005466:	7bfa      	ldrb	r2, [r7, #15]
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	3b01      	subs	r3, #1
 800546c:	429a      	cmp	r2, r3
 800546e:	d3ec      	bcc.n	800544a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005470:	883b      	ldrh	r3, [r7, #0]
 8005472:	0418      	lsls	r0, r3, #16
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6819      	ldr	r1, [r3, #0]
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	3b01      	subs	r3, #1
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	4302      	orrs	r2, r0
 8005480:	3340      	adds	r3, #64	@ 0x40
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	460b      	mov	r3, r1
 80054a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	887a      	ldrh	r2, [r7, #2]
 80054a8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ea:	f043 0303 	orr.w	r3, r3, #3
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005504:	4b0d      	ldr	r3, [pc, #52]	@ (800553c <HAL_PWREx_GetVoltageRange+0x3c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800550c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005510:	d102      	bne.n	8005518 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005516:	e00b      	b.n	8005530 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005518:	4b08      	ldr	r3, [pc, #32]	@ (800553c <HAL_PWREx_GetVoltageRange+0x3c>)
 800551a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800551e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005526:	d102      	bne.n	800552e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005528:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800552c:	e000      	b.n	8005530 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800552e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005530:	4618      	mov	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40007000 	.word	0x40007000

08005540 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d141      	bne.n	80055d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800554e:	4b4b      	ldr	r3, [pc, #300]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800555a:	d131      	bne.n	80055c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800555c:	4b47      	ldr	r3, [pc, #284]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800555e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005562:	4a46      	ldr	r2, [pc, #280]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005568:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800556c:	4b43      	ldr	r3, [pc, #268]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005574:	4a41      	ldr	r2, [pc, #260]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005576:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800557a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800557c:	4b40      	ldr	r3, [pc, #256]	@ (8005680 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2232      	movs	r2, #50	@ 0x32
 8005582:	fb02 f303 	mul.w	r3, r2, r3
 8005586:	4a3f      	ldr	r2, [pc, #252]	@ (8005684 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005588:	fba2 2303 	umull	r2, r3, r2, r3
 800558c:	0c9b      	lsrs	r3, r3, #18
 800558e:	3301      	adds	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005592:	e002      	b.n	800559a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3b01      	subs	r3, #1
 8005598:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800559a:	4b38      	ldr	r3, [pc, #224]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a6:	d102      	bne.n	80055ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f2      	bne.n	8005594 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055ae:	4b33      	ldr	r3, [pc, #204]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055ba:	d158      	bne.n	800566e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e057      	b.n	8005670 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055c0:	4b2e      	ldr	r3, [pc, #184]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055c6:	4a2d      	ldr	r2, [pc, #180]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80055d0:	e04d      	b.n	800566e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055d8:	d141      	bne.n	800565e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055da:	4b28      	ldr	r3, [pc, #160]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80055e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055e6:	d131      	bne.n	800564c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055e8:	4b24      	ldr	r3, [pc, #144]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ee:	4a23      	ldr	r2, [pc, #140]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055f8:	4b20      	ldr	r3, [pc, #128]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005600:	4a1e      	ldr	r2, [pc, #120]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005602:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005606:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005608:	4b1d      	ldr	r3, [pc, #116]	@ (8005680 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2232      	movs	r2, #50	@ 0x32
 800560e:	fb02 f303 	mul.w	r3, r2, r3
 8005612:	4a1c      	ldr	r2, [pc, #112]	@ (8005684 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	0c9b      	lsrs	r3, r3, #18
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800561e:	e002      	b.n	8005626 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3b01      	subs	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005626:	4b15      	ldr	r3, [pc, #84]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800562e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005632:	d102      	bne.n	800563a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f2      	bne.n	8005620 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800563a:	4b10      	ldr	r3, [pc, #64]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005646:	d112      	bne.n	800566e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e011      	b.n	8005670 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800564c:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800564e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005652:	4a0a      	ldr	r2, [pc, #40]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005658:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800565c:	e007      	b.n	800566e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800565e:	4b07      	ldr	r3, [pc, #28]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005666:	4a05      	ldr	r2, [pc, #20]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005668:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800566c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40007000 	.word	0x40007000
 8005680:	20000000 	.word	0x20000000
 8005684:	431bde83 	.word	0x431bde83

08005688 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800568c:	4b05      	ldr	r3, [pc, #20]	@ (80056a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	4a04      	ldr	r2, [pc, #16]	@ (80056a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005692:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005696:	6053      	str	r3, [r2, #4]
}
 8005698:	bf00      	nop
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40007000 	.word	0x40007000

080056a8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80056ac:	4b05      	ldr	r3, [pc, #20]	@ (80056c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	4a04      	ldr	r2, [pc, #16]	@ (80056c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80056b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056b6:	6053      	str	r3, [r2, #4]
}
 80056b8:	bf00      	nop
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40007000 	.word	0x40007000

080056c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d102      	bne.n	80056dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f000 bc08 	b.w	8005eec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056dc:	4b96      	ldr	r3, [pc, #600]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 030c 	and.w	r3, r3, #12
 80056e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056e6:	4b94      	ldr	r3, [pc, #592]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 80e4 	beq.w	80058c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <HAL_RCC_OscConfig+0x4c>
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b0c      	cmp	r3, #12
 8005708:	f040 808b 	bne.w	8005822 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2b01      	cmp	r3, #1
 8005710:	f040 8087 	bne.w	8005822 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005714:	4b88      	ldr	r3, [pc, #544]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <HAL_RCC_OscConfig+0x64>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e3df      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1a      	ldr	r2, [r3, #32]
 8005730:	4b81      	ldr	r3, [pc, #516]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <HAL_RCC_OscConfig+0x7e>
 800573c:	4b7e      	ldr	r3, [pc, #504]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005744:	e005      	b.n	8005752 <HAL_RCC_OscConfig+0x8a>
 8005746:	4b7c      	ldr	r3, [pc, #496]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800574c:	091b      	lsrs	r3, r3, #4
 800574e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005752:	4293      	cmp	r3, r2
 8005754:	d223      	bcs.n	800579e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fdcc 	bl	80062f8 <RCC_SetFlashLatencyFromMSIRange>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e3c0      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800576a:	4b73      	ldr	r3, [pc, #460]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a72      	ldr	r2, [pc, #456]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005770:	f043 0308 	orr.w	r3, r3, #8
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	4b70      	ldr	r3, [pc, #448]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	496d      	ldr	r1, [pc, #436]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005784:	4313      	orrs	r3, r2
 8005786:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005788:	4b6b      	ldr	r3, [pc, #428]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	4968      	ldr	r1, [pc, #416]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005798:	4313      	orrs	r3, r2
 800579a:	604b      	str	r3, [r1, #4]
 800579c:	e025      	b.n	80057ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800579e:	4b66      	ldr	r3, [pc, #408]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a65      	ldr	r2, [pc, #404]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 80057a4:	f043 0308 	orr.w	r3, r3, #8
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	4b63      	ldr	r3, [pc, #396]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	4960      	ldr	r1, [pc, #384]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	021b      	lsls	r3, r3, #8
 80057ca:	495b      	ldr	r1, [pc, #364]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d109      	bne.n	80057ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fd8c 	bl	80062f8 <RCC_SetFlashLatencyFromMSIRange>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e380      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057ea:	f000 fcc1 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 80057ee:	4602      	mov	r2, r0
 80057f0:	4b51      	ldr	r3, [pc, #324]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	091b      	lsrs	r3, r3, #4
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	4950      	ldr	r1, [pc, #320]	@ (800593c <HAL_RCC_OscConfig+0x274>)
 80057fc:	5ccb      	ldrb	r3, [r1, r3]
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	fa22 f303 	lsr.w	r3, r2, r3
 8005806:	4a4e      	ldr	r2, [pc, #312]	@ (8005940 <HAL_RCC_OscConfig+0x278>)
 8005808:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800580a:	4b4e      	ldr	r3, [pc, #312]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7fc facc 	bl	8001dac <HAL_InitTick>
 8005814:	4603      	mov	r3, r0
 8005816:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d052      	beq.n	80058c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	e364      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d032      	beq.n	8005890 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800582a:	4b43      	ldr	r3, [pc, #268]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a42      	ldr	r2, [pc, #264]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005830:	f043 0301 	orr.w	r3, r3, #1
 8005834:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005836:	f7fc fb09 	bl	8001e4c <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800583e:	f7fc fb05 	bl	8001e4c <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e34d      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005850:	4b39      	ldr	r3, [pc, #228]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0f0      	beq.n	800583e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800585c:	4b36      	ldr	r3, [pc, #216]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a35      	ldr	r2, [pc, #212]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005862:	f043 0308 	orr.w	r3, r3, #8
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	4b33      	ldr	r3, [pc, #204]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	4930      	ldr	r1, [pc, #192]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005876:	4313      	orrs	r3, r2
 8005878:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800587a:	4b2f      	ldr	r3, [pc, #188]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	492b      	ldr	r1, [pc, #172]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 800588a:	4313      	orrs	r3, r2
 800588c:	604b      	str	r3, [r1, #4]
 800588e:	e01a      	b.n	80058c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005890:	4b29      	ldr	r3, [pc, #164]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a28      	ldr	r2, [pc, #160]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005896:	f023 0301 	bic.w	r3, r3, #1
 800589a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800589c:	f7fc fad6 	bl	8001e4c <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058a4:	f7fc fad2 	bl	8001e4c <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e31a      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058b6:	4b20      	ldr	r3, [pc, #128]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x1dc>
 80058c2:	e000      	b.n	80058c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d073      	beq.n	80059ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d005      	beq.n	80058e4 <HAL_RCC_OscConfig+0x21c>
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	2b0c      	cmp	r3, #12
 80058dc:	d10e      	bne.n	80058fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d10b      	bne.n	80058fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e4:	4b14      	ldr	r3, [pc, #80]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d063      	beq.n	80059b8 <HAL_RCC_OscConfig+0x2f0>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d15f      	bne.n	80059b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e2f7      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005904:	d106      	bne.n	8005914 <HAL_RCC_OscConfig+0x24c>
 8005906:	4b0c      	ldr	r3, [pc, #48]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a0b      	ldr	r2, [pc, #44]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 800590c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	e025      	b.n	8005960 <HAL_RCC_OscConfig+0x298>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800591c:	d114      	bne.n	8005948 <HAL_RCC_OscConfig+0x280>
 800591e:	4b06      	ldr	r3, [pc, #24]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a05      	ldr	r2, [pc, #20]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	4b03      	ldr	r3, [pc, #12]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a02      	ldr	r2, [pc, #8]	@ (8005938 <HAL_RCC_OscConfig+0x270>)
 8005930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e013      	b.n	8005960 <HAL_RCC_OscConfig+0x298>
 8005938:	40021000 	.word	0x40021000
 800593c:	0800c9f4 	.word	0x0800c9f4
 8005940:	20000000 	.word	0x20000000
 8005944:	20000004 	.word	0x20000004
 8005948:	4ba0      	ldr	r3, [pc, #640]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a9f      	ldr	r2, [pc, #636]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 800594e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	4b9d      	ldr	r3, [pc, #628]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a9c      	ldr	r2, [pc, #624]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 800595a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800595e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d013      	beq.n	8005990 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005968:	f7fc fa70 	bl	8001e4c <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005970:	f7fc fa6c 	bl	8001e4c <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b64      	cmp	r3, #100	@ 0x64
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e2b4      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005982:	4b92      	ldr	r3, [pc, #584]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0f0      	beq.n	8005970 <HAL_RCC_OscConfig+0x2a8>
 800598e:	e014      	b.n	80059ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fc fa5c 	bl	8001e4c <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005998:	f7fc fa58 	bl	8001e4c <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b64      	cmp	r3, #100	@ 0x64
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e2a0      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059aa:	4b88      	ldr	r3, [pc, #544]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x2d0>
 80059b6:	e000      	b.n	80059ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d060      	beq.n	8005a88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d005      	beq.n	80059d8 <HAL_RCC_OscConfig+0x310>
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b0c      	cmp	r3, #12
 80059d0:	d119      	bne.n	8005a06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d116      	bne.n	8005a06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059d8:	4b7c      	ldr	r3, [pc, #496]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <HAL_RCC_OscConfig+0x328>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e27d      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f0:	4b76      	ldr	r3, [pc, #472]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	061b      	lsls	r3, r3, #24
 80059fe:	4973      	ldr	r1, [pc, #460]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a04:	e040      	b.n	8005a88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d023      	beq.n	8005a56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a0e:	4b6f      	ldr	r3, [pc, #444]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a6e      	ldr	r2, [pc, #440]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1a:	f7fc fa17 	bl	8001e4c <HAL_GetTick>
 8005a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a20:	e008      	b.n	8005a34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a22:	f7fc fa13 	bl	8001e4c <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e25b      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a34:	4b65      	ldr	r3, [pc, #404]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0f0      	beq.n	8005a22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a40:	4b62      	ldr	r3, [pc, #392]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	061b      	lsls	r3, r3, #24
 8005a4e:	495f      	ldr	r1, [pc, #380]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	604b      	str	r3, [r1, #4]
 8005a54:	e018      	b.n	8005a88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a56:	4b5d      	ldr	r3, [pc, #372]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a5c      	ldr	r2, [pc, #368]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a62:	f7fc f9f3 	bl	8001e4c <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a6a:	f7fc f9ef 	bl	8001e4c <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e237      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a7c:	4b53      	ldr	r3, [pc, #332]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f0      	bne.n	8005a6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d03c      	beq.n	8005b0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01c      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aa2:	4a4a      	ldr	r2, [pc, #296]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aac:	f7fc f9ce 	bl	8001e4c <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ab4:	f7fc f9ca 	bl	8001e4c <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e212      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ac6:	4b41      	ldr	r3, [pc, #260]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0ef      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x3ec>
 8005ad4:	e01b      	b.n	8005b0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005adc:	4a3b      	ldr	r2, [pc, #236]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae6:	f7fc f9b1 	bl	8001e4c <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aee:	f7fc f9ad 	bl	8001e4c <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e1f5      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b00:	4b32      	ldr	r3, [pc, #200]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1ef      	bne.n	8005aee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 80a6 	beq.w	8005c68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b20:	4b2a      	ldr	r3, [pc, #168]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10d      	bne.n	8005b48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b2c:	4b27      	ldr	r3, [pc, #156]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b30:	4a26      	ldr	r2, [pc, #152]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005b32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b36:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b38:	4b24      	ldr	r3, [pc, #144]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b40:	60bb      	str	r3, [r7, #8]
 8005b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b44:	2301      	movs	r3, #1
 8005b46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b48:	4b21      	ldr	r3, [pc, #132]	@ (8005bd0 <HAL_RCC_OscConfig+0x508>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d118      	bne.n	8005b86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b54:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd0 <HAL_RCC_OscConfig+0x508>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd0 <HAL_RCC_OscConfig+0x508>)
 8005b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b60:	f7fc f974 	bl	8001e4c <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b68:	f7fc f970 	bl	8001e4c <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e1b8      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b7a:	4b15      	ldr	r3, [pc, #84]	@ (8005bd0 <HAL_RCC_OscConfig+0x508>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d108      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x4d8>
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b94:	4a0d      	ldr	r2, [pc, #52]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005b96:	f043 0301 	orr.w	r3, r3, #1
 8005b9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b9e:	e029      	b.n	8005bf4 <HAL_RCC_OscConfig+0x52c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b05      	cmp	r3, #5
 8005ba6:	d115      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x50c>
 8005ba8:	4b08      	ldr	r3, [pc, #32]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bae:	4a07      	ldr	r2, [pc, #28]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005bb0:	f043 0304 	orr.w	r3, r3, #4
 8005bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bb8:	4b04      	ldr	r3, [pc, #16]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bbe:	4a03      	ldr	r2, [pc, #12]	@ (8005bcc <HAL_RCC_OscConfig+0x504>)
 8005bc0:	f043 0301 	orr.w	r3, r3, #1
 8005bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bc8:	e014      	b.n	8005bf4 <HAL_RCC_OscConfig+0x52c>
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40007000 	.word	0x40007000
 8005bd4:	4b9d      	ldr	r3, [pc, #628]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bda:	4a9c      	ldr	r2, [pc, #624]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005be4:	4b99      	ldr	r3, [pc, #612]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bea:	4a98      	ldr	r2, [pc, #608]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005bec:	f023 0304 	bic.w	r3, r3, #4
 8005bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d016      	beq.n	8005c2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfc:	f7fc f926 	bl	8001e4c <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c02:	e00a      	b.n	8005c1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c04:	f7fc f922 	bl	8001e4c <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e168      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c1a:	4b8c      	ldr	r3, [pc, #560]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0ed      	beq.n	8005c04 <HAL_RCC_OscConfig+0x53c>
 8005c28:	e015      	b.n	8005c56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2a:	f7fc f90f 	bl	8001e4c <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c30:	e00a      	b.n	8005c48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c32:	f7fc f90b 	bl	8001e4c <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e151      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c48:	4b80      	ldr	r3, [pc, #512]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1ed      	bne.n	8005c32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c56:	7ffb      	ldrb	r3, [r7, #31]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d105      	bne.n	8005c68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c5c:	4b7b      	ldr	r3, [pc, #492]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c60:	4a7a      	ldr	r2, [pc, #488]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005c62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c66:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d03c      	beq.n	8005cee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01c      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c7c:	4b73      	ldr	r3, [pc, #460]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c82:	4a72      	ldr	r2, [pc, #456]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005c84:	f043 0301 	orr.w	r3, r3, #1
 8005c88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c8c:	f7fc f8de 	bl	8001e4c <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c94:	f7fc f8da 	bl	8001e4c <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e122      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ca6:	4b69      	ldr	r3, [pc, #420]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0ef      	beq.n	8005c94 <HAL_RCC_OscConfig+0x5cc>
 8005cb4:	e01b      	b.n	8005cee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cb6:	4b65      	ldr	r3, [pc, #404]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cbc:	4a63      	ldr	r2, [pc, #396]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005cbe:	f023 0301 	bic.w	r3, r3, #1
 8005cc2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc6:	f7fc f8c1 	bl	8001e4c <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cce:	f7fc f8bd 	bl	8001e4c <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e105      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ce0:	4b5a      	ldr	r3, [pc, #360]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1ef      	bne.n	8005cce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 80f9 	beq.w	8005eea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	f040 80cf 	bne.w	8005ea0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d02:	4b52      	ldr	r3, [pc, #328]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f003 0203 	and.w	r2, r3, #3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d12c      	bne.n	8005d70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d20:	3b01      	subs	r3, #1
 8005d22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d123      	bne.n	8005d70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d11b      	bne.n	8005d70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d113      	bne.n	8005d70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d52:	085b      	lsrs	r3, r3, #1
 8005d54:	3b01      	subs	r3, #1
 8005d56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d109      	bne.n	8005d70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d66:	085b      	lsrs	r3, r3, #1
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d071      	beq.n	8005e54 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	2b0c      	cmp	r3, #12
 8005d74:	d068      	beq.n	8005e48 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d76:	4b35      	ldr	r3, [pc, #212]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d105      	bne.n	8005d8e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005d82:	4b32      	ldr	r3, [pc, #200]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e0ac      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d92:	4b2e      	ldr	r3, [pc, #184]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a2d      	ldr	r2, [pc, #180]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005d98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d9e:	f7fc f855 	bl	8001e4c <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da6:	f7fc f851 	bl	8001e4c <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e099      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005db8:	4b24      	ldr	r3, [pc, #144]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1f0      	bne.n	8005da6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dc4:	4b21      	ldr	r3, [pc, #132]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	4b21      	ldr	r3, [pc, #132]	@ (8005e50 <HAL_RCC_OscConfig+0x788>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005dd4:	3a01      	subs	r2, #1
 8005dd6:	0112      	lsls	r2, r2, #4
 8005dd8:	4311      	orrs	r1, r2
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005dde:	0212      	lsls	r2, r2, #8
 8005de0:	4311      	orrs	r1, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005de6:	0852      	lsrs	r2, r2, #1
 8005de8:	3a01      	subs	r2, #1
 8005dea:	0552      	lsls	r2, r2, #21
 8005dec:	4311      	orrs	r1, r2
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005df2:	0852      	lsrs	r2, r2, #1
 8005df4:	3a01      	subs	r2, #1
 8005df6:	0652      	lsls	r2, r2, #25
 8005df8:	4311      	orrs	r1, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005dfe:	06d2      	lsls	r2, r2, #27
 8005e00:	430a      	orrs	r2, r1
 8005e02:	4912      	ldr	r1, [pc, #72]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e08:	4b10      	ldr	r3, [pc, #64]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e14:	4b0d      	ldr	r3, [pc, #52]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4a0c      	ldr	r2, [pc, #48]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e20:	f7fc f814 	bl	8001e4c <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e28:	f7fc f810 	bl	8001e4c <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e058      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e3a:	4b04      	ldr	r3, [pc, #16]	@ (8005e4c <HAL_RCC_OscConfig+0x784>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0f0      	beq.n	8005e28 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e46:	e050      	b.n	8005eea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e04f      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
 8005e4c:	40021000 	.word	0x40021000
 8005e50:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e54:	4b27      	ldr	r3, [pc, #156]	@ (8005ef4 <HAL_RCC_OscConfig+0x82c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d144      	bne.n	8005eea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005e60:	4b24      	ldr	r3, [pc, #144]	@ (8005ef4 <HAL_RCC_OscConfig+0x82c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a23      	ldr	r2, [pc, #140]	@ (8005ef4 <HAL_RCC_OscConfig+0x82c>)
 8005e66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e6c:	4b21      	ldr	r3, [pc, #132]	@ (8005ef4 <HAL_RCC_OscConfig+0x82c>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	4a20      	ldr	r2, [pc, #128]	@ (8005ef4 <HAL_RCC_OscConfig+0x82c>)
 8005e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e78:	f7fb ffe8 	bl	8001e4c <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e80:	f7fb ffe4 	bl	8001e4c <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e02c      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e92:	4b18      	ldr	r3, [pc, #96]	@ (8005ef4 <HAL_RCC_OscConfig+0x82c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0f0      	beq.n	8005e80 <HAL_RCC_OscConfig+0x7b8>
 8005e9e:	e024      	b.n	8005eea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	2b0c      	cmp	r3, #12
 8005ea4:	d01f      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ea6:	4b13      	ldr	r3, [pc, #76]	@ (8005ef4 <HAL_RCC_OscConfig+0x82c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a12      	ldr	r2, [pc, #72]	@ (8005ef4 <HAL_RCC_OscConfig+0x82c>)
 8005eac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb2:	f7fb ffcb 	bl	8001e4c <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eba:	f7fb ffc7 	bl	8001e4c <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e00f      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ecc:	4b09      	ldr	r3, [pc, #36]	@ (8005ef4 <HAL_RCC_OscConfig+0x82c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1f0      	bne.n	8005eba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005ed8:	4b06      	ldr	r3, [pc, #24]	@ (8005ef4 <HAL_RCC_OscConfig+0x82c>)
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	4905      	ldr	r1, [pc, #20]	@ (8005ef4 <HAL_RCC_OscConfig+0x82c>)
 8005ede:	4b06      	ldr	r3, [pc, #24]	@ (8005ef8 <HAL_RCC_OscConfig+0x830>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	60cb      	str	r3, [r1, #12]
 8005ee4:	e001      	b.n	8005eea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	feeefffc 	.word	0xfeeefffc

08005efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e11d      	b.n	8006150 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f14:	4b90      	ldr	r3, [pc, #576]	@ (8006158 <HAL_RCC_ClockConfig+0x25c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d910      	bls.n	8005f44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f22:	4b8d      	ldr	r3, [pc, #564]	@ (8006158 <HAL_RCC_ClockConfig+0x25c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f023 020f 	bic.w	r2, r3, #15
 8005f2a:	498b      	ldr	r1, [pc, #556]	@ (8006158 <HAL_RCC_ClockConfig+0x25c>)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f32:	4b89      	ldr	r3, [pc, #548]	@ (8006158 <HAL_RCC_ClockConfig+0x25c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d001      	beq.n	8005f44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e105      	b.n	8006150 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d010      	beq.n	8005f72 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	4b81      	ldr	r3, [pc, #516]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d908      	bls.n	8005f72 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f60:	4b7e      	ldr	r3, [pc, #504]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	497b      	ldr	r1, [pc, #492]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d079      	beq.n	8006072 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d11e      	bne.n	8005fc4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f86:	4b75      	ldr	r3, [pc, #468]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e0dc      	b.n	8006150 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005f96:	f000 fa09 	bl	80063ac <RCC_GetSysClockFreqFromPLLSource>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	4a70      	ldr	r2, [pc, #448]	@ (8006160 <HAL_RCC_ClockConfig+0x264>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d946      	bls.n	8006030 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005fa2:	4b6e      	ldr	r3, [pc, #440]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d140      	bne.n	8006030 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fae:	4b6b      	ldr	r3, [pc, #428]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fb6:	4a69      	ldr	r2, [pc, #420]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8005fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005fbe:	2380      	movs	r3, #128	@ 0x80
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	e035      	b.n	8006030 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d107      	bne.n	8005fdc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fcc:	4b63      	ldr	r3, [pc, #396]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d115      	bne.n	8006004 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0b9      	b.n	8006150 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d107      	bne.n	8005ff4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005fe4:	4b5d      	ldr	r3, [pc, #372]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d109      	bne.n	8006004 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e0ad      	b.n	8006150 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ff4:	4b59      	ldr	r3, [pc, #356]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e0a5      	b.n	8006150 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006004:	f000 f8b4 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 8006008:	4603      	mov	r3, r0
 800600a:	4a55      	ldr	r2, [pc, #340]	@ (8006160 <HAL_RCC_ClockConfig+0x264>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d90f      	bls.n	8006030 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006010:	4b52      	ldr	r3, [pc, #328]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d109      	bne.n	8006030 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800601c:	4b4f      	ldr	r3, [pc, #316]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006024:	4a4d      	ldr	r2, [pc, #308]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8006026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800602a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800602c:	2380      	movs	r3, #128	@ 0x80
 800602e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006030:	4b4a      	ldr	r3, [pc, #296]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f023 0203 	bic.w	r2, r3, #3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	4947      	ldr	r1, [pc, #284]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006042:	f7fb ff03 	bl	8001e4c <HAL_GetTick>
 8006046:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006048:	e00a      	b.n	8006060 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800604a:	f7fb feff 	bl	8001e4c <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006058:	4293      	cmp	r3, r2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e077      	b.n	8006150 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006060:	4b3e      	ldr	r3, [pc, #248]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 020c 	and.w	r2, r3, #12
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	429a      	cmp	r2, r3
 8006070:	d1eb      	bne.n	800604a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b80      	cmp	r3, #128	@ 0x80
 8006076:	d105      	bne.n	8006084 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006078:	4b38      	ldr	r3, [pc, #224]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	4a37      	ldr	r2, [pc, #220]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 800607e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006082:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d010      	beq.n	80060b2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	4b31      	ldr	r3, [pc, #196]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800609c:	429a      	cmp	r2, r3
 800609e:	d208      	bcs.n	80060b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060a0:	4b2e      	ldr	r3, [pc, #184]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	492b      	ldr	r1, [pc, #172]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060b2:	4b29      	ldr	r3, [pc, #164]	@ (8006158 <HAL_RCC_ClockConfig+0x25c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d210      	bcs.n	80060e2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c0:	4b25      	ldr	r3, [pc, #148]	@ (8006158 <HAL_RCC_ClockConfig+0x25c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f023 020f 	bic.w	r2, r3, #15
 80060c8:	4923      	ldr	r1, [pc, #140]	@ (8006158 <HAL_RCC_ClockConfig+0x25c>)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d0:	4b21      	ldr	r3, [pc, #132]	@ (8006158 <HAL_RCC_ClockConfig+0x25c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d001      	beq.n	80060e2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e036      	b.n	8006150 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0304 	and.w	r3, r3, #4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d008      	beq.n	8006100 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ee:	4b1b      	ldr	r3, [pc, #108]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	4918      	ldr	r1, [pc, #96]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d009      	beq.n	8006120 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800610c:	4b13      	ldr	r3, [pc, #76]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4910      	ldr	r1, [pc, #64]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 800611c:	4313      	orrs	r3, r2
 800611e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006120:	f000 f826 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 8006124:	4602      	mov	r2, r0
 8006126:	4b0d      	ldr	r3, [pc, #52]	@ (800615c <HAL_RCC_ClockConfig+0x260>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	091b      	lsrs	r3, r3, #4
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	490c      	ldr	r1, [pc, #48]	@ (8006164 <HAL_RCC_ClockConfig+0x268>)
 8006132:	5ccb      	ldrb	r3, [r1, r3]
 8006134:	f003 031f 	and.w	r3, r3, #31
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
 800613c:	4a0a      	ldr	r2, [pc, #40]	@ (8006168 <HAL_RCC_ClockConfig+0x26c>)
 800613e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006140:	4b0a      	ldr	r3, [pc, #40]	@ (800616c <HAL_RCC_ClockConfig+0x270>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4618      	mov	r0, r3
 8006146:	f7fb fe31 	bl	8001dac <HAL_InitTick>
 800614a:	4603      	mov	r3, r0
 800614c:	73fb      	strb	r3, [r7, #15]

  return status;
 800614e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40022000 	.word	0x40022000
 800615c:	40021000 	.word	0x40021000
 8006160:	04c4b400 	.word	0x04c4b400
 8006164:	0800c9f4 	.word	0x0800c9f4
 8006168:	20000000 	.word	0x20000000
 800616c:	20000004 	.word	0x20000004

08006170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006170:	b480      	push	{r7}
 8006172:	b089      	sub	sp, #36	@ 0x24
 8006174:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	61fb      	str	r3, [r7, #28]
 800617a:	2300      	movs	r3, #0
 800617c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800617e:	4b3e      	ldr	r3, [pc, #248]	@ (8006278 <HAL_RCC_GetSysClockFreq+0x108>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 030c 	and.w	r3, r3, #12
 8006186:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006188:	4b3b      	ldr	r3, [pc, #236]	@ (8006278 <HAL_RCC_GetSysClockFreq+0x108>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d005      	beq.n	80061a4 <HAL_RCC_GetSysClockFreq+0x34>
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2b0c      	cmp	r3, #12
 800619c:	d121      	bne.n	80061e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d11e      	bne.n	80061e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061a4:	4b34      	ldr	r3, [pc, #208]	@ (8006278 <HAL_RCC_GetSysClockFreq+0x108>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d107      	bne.n	80061c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061b0:	4b31      	ldr	r3, [pc, #196]	@ (8006278 <HAL_RCC_GetSysClockFreq+0x108>)
 80061b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	f003 030f 	and.w	r3, r3, #15
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	e005      	b.n	80061cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006278 <HAL_RCC_GetSysClockFreq+0x108>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061cc:	4a2b      	ldr	r2, [pc, #172]	@ (800627c <HAL_RCC_GetSysClockFreq+0x10c>)
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10d      	bne.n	80061f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061e0:	e00a      	b.n	80061f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d102      	bne.n	80061ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061e8:	4b25      	ldr	r3, [pc, #148]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x110>)
 80061ea:	61bb      	str	r3, [r7, #24]
 80061ec:	e004      	b.n	80061f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d101      	bne.n	80061f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061f4:	4b23      	ldr	r3, [pc, #140]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x114>)
 80061f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b0c      	cmp	r3, #12
 80061fc:	d134      	bne.n	8006268 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006278 <HAL_RCC_GetSysClockFreq+0x108>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d003      	beq.n	8006216 <HAL_RCC_GetSysClockFreq+0xa6>
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b03      	cmp	r3, #3
 8006212:	d003      	beq.n	800621c <HAL_RCC_GetSysClockFreq+0xac>
 8006214:	e005      	b.n	8006222 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006216:	4b1a      	ldr	r3, [pc, #104]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x110>)
 8006218:	617b      	str	r3, [r7, #20]
      break;
 800621a:	e005      	b.n	8006228 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800621c:	4b19      	ldr	r3, [pc, #100]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x114>)
 800621e:	617b      	str	r3, [r7, #20]
      break;
 8006220:	e002      	b.n	8006228 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	617b      	str	r3, [r7, #20]
      break;
 8006226:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006228:	4b13      	ldr	r3, [pc, #76]	@ (8006278 <HAL_RCC_GetSysClockFreq+0x108>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	091b      	lsrs	r3, r3, #4
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	3301      	adds	r3, #1
 8006234:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006236:	4b10      	ldr	r3, [pc, #64]	@ (8006278 <HAL_RCC_GetSysClockFreq+0x108>)
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	0a1b      	lsrs	r3, r3, #8
 800623c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	fb03 f202 	mul.w	r2, r3, r2
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	fbb2 f3f3 	udiv	r3, r2, r3
 800624c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800624e:	4b0a      	ldr	r3, [pc, #40]	@ (8006278 <HAL_RCC_GetSysClockFreq+0x108>)
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	0e5b      	lsrs	r3, r3, #25
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	3301      	adds	r3, #1
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	fbb2 f3f3 	udiv	r3, r2, r3
 8006266:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006268:	69bb      	ldr	r3, [r7, #24]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3724      	adds	r7, #36	@ 0x24
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40021000 	.word	0x40021000
 800627c:	0800ca0c 	.word	0x0800ca0c
 8006280:	00f42400 	.word	0x00f42400
 8006284:	007a1200 	.word	0x007a1200

08006288 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800628c:	4b03      	ldr	r3, [pc, #12]	@ (800629c <HAL_RCC_GetHCLKFreq+0x14>)
 800628e:	681b      	ldr	r3, [r3, #0]
}
 8006290:	4618      	mov	r0, r3
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	20000000 	.word	0x20000000

080062a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062a4:	f7ff fff0 	bl	8006288 <HAL_RCC_GetHCLKFreq>
 80062a8:	4602      	mov	r2, r0
 80062aa:	4b06      	ldr	r3, [pc, #24]	@ (80062c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	0a1b      	lsrs	r3, r3, #8
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	4904      	ldr	r1, [pc, #16]	@ (80062c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062b6:	5ccb      	ldrb	r3, [r1, r3]
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	40021000 	.word	0x40021000
 80062c8:	0800ca04 	.word	0x0800ca04

080062cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062d0:	f7ff ffda 	bl	8006288 <HAL_RCC_GetHCLKFreq>
 80062d4:	4602      	mov	r2, r0
 80062d6:	4b06      	ldr	r3, [pc, #24]	@ (80062f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	0adb      	lsrs	r3, r3, #11
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	4904      	ldr	r1, [pc, #16]	@ (80062f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062e2:	5ccb      	ldrb	r3, [r1, r3]
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40021000 	.word	0x40021000
 80062f4:	0800ca04 	.word	0x0800ca04

080062f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006300:	2300      	movs	r3, #0
 8006302:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006304:	4b27      	ldr	r3, [pc, #156]	@ (80063a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006310:	f7ff f8f6 	bl	8005500 <HAL_PWREx_GetVoltageRange>
 8006314:	6178      	str	r0, [r7, #20]
 8006316:	e014      	b.n	8006342 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006318:	4b22      	ldr	r3, [pc, #136]	@ (80063a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800631a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800631c:	4a21      	ldr	r2, [pc, #132]	@ (80063a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800631e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006322:	6593      	str	r3, [r2, #88]	@ 0x58
 8006324:	4b1f      	ldr	r3, [pc, #124]	@ (80063a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006330:	f7ff f8e6 	bl	8005500 <HAL_PWREx_GetVoltageRange>
 8006334:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006336:	4b1b      	ldr	r3, [pc, #108]	@ (80063a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800633a:	4a1a      	ldr	r2, [pc, #104]	@ (80063a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800633c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006340:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006348:	d10b      	bne.n	8006362 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b80      	cmp	r3, #128	@ 0x80
 800634e:	d913      	bls.n	8006378 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2ba0      	cmp	r3, #160	@ 0xa0
 8006354:	d902      	bls.n	800635c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006356:	2302      	movs	r3, #2
 8006358:	613b      	str	r3, [r7, #16]
 800635a:	e00d      	b.n	8006378 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800635c:	2301      	movs	r3, #1
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	e00a      	b.n	8006378 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b7f      	cmp	r3, #127	@ 0x7f
 8006366:	d902      	bls.n	800636e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006368:	2302      	movs	r3, #2
 800636a:	613b      	str	r3, [r7, #16]
 800636c:	e004      	b.n	8006378 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b70      	cmp	r3, #112	@ 0x70
 8006372:	d101      	bne.n	8006378 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006374:	2301      	movs	r3, #1
 8006376:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006378:	4b0b      	ldr	r3, [pc, #44]	@ (80063a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f023 020f 	bic.w	r2, r3, #15
 8006380:	4909      	ldr	r1, [pc, #36]	@ (80063a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006388:	4b07      	ldr	r3, [pc, #28]	@ (80063a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 030f 	and.w	r3, r3, #15
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	429a      	cmp	r2, r3
 8006394:	d001      	beq.n	800639a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	40021000 	.word	0x40021000
 80063a8:	40022000 	.word	0x40022000

080063ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006468 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f003 0303 	and.w	r3, r3, #3
 80063ba:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d00b      	beq.n	80063da <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d825      	bhi.n	8006414 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d008      	beq.n	80063e0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d11f      	bne.n	8006414 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80063d4:	4b25      	ldr	r3, [pc, #148]	@ (800646c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80063d6:	613b      	str	r3, [r7, #16]
    break;
 80063d8:	e01f      	b.n	800641a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80063da:	4b25      	ldr	r3, [pc, #148]	@ (8006470 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80063dc:	613b      	str	r3, [r7, #16]
    break;
 80063de:	e01c      	b.n	800641a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80063e0:	4b21      	ldr	r3, [pc, #132]	@ (8006468 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d107      	bne.n	80063fc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80063ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006468 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063f2:	0a1b      	lsrs	r3, r3, #8
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	617b      	str	r3, [r7, #20]
 80063fa:	e005      	b.n	8006408 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80063fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006468 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	091b      	lsrs	r3, r3, #4
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006408:	4a1a      	ldr	r2, [pc, #104]	@ (8006474 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006410:	613b      	str	r3, [r7, #16]
    break;
 8006412:	e002      	b.n	800641a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]
    break;
 8006418:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800641a:	4b13      	ldr	r3, [pc, #76]	@ (8006468 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	091b      	lsrs	r3, r3, #4
 8006420:	f003 030f 	and.w	r3, r3, #15
 8006424:	3301      	adds	r3, #1
 8006426:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006428:	4b0f      	ldr	r3, [pc, #60]	@ (8006468 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	0a1b      	lsrs	r3, r3, #8
 800642e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	fb03 f202 	mul.w	r2, r3, r2
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	fbb2 f3f3 	udiv	r3, r2, r3
 800643e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006440:	4b09      	ldr	r3, [pc, #36]	@ (8006468 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	0e5b      	lsrs	r3, r3, #25
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	3301      	adds	r3, #1
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	fbb2 f3f3 	udiv	r3, r2, r3
 8006458:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800645a:	683b      	ldr	r3, [r7, #0]
}
 800645c:	4618      	mov	r0, r3
 800645e:	371c      	adds	r7, #28
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	40021000 	.word	0x40021000
 800646c:	00f42400 	.word	0x00f42400
 8006470:	007a1200 	.word	0x007a1200
 8006474:	0800ca0c 	.word	0x0800ca0c

08006478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006480:	2300      	movs	r3, #0
 8006482:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006484:	2300      	movs	r3, #0
 8006486:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006490:	2b00      	cmp	r3, #0
 8006492:	d040      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006498:	2b80      	cmp	r3, #128	@ 0x80
 800649a:	d02a      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800649c:	2b80      	cmp	r3, #128	@ 0x80
 800649e:	d825      	bhi.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80064a0:	2b60      	cmp	r3, #96	@ 0x60
 80064a2:	d026      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80064a4:	2b60      	cmp	r3, #96	@ 0x60
 80064a6:	d821      	bhi.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80064a8:	2b40      	cmp	r3, #64	@ 0x40
 80064aa:	d006      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x42>
 80064ac:	2b40      	cmp	r3, #64	@ 0x40
 80064ae:	d81d      	bhi.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d009      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80064b4:	2b20      	cmp	r3, #32
 80064b6:	d010      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x62>
 80064b8:	e018      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80064ba:	4b89      	ldr	r3, [pc, #548]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	4a88      	ldr	r2, [pc, #544]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064c4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064c6:	e015      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3304      	adds	r3, #4
 80064cc:	2100      	movs	r1, #0
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fb02 	bl	8006ad8 <RCCEx_PLLSAI1_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064d8:	e00c      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3320      	adds	r3, #32
 80064de:	2100      	movs	r1, #0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fbed 	bl	8006cc0 <RCCEx_PLLSAI2_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064ea:	e003      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	74fb      	strb	r3, [r7, #19]
      break;
 80064f0:	e000      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80064f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064f4:	7cfb      	ldrb	r3, [r7, #19]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064fa:	4b79      	ldr	r3, [pc, #484]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006500:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006508:	4975      	ldr	r1, [pc, #468]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006510:	e001      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006512:	7cfb      	ldrb	r3, [r7, #19]
 8006514:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d047      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800652a:	d030      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800652c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006530:	d82a      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006536:	d02a      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800653c:	d824      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800653e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006542:	d008      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006548:	d81e      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800654e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006552:	d010      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006554:	e018      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006556:	4b62      	ldr	r3, [pc, #392]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	4a61      	ldr	r2, [pc, #388]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800655c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006560:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006562:	e015      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3304      	adds	r3, #4
 8006568:	2100      	movs	r1, #0
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fab4 	bl	8006ad8 <RCCEx_PLLSAI1_Config>
 8006570:	4603      	mov	r3, r0
 8006572:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006574:	e00c      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3320      	adds	r3, #32
 800657a:	2100      	movs	r1, #0
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fb9f 	bl	8006cc0 <RCCEx_PLLSAI2_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006586:	e003      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	74fb      	strb	r3, [r7, #19]
      break;
 800658c:	e000      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800658e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006590:	7cfb      	ldrb	r3, [r7, #19]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10b      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006596:	4b52      	ldr	r3, [pc, #328]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006598:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800659c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a4:	494e      	ldr	r1, [pc, #312]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80065ac:	e001      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ae:	7cfb      	ldrb	r3, [r7, #19]
 80065b0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 809f 	beq.w	80066fe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065c0:	2300      	movs	r3, #0
 80065c2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065c4:	4b46      	ldr	r3, [pc, #280]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80065d4:	2300      	movs	r3, #0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00d      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065da:	4b41      	ldr	r3, [pc, #260]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065de:	4a40      	ldr	r2, [pc, #256]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80065e6:	4b3e      	ldr	r3, [pc, #248]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ee:	60bb      	str	r3, [r7, #8]
 80065f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065f2:	2301      	movs	r3, #1
 80065f4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065f6:	4b3b      	ldr	r3, [pc, #236]	@ (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a3a      	ldr	r2, [pc, #232]	@ (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80065fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006600:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006602:	f7fb fc23 	bl	8001e4c <HAL_GetTick>
 8006606:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006608:	e009      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800660a:	f7fb fc1f 	bl	8001e4c <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d902      	bls.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	74fb      	strb	r3, [r7, #19]
        break;
 800661c:	e005      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800661e:	4b31      	ldr	r3, [pc, #196]	@ (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0ef      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800662a:	7cfb      	ldrb	r3, [r7, #19]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d15b      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006630:	4b2b      	ldr	r3, [pc, #172]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800663a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d01f      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	429a      	cmp	r2, r3
 800664c:	d019      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800664e:	4b24      	ldr	r3, [pc, #144]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006654:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006658:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800665a:	4b21      	ldr	r3, [pc, #132]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006660:	4a1f      	ldr	r2, [pc, #124]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006666:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800666a:	4b1d      	ldr	r3, [pc, #116]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800666c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006670:	4a1b      	ldr	r2, [pc, #108]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006676:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800667a:	4a19      	ldr	r2, [pc, #100]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d016      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668c:	f7fb fbde 	bl	8001e4c <HAL_GetTick>
 8006690:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006692:	e00b      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006694:	f7fb fbda 	bl	8001e4c <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d902      	bls.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	74fb      	strb	r3, [r7, #19]
            break;
 80066aa:	e006      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ac:	4b0c      	ldr	r3, [pc, #48]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0ec      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80066ba:	7cfb      	ldrb	r3, [r7, #19]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10c      	bne.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066c0:	4b07      	ldr	r3, [pc, #28]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066d0:	4903      	ldr	r1, [pc, #12]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80066d8:	e008      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066da:	7cfb      	ldrb	r3, [r7, #19]
 80066dc:	74bb      	strb	r3, [r7, #18]
 80066de:	e005      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x274>
 80066e0:	40021000 	.word	0x40021000
 80066e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e8:	7cfb      	ldrb	r3, [r7, #19]
 80066ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066ec:	7c7b      	ldrb	r3, [r7, #17]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d105      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066f2:	4ba0      	ldr	r3, [pc, #640]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f6:	4a9f      	ldr	r2, [pc, #636]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800670a:	4b9a      	ldr	r3, [pc, #616]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800670c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006710:	f023 0203 	bic.w	r2, r3, #3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006718:	4996      	ldr	r1, [pc, #600]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800672c:	4b91      	ldr	r3, [pc, #580]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800672e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006732:	f023 020c 	bic.w	r2, r3, #12
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673a:	498e      	ldr	r1, [pc, #568]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800673c:	4313      	orrs	r3, r2
 800673e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800674e:	4b89      	ldr	r3, [pc, #548]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006754:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800675c:	4985      	ldr	r1, [pc, #532]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800675e:	4313      	orrs	r3, r2
 8006760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006770:	4b80      	ldr	r3, [pc, #512]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006776:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800677e:	497d      	ldr	r1, [pc, #500]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006792:	4b78      	ldr	r3, [pc, #480]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006798:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067a0:	4974      	ldr	r1, [pc, #464]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0320 	and.w	r3, r3, #32
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067b4:	4b6f      	ldr	r3, [pc, #444]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067c2:	496c      	ldr	r1, [pc, #432]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067d6:	4b67      	ldr	r3, [pc, #412]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067e4:	4963      	ldr	r1, [pc, #396]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067f8:	4b5e      	ldr	r3, [pc, #376]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006806:	495b      	ldr	r1, [pc, #364]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006808:	4313      	orrs	r3, r2
 800680a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800681a:	4b56      	ldr	r3, [pc, #344]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800681c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006820:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006828:	4952      	ldr	r1, [pc, #328]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00a      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800683c:	4b4d      	ldr	r3, [pc, #308]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006842:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800684a:	494a      	ldr	r1, [pc, #296]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800685e:	4b45      	ldr	r3, [pc, #276]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006864:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800686c:	4941      	ldr	r1, [pc, #260]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00a      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006880:	4b3c      	ldr	r3, [pc, #240]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006882:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006886:	f023 0203 	bic.w	r2, r3, #3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800688e:	4939      	ldr	r1, [pc, #228]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006890:	4313      	orrs	r3, r2
 8006892:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d028      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068a2:	4b34      	ldr	r3, [pc, #208]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068b0:	4930      	ldr	r1, [pc, #192]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068c0:	d106      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068c2:	4b2c      	ldr	r3, [pc, #176]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	4a2b      	ldr	r2, [pc, #172]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068cc:	60d3      	str	r3, [r2, #12]
 80068ce:	e011      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068d8:	d10c      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	3304      	adds	r3, #4
 80068de:	2101      	movs	r1, #1
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 f8f9 	bl	8006ad8 <RCCEx_PLLSAI1_Config>
 80068e6:	4603      	mov	r3, r0
 80068e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80068ea:	7cfb      	ldrb	r3, [r7, #19]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80068f0:	7cfb      	ldrb	r3, [r7, #19]
 80068f2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d04d      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006904:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006908:	d108      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800690a:	4b1a      	ldr	r3, [pc, #104]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800690c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006910:	4a18      	ldr	r2, [pc, #96]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006912:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006916:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800691a:	e012      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800691c:	4b15      	ldr	r3, [pc, #84]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800691e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006922:	4a14      	ldr	r2, [pc, #80]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006924:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006928:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800692c:	4b11      	ldr	r3, [pc, #68]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800692e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006932:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800693a:	490e      	ldr	r1, [pc, #56]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800693c:	4313      	orrs	r3, r2
 800693e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006946:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800694a:	d106      	bne.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800694c:	4b09      	ldr	r3, [pc, #36]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	4a08      	ldr	r2, [pc, #32]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006952:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006956:	60d3      	str	r3, [r2, #12]
 8006958:	e020      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800695e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006962:	d109      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006964:	4b03      	ldr	r3, [pc, #12]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	4a02      	ldr	r2, [pc, #8]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800696a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800696e:	60d3      	str	r3, [r2, #12]
 8006970:	e014      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006972:	bf00      	nop
 8006974:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800697c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006980:	d10c      	bne.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3304      	adds	r3, #4
 8006986:	2101      	movs	r1, #1
 8006988:	4618      	mov	r0, r3
 800698a:	f000 f8a5 	bl	8006ad8 <RCCEx_PLLSAI1_Config>
 800698e:	4603      	mov	r3, r0
 8006990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006992:	7cfb      	ldrb	r3, [r7, #19]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006998:	7cfb      	ldrb	r3, [r7, #19]
 800699a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d028      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069a8:	4b4a      	ldr	r3, [pc, #296]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069b6:	4947      	ldr	r1, [pc, #284]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069c6:	d106      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069c8:	4b42      	ldr	r3, [pc, #264]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	4a41      	ldr	r2, [pc, #260]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069d2:	60d3      	str	r3, [r2, #12]
 80069d4:	e011      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069de:	d10c      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3304      	adds	r3, #4
 80069e4:	2101      	movs	r1, #1
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f876 	bl	8006ad8 <RCCEx_PLLSAI1_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069f0:	7cfb      	ldrb	r3, [r7, #19]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80069f6:	7cfb      	ldrb	r3, [r7, #19]
 80069f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d01e      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a06:	4b33      	ldr	r3, [pc, #204]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a0c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a16:	492f      	ldr	r1, [pc, #188]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a28:	d10c      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	2102      	movs	r1, #2
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 f851 	bl	8006ad8 <RCCEx_PLLSAI1_Config>
 8006a36:	4603      	mov	r3, r0
 8006a38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a3a:	7cfb      	ldrb	r3, [r7, #19]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006a40:	7cfb      	ldrb	r3, [r7, #19]
 8006a42:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00b      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a50:	4b20      	ldr	r3, [pc, #128]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a56:	f023 0204 	bic.w	r2, r3, #4
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a60:	491c      	ldr	r1, [pc, #112]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006a74:	4b17      	ldr	r3, [pc, #92]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a7a:	f023 0218 	bic.w	r2, r3, #24
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a84:	4913      	ldr	r1, [pc, #76]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d017      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006a98:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006aa8:	490a      	ldr	r1, [pc, #40]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ab6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006aba:	d105      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006abc:	4b05      	ldr	r3, [pc, #20]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	4a04      	ldr	r2, [pc, #16]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ac6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006ac8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40021000 	.word	0x40021000

08006ad8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ae6:	4b72      	ldr	r3, [pc, #456]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00e      	beq.n	8006b10 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006af2:	4b6f      	ldr	r3, [pc, #444]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f003 0203 	and.w	r2, r3, #3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d103      	bne.n	8006b0a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
       ||
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d142      	bne.n	8006b90 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	73fb      	strb	r3, [r7, #15]
 8006b0e:	e03f      	b.n	8006b90 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d018      	beq.n	8006b4a <RCCEx_PLLSAI1_Config+0x72>
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d825      	bhi.n	8006b68 <RCCEx_PLLSAI1_Config+0x90>
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d002      	beq.n	8006b26 <RCCEx_PLLSAI1_Config+0x4e>
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d009      	beq.n	8006b38 <RCCEx_PLLSAI1_Config+0x60>
 8006b24:	e020      	b.n	8006b68 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b26:	4b62      	ldr	r3, [pc, #392]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d11d      	bne.n	8006b6e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b36:	e01a      	b.n	8006b6e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b38:	4b5d      	ldr	r3, [pc, #372]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d116      	bne.n	8006b72 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b48:	e013      	b.n	8006b72 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b4a:	4b59      	ldr	r3, [pc, #356]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10f      	bne.n	8006b76 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b56:	4b56      	ldr	r3, [pc, #344]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b66:	e006      	b.n	8006b76 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b6c:	e004      	b.n	8006b78 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b6e:	bf00      	nop
 8006b70:	e002      	b.n	8006b78 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b72:	bf00      	nop
 8006b74:	e000      	b.n	8006b78 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b76:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d108      	bne.n	8006b90 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006b7e:	4b4c      	ldr	r3, [pc, #304]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f023 0203 	bic.w	r2, r3, #3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4949      	ldr	r1, [pc, #292]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f040 8086 	bne.w	8006ca4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b98:	4b45      	ldr	r3, [pc, #276]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a44      	ldr	r2, [pc, #272]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba4:	f7fb f952 	bl	8001e4c <HAL_GetTick>
 8006ba8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006baa:	e009      	b.n	8006bc0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bac:	f7fb f94e 	bl	8001e4c <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d902      	bls.n	8006bc0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	73fb      	strb	r3, [r7, #15]
        break;
 8006bbe:	e005      	b.n	8006bcc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1ef      	bne.n	8006bac <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d168      	bne.n	8006ca4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d113      	bne.n	8006c00 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bd8:	4b35      	ldr	r3, [pc, #212]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	4b35      	ldr	r3, [pc, #212]	@ (8006cb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006bde:	4013      	ands	r3, r2
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	6892      	ldr	r2, [r2, #8]
 8006be4:	0211      	lsls	r1, r2, #8
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	68d2      	ldr	r2, [r2, #12]
 8006bea:	06d2      	lsls	r2, r2, #27
 8006bec:	4311      	orrs	r1, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6852      	ldr	r2, [r2, #4]
 8006bf2:	3a01      	subs	r2, #1
 8006bf4:	0112      	lsls	r2, r2, #4
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	492d      	ldr	r1, [pc, #180]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	610b      	str	r3, [r1, #16]
 8006bfe:	e02d      	b.n	8006c5c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d115      	bne.n	8006c32 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c06:	4b2a      	ldr	r3, [pc, #168]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	6892      	ldr	r2, [r2, #8]
 8006c12:	0211      	lsls	r1, r2, #8
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6912      	ldr	r2, [r2, #16]
 8006c18:	0852      	lsrs	r2, r2, #1
 8006c1a:	3a01      	subs	r2, #1
 8006c1c:	0552      	lsls	r2, r2, #21
 8006c1e:	4311      	orrs	r1, r2
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6852      	ldr	r2, [r2, #4]
 8006c24:	3a01      	subs	r2, #1
 8006c26:	0112      	lsls	r2, r2, #4
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	4921      	ldr	r1, [pc, #132]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	610b      	str	r3, [r1, #16]
 8006c30:	e014      	b.n	8006c5c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c32:	4b1f      	ldr	r3, [pc, #124]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c34:	691a      	ldr	r2, [r3, #16]
 8006c36:	4b21      	ldr	r3, [pc, #132]	@ (8006cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c38:	4013      	ands	r3, r2
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	6892      	ldr	r2, [r2, #8]
 8006c3e:	0211      	lsls	r1, r2, #8
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6952      	ldr	r2, [r2, #20]
 8006c44:	0852      	lsrs	r2, r2, #1
 8006c46:	3a01      	subs	r2, #1
 8006c48:	0652      	lsls	r2, r2, #25
 8006c4a:	4311      	orrs	r1, r2
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	6852      	ldr	r2, [r2, #4]
 8006c50:	3a01      	subs	r2, #1
 8006c52:	0112      	lsls	r2, r2, #4
 8006c54:	430a      	orrs	r2, r1
 8006c56:	4916      	ldr	r1, [pc, #88]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006c5c:	4b14      	ldr	r3, [pc, #80]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a13      	ldr	r2, [pc, #76]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c68:	f7fb f8f0 	bl	8001e4c <HAL_GetTick>
 8006c6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c6e:	e009      	b.n	8006c84 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c70:	f7fb f8ec 	bl	8001e4c <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d902      	bls.n	8006c84 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	73fb      	strb	r3, [r7, #15]
          break;
 8006c82:	e005      	b.n	8006c90 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c84:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0ef      	beq.n	8006c70 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d106      	bne.n	8006ca4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006c96:	4b06      	ldr	r3, [pc, #24]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c98:	691a      	ldr	r2, [r3, #16]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	4904      	ldr	r1, [pc, #16]	@ (8006cb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	07ff800f 	.word	0x07ff800f
 8006cb8:	ff9f800f 	.word	0xff9f800f
 8006cbc:	f9ff800f 	.word	0xf9ff800f

08006cc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006cce:	4b72      	ldr	r3, [pc, #456]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00e      	beq.n	8006cf8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006cda:	4b6f      	ldr	r3, [pc, #444]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f003 0203 	and.w	r2, r3, #3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d103      	bne.n	8006cf2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
       ||
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d142      	bne.n	8006d78 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	73fb      	strb	r3, [r7, #15]
 8006cf6:	e03f      	b.n	8006d78 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d018      	beq.n	8006d32 <RCCEx_PLLSAI2_Config+0x72>
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d825      	bhi.n	8006d50 <RCCEx_PLLSAI2_Config+0x90>
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d002      	beq.n	8006d0e <RCCEx_PLLSAI2_Config+0x4e>
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d009      	beq.n	8006d20 <RCCEx_PLLSAI2_Config+0x60>
 8006d0c:	e020      	b.n	8006d50 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d0e:	4b62      	ldr	r3, [pc, #392]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d11d      	bne.n	8006d56 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d1e:	e01a      	b.n	8006d56 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d20:	4b5d      	ldr	r3, [pc, #372]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d116      	bne.n	8006d5a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d30:	e013      	b.n	8006d5a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d32:	4b59      	ldr	r3, [pc, #356]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10f      	bne.n	8006d5e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d3e:	4b56      	ldr	r3, [pc, #344]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d109      	bne.n	8006d5e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d4e:	e006      	b.n	8006d5e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	73fb      	strb	r3, [r7, #15]
      break;
 8006d54:	e004      	b.n	8006d60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d56:	bf00      	nop
 8006d58:	e002      	b.n	8006d60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d5a:	bf00      	nop
 8006d5c:	e000      	b.n	8006d60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d108      	bne.n	8006d78 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006d66:	4b4c      	ldr	r3, [pc, #304]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f023 0203 	bic.w	r2, r3, #3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4949      	ldr	r1, [pc, #292]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f040 8086 	bne.w	8006e8c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006d80:	4b45      	ldr	r3, [pc, #276]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a44      	ldr	r2, [pc, #272]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d8c:	f7fb f85e 	bl	8001e4c <HAL_GetTick>
 8006d90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d92:	e009      	b.n	8006da8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d94:	f7fb f85a 	bl	8001e4c <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d902      	bls.n	8006da8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	73fb      	strb	r3, [r7, #15]
        break;
 8006da6:	e005      	b.n	8006db4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006da8:	4b3b      	ldr	r3, [pc, #236]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1ef      	bne.n	8006d94 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d168      	bne.n	8006e8c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d113      	bne.n	8006de8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006dc0:	4b35      	ldr	r3, [pc, #212]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dc2:	695a      	ldr	r2, [r3, #20]
 8006dc4:	4b35      	ldr	r3, [pc, #212]	@ (8006e9c <RCCEx_PLLSAI2_Config+0x1dc>)
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	6892      	ldr	r2, [r2, #8]
 8006dcc:	0211      	lsls	r1, r2, #8
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	68d2      	ldr	r2, [r2, #12]
 8006dd2:	06d2      	lsls	r2, r2, #27
 8006dd4:	4311      	orrs	r1, r2
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6852      	ldr	r2, [r2, #4]
 8006dda:	3a01      	subs	r2, #1
 8006ddc:	0112      	lsls	r2, r2, #4
 8006dde:	430a      	orrs	r2, r1
 8006de0:	492d      	ldr	r1, [pc, #180]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	614b      	str	r3, [r1, #20]
 8006de6:	e02d      	b.n	8006e44 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d115      	bne.n	8006e1a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006dee:	4b2a      	ldr	r3, [pc, #168]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006df0:	695a      	ldr	r2, [r3, #20]
 8006df2:	4b2b      	ldr	r3, [pc, #172]	@ (8006ea0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006df4:	4013      	ands	r3, r2
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	6892      	ldr	r2, [r2, #8]
 8006dfa:	0211      	lsls	r1, r2, #8
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	6912      	ldr	r2, [r2, #16]
 8006e00:	0852      	lsrs	r2, r2, #1
 8006e02:	3a01      	subs	r2, #1
 8006e04:	0552      	lsls	r2, r2, #21
 8006e06:	4311      	orrs	r1, r2
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6852      	ldr	r2, [r2, #4]
 8006e0c:	3a01      	subs	r2, #1
 8006e0e:	0112      	lsls	r2, r2, #4
 8006e10:	430a      	orrs	r2, r1
 8006e12:	4921      	ldr	r1, [pc, #132]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	614b      	str	r3, [r1, #20]
 8006e18:	e014      	b.n	8006e44 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e1c:	695a      	ldr	r2, [r3, #20]
 8006e1e:	4b21      	ldr	r3, [pc, #132]	@ (8006ea4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6892      	ldr	r2, [r2, #8]
 8006e26:	0211      	lsls	r1, r2, #8
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6952      	ldr	r2, [r2, #20]
 8006e2c:	0852      	lsrs	r2, r2, #1
 8006e2e:	3a01      	subs	r2, #1
 8006e30:	0652      	lsls	r2, r2, #25
 8006e32:	4311      	orrs	r1, r2
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6852      	ldr	r2, [r2, #4]
 8006e38:	3a01      	subs	r2, #1
 8006e3a:	0112      	lsls	r2, r2, #4
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	4916      	ldr	r1, [pc, #88]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006e44:	4b14      	ldr	r3, [pc, #80]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a13      	ldr	r2, [pc, #76]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e50:	f7fa fffc 	bl	8001e4c <HAL_GetTick>
 8006e54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e56:	e009      	b.n	8006e6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e58:	f7fa fff8 	bl	8001e4c <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d902      	bls.n	8006e6c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	73fb      	strb	r3, [r7, #15]
          break;
 8006e6a:	e005      	b.n	8006e78 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0ef      	beq.n	8006e58 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d106      	bne.n	8006e8c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006e7e:	4b06      	ldr	r3, [pc, #24]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e80:	695a      	ldr	r2, [r3, #20]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	4904      	ldr	r1, [pc, #16]	@ (8006e98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40021000 	.word	0x40021000
 8006e9c:	07ff800f 	.word	0x07ff800f
 8006ea0:	ff9f800f 	.word	0xff9f800f
 8006ea4:	f9ff800f 	.word	0xf9ff800f

08006ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e049      	b.n	8006f4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d106      	bne.n	8006ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7fa fd94 	bl	80019fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	f000 fb02 	bl	80074f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d001      	beq.n	8006f70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e047      	b.n	8007000 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a23      	ldr	r2, [pc, #140]	@ (800700c <HAL_TIM_Base_Start+0xb4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d01d      	beq.n	8006fbe <HAL_TIM_Base_Start+0x66>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f8a:	d018      	beq.n	8006fbe <HAL_TIM_Base_Start+0x66>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a1f      	ldr	r2, [pc, #124]	@ (8007010 <HAL_TIM_Base_Start+0xb8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d013      	beq.n	8006fbe <HAL_TIM_Base_Start+0x66>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8007014 <HAL_TIM_Base_Start+0xbc>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00e      	beq.n	8006fbe <HAL_TIM_Base_Start+0x66>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8007018 <HAL_TIM_Base_Start+0xc0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d009      	beq.n	8006fbe <HAL_TIM_Base_Start+0x66>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1b      	ldr	r2, [pc, #108]	@ (800701c <HAL_TIM_Base_Start+0xc4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d004      	beq.n	8006fbe <HAL_TIM_Base_Start+0x66>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a19      	ldr	r2, [pc, #100]	@ (8007020 <HAL_TIM_Base_Start+0xc8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d115      	bne.n	8006fea <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	4b17      	ldr	r3, [pc, #92]	@ (8007024 <HAL_TIM_Base_Start+0xcc>)
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b06      	cmp	r3, #6
 8006fce:	d015      	beq.n	8006ffc <HAL_TIM_Base_Start+0xa4>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fd6:	d011      	beq.n	8006ffc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe8:	e008      	b.n	8006ffc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0201 	orr.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	e000      	b.n	8006ffe <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	40012c00 	.word	0x40012c00
 8007010:	40000400 	.word	0x40000400
 8007014:	40000800 	.word	0x40000800
 8007018:	40000c00 	.word	0x40000c00
 800701c:	40013400 	.word	0x40013400
 8007020:	40014000 	.word	0x40014000
 8007024:	00010007 	.word	0x00010007

08007028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b01      	cmp	r3, #1
 800703a:	d001      	beq.n	8007040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e04f      	b.n	80070e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0201 	orr.w	r2, r2, #1
 8007056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a23      	ldr	r2, [pc, #140]	@ (80070ec <HAL_TIM_Base_Start_IT+0xc4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d01d      	beq.n	800709e <HAL_TIM_Base_Start_IT+0x76>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800706a:	d018      	beq.n	800709e <HAL_TIM_Base_Start_IT+0x76>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1f      	ldr	r2, [pc, #124]	@ (80070f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d013      	beq.n	800709e <HAL_TIM_Base_Start_IT+0x76>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1e      	ldr	r2, [pc, #120]	@ (80070f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00e      	beq.n	800709e <HAL_TIM_Base_Start_IT+0x76>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1c      	ldr	r2, [pc, #112]	@ (80070f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d009      	beq.n	800709e <HAL_TIM_Base_Start_IT+0x76>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a1b      	ldr	r2, [pc, #108]	@ (80070fc <HAL_TIM_Base_Start_IT+0xd4>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d004      	beq.n	800709e <HAL_TIM_Base_Start_IT+0x76>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a19      	ldr	r2, [pc, #100]	@ (8007100 <HAL_TIM_Base_Start_IT+0xd8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d115      	bne.n	80070ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	4b17      	ldr	r3, [pc, #92]	@ (8007104 <HAL_TIM_Base_Start_IT+0xdc>)
 80070a6:	4013      	ands	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b06      	cmp	r3, #6
 80070ae:	d015      	beq.n	80070dc <HAL_TIM_Base_Start_IT+0xb4>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070b6:	d011      	beq.n	80070dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c8:	e008      	b.n	80070dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f042 0201 	orr.w	r2, r2, #1
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	e000      	b.n	80070de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	40012c00 	.word	0x40012c00
 80070f0:	40000400 	.word	0x40000400
 80070f4:	40000800 	.word	0x40000800
 80070f8:	40000c00 	.word	0x40000c00
 80070fc:	40013400 	.word	0x40013400
 8007100:	40014000 	.word	0x40014000
 8007104:	00010007 	.word	0x00010007

08007108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d020      	beq.n	800716c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01b      	beq.n	800716c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f06f 0202 	mvn.w	r2, #2
 800713c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f9ad 	bl	80074b2 <HAL_TIM_IC_CaptureCallback>
 8007158:	e005      	b.n	8007166 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f99f 	bl	800749e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f9b0 	bl	80074c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b00      	cmp	r3, #0
 8007174:	d020      	beq.n	80071b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d01b      	beq.n	80071b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f06f 0204 	mvn.w	r2, #4
 8007188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2202      	movs	r2, #2
 800718e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f987 	bl	80074b2 <HAL_TIM_IC_CaptureCallback>
 80071a4:	e005      	b.n	80071b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f979 	bl	800749e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f98a 	bl	80074c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f003 0308 	and.w	r3, r3, #8
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d020      	beq.n	8007204 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f003 0308 	and.w	r3, r3, #8
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d01b      	beq.n	8007204 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f06f 0208 	mvn.w	r2, #8
 80071d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2204      	movs	r2, #4
 80071da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f961 	bl	80074b2 <HAL_TIM_IC_CaptureCallback>
 80071f0:	e005      	b.n	80071fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f953 	bl	800749e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f964 	bl	80074c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f003 0310 	and.w	r3, r3, #16
 800720a:	2b00      	cmp	r3, #0
 800720c:	d020      	beq.n	8007250 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f003 0310 	and.w	r3, r3, #16
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01b      	beq.n	8007250 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f06f 0210 	mvn.w	r2, #16
 8007220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2208      	movs	r2, #8
 8007226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f93b 	bl	80074b2 <HAL_TIM_IC_CaptureCallback>
 800723c:	e005      	b.n	800724a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f92d 	bl	800749e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f93e 	bl	80074c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00c      	beq.n	8007274 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f06f 0201 	mvn.w	r2, #1
 800726c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7f9 ffae 	bl	80011d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00c      	beq.n	8007298 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007284:	2b00      	cmp	r3, #0
 8007286:	d007      	beq.n	8007298 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 faf2 	bl	800787c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00c      	beq.n	80072bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d007      	beq.n	80072bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80072b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 faea 	bl	8007890 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00c      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d007      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80072d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f8fd 	bl	80074da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f003 0320 	and.w	r3, r3, #32
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00c      	beq.n	8007304 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d007      	beq.n	8007304 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f06f 0220 	mvn.w	r2, #32
 80072fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fab2 	bl	8007868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007304:	bf00      	nop
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_TIM_ConfigClockSource+0x1c>
 8007324:	2302      	movs	r3, #2
 8007326:	e0b6      	b.n	8007496 <HAL_TIM_ConfigClockSource+0x18a>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007346:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800734a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007364:	d03e      	beq.n	80073e4 <HAL_TIM_ConfigClockSource+0xd8>
 8007366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800736a:	f200 8087 	bhi.w	800747c <HAL_TIM_ConfigClockSource+0x170>
 800736e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007372:	f000 8086 	beq.w	8007482 <HAL_TIM_ConfigClockSource+0x176>
 8007376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800737a:	d87f      	bhi.n	800747c <HAL_TIM_ConfigClockSource+0x170>
 800737c:	2b70      	cmp	r3, #112	@ 0x70
 800737e:	d01a      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0xaa>
 8007380:	2b70      	cmp	r3, #112	@ 0x70
 8007382:	d87b      	bhi.n	800747c <HAL_TIM_ConfigClockSource+0x170>
 8007384:	2b60      	cmp	r3, #96	@ 0x60
 8007386:	d050      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x11e>
 8007388:	2b60      	cmp	r3, #96	@ 0x60
 800738a:	d877      	bhi.n	800747c <HAL_TIM_ConfigClockSource+0x170>
 800738c:	2b50      	cmp	r3, #80	@ 0x50
 800738e:	d03c      	beq.n	800740a <HAL_TIM_ConfigClockSource+0xfe>
 8007390:	2b50      	cmp	r3, #80	@ 0x50
 8007392:	d873      	bhi.n	800747c <HAL_TIM_ConfigClockSource+0x170>
 8007394:	2b40      	cmp	r3, #64	@ 0x40
 8007396:	d058      	beq.n	800744a <HAL_TIM_ConfigClockSource+0x13e>
 8007398:	2b40      	cmp	r3, #64	@ 0x40
 800739a:	d86f      	bhi.n	800747c <HAL_TIM_ConfigClockSource+0x170>
 800739c:	2b30      	cmp	r3, #48	@ 0x30
 800739e:	d064      	beq.n	800746a <HAL_TIM_ConfigClockSource+0x15e>
 80073a0:	2b30      	cmp	r3, #48	@ 0x30
 80073a2:	d86b      	bhi.n	800747c <HAL_TIM_ConfigClockSource+0x170>
 80073a4:	2b20      	cmp	r3, #32
 80073a6:	d060      	beq.n	800746a <HAL_TIM_ConfigClockSource+0x15e>
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d867      	bhi.n	800747c <HAL_TIM_ConfigClockSource+0x170>
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d05c      	beq.n	800746a <HAL_TIM_ConfigClockSource+0x15e>
 80073b0:	2b10      	cmp	r3, #16
 80073b2:	d05a      	beq.n	800746a <HAL_TIM_ConfigClockSource+0x15e>
 80073b4:	e062      	b.n	800747c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073c6:	f000 f9a7 	bl	8007718 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80073d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	609a      	str	r2, [r3, #8]
      break;
 80073e2:	e04f      	b.n	8007484 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073f4:	f000 f990 	bl	8007718 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689a      	ldr	r2, [r3, #8]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007406:	609a      	str	r2, [r3, #8]
      break;
 8007408:	e03c      	b.n	8007484 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007416:	461a      	mov	r2, r3
 8007418:	f000 f904 	bl	8007624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2150      	movs	r1, #80	@ 0x50
 8007422:	4618      	mov	r0, r3
 8007424:	f000 f95d 	bl	80076e2 <TIM_ITRx_SetConfig>
      break;
 8007428:	e02c      	b.n	8007484 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007436:	461a      	mov	r2, r3
 8007438:	f000 f923 	bl	8007682 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2160      	movs	r1, #96	@ 0x60
 8007442:	4618      	mov	r0, r3
 8007444:	f000 f94d 	bl	80076e2 <TIM_ITRx_SetConfig>
      break;
 8007448:	e01c      	b.n	8007484 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007456:	461a      	mov	r2, r3
 8007458:	f000 f8e4 	bl	8007624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2140      	movs	r1, #64	@ 0x40
 8007462:	4618      	mov	r0, r3
 8007464:	f000 f93d 	bl	80076e2 <TIM_ITRx_SetConfig>
      break;
 8007468:	e00c      	b.n	8007484 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4619      	mov	r1, r3
 8007474:	4610      	mov	r0, r2
 8007476:	f000 f934 	bl	80076e2 <TIM_ITRx_SetConfig>
      break;
 800747a:	e003      	b.n	8007484 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	73fb      	strb	r3, [r7, #15]
      break;
 8007480:	e000      	b.n	8007484 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007482:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007494:	7bfb      	ldrb	r3, [r7, #15]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074a6:	bf00      	nop
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074ba:	bf00      	nop
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074e2:	bf00      	nop
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
	...

080074f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a40      	ldr	r2, [pc, #256]	@ (8007604 <TIM_Base_SetConfig+0x114>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d013      	beq.n	8007530 <TIM_Base_SetConfig+0x40>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800750e:	d00f      	beq.n	8007530 <TIM_Base_SetConfig+0x40>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a3d      	ldr	r2, [pc, #244]	@ (8007608 <TIM_Base_SetConfig+0x118>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00b      	beq.n	8007530 <TIM_Base_SetConfig+0x40>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a3c      	ldr	r2, [pc, #240]	@ (800760c <TIM_Base_SetConfig+0x11c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d007      	beq.n	8007530 <TIM_Base_SetConfig+0x40>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a3b      	ldr	r2, [pc, #236]	@ (8007610 <TIM_Base_SetConfig+0x120>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d003      	beq.n	8007530 <TIM_Base_SetConfig+0x40>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a3a      	ldr	r2, [pc, #232]	@ (8007614 <TIM_Base_SetConfig+0x124>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d108      	bne.n	8007542 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a2f      	ldr	r2, [pc, #188]	@ (8007604 <TIM_Base_SetConfig+0x114>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d01f      	beq.n	800758a <TIM_Base_SetConfig+0x9a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007550:	d01b      	beq.n	800758a <TIM_Base_SetConfig+0x9a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a2c      	ldr	r2, [pc, #176]	@ (8007608 <TIM_Base_SetConfig+0x118>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d017      	beq.n	800758a <TIM_Base_SetConfig+0x9a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a2b      	ldr	r2, [pc, #172]	@ (800760c <TIM_Base_SetConfig+0x11c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d013      	beq.n	800758a <TIM_Base_SetConfig+0x9a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a2a      	ldr	r2, [pc, #168]	@ (8007610 <TIM_Base_SetConfig+0x120>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00f      	beq.n	800758a <TIM_Base_SetConfig+0x9a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a29      	ldr	r2, [pc, #164]	@ (8007614 <TIM_Base_SetConfig+0x124>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00b      	beq.n	800758a <TIM_Base_SetConfig+0x9a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a28      	ldr	r2, [pc, #160]	@ (8007618 <TIM_Base_SetConfig+0x128>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d007      	beq.n	800758a <TIM_Base_SetConfig+0x9a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a27      	ldr	r2, [pc, #156]	@ (800761c <TIM_Base_SetConfig+0x12c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d003      	beq.n	800758a <TIM_Base_SetConfig+0x9a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a26      	ldr	r2, [pc, #152]	@ (8007620 <TIM_Base_SetConfig+0x130>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d108      	bne.n	800759c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a10      	ldr	r2, [pc, #64]	@ (8007604 <TIM_Base_SetConfig+0x114>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d00f      	beq.n	80075e8 <TIM_Base_SetConfig+0xf8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a12      	ldr	r2, [pc, #72]	@ (8007614 <TIM_Base_SetConfig+0x124>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d00b      	beq.n	80075e8 <TIM_Base_SetConfig+0xf8>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a11      	ldr	r2, [pc, #68]	@ (8007618 <TIM_Base_SetConfig+0x128>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d007      	beq.n	80075e8 <TIM_Base_SetConfig+0xf8>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a10      	ldr	r2, [pc, #64]	@ (800761c <TIM_Base_SetConfig+0x12c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d003      	beq.n	80075e8 <TIM_Base_SetConfig+0xf8>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a0f      	ldr	r2, [pc, #60]	@ (8007620 <TIM_Base_SetConfig+0x130>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d103      	bne.n	80075f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	691a      	ldr	r2, [r3, #16]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	615a      	str	r2, [r3, #20]
}
 80075f6:	bf00      	nop
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	40012c00 	.word	0x40012c00
 8007608:	40000400 	.word	0x40000400
 800760c:	40000800 	.word	0x40000800
 8007610:	40000c00 	.word	0x40000c00
 8007614:	40013400 	.word	0x40013400
 8007618:	40014000 	.word	0x40014000
 800761c:	40014400 	.word	0x40014400
 8007620:	40014800 	.word	0x40014800

08007624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	f023 0201 	bic.w	r2, r3, #1
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800764e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4313      	orrs	r3, r2
 8007658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f023 030a 	bic.w	r3, r3, #10
 8007660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	4313      	orrs	r3, r2
 8007668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	621a      	str	r2, [r3, #32]
}
 8007676:	bf00      	nop
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007682:	b480      	push	{r7}
 8007684:	b087      	sub	sp, #28
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	f023 0210 	bic.w	r2, r3, #16
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	031b      	lsls	r3, r3, #12
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80076be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	621a      	str	r2, [r3, #32]
}
 80076d6:	bf00      	nop
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b085      	sub	sp, #20
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	f043 0307 	orr.w	r3, r3, #7
 8007704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	609a      	str	r2, [r3, #8]
}
 800770c:	bf00      	nop
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007718:	b480      	push	{r7}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	021a      	lsls	r2, r3, #8
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	431a      	orrs	r2, r3
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	4313      	orrs	r3, r2
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	4313      	orrs	r3, r2
 8007744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	609a      	str	r2, [r3, #8]
}
 800774c:	bf00      	nop
 800774e:	371c      	adds	r7, #28
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007768:	2b01      	cmp	r3, #1
 800776a:	d101      	bne.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800776c:	2302      	movs	r3, #2
 800776e:	e068      	b.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a2e      	ldr	r2, [pc, #184]	@ (8007850 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d004      	beq.n	80077a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a2d      	ldr	r2, [pc, #180]	@ (8007854 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d108      	bne.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80077aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a1e      	ldr	r2, [pc, #120]	@ (8007850 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d01d      	beq.n	8007816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077e2:	d018      	beq.n	8007816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a1b      	ldr	r2, [pc, #108]	@ (8007858 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d013      	beq.n	8007816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a1a      	ldr	r2, [pc, #104]	@ (800785c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00e      	beq.n	8007816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a18      	ldr	r2, [pc, #96]	@ (8007860 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d009      	beq.n	8007816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a13      	ldr	r2, [pc, #76]	@ (8007854 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d004      	beq.n	8007816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a14      	ldr	r2, [pc, #80]	@ (8007864 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d10c      	bne.n	8007830 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800781c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	4313      	orrs	r3, r2
 8007826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	40012c00 	.word	0x40012c00
 8007854:	40013400 	.word	0x40013400
 8007858:	40000400 	.word	0x40000400
 800785c:	40000800 	.word	0x40000800
 8007860:	40000c00 	.word	0x40000c00
 8007864:	40014000 	.word	0x40014000

08007868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e042      	b.n	800793c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d106      	bne.n	80078ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7fa f987 	bl	8001bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2224      	movs	r2, #36	@ 0x24
 80078d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0201 	bic.w	r2, r2, #1
 80078e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d002      	beq.n	80078f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fb24 	bl	8007f3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f825 	bl	8007944 <UART_SetConfig>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d101      	bne.n	8007904 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e01b      	b.n	800793c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689a      	ldr	r2, [r3, #8]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0201 	orr.w	r2, r2, #1
 8007932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fba3 	bl	8008080 <UART_CheckIdleState>
 800793a:	4603      	mov	r3, r0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007948:	b08c      	sub	sp, #48	@ 0x30
 800794a:	af00      	add	r7, sp, #0
 800794c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	431a      	orrs	r2, r3
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	431a      	orrs	r2, r3
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	4313      	orrs	r3, r2
 800796a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	4baa      	ldr	r3, [pc, #680]	@ (8007c1c <UART_SetConfig+0x2d8>)
 8007974:	4013      	ands	r3, r2
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	6812      	ldr	r2, [r2, #0]
 800797a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800797c:	430b      	orrs	r3, r1
 800797e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	68da      	ldr	r2, [r3, #12]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a9f      	ldr	r2, [pc, #636]	@ (8007c20 <UART_SetConfig+0x2dc>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d004      	beq.n	80079b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079ac:	4313      	orrs	r3, r2
 80079ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80079ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	6812      	ldr	r2, [r2, #0]
 80079c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079c4:	430b      	orrs	r3, r1
 80079c6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ce:	f023 010f 	bic.w	r1, r3, #15
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a90      	ldr	r2, [pc, #576]	@ (8007c24 <UART_SetConfig+0x2e0>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d125      	bne.n	8007a34 <UART_SetConfig+0xf0>
 80079e8:	4b8f      	ldr	r3, [pc, #572]	@ (8007c28 <UART_SetConfig+0x2e4>)
 80079ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ee:	f003 0303 	and.w	r3, r3, #3
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d81a      	bhi.n	8007a2c <UART_SetConfig+0xe8>
 80079f6:	a201      	add	r2, pc, #4	@ (adr r2, 80079fc <UART_SetConfig+0xb8>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007a0d 	.word	0x08007a0d
 8007a00:	08007a1d 	.word	0x08007a1d
 8007a04:	08007a15 	.word	0x08007a15
 8007a08:	08007a25 	.word	0x08007a25
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a12:	e116      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007a14:	2302      	movs	r3, #2
 8007a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a1a:	e112      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a22:	e10e      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007a24:	2308      	movs	r3, #8
 8007a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a2a:	e10a      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007a2c:	2310      	movs	r3, #16
 8007a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a32:	e106      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a7c      	ldr	r2, [pc, #496]	@ (8007c2c <UART_SetConfig+0x2e8>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d138      	bne.n	8007ab0 <UART_SetConfig+0x16c>
 8007a3e:	4b7a      	ldr	r3, [pc, #488]	@ (8007c28 <UART_SetConfig+0x2e4>)
 8007a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a44:	f003 030c 	and.w	r3, r3, #12
 8007a48:	2b0c      	cmp	r3, #12
 8007a4a:	d82d      	bhi.n	8007aa8 <UART_SetConfig+0x164>
 8007a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a54 <UART_SetConfig+0x110>)
 8007a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a52:	bf00      	nop
 8007a54:	08007a89 	.word	0x08007a89
 8007a58:	08007aa9 	.word	0x08007aa9
 8007a5c:	08007aa9 	.word	0x08007aa9
 8007a60:	08007aa9 	.word	0x08007aa9
 8007a64:	08007a99 	.word	0x08007a99
 8007a68:	08007aa9 	.word	0x08007aa9
 8007a6c:	08007aa9 	.word	0x08007aa9
 8007a70:	08007aa9 	.word	0x08007aa9
 8007a74:	08007a91 	.word	0x08007a91
 8007a78:	08007aa9 	.word	0x08007aa9
 8007a7c:	08007aa9 	.word	0x08007aa9
 8007a80:	08007aa9 	.word	0x08007aa9
 8007a84:	08007aa1 	.word	0x08007aa1
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a8e:	e0d8      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007a90:	2302      	movs	r3, #2
 8007a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a96:	e0d4      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007a98:	2304      	movs	r3, #4
 8007a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a9e:	e0d0      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007aa0:	2308      	movs	r3, #8
 8007aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aa6:	e0cc      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007aa8:	2310      	movs	r3, #16
 8007aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aae:	e0c8      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a5e      	ldr	r2, [pc, #376]	@ (8007c30 <UART_SetConfig+0x2ec>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d125      	bne.n	8007b06 <UART_SetConfig+0x1c2>
 8007aba:	4b5b      	ldr	r3, [pc, #364]	@ (8007c28 <UART_SetConfig+0x2e4>)
 8007abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007ac4:	2b30      	cmp	r3, #48	@ 0x30
 8007ac6:	d016      	beq.n	8007af6 <UART_SetConfig+0x1b2>
 8007ac8:	2b30      	cmp	r3, #48	@ 0x30
 8007aca:	d818      	bhi.n	8007afe <UART_SetConfig+0x1ba>
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	d00a      	beq.n	8007ae6 <UART_SetConfig+0x1a2>
 8007ad0:	2b20      	cmp	r3, #32
 8007ad2:	d814      	bhi.n	8007afe <UART_SetConfig+0x1ba>
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <UART_SetConfig+0x19a>
 8007ad8:	2b10      	cmp	r3, #16
 8007ada:	d008      	beq.n	8007aee <UART_SetConfig+0x1aa>
 8007adc:	e00f      	b.n	8007afe <UART_SetConfig+0x1ba>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ae4:	e0ad      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aec:	e0a9      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007aee:	2304      	movs	r3, #4
 8007af0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007af4:	e0a5      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007af6:	2308      	movs	r3, #8
 8007af8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007afc:	e0a1      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007afe:	2310      	movs	r3, #16
 8007b00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b04:	e09d      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a4a      	ldr	r2, [pc, #296]	@ (8007c34 <UART_SetConfig+0x2f0>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d125      	bne.n	8007b5c <UART_SetConfig+0x218>
 8007b10:	4b45      	ldr	r3, [pc, #276]	@ (8007c28 <UART_SetConfig+0x2e4>)
 8007b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b1c:	d016      	beq.n	8007b4c <UART_SetConfig+0x208>
 8007b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b20:	d818      	bhi.n	8007b54 <UART_SetConfig+0x210>
 8007b22:	2b80      	cmp	r3, #128	@ 0x80
 8007b24:	d00a      	beq.n	8007b3c <UART_SetConfig+0x1f8>
 8007b26:	2b80      	cmp	r3, #128	@ 0x80
 8007b28:	d814      	bhi.n	8007b54 <UART_SetConfig+0x210>
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <UART_SetConfig+0x1f0>
 8007b2e:	2b40      	cmp	r3, #64	@ 0x40
 8007b30:	d008      	beq.n	8007b44 <UART_SetConfig+0x200>
 8007b32:	e00f      	b.n	8007b54 <UART_SetConfig+0x210>
 8007b34:	2300      	movs	r3, #0
 8007b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b3a:	e082      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b42:	e07e      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007b44:	2304      	movs	r3, #4
 8007b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b4a:	e07a      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007b4c:	2308      	movs	r3, #8
 8007b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b52:	e076      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007b54:	2310      	movs	r3, #16
 8007b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b5a:	e072      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a35      	ldr	r2, [pc, #212]	@ (8007c38 <UART_SetConfig+0x2f4>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d12a      	bne.n	8007bbc <UART_SetConfig+0x278>
 8007b66:	4b30      	ldr	r3, [pc, #192]	@ (8007c28 <UART_SetConfig+0x2e4>)
 8007b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b74:	d01a      	beq.n	8007bac <UART_SetConfig+0x268>
 8007b76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b7a:	d81b      	bhi.n	8007bb4 <UART_SetConfig+0x270>
 8007b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b80:	d00c      	beq.n	8007b9c <UART_SetConfig+0x258>
 8007b82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b86:	d815      	bhi.n	8007bb4 <UART_SetConfig+0x270>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <UART_SetConfig+0x250>
 8007b8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b90:	d008      	beq.n	8007ba4 <UART_SetConfig+0x260>
 8007b92:	e00f      	b.n	8007bb4 <UART_SetConfig+0x270>
 8007b94:	2300      	movs	r3, #0
 8007b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b9a:	e052      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ba2:	e04e      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007ba4:	2304      	movs	r3, #4
 8007ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007baa:	e04a      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007bac:	2308      	movs	r3, #8
 8007bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bb2:	e046      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007bb4:	2310      	movs	r3, #16
 8007bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bba:	e042      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a17      	ldr	r2, [pc, #92]	@ (8007c20 <UART_SetConfig+0x2dc>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d13a      	bne.n	8007c3c <UART_SetConfig+0x2f8>
 8007bc6:	4b18      	ldr	r3, [pc, #96]	@ (8007c28 <UART_SetConfig+0x2e4>)
 8007bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bcc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007bd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bd4:	d01a      	beq.n	8007c0c <UART_SetConfig+0x2c8>
 8007bd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bda:	d81b      	bhi.n	8007c14 <UART_SetConfig+0x2d0>
 8007bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007be0:	d00c      	beq.n	8007bfc <UART_SetConfig+0x2b8>
 8007be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007be6:	d815      	bhi.n	8007c14 <UART_SetConfig+0x2d0>
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <UART_SetConfig+0x2b0>
 8007bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bf0:	d008      	beq.n	8007c04 <UART_SetConfig+0x2c0>
 8007bf2:	e00f      	b.n	8007c14 <UART_SetConfig+0x2d0>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bfa:	e022      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c02:	e01e      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007c04:	2304      	movs	r3, #4
 8007c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c0a:	e01a      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007c0c:	2308      	movs	r3, #8
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c12:	e016      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007c14:	2310      	movs	r3, #16
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c1a:	e012      	b.n	8007c42 <UART_SetConfig+0x2fe>
 8007c1c:	cfff69f3 	.word	0xcfff69f3
 8007c20:	40008000 	.word	0x40008000
 8007c24:	40013800 	.word	0x40013800
 8007c28:	40021000 	.word	0x40021000
 8007c2c:	40004400 	.word	0x40004400
 8007c30:	40004800 	.word	0x40004800
 8007c34:	40004c00 	.word	0x40004c00
 8007c38:	40005000 	.word	0x40005000
 8007c3c:	2310      	movs	r3, #16
 8007c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4aae      	ldr	r2, [pc, #696]	@ (8007f00 <UART_SetConfig+0x5bc>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	f040 8097 	bne.w	8007d7c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d823      	bhi.n	8007c9e <UART_SetConfig+0x35a>
 8007c56:	a201      	add	r2, pc, #4	@ (adr r2, 8007c5c <UART_SetConfig+0x318>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007c9f 	.word	0x08007c9f
 8007c64:	08007c89 	.word	0x08007c89
 8007c68:	08007c9f 	.word	0x08007c9f
 8007c6c:	08007c8f 	.word	0x08007c8f
 8007c70:	08007c9f 	.word	0x08007c9f
 8007c74:	08007c9f 	.word	0x08007c9f
 8007c78:	08007c9f 	.word	0x08007c9f
 8007c7c:	08007c97 	.word	0x08007c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c80:	f7fe fb0e 	bl	80062a0 <HAL_RCC_GetPCLK1Freq>
 8007c84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c86:	e010      	b.n	8007caa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c88:	4b9e      	ldr	r3, [pc, #632]	@ (8007f04 <UART_SetConfig+0x5c0>)
 8007c8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c8c:	e00d      	b.n	8007caa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c8e:	f7fe fa6f 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 8007c92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c94:	e009      	b.n	8007caa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c9c:	e005      	b.n	8007caa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ca8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 8130 	beq.w	8007f12 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb6:	4a94      	ldr	r2, [pc, #592]	@ (8007f08 <UART_SetConfig+0x5c4>)
 8007cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cc4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	005b      	lsls	r3, r3, #1
 8007cce:	4413      	add	r3, r2
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d305      	bcc.n	8007ce2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d903      	bls.n	8007cea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ce8:	e113      	b.n	8007f12 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	2200      	movs	r2, #0
 8007cee:	60bb      	str	r3, [r7, #8]
 8007cf0:	60fa      	str	r2, [r7, #12]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf6:	4a84      	ldr	r2, [pc, #528]	@ (8007f08 <UART_SetConfig+0x5c4>)
 8007cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2200      	movs	r2, #0
 8007d00:	603b      	str	r3, [r7, #0]
 8007d02:	607a      	str	r2, [r7, #4]
 8007d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d0c:	f7f8 fdac 	bl	8000868 <__aeabi_uldivmod>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4610      	mov	r0, r2
 8007d16:	4619      	mov	r1, r3
 8007d18:	f04f 0200 	mov.w	r2, #0
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	020b      	lsls	r3, r1, #8
 8007d22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d26:	0202      	lsls	r2, r0, #8
 8007d28:	6979      	ldr	r1, [r7, #20]
 8007d2a:	6849      	ldr	r1, [r1, #4]
 8007d2c:	0849      	lsrs	r1, r1, #1
 8007d2e:	2000      	movs	r0, #0
 8007d30:	460c      	mov	r4, r1
 8007d32:	4605      	mov	r5, r0
 8007d34:	eb12 0804 	adds.w	r8, r2, r4
 8007d38:	eb43 0905 	adc.w	r9, r3, r5
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	469a      	mov	sl, r3
 8007d44:	4693      	mov	fp, r2
 8007d46:	4652      	mov	r2, sl
 8007d48:	465b      	mov	r3, fp
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	f7f8 fd8b 	bl	8000868 <__aeabi_uldivmod>
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	4613      	mov	r3, r2
 8007d58:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d60:	d308      	bcc.n	8007d74 <UART_SetConfig+0x430>
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d68:	d204      	bcs.n	8007d74 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6a3a      	ldr	r2, [r7, #32]
 8007d70:	60da      	str	r2, [r3, #12]
 8007d72:	e0ce      	b.n	8007f12 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d7a:	e0ca      	b.n	8007f12 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	69db      	ldr	r3, [r3, #28]
 8007d80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d84:	d166      	bne.n	8007e54 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007d86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d8a:	2b08      	cmp	r3, #8
 8007d8c:	d827      	bhi.n	8007dde <UART_SetConfig+0x49a>
 8007d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d94 <UART_SetConfig+0x450>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007db9 	.word	0x08007db9
 8007d98:	08007dc1 	.word	0x08007dc1
 8007d9c:	08007dc9 	.word	0x08007dc9
 8007da0:	08007ddf 	.word	0x08007ddf
 8007da4:	08007dcf 	.word	0x08007dcf
 8007da8:	08007ddf 	.word	0x08007ddf
 8007dac:	08007ddf 	.word	0x08007ddf
 8007db0:	08007ddf 	.word	0x08007ddf
 8007db4:	08007dd7 	.word	0x08007dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007db8:	f7fe fa72 	bl	80062a0 <HAL_RCC_GetPCLK1Freq>
 8007dbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dbe:	e014      	b.n	8007dea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dc0:	f7fe fa84 	bl	80062cc <HAL_RCC_GetPCLK2Freq>
 8007dc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dc6:	e010      	b.n	8007dea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8007f04 <UART_SetConfig+0x5c0>)
 8007dca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007dcc:	e00d      	b.n	8007dea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dce:	f7fe f9cf 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 8007dd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dd4:	e009      	b.n	8007dea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ddc:	e005      	b.n	8007dea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007de8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 8090 	beq.w	8007f12 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df6:	4a44      	ldr	r2, [pc, #272]	@ (8007f08 <UART_SetConfig+0x5c4>)
 8007df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e04:	005a      	lsls	r2, r3, #1
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	085b      	lsrs	r3, r3, #1
 8007e0c:	441a      	add	r2, r3
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e16:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	2b0f      	cmp	r3, #15
 8007e1c:	d916      	bls.n	8007e4c <UART_SetConfig+0x508>
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e24:	d212      	bcs.n	8007e4c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	f023 030f 	bic.w	r3, r3, #15
 8007e2e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	8bfb      	ldrh	r3, [r7, #30]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	8bfa      	ldrh	r2, [r7, #30]
 8007e48:	60da      	str	r2, [r3, #12]
 8007e4a:	e062      	b.n	8007f12 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e52:	e05e      	b.n	8007f12 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d828      	bhi.n	8007eae <UART_SetConfig+0x56a>
 8007e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e64 <UART_SetConfig+0x520>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007e89 	.word	0x08007e89
 8007e68:	08007e91 	.word	0x08007e91
 8007e6c:	08007e99 	.word	0x08007e99
 8007e70:	08007eaf 	.word	0x08007eaf
 8007e74:	08007e9f 	.word	0x08007e9f
 8007e78:	08007eaf 	.word	0x08007eaf
 8007e7c:	08007eaf 	.word	0x08007eaf
 8007e80:	08007eaf 	.word	0x08007eaf
 8007e84:	08007ea7 	.word	0x08007ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e88:	f7fe fa0a 	bl	80062a0 <HAL_RCC_GetPCLK1Freq>
 8007e8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e8e:	e014      	b.n	8007eba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e90:	f7fe fa1c 	bl	80062cc <HAL_RCC_GetPCLK2Freq>
 8007e94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e96:	e010      	b.n	8007eba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e98:	4b1a      	ldr	r3, [pc, #104]	@ (8007f04 <UART_SetConfig+0x5c0>)
 8007e9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e9c:	e00d      	b.n	8007eba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e9e:	f7fe f967 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 8007ea2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ea4:	e009      	b.n	8007eba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007eac:	e005      	b.n	8007eba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007eb8:	bf00      	nop
    }

    if (pclk != 0U)
 8007eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d028      	beq.n	8007f12 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec4:	4a10      	ldr	r2, [pc, #64]	@ (8007f08 <UART_SetConfig+0x5c4>)
 8007ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ece:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	085b      	lsrs	r3, r3, #1
 8007ed8:	441a      	add	r2, r3
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	2b0f      	cmp	r3, #15
 8007ee8:	d910      	bls.n	8007f0c <UART_SetConfig+0x5c8>
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ef0:	d20c      	bcs.n	8007f0c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60da      	str	r2, [r3, #12]
 8007efc:	e009      	b.n	8007f12 <UART_SetConfig+0x5ce>
 8007efe:	bf00      	nop
 8007f00:	40008000 	.word	0x40008000
 8007f04:	00f42400 	.word	0x00f42400
 8007f08:	0800ca3c 	.word	0x0800ca3c
      }
      else
      {
        ret = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2200      	movs	r2, #0
 8007f26:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f2e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3730      	adds	r7, #48	@ 0x30
 8007f36:	46bd      	mov	sp, r7
 8007f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f48:	f003 0308 	and.w	r3, r3, #8
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00a      	beq.n	8007f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	430a      	orrs	r2, r1
 8007f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00a      	beq.n	8007faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fae:	f003 0304 	and.w	r3, r3, #4
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd0:	f003 0310 	and.w	r3, r3, #16
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00a      	beq.n	8007fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff2:	f003 0320 	and.w	r3, r3, #32
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	d01a      	beq.n	8008052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800803a:	d10a      	bne.n	8008052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	605a      	str	r2, [r3, #4]
  }
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b098      	sub	sp, #96	@ 0x60
 8008084:	af02      	add	r7, sp, #8
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008090:	f7f9 fedc 	bl	8001e4c <HAL_GetTick>
 8008094:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0308 	and.w	r3, r3, #8
 80080a0:	2b08      	cmp	r3, #8
 80080a2:	d12f      	bne.n	8008104 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ac:	2200      	movs	r2, #0
 80080ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f88e 	bl	80081d4 <UART_WaitOnFlagUntilTimeout>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d022      	beq.n	8008104 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c6:	e853 3f00 	ldrex	r3, [r3]
 80080ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	461a      	mov	r2, r3
 80080da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80080de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080e4:	e841 2300 	strex	r3, r2, [r1]
 80080e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1e6      	bne.n	80080be <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e063      	b.n	80081cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0304 	and.w	r3, r3, #4
 800810e:	2b04      	cmp	r3, #4
 8008110:	d149      	bne.n	80081a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008112:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800811a:	2200      	movs	r2, #0
 800811c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f857 	bl	80081d4 <UART_WaitOnFlagUntilTimeout>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d03c      	beq.n	80081a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008134:	e853 3f00 	ldrex	r3, [r3]
 8008138:	623b      	str	r3, [r7, #32]
   return(result);
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800814a:	633b      	str	r3, [r7, #48]	@ 0x30
 800814c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008152:	e841 2300 	strex	r3, r2, [r1]
 8008156:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1e6      	bne.n	800812c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3308      	adds	r3, #8
 8008164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	60fb      	str	r3, [r7, #12]
   return(result);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f023 0301 	bic.w	r3, r3, #1
 8008174:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3308      	adds	r3, #8
 800817c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800817e:	61fa      	str	r2, [r7, #28]
 8008180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008182:	69b9      	ldr	r1, [r7, #24]
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	e841 2300 	strex	r3, r2, [r1]
 800818a:	617b      	str	r3, [r7, #20]
   return(result);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1e5      	bne.n	800815e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2220      	movs	r2, #32
 8008196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e012      	b.n	80081cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3758      	adds	r7, #88	@ 0x58
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	603b      	str	r3, [r7, #0]
 80081e0:	4613      	mov	r3, r2
 80081e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081e4:	e049      	b.n	800827a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081ec:	d045      	beq.n	800827a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ee:	f7f9 fe2d 	bl	8001e4c <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d302      	bcc.n	8008204 <UART_WaitOnFlagUntilTimeout+0x30>
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e048      	b.n	800829a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0304 	and.w	r3, r3, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	d031      	beq.n	800827a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	69db      	ldr	r3, [r3, #28]
 800821c:	f003 0308 	and.w	r3, r3, #8
 8008220:	2b08      	cmp	r3, #8
 8008222:	d110      	bne.n	8008246 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2208      	movs	r2, #8
 800822a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 f838 	bl	80082a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2208      	movs	r2, #8
 8008236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e029      	b.n	800829a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008254:	d111      	bne.n	800827a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800825e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f000 f81e 	bl	80082a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2220      	movs	r2, #32
 800826a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e00f      	b.n	800829a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69da      	ldr	r2, [r3, #28]
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	4013      	ands	r3, r2
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	429a      	cmp	r2, r3
 8008288:	bf0c      	ite	eq
 800828a:	2301      	moveq	r3, #1
 800828c:	2300      	movne	r3, #0
 800828e:	b2db      	uxtb	r3, r3
 8008290:	461a      	mov	r2, r3
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	429a      	cmp	r2, r3
 8008296:	d0a6      	beq.n	80081e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b095      	sub	sp, #84	@ 0x54
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b2:	e853 3f00 	ldrex	r3, [r3]
 80082b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	461a      	mov	r2, r3
 80082c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80082ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082d0:	e841 2300 	strex	r3, r2, [r1]
 80082d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1e6      	bne.n	80082aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3308      	adds	r3, #8
 80082e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	e853 3f00 	ldrex	r3, [r3]
 80082ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082f2:	f023 0301 	bic.w	r3, r3, #1
 80082f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3308      	adds	r3, #8
 80082fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008300:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008302:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008304:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008308:	e841 2300 	strex	r3, r2, [r1]
 800830c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1e3      	bne.n	80082dc <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008318:	2b01      	cmp	r3, #1
 800831a:	d118      	bne.n	800834e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	e853 3f00 	ldrex	r3, [r3]
 8008328:	60bb      	str	r3, [r7, #8]
   return(result);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f023 0310 	bic.w	r3, r3, #16
 8008330:	647b      	str	r3, [r7, #68]	@ 0x44
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800833a:	61bb      	str	r3, [r7, #24]
 800833c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833e:	6979      	ldr	r1, [r7, #20]
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	e841 2300 	strex	r3, r2, [r1]
 8008346:	613b      	str	r3, [r7, #16]
   return(result);
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1e6      	bne.n	800831c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2220      	movs	r2, #32
 8008352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008362:	bf00      	nop
 8008364:	3754      	adds	r7, #84	@ 0x54
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800836e:	b480      	push	{r7}
 8008370:	b085      	sub	sp, #20
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800837c:	2b01      	cmp	r3, #1
 800837e:	d101      	bne.n	8008384 <HAL_UARTEx_DisableFifoMode+0x16>
 8008380:	2302      	movs	r3, #2
 8008382:	e027      	b.n	80083d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2224      	movs	r2, #36	@ 0x24
 8008390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 0201 	bic.w	r2, r2, #1
 80083aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80083b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d101      	bne.n	80083f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083f4:	2302      	movs	r3, #2
 80083f6:	e02d      	b.n	8008454 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2224      	movs	r2, #36	@ 0x24
 8008404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f022 0201 	bic.w	r2, r2, #1
 800841e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f84f 	bl	80084d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2220      	movs	r2, #32
 8008446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800846c:	2b01      	cmp	r3, #1
 800846e:	d101      	bne.n	8008474 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008470:	2302      	movs	r3, #2
 8008472:	e02d      	b.n	80084d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2224      	movs	r2, #36	@ 0x24
 8008480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0201 	bic.w	r2, r2, #1
 800849a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	430a      	orrs	r2, r1
 80084ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f811 	bl	80084d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d108      	bne.n	80084fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084f8:	e031      	b.n	800855e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084fa:	2308      	movs	r3, #8
 80084fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084fe:	2308      	movs	r3, #8
 8008500:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	0e5b      	lsrs	r3, r3, #25
 800850a:	b2db      	uxtb	r3, r3
 800850c:	f003 0307 	and.w	r3, r3, #7
 8008510:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	0f5b      	lsrs	r3, r3, #29
 800851a:	b2db      	uxtb	r3, r3
 800851c:	f003 0307 	and.w	r3, r3, #7
 8008520:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	7b3a      	ldrb	r2, [r7, #12]
 8008526:	4911      	ldr	r1, [pc, #68]	@ (800856c <UARTEx_SetNbDataToProcess+0x94>)
 8008528:	5c8a      	ldrb	r2, [r1, r2]
 800852a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800852e:	7b3a      	ldrb	r2, [r7, #12]
 8008530:	490f      	ldr	r1, [pc, #60]	@ (8008570 <UARTEx_SetNbDataToProcess+0x98>)
 8008532:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008534:	fb93 f3f2 	sdiv	r3, r3, r2
 8008538:	b29a      	uxth	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	7b7a      	ldrb	r2, [r7, #13]
 8008544:	4909      	ldr	r1, [pc, #36]	@ (800856c <UARTEx_SetNbDataToProcess+0x94>)
 8008546:	5c8a      	ldrb	r2, [r1, r2]
 8008548:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800854c:	7b7a      	ldrb	r2, [r7, #13]
 800854e:	4908      	ldr	r1, [pc, #32]	@ (8008570 <UARTEx_SetNbDataToProcess+0x98>)
 8008550:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008552:	fb93 f3f2 	sdiv	r3, r3, r2
 8008556:	b29a      	uxth	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800855e:	bf00      	nop
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	0800ca54 	.word	0x0800ca54
 8008570:	0800ca5c 	.word	0x0800ca5c

08008574 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008574:	b084      	sub	sp, #16
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	f107 001c 	add.w	r0, r7, #28
 8008582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f001 fa1c 	bl	80099d0 <USB_CoreReset>
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800859c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d106      	bne.n	80085b0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80085ae:	e005      	b.n	80085bc <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085c8:	b004      	add	sp, #16
 80085ca:	4770      	bx	lr

080085cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80085da:	79fb      	ldrb	r3, [r7, #7]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d165      	bne.n	80086ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	4a3e      	ldr	r2, [pc, #248]	@ (80086dc <USB_SetTurnaroundTime+0x110>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d906      	bls.n	80085f6 <USB_SetTurnaroundTime+0x2a>
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	4a3d      	ldr	r2, [pc, #244]	@ (80086e0 <USB_SetTurnaroundTime+0x114>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d202      	bcs.n	80085f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80085f0:	230f      	movs	r3, #15
 80085f2:	617b      	str	r3, [r7, #20]
 80085f4:	e05c      	b.n	80086b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	4a39      	ldr	r2, [pc, #228]	@ (80086e0 <USB_SetTurnaroundTime+0x114>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d306      	bcc.n	800860c <USB_SetTurnaroundTime+0x40>
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	4a38      	ldr	r2, [pc, #224]	@ (80086e4 <USB_SetTurnaroundTime+0x118>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d202      	bcs.n	800860c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008606:	230e      	movs	r3, #14
 8008608:	617b      	str	r3, [r7, #20]
 800860a:	e051      	b.n	80086b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	4a35      	ldr	r2, [pc, #212]	@ (80086e4 <USB_SetTurnaroundTime+0x118>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d306      	bcc.n	8008622 <USB_SetTurnaroundTime+0x56>
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	4a34      	ldr	r2, [pc, #208]	@ (80086e8 <USB_SetTurnaroundTime+0x11c>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d202      	bcs.n	8008622 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800861c:	230d      	movs	r3, #13
 800861e:	617b      	str	r3, [r7, #20]
 8008620:	e046      	b.n	80086b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	4a30      	ldr	r2, [pc, #192]	@ (80086e8 <USB_SetTurnaroundTime+0x11c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d306      	bcc.n	8008638 <USB_SetTurnaroundTime+0x6c>
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	4a2f      	ldr	r2, [pc, #188]	@ (80086ec <USB_SetTurnaroundTime+0x120>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d802      	bhi.n	8008638 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008632:	230c      	movs	r3, #12
 8008634:	617b      	str	r3, [r7, #20]
 8008636:	e03b      	b.n	80086b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	4a2c      	ldr	r2, [pc, #176]	@ (80086ec <USB_SetTurnaroundTime+0x120>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d906      	bls.n	800864e <USB_SetTurnaroundTime+0x82>
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	4a2b      	ldr	r2, [pc, #172]	@ (80086f0 <USB_SetTurnaroundTime+0x124>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d802      	bhi.n	800864e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008648:	230b      	movs	r3, #11
 800864a:	617b      	str	r3, [r7, #20]
 800864c:	e030      	b.n	80086b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	4a27      	ldr	r2, [pc, #156]	@ (80086f0 <USB_SetTurnaroundTime+0x124>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d906      	bls.n	8008664 <USB_SetTurnaroundTime+0x98>
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	4a26      	ldr	r2, [pc, #152]	@ (80086f4 <USB_SetTurnaroundTime+0x128>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d802      	bhi.n	8008664 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800865e:	230a      	movs	r3, #10
 8008660:	617b      	str	r3, [r7, #20]
 8008662:	e025      	b.n	80086b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	4a23      	ldr	r2, [pc, #140]	@ (80086f4 <USB_SetTurnaroundTime+0x128>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d906      	bls.n	800867a <USB_SetTurnaroundTime+0xae>
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	4a22      	ldr	r2, [pc, #136]	@ (80086f8 <USB_SetTurnaroundTime+0x12c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d202      	bcs.n	800867a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008674:	2309      	movs	r3, #9
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	e01a      	b.n	80086b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	4a1e      	ldr	r2, [pc, #120]	@ (80086f8 <USB_SetTurnaroundTime+0x12c>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d306      	bcc.n	8008690 <USB_SetTurnaroundTime+0xc4>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	4a1d      	ldr	r2, [pc, #116]	@ (80086fc <USB_SetTurnaroundTime+0x130>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d802      	bhi.n	8008690 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800868a:	2308      	movs	r3, #8
 800868c:	617b      	str	r3, [r7, #20]
 800868e:	e00f      	b.n	80086b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	4a1a      	ldr	r2, [pc, #104]	@ (80086fc <USB_SetTurnaroundTime+0x130>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d906      	bls.n	80086a6 <USB_SetTurnaroundTime+0xda>
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	4a19      	ldr	r2, [pc, #100]	@ (8008700 <USB_SetTurnaroundTime+0x134>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d202      	bcs.n	80086a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80086a0:	2307      	movs	r3, #7
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	e004      	b.n	80086b0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80086a6:	2306      	movs	r3, #6
 80086a8:	617b      	str	r3, [r7, #20]
 80086aa:	e001      	b.n	80086b0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80086ac:	2309      	movs	r3, #9
 80086ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	68da      	ldr	r2, [r3, #12]
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	029b      	lsls	r3, r3, #10
 80086c4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80086c8:	431a      	orrs	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	371c      	adds	r7, #28
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	00d8acbf 	.word	0x00d8acbf
 80086e0:	00e4e1c0 	.word	0x00e4e1c0
 80086e4:	00f42400 	.word	0x00f42400
 80086e8:	01067380 	.word	0x01067380
 80086ec:	011a499f 	.word	0x011a499f
 80086f0:	01312cff 	.word	0x01312cff
 80086f4:	014ca43f 	.word	0x014ca43f
 80086f8:	016e3600 	.word	0x016e3600
 80086fc:	01a6ab1f 	.word	0x01a6ab1f
 8008700:	01e84800 	.word	0x01e84800

08008704 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f043 0201 	orr.w	r2, r3, #1
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f023 0201 	bic.w	r2, r3, #1
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d115      	bne.n	8008796 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008776:	2001      	movs	r0, #1
 8008778:	f7f9 fb74 	bl	8001e64 <HAL_Delay>
      ms++;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3301      	adds	r3, #1
 8008780:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 f8ab 	bl	80098de <USB_GetMode>
 8008788:	4603      	mov	r3, r0
 800878a:	2b01      	cmp	r3, #1
 800878c:	d01e      	beq.n	80087cc <USB_SetCurrentMode+0x84>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b31      	cmp	r3, #49	@ 0x31
 8008792:	d9f0      	bls.n	8008776 <USB_SetCurrentMode+0x2e>
 8008794:	e01a      	b.n	80087cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008796:	78fb      	ldrb	r3, [r7, #3]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d115      	bne.n	80087c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80087a8:	2001      	movs	r0, #1
 80087aa:	f7f9 fb5b 	bl	8001e64 <HAL_Delay>
      ms++;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3301      	adds	r3, #1
 80087b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 f892 	bl	80098de <USB_GetMode>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d005      	beq.n	80087cc <USB_SetCurrentMode+0x84>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2b31      	cmp	r3, #49	@ 0x31
 80087c4:	d9f0      	bls.n	80087a8 <USB_SetCurrentMode+0x60>
 80087c6:	e001      	b.n	80087cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e005      	b.n	80087d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b32      	cmp	r3, #50	@ 0x32
 80087d0:	d101      	bne.n	80087d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e000      	b.n	80087d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087e0:	b084      	sub	sp, #16
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b086      	sub	sp, #24
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80087ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80087fa:	2300      	movs	r3, #0
 80087fc:	613b      	str	r3, [r7, #16]
 80087fe:	e009      	b.n	8008814 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	3340      	adds	r3, #64	@ 0x40
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	2200      	movs	r2, #0
 800880c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	3301      	adds	r3, #1
 8008812:	613b      	str	r3, [r7, #16]
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	2b0e      	cmp	r3, #14
 8008818:	d9f2      	bls.n	8008800 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800881a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d11c      	bne.n	800885a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800882e:	f043 0302 	orr.w	r3, r3, #2
 8008832:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008838:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	e005      	b.n	8008866 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800885e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800886c:	461a      	mov	r2, r3
 800886e:	2300      	movs	r3, #0
 8008870:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008872:	2103      	movs	r1, #3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f959 	bl	8008b2c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800887a:	2110      	movs	r1, #16
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f8f1 	bl	8008a64 <USB_FlushTxFifo>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f91d 	bl	8008acc <USB_FlushRxFifo>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088a2:	461a      	mov	r2, r3
 80088a4:	2300      	movs	r3, #0
 80088a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ae:	461a      	mov	r2, r3
 80088b0:	2300      	movs	r3, #0
 80088b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ba:	461a      	mov	r2, r3
 80088bc:	2300      	movs	r3, #0
 80088be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088c0:	2300      	movs	r3, #0
 80088c2:	613b      	str	r3, [r7, #16]
 80088c4:	e043      	b.n	800894e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088dc:	d118      	bne.n	8008910 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10a      	bne.n	80088fa <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	015a      	lsls	r2, r3, #5
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088f0:	461a      	mov	r2, r3
 80088f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	e013      	b.n	8008922 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008906:	461a      	mov	r2, r3
 8008908:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	e008      	b.n	8008922 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800891c:	461a      	mov	r2, r3
 800891e:	2300      	movs	r3, #0
 8008920:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4413      	add	r3, r2
 800892a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800892e:	461a      	mov	r2, r3
 8008930:	2300      	movs	r3, #0
 8008932:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008940:	461a      	mov	r2, r3
 8008942:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008946:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	3301      	adds	r3, #1
 800894c:	613b      	str	r3, [r7, #16]
 800894e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	429a      	cmp	r2, r3
 8008954:	d3b7      	bcc.n	80088c6 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008956:	2300      	movs	r3, #0
 8008958:	613b      	str	r3, [r7, #16]
 800895a:	e043      	b.n	80089e4 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800896e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008972:	d118      	bne.n	80089a6 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10a      	bne.n	8008990 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	015a      	lsls	r2, r3, #5
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	4413      	add	r3, r2
 8008982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008986:	461a      	mov	r2, r3
 8008988:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	e013      	b.n	80089b8 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	4413      	add	r3, r2
 8008998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800899c:	461a      	mov	r2, r3
 800899e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80089a2:	6013      	str	r3, [r2, #0]
 80089a4:	e008      	b.n	80089b8 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089b2:	461a      	mov	r2, r3
 80089b4:	2300      	movs	r3, #0
 80089b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c4:	461a      	mov	r2, r3
 80089c6:	2300      	movs	r3, #0
 80089c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089d6:	461a      	mov	r2, r3
 80089d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80089dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	3301      	adds	r3, #1
 80089e2:	613b      	str	r3, [r7, #16]
 80089e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d3b7      	bcc.n	800895c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008a0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	f043 0210 	orr.w	r2, r3, #16
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	699a      	ldr	r2, [r3, #24]
 8008a1e:	4b10      	ldr	r3, [pc, #64]	@ (8008a60 <USB_DevInit+0x280>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d005      	beq.n	8008a38 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	f043 0208 	orr.w	r2, r3, #8
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d107      	bne.n	8008a4e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a46:	f043 0304 	orr.w	r3, r3, #4
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a5a:	b004      	add	sp, #16
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	803c3800 	.word	0x803c3800

08008a64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3301      	adds	r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4a13      	ldr	r2, [pc, #76]	@ (8008ac8 <USB_FlushTxFifo+0x64>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d901      	bls.n	8008a84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e01b      	b.n	8008abc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	daf2      	bge.n	8008a72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	019b      	lsls	r3, r3, #6
 8008a94:	f043 0220 	orr.w	r2, r3, #32
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	4a08      	ldr	r2, [pc, #32]	@ (8008ac8 <USB_FlushTxFifo+0x64>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d901      	bls.n	8008aae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e006      	b.n	8008abc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	d0f0      	beq.n	8008a9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	00030d40 	.word	0x00030d40

08008acc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	3301      	adds	r3, #1
 8008adc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4a11      	ldr	r2, [pc, #68]	@ (8008b28 <USB_FlushRxFifo+0x5c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d901      	bls.n	8008aea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e018      	b.n	8008b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	daf2      	bge.n	8008ad8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008af2:	2300      	movs	r3, #0
 8008af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2210      	movs	r2, #16
 8008afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3301      	adds	r3, #1
 8008b00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4a08      	ldr	r2, [pc, #32]	@ (8008b28 <USB_FlushRxFifo+0x5c>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d901      	bls.n	8008b0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e006      	b.n	8008b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f003 0310 	and.w	r3, r3, #16
 8008b16:	2b10      	cmp	r3, #16
 8008b18:	d0f0      	beq.n	8008afc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	00030d40 	.word	0x00030d40

08008b2c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	68f9      	ldr	r1, [r7, #12]
 8008b48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b087      	sub	sp, #28
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	f003 0306 	and.w	r3, r3, #6
 8008b76:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d002      	beq.n	8008b84 <USB_GetDevSpeed+0x26>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b06      	cmp	r3, #6
 8008b82:	d102      	bne.n	8008b8a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b84:	2302      	movs	r3, #2
 8008b86:	75fb      	strb	r3, [r7, #23]
 8008b88:	e001      	b.n	8008b8e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008b8a:	230f      	movs	r3, #15
 8008b8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	371c      	adds	r7, #28
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	785b      	ldrb	r3, [r3, #1]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d13a      	bne.n	8008c2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bbe:	69da      	ldr	r2, [r3, #28]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	f003 030f 	and.w	r3, r3, #15
 8008bc8:	2101      	movs	r1, #1
 8008bca:	fa01 f303 	lsl.w	r3, r1, r3
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	68f9      	ldr	r1, [r7, #12]
 8008bd2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d155      	bne.n	8008c9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	791b      	ldrb	r3, [r3, #4]
 8008c0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	059b      	lsls	r3, r3, #22
 8008c12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c14:	4313      	orrs	r3, r2
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	0151      	lsls	r1, r2, #5
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	440a      	add	r2, r1
 8008c1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	e036      	b.n	8008c9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c34:	69da      	ldr	r2, [r3, #28]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	f003 030f 	and.w	r3, r3, #15
 8008c3e:	2101      	movs	r1, #1
 8008c40:	fa01 f303 	lsl.w	r3, r1, r3
 8008c44:	041b      	lsls	r3, r3, #16
 8008c46:	68f9      	ldr	r1, [r7, #12]
 8008c48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d11a      	bne.n	8008c9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	015a      	lsls	r2, r3, #5
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	791b      	ldrb	r3, [r3, #4]
 8008c80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c82:	430b      	orrs	r3, r1
 8008c84:	4313      	orrs	r3, r2
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	0151      	lsls	r1, r2, #5
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	440a      	add	r2, r1
 8008c8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
	...

08008cac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	785b      	ldrb	r3, [r3, #1]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d161      	bne.n	8008d8c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cde:	d11f      	bne.n	8008d20 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	0151      	lsls	r1, r2, #5
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	440a      	add	r2, r1
 8008cf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cfa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008cfe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	0151      	lsls	r1, r2, #5
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	440a      	add	r2, r1
 8008d16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	f003 030f 	and.w	r3, r3, #15
 8008d30:	2101      	movs	r1, #1
 8008d32:	fa01 f303 	lsl.w	r3, r1, r3
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	43db      	mvns	r3, r3
 8008d3a:	68f9      	ldr	r1, [r7, #12]
 8008d3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d40:	4013      	ands	r3, r2
 8008d42:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d4a:	69da      	ldr	r2, [r3, #28]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	f003 030f 	and.w	r3, r3, #15
 8008d54:	2101      	movs	r1, #1
 8008d56:	fa01 f303 	lsl.w	r3, r1, r3
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	43db      	mvns	r3, r3
 8008d5e:	68f9      	ldr	r1, [r7, #12]
 8008d60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d64:	4013      	ands	r3, r2
 8008d66:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	0159      	lsls	r1, r3, #5
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	440b      	add	r3, r1
 8008d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d82:	4619      	mov	r1, r3
 8008d84:	4b35      	ldr	r3, [pc, #212]	@ (8008e5c <USB_DeactivateEndpoint+0x1b0>)
 8008d86:	4013      	ands	r3, r2
 8008d88:	600b      	str	r3, [r1, #0]
 8008d8a:	e060      	b.n	8008e4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008da2:	d11f      	bne.n	8008de4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	0151      	lsls	r1, r2, #5
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	440a      	add	r2, r1
 8008dba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008dc2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	0151      	lsls	r1, r2, #5
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	440a      	add	r2, r1
 8008dda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008de2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	f003 030f 	and.w	r3, r3, #15
 8008df4:	2101      	movs	r1, #1
 8008df6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dfa:	041b      	lsls	r3, r3, #16
 8008dfc:	43db      	mvns	r3, r3
 8008dfe:	68f9      	ldr	r1, [r7, #12]
 8008e00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e04:	4013      	ands	r3, r2
 8008e06:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e0e:	69da      	ldr	r2, [r3, #28]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	f003 030f 	and.w	r3, r3, #15
 8008e18:	2101      	movs	r1, #1
 8008e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e1e:	041b      	lsls	r3, r3, #16
 8008e20:	43db      	mvns	r3, r3
 8008e22:	68f9      	ldr	r1, [r7, #12]
 8008e24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e28:	4013      	ands	r3, r2
 8008e2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	0159      	lsls	r1, r3, #5
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	440b      	add	r3, r1
 8008e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e46:	4619      	mov	r1, r3
 8008e48:	4b05      	ldr	r3, [pc, #20]	@ (8008e60 <USB_DeactivateEndpoint+0x1b4>)
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	ec337800 	.word	0xec337800
 8008e60:	eff37800 	.word	0xeff37800

08008e64 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b086      	sub	sp, #24
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	785b      	ldrb	r3, [r3, #1]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	f040 8128 	bne.w	80090d2 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d132      	bne.n	8008ef0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	0151      	lsls	r1, r2, #5
 8008e9c:	697a      	ldr	r2, [r7, #20]
 8008e9e:	440a      	add	r2, r1
 8008ea0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ea4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008ea8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008eac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	015a      	lsls	r2, r3, #5
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	0151      	lsls	r1, r2, #5
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	440a      	add	r2, r1
 8008ec4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ec8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ecc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	0151      	lsls	r1, r2, #5
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	440a      	add	r2, r1
 8008ee4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ee8:	0cdb      	lsrs	r3, r3, #19
 8008eea:	04db      	lsls	r3, r3, #19
 8008eec:	6113      	str	r3, [r2, #16]
 8008eee:	e092      	b.n	8009016 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	0151      	lsls	r1, r2, #5
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	440a      	add	r2, r1
 8008f06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f0a:	0cdb      	lsrs	r3, r3, #19
 8008f0c:	04db      	lsls	r3, r3, #19
 8008f0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	0151      	lsls	r1, r2, #5
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	440a      	add	r2, r1
 8008f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f2a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008f2e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008f32:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d11a      	bne.n	8008f70 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	691a      	ldr	r2, [r3, #16]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d903      	bls.n	8008f4e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	689a      	ldr	r2, [r3, #8]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	0151      	lsls	r1, r2, #5
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	440a      	add	r2, r1
 8008f64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f6c:	6113      	str	r3, [r2, #16]
 8008f6e:	e01b      	b.n	8008fa8 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f7c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	6919      	ldr	r1, [r3, #16]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	440b      	add	r3, r1
 8008f88:	1e59      	subs	r1, r3, #1
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f92:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008f94:	4b8d      	ldr	r3, [pc, #564]	@ (80091cc <USB_EPStartXfer+0x368>)
 8008f96:	400b      	ands	r3, r1
 8008f98:	6939      	ldr	r1, [r7, #16]
 8008f9a:	0148      	lsls	r0, r1, #5
 8008f9c:	6979      	ldr	r1, [r7, #20]
 8008f9e:	4401      	add	r1, r0
 8008fa0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	015a      	lsls	r2, r3, #5
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fb4:	691a      	ldr	r2, [r3, #16]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fbe:	6939      	ldr	r1, [r7, #16]
 8008fc0:	0148      	lsls	r0, r1, #5
 8008fc2:	6979      	ldr	r1, [r7, #20]
 8008fc4:	4401      	add	r1, r0
 8008fc6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	791b      	ldrb	r3, [r3, #4]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d11f      	bne.n	8009016 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	0151      	lsls	r1, r2, #5
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	440a      	add	r2, r1
 8008fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ff0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008ff4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	0151      	lsls	r1, r2, #5
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	440a      	add	r2, r1
 800900c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009010:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009014:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	0151      	lsls	r1, r2, #5
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	440a      	add	r2, r1
 800902c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009030:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009034:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	791b      	ldrb	r3, [r3, #4]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d015      	beq.n	800906a <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 8139 	beq.w	80092ba <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800904e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	f003 030f 	and.w	r3, r3, #15
 8009058:	2101      	movs	r1, #1
 800905a:	fa01 f303 	lsl.w	r3, r1, r3
 800905e:	6979      	ldr	r1, [r7, #20]
 8009060:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009064:	4313      	orrs	r3, r2
 8009066:	634b      	str	r3, [r1, #52]	@ 0x34
 8009068:	e127      	b.n	80092ba <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009076:	2b00      	cmp	r3, #0
 8009078:	d110      	bne.n	800909c <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	015a      	lsls	r2, r3, #5
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	4413      	add	r3, r2
 8009082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	0151      	lsls	r1, r2, #5
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	440a      	add	r2, r1
 8009090:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009094:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	e00f      	b.n	80090bc <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	0151      	lsls	r1, r2, #5
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	440a      	add	r2, r1
 80090b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090ba:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	68d9      	ldr	r1, [r3, #12]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	781a      	ldrb	r2, [r3, #0]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f9a6 	bl	800941c <USB_WritePacket>
 80090d0:	e0f3      	b.n	80092ba <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	0151      	lsls	r1, r2, #5
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	440a      	add	r2, r1
 80090e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090ec:	0cdb      	lsrs	r3, r3, #19
 80090ee:	04db      	lsls	r3, r3, #19
 80090f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	0151      	lsls	r1, r2, #5
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	440a      	add	r2, r1
 8009108:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800910c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009110:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009114:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d12f      	bne.n	800917c <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d003      	beq.n	800912c <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	689a      	ldr	r2, [r3, #8]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	689a      	ldr	r2, [r3, #8]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	4413      	add	r3, r2
 800913c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009140:	691a      	ldr	r2, [r3, #16]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800914a:	6939      	ldr	r1, [r7, #16]
 800914c:	0148      	lsls	r0, r1, #5
 800914e:	6979      	ldr	r1, [r7, #20]
 8009150:	4401      	add	r1, r0
 8009152:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009156:	4313      	orrs	r3, r2
 8009158:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	0151      	lsls	r1, r2, #5
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	440a      	add	r2, r1
 8009170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009174:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009178:	6113      	str	r3, [r2, #16]
 800917a:	e061      	b.n	8009240 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d125      	bne.n	80091d0 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009190:	691a      	ldr	r2, [r3, #16]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800919a:	6939      	ldr	r1, [r7, #16]
 800919c:	0148      	lsls	r0, r1, #5
 800919e:	6979      	ldr	r1, [r7, #20]
 80091a0:	4401      	add	r1, r0
 80091a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80091a6:	4313      	orrs	r3, r2
 80091a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	015a      	lsls	r2, r3, #5
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	4413      	add	r3, r2
 80091b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	0151      	lsls	r1, r2, #5
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	440a      	add	r2, r1
 80091c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091c8:	6113      	str	r3, [r2, #16]
 80091ca:	e039      	b.n	8009240 <USB_EPStartXfer+0x3dc>
 80091cc:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	691a      	ldr	r2, [r3, #16]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	4413      	add	r3, r2
 80091da:	1e5a      	subs	r2, r3, #1
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e4:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	89fa      	ldrh	r2, [r7, #14]
 80091ec:	fb03 f202 	mul.w	r2, r3, r2
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009200:	691a      	ldr	r2, [r3, #16]
 8009202:	89fb      	ldrh	r3, [r7, #14]
 8009204:	04d9      	lsls	r1, r3, #19
 8009206:	4b2f      	ldr	r3, [pc, #188]	@ (80092c4 <USB_EPStartXfer+0x460>)
 8009208:	400b      	ands	r3, r1
 800920a:	6939      	ldr	r1, [r7, #16]
 800920c:	0148      	lsls	r0, r1, #5
 800920e:	6979      	ldr	r1, [r7, #20]
 8009210:	4401      	add	r1, r0
 8009212:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009216:	4313      	orrs	r3, r2
 8009218:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	4413      	add	r3, r2
 8009222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009226:	691a      	ldr	r2, [r3, #16]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	6a1b      	ldr	r3, [r3, #32]
 800922c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009230:	6939      	ldr	r1, [r7, #16]
 8009232:	0148      	lsls	r0, r1, #5
 8009234:	6979      	ldr	r1, [r7, #20]
 8009236:	4401      	add	r1, r0
 8009238:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800923c:	4313      	orrs	r3, r2
 800923e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	791b      	ldrb	r3, [r3, #4]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d128      	bne.n	800929a <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009254:	2b00      	cmp	r3, #0
 8009256:	d110      	bne.n	800927a <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	0151      	lsls	r1, r2, #5
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	440a      	add	r2, r1
 800926e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009272:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	e00f      	b.n	800929a <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	4413      	add	r3, r2
 8009282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	0151      	lsls	r1, r2, #5
 800928c:	697a      	ldr	r2, [r7, #20]
 800928e:	440a      	add	r2, r1
 8009290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009298:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	0151      	lsls	r1, r2, #5
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	440a      	add	r2, r1
 80092b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80092b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	1ff80000 	.word	0x1ff80000

080092c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b087      	sub	sp, #28
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	785b      	ldrb	r3, [r3, #1]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d14a      	bne.n	800937c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092fe:	f040 8086 	bne.w	800940e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	7812      	ldrb	r2, [r2, #0]
 8009316:	0151      	lsls	r1, r2, #5
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	440a      	add	r2, r1
 800931c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009320:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009324:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	7812      	ldrb	r2, [r2, #0]
 800933a:	0151      	lsls	r1, r2, #5
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	440a      	add	r2, r1
 8009340:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009344:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009348:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	3301      	adds	r3, #1
 800934e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009356:	4293      	cmp	r3, r2
 8009358:	d902      	bls.n	8009360 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	75fb      	strb	r3, [r7, #23]
          break;
 800935e:	e056      	b.n	800940e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	4413      	add	r3, r2
 800936a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009374:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009378:	d0e7      	beq.n	800934a <USB_EPStopXfer+0x82>
 800937a:	e048      	b.n	800940e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	015a      	lsls	r2, r3, #5
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	4413      	add	r3, r2
 8009386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009390:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009394:	d13b      	bne.n	800940e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	7812      	ldrb	r2, [r2, #0]
 80093aa:	0151      	lsls	r1, r2, #5
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	440a      	add	r2, r1
 80093b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80093b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	7812      	ldrb	r2, [r2, #0]
 80093ce:	0151      	lsls	r1, r2, #5
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	440a      	add	r2, r1
 80093d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3301      	adds	r3, #1
 80093e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d902      	bls.n	80093f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	75fb      	strb	r3, [r7, #23]
          break;
 80093f2:	e00c      	b.n	800940e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009408:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800940c:	d0e7      	beq.n	80093de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800940e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009410:	4618      	mov	r0, r3
 8009412:	371c      	adds	r7, #28
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800941c:	b480      	push	{r7}
 800941e:	b089      	sub	sp, #36	@ 0x24
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	4611      	mov	r1, r2
 8009428:	461a      	mov	r2, r3
 800942a:	460b      	mov	r3, r1
 800942c:	71fb      	strb	r3, [r7, #7]
 800942e:	4613      	mov	r3, r2
 8009430:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800943a:	88bb      	ldrh	r3, [r7, #4]
 800943c:	3303      	adds	r3, #3
 800943e:	089b      	lsrs	r3, r3, #2
 8009440:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8009442:	2300      	movs	r3, #0
 8009444:	61bb      	str	r3, [r7, #24]
 8009446:	e018      	b.n	800947a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009448:	79fb      	ldrb	r3, [r7, #7]
 800944a:	031a      	lsls	r2, r3, #12
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	4413      	add	r3, r2
 8009450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009454:	461a      	mov	r2, r3
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	3301      	adds	r3, #1
 8009460:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	3301      	adds	r3, #1
 8009466:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	3301      	adds	r3, #1
 800946c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	3301      	adds	r3, #1
 8009472:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	3301      	adds	r3, #1
 8009478:	61bb      	str	r3, [r7, #24]
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	429a      	cmp	r2, r3
 8009480:	d3e2      	bcc.n	8009448 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3724      	adds	r7, #36	@ 0x24
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009490:	b480      	push	{r7}
 8009492:	b08b      	sub	sp, #44	@ 0x2c
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	4613      	mov	r3, r2
 800949c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80094a6:	88fb      	ldrh	r3, [r7, #6]
 80094a8:	089b      	lsrs	r3, r3, #2
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80094ae:	88fb      	ldrh	r3, [r7, #6]
 80094b0:	f003 0303 	and.w	r3, r3, #3
 80094b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80094b6:	2300      	movs	r3, #0
 80094b8:	623b      	str	r3, [r7, #32]
 80094ba:	e014      	b.n	80094e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80094c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ca:	3301      	adds	r3, #1
 80094cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80094ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d0:	3301      	adds	r3, #1
 80094d2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80094d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d6:	3301      	adds	r3, #1
 80094d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80094da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094dc:	3301      	adds	r3, #1
 80094de:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	3301      	adds	r3, #1
 80094e4:	623b      	str	r3, [r7, #32]
 80094e6:	6a3a      	ldr	r2, [r7, #32]
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d3e6      	bcc.n	80094bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80094ee:	8bfb      	ldrh	r3, [r7, #30]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d01e      	beq.n	8009532 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80094f4:	2300      	movs	r3, #0
 80094f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094fe:	461a      	mov	r2, r3
 8009500:	f107 0310 	add.w	r3, r7, #16
 8009504:	6812      	ldr	r2, [r2, #0]
 8009506:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	b2db      	uxtb	r3, r3
 800950e:	00db      	lsls	r3, r3, #3
 8009510:	fa22 f303 	lsr.w	r3, r2, r3
 8009514:	b2da      	uxtb	r2, r3
 8009516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009518:	701a      	strb	r2, [r3, #0]
      i++;
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	3301      	adds	r3, #1
 800951e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009522:	3301      	adds	r3, #1
 8009524:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009526:	8bfb      	ldrh	r3, [r7, #30]
 8009528:	3b01      	subs	r3, #1
 800952a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800952c:	8bfb      	ldrh	r3, [r7, #30]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1ea      	bne.n	8009508 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009534:	4618      	mov	r0, r3
 8009536:	372c      	adds	r7, #44	@ 0x2c
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	785b      	ldrb	r3, [r3, #1]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d12c      	bne.n	80095b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	db12      	blt.n	8009594 <USB_EPSetStall+0x54>
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00f      	beq.n	8009594 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	0151      	lsls	r1, r2, #5
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	440a      	add	r2, r1
 800958a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800958e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009592:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	015a      	lsls	r2, r3, #5
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	4413      	add	r3, r2
 800959c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	0151      	lsls	r1, r2, #5
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	440a      	add	r2, r1
 80095aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80095b2:	6013      	str	r3, [r2, #0]
 80095b4:	e02b      	b.n	800960e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	015a      	lsls	r2, r3, #5
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	4413      	add	r3, r2
 80095be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	db12      	blt.n	80095ee <USB_EPSetStall+0xae>
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00f      	beq.n	80095ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80095ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	015a      	lsls	r2, r3, #5
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	4413      	add	r3, r2
 80095f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	0151      	lsls	r1, r2, #5
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	440a      	add	r2, r1
 8009604:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009608:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800960c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	785b      	ldrb	r3, [r3, #1]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d128      	bne.n	800968a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	015a      	lsls	r2, r3, #5
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	4413      	add	r3, r2
 8009640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	0151      	lsls	r1, r2, #5
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	440a      	add	r2, r1
 800964e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009652:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009656:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	791b      	ldrb	r3, [r3, #4]
 800965c:	2b03      	cmp	r3, #3
 800965e:	d003      	beq.n	8009668 <USB_EPClearStall+0x4c>
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	791b      	ldrb	r3, [r3, #4]
 8009664:	2b02      	cmp	r3, #2
 8009666:	d138      	bne.n	80096da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	0151      	lsls	r1, r2, #5
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	440a      	add	r2, r1
 800967e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	e027      	b.n	80096da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	4413      	add	r3, r2
 8009692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	0151      	lsls	r1, r2, #5
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	440a      	add	r2, r1
 80096a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	791b      	ldrb	r3, [r3, #4]
 80096ae:	2b03      	cmp	r3, #3
 80096b0:	d003      	beq.n	80096ba <USB_EPClearStall+0x9e>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	791b      	ldrb	r3, [r3, #4]
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d10f      	bne.n	80096da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	0151      	lsls	r1, r2, #5
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	440a      	add	r2, r1
 80096d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	460b      	mov	r3, r1
 80096f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009706:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800970a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	78fb      	ldrb	r3, [r7, #3]
 8009716:	011b      	lsls	r3, r3, #4
 8009718:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800971c:	68f9      	ldr	r1, [r7, #12]
 800971e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009722:	4313      	orrs	r3, r2
 8009724:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800974e:	f023 0303 	bic.w	r3, r3, #3
 8009752:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009762:	f023 0302 	bic.w	r3, r3, #2
 8009766:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009776:	b480      	push	{r7}
 8009778:	b085      	sub	sp, #20
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009790:	f023 0303 	bic.w	r3, r3, #3
 8009794:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097a4:	f043 0302 	orr.w	r3, r3, #2
 80097a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4013      	ands	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80097d0:	68fb      	ldr	r3, [r7, #12]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80097de:	b480      	push	{r7}
 80097e0:	b085      	sub	sp, #20
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097fa:	69db      	ldr	r3, [r3, #28]
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	4013      	ands	r3, r2
 8009800:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	0c1b      	lsrs	r3, r3, #16
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009812:	b480      	push	{r7}
 8009814:	b085      	sub	sp, #20
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800982e:	69db      	ldr	r3, [r3, #28]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	4013      	ands	r3, r2
 8009834:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	b29b      	uxth	r3, r3
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009846:	b480      	push	{r7}
 8009848:	b085      	sub	sp, #20
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	460b      	mov	r3, r1
 8009850:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009856:	78fb      	ldrb	r3, [r7, #3]
 8009858:	015a      	lsls	r2, r3, #5
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	4413      	add	r3, r2
 800985e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	4013      	ands	r3, r2
 8009872:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009874:	68bb      	ldr	r3, [r7, #8]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009882:	b480      	push	{r7}
 8009884:	b087      	sub	sp, #28
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	460b      	mov	r3, r1
 800988c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80098a6:	78fb      	ldrb	r3, [r7, #3]
 80098a8:	f003 030f 	and.w	r3, r3, #15
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	fa22 f303 	lsr.w	r3, r2, r3
 80098b2:	01db      	lsls	r3, r3, #7
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80098bc:	78fb      	ldrb	r3, [r7, #3]
 80098be:	015a      	lsls	r2, r3, #5
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	4413      	add	r3, r2
 80098c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	4013      	ands	r3, r2
 80098ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098d0:	68bb      	ldr	r3, [r7, #8]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	371c      	adds	r7, #28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr

080098de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80098de:	b480      	push	{r7}
 80098e0:	b083      	sub	sp, #12
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	f003 0301 	and.w	r3, r3, #1
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b085      	sub	sp, #20
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009914:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009918:	f023 0307 	bic.w	r3, r3, #7
 800991c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800992c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009930:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	333c      	adds	r3, #60	@ 0x3c
 8009952:	3304      	adds	r3, #4
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	4a1c      	ldr	r2, [pc, #112]	@ (80099cc <USB_EP0_OutStart+0x8c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d90a      	bls.n	8009976 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800996c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009970:	d101      	bne.n	8009976 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	e024      	b.n	80099c0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800997c:	461a      	mov	r2, r3
 800997e:	2300      	movs	r3, #0
 8009980:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009990:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009994:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099a4:	f043 0318 	orr.w	r3, r3, #24
 80099a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099b8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80099bc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	4f54300a 	.word	0x4f54300a

080099d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	3301      	adds	r3, #1
 80099e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	4a13      	ldr	r2, [pc, #76]	@ (8009a34 <USB_CoreReset+0x64>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d901      	bls.n	80099ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e01b      	b.n	8009a26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	daf2      	bge.n	80099dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	f043 0201 	orr.w	r2, r3, #1
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4a09      	ldr	r2, [pc, #36]	@ (8009a34 <USB_CoreReset+0x64>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d901      	bls.n	8009a18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	e006      	b.n	8009a26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d0f0      	beq.n	8009a06 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	00030d40 	.word	0x00030d40

08009a38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a44:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009a48:	f002 fe2c 	bl	800c6a4 <USBD_static_malloc>
 8009a4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d109      	bne.n	8009a68 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	32b0      	adds	r2, #176	@ 0xb0
 8009a5e:	2100      	movs	r1, #0
 8009a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009a64:	2302      	movs	r3, #2
 8009a66:	e0d4      	b.n	8009c12 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009a68:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f002 fef4 	bl	800c85c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	32b0      	adds	r2, #176	@ 0xb0
 8009a7e:	68f9      	ldr	r1, [r7, #12]
 8009a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	32b0      	adds	r2, #176	@ 0xb0
 8009a8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	7c1b      	ldrb	r3, [r3, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d138      	bne.n	8009b12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009aa0:	4b5e      	ldr	r3, [pc, #376]	@ (8009c1c <USBD_CDC_Init+0x1e4>)
 8009aa2:	7819      	ldrb	r1, [r3, #0]
 8009aa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009aa8:	2202      	movs	r2, #2
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f002 fbe6 	bl	800c27c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ab0:	4b5a      	ldr	r3, [pc, #360]	@ (8009c1c <USBD_CDC_Init+0x1e4>)
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	f003 020f 	and.w	r2, r3, #15
 8009ab8:	6879      	ldr	r1, [r7, #4]
 8009aba:	4613      	mov	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	440b      	add	r3, r1
 8009ac4:	3324      	adds	r3, #36	@ 0x24
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009aca:	4b55      	ldr	r3, [pc, #340]	@ (8009c20 <USBD_CDC_Init+0x1e8>)
 8009acc:	7819      	ldrb	r1, [r3, #0]
 8009ace:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f002 fbd1 	bl	800c27c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009ada:	4b51      	ldr	r3, [pc, #324]	@ (8009c20 <USBD_CDC_Init+0x1e8>)
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	f003 020f 	and.w	r2, r3, #15
 8009ae2:	6879      	ldr	r1, [r7, #4]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	440b      	add	r3, r1
 8009aee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009af2:	2201      	movs	r2, #1
 8009af4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009af6:	4b4b      	ldr	r3, [pc, #300]	@ (8009c24 <USBD_CDC_Init+0x1ec>)
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	f003 020f 	and.w	r2, r3, #15
 8009afe:	6879      	ldr	r1, [r7, #4]
 8009b00:	4613      	mov	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	440b      	add	r3, r1
 8009b0a:	3326      	adds	r3, #38	@ 0x26
 8009b0c:	2210      	movs	r2, #16
 8009b0e:	801a      	strh	r2, [r3, #0]
 8009b10:	e035      	b.n	8009b7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b12:	4b42      	ldr	r3, [pc, #264]	@ (8009c1c <USBD_CDC_Init+0x1e4>)
 8009b14:	7819      	ldrb	r1, [r3, #0]
 8009b16:	2340      	movs	r3, #64	@ 0x40
 8009b18:	2202      	movs	r2, #2
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f002 fbae 	bl	800c27c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b20:	4b3e      	ldr	r3, [pc, #248]	@ (8009c1c <USBD_CDC_Init+0x1e4>)
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	f003 020f 	and.w	r2, r3, #15
 8009b28:	6879      	ldr	r1, [r7, #4]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	440b      	add	r3, r1
 8009b34:	3324      	adds	r3, #36	@ 0x24
 8009b36:	2201      	movs	r2, #1
 8009b38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b3a:	4b39      	ldr	r3, [pc, #228]	@ (8009c20 <USBD_CDC_Init+0x1e8>)
 8009b3c:	7819      	ldrb	r1, [r3, #0]
 8009b3e:	2340      	movs	r3, #64	@ 0x40
 8009b40:	2202      	movs	r2, #2
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f002 fb9a 	bl	800c27c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b48:	4b35      	ldr	r3, [pc, #212]	@ (8009c20 <USBD_CDC_Init+0x1e8>)
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	f003 020f 	and.w	r2, r3, #15
 8009b50:	6879      	ldr	r1, [r7, #4]
 8009b52:	4613      	mov	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	440b      	add	r3, r1
 8009b5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b60:	2201      	movs	r2, #1
 8009b62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009b64:	4b2f      	ldr	r3, [pc, #188]	@ (8009c24 <USBD_CDC_Init+0x1ec>)
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	f003 020f 	and.w	r2, r3, #15
 8009b6c:	6879      	ldr	r1, [r7, #4]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4413      	add	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	440b      	add	r3, r1
 8009b78:	3326      	adds	r3, #38	@ 0x26
 8009b7a:	2210      	movs	r2, #16
 8009b7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009b7e:	4b29      	ldr	r3, [pc, #164]	@ (8009c24 <USBD_CDC_Init+0x1ec>)
 8009b80:	7819      	ldrb	r1, [r3, #0]
 8009b82:	2308      	movs	r3, #8
 8009b84:	2203      	movs	r2, #3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f002 fb78 	bl	800c27c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009b8c:	4b25      	ldr	r3, [pc, #148]	@ (8009c24 <USBD_CDC_Init+0x1ec>)
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	f003 020f 	and.w	r2, r3, #15
 8009b94:	6879      	ldr	r1, [r7, #4]
 8009b96:	4613      	mov	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	440b      	add	r3, r1
 8009ba0:	3324      	adds	r3, #36	@ 0x24
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	33b0      	adds	r3, #176	@ 0xb0
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4413      	add	r3, r2
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009bdc:	2302      	movs	r3, #2
 8009bde:	e018      	b.n	8009c12 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	7c1b      	ldrb	r3, [r3, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10a      	bne.n	8009bfe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009be8:	4b0d      	ldr	r3, [pc, #52]	@ (8009c20 <USBD_CDC_Init+0x1e8>)
 8009bea:	7819      	ldrb	r1, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009bf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f002 fcba 	bl	800c570 <USBD_LL_PrepareReceive>
 8009bfc:	e008      	b.n	8009c10 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009bfe:	4b08      	ldr	r3, [pc, #32]	@ (8009c20 <USBD_CDC_Init+0x1e8>)
 8009c00:	7819      	ldrb	r1, [r3, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c08:	2340      	movs	r3, #64	@ 0x40
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f002 fcb0 	bl	800c570 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20000093 	.word	0x20000093
 8009c20:	20000094 	.word	0x20000094
 8009c24:	20000095 	.word	0x20000095

08009c28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	460b      	mov	r3, r1
 8009c32:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009c34:	4b3a      	ldr	r3, [pc, #232]	@ (8009d20 <USBD_CDC_DeInit+0xf8>)
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	4619      	mov	r1, r3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f002 fb5c 	bl	800c2f8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009c40:	4b37      	ldr	r3, [pc, #220]	@ (8009d20 <USBD_CDC_DeInit+0xf8>)
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	f003 020f 	and.w	r2, r3, #15
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	440b      	add	r3, r1
 8009c54:	3324      	adds	r3, #36	@ 0x24
 8009c56:	2200      	movs	r2, #0
 8009c58:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009c5a:	4b32      	ldr	r3, [pc, #200]	@ (8009d24 <USBD_CDC_DeInit+0xfc>)
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f002 fb49 	bl	800c2f8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009c66:	4b2f      	ldr	r3, [pc, #188]	@ (8009d24 <USBD_CDC_DeInit+0xfc>)
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	f003 020f 	and.w	r2, r3, #15
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	4613      	mov	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	440b      	add	r3, r1
 8009c7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c7e:	2200      	movs	r2, #0
 8009c80:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009c82:	4b29      	ldr	r3, [pc, #164]	@ (8009d28 <USBD_CDC_DeInit+0x100>)
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f002 fb35 	bl	800c2f8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009c8e:	4b26      	ldr	r3, [pc, #152]	@ (8009d28 <USBD_CDC_DeInit+0x100>)
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	f003 020f 	and.w	r2, r3, #15
 8009c96:	6879      	ldr	r1, [r7, #4]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	440b      	add	r3, r1
 8009ca2:	3324      	adds	r3, #36	@ 0x24
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8009d28 <USBD_CDC_DeInit+0x100>)
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	f003 020f 	and.w	r2, r3, #15
 8009cb0:	6879      	ldr	r1, [r7, #4]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	440b      	add	r3, r1
 8009cbc:	3326      	adds	r3, #38	@ 0x26
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	32b0      	adds	r2, #176	@ 0xb0
 8009ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d01f      	beq.n	8009d14 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	33b0      	adds	r3, #176	@ 0xb0
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4413      	add	r3, r2
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	32b0      	adds	r2, #176	@ 0xb0
 8009cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f002 fce2 	bl	800c6c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	32b0      	adds	r2, #176	@ 0xb0
 8009d06:	2100      	movs	r1, #0
 8009d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	20000093 	.word	0x20000093
 8009d24:	20000094 	.word	0x20000094
 8009d28:	20000095 	.word	0x20000095

08009d2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	32b0      	adds	r2, #176	@ 0xb0
 8009d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d46:	2300      	movs	r3, #0
 8009d48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e0bf      	b.n	8009edc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d050      	beq.n	8009e0a <USBD_CDC_Setup+0xde>
 8009d68:	2b20      	cmp	r3, #32
 8009d6a:	f040 80af 	bne.w	8009ecc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	88db      	ldrh	r3, [r3, #6]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d03a      	beq.n	8009dec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	b25b      	sxtb	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	da1b      	bge.n	8009db8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	33b0      	adds	r3, #176	@ 0xb0
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009d96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d98:	683a      	ldr	r2, [r7, #0]
 8009d9a:	88d2      	ldrh	r2, [r2, #6]
 8009d9c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	88db      	ldrh	r3, [r3, #6]
 8009da2:	2b07      	cmp	r3, #7
 8009da4:	bf28      	it	cs
 8009da6:	2307      	movcs	r3, #7
 8009da8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	89fa      	ldrh	r2, [r7, #14]
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f001 fdb1 	bl	800b918 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009db6:	e090      	b.n	8009eda <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	785a      	ldrb	r2, [r3, #1]
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	88db      	ldrh	r3, [r3, #6]
 8009dc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8009dc8:	d803      	bhi.n	8009dd2 <USBD_CDC_Setup+0xa6>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	88db      	ldrh	r3, [r3, #6]
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	e000      	b.n	8009dd4 <USBD_CDC_Setup+0xa8>
 8009dd2:	2240      	movs	r2, #64	@ 0x40
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009dda:	6939      	ldr	r1, [r7, #16]
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009de2:	461a      	mov	r2, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f001 fdc3 	bl	800b970 <USBD_CtlPrepareRx>
      break;
 8009dea:	e076      	b.n	8009eda <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	33b0      	adds	r3, #176	@ 0xb0
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	4413      	add	r3, r2
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	7850      	ldrb	r0, [r2, #1]
 8009e02:	2200      	movs	r2, #0
 8009e04:	6839      	ldr	r1, [r7, #0]
 8009e06:	4798      	blx	r3
      break;
 8009e08:	e067      	b.n	8009eda <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	785b      	ldrb	r3, [r3, #1]
 8009e0e:	2b0b      	cmp	r3, #11
 8009e10:	d851      	bhi.n	8009eb6 <USBD_CDC_Setup+0x18a>
 8009e12:	a201      	add	r2, pc, #4	@ (adr r2, 8009e18 <USBD_CDC_Setup+0xec>)
 8009e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e18:	08009e49 	.word	0x08009e49
 8009e1c:	08009ec5 	.word	0x08009ec5
 8009e20:	08009eb7 	.word	0x08009eb7
 8009e24:	08009eb7 	.word	0x08009eb7
 8009e28:	08009eb7 	.word	0x08009eb7
 8009e2c:	08009eb7 	.word	0x08009eb7
 8009e30:	08009eb7 	.word	0x08009eb7
 8009e34:	08009eb7 	.word	0x08009eb7
 8009e38:	08009eb7 	.word	0x08009eb7
 8009e3c:	08009eb7 	.word	0x08009eb7
 8009e40:	08009e73 	.word	0x08009e73
 8009e44:	08009e9d 	.word	0x08009e9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d107      	bne.n	8009e64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e54:	f107 030a 	add.w	r3, r7, #10
 8009e58:	2202      	movs	r2, #2
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f001 fd5b 	bl	800b918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e62:	e032      	b.n	8009eca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f001 fce5 	bl	800b836 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	75fb      	strb	r3, [r7, #23]
          break;
 8009e70:	e02b      	b.n	8009eca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d107      	bne.n	8009e8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e7e:	f107 030d 	add.w	r3, r7, #13
 8009e82:	2201      	movs	r2, #1
 8009e84:	4619      	mov	r1, r3
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f001 fd46 	bl	800b918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e8c:	e01d      	b.n	8009eca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f001 fcd0 	bl	800b836 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e96:	2303      	movs	r3, #3
 8009e98:	75fb      	strb	r3, [r7, #23]
          break;
 8009e9a:	e016      	b.n	8009eca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	2b03      	cmp	r3, #3
 8009ea6:	d00f      	beq.n	8009ec8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 fcc3 	bl	800b836 <USBD_CtlError>
            ret = USBD_FAIL;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009eb4:	e008      	b.n	8009ec8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f001 fcbc 	bl	800b836 <USBD_CtlError>
          ret = USBD_FAIL;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ec2:	e002      	b.n	8009eca <USBD_CDC_Setup+0x19e>
          break;
 8009ec4:	bf00      	nop
 8009ec6:	e008      	b.n	8009eda <USBD_CDC_Setup+0x1ae>
          break;
 8009ec8:	bf00      	nop
      }
      break;
 8009eca:	e006      	b.n	8009eda <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009ecc:	6839      	ldr	r1, [r7, #0]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f001 fcb1 	bl	800b836 <USBD_CtlError>
      ret = USBD_FAIL;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ed8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ef6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	32b0      	adds	r2, #176	@ 0xb0
 8009f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d101      	bne.n	8009f0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009f0a:	2303      	movs	r3, #3
 8009f0c:	e065      	b.n	8009fda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	32b0      	adds	r2, #176	@ 0xb0
 8009f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f1e:	78fb      	ldrb	r3, [r7, #3]
 8009f20:	f003 020f 	and.w	r2, r3, #15
 8009f24:	6879      	ldr	r1, [r7, #4]
 8009f26:	4613      	mov	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4413      	add	r3, r2
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	440b      	add	r3, r1
 8009f30:	3318      	adds	r3, #24
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d02f      	beq.n	8009f98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009f38:	78fb      	ldrb	r3, [r7, #3]
 8009f3a:	f003 020f 	and.w	r2, r3, #15
 8009f3e:	6879      	ldr	r1, [r7, #4]
 8009f40:	4613      	mov	r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	440b      	add	r3, r1
 8009f4a:	3318      	adds	r3, #24
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	78fb      	ldrb	r3, [r7, #3]
 8009f50:	f003 010f 	and.w	r1, r3, #15
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	460b      	mov	r3, r1
 8009f58:	00db      	lsls	r3, r3, #3
 8009f5a:	440b      	add	r3, r1
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4403      	add	r3, r0
 8009f60:	3344      	adds	r3, #68	@ 0x44
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f68:	fb01 f303 	mul.w	r3, r1, r3
 8009f6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d112      	bne.n	8009f98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009f72:	78fb      	ldrb	r3, [r7, #3]
 8009f74:	f003 020f 	and.w	r2, r3, #15
 8009f78:	6879      	ldr	r1, [r7, #4]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	440b      	add	r3, r1
 8009f84:	3318      	adds	r3, #24
 8009f86:	2200      	movs	r2, #0
 8009f88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f8a:	78f9      	ldrb	r1, [r7, #3]
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	2200      	movs	r2, #0
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f002 fab5 	bl	800c500 <USBD_LL_Transmit>
 8009f96:	e01f      	b.n	8009fd8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	33b0      	adds	r3, #176	@ 0xb0
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4413      	add	r3, r2
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d010      	beq.n	8009fd8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	33b0      	adds	r3, #176	@ 0xb0
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009fd4:	78fa      	ldrb	r2, [r7, #3]
 8009fd6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b084      	sub	sp, #16
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	460b      	mov	r3, r1
 8009fec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	32b0      	adds	r2, #176	@ 0xb0
 8009ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ffc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	32b0      	adds	r2, #176	@ 0xb0
 800a008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a010:	2303      	movs	r3, #3
 800a012:	e01a      	b.n	800a04a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f002 fae1 	bl	800c5e0 <USBD_LL_GetRxDataSize>
 800a01e:	4602      	mov	r2, r0
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	33b0      	adds	r3, #176	@ 0xb0
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a044:	4611      	mov	r1, r2
 800a046:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	32b0      	adds	r2, #176	@ 0xb0
 800a064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a068:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a070:	2303      	movs	r3, #3
 800a072:	e024      	b.n	800a0be <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	33b0      	adds	r3, #176	@ 0xb0
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d019      	beq.n	800a0bc <USBD_CDC_EP0_RxReady+0x6a>
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a08e:	2bff      	cmp	r3, #255	@ 0xff
 800a090:	d014      	beq.n	800a0bc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	33b0      	adds	r3, #176	@ 0xb0
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	4413      	add	r3, r2
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a0aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a0b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	22ff      	movs	r2, #255	@ 0xff
 800a0b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a0d0:	2182      	movs	r1, #130	@ 0x82
 800a0d2:	4818      	ldr	r0, [pc, #96]	@ (800a134 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a0d4:	f000 fd4f 	bl	800ab76 <USBD_GetEpDesc>
 800a0d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a0da:	2101      	movs	r1, #1
 800a0dc:	4815      	ldr	r0, [pc, #84]	@ (800a134 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a0de:	f000 fd4a 	bl	800ab76 <USBD_GetEpDesc>
 800a0e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a0e4:	2181      	movs	r1, #129	@ 0x81
 800a0e6:	4813      	ldr	r0, [pc, #76]	@ (800a134 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a0e8:	f000 fd45 	bl	800ab76 <USBD_GetEpDesc>
 800a0ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	2210      	movs	r2, #16
 800a0f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d006      	beq.n	800a10e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	2200      	movs	r2, #0
 800a104:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a108:	711a      	strb	r2, [r3, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d006      	beq.n	800a122 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a11c:	711a      	strb	r2, [r3, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2243      	movs	r2, #67	@ 0x43
 800a126:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a128:	4b02      	ldr	r3, [pc, #8]	@ (800a134 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000050 	.word	0x20000050

0800a138 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a140:	2182      	movs	r1, #130	@ 0x82
 800a142:	4818      	ldr	r0, [pc, #96]	@ (800a1a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a144:	f000 fd17 	bl	800ab76 <USBD_GetEpDesc>
 800a148:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a14a:	2101      	movs	r1, #1
 800a14c:	4815      	ldr	r0, [pc, #84]	@ (800a1a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a14e:	f000 fd12 	bl	800ab76 <USBD_GetEpDesc>
 800a152:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a154:	2181      	movs	r1, #129	@ 0x81
 800a156:	4813      	ldr	r0, [pc, #76]	@ (800a1a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a158:	f000 fd0d 	bl	800ab76 <USBD_GetEpDesc>
 800a15c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	2210      	movs	r2, #16
 800a168:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d006      	beq.n	800a17e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	2200      	movs	r2, #0
 800a174:	711a      	strb	r2, [r3, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f042 0202 	orr.w	r2, r2, #2
 800a17c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d006      	beq.n	800a192 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	711a      	strb	r2, [r3, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f042 0202 	orr.w	r2, r2, #2
 800a190:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2243      	movs	r2, #67	@ 0x43
 800a196:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a198:	4b02      	ldr	r3, [pc, #8]	@ (800a1a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20000050 	.word	0x20000050

0800a1a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1b0:	2182      	movs	r1, #130	@ 0x82
 800a1b2:	4818      	ldr	r0, [pc, #96]	@ (800a214 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a1b4:	f000 fcdf 	bl	800ab76 <USBD_GetEpDesc>
 800a1b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	4815      	ldr	r0, [pc, #84]	@ (800a214 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a1be:	f000 fcda 	bl	800ab76 <USBD_GetEpDesc>
 800a1c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1c4:	2181      	movs	r1, #129	@ 0x81
 800a1c6:	4813      	ldr	r0, [pc, #76]	@ (800a214 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a1c8:	f000 fcd5 	bl	800ab76 <USBD_GetEpDesc>
 800a1cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2210      	movs	r2, #16
 800a1d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d006      	beq.n	800a1ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1e8:	711a      	strb	r2, [r3, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d006      	beq.n	800a202 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1fc:	711a      	strb	r2, [r3, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2243      	movs	r2, #67	@ 0x43
 800a206:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a208:	4b02      	ldr	r3, [pc, #8]	@ (800a214 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20000050 	.word	0x20000050

0800a218 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	220a      	movs	r2, #10
 800a224:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a226:	4b03      	ldr	r3, [pc, #12]	@ (800a234 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	2000000c 	.word	0x2000000c

0800a238 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a248:	2303      	movs	r3, #3
 800a24a:	e009      	b.n	800a260 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	33b0      	adds	r3, #176	@ 0xb0
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b087      	sub	sp, #28
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	32b0      	adds	r2, #176	@ 0xb0
 800a282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a286:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a28e:	2303      	movs	r3, #3
 800a290:	e008      	b.n	800a2a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	371c      	adds	r7, #28
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b085      	sub	sp, #20
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	32b0      	adds	r2, #176	@ 0xb0
 800a2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e004      	b.n	800a2de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	683a      	ldr	r2, [r7, #0]
 800a2d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
	...

0800a2ec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	32b0      	adds	r2, #176	@ 0xb0
 800a2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a302:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a304:	2301      	movs	r3, #1
 800a306:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d101      	bne.n	800a312 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a30e:	2303      	movs	r3, #3
 800a310:	e025      	b.n	800a35e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d11f      	bne.n	800a35c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	2201      	movs	r2, #1
 800a320:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a324:	4b10      	ldr	r3, [pc, #64]	@ (800a368 <USBD_CDC_TransmitPacket+0x7c>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	f003 020f 	and.w	r2, r3, #15
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4613      	mov	r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4413      	add	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4403      	add	r3, r0
 800a33e:	3318      	adds	r3, #24
 800a340:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a342:	4b09      	ldr	r3, [pc, #36]	@ (800a368 <USBD_CDC_TransmitPacket+0x7c>)
 800a344:	7819      	ldrb	r1, [r3, #0]
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f002 f8d4 	bl	800c500 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20000093 	.word	0x20000093

0800a36c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	32b0      	adds	r2, #176	@ 0xb0
 800a37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a382:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	32b0      	adds	r2, #176	@ 0xb0
 800a38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d101      	bne.n	800a39a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a396:	2303      	movs	r3, #3
 800a398:	e018      	b.n	800a3cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	7c1b      	ldrb	r3, [r3, #16]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10a      	bne.n	800a3b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d4 <USBD_CDC_ReceivePacket+0x68>)
 800a3a4:	7819      	ldrb	r1, [r3, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a3ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f002 f8dd 	bl	800c570 <USBD_LL_PrepareReceive>
 800a3b6:	e008      	b.n	800a3ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3b8:	4b06      	ldr	r3, [pc, #24]	@ (800a3d4 <USBD_CDC_ReceivePacket+0x68>)
 800a3ba:	7819      	ldrb	r1, [r3, #0]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a3c2:	2340      	movs	r3, #64	@ 0x40
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f002 f8d3 	bl	800c570 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	20000094 	.word	0x20000094

0800a3d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e01f      	b.n	800a430 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d003      	beq.n	800a416 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	79fa      	ldrb	r2, [r7, #7]
 800a422:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f001 feab 	bl	800c180 <USBD_LL_Init>
 800a42a:	4603      	mov	r3, r0
 800a42c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a42e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a430:	4618      	mov	r0, r3
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a442:	2300      	movs	r3, #0
 800a444:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d101      	bne.n	800a450 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e025      	b.n	800a49c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	32ae      	adds	r2, #174	@ 0xae
 800a462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00f      	beq.n	800a48c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	32ae      	adds	r2, #174	@ 0xae
 800a476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a47c:	f107 020e 	add.w	r2, r7, #14
 800a480:	4610      	mov	r0, r2
 800a482:	4798      	blx	r3
 800a484:	4602      	mov	r2, r0
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a492:	1c5a      	adds	r2, r3, #1
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f001 feb3 	bl	800c218 <USBD_LL_Start>
 800a4b2:	4603      	mov	r3, r0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	460b      	mov	r3, r1
 800a4dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d009      	beq.n	800a500 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	78fa      	ldrb	r2, [r7, #3]
 800a4f6:	4611      	mov	r1, r2
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	4798      	blx	r3
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a500:	7bfb      	ldrb	r3, [r7, #15]
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	460b      	mov	r3, r1
 800a514:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	78fa      	ldrb	r2, [r7, #3]
 800a524:	4611      	mov	r1, r2
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	4798      	blx	r3
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d001      	beq.n	800a534 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a530:	2303      	movs	r3, #3
 800a532:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a534:	7bfb      	ldrb	r3, [r7, #15]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	4618      	mov	r0, r3
 800a552:	f001 f936 	bl	800b7c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a564:	461a      	mov	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a572:	f003 031f 	and.w	r3, r3, #31
 800a576:	2b02      	cmp	r3, #2
 800a578:	d01a      	beq.n	800a5b0 <USBD_LL_SetupStage+0x72>
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d822      	bhi.n	800a5c4 <USBD_LL_SetupStage+0x86>
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <USBD_LL_SetupStage+0x4a>
 800a582:	2b01      	cmp	r3, #1
 800a584:	d00a      	beq.n	800a59c <USBD_LL_SetupStage+0x5e>
 800a586:	e01d      	b.n	800a5c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a58e:	4619      	mov	r1, r3
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fb63 	bl	800ac5c <USBD_StdDevReq>
 800a596:	4603      	mov	r3, r0
 800a598:	73fb      	strb	r3, [r7, #15]
      break;
 800a59a:	e020      	b.n	800a5de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 fbcb 	bl	800ad40 <USBD_StdItfReq>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ae:	e016      	b.n	800a5de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fc2d 	bl	800ae18 <USBD_StdEPReq>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c2:	e00c      	b.n	800a5de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a5ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f001 fec6 	bl	800c364 <USBD_LL_StallEP>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73fb      	strb	r3, [r7, #15]
      break;
 800a5dc:	bf00      	nop
  }

  return ret;
 800a5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a5fa:	7afb      	ldrb	r3, [r7, #11]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d16e      	bne.n	800a6de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a606:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a60e:	2b03      	cmp	r3, #3
 800a610:	f040 8098 	bne.w	800a744 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	689a      	ldr	r2, [r3, #8]
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d913      	bls.n	800a648 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	1ad2      	subs	r2, r2, r3
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	68da      	ldr	r2, [r3, #12]
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	4293      	cmp	r3, r2
 800a638:	bf28      	it	cs
 800a63a:	4613      	movcs	r3, r2
 800a63c:	461a      	mov	r2, r3
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f001 f9b2 	bl	800b9aa <USBD_CtlContinueRx>
 800a646:	e07d      	b.n	800a744 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a64e:	f003 031f 	and.w	r3, r3, #31
 800a652:	2b02      	cmp	r3, #2
 800a654:	d014      	beq.n	800a680 <USBD_LL_DataOutStage+0x98>
 800a656:	2b02      	cmp	r3, #2
 800a658:	d81d      	bhi.n	800a696 <USBD_LL_DataOutStage+0xae>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d002      	beq.n	800a664 <USBD_LL_DataOutStage+0x7c>
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d003      	beq.n	800a66a <USBD_LL_DataOutStage+0x82>
 800a662:	e018      	b.n	800a696 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a664:	2300      	movs	r3, #0
 800a666:	75bb      	strb	r3, [r7, #22]
            break;
 800a668:	e018      	b.n	800a69c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a670:	b2db      	uxtb	r3, r3
 800a672:	4619      	mov	r1, r3
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 fa64 	bl	800ab42 <USBD_CoreFindIF>
 800a67a:	4603      	mov	r3, r0
 800a67c:	75bb      	strb	r3, [r7, #22]
            break;
 800a67e:	e00d      	b.n	800a69c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a686:	b2db      	uxtb	r3, r3
 800a688:	4619      	mov	r1, r3
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f000 fa66 	bl	800ab5c <USBD_CoreFindEP>
 800a690:	4603      	mov	r3, r0
 800a692:	75bb      	strb	r3, [r7, #22]
            break;
 800a694:	e002      	b.n	800a69c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a696:	2300      	movs	r3, #0
 800a698:	75bb      	strb	r3, [r7, #22]
            break;
 800a69a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a69c:	7dbb      	ldrb	r3, [r7, #22]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d119      	bne.n	800a6d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b03      	cmp	r3, #3
 800a6ac:	d113      	bne.n	800a6d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a6ae:	7dba      	ldrb	r2, [r7, #22]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	32ae      	adds	r2, #174	@ 0xae
 800a6b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00b      	beq.n	800a6d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a6be:	7dba      	ldrb	r2, [r7, #22]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a6c6:	7dba      	ldrb	r2, [r7, #22]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	32ae      	adds	r2, #174	@ 0xae
 800a6cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f001 f978 	bl	800b9cc <USBD_CtlSendStatus>
 800a6dc:	e032      	b.n	800a744 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a6de:	7afb      	ldrb	r3, [r7, #11]
 800a6e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f000 fa37 	bl	800ab5c <USBD_CoreFindEP>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6f2:	7dbb      	ldrb	r3, [r7, #22]
 800a6f4:	2bff      	cmp	r3, #255	@ 0xff
 800a6f6:	d025      	beq.n	800a744 <USBD_LL_DataOutStage+0x15c>
 800a6f8:	7dbb      	ldrb	r3, [r7, #22]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d122      	bne.n	800a744 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b03      	cmp	r3, #3
 800a708:	d117      	bne.n	800a73a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a70a:	7dba      	ldrb	r2, [r7, #22]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	32ae      	adds	r2, #174	@ 0xae
 800a710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00f      	beq.n	800a73a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a71a:	7dba      	ldrb	r2, [r7, #22]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a722:	7dba      	ldrb	r2, [r7, #22]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	32ae      	adds	r2, #174	@ 0xae
 800a728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	7afa      	ldrb	r2, [r7, #11]
 800a730:	4611      	mov	r1, r2
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	4798      	blx	r3
 800a736:	4603      	mov	r3, r0
 800a738:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a740:	7dfb      	ldrb	r3, [r7, #23]
 800a742:	e000      	b.n	800a746 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b086      	sub	sp, #24
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	460b      	mov	r3, r1
 800a758:	607a      	str	r2, [r7, #4]
 800a75a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a75c:	7afb      	ldrb	r3, [r7, #11]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d16f      	bne.n	800a842 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3314      	adds	r3, #20
 800a766:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d15a      	bne.n	800a828 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	689a      	ldr	r2, [r3, #8]
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d914      	bls.n	800a7a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	689a      	ldr	r2, [r3, #8]
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	1ad2      	subs	r2, r2, r3
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	461a      	mov	r2, r3
 800a792:	6879      	ldr	r1, [r7, #4]
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f001 f8da 	bl	800b94e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a79a:	2300      	movs	r3, #0
 800a79c:	2200      	movs	r2, #0
 800a79e:	2100      	movs	r1, #0
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f001 fee5 	bl	800c570 <USBD_LL_PrepareReceive>
 800a7a6:	e03f      	b.n	800a828 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	68da      	ldr	r2, [r3, #12]
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d11c      	bne.n	800a7ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	685a      	ldr	r2, [r3, #4]
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d316      	bcc.n	800a7ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d20f      	bcs.n	800a7ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f001 f8bb 	bl	800b94e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f001 fec2 	bl	800c570 <USBD_LL_PrepareReceive>
 800a7ec:	e01c      	b.n	800a828 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d10f      	bne.n	800a81a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d009      	beq.n	800a81a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a81a:	2180      	movs	r1, #128	@ 0x80
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f001 fda1 	bl	800c364 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f001 f8e5 	bl	800b9f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d03a      	beq.n	800a8a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f7ff fe42 	bl	800a4bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a840:	e032      	b.n	800a8a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a842:	7afb      	ldrb	r3, [r7, #11]
 800a844:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	4619      	mov	r1, r3
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f000 f985 	bl	800ab5c <USBD_CoreFindEP>
 800a852:	4603      	mov	r3, r0
 800a854:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a856:	7dfb      	ldrb	r3, [r7, #23]
 800a858:	2bff      	cmp	r3, #255	@ 0xff
 800a85a:	d025      	beq.n	800a8a8 <USBD_LL_DataInStage+0x15a>
 800a85c:	7dfb      	ldrb	r3, [r7, #23]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d122      	bne.n	800a8a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d11c      	bne.n	800a8a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a86e:	7dfa      	ldrb	r2, [r7, #23]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	32ae      	adds	r2, #174	@ 0xae
 800a874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d014      	beq.n	800a8a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a87e:	7dfa      	ldrb	r2, [r7, #23]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a886:	7dfa      	ldrb	r2, [r7, #23]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	32ae      	adds	r2, #174	@ 0xae
 800a88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a890:	695b      	ldr	r3, [r3, #20]
 800a892:	7afa      	ldrb	r2, [r7, #11]
 800a894:	4611      	mov	r1, r2
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	4798      	blx	r3
 800a89a:	4603      	mov	r3, r0
 800a89c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a89e:	7dbb      	ldrb	r3, [r7, #22]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a8a4:	7dbb      	ldrb	r3, [r7, #22]
 800a8a6:	e000      	b.n	800a8aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d014      	beq.n	800a918 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00e      	beq.n	800a918 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	6852      	ldr	r2, [r2, #4]
 800a906:	b2d2      	uxtb	r2, r2
 800a908:	4611      	mov	r1, r2
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	4798      	blx	r3
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a914:	2303      	movs	r3, #3
 800a916:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a918:	2340      	movs	r3, #64	@ 0x40
 800a91a:	2200      	movs	r2, #0
 800a91c:	2100      	movs	r1, #0
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f001 fcac 	bl	800c27c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2240      	movs	r2, #64	@ 0x40
 800a930:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a934:	2340      	movs	r3, #64	@ 0x40
 800a936:	2200      	movs	r2, #0
 800a938:	2180      	movs	r1, #128	@ 0x80
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f001 fc9e 	bl	800c27c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2240      	movs	r2, #64	@ 0x40
 800a94a:	621a      	str	r2, [r3, #32]

  return ret;
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a956:	b480      	push	{r7}
 800a958:	b083      	sub	sp, #12
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	460b      	mov	r3, r1
 800a960:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	78fa      	ldrb	r2, [r7, #3]
 800a966:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	370c      	adds	r7, #12
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr

0800a976 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a976:	b480      	push	{r7}
 800a978:	b083      	sub	sp, #12
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b04      	cmp	r3, #4
 800a988:	d006      	beq.n	800a998 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a990:	b2da      	uxtb	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2204      	movs	r2, #4
 800a99c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	370c      	adds	r7, #12
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b083      	sub	sp, #12
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b04      	cmp	r3, #4
 800a9c0:	d106      	bne.n	800a9d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b03      	cmp	r3, #3
 800a9f0:	d110      	bne.n	800aa14 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00b      	beq.n	800aa14 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa02:	69db      	ldr	r3, [r3, #28]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d005      	beq.n	800aa14 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b082      	sub	sp, #8
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	460b      	mov	r3, r1
 800aa28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	32ae      	adds	r2, #174	@ 0xae
 800aa34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	e01c      	b.n	800aa7a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	2b03      	cmp	r3, #3
 800aa4a:	d115      	bne.n	800aa78 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	32ae      	adds	r2, #174	@ 0xae
 800aa56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa5a:	6a1b      	ldr	r3, [r3, #32]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00b      	beq.n	800aa78 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	32ae      	adds	r2, #174	@ 0xae
 800aa6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa6e:	6a1b      	ldr	r3, [r3, #32]
 800aa70:	78fa      	ldrb	r2, [r7, #3]
 800aa72:	4611      	mov	r1, r2
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	32ae      	adds	r2, #174	@ 0xae
 800aa98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d101      	bne.n	800aaa4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	e01c      	b.n	800aade <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b03      	cmp	r3, #3
 800aaae:	d115      	bne.n	800aadc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	32ae      	adds	r2, #174	@ 0xae
 800aaba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aabe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00b      	beq.n	800aadc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	32ae      	adds	r2, #174	@ 0xae
 800aace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad4:	78fa      	ldrb	r2, [r7, #3]
 800aad6:	4611      	mov	r1, r2
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ab04:	2300      	movs	r3, #0
 800ab06:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00e      	beq.n	800ab38 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	6852      	ldr	r2, [r2, #4]
 800ab26:	b2d2      	uxtb	r2, r2
 800ab28:	4611      	mov	r1, r2
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	4798      	blx	r3
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ab34:	2303      	movs	r3, #3
 800ab36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab4e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	460b      	mov	r3, r1
 800ab66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b086      	sub	sp, #24
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	885b      	ldrh	r3, [r3, #2]
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	7812      	ldrb	r2, [r2, #0]
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d91f      	bls.n	800abdc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aba2:	e013      	b.n	800abcc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aba4:	f107 030a 	add.w	r3, r7, #10
 800aba8:	4619      	mov	r1, r3
 800abaa:	6978      	ldr	r0, [r7, #20]
 800abac:	f000 f81b 	bl	800abe6 <USBD_GetNextDesc>
 800abb0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	785b      	ldrb	r3, [r3, #1]
 800abb6:	2b05      	cmp	r3, #5
 800abb8:	d108      	bne.n	800abcc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	789b      	ldrb	r3, [r3, #2]
 800abc2:	78fa      	ldrb	r2, [r7, #3]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d008      	beq.n	800abda <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800abc8:	2300      	movs	r3, #0
 800abca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	885b      	ldrh	r3, [r3, #2]
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	897b      	ldrh	r3, [r7, #10]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d8e5      	bhi.n	800aba4 <USBD_GetEpDesc+0x2e>
 800abd8:	e000      	b.n	800abdc <USBD_GetEpDesc+0x66>
          break;
 800abda:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800abdc:	693b      	ldr	r3, [r7, #16]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800abe6:	b480      	push	{r7}
 800abe8:	b085      	sub	sp, #20
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
 800abee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	7812      	ldrb	r2, [r2, #0]
 800abfc:	4413      	add	r3, r2
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	461a      	mov	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac10:	68fb      	ldr	r3, [r7, #12]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b087      	sub	sp, #28
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	3301      	adds	r3, #1
 800ac34:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac3c:	8a3b      	ldrh	r3, [r7, #16]
 800ac3e:	021b      	lsls	r3, r3, #8
 800ac40:	b21a      	sxth	r2, r3
 800ac42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	b21b      	sxth	r3, r3
 800ac4a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac4c:	89fb      	ldrh	r3, [r7, #14]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	371c      	adds	r7, #28
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
	...

0800ac5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac66:	2300      	movs	r3, #0
 800ac68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac72:	2b40      	cmp	r3, #64	@ 0x40
 800ac74:	d005      	beq.n	800ac82 <USBD_StdDevReq+0x26>
 800ac76:	2b40      	cmp	r3, #64	@ 0x40
 800ac78:	d857      	bhi.n	800ad2a <USBD_StdDevReq+0xce>
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00f      	beq.n	800ac9e <USBD_StdDevReq+0x42>
 800ac7e:	2b20      	cmp	r3, #32
 800ac80:	d153      	bne.n	800ad2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	32ae      	adds	r2, #174	@ 0xae
 800ac8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	6839      	ldr	r1, [r7, #0]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	4798      	blx	r3
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac9c:	e04a      	b.n	800ad34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	785b      	ldrb	r3, [r3, #1]
 800aca2:	2b09      	cmp	r3, #9
 800aca4:	d83b      	bhi.n	800ad1e <USBD_StdDevReq+0xc2>
 800aca6:	a201      	add	r2, pc, #4	@ (adr r2, 800acac <USBD_StdDevReq+0x50>)
 800aca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acac:	0800ad01 	.word	0x0800ad01
 800acb0:	0800ad15 	.word	0x0800ad15
 800acb4:	0800ad1f 	.word	0x0800ad1f
 800acb8:	0800ad0b 	.word	0x0800ad0b
 800acbc:	0800ad1f 	.word	0x0800ad1f
 800acc0:	0800acdf 	.word	0x0800acdf
 800acc4:	0800acd5 	.word	0x0800acd5
 800acc8:	0800ad1f 	.word	0x0800ad1f
 800accc:	0800acf7 	.word	0x0800acf7
 800acd0:	0800ace9 	.word	0x0800ace9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800acd4:	6839      	ldr	r1, [r7, #0]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fa3c 	bl	800b154 <USBD_GetDescriptor>
          break;
 800acdc:	e024      	b.n	800ad28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fbcb 	bl	800b47c <USBD_SetAddress>
          break;
 800ace6:	e01f      	b.n	800ad28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fc0a 	bl	800b504 <USBD_SetConfig>
 800acf0:	4603      	mov	r3, r0
 800acf2:	73fb      	strb	r3, [r7, #15]
          break;
 800acf4:	e018      	b.n	800ad28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800acf6:	6839      	ldr	r1, [r7, #0]
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 fcad 	bl	800b658 <USBD_GetConfig>
          break;
 800acfe:	e013      	b.n	800ad28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fcde 	bl	800b6c4 <USBD_GetStatus>
          break;
 800ad08:	e00e      	b.n	800ad28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad0a:	6839      	ldr	r1, [r7, #0]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 fd0d 	bl	800b72c <USBD_SetFeature>
          break;
 800ad12:	e009      	b.n	800ad28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fd31 	bl	800b77e <USBD_ClrFeature>
          break;
 800ad1c:	e004      	b.n	800ad28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fd88 	bl	800b836 <USBD_CtlError>
          break;
 800ad26:	bf00      	nop
      }
      break;
 800ad28:	e004      	b.n	800ad34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fd82 	bl	800b836 <USBD_CtlError>
      break;
 800ad32:	bf00      	nop
  }

  return ret;
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop

0800ad40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad56:	2b40      	cmp	r3, #64	@ 0x40
 800ad58:	d005      	beq.n	800ad66 <USBD_StdItfReq+0x26>
 800ad5a:	2b40      	cmp	r3, #64	@ 0x40
 800ad5c:	d852      	bhi.n	800ae04 <USBD_StdItfReq+0xc4>
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d001      	beq.n	800ad66 <USBD_StdItfReq+0x26>
 800ad62:	2b20      	cmp	r3, #32
 800ad64:	d14e      	bne.n	800ae04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	d840      	bhi.n	800adf6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	889b      	ldrh	r3, [r3, #4]
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d836      	bhi.n	800adec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	889b      	ldrh	r3, [r3, #4]
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	4619      	mov	r1, r3
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7ff fedb 	bl	800ab42 <USBD_CoreFindIF>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad90:	7bbb      	ldrb	r3, [r7, #14]
 800ad92:	2bff      	cmp	r3, #255	@ 0xff
 800ad94:	d01d      	beq.n	800add2 <USBD_StdItfReq+0x92>
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d11a      	bne.n	800add2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ad9c:	7bba      	ldrb	r2, [r7, #14]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	32ae      	adds	r2, #174	@ 0xae
 800ada2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00f      	beq.n	800adcc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800adac:	7bba      	ldrb	r2, [r7, #14]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800adb4:	7bba      	ldrb	r2, [r7, #14]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	32ae      	adds	r2, #174	@ 0xae
 800adba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	4798      	blx	r3
 800adc6:	4603      	mov	r3, r0
 800adc8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800adca:	e004      	b.n	800add6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800adcc:	2303      	movs	r3, #3
 800adce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800add0:	e001      	b.n	800add6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800add2:	2303      	movs	r3, #3
 800add4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	88db      	ldrh	r3, [r3, #6]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d110      	bne.n	800ae00 <USBD_StdItfReq+0xc0>
 800adde:	7bfb      	ldrb	r3, [r7, #15]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10d      	bne.n	800ae00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fdf1 	bl	800b9cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800adea:	e009      	b.n	800ae00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fd21 	bl	800b836 <USBD_CtlError>
          break;
 800adf4:	e004      	b.n	800ae00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fd1c 	bl	800b836 <USBD_CtlError>
          break;
 800adfe:	e000      	b.n	800ae02 <USBD_StdItfReq+0xc2>
          break;
 800ae00:	bf00      	nop
      }
      break;
 800ae02:	e004      	b.n	800ae0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fd15 	bl	800b836 <USBD_CtlError>
      break;
 800ae0c:	bf00      	nop
  }

  return ret;
 800ae0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3710      	adds	r7, #16
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	889b      	ldrh	r3, [r3, #4]
 800ae2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae34:	2b40      	cmp	r3, #64	@ 0x40
 800ae36:	d007      	beq.n	800ae48 <USBD_StdEPReq+0x30>
 800ae38:	2b40      	cmp	r3, #64	@ 0x40
 800ae3a:	f200 817f 	bhi.w	800b13c <USBD_StdEPReq+0x324>
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d02a      	beq.n	800ae98 <USBD_StdEPReq+0x80>
 800ae42:	2b20      	cmp	r3, #32
 800ae44:	f040 817a 	bne.w	800b13c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae48:	7bbb      	ldrb	r3, [r7, #14]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f7ff fe85 	bl	800ab5c <USBD_CoreFindEP>
 800ae52:	4603      	mov	r3, r0
 800ae54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae56:	7b7b      	ldrb	r3, [r7, #13]
 800ae58:	2bff      	cmp	r3, #255	@ 0xff
 800ae5a:	f000 8174 	beq.w	800b146 <USBD_StdEPReq+0x32e>
 800ae5e:	7b7b      	ldrb	r3, [r7, #13]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f040 8170 	bne.w	800b146 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ae66:	7b7a      	ldrb	r2, [r7, #13]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ae6e:	7b7a      	ldrb	r2, [r7, #13]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	32ae      	adds	r2, #174	@ 0xae
 800ae74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f000 8163 	beq.w	800b146 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ae80:	7b7a      	ldrb	r2, [r7, #13]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	32ae      	adds	r2, #174	@ 0xae
 800ae86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	6839      	ldr	r1, [r7, #0]
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	4798      	blx	r3
 800ae92:	4603      	mov	r3, r0
 800ae94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ae96:	e156      	b.n	800b146 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	785b      	ldrb	r3, [r3, #1]
 800ae9c:	2b03      	cmp	r3, #3
 800ae9e:	d008      	beq.n	800aeb2 <USBD_StdEPReq+0x9a>
 800aea0:	2b03      	cmp	r3, #3
 800aea2:	f300 8145 	bgt.w	800b130 <USBD_StdEPReq+0x318>
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 809b 	beq.w	800afe2 <USBD_StdEPReq+0x1ca>
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d03c      	beq.n	800af2a <USBD_StdEPReq+0x112>
 800aeb0:	e13e      	b.n	800b130 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d002      	beq.n	800aec4 <USBD_StdEPReq+0xac>
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	d016      	beq.n	800aef0 <USBD_StdEPReq+0xd8>
 800aec2:	e02c      	b.n	800af1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aec4:	7bbb      	ldrb	r3, [r7, #14]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00d      	beq.n	800aee6 <USBD_StdEPReq+0xce>
 800aeca:	7bbb      	ldrb	r3, [r7, #14]
 800aecc:	2b80      	cmp	r3, #128	@ 0x80
 800aece:	d00a      	beq.n	800aee6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
 800aed2:	4619      	mov	r1, r3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f001 fa45 	bl	800c364 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aeda:	2180      	movs	r1, #128	@ 0x80
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f001 fa41 	bl	800c364 <USBD_LL_StallEP>
 800aee2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aee4:	e020      	b.n	800af28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fca4 	bl	800b836 <USBD_CtlError>
              break;
 800aeee:	e01b      	b.n	800af28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	885b      	ldrh	r3, [r3, #2]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10e      	bne.n	800af16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aef8:	7bbb      	ldrb	r3, [r7, #14]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00b      	beq.n	800af16 <USBD_StdEPReq+0xfe>
 800aefe:	7bbb      	ldrb	r3, [r7, #14]
 800af00:	2b80      	cmp	r3, #128	@ 0x80
 800af02:	d008      	beq.n	800af16 <USBD_StdEPReq+0xfe>
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	88db      	ldrh	r3, [r3, #6]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d104      	bne.n	800af16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af0c:	7bbb      	ldrb	r3, [r7, #14]
 800af0e:	4619      	mov	r1, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f001 fa27 	bl	800c364 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fd58 	bl	800b9cc <USBD_CtlSendStatus>

              break;
 800af1c:	e004      	b.n	800af28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fc88 	bl	800b836 <USBD_CtlError>
              break;
 800af26:	bf00      	nop
          }
          break;
 800af28:	e107      	b.n	800b13a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af30:	b2db      	uxtb	r3, r3
 800af32:	2b02      	cmp	r3, #2
 800af34:	d002      	beq.n	800af3c <USBD_StdEPReq+0x124>
 800af36:	2b03      	cmp	r3, #3
 800af38:	d016      	beq.n	800af68 <USBD_StdEPReq+0x150>
 800af3a:	e04b      	b.n	800afd4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af3c:	7bbb      	ldrb	r3, [r7, #14]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00d      	beq.n	800af5e <USBD_StdEPReq+0x146>
 800af42:	7bbb      	ldrb	r3, [r7, #14]
 800af44:	2b80      	cmp	r3, #128	@ 0x80
 800af46:	d00a      	beq.n	800af5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af48:	7bbb      	ldrb	r3, [r7, #14]
 800af4a:	4619      	mov	r1, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f001 fa09 	bl	800c364 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af52:	2180      	movs	r1, #128	@ 0x80
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f001 fa05 	bl	800c364 <USBD_LL_StallEP>
 800af5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af5c:	e040      	b.n	800afe0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fc68 	bl	800b836 <USBD_CtlError>
              break;
 800af66:	e03b      	b.n	800afe0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	885b      	ldrh	r3, [r3, #2]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d136      	bne.n	800afde <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af70:	7bbb      	ldrb	r3, [r7, #14]
 800af72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af76:	2b00      	cmp	r3, #0
 800af78:	d004      	beq.n	800af84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	4619      	mov	r1, r3
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f001 fa26 	bl	800c3d0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fd21 	bl	800b9cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800af8a:	7bbb      	ldrb	r3, [r7, #14]
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7ff fde4 	bl	800ab5c <USBD_CoreFindEP>
 800af94:	4603      	mov	r3, r0
 800af96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af98:	7b7b      	ldrb	r3, [r7, #13]
 800af9a:	2bff      	cmp	r3, #255	@ 0xff
 800af9c:	d01f      	beq.n	800afde <USBD_StdEPReq+0x1c6>
 800af9e:	7b7b      	ldrb	r3, [r7, #13]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d11c      	bne.n	800afde <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800afa4:	7b7a      	ldrb	r2, [r7, #13]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800afac:	7b7a      	ldrb	r2, [r7, #13]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	32ae      	adds	r2, #174	@ 0xae
 800afb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d010      	beq.n	800afde <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800afbc:	7b7a      	ldrb	r2, [r7, #13]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	32ae      	adds	r2, #174	@ 0xae
 800afc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	4798      	blx	r3
 800afce:	4603      	mov	r3, r0
 800afd0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800afd2:	e004      	b.n	800afde <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fc2d 	bl	800b836 <USBD_CtlError>
              break;
 800afdc:	e000      	b.n	800afe0 <USBD_StdEPReq+0x1c8>
              break;
 800afde:	bf00      	nop
          }
          break;
 800afe0:	e0ab      	b.n	800b13a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	2b02      	cmp	r3, #2
 800afec:	d002      	beq.n	800aff4 <USBD_StdEPReq+0x1dc>
 800afee:	2b03      	cmp	r3, #3
 800aff0:	d032      	beq.n	800b058 <USBD_StdEPReq+0x240>
 800aff2:	e097      	b.n	800b124 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aff4:	7bbb      	ldrb	r3, [r7, #14]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d007      	beq.n	800b00a <USBD_StdEPReq+0x1f2>
 800affa:	7bbb      	ldrb	r3, [r7, #14]
 800affc:	2b80      	cmp	r3, #128	@ 0x80
 800affe:	d004      	beq.n	800b00a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fc17 	bl	800b836 <USBD_CtlError>
                break;
 800b008:	e091      	b.n	800b12e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b00a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	da0b      	bge.n	800b02a <USBD_StdEPReq+0x212>
 800b012:	7bbb      	ldrb	r3, [r7, #14]
 800b014:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b018:	4613      	mov	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4413      	add	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	3310      	adds	r3, #16
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	4413      	add	r3, r2
 800b026:	3304      	adds	r3, #4
 800b028:	e00b      	b.n	800b042 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b02a:	7bbb      	ldrb	r3, [r7, #14]
 800b02c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b030:	4613      	mov	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4413      	add	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	4413      	add	r3, r2
 800b040:	3304      	adds	r3, #4
 800b042:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2202      	movs	r2, #2
 800b04e:	4619      	mov	r1, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fc61 	bl	800b918 <USBD_CtlSendData>
              break;
 800b056:	e06a      	b.n	800b12e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	da11      	bge.n	800b084 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b060:	7bbb      	ldrb	r3, [r7, #14]
 800b062:	f003 020f 	and.w	r2, r3, #15
 800b066:	6879      	ldr	r1, [r7, #4]
 800b068:	4613      	mov	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	440b      	add	r3, r1
 800b072:	3324      	adds	r3, #36	@ 0x24
 800b074:	881b      	ldrh	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d117      	bne.n	800b0aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 fbda 	bl	800b836 <USBD_CtlError>
                  break;
 800b082:	e054      	b.n	800b12e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b084:	7bbb      	ldrb	r3, [r7, #14]
 800b086:	f003 020f 	and.w	r2, r3, #15
 800b08a:	6879      	ldr	r1, [r7, #4]
 800b08c:	4613      	mov	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	440b      	add	r3, r1
 800b096:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b09a:	881b      	ldrh	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d104      	bne.n	800b0aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0a0:	6839      	ldr	r1, [r7, #0]
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 fbc7 	bl	800b836 <USBD_CtlError>
                  break;
 800b0a8:	e041      	b.n	800b12e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	da0b      	bge.n	800b0ca <USBD_StdEPReq+0x2b2>
 800b0b2:	7bbb      	ldrb	r3, [r7, #14]
 800b0b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	3310      	adds	r3, #16
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	3304      	adds	r3, #4
 800b0c8:	e00b      	b.n	800b0e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
 800b0cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4413      	add	r3, r2
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	4413      	add	r3, r2
 800b0e0:	3304      	adds	r3, #4
 800b0e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d002      	beq.n	800b0f0 <USBD_StdEPReq+0x2d8>
 800b0ea:	7bbb      	ldrb	r3, [r7, #14]
 800b0ec:	2b80      	cmp	r3, #128	@ 0x80
 800b0ee:	d103      	bne.n	800b0f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	601a      	str	r2, [r3, #0]
 800b0f6:	e00e      	b.n	800b116 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b0f8:	7bbb      	ldrb	r3, [r7, #14]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f001 f99d 	bl	800c43c <USBD_LL_IsStallEP>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d003      	beq.n	800b110 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2201      	movs	r2, #1
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	e002      	b.n	800b116 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	2200      	movs	r2, #0
 800b114:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	2202      	movs	r2, #2
 800b11a:	4619      	mov	r1, r3
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 fbfb 	bl	800b918 <USBD_CtlSendData>
              break;
 800b122:	e004      	b.n	800b12e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fb85 	bl	800b836 <USBD_CtlError>
              break;
 800b12c:	bf00      	nop
          }
          break;
 800b12e:	e004      	b.n	800b13a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b130:	6839      	ldr	r1, [r7, #0]
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 fb7f 	bl	800b836 <USBD_CtlError>
          break;
 800b138:	bf00      	nop
      }
      break;
 800b13a:	e005      	b.n	800b148 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b13c:	6839      	ldr	r1, [r7, #0]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 fb79 	bl	800b836 <USBD_CtlError>
      break;
 800b144:	e000      	b.n	800b148 <USBD_StdEPReq+0x330>
      break;
 800b146:	bf00      	nop
  }

  return ret;
 800b148:	7bfb      	ldrb	r3, [r7, #15]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
	...

0800b154 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b15e:	2300      	movs	r3, #0
 800b160:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b162:	2300      	movs	r3, #0
 800b164:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b166:	2300      	movs	r3, #0
 800b168:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	885b      	ldrh	r3, [r3, #2]
 800b16e:	0a1b      	lsrs	r3, r3, #8
 800b170:	b29b      	uxth	r3, r3
 800b172:	3b01      	subs	r3, #1
 800b174:	2b0e      	cmp	r3, #14
 800b176:	f200 8152 	bhi.w	800b41e <USBD_GetDescriptor+0x2ca>
 800b17a:	a201      	add	r2, pc, #4	@ (adr r2, 800b180 <USBD_GetDescriptor+0x2c>)
 800b17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b180:	0800b1f1 	.word	0x0800b1f1
 800b184:	0800b209 	.word	0x0800b209
 800b188:	0800b249 	.word	0x0800b249
 800b18c:	0800b41f 	.word	0x0800b41f
 800b190:	0800b41f 	.word	0x0800b41f
 800b194:	0800b3bf 	.word	0x0800b3bf
 800b198:	0800b3eb 	.word	0x0800b3eb
 800b19c:	0800b41f 	.word	0x0800b41f
 800b1a0:	0800b41f 	.word	0x0800b41f
 800b1a4:	0800b41f 	.word	0x0800b41f
 800b1a8:	0800b41f 	.word	0x0800b41f
 800b1ac:	0800b41f 	.word	0x0800b41f
 800b1b0:	0800b41f 	.word	0x0800b41f
 800b1b4:	0800b41f 	.word	0x0800b41f
 800b1b8:	0800b1bd 	.word	0x0800b1bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1c2:	69db      	ldr	r3, [r3, #28]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00b      	beq.n	800b1e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ce:	69db      	ldr	r3, [r3, #28]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	7c12      	ldrb	r2, [r2, #16]
 800b1d4:	f107 0108 	add.w	r1, r7, #8
 800b1d8:	4610      	mov	r0, r2
 800b1da:	4798      	blx	r3
 800b1dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1de:	e126      	b.n	800b42e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fb27 	bl	800b836 <USBD_CtlError>
        err++;
 800b1e8:	7afb      	ldrb	r3, [r7, #11]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	72fb      	strb	r3, [r7, #11]
      break;
 800b1ee:	e11e      	b.n	800b42e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	7c12      	ldrb	r2, [r2, #16]
 800b1fc:	f107 0108 	add.w	r1, r7, #8
 800b200:	4610      	mov	r0, r2
 800b202:	4798      	blx	r3
 800b204:	60f8      	str	r0, [r7, #12]
      break;
 800b206:	e112      	b.n	800b42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	7c1b      	ldrb	r3, [r3, #16]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10d      	bne.n	800b22c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b218:	f107 0208 	add.w	r2, r7, #8
 800b21c:	4610      	mov	r0, r2
 800b21e:	4798      	blx	r3
 800b220:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3301      	adds	r3, #1
 800b226:	2202      	movs	r2, #2
 800b228:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b22a:	e100      	b.n	800b42e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b234:	f107 0208 	add.w	r2, r7, #8
 800b238:	4610      	mov	r0, r2
 800b23a:	4798      	blx	r3
 800b23c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3301      	adds	r3, #1
 800b242:	2202      	movs	r2, #2
 800b244:	701a      	strb	r2, [r3, #0]
      break;
 800b246:	e0f2      	b.n	800b42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	885b      	ldrh	r3, [r3, #2]
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	2b05      	cmp	r3, #5
 800b250:	f200 80ac 	bhi.w	800b3ac <USBD_GetDescriptor+0x258>
 800b254:	a201      	add	r2, pc, #4	@ (adr r2, 800b25c <USBD_GetDescriptor+0x108>)
 800b256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25a:	bf00      	nop
 800b25c:	0800b275 	.word	0x0800b275
 800b260:	0800b2a9 	.word	0x0800b2a9
 800b264:	0800b2dd 	.word	0x0800b2dd
 800b268:	0800b311 	.word	0x0800b311
 800b26c:	0800b345 	.word	0x0800b345
 800b270:	0800b379 	.word	0x0800b379
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00b      	beq.n	800b298 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	7c12      	ldrb	r2, [r2, #16]
 800b28c:	f107 0108 	add.w	r1, r7, #8
 800b290:	4610      	mov	r0, r2
 800b292:	4798      	blx	r3
 800b294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b296:	e091      	b.n	800b3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b298:	6839      	ldr	r1, [r7, #0]
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 facb 	bl	800b836 <USBD_CtlError>
            err++;
 800b2a0:	7afb      	ldrb	r3, [r7, #11]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2a6:	e089      	b.n	800b3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00b      	beq.n	800b2cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	7c12      	ldrb	r2, [r2, #16]
 800b2c0:	f107 0108 	add.w	r1, r7, #8
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	4798      	blx	r3
 800b2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ca:	e077      	b.n	800b3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fab1 	bl	800b836 <USBD_CtlError>
            err++;
 800b2d4:	7afb      	ldrb	r3, [r7, #11]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2da:	e06f      	b.n	800b3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00b      	beq.n	800b300 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	7c12      	ldrb	r2, [r2, #16]
 800b2f4:	f107 0108 	add.w	r1, r7, #8
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4798      	blx	r3
 800b2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2fe:	e05d      	b.n	800b3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fa97 	bl	800b836 <USBD_CtlError>
            err++;
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	3301      	adds	r3, #1
 800b30c:	72fb      	strb	r3, [r7, #11]
          break;
 800b30e:	e055      	b.n	800b3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00b      	beq.n	800b334 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	7c12      	ldrb	r2, [r2, #16]
 800b328:	f107 0108 	add.w	r1, r7, #8
 800b32c:	4610      	mov	r0, r2
 800b32e:	4798      	blx	r3
 800b330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b332:	e043      	b.n	800b3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b334:	6839      	ldr	r1, [r7, #0]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fa7d 	bl	800b836 <USBD_CtlError>
            err++;
 800b33c:	7afb      	ldrb	r3, [r7, #11]
 800b33e:	3301      	adds	r3, #1
 800b340:	72fb      	strb	r3, [r7, #11]
          break;
 800b342:	e03b      	b.n	800b3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b34a:	695b      	ldr	r3, [r3, #20]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00b      	beq.n	800b368 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b356:	695b      	ldr	r3, [r3, #20]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	7c12      	ldrb	r2, [r2, #16]
 800b35c:	f107 0108 	add.w	r1, r7, #8
 800b360:	4610      	mov	r0, r2
 800b362:	4798      	blx	r3
 800b364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b366:	e029      	b.n	800b3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fa63 	bl	800b836 <USBD_CtlError>
            err++;
 800b370:	7afb      	ldrb	r3, [r7, #11]
 800b372:	3301      	adds	r3, #1
 800b374:	72fb      	strb	r3, [r7, #11]
          break;
 800b376:	e021      	b.n	800b3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00b      	beq.n	800b39c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	7c12      	ldrb	r2, [r2, #16]
 800b390:	f107 0108 	add.w	r1, r7, #8
 800b394:	4610      	mov	r0, r2
 800b396:	4798      	blx	r3
 800b398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b39a:	e00f      	b.n	800b3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fa49 	bl	800b836 <USBD_CtlError>
            err++;
 800b3a4:	7afb      	ldrb	r3, [r7, #11]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3aa:	e007      	b.n	800b3bc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fa41 	bl	800b836 <USBD_CtlError>
          err++;
 800b3b4:	7afb      	ldrb	r3, [r7, #11]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b3ba:	bf00      	nop
      }
      break;
 800b3bc:	e037      	b.n	800b42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	7c1b      	ldrb	r3, [r3, #16]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d109      	bne.n	800b3da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3ce:	f107 0208 	add.w	r2, r7, #8
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	4798      	blx	r3
 800b3d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3d8:	e029      	b.n	800b42e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b3da:	6839      	ldr	r1, [r7, #0]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fa2a 	bl	800b836 <USBD_CtlError>
        err++;
 800b3e2:	7afb      	ldrb	r3, [r7, #11]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	72fb      	strb	r3, [r7, #11]
      break;
 800b3e8:	e021      	b.n	800b42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	7c1b      	ldrb	r3, [r3, #16]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10d      	bne.n	800b40e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3fa:	f107 0208 	add.w	r2, r7, #8
 800b3fe:	4610      	mov	r0, r2
 800b400:	4798      	blx	r3
 800b402:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	3301      	adds	r3, #1
 800b408:	2207      	movs	r2, #7
 800b40a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b40c:	e00f      	b.n	800b42e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fa10 	bl	800b836 <USBD_CtlError>
        err++;
 800b416:	7afb      	ldrb	r3, [r7, #11]
 800b418:	3301      	adds	r3, #1
 800b41a:	72fb      	strb	r3, [r7, #11]
      break;
 800b41c:	e007      	b.n	800b42e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b41e:	6839      	ldr	r1, [r7, #0]
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fa08 	bl	800b836 <USBD_CtlError>
      err++;
 800b426:	7afb      	ldrb	r3, [r7, #11]
 800b428:	3301      	adds	r3, #1
 800b42a:	72fb      	strb	r3, [r7, #11]
      break;
 800b42c:	bf00      	nop
  }

  if (err != 0U)
 800b42e:	7afb      	ldrb	r3, [r7, #11]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d11e      	bne.n	800b472 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	88db      	ldrh	r3, [r3, #6]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d016      	beq.n	800b46a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b43c:	893b      	ldrh	r3, [r7, #8]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00e      	beq.n	800b460 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	88da      	ldrh	r2, [r3, #6]
 800b446:	893b      	ldrh	r3, [r7, #8]
 800b448:	4293      	cmp	r3, r2
 800b44a:	bf28      	it	cs
 800b44c:	4613      	movcs	r3, r2
 800b44e:	b29b      	uxth	r3, r3
 800b450:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b452:	893b      	ldrh	r3, [r7, #8]
 800b454:	461a      	mov	r2, r3
 800b456:	68f9      	ldr	r1, [r7, #12]
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fa5d 	bl	800b918 <USBD_CtlSendData>
 800b45e:	e009      	b.n	800b474 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f9e7 	bl	800b836 <USBD_CtlError>
 800b468:	e004      	b.n	800b474 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 faae 	bl	800b9cc <USBD_CtlSendStatus>
 800b470:	e000      	b.n	800b474 <USBD_GetDescriptor+0x320>
    return;
 800b472:	bf00      	nop
  }
}
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop

0800b47c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	889b      	ldrh	r3, [r3, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d131      	bne.n	800b4f2 <USBD_SetAddress+0x76>
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	88db      	ldrh	r3, [r3, #6]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d12d      	bne.n	800b4f2 <USBD_SetAddress+0x76>
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	885b      	ldrh	r3, [r3, #2]
 800b49a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b49c:	d829      	bhi.n	800b4f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	885b      	ldrh	r3, [r3, #2]
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b03      	cmp	r3, #3
 800b4b4:	d104      	bne.n	800b4c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f9bc 	bl	800b836 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4be:	e01d      	b.n	800b4fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	7bfa      	ldrb	r2, [r7, #15]
 800b4c4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 ffe1 	bl	800c494 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 fa7a 	bl	800b9cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d004      	beq.n	800b4e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2202      	movs	r2, #2
 800b4e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4e6:	e009      	b.n	800b4fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4f0:	e004      	b.n	800b4fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 f99e 	bl	800b836 <USBD_CtlError>
  }
}
 800b4fa:	bf00      	nop
 800b4fc:	bf00      	nop
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b50e:	2300      	movs	r3, #0
 800b510:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	885b      	ldrh	r3, [r3, #2]
 800b516:	b2da      	uxtb	r2, r3
 800b518:	4b4e      	ldr	r3, [pc, #312]	@ (800b654 <USBD_SetConfig+0x150>)
 800b51a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b51c:	4b4d      	ldr	r3, [pc, #308]	@ (800b654 <USBD_SetConfig+0x150>)
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d905      	bls.n	800b530 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b524:	6839      	ldr	r1, [r7, #0]
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f985 	bl	800b836 <USBD_CtlError>
    return USBD_FAIL;
 800b52c:	2303      	movs	r3, #3
 800b52e:	e08c      	b.n	800b64a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b536:	b2db      	uxtb	r3, r3
 800b538:	2b02      	cmp	r3, #2
 800b53a:	d002      	beq.n	800b542 <USBD_SetConfig+0x3e>
 800b53c:	2b03      	cmp	r3, #3
 800b53e:	d029      	beq.n	800b594 <USBD_SetConfig+0x90>
 800b540:	e075      	b.n	800b62e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b542:	4b44      	ldr	r3, [pc, #272]	@ (800b654 <USBD_SetConfig+0x150>)
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d020      	beq.n	800b58c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b54a:	4b42      	ldr	r3, [pc, #264]	@ (800b654 <USBD_SetConfig+0x150>)
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b554:	4b3f      	ldr	r3, [pc, #252]	@ (800b654 <USBD_SetConfig+0x150>)
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	4619      	mov	r1, r3
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7fe ffb9 	bl	800a4d2 <USBD_SetClassConfig>
 800b560:	4603      	mov	r3, r0
 800b562:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b564:	7bfb      	ldrb	r3, [r7, #15]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d008      	beq.n	800b57c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b56a:	6839      	ldr	r1, [r7, #0]
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 f962 	bl	800b836 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2202      	movs	r2, #2
 800b576:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b57a:	e065      	b.n	800b648 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 fa25 	bl	800b9cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2203      	movs	r2, #3
 800b586:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b58a:	e05d      	b.n	800b648 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 fa1d 	bl	800b9cc <USBD_CtlSendStatus>
      break;
 800b592:	e059      	b.n	800b648 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b594:	4b2f      	ldr	r3, [pc, #188]	@ (800b654 <USBD_SetConfig+0x150>)
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d112      	bne.n	800b5c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2202      	movs	r2, #2
 800b5a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b5a4:	4b2b      	ldr	r3, [pc, #172]	@ (800b654 <USBD_SetConfig+0x150>)
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5ae:	4b29      	ldr	r3, [pc, #164]	@ (800b654 <USBD_SetConfig+0x150>)
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f7fe ffa8 	bl	800a50a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fa06 	bl	800b9cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5c0:	e042      	b.n	800b648 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b5c2:	4b24      	ldr	r3, [pc, #144]	@ (800b654 <USBD_SetConfig+0x150>)
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d02a      	beq.n	800b626 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7fe ff96 	bl	800a50a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b5de:	4b1d      	ldr	r3, [pc, #116]	@ (800b654 <USBD_SetConfig+0x150>)
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5e8:	4b1a      	ldr	r3, [pc, #104]	@ (800b654 <USBD_SetConfig+0x150>)
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7fe ff6f 	bl	800a4d2 <USBD_SetClassConfig>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00f      	beq.n	800b61e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f918 	bl	800b836 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7fe ff7b 	bl	800a50a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2202      	movs	r2, #2
 800b618:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b61c:	e014      	b.n	800b648 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f9d4 	bl	800b9cc <USBD_CtlSendStatus>
      break;
 800b624:	e010      	b.n	800b648 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f9d0 	bl	800b9cc <USBD_CtlSendStatus>
      break;
 800b62c:	e00c      	b.n	800b648 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b62e:	6839      	ldr	r1, [r7, #0]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f900 	bl	800b836 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b636:	4b07      	ldr	r3, [pc, #28]	@ (800b654 <USBD_SetConfig+0x150>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7fe ff64 	bl	800a50a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b642:	2303      	movs	r3, #3
 800b644:	73fb      	strb	r3, [r7, #15]
      break;
 800b646:	bf00      	nop
  }

  return ret;
 800b648:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	2000a5b8 	.word	0x2000a5b8

0800b658 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	88db      	ldrh	r3, [r3, #6]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d004      	beq.n	800b674 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f8e2 	bl	800b836 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b672:	e023      	b.n	800b6bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	dc02      	bgt.n	800b686 <USBD_GetConfig+0x2e>
 800b680:	2b00      	cmp	r3, #0
 800b682:	dc03      	bgt.n	800b68c <USBD_GetConfig+0x34>
 800b684:	e015      	b.n	800b6b2 <USBD_GetConfig+0x5a>
 800b686:	2b03      	cmp	r3, #3
 800b688:	d00b      	beq.n	800b6a2 <USBD_GetConfig+0x4a>
 800b68a:	e012      	b.n	800b6b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	3308      	adds	r3, #8
 800b696:	2201      	movs	r2, #1
 800b698:	4619      	mov	r1, r3
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f93c 	bl	800b918 <USBD_CtlSendData>
        break;
 800b6a0:	e00c      	b.n	800b6bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f934 	bl	800b918 <USBD_CtlSendData>
        break;
 800b6b0:	e004      	b.n	800b6bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b6b2:	6839      	ldr	r1, [r7, #0]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f8be 	bl	800b836 <USBD_CtlError>
        break;
 800b6ba:	bf00      	nop
}
 800b6bc:	bf00      	nop
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d81e      	bhi.n	800b71a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	88db      	ldrh	r3, [r3, #6]
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d004      	beq.n	800b6ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f8a5 	bl	800b836 <USBD_CtlError>
        break;
 800b6ec:	e01a      	b.n	800b724 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d005      	beq.n	800b70a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	f043 0202 	orr.w	r2, r3, #2
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	330c      	adds	r3, #12
 800b70e:	2202      	movs	r2, #2
 800b710:	4619      	mov	r1, r3
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f900 	bl	800b918 <USBD_CtlSendData>
      break;
 800b718:	e004      	b.n	800b724 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f88a 	bl	800b836 <USBD_CtlError>
      break;
 800b722:	bf00      	nop
  }
}
 800b724:	bf00      	nop
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	885b      	ldrh	r3, [r3, #2]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d107      	bne.n	800b74e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2201      	movs	r2, #1
 800b742:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f940 	bl	800b9cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b74c:	e013      	b.n	800b776 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	885b      	ldrh	r3, [r3, #2]
 800b752:	2b02      	cmp	r3, #2
 800b754:	d10b      	bne.n	800b76e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	889b      	ldrh	r3, [r3, #4]
 800b75a:	0a1b      	lsrs	r3, r3, #8
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	b2da      	uxtb	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 f930 	bl	800b9cc <USBD_CtlSendStatus>
}
 800b76c:	e003      	b.n	800b776 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b76e:	6839      	ldr	r1, [r7, #0]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 f860 	bl	800b836 <USBD_CtlError>
}
 800b776:	bf00      	nop
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b082      	sub	sp, #8
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	3b01      	subs	r3, #1
 800b792:	2b02      	cmp	r3, #2
 800b794:	d80b      	bhi.n	800b7ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	885b      	ldrh	r3, [r3, #2]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d10c      	bne.n	800b7b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f910 	bl	800b9cc <USBD_CtlSendStatus>
      }
      break;
 800b7ac:	e004      	b.n	800b7b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b7ae:	6839      	ldr	r1, [r7, #0]
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 f840 	bl	800b836 <USBD_CtlError>
      break;
 800b7b6:	e000      	b.n	800b7ba <USBD_ClrFeature+0x3c>
      break;
 800b7b8:	bf00      	nop
  }
}
 800b7ba:	bf00      	nop
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b084      	sub	sp, #16
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	781a      	ldrb	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	781a      	ldrb	r2, [r3, #0]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f7ff fa16 	bl	800ac1e <SWAPBYTE>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3301      	adds	r3, #1
 800b804:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f7ff fa09 	bl	800ac1e <SWAPBYTE>
 800b80c:	4603      	mov	r3, r0
 800b80e:	461a      	mov	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	3301      	adds	r3, #1
 800b818:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	3301      	adds	r3, #1
 800b81e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f7ff f9fc 	bl	800ac1e <SWAPBYTE>
 800b826:	4603      	mov	r3, r0
 800b828:	461a      	mov	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	80da      	strh	r2, [r3, #6]
}
 800b82e:	bf00      	nop
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b082      	sub	sp, #8
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
 800b83e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b840:	2180      	movs	r1, #128	@ 0x80
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fd8e 	bl	800c364 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b848:	2100      	movs	r1, #0
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 fd8a 	bl	800c364 <USBD_LL_StallEP>
}
 800b850:	bf00      	nop
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d036      	beq.n	800b8dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b872:	6938      	ldr	r0, [r7, #16]
 800b874:	f000 f836 	bl	800b8e4 <USBD_GetLen>
 800b878:	4603      	mov	r3, r0
 800b87a:	3301      	adds	r3, #1
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	005b      	lsls	r3, r3, #1
 800b880:	b29a      	uxth	r2, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b886:	7dfb      	ldrb	r3, [r7, #23]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	4413      	add	r3, r2
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	7812      	ldrb	r2, [r2, #0]
 800b890:	701a      	strb	r2, [r3, #0]
  idx++;
 800b892:	7dfb      	ldrb	r3, [r7, #23]
 800b894:	3301      	adds	r3, #1
 800b896:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b898:	7dfb      	ldrb	r3, [r7, #23]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	4413      	add	r3, r2
 800b89e:	2203      	movs	r2, #3
 800b8a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8a2:	7dfb      	ldrb	r3, [r7, #23]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8a8:	e013      	b.n	800b8d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	7812      	ldrb	r2, [r2, #0]
 800b8b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	613b      	str	r3, [r7, #16]
    idx++;
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b8c2:	7dfb      	ldrb	r3, [r7, #23]
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	701a      	strb	r2, [r3, #0]
    idx++;
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1e7      	bne.n	800b8aa <USBD_GetString+0x52>
 800b8da:	e000      	b.n	800b8de <USBD_GetString+0x86>
    return;
 800b8dc:	bf00      	nop
  }
}
 800b8de:	3718      	adds	r7, #24
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b8f4:	e005      	b.n	800b902 <USBD_GetLen+0x1e>
  {
    len++;
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	3301      	adds	r3, #1
 800b900:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1f5      	bne.n	800b8f6 <USBD_GetLen+0x12>
  }

  return len;
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3714      	adds	r7, #20
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2202      	movs	r2, #2
 800b928:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	2100      	movs	r1, #0
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f000 fdde 	bl	800c500 <USBD_LL_Transmit>

  return USBD_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	60f8      	str	r0, [r7, #12]
 800b956:	60b9      	str	r1, [r7, #8]
 800b958:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	2100      	movs	r1, #0
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f000 fdcd 	bl	800c500 <USBD_LL_Transmit>

  return USBD_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2203      	movs	r2, #3
 800b980:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	2100      	movs	r1, #0
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f000 fde8 	bl	800c570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	60f8      	str	r0, [r7, #12]
 800b9b2:	60b9      	str	r1, [r7, #8]
 800b9b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f000 fdd7 	bl	800c570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2204      	movs	r2, #4
 800b9d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b9dc:	2300      	movs	r3, #0
 800b9de:	2200      	movs	r2, #0
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fd8c 	bl	800c500 <USBD_LL_Transmit>

  return USBD_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b082      	sub	sp, #8
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2205      	movs	r2, #5
 800b9fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba02:	2300      	movs	r3, #0
 800ba04:	2200      	movs	r2, #0
 800ba06:	2100      	movs	r1, #0
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fdb1 	bl	800c570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	4912      	ldr	r1, [pc, #72]	@ (800ba68 <MX_USB_DEVICE_Init+0x50>)
 800ba20:	4812      	ldr	r0, [pc, #72]	@ (800ba6c <MX_USB_DEVICE_Init+0x54>)
 800ba22:	f7fe fcd9 	bl	800a3d8 <USBD_Init>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba2c:	f7f5 fe2b 	bl	8001686 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ba30:	490f      	ldr	r1, [pc, #60]	@ (800ba70 <MX_USB_DEVICE_Init+0x58>)
 800ba32:	480e      	ldr	r0, [pc, #56]	@ (800ba6c <MX_USB_DEVICE_Init+0x54>)
 800ba34:	f7fe fd00 	bl	800a438 <USBD_RegisterClass>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba3e:	f7f5 fe22 	bl	8001686 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ba42:	490c      	ldr	r1, [pc, #48]	@ (800ba74 <MX_USB_DEVICE_Init+0x5c>)
 800ba44:	4809      	ldr	r0, [pc, #36]	@ (800ba6c <MX_USB_DEVICE_Init+0x54>)
 800ba46:	f7fe fbf7 	bl	800a238 <USBD_CDC_RegisterInterface>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d001      	beq.n	800ba54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ba50:	f7f5 fe19 	bl	8001686 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ba54:	4805      	ldr	r0, [pc, #20]	@ (800ba6c <MX_USB_DEVICE_Init+0x54>)
 800ba56:	f7fe fd25 	bl	800a4a4 <USBD_Start>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ba60:	f7f5 fe11 	bl	8001686 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba64:	bf00      	nop
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	200000ac 	.word	0x200000ac
 800ba6c:	2000a5bc 	.word	0x2000a5bc
 800ba70:	20000018 	.word	0x20000018
 800ba74:	20000098 	.word	0x20000098

0800ba78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	4905      	ldr	r1, [pc, #20]	@ (800ba94 <CDC_Init_FS+0x1c>)
 800ba80:	4805      	ldr	r0, [pc, #20]	@ (800ba98 <CDC_Init_FS+0x20>)
 800ba82:	f7fe fbf3 	bl	800a26c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ba86:	4905      	ldr	r1, [pc, #20]	@ (800ba9c <CDC_Init_FS+0x24>)
 800ba88:	4803      	ldr	r0, [pc, #12]	@ (800ba98 <CDC_Init_FS+0x20>)
 800ba8a:	f7fe fc11 	bl	800a2b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ba8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	2000b098 	.word	0x2000b098
 800ba98:	2000a5bc 	.word	0x2000a5bc
 800ba9c:	2000a898 	.word	0x2000a898

0800baa0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800baa0:	b480      	push	{r7}
 800baa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800baa4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	4603      	mov	r3, r0
 800bab8:	6039      	str	r1, [r7, #0]
 800baba:	71fb      	strb	r3, [r7, #7]
 800babc:	4613      	mov	r3, r2
 800babe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bac0:	79fb      	ldrb	r3, [r7, #7]
 800bac2:	2b23      	cmp	r3, #35	@ 0x23
 800bac4:	d84a      	bhi.n	800bb5c <CDC_Control_FS+0xac>
 800bac6:	a201      	add	r2, pc, #4	@ (adr r2, 800bacc <CDC_Control_FS+0x1c>)
 800bac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bacc:	0800bb5d 	.word	0x0800bb5d
 800bad0:	0800bb5d 	.word	0x0800bb5d
 800bad4:	0800bb5d 	.word	0x0800bb5d
 800bad8:	0800bb5d 	.word	0x0800bb5d
 800badc:	0800bb5d 	.word	0x0800bb5d
 800bae0:	0800bb5d 	.word	0x0800bb5d
 800bae4:	0800bb5d 	.word	0x0800bb5d
 800bae8:	0800bb5d 	.word	0x0800bb5d
 800baec:	0800bb5d 	.word	0x0800bb5d
 800baf0:	0800bb5d 	.word	0x0800bb5d
 800baf4:	0800bb5d 	.word	0x0800bb5d
 800baf8:	0800bb5d 	.word	0x0800bb5d
 800bafc:	0800bb5d 	.word	0x0800bb5d
 800bb00:	0800bb5d 	.word	0x0800bb5d
 800bb04:	0800bb5d 	.word	0x0800bb5d
 800bb08:	0800bb5d 	.word	0x0800bb5d
 800bb0c:	0800bb5d 	.word	0x0800bb5d
 800bb10:	0800bb5d 	.word	0x0800bb5d
 800bb14:	0800bb5d 	.word	0x0800bb5d
 800bb18:	0800bb5d 	.word	0x0800bb5d
 800bb1c:	0800bb5d 	.word	0x0800bb5d
 800bb20:	0800bb5d 	.word	0x0800bb5d
 800bb24:	0800bb5d 	.word	0x0800bb5d
 800bb28:	0800bb5d 	.word	0x0800bb5d
 800bb2c:	0800bb5d 	.word	0x0800bb5d
 800bb30:	0800bb5d 	.word	0x0800bb5d
 800bb34:	0800bb5d 	.word	0x0800bb5d
 800bb38:	0800bb5d 	.word	0x0800bb5d
 800bb3c:	0800bb5d 	.word	0x0800bb5d
 800bb40:	0800bb5d 	.word	0x0800bb5d
 800bb44:	0800bb5d 	.word	0x0800bb5d
 800bb48:	0800bb5d 	.word	0x0800bb5d
 800bb4c:	0800bb5d 	.word	0x0800bb5d
 800bb50:	0800bb5d 	.word	0x0800bb5d
 800bb54:	0800bb5d 	.word	0x0800bb5d
 800bb58:	0800bb5d 	.word	0x0800bb5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bb5c:	bf00      	nop
  }

  return (USBD_OK);
 800bb5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bb76:	6879      	ldr	r1, [r7, #4]
 800bb78:	4808      	ldr	r0, [pc, #32]	@ (800bb9c <CDC_Receive_FS+0x30>)
 800bb7a:	f7fe fb99 	bl	800a2b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bb7e:	4807      	ldr	r0, [pc, #28]	@ (800bb9c <CDC_Receive_FS+0x30>)
 800bb80:	f7fe fbf4 	bl	800a36c <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  USB_My_Receive(Buf, *Len);
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7f5 face 	bl	800112c <USB_My_Receive>

  return (USBD_OK);
 800bb90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	2000a5bc 	.word	0x2000a5bc

0800bba0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	460b      	mov	r3, r1
 800bbaa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bbb0:	4b0d      	ldr	r3, [pc, #52]	@ (800bbe8 <CDC_Transmit_FS+0x48>)
 800bbb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bbb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e00b      	b.n	800bbde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bbc6:	887b      	ldrh	r3, [r7, #2]
 800bbc8:	461a      	mov	r2, r3
 800bbca:	6879      	ldr	r1, [r7, #4]
 800bbcc:	4806      	ldr	r0, [pc, #24]	@ (800bbe8 <CDC_Transmit_FS+0x48>)
 800bbce:	f7fe fb4d 	bl	800a26c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bbd2:	4805      	ldr	r0, [pc, #20]	@ (800bbe8 <CDC_Transmit_FS+0x48>)
 800bbd4:	f7fe fb8a 	bl	800a2ec <USBD_CDC_TransmitPacket>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	2000a5bc 	.word	0x2000a5bc

0800bbec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b087      	sub	sp, #28
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bbfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	371c      	adds	r7, #28
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
	...

0800bc10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	4603      	mov	r3, r0
 800bc18:	6039      	str	r1, [r7, #0]
 800bc1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	2212      	movs	r2, #18
 800bc20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc22:	4b03      	ldr	r3, [pc, #12]	@ (800bc30 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	200000cc 	.word	0x200000cc

0800bc34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	6039      	str	r1, [r7, #0]
 800bc3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	2204      	movs	r2, #4
 800bc44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc46:	4b03      	ldr	r3, [pc, #12]	@ (800bc54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr
 800bc54:	200000ec 	.word	0x200000ec

0800bc58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	6039      	str	r1, [r7, #0]
 800bc62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc64:	79fb      	ldrb	r3, [r7, #7]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d105      	bne.n	800bc76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc6a:	683a      	ldr	r2, [r7, #0]
 800bc6c:	4907      	ldr	r1, [pc, #28]	@ (800bc8c <USBD_FS_ProductStrDescriptor+0x34>)
 800bc6e:	4808      	ldr	r0, [pc, #32]	@ (800bc90 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc70:	f7ff fdf2 	bl	800b858 <USBD_GetString>
 800bc74:	e004      	b.n	800bc80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc76:	683a      	ldr	r2, [r7, #0]
 800bc78:	4904      	ldr	r1, [pc, #16]	@ (800bc8c <USBD_FS_ProductStrDescriptor+0x34>)
 800bc7a:	4805      	ldr	r0, [pc, #20]	@ (800bc90 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc7c:	f7ff fdec 	bl	800b858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc80:	4b02      	ldr	r3, [pc, #8]	@ (800bc8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	2000b898 	.word	0x2000b898
 800bc90:	0800c9ac 	.word	0x0800c9ac

0800bc94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	6039      	str	r1, [r7, #0]
 800bc9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	4904      	ldr	r1, [pc, #16]	@ (800bcb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bca4:	4804      	ldr	r0, [pc, #16]	@ (800bcb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bca6:	f7ff fdd7 	bl	800b858 <USBD_GetString>
  return USBD_StrDesc;
 800bcaa:	4b02      	ldr	r3, [pc, #8]	@ (800bcb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	2000b898 	.word	0x2000b898
 800bcb8:	0800c9c4 	.word	0x0800c9c4

0800bcbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	6039      	str	r1, [r7, #0]
 800bcc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	221a      	movs	r2, #26
 800bccc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bcce:	f000 f855 	bl	800bd7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bcd2:	4b02      	ldr	r3, [pc, #8]	@ (800bcdc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	200000f0 	.word	0x200000f0

0800bce0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	4603      	mov	r3, r0
 800bce8:	6039      	str	r1, [r7, #0]
 800bcea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bcec:	79fb      	ldrb	r3, [r7, #7]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d105      	bne.n	800bcfe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcf2:	683a      	ldr	r2, [r7, #0]
 800bcf4:	4907      	ldr	r1, [pc, #28]	@ (800bd14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcf6:	4808      	ldr	r0, [pc, #32]	@ (800bd18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bcf8:	f7ff fdae 	bl	800b858 <USBD_GetString>
 800bcfc:	e004      	b.n	800bd08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	4904      	ldr	r1, [pc, #16]	@ (800bd14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd02:	4805      	ldr	r0, [pc, #20]	@ (800bd18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd04:	f7ff fda8 	bl	800b858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd08:	4b02      	ldr	r3, [pc, #8]	@ (800bd14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	2000b898 	.word	0x2000b898
 800bd18:	0800c9d8 	.word	0x0800c9d8

0800bd1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4603      	mov	r3, r0
 800bd24:	6039      	str	r1, [r7, #0]
 800bd26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd28:	79fb      	ldrb	r3, [r7, #7]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d105      	bne.n	800bd3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	4907      	ldr	r1, [pc, #28]	@ (800bd50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd32:	4808      	ldr	r0, [pc, #32]	@ (800bd54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd34:	f7ff fd90 	bl	800b858 <USBD_GetString>
 800bd38:	e004      	b.n	800bd44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	4904      	ldr	r1, [pc, #16]	@ (800bd50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd3e:	4805      	ldr	r0, [pc, #20]	@ (800bd54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd40:	f7ff fd8a 	bl	800b858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd44:	4b02      	ldr	r3, [pc, #8]	@ (800bd50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	2000b898 	.word	0x2000b898
 800bd54:	0800c9e4 	.word	0x0800c9e4

0800bd58 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	4603      	mov	r3, r0
 800bd60:	6039      	str	r1, [r7, #0]
 800bd62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	220c      	movs	r2, #12
 800bd68:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bd6a:	4b03      	ldr	r3, [pc, #12]	@ (800bd78 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	200000e0 	.word	0x200000e0

0800bd7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd82:	4b0f      	ldr	r3, [pc, #60]	@ (800bdc0 <Get_SerialNum+0x44>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd88:	4b0e      	ldr	r3, [pc, #56]	@ (800bdc4 <Get_SerialNum+0x48>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd8e:	4b0e      	ldr	r3, [pc, #56]	@ (800bdc8 <Get_SerialNum+0x4c>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4413      	add	r3, r2
 800bd9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d009      	beq.n	800bdb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bda2:	2208      	movs	r2, #8
 800bda4:	4909      	ldr	r1, [pc, #36]	@ (800bdcc <Get_SerialNum+0x50>)
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f000 f814 	bl	800bdd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bdac:	2204      	movs	r2, #4
 800bdae:	4908      	ldr	r1, [pc, #32]	@ (800bdd0 <Get_SerialNum+0x54>)
 800bdb0:	68b8      	ldr	r0, [r7, #8]
 800bdb2:	f000 f80f 	bl	800bdd4 <IntToUnicode>
  }
}
 800bdb6:	bf00      	nop
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	1fff7590 	.word	0x1fff7590
 800bdc4:	1fff7594 	.word	0x1fff7594
 800bdc8:	1fff7598 	.word	0x1fff7598
 800bdcc:	200000f2 	.word	0x200000f2
 800bdd0:	20000102 	.word	0x20000102

0800bdd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b087      	sub	sp, #28
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	4613      	mov	r3, r2
 800bde0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bde2:	2300      	movs	r3, #0
 800bde4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bde6:	2300      	movs	r3, #0
 800bde8:	75fb      	strb	r3, [r7, #23]
 800bdea:	e027      	b.n	800be3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	0f1b      	lsrs	r3, r3, #28
 800bdf0:	2b09      	cmp	r3, #9
 800bdf2:	d80b      	bhi.n	800be0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	0f1b      	lsrs	r3, r3, #28
 800bdf8:	b2da      	uxtb	r2, r3
 800bdfa:	7dfb      	ldrb	r3, [r7, #23]
 800bdfc:	005b      	lsls	r3, r3, #1
 800bdfe:	4619      	mov	r1, r3
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	440b      	add	r3, r1
 800be04:	3230      	adds	r2, #48	@ 0x30
 800be06:	b2d2      	uxtb	r2, r2
 800be08:	701a      	strb	r2, [r3, #0]
 800be0a:	e00a      	b.n	800be22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	0f1b      	lsrs	r3, r3, #28
 800be10:	b2da      	uxtb	r2, r3
 800be12:	7dfb      	ldrb	r3, [r7, #23]
 800be14:	005b      	lsls	r3, r3, #1
 800be16:	4619      	mov	r1, r3
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	440b      	add	r3, r1
 800be1c:	3237      	adds	r2, #55	@ 0x37
 800be1e:	b2d2      	uxtb	r2, r2
 800be20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	011b      	lsls	r3, r3, #4
 800be26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be28:	7dfb      	ldrb	r3, [r7, #23]
 800be2a:	005b      	lsls	r3, r3, #1
 800be2c:	3301      	adds	r3, #1
 800be2e:	68ba      	ldr	r2, [r7, #8]
 800be30:	4413      	add	r3, r2
 800be32:	2200      	movs	r2, #0
 800be34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be36:	7dfb      	ldrb	r3, [r7, #23]
 800be38:	3301      	adds	r3, #1
 800be3a:	75fb      	strb	r3, [r7, #23]
 800be3c:	7dfa      	ldrb	r2, [r7, #23]
 800be3e:	79fb      	ldrb	r3, [r7, #7]
 800be40:	429a      	cmp	r2, r3
 800be42:	d3d3      	bcc.n	800bdec <IntToUnicode+0x18>
  }
}
 800be44:	bf00      	nop
 800be46:	bf00      	nop
 800be48:	371c      	adds	r7, #28
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr
	...

0800be54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b0b0      	sub	sp, #192	@ 0xc0
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be5c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800be60:	2200      	movs	r2, #0
 800be62:	601a      	str	r2, [r3, #0]
 800be64:	605a      	str	r2, [r3, #4]
 800be66:	609a      	str	r2, [r3, #8]
 800be68:	60da      	str	r2, [r3, #12]
 800be6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800be6c:	f107 0318 	add.w	r3, r7, #24
 800be70:	2294      	movs	r2, #148	@ 0x94
 800be72:	2100      	movs	r1, #0
 800be74:	4618      	mov	r0, r3
 800be76:	f000 fcf1 	bl	800c85c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be82:	d174      	bne.n	800bf6e <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800be84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800be88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800be8a:	2300      	movs	r3, #0
 800be8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800be90:	f107 0318 	add.w	r3, r7, #24
 800be94:	4618      	mov	r0, r3
 800be96:	f7fa faef 	bl	8006478 <HAL_RCCEx_PeriphCLKConfig>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d001      	beq.n	800bea4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800bea0:	f7f5 fbf1 	bl	8001686 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bea4:	4b34      	ldr	r3, [pc, #208]	@ (800bf78 <HAL_PCD_MspInit+0x124>)
 800bea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bea8:	4a33      	ldr	r2, [pc, #204]	@ (800bf78 <HAL_PCD_MspInit+0x124>)
 800beaa:	f043 0301 	orr.w	r3, r3, #1
 800beae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800beb0:	4b31      	ldr	r3, [pc, #196]	@ (800bf78 <HAL_PCD_MspInit+0x124>)
 800beb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800beb4:	f003 0301 	and.w	r3, r3, #1
 800beb8:	617b      	str	r3, [r7, #20]
 800beba:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800bebc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800bec0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bec4:	2302      	movs	r3, #2
 800bec6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800beca:	2300      	movs	r3, #0
 800becc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bed0:	2303      	movs	r3, #3
 800bed2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bed6:	230a      	movs	r3, #10
 800bed8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bedc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800bee0:	4619      	mov	r1, r3
 800bee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bee6:	f7f7 ff87 	bl	8003df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800beea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800beee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bef2:	2300      	movs	r3, #0
 800bef4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bef8:	2300      	movs	r3, #0
 800befa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800befe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800bf02:	4619      	mov	r1, r3
 800bf04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bf08:	f7f7 ff76 	bl	8003df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf0c:	4b1a      	ldr	r3, [pc, #104]	@ (800bf78 <HAL_PCD_MspInit+0x124>)
 800bf0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf10:	4a19      	ldr	r2, [pc, #100]	@ (800bf78 <HAL_PCD_MspInit+0x124>)
 800bf12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bf16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bf18:	4b17      	ldr	r3, [pc, #92]	@ (800bf78 <HAL_PCD_MspInit+0x124>)
 800bf1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bf20:	613b      	str	r3, [r7, #16]
 800bf22:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bf24:	4b14      	ldr	r3, [pc, #80]	@ (800bf78 <HAL_PCD_MspInit+0x124>)
 800bf26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d114      	bne.n	800bf5a <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bf30:	4b11      	ldr	r3, [pc, #68]	@ (800bf78 <HAL_PCD_MspInit+0x124>)
 800bf32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf34:	4a10      	ldr	r2, [pc, #64]	@ (800bf78 <HAL_PCD_MspInit+0x124>)
 800bf36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf3a:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf3c:	4b0e      	ldr	r3, [pc, #56]	@ (800bf78 <HAL_PCD_MspInit+0x124>)
 800bf3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf44:	60fb      	str	r3, [r7, #12]
 800bf46:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800bf48:	f7f9 fb9e 	bl	8005688 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf4c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf78 <HAL_PCD_MspInit+0x124>)
 800bf4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf50:	4a09      	ldr	r2, [pc, #36]	@ (800bf78 <HAL_PCD_MspInit+0x124>)
 800bf52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf56:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf58:	e001      	b.n	800bf5e <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800bf5a:	f7f9 fb95 	bl	8005688 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2100      	movs	r1, #0
 800bf62:	2043      	movs	r0, #67	@ 0x43
 800bf64:	f7f7 fc57 	bl	8003816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf68:	2043      	movs	r0, #67	@ 0x43
 800bf6a:	f7f7 fc70 	bl	800384e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf6e:	bf00      	nop
 800bf70:	37c0      	adds	r7, #192	@ 0xc0
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	40021000 	.word	0x40021000

0800bf7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800bf90:	4619      	mov	r1, r3
 800bf92:	4610      	mov	r0, r2
 800bf94:	f7fe fad3 	bl	800a53e <USBD_LL_SetupStage>
}
 800bf98:	bf00      	nop
 800bf9a:	3708      	adds	r7, #8
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800bfb2:	78fa      	ldrb	r2, [r7, #3]
 800bfb4:	6879      	ldr	r1, [r7, #4]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	00db      	lsls	r3, r3, #3
 800bfba:	4413      	add	r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	440b      	add	r3, r1
 800bfc0:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	78fb      	ldrb	r3, [r7, #3]
 800bfc8:	4619      	mov	r1, r3
 800bfca:	f7fe fb0d 	bl	800a5e8 <USBD_LL_DataOutStage>
}
 800bfce:	bf00      	nop
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b082      	sub	sp, #8
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	460b      	mov	r3, r1
 800bfe0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800bfe8:	78fa      	ldrb	r2, [r7, #3]
 800bfea:	6879      	ldr	r1, [r7, #4]
 800bfec:	4613      	mov	r3, r2
 800bfee:	00db      	lsls	r3, r3, #3
 800bff0:	4413      	add	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	440b      	add	r3, r1
 800bff6:	3348      	adds	r3, #72	@ 0x48
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	78fb      	ldrb	r3, [r7, #3]
 800bffc:	4619      	mov	r1, r3
 800bffe:	f7fe fba6 	bl	800a74e <USBD_LL_DataInStage>
}
 800c002:	bf00      	nop
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b082      	sub	sp, #8
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c018:	4618      	mov	r0, r3
 800c01a:	f7fe fce0 	bl	800a9de <USBD_LL_SOF>
}
 800c01e:	bf00      	nop
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b084      	sub	sp, #16
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c02e:	2301      	movs	r3, #1
 800c030:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	2b02      	cmp	r3, #2
 800c038:	d001      	beq.n	800c03e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c03a:	f7f5 fb24 	bl	8001686 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c044:	7bfa      	ldrb	r2, [r7, #15]
 800c046:	4611      	mov	r1, r2
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fe fc84 	bl	800a956 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c054:	4618      	mov	r0, r3
 800c056:	f7fe fc2c 	bl	800a8b2 <USBD_LL_Reset>
}
 800c05a:	bf00      	nop
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
	...

0800c064 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	6812      	ldr	r2, [r2, #0]
 800c07a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c07e:	f043 0301 	orr.w	r3, r3, #1
 800c082:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fe fc73 	bl	800a976 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a1b      	ldr	r3, [r3, #32]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d005      	beq.n	800c0a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c098:	4b04      	ldr	r3, [pc, #16]	@ (800c0ac <HAL_PCD_SuspendCallback+0x48>)
 800c09a:	691b      	ldr	r3, [r3, #16]
 800c09c:	4a03      	ldr	r2, [pc, #12]	@ (800c0ac <HAL_PCD_SuspendCallback+0x48>)
 800c09e:	f043 0306 	orr.w	r3, r3, #6
 800c0a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c0a4:	bf00      	nop
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	e000ed00 	.word	0xe000ed00

0800c0b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	6812      	ldr	r2, [r2, #0]
 800c0c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c0ca:	f023 0301 	bic.w	r3, r3, #1
 800c0ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6a1b      	ldr	r3, [r3, #32]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d007      	beq.n	800c0e8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0d8:	4b08      	ldr	r3, [pc, #32]	@ (800c0fc <HAL_PCD_ResumeCallback+0x4c>)
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	4a07      	ldr	r2, [pc, #28]	@ (800c0fc <HAL_PCD_ResumeCallback+0x4c>)
 800c0de:	f023 0306 	bic.w	r3, r3, #6
 800c0e2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c0e4:	f000 faf6 	bl	800c6d4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fe fc5d 	bl	800a9ae <USBD_LL_Resume>
}
 800c0f4:	bf00      	nop
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	e000ed00 	.word	0xe000ed00

0800c100 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	460b      	mov	r3, r1
 800c10a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c112:	78fa      	ldrb	r2, [r7, #3]
 800c114:	4611      	mov	r1, r2
 800c116:	4618      	mov	r0, r3
 800c118:	f7fe fcb3 	bl	800aa82 <USBD_LL_IsoOUTIncomplete>
}
 800c11c:	bf00      	nop
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	460b      	mov	r3, r1
 800c12e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c136:	78fa      	ldrb	r2, [r7, #3]
 800c138:	4611      	mov	r1, r2
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fe fc6f 	bl	800aa1e <USBD_LL_IsoINIncomplete>
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c156:	4618      	mov	r0, r3
 800c158:	f7fe fcc5 	bl	800aae6 <USBD_LL_DevConnected>
}
 800c15c:	bf00      	nop
 800c15e:	3708      	adds	r7, #8
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c172:	4618      	mov	r0, r3
 800c174:	f7fe fcc2 	bl	800aafc <USBD_LL_DevDisconnected>
}
 800c178:	bf00      	nop
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d13c      	bne.n	800c20a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c190:	4a20      	ldr	r2, [pc, #128]	@ (800c214 <USBD_LL_Init+0x94>)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a1e      	ldr	r2, [pc, #120]	@ (800c214 <USBD_LL_Init+0x94>)
 800c19c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c1a0:	4b1c      	ldr	r3, [pc, #112]	@ (800c214 <USBD_LL_Init+0x94>)
 800c1a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c1a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c1a8:	4b1a      	ldr	r3, [pc, #104]	@ (800c214 <USBD_LL_Init+0x94>)
 800c1aa:	2206      	movs	r2, #6
 800c1ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c1ae:	4b19      	ldr	r3, [pc, #100]	@ (800c214 <USBD_LL_Init+0x94>)
 800c1b0:	2202      	movs	r2, #2
 800c1b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c1b4:	4b17      	ldr	r3, [pc, #92]	@ (800c214 <USBD_LL_Init+0x94>)
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800c1ba:	4b16      	ldr	r3, [pc, #88]	@ (800c214 <USBD_LL_Init+0x94>)
 800c1bc:	2201      	movs	r2, #1
 800c1be:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c1c0:	4b14      	ldr	r3, [pc, #80]	@ (800c214 <USBD_LL_Init+0x94>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c1c6:	4b13      	ldr	r3, [pc, #76]	@ (800c214 <USBD_LL_Init+0x94>)
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800c1cc:	4b11      	ldr	r3, [pc, #68]	@ (800c214 <USBD_LL_Init+0x94>)
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c1d2:	4b10      	ldr	r3, [pc, #64]	@ (800c214 <USBD_LL_Init+0x94>)
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c1d8:	4b0e      	ldr	r3, [pc, #56]	@ (800c214 <USBD_LL_Init+0x94>)
 800c1da:	2201      	movs	r2, #1
 800c1dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c1de:	480d      	ldr	r0, [pc, #52]	@ (800c214 <USBD_LL_Init+0x94>)
 800c1e0:	f7f7 ffe6 	bl	80041b0 <HAL_PCD_Init>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d001      	beq.n	800c1ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c1ea:	f7f5 fa4c 	bl	8001686 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c1ee:	2180      	movs	r1, #128	@ 0x80
 800c1f0:	4808      	ldr	r0, [pc, #32]	@ (800c214 <USBD_LL_Init+0x94>)
 800c1f2:	f7f9 f950 	bl	8005496 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c1f6:	2240      	movs	r2, #64	@ 0x40
 800c1f8:	2100      	movs	r1, #0
 800c1fa:	4806      	ldr	r0, [pc, #24]	@ (800c214 <USBD_LL_Init+0x94>)
 800c1fc:	f7f9 f904 	bl	8005408 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c200:	2280      	movs	r2, #128	@ 0x80
 800c202:	2101      	movs	r1, #1
 800c204:	4803      	ldr	r0, [pc, #12]	@ (800c214 <USBD_LL_Init+0x94>)
 800c206:	f7f9 f8ff 	bl	8005408 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	2000ba98 	.word	0x2000ba98

0800c218 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c220:	2300      	movs	r3, #0
 800c222:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c224:	2300      	movs	r3, #0
 800c226:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c22e:	4618      	mov	r0, r3
 800c230:	f7f8 f8e2 	bl	80043f8 <HAL_PCD_Start>
 800c234:	4603      	mov	r3, r0
 800c236:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c238:	7bbb      	ldrb	r3, [r7, #14]
 800c23a:	2b03      	cmp	r3, #3
 800c23c:	d816      	bhi.n	800c26c <USBD_LL_Start+0x54>
 800c23e:	a201      	add	r2, pc, #4	@ (adr r2, 800c244 <USBD_LL_Start+0x2c>)
 800c240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c244:	0800c255 	.word	0x0800c255
 800c248:	0800c25b 	.word	0x0800c25b
 800c24c:	0800c261 	.word	0x0800c261
 800c250:	0800c267 	.word	0x0800c267
    case HAL_OK :
      usb_status = USBD_OK;
 800c254:	2300      	movs	r3, #0
 800c256:	73fb      	strb	r3, [r7, #15]
    break;
 800c258:	e00b      	b.n	800c272 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c25a:	2303      	movs	r3, #3
 800c25c:	73fb      	strb	r3, [r7, #15]
    break;
 800c25e:	e008      	b.n	800c272 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c260:	2301      	movs	r3, #1
 800c262:	73fb      	strb	r3, [r7, #15]
    break;
 800c264:	e005      	b.n	800c272 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c266:	2303      	movs	r3, #3
 800c268:	73fb      	strb	r3, [r7, #15]
    break;
 800c26a:	e002      	b.n	800c272 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c26c:	2303      	movs	r3, #3
 800c26e:	73fb      	strb	r3, [r7, #15]
    break;
 800c270:	bf00      	nop
  }
  return usb_status;
 800c272:	7bfb      	ldrb	r3, [r7, #15]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3710      	adds	r7, #16
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	4608      	mov	r0, r1
 800c286:	4611      	mov	r1, r2
 800c288:	461a      	mov	r2, r3
 800c28a:	4603      	mov	r3, r0
 800c28c:	70fb      	strb	r3, [r7, #3]
 800c28e:	460b      	mov	r3, r1
 800c290:	70bb      	strb	r3, [r7, #2]
 800c292:	4613      	mov	r3, r2
 800c294:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c296:	2300      	movs	r3, #0
 800c298:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c2a4:	78bb      	ldrb	r3, [r7, #2]
 800c2a6:	883a      	ldrh	r2, [r7, #0]
 800c2a8:	78f9      	ldrb	r1, [r7, #3]
 800c2aa:	f7f8 fd8c 	bl	8004dc6 <HAL_PCD_EP_Open>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c2b2:	7bbb      	ldrb	r3, [r7, #14]
 800c2b4:	2b03      	cmp	r3, #3
 800c2b6:	d817      	bhi.n	800c2e8 <USBD_LL_OpenEP+0x6c>
 800c2b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c2c0 <USBD_LL_OpenEP+0x44>)
 800c2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2be:	bf00      	nop
 800c2c0:	0800c2d1 	.word	0x0800c2d1
 800c2c4:	0800c2d7 	.word	0x0800c2d7
 800c2c8:	0800c2dd 	.word	0x0800c2dd
 800c2cc:	0800c2e3 	.word	0x0800c2e3
    case HAL_OK :
      usb_status = USBD_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c2d4:	e00b      	b.n	800c2ee <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	73fb      	strb	r3, [r7, #15]
    break;
 800c2da:	e008      	b.n	800c2ee <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	73fb      	strb	r3, [r7, #15]
    break;
 800c2e0:	e005      	b.n	800c2ee <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c2e2:	2303      	movs	r3, #3
 800c2e4:	73fb      	strb	r3, [r7, #15]
    break;
 800c2e6:	e002      	b.n	800c2ee <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ec:	bf00      	nop
  }
  return usb_status;
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3710      	adds	r7, #16
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	460b      	mov	r3, r1
 800c302:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c304:	2300      	movs	r3, #0
 800c306:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c312:	78fa      	ldrb	r2, [r7, #3]
 800c314:	4611      	mov	r1, r2
 800c316:	4618      	mov	r0, r3
 800c318:	f7f8 fdbd 	bl	8004e96 <HAL_PCD_EP_Close>
 800c31c:	4603      	mov	r3, r0
 800c31e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c320:	7bbb      	ldrb	r3, [r7, #14]
 800c322:	2b03      	cmp	r3, #3
 800c324:	d816      	bhi.n	800c354 <USBD_LL_CloseEP+0x5c>
 800c326:	a201      	add	r2, pc, #4	@ (adr r2, 800c32c <USBD_LL_CloseEP+0x34>)
 800c328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c32c:	0800c33d 	.word	0x0800c33d
 800c330:	0800c343 	.word	0x0800c343
 800c334:	0800c349 	.word	0x0800c349
 800c338:	0800c34f 	.word	0x0800c34f
    case HAL_OK :
      usb_status = USBD_OK;
 800c33c:	2300      	movs	r3, #0
 800c33e:	73fb      	strb	r3, [r7, #15]
    break;
 800c340:	e00b      	b.n	800c35a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c342:	2303      	movs	r3, #3
 800c344:	73fb      	strb	r3, [r7, #15]
    break;
 800c346:	e008      	b.n	800c35a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c348:	2301      	movs	r3, #1
 800c34a:	73fb      	strb	r3, [r7, #15]
    break;
 800c34c:	e005      	b.n	800c35a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c34e:	2303      	movs	r3, #3
 800c350:	73fb      	strb	r3, [r7, #15]
    break;
 800c352:	e002      	b.n	800c35a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c354:	2303      	movs	r3, #3
 800c356:	73fb      	strb	r3, [r7, #15]
    break;
 800c358:	bf00      	nop
  }
  return usb_status;
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	460b      	mov	r3, r1
 800c36e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c370:	2300      	movs	r3, #0
 800c372:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c374:	2300      	movs	r3, #0
 800c376:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c37e:	78fa      	ldrb	r2, [r7, #3]
 800c380:	4611      	mov	r1, r2
 800c382:	4618      	mov	r0, r3
 800c384:	f7f8 fe4c 	bl	8005020 <HAL_PCD_EP_SetStall>
 800c388:	4603      	mov	r3, r0
 800c38a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c38c:	7bbb      	ldrb	r3, [r7, #14]
 800c38e:	2b03      	cmp	r3, #3
 800c390:	d816      	bhi.n	800c3c0 <USBD_LL_StallEP+0x5c>
 800c392:	a201      	add	r2, pc, #4	@ (adr r2, 800c398 <USBD_LL_StallEP+0x34>)
 800c394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c398:	0800c3a9 	.word	0x0800c3a9
 800c39c:	0800c3af 	.word	0x0800c3af
 800c3a0:	0800c3b5 	.word	0x0800c3b5
 800c3a4:	0800c3bb 	.word	0x0800c3bb
    case HAL_OK :
      usb_status = USBD_OK;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ac:	e00b      	b.n	800c3c6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3ae:	2303      	movs	r3, #3
 800c3b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c3b2:	e008      	b.n	800c3c6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c3b8:	e005      	b.n	800c3c6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c3be:	e002      	b.n	800c3c6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3c4:	bf00      	nop
  }
  return usb_status;
 800c3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3ea:	78fa      	ldrb	r2, [r7, #3]
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7f8 fe78 	bl	80050e4 <HAL_PCD_EP_ClrStall>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c3f8:	7bbb      	ldrb	r3, [r7, #14]
 800c3fa:	2b03      	cmp	r3, #3
 800c3fc:	d816      	bhi.n	800c42c <USBD_LL_ClearStallEP+0x5c>
 800c3fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c404 <USBD_LL_ClearStallEP+0x34>)
 800c400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c404:	0800c415 	.word	0x0800c415
 800c408:	0800c41b 	.word	0x0800c41b
 800c40c:	0800c421 	.word	0x0800c421
 800c410:	0800c427 	.word	0x0800c427
    case HAL_OK :
      usb_status = USBD_OK;
 800c414:	2300      	movs	r3, #0
 800c416:	73fb      	strb	r3, [r7, #15]
    break;
 800c418:	e00b      	b.n	800c432 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c41a:	2303      	movs	r3, #3
 800c41c:	73fb      	strb	r3, [r7, #15]
    break;
 800c41e:	e008      	b.n	800c432 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c420:	2301      	movs	r3, #1
 800c422:	73fb      	strb	r3, [r7, #15]
    break;
 800c424:	e005      	b.n	800c432 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c426:	2303      	movs	r3, #3
 800c428:	73fb      	strb	r3, [r7, #15]
    break;
 800c42a:	e002      	b.n	800c432 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c42c:	2303      	movs	r3, #3
 800c42e:	73fb      	strb	r3, [r7, #15]
    break;
 800c430:	bf00      	nop
  }
  return usb_status;
 800c432:	7bfb      	ldrb	r3, [r7, #15]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	460b      	mov	r3, r1
 800c446:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c44e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c454:	2b00      	cmp	r3, #0
 800c456:	da0b      	bge.n	800c470 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c458:	78fb      	ldrb	r3, [r7, #3]
 800c45a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c45e:	68f9      	ldr	r1, [r7, #12]
 800c460:	4613      	mov	r3, r2
 800c462:	00db      	lsls	r3, r3, #3
 800c464:	4413      	add	r3, r2
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	440b      	add	r3, r1
 800c46a:	333e      	adds	r3, #62	@ 0x3e
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	e00b      	b.n	800c488 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c470:	78fb      	ldrb	r3, [r7, #3]
 800c472:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c476:	68f9      	ldr	r1, [r7, #12]
 800c478:	4613      	mov	r3, r2
 800c47a:	00db      	lsls	r3, r3, #3
 800c47c:	4413      	add	r3, r2
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	440b      	add	r3, r1
 800c482:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800c486:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3714      	adds	r7, #20
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	460b      	mov	r3, r1
 800c49e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4ae:	78fa      	ldrb	r2, [r7, #3]
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7f8 fc62 	bl	8004d7c <HAL_PCD_SetAddress>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c4bc:	7bbb      	ldrb	r3, [r7, #14]
 800c4be:	2b03      	cmp	r3, #3
 800c4c0:	d816      	bhi.n	800c4f0 <USBD_LL_SetUSBAddress+0x5c>
 800c4c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c8 <USBD_LL_SetUSBAddress+0x34>)
 800c4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c8:	0800c4d9 	.word	0x0800c4d9
 800c4cc:	0800c4df 	.word	0x0800c4df
 800c4d0:	0800c4e5 	.word	0x0800c4e5
 800c4d4:	0800c4eb 	.word	0x0800c4eb
    case HAL_OK :
      usb_status = USBD_OK;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	73fb      	strb	r3, [r7, #15]
    break;
 800c4dc:	e00b      	b.n	800c4f6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4de:	2303      	movs	r3, #3
 800c4e0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4e2:	e008      	b.n	800c4f6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4e8:	e005      	b.n	800c4f6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c4ea:	2303      	movs	r3, #3
 800c4ec:	73fb      	strb	r3, [r7, #15]
    break;
 800c4ee:	e002      	b.n	800c4f6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4f4:	bf00      	nop
  }
  return usb_status;
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	607a      	str	r2, [r7, #4]
 800c50a:	603b      	str	r3, [r7, #0]
 800c50c:	460b      	mov	r3, r1
 800c50e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c510:	2300      	movs	r3, #0
 800c512:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c514:	2300      	movs	r3, #0
 800c516:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c51e:	7af9      	ldrb	r1, [r7, #11]
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	f7f8 fd4b 	bl	8004fbe <HAL_PCD_EP_Transmit>
 800c528:	4603      	mov	r3, r0
 800c52a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c52c:	7dbb      	ldrb	r3, [r7, #22]
 800c52e:	2b03      	cmp	r3, #3
 800c530:	d816      	bhi.n	800c560 <USBD_LL_Transmit+0x60>
 800c532:	a201      	add	r2, pc, #4	@ (adr r2, 800c538 <USBD_LL_Transmit+0x38>)
 800c534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c538:	0800c549 	.word	0x0800c549
 800c53c:	0800c54f 	.word	0x0800c54f
 800c540:	0800c555 	.word	0x0800c555
 800c544:	0800c55b 	.word	0x0800c55b
    case HAL_OK :
      usb_status = USBD_OK;
 800c548:	2300      	movs	r3, #0
 800c54a:	75fb      	strb	r3, [r7, #23]
    break;
 800c54c:	e00b      	b.n	800c566 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c54e:	2303      	movs	r3, #3
 800c550:	75fb      	strb	r3, [r7, #23]
    break;
 800c552:	e008      	b.n	800c566 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c554:	2301      	movs	r3, #1
 800c556:	75fb      	strb	r3, [r7, #23]
    break;
 800c558:	e005      	b.n	800c566 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c55a:	2303      	movs	r3, #3
 800c55c:	75fb      	strb	r3, [r7, #23]
    break;
 800c55e:	e002      	b.n	800c566 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c560:	2303      	movs	r3, #3
 800c562:	75fb      	strb	r3, [r7, #23]
    break;
 800c564:	bf00      	nop
  }
  return usb_status;
 800c566:	7dfb      	ldrb	r3, [r7, #23]
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3718      	adds	r7, #24
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	607a      	str	r2, [r7, #4]
 800c57a:	603b      	str	r3, [r7, #0]
 800c57c:	460b      	mov	r3, r1
 800c57e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c584:	2300      	movs	r3, #0
 800c586:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c58e:	7af9      	ldrb	r1, [r7, #11]
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	f7f8 fcc9 	bl	8004f2a <HAL_PCD_EP_Receive>
 800c598:	4603      	mov	r3, r0
 800c59a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c59c:	7dbb      	ldrb	r3, [r7, #22]
 800c59e:	2b03      	cmp	r3, #3
 800c5a0:	d816      	bhi.n	800c5d0 <USBD_LL_PrepareReceive+0x60>
 800c5a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5a8 <USBD_LL_PrepareReceive+0x38>)
 800c5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a8:	0800c5b9 	.word	0x0800c5b9
 800c5ac:	0800c5bf 	.word	0x0800c5bf
 800c5b0:	0800c5c5 	.word	0x0800c5c5
 800c5b4:	0800c5cb 	.word	0x0800c5cb
    case HAL_OK :
      usb_status = USBD_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	75fb      	strb	r3, [r7, #23]
    break;
 800c5bc:	e00b      	b.n	800c5d6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5be:	2303      	movs	r3, #3
 800c5c0:	75fb      	strb	r3, [r7, #23]
    break;
 800c5c2:	e008      	b.n	800c5d6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	75fb      	strb	r3, [r7, #23]
    break;
 800c5c8:	e005      	b.n	800c5d6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5ca:	2303      	movs	r3, #3
 800c5cc:	75fb      	strb	r3, [r7, #23]
    break;
 800c5ce:	e002      	b.n	800c5d6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	75fb      	strb	r3, [r7, #23]
    break;
 800c5d4:	bf00      	nop
  }
  return usb_status;
 800c5d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3718      	adds	r7, #24
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c5f2:	78fa      	ldrb	r2, [r7, #3]
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7f8 fcc9 	bl	8004f8e <HAL_PCD_EP_GetRxCount>
 800c5fc:	4603      	mov	r3, r0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3708      	adds	r7, #8
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
	...

0800c608 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	460b      	mov	r3, r1
 800c612:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c614:	78fb      	ldrb	r3, [r7, #3]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d002      	beq.n	800c620 <HAL_PCDEx_LPM_Callback+0x18>
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d01f      	beq.n	800c65e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c61e:	e03b      	b.n	800c698 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a1b      	ldr	r3, [r3, #32]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d007      	beq.n	800c638 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c628:	f000 f854 	bl	800c6d4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c62c:	4b1c      	ldr	r3, [pc, #112]	@ (800c6a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c62e:	691b      	ldr	r3, [r3, #16]
 800c630:	4a1b      	ldr	r2, [pc, #108]	@ (800c6a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c632:	f023 0306 	bic.w	r3, r3, #6
 800c636:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	6812      	ldr	r2, [r2, #0]
 800c646:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c64a:	f023 0301 	bic.w	r3, r3, #1
 800c64e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c656:	4618      	mov	r0, r3
 800c658:	f7fe f9a9 	bl	800a9ae <USBD_LL_Resume>
    break;
 800c65c:	e01c      	b.n	800c698 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	6812      	ldr	r2, [r2, #0]
 800c66c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c670:	f043 0301 	orr.w	r3, r3, #1
 800c674:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fe f97a 	bl	800a976 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d005      	beq.n	800c696 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c68a:	4b05      	ldr	r3, [pc, #20]	@ (800c6a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	4a04      	ldr	r2, [pc, #16]	@ (800c6a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c690:	f043 0306 	orr.w	r3, r3, #6
 800c694:	6113      	str	r3, [r2, #16]
    break;
 800c696:	bf00      	nop
}
 800c698:	bf00      	nop
 800c69a:	3708      	adds	r7, #8
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	e000ed00 	.word	0xe000ed00

0800c6a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c6ac:	4b03      	ldr	r3, [pc, #12]	@ (800c6bc <USBD_static_malloc+0x18>)
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	370c      	adds	r7, #12
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	2000bfa4 	.word	0x2000bfa4

0800c6c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]

}
 800c6c8:	bf00      	nop
 800c6ca:	370c      	adds	r7, #12
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c6d8:	f7f4 ff82 	bl	80015e0 <SystemClock_Config>
}
 800c6dc:	bf00      	nop
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <malloc>:
 800c6e0:	4b02      	ldr	r3, [pc, #8]	@ (800c6ec <malloc+0xc>)
 800c6e2:	4601      	mov	r1, r0
 800c6e4:	6818      	ldr	r0, [r3, #0]
 800c6e6:	f000 b82d 	b.w	800c744 <_malloc_r>
 800c6ea:	bf00      	nop
 800c6ec:	2000010c 	.word	0x2000010c

0800c6f0 <free>:
 800c6f0:	4b02      	ldr	r3, [pc, #8]	@ (800c6fc <free+0xc>)
 800c6f2:	4601      	mov	r1, r0
 800c6f4:	6818      	ldr	r0, [r3, #0]
 800c6f6:	f000 b903 	b.w	800c900 <_free_r>
 800c6fa:	bf00      	nop
 800c6fc:	2000010c 	.word	0x2000010c

0800c700 <sbrk_aligned>:
 800c700:	b570      	push	{r4, r5, r6, lr}
 800c702:	4e0f      	ldr	r6, [pc, #60]	@ (800c740 <sbrk_aligned+0x40>)
 800c704:	460c      	mov	r4, r1
 800c706:	6831      	ldr	r1, [r6, #0]
 800c708:	4605      	mov	r5, r0
 800c70a:	b911      	cbnz	r1, 800c712 <sbrk_aligned+0x12>
 800c70c:	f000 f8ae 	bl	800c86c <_sbrk_r>
 800c710:	6030      	str	r0, [r6, #0]
 800c712:	4621      	mov	r1, r4
 800c714:	4628      	mov	r0, r5
 800c716:	f000 f8a9 	bl	800c86c <_sbrk_r>
 800c71a:	1c43      	adds	r3, r0, #1
 800c71c:	d103      	bne.n	800c726 <sbrk_aligned+0x26>
 800c71e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c722:	4620      	mov	r0, r4
 800c724:	bd70      	pop	{r4, r5, r6, pc}
 800c726:	1cc4      	adds	r4, r0, #3
 800c728:	f024 0403 	bic.w	r4, r4, #3
 800c72c:	42a0      	cmp	r0, r4
 800c72e:	d0f8      	beq.n	800c722 <sbrk_aligned+0x22>
 800c730:	1a21      	subs	r1, r4, r0
 800c732:	4628      	mov	r0, r5
 800c734:	f000 f89a 	bl	800c86c <_sbrk_r>
 800c738:	3001      	adds	r0, #1
 800c73a:	d1f2      	bne.n	800c722 <sbrk_aligned+0x22>
 800c73c:	e7ef      	b.n	800c71e <sbrk_aligned+0x1e>
 800c73e:	bf00      	nop
 800c740:	2000c1c4 	.word	0x2000c1c4

0800c744 <_malloc_r>:
 800c744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c748:	1ccd      	adds	r5, r1, #3
 800c74a:	f025 0503 	bic.w	r5, r5, #3
 800c74e:	3508      	adds	r5, #8
 800c750:	2d0c      	cmp	r5, #12
 800c752:	bf38      	it	cc
 800c754:	250c      	movcc	r5, #12
 800c756:	2d00      	cmp	r5, #0
 800c758:	4606      	mov	r6, r0
 800c75a:	db01      	blt.n	800c760 <_malloc_r+0x1c>
 800c75c:	42a9      	cmp	r1, r5
 800c75e:	d904      	bls.n	800c76a <_malloc_r+0x26>
 800c760:	230c      	movs	r3, #12
 800c762:	6033      	str	r3, [r6, #0]
 800c764:	2000      	movs	r0, #0
 800c766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c76a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c840 <_malloc_r+0xfc>
 800c76e:	f000 f869 	bl	800c844 <__malloc_lock>
 800c772:	f8d8 3000 	ldr.w	r3, [r8]
 800c776:	461c      	mov	r4, r3
 800c778:	bb44      	cbnz	r4, 800c7cc <_malloc_r+0x88>
 800c77a:	4629      	mov	r1, r5
 800c77c:	4630      	mov	r0, r6
 800c77e:	f7ff ffbf 	bl	800c700 <sbrk_aligned>
 800c782:	1c43      	adds	r3, r0, #1
 800c784:	4604      	mov	r4, r0
 800c786:	d158      	bne.n	800c83a <_malloc_r+0xf6>
 800c788:	f8d8 4000 	ldr.w	r4, [r8]
 800c78c:	4627      	mov	r7, r4
 800c78e:	2f00      	cmp	r7, #0
 800c790:	d143      	bne.n	800c81a <_malloc_r+0xd6>
 800c792:	2c00      	cmp	r4, #0
 800c794:	d04b      	beq.n	800c82e <_malloc_r+0xea>
 800c796:	6823      	ldr	r3, [r4, #0]
 800c798:	4639      	mov	r1, r7
 800c79a:	4630      	mov	r0, r6
 800c79c:	eb04 0903 	add.w	r9, r4, r3
 800c7a0:	f000 f864 	bl	800c86c <_sbrk_r>
 800c7a4:	4581      	cmp	r9, r0
 800c7a6:	d142      	bne.n	800c82e <_malloc_r+0xea>
 800c7a8:	6821      	ldr	r1, [r4, #0]
 800c7aa:	1a6d      	subs	r5, r5, r1
 800c7ac:	4629      	mov	r1, r5
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	f7ff ffa6 	bl	800c700 <sbrk_aligned>
 800c7b4:	3001      	adds	r0, #1
 800c7b6:	d03a      	beq.n	800c82e <_malloc_r+0xea>
 800c7b8:	6823      	ldr	r3, [r4, #0]
 800c7ba:	442b      	add	r3, r5
 800c7bc:	6023      	str	r3, [r4, #0]
 800c7be:	f8d8 3000 	ldr.w	r3, [r8]
 800c7c2:	685a      	ldr	r2, [r3, #4]
 800c7c4:	bb62      	cbnz	r2, 800c820 <_malloc_r+0xdc>
 800c7c6:	f8c8 7000 	str.w	r7, [r8]
 800c7ca:	e00f      	b.n	800c7ec <_malloc_r+0xa8>
 800c7cc:	6822      	ldr	r2, [r4, #0]
 800c7ce:	1b52      	subs	r2, r2, r5
 800c7d0:	d420      	bmi.n	800c814 <_malloc_r+0xd0>
 800c7d2:	2a0b      	cmp	r2, #11
 800c7d4:	d917      	bls.n	800c806 <_malloc_r+0xc2>
 800c7d6:	1961      	adds	r1, r4, r5
 800c7d8:	42a3      	cmp	r3, r4
 800c7da:	6025      	str	r5, [r4, #0]
 800c7dc:	bf18      	it	ne
 800c7de:	6059      	strne	r1, [r3, #4]
 800c7e0:	6863      	ldr	r3, [r4, #4]
 800c7e2:	bf08      	it	eq
 800c7e4:	f8c8 1000 	streq.w	r1, [r8]
 800c7e8:	5162      	str	r2, [r4, r5]
 800c7ea:	604b      	str	r3, [r1, #4]
 800c7ec:	4630      	mov	r0, r6
 800c7ee:	f000 f82f 	bl	800c850 <__malloc_unlock>
 800c7f2:	f104 000b 	add.w	r0, r4, #11
 800c7f6:	1d23      	adds	r3, r4, #4
 800c7f8:	f020 0007 	bic.w	r0, r0, #7
 800c7fc:	1ac2      	subs	r2, r0, r3
 800c7fe:	bf1c      	itt	ne
 800c800:	1a1b      	subne	r3, r3, r0
 800c802:	50a3      	strne	r3, [r4, r2]
 800c804:	e7af      	b.n	800c766 <_malloc_r+0x22>
 800c806:	6862      	ldr	r2, [r4, #4]
 800c808:	42a3      	cmp	r3, r4
 800c80a:	bf0c      	ite	eq
 800c80c:	f8c8 2000 	streq.w	r2, [r8]
 800c810:	605a      	strne	r2, [r3, #4]
 800c812:	e7eb      	b.n	800c7ec <_malloc_r+0xa8>
 800c814:	4623      	mov	r3, r4
 800c816:	6864      	ldr	r4, [r4, #4]
 800c818:	e7ae      	b.n	800c778 <_malloc_r+0x34>
 800c81a:	463c      	mov	r4, r7
 800c81c:	687f      	ldr	r7, [r7, #4]
 800c81e:	e7b6      	b.n	800c78e <_malloc_r+0x4a>
 800c820:	461a      	mov	r2, r3
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	42a3      	cmp	r3, r4
 800c826:	d1fb      	bne.n	800c820 <_malloc_r+0xdc>
 800c828:	2300      	movs	r3, #0
 800c82a:	6053      	str	r3, [r2, #4]
 800c82c:	e7de      	b.n	800c7ec <_malloc_r+0xa8>
 800c82e:	230c      	movs	r3, #12
 800c830:	6033      	str	r3, [r6, #0]
 800c832:	4630      	mov	r0, r6
 800c834:	f000 f80c 	bl	800c850 <__malloc_unlock>
 800c838:	e794      	b.n	800c764 <_malloc_r+0x20>
 800c83a:	6005      	str	r5, [r0, #0]
 800c83c:	e7d6      	b.n	800c7ec <_malloc_r+0xa8>
 800c83e:	bf00      	nop
 800c840:	2000c1c8 	.word	0x2000c1c8

0800c844 <__malloc_lock>:
 800c844:	4801      	ldr	r0, [pc, #4]	@ (800c84c <__malloc_lock+0x8>)
 800c846:	f000 b84b 	b.w	800c8e0 <__retarget_lock_acquire_recursive>
 800c84a:	bf00      	nop
 800c84c:	2000c308 	.word	0x2000c308

0800c850 <__malloc_unlock>:
 800c850:	4801      	ldr	r0, [pc, #4]	@ (800c858 <__malloc_unlock+0x8>)
 800c852:	f000 b846 	b.w	800c8e2 <__retarget_lock_release_recursive>
 800c856:	bf00      	nop
 800c858:	2000c308 	.word	0x2000c308

0800c85c <memset>:
 800c85c:	4402      	add	r2, r0
 800c85e:	4603      	mov	r3, r0
 800c860:	4293      	cmp	r3, r2
 800c862:	d100      	bne.n	800c866 <memset+0xa>
 800c864:	4770      	bx	lr
 800c866:	f803 1b01 	strb.w	r1, [r3], #1
 800c86a:	e7f9      	b.n	800c860 <memset+0x4>

0800c86c <_sbrk_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	4d06      	ldr	r5, [pc, #24]	@ (800c888 <_sbrk_r+0x1c>)
 800c870:	2300      	movs	r3, #0
 800c872:	4604      	mov	r4, r0
 800c874:	4608      	mov	r0, r1
 800c876:	602b      	str	r3, [r5, #0]
 800c878:	f7f4 ffa4 	bl	80017c4 <_sbrk>
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	d102      	bne.n	800c886 <_sbrk_r+0x1a>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	b103      	cbz	r3, 800c886 <_sbrk_r+0x1a>
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	bd38      	pop	{r3, r4, r5, pc}
 800c888:	2000c304 	.word	0x2000c304

0800c88c <__errno>:
 800c88c:	4b01      	ldr	r3, [pc, #4]	@ (800c894 <__errno+0x8>)
 800c88e:	6818      	ldr	r0, [r3, #0]
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	2000010c 	.word	0x2000010c

0800c898 <__libc_init_array>:
 800c898:	b570      	push	{r4, r5, r6, lr}
 800c89a:	4d0d      	ldr	r5, [pc, #52]	@ (800c8d0 <__libc_init_array+0x38>)
 800c89c:	4c0d      	ldr	r4, [pc, #52]	@ (800c8d4 <__libc_init_array+0x3c>)
 800c89e:	1b64      	subs	r4, r4, r5
 800c8a0:	10a4      	asrs	r4, r4, #2
 800c8a2:	2600      	movs	r6, #0
 800c8a4:	42a6      	cmp	r6, r4
 800c8a6:	d109      	bne.n	800c8bc <__libc_init_array+0x24>
 800c8a8:	4d0b      	ldr	r5, [pc, #44]	@ (800c8d8 <__libc_init_array+0x40>)
 800c8aa:	4c0c      	ldr	r4, [pc, #48]	@ (800c8dc <__libc_init_array+0x44>)
 800c8ac:	f000 f872 	bl	800c994 <_init>
 800c8b0:	1b64      	subs	r4, r4, r5
 800c8b2:	10a4      	asrs	r4, r4, #2
 800c8b4:	2600      	movs	r6, #0
 800c8b6:	42a6      	cmp	r6, r4
 800c8b8:	d105      	bne.n	800c8c6 <__libc_init_array+0x2e>
 800c8ba:	bd70      	pop	{r4, r5, r6, pc}
 800c8bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8c0:	4798      	blx	r3
 800c8c2:	3601      	adds	r6, #1
 800c8c4:	e7ee      	b.n	800c8a4 <__libc_init_array+0xc>
 800c8c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8ca:	4798      	blx	r3
 800c8cc:	3601      	adds	r6, #1
 800c8ce:	e7f2      	b.n	800c8b6 <__libc_init_array+0x1e>
 800c8d0:	0800ca6c 	.word	0x0800ca6c
 800c8d4:	0800ca6c 	.word	0x0800ca6c
 800c8d8:	0800ca6c 	.word	0x0800ca6c
 800c8dc:	0800ca70 	.word	0x0800ca70

0800c8e0 <__retarget_lock_acquire_recursive>:
 800c8e0:	4770      	bx	lr

0800c8e2 <__retarget_lock_release_recursive>:
 800c8e2:	4770      	bx	lr

0800c8e4 <memcpy>:
 800c8e4:	440a      	add	r2, r1
 800c8e6:	4291      	cmp	r1, r2
 800c8e8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c8ec:	d100      	bne.n	800c8f0 <memcpy+0xc>
 800c8ee:	4770      	bx	lr
 800c8f0:	b510      	push	{r4, lr}
 800c8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8fa:	4291      	cmp	r1, r2
 800c8fc:	d1f9      	bne.n	800c8f2 <memcpy+0xe>
 800c8fe:	bd10      	pop	{r4, pc}

0800c900 <_free_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4605      	mov	r5, r0
 800c904:	2900      	cmp	r1, #0
 800c906:	d041      	beq.n	800c98c <_free_r+0x8c>
 800c908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c90c:	1f0c      	subs	r4, r1, #4
 800c90e:	2b00      	cmp	r3, #0
 800c910:	bfb8      	it	lt
 800c912:	18e4      	addlt	r4, r4, r3
 800c914:	f7ff ff96 	bl	800c844 <__malloc_lock>
 800c918:	4a1d      	ldr	r2, [pc, #116]	@ (800c990 <_free_r+0x90>)
 800c91a:	6813      	ldr	r3, [r2, #0]
 800c91c:	b933      	cbnz	r3, 800c92c <_free_r+0x2c>
 800c91e:	6063      	str	r3, [r4, #4]
 800c920:	6014      	str	r4, [r2, #0]
 800c922:	4628      	mov	r0, r5
 800c924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c928:	f7ff bf92 	b.w	800c850 <__malloc_unlock>
 800c92c:	42a3      	cmp	r3, r4
 800c92e:	d908      	bls.n	800c942 <_free_r+0x42>
 800c930:	6820      	ldr	r0, [r4, #0]
 800c932:	1821      	adds	r1, r4, r0
 800c934:	428b      	cmp	r3, r1
 800c936:	bf01      	itttt	eq
 800c938:	6819      	ldreq	r1, [r3, #0]
 800c93a:	685b      	ldreq	r3, [r3, #4]
 800c93c:	1809      	addeq	r1, r1, r0
 800c93e:	6021      	streq	r1, [r4, #0]
 800c940:	e7ed      	b.n	800c91e <_free_r+0x1e>
 800c942:	461a      	mov	r2, r3
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	b10b      	cbz	r3, 800c94c <_free_r+0x4c>
 800c948:	42a3      	cmp	r3, r4
 800c94a:	d9fa      	bls.n	800c942 <_free_r+0x42>
 800c94c:	6811      	ldr	r1, [r2, #0]
 800c94e:	1850      	adds	r0, r2, r1
 800c950:	42a0      	cmp	r0, r4
 800c952:	d10b      	bne.n	800c96c <_free_r+0x6c>
 800c954:	6820      	ldr	r0, [r4, #0]
 800c956:	4401      	add	r1, r0
 800c958:	1850      	adds	r0, r2, r1
 800c95a:	4283      	cmp	r3, r0
 800c95c:	6011      	str	r1, [r2, #0]
 800c95e:	d1e0      	bne.n	800c922 <_free_r+0x22>
 800c960:	6818      	ldr	r0, [r3, #0]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	6053      	str	r3, [r2, #4]
 800c966:	4408      	add	r0, r1
 800c968:	6010      	str	r0, [r2, #0]
 800c96a:	e7da      	b.n	800c922 <_free_r+0x22>
 800c96c:	d902      	bls.n	800c974 <_free_r+0x74>
 800c96e:	230c      	movs	r3, #12
 800c970:	602b      	str	r3, [r5, #0]
 800c972:	e7d6      	b.n	800c922 <_free_r+0x22>
 800c974:	6820      	ldr	r0, [r4, #0]
 800c976:	1821      	adds	r1, r4, r0
 800c978:	428b      	cmp	r3, r1
 800c97a:	bf04      	itt	eq
 800c97c:	6819      	ldreq	r1, [r3, #0]
 800c97e:	685b      	ldreq	r3, [r3, #4]
 800c980:	6063      	str	r3, [r4, #4]
 800c982:	bf04      	itt	eq
 800c984:	1809      	addeq	r1, r1, r0
 800c986:	6021      	streq	r1, [r4, #0]
 800c988:	6054      	str	r4, [r2, #4]
 800c98a:	e7ca      	b.n	800c922 <_free_r+0x22>
 800c98c:	bd38      	pop	{r3, r4, r5, pc}
 800c98e:	bf00      	nop
 800c990:	2000c1c8 	.word	0x2000c1c8

0800c994 <_init>:
 800c994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c996:	bf00      	nop
 800c998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c99a:	bc08      	pop	{r3}
 800c99c:	469e      	mov	lr, r3
 800c99e:	4770      	bx	lr

0800c9a0 <_fini>:
 800c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a2:	bf00      	nop
 800c9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9a6:	bc08      	pop	{r3}
 800c9a8:	469e      	mov	lr, r3
 800c9aa:	4770      	bx	lr
