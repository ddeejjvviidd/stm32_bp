
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdbc  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800bf78  0800bf78  0000cf78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c030  0800c030  0000e10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c030  0800c030  0000d030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c038  0800c038  0000e10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c038  0800c038  0000d038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c03c  0800c03c  0000d03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800c040  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c068  2000010c  0800c14c  0000e10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c174  0800c14c  0000e174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b8e  00000000  00000000  0000e13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ccf  00000000  00000000  00031cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c18  00000000  00000000  000369a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a9  00000000  00000000  000385b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff00  00000000  00000000  00039b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000235ea  00000000  00000000  00069a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d573  00000000  00000000  0008d04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001aa5be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000766c  00000000  00000000  001aa604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b1c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800bf60 	.word	0x0800bf60

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800bf60 	.word	0x0800bf60

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <MX_ADC1_Init+0xe0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000530:	2200      	movs	r2, #0
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800056a:	f001 fab9 	bl	8001ae0 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 fcc3 	bl	8000efe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0xe4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000596:	f001 fe35 	bl	8002204 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 fcad 	bl	8000efe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_ADC1_Init+0xe8>)
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a8:	230c      	movs	r3, #12
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 80005b2:	f001 fe27 	bl	8002204 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 fc9f 	bl	8000efe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000128 	.word	0x20000128
 80005cc:	50040000 	.word	0x50040000
 80005d0:	c7520000 	.word	0xc7520000
 80005d4:	04300002 	.word	0x04300002

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0ae      	sub	sp, #184	@ 0xb8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2294      	movs	r2, #148	@ 0x94
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00b fc77 	bl	800beec <memset>
  if(adcHandle->Instance==ADC1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <HAL_ADC_MspInit+0x12c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d179      	bne.n	80006fc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fb23 	bl	8005c84 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000644:	f000 fc5b 	bl	8000efe <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2e      	ldr	r2, [pc, #184]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800067e:	230b      	movs	r3, #11
 8000680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068e:	4619      	mov	r1, r3
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0x134>)
 8000692:	f002 ffb7 	bl	8003604 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_ADC_MspInit+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 800069e:	2205      	movs	r2, #5
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006d2:	f002 fcdd 	bl	8003090 <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006dc:	f000 fc0f 	bl	8000efe <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2012      	movs	r0, #18
 80006f2:	f002 fc96 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f002 fcaf 	bl	800305a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	37b8      	adds	r7, #184	@ 0xb8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	20000190 	.word	0x20000190
 8000714:	40020008 	.word	0x40020008

08000718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_DMA_Init+0xac>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <MX_DMA_Init+0xac>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_DMA_Init+0xb4>)
 8000752:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800075c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000760:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800077c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800078c:	f002 fc80 	bl	8003090 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000796:	f000 fbb2 	bl	8000efe <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200b      	movs	r0, #11
 80007a0:	f002 fc3f 	bl	8003022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a4:	200b      	movs	r0, #11
 80007a6:	f002 fc58 	bl	800305a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f002 fc37 	bl	8003022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f002 fc50 	bl	800305a <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	4002001c 	.word	0x4002001c

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b55      	ldr	r3, [pc, #340]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a54      	ldr	r2, [pc, #336]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a4e      	ldr	r2, [pc, #312]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a48      	ldr	r2, [pc, #288]	@ (800093c <MX_GPIO_Init+0x16c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b46      	ldr	r3, [pc, #280]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x16c>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800085e:	f004 fb29 	bl	8004eb4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a35      	ldr	r2, [pc, #212]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000880:	482f      	ldr	r0, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x170>)
 8000882:	f003 f851 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	482e      	ldr	r0, [pc, #184]	@ (8000944 <MX_GPIO_Init+0x174>)
 800088c:	f003 f84c 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	482c      	ldr	r0, [pc, #176]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000896:	f003 f847 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4825      	ldr	r0, [pc, #148]	@ (8000948 <MX_GPIO_Init+0x178>)
 80008b2:	f002 fea7 	bl	8003604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	@ (8000940 <MX_GPIO_Init+0x170>)
 80008d0:	f002 fe98 	bl	8003604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <MX_GPIO_Init+0x174>)
 80008e8:	f002 fe8c 	bl	8003604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_GPIO_Init+0x174>)
 8000904:	f002 fe7e 	bl	8003604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000920:	f002 fe70 	bl	8003604 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2028      	movs	r0, #40	@ 0x28
 800092a:	f002 fb7a 	bl	8003022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f002 fb93 	bl	800305a <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	@ 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	48001800 	.word	0x48001800
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d119      	bne.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
		static bool previous;
		if(previous == false){
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000974:	f002 ffd8 	bl	8003928 <HAL_GPIO_WritePin>
			previous = true;
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800097e:	e008      	b.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000988:	f002 ffce 	bl	8003928 <HAL_GPIO_WritePin>
			previous = false;
 800098c:	4b03      	ldr	r3, [pc, #12]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000250 	.word	0x20000250
 80009a0:	48000400 	.word	0x48000400

080009a4 <DataTransmit2MTLB>:

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);
extern void DataReceive_MTLB_Callback(uint16_t iD, uint32_t *xData, uint16_t nData_in_values);

// Send float or uint32 or none data
int DataTransmit2MTLB(uint16_t iD, uint8_t *xData, uint16_t nData_in_values) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	80fb      	strh	r3, [r7, #6]
 80009b0:	4613      	mov	r3, r2
 80009b2:	80bb      	strh	r3, [r7, #4]
	// USB busy
	if (s2m_Status)
 80009b4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <DataTransmit2MTLB+0x88>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d002      	beq.n	80009c2 <DataTransmit2MTLB+0x1e>
		return -1;
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009c0:	e02f      	b.n	8000a22 <DataTransmit2MTLB+0x7e>

	if ((sizeof(buf_M_TX) - 4) < (nData_in_values * 4)) {
 80009c2:	88bb      	ldrh	r3, [r7, #4]
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80009ca:	d902      	bls.n	80009d2 <DataTransmit2MTLB+0x2e>
		// vystupni buffer je mensi nez odesilana data
		return -2;
 80009cc:	f06f 0301 	mvn.w	r3, #1
 80009d0:	e027      	b.n	8000a22 <DataTransmit2MTLB+0x7e>
	}

	s2m_Status = 1; // manualni nastaveni na USB busy, predpoklada se cinnost
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <DataTransmit2MTLB+0x88>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]

	// prekopirovani dat do bufferu
	((uint16_t*) buf_M_TX)[0] = iD;
 80009d8:	4a15      	ldr	r2, [pc, #84]	@ (8000a30 <DataTransmit2MTLB+0x8c>)
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	8013      	strh	r3, [r2, #0]
	((uint16_t*) buf_M_TX)[1] = nData_in_values;
 80009de:	4a15      	ldr	r2, [pc, #84]	@ (8000a34 <DataTransmit2MTLB+0x90>)
 80009e0:	88bb      	ldrh	r3, [r7, #4]
 80009e2:	8013      	strh	r3, [r2, #0]
	if (nData_in_values > 0)
 80009e4:	88bb      	ldrh	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d006      	beq.n	80009f8 <DataTransmit2MTLB+0x54>
		memcpy(buf_M_TX + 1, xData, nData_in_values * 4);
 80009ea:	4813      	ldr	r0, [pc, #76]	@ (8000a38 <DataTransmit2MTLB+0x94>)
 80009ec:	88bb      	ldrh	r3, [r7, #4]
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	461a      	mov	r2, r3
 80009f2:	6839      	ldr	r1, [r7, #0]
 80009f4:	f00b faa6 	bl	800bf44 <memcpy>

	// volani funkce na transmit dat
	s2m_Status = CDC_Transmit_FS((uint8_t*) buf_M_TX, nData_in_values * 4 + 4);
 80009f8:	88bb      	ldrh	r3, [r7, #4]
 80009fa:	3301      	adds	r3, #1
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4619      	mov	r1, r3
 8000a04:	480a      	ldr	r0, [pc, #40]	@ (8000a30 <DataTransmit2MTLB+0x8c>)
 8000a06:	f00a fcd1 	bl	800b3ac <CDC_Transmit_FS>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <DataTransmit2MTLB+0x88>)
 8000a10:	601a      	str	r2, [r3, #0]

	if (s2m_Status) {
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <DataTransmit2MTLB+0x88>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d002      	beq.n	8000a20 <DataTransmit2MTLB+0x7c>
		// USB busy, vyresetuje na USB_OK
		s2m_Status = 0;
 8000a1a:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <DataTransmit2MTLB+0x88>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20008258 	.word	0x20008258
 8000a30:	20000254 	.word	0x20000254
 8000a34:	20000256 	.word	0x20000256
 8000a38:	20000258 	.word	0x20000258

08000a3c <SendInt2MTLB>:

int SendData2MTLB(uint16_t iD, uint8_t *xData, uint16_t nData_in_values) {
	return DataTransmit2MTLB(iD, xData, nData_in_values);
}

int SendInt2MTLB(uint16_t iD, int *xInt) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	80fb      	strh	r3, [r7, #6]
	return DataTransmit2MTLB(iD, (uint8_t*) xInt, 1);
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	6839      	ldr	r1, [r7, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ffa8 	bl	80009a4 <DataTransmit2MTLB>
 8000a54:	4603      	mov	r3, r0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <m2s_Process>:

void m2s_Process() {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	// funkce volana z nekonecne smycky

	if (!m2s_Status)
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <m2s_Process+0x50>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d01e      	beq.n	8000aaa <m2s_Process+0x4a>
		return; // pokud neprisla data, ukonci se

	if (m2s_Status == 1) {
 8000a6c:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <m2s_Process+0x50>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d111      	bne.n	8000a98 <m2s_Process+0x38>
		// zpracuje data
		DataReceive_MTLB_Callback(m2s_ID, m2s_buf, m2s_nData_in_bytes / 4);
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <m2s_Process+0x54>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	b298      	uxth	r0, r3
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <m2s_Process+0x58>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	da00      	bge.n	8000a84 <m2s_Process+0x24>
 8000a82:	3303      	adds	r3, #3
 8000a84:	109b      	asrs	r3, r3, #2
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	490c      	ldr	r1, [pc, #48]	@ (8000abc <m2s_Process+0x5c>)
 8000a8c:	f000 f88c 	bl	8000ba8 <DataReceive_MTLB_Callback>
		m2s_Status = 0;
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <m2s_Process+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
		return;
 8000a96:	e009      	b.n	8000aac <m2s_Process+0x4c>
	}

	if (m2s_Status == -1) {
 8000a98:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <m2s_Process+0x50>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000aa0:	d104      	bne.n	8000aac <m2s_Process+0x4c>
		// inicializace
		m2s_Status = 0;
 8000aa2:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <m2s_Process+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
		return;
 8000aa8:	e000      	b.n	8000aac <m2s_Process+0x4c>
		return; // pokud neprisla data, ukonci se
 8000aaa:	bf00      	nop
	}

}
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000825c 	.word	0x2000825c
 8000ab4:	20008260 	.word	0x20008260
 8000ab8:	20008264 	.word	0x20008264
 8000abc:	20004258 	.word	0x20004258

08000ac0 <USB_My_Receive>:

void USB_My_Receive(uint8_t *Buf, uint32_t Len) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]

	// callback na prijem dat

	if (m2s_Status == 0) {
 8000aca:	4b22      	ldr	r3, [pc, #136]	@ (8000b54 <USB_My_Receive+0x94>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10c      	bne.n	8000aec <USB_My_Receive+0x2c>
		// iD
		m2s_ID = ((uint16_t*) Buf)[0];
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <USB_My_Receive+0x98>)
 8000ada:	601a      	str	r2, [r3, #0]
		if (m2s_ID == 0)
 8000adc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b58 <USB_My_Receive+0x98>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d030      	beq.n	8000b46 <USB_My_Receive+0x86>
			return;
		m2s_Status = 100;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <USB_My_Receive+0x94>)
 8000ae6:	2264      	movs	r2, #100	@ 0x64
 8000ae8:	601a      	str	r2, [r3, #0]
		return;
 8000aea:	e02f      	b.n	8000b4c <USB_My_Receive+0x8c>
	}
	if (m2s_Status == 100) {
 8000aec:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <USB_My_Receive+0x94>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b64      	cmp	r3, #100	@ 0x64
 8000af2:	d110      	bne.n	8000b16 <USB_My_Receive+0x56>
		// nData
		m2s_nData_in_bytes = ((uint16_t*) Buf)[0] * 4;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	4a18      	ldr	r2, [pc, #96]	@ (8000b5c <USB_My_Receive+0x9c>)
 8000afc:	6013      	str	r3, [r2, #0]
		if (m2s_nData_in_bytes == 0) {
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <USB_My_Receive+0x9c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d103      	bne.n	8000b0e <USB_My_Receive+0x4e>
			m2s_Status = 1;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <USB_My_Receive+0x94>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	601a      	str	r2, [r3, #0]
			return;
 8000b0c:	e01e      	b.n	8000b4c <USB_My_Receive+0x8c>
		}
		m2s_Status = 3; //wait for xData
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <USB_My_Receive+0x94>)
 8000b10:	2203      	movs	r2, #3
 8000b12:	601a      	str	r2, [r3, #0]
		return;
 8000b14:	e01a      	b.n	8000b4c <USB_My_Receive+0x8c>
	}
	if (m2s_Status == 3) {
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <USB_My_Receive+0x94>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d115      	bne.n	8000b4a <USB_My_Receive+0x8a>
		// xData
		if (Len < m2s_nData_in_bytes)
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <USB_My_Receive+0x9c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d202      	bcs.n	8000b30 <USB_My_Receive+0x70>
			m2s_nData_in_bytes = Len;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b5c <USB_My_Receive+0x9c>)
 8000b2e:	6013      	str	r3, [r2, #0]
		memcpy(m2s_buf, Buf, m2s_nData_in_bytes);
 8000b30:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <USB_My_Receive+0x9c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <USB_My_Receive+0xa0>)
 8000b3a:	f00b fa03 	bl	800bf44 <memcpy>
		m2s_Status = 1;
 8000b3e:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <USB_My_Receive+0x94>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	601a      	str	r2, [r3, #0]
		return;
 8000b44:	e002      	b.n	8000b4c <USB_My_Receive+0x8c>
			return;
 8000b46:	bf00      	nop
 8000b48:	e000      	b.n	8000b4c <USB_My_Receive+0x8c>
	}

	return;
 8000b4a:	bf00      	nop
}
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000825c 	.word	0x2000825c
 8000b58:	20008260 	.word	0x20008260
 8000b5c:	20008264 	.word	0x20008264
 8000b60:	20004258 	.word	0x20004258

08000b64 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b9c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d10e      	bne.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	480a      	ldr	r0, [pc, #40]	@ (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b78:	f002 feee 	bl	8003958 <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a08      	ldr	r2, [pc, #32]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b84:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		DataTransmit2MTLB(1010, &periodical, 1);
 8000b86:	2201      	movs	r2, #1
 8000b88:	4906      	ldr	r1, [pc, #24]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b8a:	f240 30f2 	movw	r0, #1010	@ 0x3f2
 8000b8e:	f7ff ff09 	bl	80009a4 <DataTransmit2MTLB>
	}
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000a3f0 	.word	0x2000a3f0
 8000ba0:	48000400 	.word	0x48000400
 8000ba4:	20008268 	.word	0x20008268

08000ba8 <DataReceive_MTLB_Callback>:
//    	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t*)testdata, 10);
//    }

}

void DataReceive_MTLB_Callback(uint16_t iD, uint32_t *xData, uint16_t nData_in_values) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	80fb      	strh	r3, [r7, #6]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	80bb      	strh	r3, [r7, #4]
	// funkce volana po prijmu dat

	switch (iD) {
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	2b14      	cmp	r3, #20
 8000bbc:	d106      	bne.n	8000bcc <DataReceive_MTLB_Callback+0x24>
	case 20:
		//data odesilam zpet do matlabu
		DataTransmit2MTLB(20, xData, nData_in_values);
 8000bbe:	88bb      	ldrh	r3, [r7, #4]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	6839      	ldr	r1, [r7, #0]
 8000bc4:	2014      	movs	r0, #20
 8000bc6:	f7ff feed 	bl	80009a4 <DataTransmit2MTLB>
		break;
 8000bca:	e000      	b.n	8000bce <DataReceive_MTLB_Callback+0x26>

	default:
		break;
 8000bcc:	bf00      	nop
	}
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <myDmaFunction>:

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <myDmaFunction+0x28>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be6:	4a07      	ldr	r2, [pc, #28]	@ (8000c04 <myDmaFunction+0x2c>)
 8000be8:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <myDmaFunction+0x28>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf0:	4a05      	ldr	r2, [pc, #20]	@ (8000c08 <myDmaFunction+0x30>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	2000a3a4 	.word	0x2000a3a4
 8000c04:	20008274 	.word	0x20008274
 8000c08:	20008278 	.word	0x20008278

08000c0c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 8000c14:	4b3f      	ldr	r3, [pc, #252]	@ (8000d14 <HAL_ADC_ConvCpltCallback+0x108>)
 8000c16:	f04f 0200 	mov.w	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
    //adcIn1 = 0.0f;

    for (int i = 0; i < 100; i++) {
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
 8000c20:	e016      	b.n	8000c50 <HAL_ADC_ConvCpltCallback+0x44>
        adcValue += dma_data_buffer[i + 100]; // Použití druhé poloviny DMA bufferu
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3364      	adds	r3, #100	@ 0x64
 8000c26:	4a3c      	ldr	r2, [pc, #240]	@ (8000d18 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c2c:	ee07 3a90 	vmov	s15, r3
 8000c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c34:	4b37      	ldr	r3, [pc, #220]	@ (8000d14 <HAL_ADC_ConvCpltCallback+0x108>)
 8000c36:	edd3 7a00 	vldr	s15, [r3]
 8000c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c3e:	4b35      	ldr	r3, [pc, #212]	@ (8000d14 <HAL_ADC_ConvCpltCallback+0x108>)
 8000c40:	edc3 7a00 	vstr	s15, [r3]
        //adcIn1 += dma_data_buffer[i + 1 + 100];
        i++;
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	3301      	adds	r3, #1
 8000c48:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 100; i++) {
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	61fb      	str	r3, [r7, #28]
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	2b63      	cmp	r3, #99	@ 0x63
 8000c54:	dde5      	ble.n	8000c22 <HAL_ADC_ConvCpltCallback+0x16>
    }
    adcValue /= 50.0f;
 8000c56:	4b2f      	ldr	r3, [pc, #188]	@ (8000d14 <HAL_ADC_ConvCpltCallback+0x108>)
 8000c58:	ed93 7a00 	vldr	s14, [r3]
 8000c5c:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000d1c <HAL_ADC_ConvCpltCallback+0x110>
 8000c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c64:	4b2b      	ldr	r3, [pc, #172]	@ (8000d14 <HAL_ADC_ConvCpltCallback+0x108>)
 8000c66:	edc3 7a00 	vstr	s15, [r3]
    //adcIn1 /= 50.0f;

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d14 <HAL_ADC_ConvCpltCallback+0x108>)
 8000c6c:	ed93 7a00 	vldr	s14, [r3]
 8000c70:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d20 <HAL_ADC_ConvCpltCallback+0x114>
 8000c74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c78:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000d24 <HAL_ADC_ConvCpltCallback+0x118>
 8000c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c80:	edc7 7a06 	vstr	s15, [r7, #24]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 8000c84:	4b28      	ldr	r3, [pc, #160]	@ (8000d28 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	ee07 3a90 	vmov	s15, r3
 8000c8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c90:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8000d20 <HAL_ADC_ConvCpltCallback+0x114>
 8000c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c98:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000d24 <HAL_ADC_ConvCpltCallback+0x118>
 8000c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca0:	edc7 7a05 	vstr	s15, [r7, #20]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 8000ca4:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <HAL_ADC_ConvCpltCallback+0x120>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	ee07 3a90 	vmov	s15, r3
 8000cac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cb0:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8000d20 <HAL_ADC_ConvCpltCallback+0x114>
 8000cb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cb8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000d24 <HAL_ADC_ConvCpltCallback+0x118>
 8000cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cc0:	edc7 7a04 	vstr	s15, [r7, #16]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 8000cc4:	ed97 7a06 	vldr	s14, [r7, #24]
 8000cc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cd0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000d30 <HAL_ADC_ConvCpltCallback+0x124>
 8000cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000cdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ce0:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <HAL_ADC_ConvCpltCallback+0x128>)
 8000ce2:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;
    numOfCalling++;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000cee:	6013      	str	r3, [r2, #0]
    // Odeslání teploty jako integer
    int temperatureInt = (int)temperature;
 8000cf0:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <HAL_ADC_ConvCpltCallback+0x128>)
 8000cf2:	edd3 7a00 	vldr	s15, [r3]
 8000cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cfa:	ee17 3a90 	vmov	r3, s15
 8000cfe:	60fb      	str	r3, [r7, #12]
    SendInt2MTLB(23, &temperatureInt);
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	2017      	movs	r0, #23
 8000d08:	f7ff fe98 	bl	8000a3c <SendInt2MTLB>

    //int adcIn1Int = (int)adcIn1;
}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2000a34c 	.word	0x2000a34c
 8000d18:	2000a1bc 	.word	0x2000a1bc
 8000d1c:	42480000 	.word	0x42480000
 8000d20:	45800000 	.word	0x45800000
 8000d24:	40533333 	.word	0x40533333
 8000d28:	1fff75a8 	.word	0x1fff75a8
 8000d2c:	1fff75ca 	.word	0x1fff75ca
 8000d30:	42a00000 	.word	0x42a00000
 8000d34:	2000a350 	.word	0x2000a350
 8000d38:	2000a354 	.word	0x2000a354

08000d3c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
//	}
//	adcValue = adcValue / 100;
//	adcValueInt = (int) adcValue;

	//SendInt2MTLB(23, &adcValueInt);
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f000 fc16 	bl	8001586 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 f87d 	bl	8000e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5e:	f7ff fd37 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d62:	f7ff fcd9 	bl	8000718 <MX_DMA_Init>
  MX_TIM6_Init();
 8000d66:	f000 fa17 	bl	8001198 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000d6a:	f00a fa5b 	bl	800b224 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8000d6e:	f000 f9c5 	bl	80010fc <MX_TIM5_Init>
  MX_ADC1_Init();
 8000d72:	f7ff fbbb 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8000d76:	f000 f973 	bl	8001060 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000d7a:	f000 fae9 	bl	8001350 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8000d7e:	f000 fa99 	bl	80012b4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */



	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2180      	movs	r1, #128	@ 0x80
 8000d86:	4827      	ldr	r0, [pc, #156]	@ (8000e24 <main+0xd4>)
 8000d88:	f002 fdce 	bl	8003928 <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 8000d8c:	4826      	ldr	r0, [pc, #152]	@ (8000e28 <main+0xd8>)
 8000d8e:	f005 fd51 	bl	8006834 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 8000d92:	4826      	ldr	r0, [pc, #152]	@ (8000e2c <main+0xdc>)
 8000d94:	f005 fce6 	bl	8006764 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	e00d      	b.n	8000dba <main+0x6a>
		dma[i] = i;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da8:	4a21      	ldr	r2, [pc, #132]	@ (8000e30 <main+0xe0>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3301      	adds	r3, #1
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000dc0:	dbed      	blt.n	8000d9e <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e34 <main+0xe4>)
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	481c      	ldr	r0, [pc, #112]	@ (8000e38 <main+0xe8>)
 8000dc8:	f002 fb34 	bl	8003434 <HAL_DMA_RegisterCallback>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <main+0xdc>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd6:	4a19      	ldr	r2, [pc, #100]	@ (8000e3c <main+0xec>)
 8000dd8:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 8000dda:	4915      	ldr	r1, [pc, #84]	@ (8000e30 <main+0xe0>)
 8000ddc:	4a18      	ldr	r2, [pc, #96]	@ (8000e40 <main+0xf0>)
 8000dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de2:	4815      	ldr	r0, [pc, #84]	@ (8000e38 <main+0xe8>)
 8000de4:	f002 f9fc 	bl	80031e0 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 8000de8:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <main+0xdc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dee:	4a15      	ldr	r2, [pc, #84]	@ (8000e44 <main+0xf4>)
 8000df0:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <main+0xdc>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df8:	4a13      	ldr	r2, [pc, #76]	@ (8000e48 <main+0xf8>)
 8000dfa:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start_IT(&htim3);
 8000dfc:	4813      	ldr	r0, [pc, #76]	@ (8000e4c <main+0xfc>)
 8000dfe:	f005 fd19 	bl	8006834 <HAL_TIM_Base_Start_IT>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000e02:	217f      	movs	r1, #127	@ 0x7f
 8000e04:	4812      	ldr	r0, [pc, #72]	@ (8000e50 <main+0x100>)
 8000e06:	f001 ff9f 	bl	8002d48 <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 8000e0a:	2032      	movs	r0, #50	@ 0x32
 8000e0c:	f000 fc30 	bl	8001670 <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 200);
 8000e10:	22c8      	movs	r2, #200	@ 0xc8
 8000e12:	4910      	ldr	r1, [pc, #64]	@ (8000e54 <main+0x104>)
 8000e14:	480e      	ldr	r0, [pc, #56]	@ (8000e50 <main+0x100>)
 8000e16:	f000 ffa9 	bl	8001d6c <HAL_ADC_Start_DMA>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	70bb      	strb	r3, [r7, #2]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//load_CPU();
		m2s_Process();
 8000e1e:	f7ff fe1f 	bl	8000a60 <m2s_Process>
 8000e22:	e7fc      	b.n	8000e1e <main+0xce>
 8000e24:	48000800 	.word	0x48000800
 8000e28:	2000a3f0 	.word	0x2000a3f0
 8000e2c:	2000a3a4 	.word	0x2000a3a4
 8000e30:	2000827c 	.word	0x2000827c
 8000e34:	08000bd9 	.word	0x08000bd9
 8000e38:	200001f0 	.word	0x200001f0
 8000e3c:	2000826c 	.word	0x2000826c
 8000e40:	2000921c 	.word	0x2000921c
 8000e44:	20008278 	.word	0x20008278
 8000e48:	20008270 	.word	0x20008270
 8000e4c:	2000a358 	.word	0x2000a358
 8000e50:	20000128 	.word	0x20000128
 8000e54:	2000a1bc 	.word	0x2000a1bc

08000e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b096      	sub	sp, #88	@ 0x58
 8000e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	2244      	movs	r2, #68	@ 0x44
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f00b f840 	bl	800beec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f003 ff66 	bl	8004d4c <HAL_PWREx_ControlVoltageScaling>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000e86:	f000 f83a 	bl	8000efe <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000e8a:	2322      	movs	r3, #34	@ 0x22
 8000e8c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e94:	2301      	movs	r3, #1
 8000e96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e98:	2340      	movs	r3, #64	@ 0x40
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000ea8:	231e      	movs	r3, #30
 8000eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f004 f809 	bl	8004ed4 <HAL_RCC_OscConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000ec8:	f000 f819 	bl	8000efe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ecc:	230f      	movs	r3, #15
 8000ece:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000edc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f004 fc0e 	bl	8005708 <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ef2:	f000 f804 	bl	8000efe <Error_Handler>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3758      	adds	r7, #88	@ 0x58
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f02:	b672      	cpsid	i
}
 8000f04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f06:	bf00      	nop
 8000f08:	e7fd      	b.n	8000f06 <Error_Handler+0x8>
	...

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f16:	4a0e      	ldr	r2, [pc, #56]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2e:	4a08      	ldr	r2, [pc, #32]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <NMI_Handler+0x4>

08000f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000faa:	f000 fb41 	bl	8001630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <DMA1_Channel1_IRQHandler+0x10>)
 8000fba:	f002 f98c 	bl	80032d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000190 	.word	0x20000190

08000fc8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <DMA1_Channel2_IRQHandler+0x10>)
 8000fce:	f002 f982 	bl	80032d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001f0 	.word	0x200001f0

08000fdc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fe0:	4802      	ldr	r0, [pc, #8]	@ (8000fec <ADC1_IRQHandler+0x10>)
 8000fe2:	f000 ff47 	bl	8001e74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000128 	.word	0x20000128

08000ff0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <TIM3_IRQHandler+0x10>)
 8000ff6:	f005 fc8d 	bl	8006914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000a358 	.word	0x2000a358

08001004 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001008:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800100c:	f002 fcbe 	bl	800398c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001018:	4802      	ldr	r0, [pc, #8]	@ (8001024 <TIM6_DAC_IRQHandler+0x10>)
 800101a:	f005 fc7b 	bl	8006914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000a3f0 	.word	0x2000a3f0

08001028 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <OTG_FS_IRQHandler+0x10>)
 800102e:	f002 fe18 	bl	8003c62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000ba48 	.word	0x2000ba48

0800103c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800107e:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <MX_TIM3_Init+0x94>)
 8001080:	4a1d      	ldr	r2, [pc, #116]	@ (80010f8 <MX_TIM3_Init+0x98>)
 8001082:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8001084:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_TIM3_Init+0x94>)
 8001086:	2217      	movs	r2, #23
 8001088:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_TIM3_Init+0x94>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_TIM3_Init+0x94>)
 8001092:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001096:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_TIM3_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_TIM3_Init+0x94>)
 80010a0:	2280      	movs	r2, #128	@ 0x80
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010a4:	4813      	ldr	r0, [pc, #76]	@ (80010f4 <MX_TIM3_Init+0x94>)
 80010a6:	f005 fb05 	bl	80066b4 <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80010b0:	f7ff ff25 	bl	8000efe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <MX_TIM3_Init+0x94>)
 80010c2:	f005 fd29 	bl	8006b18 <HAL_TIM_ConfigClockSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010cc:	f7ff ff17 	bl	8000efe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010d0:	2320      	movs	r3, #32
 80010d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_TIM3_Init+0x94>)
 80010de:	f005 ff41 	bl	8006f64 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80010e8:	f7ff ff09 	bl	8000efe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000a358 	.word	0x2000a358
 80010f8:	40000400 	.word	0x40000400

080010fc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800111a:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <MX_TIM5_Init+0x94>)
 800111c:	4a1d      	ldr	r2, [pc, #116]	@ (8001194 <MX_TIM5_Init+0x98>)
 800111e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <MX_TIM5_Init+0x94>)
 8001122:	2200      	movs	r2, #0
 8001124:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <MX_TIM5_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <MX_TIM5_Init+0x94>)
 800112e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001132:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <MX_TIM5_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <MX_TIM5_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001140:	4813      	ldr	r0, [pc, #76]	@ (8001190 <MX_TIM5_Init+0x94>)
 8001142:	f005 fab7 	bl	80066b4 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800114c:	f7ff fed7 	bl	8000efe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001154:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <MX_TIM5_Init+0x94>)
 800115e:	f005 fcdb 	bl	8006b18 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001168:	f7ff fec9 	bl	8000efe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_TIM5_Init+0x94>)
 800117a:	f005 fef3 	bl	8006f64 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001184:	f7ff febb 	bl	8000efe <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000a3a4 	.word	0x2000a3a4
 8001194:	40000c00 	.word	0x40000c00

08001198 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011a8:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_TIM6_Init+0x68>)
 80011aa:	4a16      	ldr	r2, [pc, #88]	@ (8001204 <MX_TIM6_Init+0x6c>)
 80011ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 80011ae:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <MX_TIM6_Init+0x68>)
 80011b0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80011b4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <MX_TIM6_Init+0x68>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 80011bc:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <MX_TIM6_Init+0x68>)
 80011be:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80011c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <MX_TIM6_Init+0x68>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011ca:	480d      	ldr	r0, [pc, #52]	@ (8001200 <MX_TIM6_Init+0x68>)
 80011cc:	f005 fa72 	bl	80066b4 <HAL_TIM_Base_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80011d6:	f7ff fe92 	bl	8000efe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	@ (8001200 <MX_TIM6_Init+0x68>)
 80011e8:	f005 febc 	bl	8006f64 <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80011f2:	f7ff fe84 	bl	8000efe <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000a3f0 	.word	0x2000a3f0
 8001204:	40001000 	.word	0x40001000

08001208 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a23      	ldr	r2, [pc, #140]	@ (80012a4 <HAL_TIM_Base_MspInit+0x9c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d114      	bne.n	8001244 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800121a:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <HAL_TIM_Base_MspInit+0xa0>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121e:	4a22      	ldr	r2, [pc, #136]	@ (80012a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6593      	str	r3, [r2, #88]	@ 0x58
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	201d      	movs	r0, #29
 8001238:	f001 fef3 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800123c:	201d      	movs	r0, #29
 800123e:	f001 ff0c 	bl	800305a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001242:	e02a      	b.n	800129a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a18      	ldr	r2, [pc, #96]	@ (80012ac <HAL_TIM_Base_MspInit+0xa4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10c      	bne.n	8001268 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001252:	4a15      	ldr	r2, [pc, #84]	@ (80012a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6593      	str	r3, [r2, #88]	@ 0x58
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <HAL_TIM_Base_MspInit+0xa0>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
}
 8001266:	e018      	b.n	800129a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a10      	ldr	r2, [pc, #64]	@ (80012b0 <HAL_TIM_Base_MspInit+0xa8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d113      	bne.n	800129a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001276:	4a0c      	ldr	r2, [pc, #48]	@ (80012a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001278:	f043 0310 	orr.w	r3, r3, #16
 800127c:	6593      	str	r3, [r2, #88]	@ 0x58
 800127e:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2036      	movs	r0, #54	@ 0x36
 8001290:	f001 fec7 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001294:	2036      	movs	r0, #54	@ 0x36
 8001296:	f001 fee0 	bl	800305a <HAL_NVIC_EnableIRQ>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40000400 	.word	0x40000400
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40000c00 	.word	0x40000c00
 80012b0:	40001000 	.word	0x40001000

080012b4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012b8:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 80012ba:	4a23      	ldr	r2, [pc, #140]	@ (8001348 <MX_LPUART1_UART_Init+0x94>)
 80012bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80012be:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 80012c0:	4a22      	ldr	r2, [pc, #136]	@ (800134c <MX_LPUART1_UART_Init+0x98>)
 80012c2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 80012c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012ca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f0:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012fc:	4811      	ldr	r0, [pc, #68]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 80012fe:	f005 fed7 	bl	80070b0 <HAL_UART_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001308:	f7ff fdf9 	bl	8000efe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130c:	2100      	movs	r1, #0
 800130e:	480d      	ldr	r0, [pc, #52]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 8001310:	f006 fc6c 	bl	8007bec <HAL_UARTEx_SetTxFifoThreshold>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800131a:	f7ff fdf0 	bl	8000efe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800131e:	2100      	movs	r1, #0
 8001320:	4808      	ldr	r0, [pc, #32]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 8001322:	f006 fca1 	bl	8007c68 <HAL_UARTEx_SetRxFifoThreshold>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800132c:	f7ff fde7 	bl	8000efe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	@ (8001344 <MX_LPUART1_UART_Init+0x90>)
 8001332:	f006 fc22 	bl	8007b7a <HAL_UARTEx_DisableFifoMode>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800133c:	f7ff fddf 	bl	8000efe <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000a43c 	.word	0x2000a43c
 8001348:	40008000 	.word	0x40008000
 800134c:	00033324 	.word	0x00033324

08001350 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001354:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 8001356:	4a23      	ldr	r2, [pc, #140]	@ (80013e4 <MX_USART3_UART_Init+0x94>)
 8001358:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800135a:	4b21      	ldr	r3, [pc, #132]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 800135c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001360:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800136e:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001392:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001398:	4811      	ldr	r0, [pc, #68]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 800139a:	f005 fe89 	bl	80070b0 <HAL_UART_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013a4:	f7ff fdab 	bl	8000efe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a8:	2100      	movs	r1, #0
 80013aa:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 80013ac:	f006 fc1e 	bl	8007bec <HAL_UARTEx_SetTxFifoThreshold>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013b6:	f7ff fda2 	bl	8000efe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ba:	2100      	movs	r1, #0
 80013bc:	4808      	ldr	r0, [pc, #32]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 80013be:	f006 fc53 	bl	8007c68 <HAL_UARTEx_SetRxFifoThreshold>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013c8:	f7ff fd99 	bl	8000efe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <MX_USART3_UART_Init+0x90>)
 80013ce:	f006 fbd4 	bl	8007b7a <HAL_UARTEx_DisableFifoMode>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013d8:	f7ff fd91 	bl	8000efe <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000a4d0 	.word	0x2000a4d0
 80013e4:	40004800 	.word	0x40004800

080013e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0b0      	sub	sp, #192	@ 0xc0
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	2294      	movs	r2, #148	@ 0x94
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f00a fd6f 	bl	800beec <memset>
  if(uartHandle->Instance==LPUART1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a43      	ldr	r2, [pc, #268]	@ (8001520 <HAL_UART_MspInit+0x138>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d13e      	bne.n	8001496 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001418:	2320      	movs	r3, #32
 800141a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800141c:	2300      	movs	r3, #0
 800141e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001420:	f107 0318 	add.w	r3, r7, #24
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fc2d 	bl	8005c84 <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001430:	f7ff fd65 	bl	8000efe <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001434:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <HAL_UART_MspInit+0x13c>)
 8001436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001438:	4a3a      	ldr	r2, [pc, #232]	@ (8001524 <HAL_UART_MspInit+0x13c>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001440:	4b38      	ldr	r3, [pc, #224]	@ (8001524 <HAL_UART_MspInit+0x13c>)
 8001442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800144c:	4b35      	ldr	r3, [pc, #212]	@ (8001524 <HAL_UART_MspInit+0x13c>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001450:	4a34      	ldr	r2, [pc, #208]	@ (8001524 <HAL_UART_MspInit+0x13c>)
 8001452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001456:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001458:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <HAL_UART_MspInit+0x13c>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001464:	f003 fd26 	bl	8004eb4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001468:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800146c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001482:	2308      	movs	r3, #8
 8001484:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001488:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800148c:	4619      	mov	r1, r3
 800148e:	4826      	ldr	r0, [pc, #152]	@ (8001528 <HAL_UART_MspInit+0x140>)
 8001490:	f002 f8b8 	bl	8003604 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001494:	e040      	b.n	8001518 <HAL_UART_MspInit+0x130>
  else if(uartHandle->Instance==USART3)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a24      	ldr	r2, [pc, #144]	@ (800152c <HAL_UART_MspInit+0x144>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d13b      	bne.n	8001518 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014a0:	2304      	movs	r3, #4
 80014a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 fbe9 	bl	8005c84 <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80014b8:	f7ff fd21 	bl	8000efe <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014bc:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <HAL_UART_MspInit+0x13c>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c0:	4a18      	ldr	r2, [pc, #96]	@ (8001524 <HAL_UART_MspInit+0x13c>)
 80014c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014c8:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <HAL_UART_MspInit+0x13c>)
 80014ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d4:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <HAL_UART_MspInit+0x13c>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d8:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <HAL_UART_MspInit+0x13c>)
 80014da:	f043 0308 	orr.w	r3, r3, #8
 80014de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e0:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <HAL_UART_MspInit+0x13c>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001506:	2307      	movs	r3, #7
 8001508:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001510:	4619      	mov	r1, r3
 8001512:	4807      	ldr	r0, [pc, #28]	@ (8001530 <HAL_UART_MspInit+0x148>)
 8001514:	f002 f876 	bl	8003604 <HAL_GPIO_Init>
}
 8001518:	bf00      	nop
 800151a:	37c0      	adds	r7, #192	@ 0xc0
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40008000 	.word	0x40008000
 8001524:	40021000 	.word	0x40021000
 8001528:	48001800 	.word	0x48001800
 800152c:	40004800 	.word	0x40004800
 8001530:	48000c00 	.word	0x48000c00

08001534 <Reset_Handler>:
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800156c <LoopForever+0x2>
 8001538:	f7ff fd80 	bl	800103c <SystemInit>
 800153c:	480c      	ldr	r0, [pc, #48]	@ (8001570 <LoopForever+0x6>)
 800153e:	490d      	ldr	r1, [pc, #52]	@ (8001574 <LoopForever+0xa>)
 8001540:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <LoopForever+0xe>)
 8001542:	2300      	movs	r3, #0
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:
 8001546:	58d4      	ldr	r4, [r2, r3]
 8001548:	50c4      	str	r4, [r0, r3]
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:
 800154c:	18c4      	adds	r4, r0, r3
 800154e:	428c      	cmp	r4, r1
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <LoopForever+0x12>)
 8001554:	4c0a      	ldr	r4, [pc, #40]	@ (8001580 <LoopForever+0x16>)
 8001556:	2300      	movs	r3, #0
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:
 800155e:	42a2      	cmp	r2, r4
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>
 8001562:	f00a fccb 	bl	800befc <__libc_init_array>
 8001566:	f7ff fbf3 	bl	8000d50 <main>

0800156a <LoopForever>:
 800156a:	e7fe      	b.n	800156a <LoopForever>
 800156c:	200a0000 	.word	0x200a0000
 8001570:	20000000 	.word	0x20000000
 8001574:	2000010c 	.word	0x2000010c
 8001578:	0800c040 	.word	0x0800c040
 800157c:	2000010c 	.word	0x2000010c
 8001580:	2000c174 	.word	0x2000c174

08001584 <CAN1_RX0_IRQHandler>:
 8001584:	e7fe      	b.n	8001584 <CAN1_RX0_IRQHandler>

08001586 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f001 fd3b 	bl	800300c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001596:	2000      	movs	r0, #0
 8001598:	f000 f80e 	bl	80015b8 <HAL_InitTick>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	71fb      	strb	r3, [r7, #7]
 80015a6:	e001      	b.n	80015ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015a8:	f7ff fcb0 	bl	8000f0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015c4:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <HAL_InitTick+0x6c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d023      	beq.n	8001614 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <HAL_InitTick+0x70>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <HAL_InitTick+0x6c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fd47 	bl	8003076 <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10f      	bne.n	800160e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d809      	bhi.n	8001608 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015fc:	f001 fd11 	bl	8003022 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001600:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <HAL_InitTick+0x74>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e007      	b.n	8001618 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	e004      	b.n	8001618 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e001      	b.n	8001618 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000008 	.word	0x20000008
 8001628:	20000000 	.word	0x20000000
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x20>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_IncTick+0x24>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <HAL_IncTick+0x24>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008
 8001654:	2000a564 	.word	0x2000a564

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	2000a564 	.word	0x2000a564

08001670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff ffee 	bl	8001658 <HAL_GetTick>
 800167c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001688:	d005      	beq.n	8001696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_Delay+0x44>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001696:	bf00      	nop
 8001698:	f7ff ffde 	bl	8001658 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d8f7      	bhi.n	8001698 <HAL_Delay+0x28>
  {
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008

080016b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	609a      	str	r2, [r3, #8]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3360      	adds	r3, #96	@ 0x60
 8001732:	461a      	mov	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <LL_ADC_SetOffset+0x44>)
 8001742:	4013      	ands	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	4313      	orrs	r3, r2
 8001750:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001758:	bf00      	nop
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	03fff000 	.word	0x03fff000

08001768 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3360      	adds	r3, #96	@ 0x60
 8001776:	461a      	mov	r2, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3360      	adds	r3, #96	@ 0x60
 80017a4:	461a      	mov	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017be:	bf00      	nop
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	615a      	str	r2, [r3, #20]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001816:	b480      	push	{r7}
 8001818:	b087      	sub	sp, #28
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	3330      	adds	r3, #48	@ 0x30
 8001826:	461a      	mov	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	4413      	add	r3, r2
 8001834:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	211f      	movs	r1, #31
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	401a      	ands	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	0e9b      	lsrs	r3, r3, #26
 800184e:	f003 011f 	and.w	r1, r3, #31
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	431a      	orrs	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001862:	bf00      	nop
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3314      	adds	r3, #20
 80018a4:	461a      	mov	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	0e5b      	lsrs	r3, r3, #25
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	4413      	add	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	0d1b      	lsrs	r3, r3, #20
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	2107      	movs	r1, #7
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	401a      	ands	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	0d1b      	lsrs	r3, r3, #20
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	431a      	orrs	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018de:	bf00      	nop
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001904:	43db      	mvns	r3, r3
 8001906:	401a      	ands	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0318 	and.w	r3, r3, #24
 800190e:	4908      	ldr	r1, [pc, #32]	@ (8001930 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001910:	40d9      	lsrs	r1, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	400b      	ands	r3, r1
 8001916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800191a:	431a      	orrs	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	0007ffff 	.word	0x0007ffff

08001934 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001944:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6093      	str	r3, [r2, #8]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800196c:	d101      	bne.n	8001972 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001990:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001994:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80019bc:	d101      	bne.n	80019c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a0c:	f043 0202 	orr.w	r2, r3, #2
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <LL_ADC_IsEnabled+0x18>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <LL_ADC_IsEnabled+0x1a>
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d101      	bne.n	8001a5e <LL_ADC_IsDisableOngoing+0x18>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <LL_ADC_IsDisableOngoing+0x1a>
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a80:	f043 0204 	orr.w	r2, r3, #4
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d101      	bne.n	8001aac <LL_ADC_REG_IsConversionOngoing+0x18>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d101      	bne.n	8001ad2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e129      	b.n	8001d4e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d109      	bne.n	8001b1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7fe fd65 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff19 	bl	8001958 <LL_ADC_IsDeepPowerDownEnabled>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff feff 	bl	8001934 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff34 	bl	80019a8 <LL_ADC_IsInternalRegulatorEnabled>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d115      	bne.n	8001b72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff18 	bl	8001980 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b50:	4b81      	ldr	r3, [pc, #516]	@ (8001d58 <HAL_ADC_Init+0x278>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	099b      	lsrs	r3, r3, #6
 8001b56:	4a81      	ldr	r2, [pc, #516]	@ (8001d5c <HAL_ADC_Init+0x27c>)
 8001b58:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5c:	099b      	lsrs	r3, r3, #6
 8001b5e:	3301      	adds	r3, #1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b64:	e002      	b.n	8001b6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f9      	bne.n	8001b66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff16 	bl	80019a8 <LL_ADC_IsInternalRegulatorEnabled>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10d      	bne.n	8001b9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b86:	f043 0210 	orr.w	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b92:	f043 0201 	orr.w	r2, r3, #1
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff76 	bl	8001a94 <LL_ADC_REG_IsConversionOngoing>
 8001ba8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 80c2 	bne.w	8001d3c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 80be 	bne.w	8001d3c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001bc8:	f043 0202 	orr.w	r2, r3, #2
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff23 	bl	8001a20 <LL_ADC_IsEnabled>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10b      	bne.n	8001bf8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001be0:	485f      	ldr	r0, [pc, #380]	@ (8001d60 <HAL_ADC_Init+0x280>)
 8001be2:	f7ff ff1d 	bl	8001a20 <LL_ADC_IsEnabled>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	485c      	ldr	r0, [pc, #368]	@ (8001d64 <HAL_ADC_Init+0x284>)
 8001bf4:	f7ff fd60 	bl	80016b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7e5b      	ldrb	r3, [r3, #25]
 8001bfc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c02:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c08:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c0e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c16:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d106      	bne.n	8001c34 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	045b      	lsls	r3, r3, #17
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d009      	beq.n	8001c50 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c40:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c48:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	4b44      	ldr	r3, [pc, #272]	@ (8001d68 <HAL_ADC_Init+0x288>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	69b9      	ldr	r1, [r7, #24]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff26 	bl	8001aba <LL_ADC_INJ_IsConversionOngoing>
 8001c6e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d140      	bne.n	8001cf8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d13d      	bne.n	8001cf8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7e1b      	ldrb	r3, [r3, #24]
 8001c84:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c86:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c8e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c9e:	f023 0306 	bic.w	r3, r3, #6
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	69b9      	ldr	r1, [r7, #24]
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d118      	bne.n	8001ce8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001cc0:	f023 0304 	bic.w	r3, r3, #4
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ccc:	4311      	orrs	r1, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	e007      	b.n	8001cf8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d10c      	bne.n	8001d1a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f023 010f 	bic.w	r1, r3, #15
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	1e5a      	subs	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d18:	e007      	b.n	8001d2a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 020f 	bic.w	r2, r2, #15
 8001d28:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2e:	f023 0303 	bic.w	r3, r3, #3
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d3a:	e007      	b.n	8001d4c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d40:	f043 0210 	orr.w	r2, r3, #16
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	053e2d63 	.word	0x053e2d63
 8001d60:	50040000 	.word	0x50040000
 8001d64:	50040300 	.word	0x50040300
 8001d68:	fff0c007 	.word	0xfff0c007

08001d6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fe89 	bl	8001a94 <LL_ADC_REG_IsConversionOngoing>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d167      	bne.n	8001e58 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_Start_DMA+0x2a>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e063      	b.n	8001e5e <HAL_ADC_Start_DMA+0xf2>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 fe2c 	bl	80029fc <ADC_Enable>
 8001da4:	4603      	mov	r3, r0
 8001da6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d14f      	bne.n	8001e4e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd2:	f023 0206 	bic.w	r2, r3, #6
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001dda:	e002      	b.n	8001de2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001de6:	4a20      	ldr	r2, [pc, #128]	@ (8001e68 <HAL_ADC_Start_DMA+0xfc>)
 8001de8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dee:	4a1f      	ldr	r2, [pc, #124]	@ (8001e6c <HAL_ADC_Start_DMA+0x100>)
 8001df0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001df6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e70 <HAL_ADC_Start_DMA+0x104>)
 8001df8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	221c      	movs	r2, #28
 8001e00:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0210 	orr.w	r2, r2, #16
 8001e18:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3340      	adds	r3, #64	@ 0x40
 8001e34:	4619      	mov	r1, r3
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f001 f9d1 	bl	80031e0 <HAL_DMA_Start_IT>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fe10 	bl	8001a6c <LL_ADC_REG_StartConversion>
 8001e4c:	e006      	b.n	8001e5c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001e56:	e001      	b.n	8001e5c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	08002bc7 	.word	0x08002bc7
 8001e6c:	08002c9f 	.word	0x08002c9f
 8001e70:	08002cbb 	.word	0x08002cbb

08001e74 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d017      	beq.n	8001eca <HAL_ADC_IRQHandler+0x56>
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d012      	beq.n	8001eca <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 ffcb 	bl	8002e58 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d004      	beq.n	8001ede <HAL_ADC_IRQHandler+0x6a>
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d05e      	beq.n	8001fa6 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d059      	beq.n	8001fa6 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d105      	bne.n	8001f0a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f02:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fc6e 	bl	80017f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d03e      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d135      	bne.n	8001f98 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d12e      	bne.n	8001f98 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fda8 	bl	8001a94 <LL_ADC_REG_IsConversionOngoing>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d11a      	bne.n	8001f80 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 020c 	bic.w	r2, r2, #12
 8001f58:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d112      	bne.n	8001f98 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f7e:	e00b      	b.n	8001f98 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f84:	f043 0210 	orr.w	r2, r3, #16
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7fe fe37 	bl	8000c0c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d004      	beq.n	8001fba <HAL_ADC_IRQHandler+0x146>
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d072      	beq.n	80020aa <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d06d      	beq.n	80020aa <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fde:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fc3f 	bl	800186e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ff0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fbfa 	bl	80017f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ffc:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d047      	beq.n	800209c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <HAL_ADC_IRQHandler+0x1b2>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d03f      	beq.n	800209c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002022:	2b00      	cmp	r3, #0
 8002024:	d13a      	bne.n	800209c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002030:	2b40      	cmp	r3, #64	@ 0x40
 8002032:	d133      	bne.n	800209c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d12e      	bne.n	800209c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fd39 	bl	8001aba <LL_ADC_INJ_IsConversionOngoing>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d11a      	bne.n	8002084 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800205c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d112      	bne.n	800209c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207a:	f043 0201 	orr.w	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	659a      	str	r2, [r3, #88]	@ 0x58
 8002082:	e00b      	b.n	800209c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002088:	f043 0210 	orr.w	r2, r3, #16
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 feb3 	bl	8002e08 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2260      	movs	r2, #96	@ 0x60
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d011      	beq.n	80020d8 <HAL_ADC_IRQHandler+0x264>
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00c      	beq.n	80020d8 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f886 	bl	80021dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2280      	movs	r2, #128	@ 0x80
 80020d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d012      	beq.n	8002108 <HAL_ADC_IRQHandler+0x294>
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00d      	beq.n	8002108 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 fe99 	bl	8002e30 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002106:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800210e:	2b00      	cmp	r3, #0
 8002110:	d012      	beq.n	8002138 <HAL_ADC_IRQHandler+0x2c4>
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00d      	beq.n	8002138 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002120:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fe8b 	bl	8002e44 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002136:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d02a      	beq.n	8002198 <HAL_ADC_IRQHandler+0x324>
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	d025      	beq.n	8002198 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002154:	2301      	movs	r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	e008      	b.n	800216c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002168:	2301      	movs	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d10e      	bne.n	8002190 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002182:	f043 0202 	orr.w	r2, r3, #2
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f830 	bl	80021f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2210      	movs	r2, #16
 8002196:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d018      	beq.n	80021d4 <HAL_ADC_IRQHandler+0x360>
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021bc:	f043 0208 	orr.w	r2, r3, #8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021cc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fe24 	bl	8002e1c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021d4:	bf00      	nop
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0b6      	sub	sp, #216	@ 0xd8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x22>
 8002222:	2302      	movs	r3, #2
 8002224:	e3d5      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x7ce>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fc2e 	bl	8001a94 <LL_ADC_REG_IsConversionOngoing>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 83ba 	bne.w	80029b4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b05      	cmp	r3, #5
 800224e:	d824      	bhi.n	800229a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	3b02      	subs	r3, #2
 8002256:	2b03      	cmp	r3, #3
 8002258:	d81b      	bhi.n	8002292 <HAL_ADC_ConfigChannel+0x8e>
 800225a:	a201      	add	r2, pc, #4	@ (adr r2, 8002260 <HAL_ADC_ConfigChannel+0x5c>)
 800225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002260:	08002271 	.word	0x08002271
 8002264:	08002279 	.word	0x08002279
 8002268:	08002281 	.word	0x08002281
 800226c:	08002289 	.word	0x08002289
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002270:	230c      	movs	r3, #12
 8002272:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002276:	e010      	b.n	800229a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002278:	2312      	movs	r3, #18
 800227a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800227e:	e00c      	b.n	800229a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002280:	2318      	movs	r3, #24
 8002282:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002286:	e008      	b.n	800229a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002288:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800228c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002290:	e003      	b.n	800229a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002292:	2306      	movs	r3, #6
 8002294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002298:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80022a8:	f7ff fab5 	bl	8001816 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fbef 	bl	8001a94 <LL_ADC_REG_IsConversionOngoing>
 80022b6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fbfb 	bl	8001aba <LL_ADC_INJ_IsConversionOngoing>
 80022c4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f040 81bf 	bne.w	8002650 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 81ba 	bne.w	8002650 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022e4:	d10f      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	4619      	mov	r1, r3
 80022f2:	f7ff facf 	bl	8001894 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fa63 	bl	80017ca <LL_ADC_SetSamplingTimeCommonConfig>
 8002304:	e00e      	b.n	8002324 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6819      	ldr	r1, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	461a      	mov	r2, r3
 8002314:	f7ff fabe 	bl	8001894 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fa53 	bl	80017ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	08db      	lsrs	r3, r3, #3
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b04      	cmp	r3, #4
 8002344:	d00a      	beq.n	800235c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6919      	ldr	r1, [r3, #16]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002356:	f7ff f9e3 	bl	8001720 <LL_ADC_SetOffset>
 800235a:	e179      	b.n	8002650 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fa00 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10a      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x184>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff f9f5 	bl	8001768 <LL_ADC_GetOffsetChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	0e9b      	lsrs	r3, r3, #26
 8002382:	f003 021f 	and.w	r2, r3, #31
 8002386:	e01e      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x1c2>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f9ea 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80023b6:	2320      	movs	r3, #32
 80023b8:	e004      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80023ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <HAL_ADC_ConfigChannel+0x1da>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	0e9b      	lsrs	r3, r3, #26
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	e018      	b.n	8002410 <HAL_ADC_ConfigChannel+0x20c>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80023f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80023fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002402:	2320      	movs	r3, #32
 8002404:	e004      	b.n	8002410 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002406:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002410:	429a      	cmp	r2, r3
 8002412:	d106      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2200      	movs	r2, #0
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff f9b9 	bl	8001794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2101      	movs	r1, #1
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff f99d 	bl	8001768 <LL_ADC_GetOffsetChannel>
 800242e:	4603      	mov	r3, r0
 8002430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10a      	bne.n	800244e <HAL_ADC_ConfigChannel+0x24a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2101      	movs	r1, #1
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f992 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	0e9b      	lsrs	r3, r3, #26
 8002448:	f003 021f 	and.w	r2, r3, #31
 800244c:	e01e      	b.n	800248c <HAL_ADC_ConfigChannel+0x288>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2101      	movs	r1, #1
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff f987 	bl	8001768 <LL_ADC_GetOffsetChannel>
 800245a:	4603      	mov	r3, r0
 800245c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800246c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002470:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002474:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800247c:	2320      	movs	r3, #32
 800247e:	e004      	b.n	800248a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002480:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x2a0>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0e9b      	lsrs	r3, r3, #26
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	e018      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x2d2>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80024b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80024c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80024c8:	2320      	movs	r3, #32
 80024ca:	e004      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80024cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d106      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2200      	movs	r2, #0
 80024e0:	2101      	movs	r1, #1
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff f956 	bl	8001794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2102      	movs	r1, #2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff f93a 	bl	8001768 <LL_ADC_GetOffsetChannel>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10a      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x310>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2102      	movs	r1, #2
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff f92f 	bl	8001768 <LL_ADC_GetOffsetChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	f003 021f 	and.w	r2, r3, #31
 8002512:	e01e      	b.n	8002552 <HAL_ADC_ConfigChannel+0x34e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2102      	movs	r1, #2
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f924 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8002520:	4603      	mov	r3, r0
 8002522:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002532:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002536:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800253a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e004      	b.n	8002550 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255a:	2b00      	cmp	r3, #0
 800255c:	d105      	bne.n	800256a <HAL_ADC_ConfigChannel+0x366>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0e9b      	lsrs	r3, r3, #26
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	e014      	b.n	8002594 <HAL_ADC_ConfigChannel+0x390>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002578:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800257a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800257e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002586:	2320      	movs	r3, #32
 8002588:	e004      	b.n	8002594 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800258a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002594:	429a      	cmp	r2, r3
 8002596:	d106      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2200      	movs	r2, #0
 800259e:	2102      	movs	r1, #2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff f8f7 	bl	8001794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2103      	movs	r1, #3
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff f8db 	bl	8001768 <LL_ADC_GetOffsetChannel>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x3ce>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2103      	movs	r1, #3
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff f8d0 	bl	8001768 <LL_ADC_GetOffsetChannel>
 80025c8:	4603      	mov	r3, r0
 80025ca:	0e9b      	lsrs	r3, r3, #26
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	e017      	b.n	8002602 <HAL_ADC_ConfigChannel+0x3fe>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2103      	movs	r1, #3
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff f8c5 	bl	8001768 <LL_ADC_GetOffsetChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80025ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ec:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80025ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80025f4:	2320      	movs	r3, #32
 80025f6:	e003      	b.n	8002600 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80025f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260a:	2b00      	cmp	r3, #0
 800260c:	d105      	bne.n	800261a <HAL_ADC_ConfigChannel+0x416>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	0e9b      	lsrs	r3, r3, #26
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	e011      	b.n	800263e <HAL_ADC_ConfigChannel+0x43a>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002628:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800262a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800262c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002632:	2320      	movs	r3, #32
 8002634:	e003      	b.n	800263e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002636:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800263e:	429a      	cmp	r2, r3
 8002640:	d106      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	2103      	movs	r1, #3
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff f8a2 	bl	8001794 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff f9e3 	bl	8001a20 <LL_ADC_IsEnabled>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	f040 813f 	bne.w	80028e0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	461a      	mov	r2, r3
 8002670:	f7ff f93c 	bl	80018ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a8e      	ldr	r2, [pc, #568]	@ (80028b4 <HAL_ADC_ConfigChannel+0x6b0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	f040 8130 	bne.w	80028e0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x4a4>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	0e9b      	lsrs	r3, r3, #26
 8002696:	3301      	adds	r3, #1
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	2b09      	cmp	r3, #9
 800269e:	bf94      	ite	ls
 80026a0:	2301      	movls	r3, #1
 80026a2:	2300      	movhi	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e019      	b.n	80026dc <HAL_ADC_ConfigChannel+0x4d8>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80026b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80026ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80026c0:	2320      	movs	r3, #32
 80026c2:	e003      	b.n	80026cc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80026c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2b09      	cmp	r3, #9
 80026d4:	bf94      	ite	ls
 80026d6:	2301      	movls	r3, #1
 80026d8:	2300      	movhi	r3, #0
 80026da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d079      	beq.n	80027d4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x4f8>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0e9b      	lsrs	r3, r3, #26
 80026f2:	3301      	adds	r3, #1
 80026f4:	069b      	lsls	r3, r3, #26
 80026f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026fa:	e015      	b.n	8002728 <HAL_ADC_ConfigChannel+0x524>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800270a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800270c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800270e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002714:	2320      	movs	r3, #32
 8002716:	e003      	b.n	8002720 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	3301      	adds	r3, #1
 8002722:	069b      	lsls	r3, r3, #26
 8002724:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x544>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	0e9b      	lsrs	r3, r3, #26
 800273a:	3301      	adds	r3, #1
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	2101      	movs	r1, #1
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	e017      	b.n	8002778 <HAL_ADC_ConfigChannel+0x574>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002758:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800275a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002760:	2320      	movs	r3, #32
 8002762:	e003      	b.n	800276c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3301      	adds	r3, #1
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	ea42 0103 	orr.w	r1, r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10a      	bne.n	800279e <HAL_ADC_ConfigChannel+0x59a>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0e9b      	lsrs	r3, r3, #26
 800278e:	3301      	adds	r3, #1
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	051b      	lsls	r3, r3, #20
 800279c:	e018      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x5cc>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80027ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80027b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80027b6:	2320      	movs	r3, #32
 80027b8:	e003      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80027ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f003 021f 	and.w	r2, r3, #31
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027d0:	430b      	orrs	r3, r1
 80027d2:	e080      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d107      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x5ec>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0e9b      	lsrs	r3, r3, #26
 80027e6:	3301      	adds	r3, #1
 80027e8:	069b      	lsls	r3, r3, #26
 80027ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ee:	e015      	b.n	800281c <HAL_ADC_ConfigChannel+0x618>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002808:	2320      	movs	r3, #32
 800280a:	e003      	b.n	8002814 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800280c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	3301      	adds	r3, #1
 8002816:	069b      	lsls	r3, r3, #26
 8002818:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <HAL_ADC_ConfigChannel+0x638>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	0e9b      	lsrs	r3, r3, #26
 800282e:	3301      	adds	r3, #1
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	2101      	movs	r1, #1
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	e017      	b.n	800286c <HAL_ADC_ConfigChannel+0x668>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	61bb      	str	r3, [r7, #24]
  return result;
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002854:	2320      	movs	r3, #32
 8002856:	e003      	b.n	8002860 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	3301      	adds	r3, #1
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	2101      	movs	r1, #1
 8002868:	fa01 f303 	lsl.w	r3, r1, r3
 800286c:	ea42 0103 	orr.w	r1, r2, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10d      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x694>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0e9b      	lsrs	r3, r3, #26
 8002882:	3301      	adds	r3, #1
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	3b1e      	subs	r3, #30
 8002890:	051b      	lsls	r3, r3, #20
 8002892:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002896:	e01d      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x6d0>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	60fb      	str	r3, [r7, #12]
  return result;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d103      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80028b0:	2320      	movs	r3, #32
 80028b2:	e005      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x6bc>
 80028b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	3301      	adds	r3, #1
 80028c2:	f003 021f 	and.w	r2, r3, #31
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	3b1e      	subs	r3, #30
 80028ce:	051b      	lsls	r3, r3, #20
 80028d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028da:	4619      	mov	r1, r3
 80028dc:	f7fe ffda 	bl	8001894 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b3d      	ldr	r3, [pc, #244]	@ (80029dc <HAL_ADC_ConfigChannel+0x7d8>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d06c      	beq.n	80029c6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028ec:	483c      	ldr	r0, [pc, #240]	@ (80029e0 <HAL_ADC_ConfigChannel+0x7dc>)
 80028ee:	f7fe ff09 	bl	8001704 <LL_ADC_GetCommonPathInternalCh>
 80028f2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a3a      	ldr	r2, [pc, #232]	@ (80029e4 <HAL_ADC_ConfigChannel+0x7e0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d127      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002904:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d121      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a35      	ldr	r2, [pc, #212]	@ (80029e8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d157      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002916:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800291a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800291e:	4619      	mov	r1, r3
 8002920:	482f      	ldr	r0, [pc, #188]	@ (80029e0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002922:	f7fe fedc 	bl	80016de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002926:	4b31      	ldr	r3, [pc, #196]	@ (80029ec <HAL_ADC_ConfigChannel+0x7e8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	099b      	lsrs	r3, r3, #6
 800292c:	4a30      	ldr	r2, [pc, #192]	@ (80029f0 <HAL_ADC_ConfigChannel+0x7ec>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	099b      	lsrs	r3, r3, #6
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002940:	e002      	b.n	8002948 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	3b01      	subs	r3, #1
 8002946:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f9      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800294e:	e03a      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a27      	ldr	r2, [pc, #156]	@ (80029f4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d113      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800295a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800295e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10d      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1f      	ldr	r2, [pc, #124]	@ (80029e8 <HAL_ADC_ConfigChannel+0x7e4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d12a      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002970:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002974:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002978:	4619      	mov	r1, r3
 800297a:	4819      	ldr	r0, [pc, #100]	@ (80029e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800297c:	f7fe feaf 	bl	80016de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002980:	e021      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1c      	ldr	r2, [pc, #112]	@ (80029f8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d11c      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800298c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002990:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d116      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a12      	ldr	r2, [pc, #72]	@ (80029e8 <HAL_ADC_ConfigChannel+0x7e4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d111      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029aa:	4619      	mov	r1, r3
 80029ac:	480c      	ldr	r0, [pc, #48]	@ (80029e0 <HAL_ADC_ConfigChannel+0x7dc>)
 80029ae:	f7fe fe96 	bl	80016de <LL_ADC_SetCommonPathInternalCh>
 80029b2:	e008      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80029ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	37d8      	adds	r7, #216	@ 0xd8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	80080000 	.word	0x80080000
 80029e0:	50040300 	.word	0x50040300
 80029e4:	c7520000 	.word	0xc7520000
 80029e8:	50040000 	.word	0x50040000
 80029ec:	20000000 	.word	0x20000000
 80029f0:	053e2d63 	.word	0x053e2d63
 80029f4:	cb840000 	.word	0xcb840000
 80029f8:	80000001 	.word	0x80000001

080029fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff f807 	bl	8001a20 <LL_ADC_IsEnabled>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d169      	bne.n	8002aec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	4b36      	ldr	r3, [pc, #216]	@ (8002af8 <ADC_Enable+0xfc>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00d      	beq.n	8002a42 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2a:	f043 0210 	orr.w	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a36:	f043 0201 	orr.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e055      	b.n	8002aee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe ffc2 	bl	80019d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a4c:	482b      	ldr	r0, [pc, #172]	@ (8002afc <ADC_Enable+0x100>)
 8002a4e:	f7fe fe59 	bl	8001704 <LL_ADC_GetCommonPathInternalCh>
 8002a52:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d013      	beq.n	8002a84 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a5c:	4b28      	ldr	r3, [pc, #160]	@ (8002b00 <ADC_Enable+0x104>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	4a28      	ldr	r2, [pc, #160]	@ (8002b04 <ADC_Enable+0x108>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a76:	e002      	b.n	8002a7e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f9      	bne.n	8002a78 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a84:	f7fe fde8 	bl	8001658 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a8a:	e028      	b.n	8002ade <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fe ffc5 	bl	8001a20 <LL_ADC_IsEnabled>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d104      	bne.n	8002aa6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe ff95 	bl	80019d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002aa6:	f7fe fdd7 	bl	8001658 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d914      	bls.n	8002ade <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d00d      	beq.n	8002ade <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac6:	f043 0210 	orr.w	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad2:	f043 0201 	orr.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e007      	b.n	8002aee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d1cf      	bne.n	8002a8c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	8000003f 	.word	0x8000003f
 8002afc:	50040300 	.word	0x50040300
 8002b00:	20000000 	.word	0x20000000
 8002b04:	053e2d63 	.word	0x053e2d63

08002b08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe ff96 	bl	8001a46 <LL_ADC_IsDisableOngoing>
 8002b1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe ff7d 	bl	8001a20 <LL_ADC_IsEnabled>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d047      	beq.n	8002bbc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d144      	bne.n	8002bbc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 030d 	and.w	r3, r3, #13
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d10c      	bne.n	8002b5a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe ff57 	bl	80019f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b52:	f7fe fd81 	bl	8001658 <HAL_GetTick>
 8002b56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b58:	e029      	b.n	8002bae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5e:	f043 0210 	orr.w	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6a:	f043 0201 	orr.w	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e023      	b.n	8002bbe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b76:	f7fe fd6f 	bl	8001658 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d914      	bls.n	8002bae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b96:	f043 0210 	orr.w	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba2:	f043 0201 	orr.w	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e007      	b.n	8002bbe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1dc      	bne.n	8002b76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d14b      	bne.n	8002c78 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d021      	beq.n	8002c3e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe fdf6 	bl	80017f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d032      	beq.n	8002c70 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d12b      	bne.n	8002c70 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d11f      	bne.n	8002c70 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	f043 0201 	orr.w	r2, r3, #1
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c3c:	e018      	b.n	8002c70 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d111      	bne.n	8002c70 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c68:	f043 0201 	orr.w	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f7fd ffcb 	bl	8000c0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c76:	e00e      	b.n	8002c96 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f7ff fab3 	bl	80021f0 <HAL_ADC_ErrorCallback>
}
 8002c8a:	e004      	b.n	8002c96 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	4798      	blx	r3
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f7fe f845 	bl	8000d3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ccc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd8:	f043 0204 	orr.w	r2, r3, #4
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7ff fa85 	bl	80021f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <LL_ADC_StartCalibration>:
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002d00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	609a      	str	r2, [r3, #8]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_ADC_IsCalibrationOnGoing>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d34:	d101      	bne.n	8002d3a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADCEx_Calibration_Start+0x1c>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e04d      	b.n	8002e00 <HAL_ADCEx_Calibration_Start+0xb8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff fecb 	bl	8002b08 <ADC_Disable>
 8002d72:	4603      	mov	r3, r0
 8002d74:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d136      	bne.n	8002dea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d84:	f023 0302 	bic.w	r3, r3, #2
 8002d88:	f043 0202 	orr.w	r2, r3, #2
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6839      	ldr	r1, [r7, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff ffa9 	bl	8002cee <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d9c:	e014      	b.n	8002dc8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	3301      	adds	r3, #1
 8002da2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002daa:	d30d      	bcc.n	8002dc8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db0:	f023 0312 	bic.w	r3, r3, #18
 8002db4:	f043 0210 	orr.w	r2, r3, #16
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e01b      	b.n	8002e00 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ffa7 	bl	8002d20 <LL_ADC_IsCalibrationOnGoing>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e2      	bne.n	8002d9e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ddc:	f023 0303 	bic.w	r3, r3, #3
 8002de0:	f043 0201 	orr.w	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002de8:	e005      	b.n	8002df6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	f043 0210 	orr.w	r2, r3, #16
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9e:	4a04      	ldr	r2, [pc, #16]	@ (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	60d3      	str	r3, [r2, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <__NVIC_GetPriorityGrouping+0x18>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 0307 	and.w	r3, r3, #7
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	db0b      	blt.n	8002efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	f003 021f 	and.w	r2, r3, #31
 8002ee8:	4907      	ldr	r1, [pc, #28]	@ (8002f08 <__NVIC_EnableIRQ+0x38>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000e100 	.word	0xe000e100

08002f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	db0a      	blt.n	8002f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	490c      	ldr	r1, [pc, #48]	@ (8002f58 <__NVIC_SetPriority+0x4c>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	0112      	lsls	r2, r2, #4
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f34:	e00a      	b.n	8002f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4908      	ldr	r1, [pc, #32]	@ (8002f5c <__NVIC_SetPriority+0x50>)
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	3b04      	subs	r3, #4
 8002f44:	0112      	lsls	r2, r2, #4
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	440b      	add	r3, r1
 8002f4a:	761a      	strb	r2, [r3, #24]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000e100 	.word	0xe000e100
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	@ 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f1c3 0307 	rsb	r3, r3, #7
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	bf28      	it	cs
 8002f7e:	2304      	movcs	r3, #4
 8002f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d902      	bls.n	8002f90 <NVIC_EncodePriority+0x30>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3b03      	subs	r3, #3
 8002f8e:	e000      	b.n	8002f92 <NVIC_EncodePriority+0x32>
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	43d9      	mvns	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	4313      	orrs	r3, r2
         );
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3724      	adds	r7, #36	@ 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd8:	d301      	bcc.n	8002fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00f      	b.n	8002ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fde:	4a0a      	ldr	r2, [pc, #40]	@ (8003008 <SysTick_Config+0x40>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fe6:	210f      	movs	r1, #15
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fec:	f7ff ff8e 	bl	8002f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff0:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <SysTick_Config+0x40>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ff6:	4b04      	ldr	r3, [pc, #16]	@ (8003008 <SysTick_Config+0x40>)
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	e000e010 	.word	0xe000e010

0800300c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff29 	bl	8002e6c <__NVIC_SetPriorityGrouping>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003034:	f7ff ff3e 	bl	8002eb4 <__NVIC_GetPriorityGrouping>
 8003038:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	6978      	ldr	r0, [r7, #20]
 8003040:	f7ff ff8e 	bl	8002f60 <NVIC_EncodePriority>
 8003044:	4602      	mov	r2, r0
 8003046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff5d 	bl	8002f0c <__NVIC_SetPriority>
}
 8003052:	bf00      	nop
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff31 	bl	8002ed0 <__NVIC_EnableIRQ>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ffa2 	bl	8002fc8 <SysTick_Config>
 8003084:	4603      	mov	r3, r0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e08d      	b.n	80031be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	4b47      	ldr	r3, [pc, #284]	@ (80031c8 <HAL_DMA_Init+0x138>)
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d80f      	bhi.n	80030ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b45      	ldr	r3, [pc, #276]	@ (80031cc <HAL_DMA_Init+0x13c>)
 80030b6:	4413      	add	r3, r2
 80030b8:	4a45      	ldr	r2, [pc, #276]	@ (80031d0 <HAL_DMA_Init+0x140>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	009a      	lsls	r2, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a42      	ldr	r2, [pc, #264]	@ (80031d4 <HAL_DMA_Init+0x144>)
 80030ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80030cc:	e00e      	b.n	80030ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	4b40      	ldr	r3, [pc, #256]	@ (80031d8 <HAL_DMA_Init+0x148>)
 80030d6:	4413      	add	r3, r2
 80030d8:	4a3d      	ldr	r2, [pc, #244]	@ (80031d0 <HAL_DMA_Init+0x140>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	091b      	lsrs	r3, r3, #4
 80030e0:	009a      	lsls	r2, r3, #2
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a3c      	ldr	r2, [pc, #240]	@ (80031dc <HAL_DMA_Init+0x14c>)
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003106:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003110:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800311c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003128:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f9fe 	bl	8003540 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800314c:	d102      	bne.n	8003154 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003168:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d010      	beq.n	8003194 <HAL_DMA_Init+0x104>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b04      	cmp	r3, #4
 8003178:	d80c      	bhi.n	8003194 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fa1e 	bl	80035bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	e008      	b.n	80031a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40020407 	.word	0x40020407
 80031cc:	bffdfff8 	.word	0xbffdfff8
 80031d0:	cccccccd 	.word	0xcccccccd
 80031d4:	40020000 	.word	0x40020000
 80031d8:	bffdfbf8 	.word	0xbffdfbf8
 80031dc:	40020400 	.word	0x40020400

080031e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_DMA_Start_IT+0x20>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e066      	b.n	80032ce <HAL_DMA_Start_IT+0xee>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	d155      	bne.n	80032c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f943 	bl	80034c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003242:	2b00      	cmp	r3, #0
 8003244:	d008      	beq.n	8003258 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 020e 	orr.w	r2, r2, #14
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e00f      	b.n	8003278 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0204 	bic.w	r2, r2, #4
 8003266:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 020a 	orr.w	r2, r2, #10
 8003276:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003290:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003294:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032ac:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e005      	b.n	80032cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032c8:	2302      	movs	r3, #2
 80032ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	f003 031c 	and.w	r3, r3, #28
 80032f6:	2204      	movs	r2, #4
 80032f8:	409a      	lsls	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d026      	beq.n	8003350 <HAL_DMA_IRQHandler+0x7a>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d021      	beq.n	8003350 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d107      	bne.n	800332a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0204 	bic.w	r2, r2, #4
 8003328:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332e:	f003 021c 	and.w	r2, r3, #28
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	2104      	movs	r1, #4
 8003338:	fa01 f202 	lsl.w	r2, r1, r2
 800333c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	2b00      	cmp	r3, #0
 8003344:	d071      	beq.n	800342a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800334e:	e06c      	b.n	800342a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003354:	f003 031c 	and.w	r3, r3, #28
 8003358:	2202      	movs	r2, #2
 800335a:	409a      	lsls	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d02e      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xec>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d029      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 020a 	bic.w	r2, r2, #10
 800338a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003398:	f003 021c 	and.w	r2, r3, #28
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	2102      	movs	r1, #2
 80033a2:	fa01 f202 	lsl.w	r2, r1, r2
 80033a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d038      	beq.n	800342a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033c0:	e033      	b.n	800342a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c6:	f003 031c 	and.w	r3, r3, #28
 80033ca:	2208      	movs	r2, #8
 80033cc:	409a      	lsls	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d02a      	beq.n	800342c <HAL_DMA_IRQHandler+0x156>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d025      	beq.n	800342c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 020e 	bic.w	r2, r2, #14
 80033ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f4:	f003 021c 	and.w	r2, r3, #28
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003402:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800342a:	bf00      	nop
 800342c:	bf00      	nop
}
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	460b      	mov	r3, r1
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_DMA_RegisterCallback+0x20>
 8003450:	2302      	movs	r3, #2
 8003452:	e031      	b.n	80034b8 <HAL_DMA_RegisterCallback+0x84>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d120      	bne.n	80034aa <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003468:	7afb      	ldrb	r3, [r7, #11]
 800346a:	2b03      	cmp	r3, #3
 800346c:	d81a      	bhi.n	80034a4 <HAL_DMA_RegisterCallback+0x70>
 800346e:	a201      	add	r2, pc, #4	@ (adr r2, 8003474 <HAL_DMA_RegisterCallback+0x40>)
 8003470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003474:	08003485 	.word	0x08003485
 8003478:	0800348d 	.word	0x0800348d
 800347c:	08003495 	.word	0x08003495
 8003480:	0800349d 	.word	0x0800349d
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800348a:	e010      	b.n	80034ae <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8003492:	e00c      	b.n	80034ae <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 800349a:	e008      	b.n	80034ae <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80034a2:	e004      	b.n	80034ae <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	75fb      	strb	r3, [r7, #23]
        break;
 80034a8:	e001      	b.n	80034ae <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034ec:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f2:	f003 021c 	and.w	r2, r3, #28
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	2101      	movs	r1, #1
 80034fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003500:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b10      	cmp	r3, #16
 8003510:	d108      	bne.n	8003524 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003522:	e007      	b.n	8003534 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	60da      	str	r2, [r3, #12]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	4b17      	ldr	r3, [pc, #92]	@ (80035ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003550:	429a      	cmp	r2, r3
 8003552:	d80a      	bhi.n	800356a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003558:	089b      	lsrs	r3, r3, #2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003560:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6493      	str	r3, [r2, #72]	@ 0x48
 8003568:	e007      	b.n	800357a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	009a      	lsls	r2, r3, #2
 8003572:	4b0f      	ldr	r3, [pc, #60]	@ (80035b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003574:	4413      	add	r3, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	3b08      	subs	r3, #8
 8003582:	4a0c      	ldr	r2, [pc, #48]	@ (80035b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a0a      	ldr	r2, [pc, #40]	@ (80035b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003590:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	2201      	movs	r2, #1
 800359a:	409a      	lsls	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40020407 	.word	0x40020407
 80035b0:	4002081c 	.word	0x4002081c
 80035b4:	cccccccd 	.word	0xcccccccd
 80035b8:	40020880 	.word	0x40020880

080035bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	461a      	mov	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a08      	ldr	r2, [pc, #32]	@ (8003600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80035de:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2201      	movs	r2, #1
 80035ea:	409a      	lsls	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	1000823f 	.word	0x1000823f
 8003600:	40020940 	.word	0x40020940

08003604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003612:	e166      	b.n	80038e2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	2101      	movs	r1, #1
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	4013      	ands	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8158 	beq.w	80038dc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d005      	beq.n	8003644 <HAL_GPIO_Init+0x40>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d130      	bne.n	80036a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	2203      	movs	r2, #3
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800367a:	2201      	movs	r2, #1
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4013      	ands	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	f003 0201 	and.w	r2, r3, #1
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d017      	beq.n	80036e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	2203      	movs	r2, #3
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d123      	bne.n	8003736 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	08da      	lsrs	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3208      	adds	r2, #8
 80036f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	220f      	movs	r2, #15
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	08da      	lsrs	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3208      	adds	r2, #8
 8003730:	6939      	ldr	r1, [r7, #16]
 8003732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4013      	ands	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0203 	and.w	r2, r3, #3
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80b2 	beq.w	80038dc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003778:	4b61      	ldr	r3, [pc, #388]	@ (8003900 <HAL_GPIO_Init+0x2fc>)
 800377a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377c:	4a60      	ldr	r2, [pc, #384]	@ (8003900 <HAL_GPIO_Init+0x2fc>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6613      	str	r3, [r2, #96]	@ 0x60
 8003784:	4b5e      	ldr	r3, [pc, #376]	@ (8003900 <HAL_GPIO_Init+0x2fc>)
 8003786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003790:	4a5c      	ldr	r2, [pc, #368]	@ (8003904 <HAL_GPIO_Init+0x300>)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	089b      	lsrs	r3, r3, #2
 8003796:	3302      	adds	r3, #2
 8003798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	220f      	movs	r2, #15
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80037ba:	d02b      	beq.n	8003814 <HAL_GPIO_Init+0x210>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a52      	ldr	r2, [pc, #328]	@ (8003908 <HAL_GPIO_Init+0x304>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d025      	beq.n	8003810 <HAL_GPIO_Init+0x20c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a51      	ldr	r2, [pc, #324]	@ (800390c <HAL_GPIO_Init+0x308>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d01f      	beq.n	800380c <HAL_GPIO_Init+0x208>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a50      	ldr	r2, [pc, #320]	@ (8003910 <HAL_GPIO_Init+0x30c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d019      	beq.n	8003808 <HAL_GPIO_Init+0x204>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a4f      	ldr	r2, [pc, #316]	@ (8003914 <HAL_GPIO_Init+0x310>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d013      	beq.n	8003804 <HAL_GPIO_Init+0x200>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a4e      	ldr	r2, [pc, #312]	@ (8003918 <HAL_GPIO_Init+0x314>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00d      	beq.n	8003800 <HAL_GPIO_Init+0x1fc>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a4d      	ldr	r2, [pc, #308]	@ (800391c <HAL_GPIO_Init+0x318>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d007      	beq.n	80037fc <HAL_GPIO_Init+0x1f8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a4c      	ldr	r2, [pc, #304]	@ (8003920 <HAL_GPIO_Init+0x31c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d101      	bne.n	80037f8 <HAL_GPIO_Init+0x1f4>
 80037f4:	2307      	movs	r3, #7
 80037f6:	e00e      	b.n	8003816 <HAL_GPIO_Init+0x212>
 80037f8:	2308      	movs	r3, #8
 80037fa:	e00c      	b.n	8003816 <HAL_GPIO_Init+0x212>
 80037fc:	2306      	movs	r3, #6
 80037fe:	e00a      	b.n	8003816 <HAL_GPIO_Init+0x212>
 8003800:	2305      	movs	r3, #5
 8003802:	e008      	b.n	8003816 <HAL_GPIO_Init+0x212>
 8003804:	2304      	movs	r3, #4
 8003806:	e006      	b.n	8003816 <HAL_GPIO_Init+0x212>
 8003808:	2303      	movs	r3, #3
 800380a:	e004      	b.n	8003816 <HAL_GPIO_Init+0x212>
 800380c:	2302      	movs	r3, #2
 800380e:	e002      	b.n	8003816 <HAL_GPIO_Init+0x212>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <HAL_GPIO_Init+0x212>
 8003814:	2300      	movs	r3, #0
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	f002 0203 	and.w	r2, r2, #3
 800381c:	0092      	lsls	r2, r2, #2
 800381e:	4093      	lsls	r3, r2
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003826:	4937      	ldr	r1, [pc, #220]	@ (8003904 <HAL_GPIO_Init+0x300>)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	3302      	adds	r3, #2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003834:	4b3b      	ldr	r3, [pc, #236]	@ (8003924 <HAL_GPIO_Init+0x320>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	43db      	mvns	r3, r3
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4013      	ands	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003858:	4a32      	ldr	r2, [pc, #200]	@ (8003924 <HAL_GPIO_Init+0x320>)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800385e:	4b31      	ldr	r3, [pc, #196]	@ (8003924 <HAL_GPIO_Init+0x320>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	43db      	mvns	r3, r3
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4013      	ands	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003882:	4a28      	ldr	r2, [pc, #160]	@ (8003924 <HAL_GPIO_Init+0x320>)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003888:	4b26      	ldr	r3, [pc, #152]	@ (8003924 <HAL_GPIO_Init+0x320>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	43db      	mvns	r3, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003924 <HAL_GPIO_Init+0x320>)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003924 <HAL_GPIO_Init+0x320>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4013      	ands	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038d6:	4a13      	ldr	r2, [pc, #76]	@ (8003924 <HAL_GPIO_Init+0x320>)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3301      	adds	r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f47f ae91 	bne.w	8003614 <HAL_GPIO_Init+0x10>
  }
}
 80038f2:	bf00      	nop
 80038f4:	bf00      	nop
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	40021000 	.word	0x40021000
 8003904:	40010000 	.word	0x40010000
 8003908:	48000400 	.word	0x48000400
 800390c:	48000800 	.word	0x48000800
 8003910:	48000c00 	.word	0x48000c00
 8003914:	48001000 	.word	0x48001000
 8003918:	48001400 	.word	0x48001400
 800391c:	48001800 	.word	0x48001800
 8003920:	48001c00 	.word	0x48001c00
 8003924:	40010400 	.word	0x40010400

08003928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	807b      	strh	r3, [r7, #2]
 8003934:	4613      	mov	r3, r2
 8003936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003938:	787b      	ldrb	r3, [r7, #1]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003944:	e002      	b.n	800394c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003946:	887a      	ldrh	r2, [r7, #2]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800396a:	887a      	ldrh	r2, [r7, #2]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4013      	ands	r3, r2
 8003970:	041a      	lsls	r2, r3, #16
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	43d9      	mvns	r1, r3
 8003976:	887b      	ldrh	r3, [r7, #2]
 8003978:	400b      	ands	r3, r1
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	619a      	str	r2, [r3, #24]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003996:	4b08      	ldr	r3, [pc, #32]	@ (80039b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d006      	beq.n	80039b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039a2:	4a05      	ldr	r2, [pc, #20]	@ (80039b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fc ffce 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40010400 	.word	0x40010400

080039bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039be:	b08f      	sub	sp, #60	@ 0x3c
 80039c0:	af0a      	add	r7, sp, #40	@ 0x28
 80039c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e116      	b.n	8003bfc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f007 fe39 	bl	800b660 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2203      	movs	r2, #3
 80039f2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d102      	bne.n	8003a08 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f004 fa90 	bl	8007f32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	687e      	ldr	r6, [r7, #4]
 8003a1a:	466d      	mov	r5, sp
 8003a1c:	f106 0410 	add.w	r4, r6, #16
 8003a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a30:	1d33      	adds	r3, r6, #4
 8003a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a34:	6838      	ldr	r0, [r7, #0]
 8003a36:	f004 f9a3 	bl	8007d80 <USB_CoreInit>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0d7      	b.n	8003bfc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2100      	movs	r1, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f004 fa7e 	bl	8007f54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	e04a      	b.n	8003af4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a5e:	7bfa      	ldrb	r2, [r7, #15]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	333d      	adds	r3, #61	@ 0x3d
 8003a6e:	2201      	movs	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	333c      	adds	r3, #60	@ 0x3c
 8003a82:	7bfa      	ldrb	r2, [r7, #15]
 8003a84:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a86:	7bfa      	ldrb	r2, [r7, #15]
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	b298      	uxth	r0, r3
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	3356      	adds	r3, #86	@ 0x56
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a9e:	7bfa      	ldrb	r2, [r7, #15]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	3340      	adds	r3, #64	@ 0x40
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3344      	adds	r3, #68	@ 0x44
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ac6:	7bfa      	ldrb	r2, [r7, #15]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	3348      	adds	r3, #72	@ 0x48
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ada:	7bfa      	ldrb	r2, [r7, #15]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	334c      	adds	r3, #76	@ 0x4c
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	3301      	adds	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d3af      	bcc.n	8003a5e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	73fb      	strb	r3, [r7, #15]
 8003b02:	e044      	b.n	8003b8e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b1a:	7bfa      	ldrb	r2, [r7, #15]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b5c:	7bfa      	ldrb	r2, [r7, #15]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
 8003b8e:	7bfa      	ldrb	r2, [r7, #15]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d3b5      	bcc.n	8003b04 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	687e      	ldr	r6, [r7, #4]
 8003ba0:	466d      	mov	r5, sp
 8003ba2:	f106 0410 	add.w	r4, r6, #16
 8003ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bb6:	1d33      	adds	r3, r6, #4
 8003bb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bba:	6838      	ldr	r0, [r7, #0]
 8003bbc:	f004 fa16 	bl	8007fec <USB_DevInit>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e014      	b.n	8003bfc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d102      	bne.n	8003bf0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f001 f86a 	bl	8004cc4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f005 f9c4 	bl	8008f82 <USB_DevDisconnect>

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_PCD_Start+0x1c>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e01c      	b.n	8003c5a <HAL_PCD_Start+0x56>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d105      	bne.n	8003c3c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c34:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f004 f965 	bl	8007f10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f005 f978 	bl	8008f40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c62:	b590      	push	{r4, r7, lr}
 8003c64:	b08d      	sub	sp, #52	@ 0x34
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f005 fa36 	bl	80090ea <USB_GetMode>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f040 847e 	bne.w	8004582 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f005 f99a 	bl	8008fc4 <USB_ReadInterrupts>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8474 	beq.w	8004580 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f005 f987 	bl	8008fc4 <USB_ReadInterrupts>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d107      	bne.n	8003cd0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f002 0202 	and.w	r2, r2, #2
 8003cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f005 f975 	bl	8008fc4 <USB_ReadInterrupts>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d161      	bne.n	8003da8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0210 	bic.w	r2, r2, #16
 8003cf2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	f003 020f 	and.w	r2, r3, #15
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	3304      	adds	r3, #4
 8003d12:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	0c5b      	lsrs	r3, r3, #17
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d124      	bne.n	8003d6a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d035      	beq.n	8003d98 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	091b      	lsrs	r3, r3, #4
 8003d34:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6a38      	ldr	r0, [r7, #32]
 8003d40:	f004 ffac 	bl	8008c9c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d50:	441a      	add	r2, r3
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d62:	441a      	add	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	615a      	str	r2, [r3, #20]
 8003d68:	e016      	b.n	8003d98 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	0c5b      	lsrs	r3, r3, #17
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	2b06      	cmp	r3, #6
 8003d74:	d110      	bne.n	8003d98 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6a38      	ldr	r0, [r7, #32]
 8003d82:	f004 ff8b 	bl	8008c9c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d92:	441a      	add	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0210 	orr.w	r2, r2, #16
 8003da6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f005 f909 	bl	8008fc4 <USB_ReadInterrupts>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003db8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dbc:	f040 80a7 	bne.w	8003f0e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f005 f90e 	bl	8008fea <USB_ReadDevAllOutEpInterrupt>
 8003dce:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003dd0:	e099      	b.n	8003f06 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 808e 	beq.w	8003efa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f005 f932 	bl	8009052 <USB_ReadDevOutEPInterrupt>
 8003dee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e06:	461a      	mov	r2, r3
 8003e08:	2301      	movs	r3, #1
 8003e0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fe7e 	bl	8004b10 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00c      	beq.n	8003e38 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 feba 	bl	8004bac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2310      	movs	r3, #16
 8003e52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d030      	beq.n	8003ec0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e66:	2b80      	cmp	r3, #128	@ 0x80
 8003e68:	d109      	bne.n	8003e7e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e7c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4413      	add	r3, r2
 8003e90:	3304      	adds	r3, #4
 8003e92:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	78db      	ldrb	r3, [r3, #3]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d108      	bne.n	8003eae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f007 fd2f 	bl	800b90c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2320      	movs	r3, #32
 8003eda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ef8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	3301      	adds	r3, #1
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f47f af62 	bne.w	8003dd2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f005 f856 	bl	8008fc4 <USB_ReadInterrupts>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f22:	f040 80a4 	bne.w	800406e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f005 f877 	bl	800901e <USB_ReadDevAllInEpInterrupt>
 8003f30:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003f36:	e096      	b.n	8004066 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 808b 	beq.w	800405a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f005 f89d 	bl	800908e <USB_ReadDevInEPInterrupt>
 8003f54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d020      	beq.n	8003fa2 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	2201      	movs	r2, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69f9      	ldr	r1, [r7, #28]
 8003f7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f80:	4013      	ands	r3, r2
 8003f82:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f90:	461a      	mov	r2, r3
 8003f92:	2301      	movs	r3, #1
 8003f94:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f007 fc20 	bl	800b7e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2308      	movs	r3, #8
 8003fbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2310      	movs	r3, #16
 8003fd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2340      	movs	r3, #64	@ 0x40
 8003ff4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d023      	beq.n	8004048 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004000:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004002:	6a38      	ldr	r0, [r7, #32]
 8004004:	f004 f934 	bl	8008270 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	3338      	adds	r3, #56	@ 0x38
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4413      	add	r3, r2
 8004018:	3304      	adds	r3, #4
 800401a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	78db      	ldrb	r3, [r3, #3]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d108      	bne.n	8004036 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2200      	movs	r2, #0
 8004028:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	b2db      	uxtb	r3, r3
 800402e:	4619      	mov	r1, r3
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f007 fc7d 	bl	800b930 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004042:	461a      	mov	r2, r3
 8004044:	2302      	movs	r3, #2
 8004046:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004052:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fcd2 	bl	80049fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	3301      	adds	r3, #1
 800405e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	f47f af65 	bne.w	8003f38 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f004 ffa6 	bl	8008fc4 <USB_ReadInterrupts>
 8004078:	4603      	mov	r3, r0
 800407a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800407e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004082:	d122      	bne.n	80040ca <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d108      	bne.n	80040b4 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040aa:	2100      	movs	r1, #0
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f007 feb1 	bl	800be14 <HAL_PCDEx_LPM_Callback>
 80040b2:	e002      	b.n	80040ba <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f007 fc01 	bl	800b8bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80040c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f004 ff78 	bl	8008fc4 <USB_ReadInterrupts>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040de:	d112      	bne.n	8004106 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d102      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f007 fbbd 	bl	800b870 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004104:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f004 ff5a 	bl	8008fc4 <USB_ReadInterrupts>
 8004110:	4603      	mov	r3, r0
 8004112:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004116:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800411a:	d121      	bne.n	8004160 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800412a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d111      	bne.n	800415a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004144:	089b      	lsrs	r3, r3, #2
 8004146:	f003 020f 	and.w	r2, r3, #15
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004150:	2101      	movs	r1, #1
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f007 fe5e 	bl	800be14 <HAL_PCDEx_LPM_Callback>
 8004158:	e002      	b.n	8004160 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f007 fb88 	bl	800b870 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f004 ff2d 	bl	8008fc4 <USB_ReadInterrupts>
 800416a:	4603      	mov	r3, r0
 800416c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004174:	f040 80b5 	bne.w	80042e2 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2110      	movs	r1, #16
 8004192:	4618      	mov	r0, r3
 8004194:	f004 f86c 	bl	8008270 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004198:	2300      	movs	r3, #0
 800419a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800419c:	e046      	b.n	800422c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800419e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041aa:	461a      	mov	r2, r3
 80041ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041c2:	0151      	lsls	r1, r2, #5
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	440a      	add	r2, r1
 80041c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041de:	461a      	mov	r2, r3
 80041e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041f6:	0151      	lsls	r1, r2, #5
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	440a      	add	r2, r1
 80041fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004200:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004204:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004220:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004224:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004228:	3301      	adds	r3, #1
 800422a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004232:	429a      	cmp	r2, r3
 8004234:	d3b3      	bcc.n	800419e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004244:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004248:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004262:	f043 030b 	orr.w	r3, r3, #11
 8004266:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004278:	f043 030b 	orr.w	r3, r3, #11
 800427c:	6453      	str	r3, [r2, #68]	@ 0x44
 800427e:	e015      	b.n	80042ac <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800428e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004292:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004296:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042a6:	f043 030b 	orr.w	r3, r3, #11
 80042aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80042be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f004 ff3d 	bl	800914c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80042e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f004 fe6c 	bl	8008fc4 <USB_ReadInterrupts>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042f6:	d124      	bne.n	8004342 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f004 ff02 	bl	8009106 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f004 f82f 	bl	800836a <USB_GetDevSpeed>
 800430c:	4603      	mov	r3, r0
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681c      	ldr	r4, [r3, #0]
 8004318:	f001 fbbc 	bl	8005a94 <HAL_RCC_GetHCLKFreq>
 800431c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004322:	b2db      	uxtb	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	4620      	mov	r0, r4
 8004328:	f003 fd56 	bl	8007dd8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f007 fa80 	bl	800b832 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004340:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f004 fe3c 	bl	8008fc4 <USB_ReadInterrupts>
 800434c:	4603      	mov	r3, r0
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b08      	cmp	r3, #8
 8004354:	d10a      	bne.n	800436c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f007 fa5d 	bl	800b816 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f002 0208 	and.w	r2, r2, #8
 800436a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f004 fe27 	bl	8008fc4 <USB_ReadInterrupts>
 8004376:	4603      	mov	r3, r0
 8004378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437c:	2b80      	cmp	r3, #128	@ 0x80
 800437e:	d122      	bne.n	80043c6 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800438c:	2301      	movs	r3, #1
 800438e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004390:	e014      	b.n	80043bc <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004396:	4613      	mov	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d105      	bne.n	80043b6 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	4619      	mov	r1, r3
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 faf3 	bl	800499c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	3301      	adds	r3, #1
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d3e5      	bcc.n	8004392 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f004 fdfa 	bl	8008fc4 <USB_ReadInterrupts>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043da:	d13b      	bne.n	8004454 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043dc:	2301      	movs	r3, #1
 80043de:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e0:	e02b      	b.n	800443a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3340      	adds	r3, #64	@ 0x40
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d115      	bne.n	8004434 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004408:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800440a:	2b00      	cmp	r3, #0
 800440c:	da12      	bge.n	8004434 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	333f      	adds	r3, #63	@ 0x3f
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800442a:	b2db      	uxtb	r3, r3
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fab4 	bl	800499c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	3301      	adds	r3, #1
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004440:	429a      	cmp	r2, r3
 8004442:	d3ce      	bcc.n	80043e2 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004452:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f004 fdb3 	bl	8008fc4 <USB_ReadInterrupts>
 800445e:	4603      	mov	r3, r0
 8004460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004464:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004468:	d155      	bne.n	8004516 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800446a:	2301      	movs	r3, #1
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
 800446e:	e045      	b.n	80044fc <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d12e      	bne.n	80044f6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004498:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800449a:	2b00      	cmp	r3, #0
 800449c:	da2b      	bge.n	80044f6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80044aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d121      	bne.n	80044f6 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044f2:	6053      	str	r3, [r2, #4]
            break;
 80044f4:	e007      	b.n	8004506 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	3301      	adds	r3, #1
 80044fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004502:	429a      	cmp	r2, r3
 8004504:	d3b4      	bcc.n	8004470 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695a      	ldr	r2, [r3, #20]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004514:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f004 fd52 	bl	8008fc4 <USB_ReadInterrupts>
 8004520:	4603      	mov	r3, r0
 8004522:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452a:	d10a      	bne.n	8004542 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f007 fa11 	bl	800b954 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f004 fd3c 	bl	8008fc4 <USB_ReadInterrupts>
 800454c:	4603      	mov	r3, r0
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b04      	cmp	r3, #4
 8004554:	d115      	bne.n	8004582 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f007 fa01 	bl	800b970 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6859      	ldr	r1, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
 800457e:	e000      	b.n	8004582 <HAL_PCD_IRQHandler+0x920>
      return;
 8004580:	bf00      	nop
    }
  }
}
 8004582:	3734      	adds	r7, #52	@ 0x34
 8004584:	46bd      	mov	sp, r7
 8004586:	bd90      	pop	{r4, r7, pc}

08004588 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_PCD_SetAddress+0x1a>
 800459e:	2302      	movs	r3, #2
 80045a0:	e013      	b.n	80045ca <HAL_PCD_SetAddress+0x42>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f004 fc9a 	bl	8008ef4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	4608      	mov	r0, r1
 80045dc:	4611      	mov	r1, r2
 80045de:	461a      	mov	r2, r3
 80045e0:	4603      	mov	r3, r0
 80045e2:	70fb      	strb	r3, [r7, #3]
 80045e4:	460b      	mov	r3, r1
 80045e6:	803b      	strh	r3, [r7, #0]
 80045e8:	4613      	mov	r3, r2
 80045ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	da0f      	bge.n	8004618 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	f003 020f 	and.w	r2, r3, #15
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	3338      	adds	r3, #56	@ 0x38
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4413      	add	r3, r2
 800460c:	3304      	adds	r3, #4
 800460e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	705a      	strb	r2, [r3, #1]
 8004616:	e00f      	b.n	8004638 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	f003 020f 	and.w	r2, r3, #15
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	3304      	adds	r3, #4
 8004630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	b2da      	uxtb	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004644:	883a      	ldrh	r2, [r7, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	78ba      	ldrb	r2, [r7, #2]
 800464e:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d004      	beq.n	8004662 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004662:	78bb      	ldrb	r3, [r7, #2]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d102      	bne.n	800466e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_PCD_EP_Open+0xaa>
 8004678:	2302      	movs	r3, #2
 800467a:	e00e      	b.n	800469a <HAL_PCD_EP_Open+0xc8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68f9      	ldr	r1, [r7, #12]
 800468a:	4618      	mov	r0, r3
 800468c:	f003 fe8c 	bl	80083a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004698:	7afb      	ldrb	r3, [r7, #11]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da0f      	bge.n	80046d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	f003 020f 	and.w	r2, r3, #15
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	3338      	adds	r3, #56	@ 0x38
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	3304      	adds	r3, #4
 80046cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	705a      	strb	r2, [r3, #1]
 80046d4:	e00f      	b.n	80046f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046d6:	78fb      	ldrb	r3, [r7, #3]
 80046d8:	f003 020f 	and.w	r2, r3, #15
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	4413      	add	r3, r2
 80046ec:	3304      	adds	r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_PCD_EP_Close+0x6e>
 800470c:	2302      	movs	r3, #2
 800470e:	e00e      	b.n	800472e <HAL_PCD_EP_Close+0x8c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68f9      	ldr	r1, [r7, #12]
 800471e:	4618      	mov	r0, r3
 8004720:	f003 feca 	bl	80084b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b086      	sub	sp, #24
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
 8004742:	460b      	mov	r3, r1
 8004744:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004746:	7afb      	ldrb	r3, [r7, #11]
 8004748:	f003 020f 	and.w	r2, r3, #15
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	3304      	adds	r3, #4
 800475e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2200      	movs	r2, #0
 8004770:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2200      	movs	r2, #0
 8004776:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004778:	7afb      	ldrb	r3, [r7, #11]
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	b2da      	uxtb	r2, r3
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6979      	ldr	r1, [r7, #20]
 800478a:	4618      	mov	r0, r3
 800478c:	f003 ff70 	bl	8008670 <USB_EPStartXfer>

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	460b      	mov	r3, r1
 80047a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047a6:	78fb      	ldrb	r3, [r7, #3]
 80047a8:	f003 020f 	and.w	r2, r3, #15
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 80047bc:	681b      	ldr	r3, [r3, #0]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
 80047d6:	460b      	mov	r3, r1
 80047d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047da:	7afb      	ldrb	r3, [r7, #11]
 80047dc:	f003 020f 	and.w	r2, r3, #15
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	3338      	adds	r3, #56	@ 0x38
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4413      	add	r3, r2
 80047ee:	3304      	adds	r3, #4
 80047f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2201      	movs	r2, #1
 8004808:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800480a:	7afb      	ldrb	r3, [r7, #11]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	b2da      	uxtb	r2, r3
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6979      	ldr	r1, [r7, #20]
 800481c:	4618      	mov	r0, r3
 800481e:	f003 ff27 	bl	8008670 <USB_EPStartXfer>

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	f003 020f 	and.w	r2, r3, #15
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	429a      	cmp	r2, r3
 8004844:	d901      	bls.n	800484a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e04e      	b.n	80048e8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800484a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800484e:	2b00      	cmp	r3, #0
 8004850:	da0f      	bge.n	8004872 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	f003 020f 	and.w	r2, r3, #15
 8004858:	4613      	mov	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	3338      	adds	r3, #56	@ 0x38
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4413      	add	r3, r2
 8004866:	3304      	adds	r3, #4
 8004868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	705a      	strb	r2, [r3, #1]
 8004870:	e00d      	b.n	800488e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	4613      	mov	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	4413      	add	r3, r2
 8004884:	3304      	adds	r3, #4
 8004886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	b2da      	uxtb	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_PCD_EP_SetStall+0x82>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e01c      	b.n	80048e8 <HAL_PCD_EP_SetStall+0xbc>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68f9      	ldr	r1, [r7, #12]
 80048bc:	4618      	mov	r0, r3
 80048be:	f004 fa45 	bl	8008d4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d108      	bne.n	80048de <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f004 fc37 	bl	800914c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	f003 020f 	and.w	r2, r3, #15
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d901      	bls.n	800490e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e042      	b.n	8004994 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800490e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004912:	2b00      	cmp	r3, #0
 8004914:	da0f      	bge.n	8004936 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 020f 	and.w	r2, r3, #15
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	3338      	adds	r3, #56	@ 0x38
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	4413      	add	r3, r2
 800492a:	3304      	adds	r3, #4
 800492c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	705a      	strb	r2, [r3, #1]
 8004934:	e00f      	b.n	8004956 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004936:	78fb      	ldrb	r3, [r7, #3]
 8004938:	f003 020f 	and.w	r2, r3, #15
 800493c:	4613      	mov	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	4413      	add	r3, r2
 800494c:	3304      	adds	r3, #4
 800494e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	b2da      	uxtb	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_PCD_EP_ClrStall+0x86>
 8004972:	2302      	movs	r3, #2
 8004974:	e00e      	b.n	8004994 <HAL_PCD_EP_ClrStall+0xa4>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	4618      	mov	r0, r3
 8004986:	f004 fa4f 	bl	8008e28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	da0c      	bge.n	80049ca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	f003 020f 	and.w	r2, r3, #15
 80049b6:	4613      	mov	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	3338      	adds	r3, #56	@ 0x38
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	4413      	add	r3, r2
 80049c4:	3304      	adds	r3, #4
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e00c      	b.n	80049e4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	f003 020f 	and.w	r2, r3, #15
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	4413      	add	r3, r2
 80049e0:	3304      	adds	r3, #4
 80049e2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68f9      	ldr	r1, [r7, #12]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f004 f872 	bl	8008ad4 <USB_EPStopXfer>
 80049f0:	4603      	mov	r3, r0
 80049f2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80049f4:	7afb      	ldrb	r3, [r7, #11]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b088      	sub	sp, #32
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	3338      	adds	r3, #56	@ 0x38
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4413      	add	r3, r2
 8004a22:	3304      	adds	r3, #4
 8004a24:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	695a      	ldr	r2, [r3, #20]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d901      	bls.n	8004a36 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e067      	b.n	8004b06 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d902      	bls.n	8004a52 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	3303      	adds	r3, #3
 8004a56:	089b      	lsrs	r3, r3, #2
 8004a58:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a5a:	e026      	b.n	8004aaa <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d902      	bls.n	8004a78 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	3303      	adds	r3, #3
 8004a7c:	089b      	lsrs	r3, r3, #2
 8004a7e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68d9      	ldr	r1, [r3, #12]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	6978      	ldr	r0, [r7, #20]
 8004a8e:	f004 f8cb 	bl	8008c28 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	441a      	add	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	441a      	add	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d809      	bhi.n	8004ad4 <PCD_WriteEmptyTxFifo+0xd6>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	695a      	ldr	r2, [r3, #20]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d203      	bcs.n	8004ad4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1c3      	bne.n	8004a5c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d811      	bhi.n	8004b04 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	43db      	mvns	r3, r3
 8004afa:	6939      	ldr	r1, [r7, #16]
 8004afc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b00:	4013      	ands	r3, r2
 8004b02:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	333c      	adds	r3, #60	@ 0x3c
 8004b28:	3304      	adds	r3, #4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4a19      	ldr	r2, [pc, #100]	@ (8004ba8 <PCD_EP_OutXfrComplete_int+0x98>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d124      	bne.n	8004b90 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b62:	6093      	str	r3, [r2, #8]
 8004b64:	e01a      	b.n	8004b9c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2320      	movs	r3, #32
 8004b80:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	4619      	mov	r1, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f006 fe0f 	bl	800b7ac <HAL_PCD_DataOutStageCallback>
 8004b8e:	e005      	b.n	8004b9c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	4619      	mov	r1, r3
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f006 fe08 	bl	800b7ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	4f54310a 	.word	0x4f54310a

08004bac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	333c      	adds	r3, #60	@ 0x3c
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8004c10 <PCD_EP_OutSetupPacket_int+0x64>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d90e      	bls.n	8004c00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d009      	beq.n	8004c00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bfe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f006 fdc1 	bl	800b788 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	4f54300a 	.word	0x4f54300a

08004c14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	70fb      	strb	r3, [r7, #3]
 8004c20:	4613      	mov	r3, r2
 8004c22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d107      	bne.n	8004c42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c32:	883b      	ldrh	r3, [r7, #0]
 8004c34:	0419      	lsls	r1, r3, #16
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c40:	e028      	b.n	8004c94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]
 8004c54:	e00d      	b.n	8004c72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	3340      	adds	r3, #64	@ 0x40
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	4413      	add	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
 8004c72:	7bfa      	ldrb	r2, [r7, #15]
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d3ec      	bcc.n	8004c56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c7c:	883b      	ldrh	r3, [r7, #0]
 8004c7e:	0418      	lsls	r0, r3, #16
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6819      	ldr	r1, [r3, #0]
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	4302      	orrs	r2, r0
 8004c8c:	3340      	adds	r3, #64	@ 0x40
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	887a      	ldrh	r2, [r7, #2]
 8004cb4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf6:	f043 0303 	orr.w	r3, r3, #3
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d10:	4b0d      	ldr	r3, [pc, #52]	@ (8004d48 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1c:	d102      	bne.n	8004d24 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004d1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d22:	e00b      	b.n	8004d3c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004d24:	4b08      	ldr	r3, [pc, #32]	@ (8004d48 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d32:	d102      	bne.n	8004d3a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004d34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d38:	e000      	b.n	8004d3c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004d3a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40007000 	.word	0x40007000

08004d4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d141      	bne.n	8004dde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d66:	d131      	bne.n	8004dcc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d68:	4b47      	ldr	r3, [pc, #284]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d6e:	4a46      	ldr	r2, [pc, #280]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d78:	4b43      	ldr	r3, [pc, #268]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d80:	4a41      	ldr	r2, [pc, #260]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004d88:	4b40      	ldr	r3, [pc, #256]	@ (8004e8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2232      	movs	r2, #50	@ 0x32
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	4a3f      	ldr	r2, [pc, #252]	@ (8004e90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	0c9b      	lsrs	r3, r3, #18
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d9e:	e002      	b.n	8004da6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004da6:	4b38      	ldr	r3, [pc, #224]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004db2:	d102      	bne.n	8004dba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f2      	bne.n	8004da0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dba:	4b33      	ldr	r3, [pc, #204]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc6:	d158      	bne.n	8004e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e057      	b.n	8004e7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dd2:	4a2d      	ldr	r2, [pc, #180]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ddc:	e04d      	b.n	8004e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004de4:	d141      	bne.n	8004e6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004de6:	4b28      	ldr	r3, [pc, #160]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df2:	d131      	bne.n	8004e58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004df4:	4b24      	ldr	r3, [pc, #144]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dfa:	4a23      	ldr	r2, [pc, #140]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e04:	4b20      	ldr	r3, [pc, #128]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004e14:	4b1d      	ldr	r3, [pc, #116]	@ (8004e8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2232      	movs	r2, #50	@ 0x32
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	0c9b      	lsrs	r3, r3, #18
 8004e26:	3301      	adds	r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e2a:	e002      	b.n	8004e32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e32:	4b15      	ldr	r3, [pc, #84]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e3e:	d102      	bne.n	8004e46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f2      	bne.n	8004e2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e46:	4b10      	ldr	r3, [pc, #64]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e52:	d112      	bne.n	8004e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e011      	b.n	8004e7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e58:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e68:	e007      	b.n	8004e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e6a:	4b07      	ldr	r3, [pc, #28]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e72:	4a05      	ldr	r2, [pc, #20]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e78:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	40007000 	.word	0x40007000
 8004e8c:	20000000 	.word	0x20000000
 8004e90:	431bde83 	.word	0x431bde83

08004e94 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004e98:	4b05      	ldr	r3, [pc, #20]	@ (8004eb0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	4a04      	ldr	r2, [pc, #16]	@ (8004eb0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ea2:	6053      	str	r3, [r2, #4]
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40007000 	.word	0x40007000

08004eb4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004eb8:	4b05      	ldr	r3, [pc, #20]	@ (8004ed0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4a04      	ldr	r2, [pc, #16]	@ (8004ed0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ec2:	6053      	str	r3, [r2, #4]
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40007000 	.word	0x40007000

08004ed4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f000 bc08 	b.w	80056f8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ee8:	4b96      	ldr	r3, [pc, #600]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f003 030c 	and.w	r3, r3, #12
 8004ef0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ef2:	4b94      	ldr	r3, [pc, #592]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 80e4 	beq.w	80050d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d007      	beq.n	8004f20 <HAL_RCC_OscConfig+0x4c>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b0c      	cmp	r3, #12
 8004f14:	f040 808b 	bne.w	800502e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	f040 8087 	bne.w	800502e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f20:	4b88      	ldr	r3, [pc, #544]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_RCC_OscConfig+0x64>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e3df      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1a      	ldr	r2, [r3, #32]
 8004f3c:	4b81      	ldr	r3, [pc, #516]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <HAL_RCC_OscConfig+0x7e>
 8004f48:	4b7e      	ldr	r3, [pc, #504]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f50:	e005      	b.n	8004f5e <HAL_RCC_OscConfig+0x8a>
 8004f52:	4b7c      	ldr	r3, [pc, #496]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f58:	091b      	lsrs	r3, r3, #4
 8004f5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d223      	bcs.n	8004faa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fdcc 	bl	8005b04 <RCC_SetFlashLatencyFromMSIRange>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e3c0      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f76:	4b73      	ldr	r3, [pc, #460]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a72      	ldr	r2, [pc, #456]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f7c:	f043 0308 	orr.w	r3, r3, #8
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	4b70      	ldr	r3, [pc, #448]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	496d      	ldr	r1, [pc, #436]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f94:	4b6b      	ldr	r3, [pc, #428]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	4968      	ldr	r1, [pc, #416]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	604b      	str	r3, [r1, #4]
 8004fa8:	e025      	b.n	8004ff6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004faa:	4b66      	ldr	r3, [pc, #408]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a65      	ldr	r2, [pc, #404]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004fb0:	f043 0308 	orr.w	r3, r3, #8
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	4b63      	ldr	r3, [pc, #396]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	4960      	ldr	r1, [pc, #384]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	021b      	lsls	r3, r3, #8
 8004fd6:	495b      	ldr	r1, [pc, #364]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fd8c 	bl	8005b04 <RCC_SetFlashLatencyFromMSIRange>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e380      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ff6:	f000 fcc1 	bl	800597c <HAL_RCC_GetSysClockFreq>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	4b51      	ldr	r3, [pc, #324]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	091b      	lsrs	r3, r3, #4
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	4950      	ldr	r1, [pc, #320]	@ (8005148 <HAL_RCC_OscConfig+0x274>)
 8005008:	5ccb      	ldrb	r3, [r1, r3]
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	fa22 f303 	lsr.w	r3, r2, r3
 8005012:	4a4e      	ldr	r2, [pc, #312]	@ (800514c <HAL_RCC_OscConfig+0x278>)
 8005014:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005016:	4b4e      	ldr	r3, [pc, #312]	@ (8005150 <HAL_RCC_OscConfig+0x27c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7fc facc 	bl	80015b8 <HAL_InitTick>
 8005020:	4603      	mov	r3, r0
 8005022:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d052      	beq.n	80050d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	e364      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d032      	beq.n	800509c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005036:	4b43      	ldr	r3, [pc, #268]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a42      	ldr	r2, [pc, #264]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005042:	f7fc fb09 	bl	8001658 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800504a:	f7fc fb05 	bl	8001658 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e34d      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800505c:	4b39      	ldr	r3, [pc, #228]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005068:	4b36      	ldr	r3, [pc, #216]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a35      	ldr	r2, [pc, #212]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 800506e:	f043 0308 	orr.w	r3, r3, #8
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	4b33      	ldr	r3, [pc, #204]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	4930      	ldr	r1, [pc, #192]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8005082:	4313      	orrs	r3, r2
 8005084:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005086:	4b2f      	ldr	r3, [pc, #188]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	492b      	ldr	r1, [pc, #172]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8005096:	4313      	orrs	r3, r2
 8005098:	604b      	str	r3, [r1, #4]
 800509a:	e01a      	b.n	80050d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800509c:	4b29      	ldr	r3, [pc, #164]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a28      	ldr	r2, [pc, #160]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050a8:	f7fc fad6 	bl	8001658 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050b0:	f7fc fad2 	bl	8001658 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e31a      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050c2:	4b20      	ldr	r3, [pc, #128]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f0      	bne.n	80050b0 <HAL_RCC_OscConfig+0x1dc>
 80050ce:	e000      	b.n	80050d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d073      	beq.n	80051c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_OscConfig+0x21c>
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b0c      	cmp	r3, #12
 80050e8:	d10e      	bne.n	8005108 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d10b      	bne.n	8005108 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f0:	4b14      	ldr	r3, [pc, #80]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d063      	beq.n	80051c4 <HAL_RCC_OscConfig+0x2f0>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d15f      	bne.n	80051c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e2f7      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005110:	d106      	bne.n	8005120 <HAL_RCC_OscConfig+0x24c>
 8005112:	4b0c      	ldr	r3, [pc, #48]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a0b      	ldr	r2, [pc, #44]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8005118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	e025      	b.n	800516c <HAL_RCC_OscConfig+0x298>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005128:	d114      	bne.n	8005154 <HAL_RCC_OscConfig+0x280>
 800512a:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a05      	ldr	r2, [pc, #20]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8005130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	4b03      	ldr	r3, [pc, #12]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a02      	ldr	r2, [pc, #8]	@ (8005144 <HAL_RCC_OscConfig+0x270>)
 800513c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	e013      	b.n	800516c <HAL_RCC_OscConfig+0x298>
 8005144:	40021000 	.word	0x40021000
 8005148:	0800bfc0 	.word	0x0800bfc0
 800514c:	20000000 	.word	0x20000000
 8005150:	20000004 	.word	0x20000004
 8005154:	4ba0      	ldr	r3, [pc, #640]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a9f      	ldr	r2, [pc, #636]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 800515a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	4b9d      	ldr	r3, [pc, #628]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a9c      	ldr	r2, [pc, #624]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800516a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d013      	beq.n	800519c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fc fa70 	bl	8001658 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800517c:	f7fc fa6c 	bl	8001658 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	@ 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e2b4      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800518e:	4b92      	ldr	r3, [pc, #584]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0x2a8>
 800519a:	e014      	b.n	80051c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519c:	f7fc fa5c 	bl	8001658 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a4:	f7fc fa58 	bl	8001658 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	@ 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e2a0      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051b6:	4b88      	ldr	r3, [pc, #544]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0x2d0>
 80051c2:	e000      	b.n	80051c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d060      	beq.n	8005294 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_OscConfig+0x310>
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d119      	bne.n	8005212 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d116      	bne.n	8005212 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051e4:	4b7c      	ldr	r3, [pc, #496]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_OscConfig+0x328>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e27d      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fc:	4b76      	ldr	r3, [pc, #472]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	061b      	lsls	r3, r3, #24
 800520a:	4973      	ldr	r1, [pc, #460]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 800520c:	4313      	orrs	r3, r2
 800520e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005210:	e040      	b.n	8005294 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d023      	beq.n	8005262 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800521a:	4b6f      	ldr	r3, [pc, #444]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a6e      	ldr	r2, [pc, #440]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005226:	f7fc fa17 	bl	8001658 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800522e:	f7fc fa13 	bl	8001658 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e25b      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005240:	4b65      	ldr	r3, [pc, #404]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524c:	4b62      	ldr	r3, [pc, #392]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	061b      	lsls	r3, r3, #24
 800525a:	495f      	ldr	r1, [pc, #380]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 800525c:	4313      	orrs	r3, r2
 800525e:	604b      	str	r3, [r1, #4]
 8005260:	e018      	b.n	8005294 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005262:	4b5d      	ldr	r3, [pc, #372]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a5c      	ldr	r2, [pc, #368]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800526c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526e:	f7fc f9f3 	bl	8001658 <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005276:	f7fc f9ef 	bl	8001658 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e237      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005288:	4b53      	ldr	r3, [pc, #332]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f0      	bne.n	8005276 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d03c      	beq.n	800531a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01c      	beq.n	80052e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052a8:	4b4b      	ldr	r3, [pc, #300]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 80052aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052ae:	4a4a      	ldr	r2, [pc, #296]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b8:	f7fc f9ce 	bl	8001658 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c0:	f7fc f9ca 	bl	8001658 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e212      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052d2:	4b41      	ldr	r3, [pc, #260]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 80052d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0ef      	beq.n	80052c0 <HAL_RCC_OscConfig+0x3ec>
 80052e0:	e01b      	b.n	800531a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052e2:	4b3d      	ldr	r3, [pc, #244]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 80052e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052e8:	4a3b      	ldr	r2, [pc, #236]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 80052ea:	f023 0301 	bic.w	r3, r3, #1
 80052ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f2:	f7fc f9b1 	bl	8001658 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052fa:	f7fc f9ad 	bl	8001658 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e1f5      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800530c:	4b32      	ldr	r3, [pc, #200]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 800530e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1ef      	bne.n	80052fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 80a6 	beq.w	8005474 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005328:	2300      	movs	r3, #0
 800532a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800532c:	4b2a      	ldr	r3, [pc, #168]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 800532e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10d      	bne.n	8005354 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005338:	4b27      	ldr	r3, [pc, #156]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 800533a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533c:	4a26      	ldr	r2, [pc, #152]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 800533e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005342:	6593      	str	r3, [r2, #88]	@ 0x58
 8005344:	4b24      	ldr	r3, [pc, #144]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005350:	2301      	movs	r3, #1
 8005352:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005354:	4b21      	ldr	r3, [pc, #132]	@ (80053dc <HAL_RCC_OscConfig+0x508>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d118      	bne.n	8005392 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005360:	4b1e      	ldr	r3, [pc, #120]	@ (80053dc <HAL_RCC_OscConfig+0x508>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1d      	ldr	r2, [pc, #116]	@ (80053dc <HAL_RCC_OscConfig+0x508>)
 8005366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800536a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800536c:	f7fc f974 	bl	8001658 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005374:	f7fc f970 	bl	8001658 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e1b8      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005386:	4b15      	ldr	r3, [pc, #84]	@ (80053dc <HAL_RCC_OscConfig+0x508>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f0      	beq.n	8005374 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d108      	bne.n	80053ac <HAL_RCC_OscConfig+0x4d8>
 800539a:	4b0f      	ldr	r3, [pc, #60]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 800539c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a0:	4a0d      	ldr	r2, [pc, #52]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053aa:	e029      	b.n	8005400 <HAL_RCC_OscConfig+0x52c>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b05      	cmp	r3, #5
 80053b2:	d115      	bne.n	80053e0 <HAL_RCC_OscConfig+0x50c>
 80053b4:	4b08      	ldr	r3, [pc, #32]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ba:	4a07      	ldr	r2, [pc, #28]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 80053bc:	f043 0304 	orr.w	r3, r3, #4
 80053c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053c4:	4b04      	ldr	r3, [pc, #16]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ca:	4a03      	ldr	r2, [pc, #12]	@ (80053d8 <HAL_RCC_OscConfig+0x504>)
 80053cc:	f043 0301 	orr.w	r3, r3, #1
 80053d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053d4:	e014      	b.n	8005400 <HAL_RCC_OscConfig+0x52c>
 80053d6:	bf00      	nop
 80053d8:	40021000 	.word	0x40021000
 80053dc:	40007000 	.word	0x40007000
 80053e0:	4b9d      	ldr	r3, [pc, #628]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e6:	4a9c      	ldr	r2, [pc, #624]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053f0:	4b99      	ldr	r3, [pc, #612]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f6:	4a98      	ldr	r2, [pc, #608]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 80053f8:	f023 0304 	bic.w	r3, r3, #4
 80053fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d016      	beq.n	8005436 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005408:	f7fc f926 	bl	8001658 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800540e:	e00a      	b.n	8005426 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005410:	f7fc f922 	bl	8001658 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e168      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005426:	4b8c      	ldr	r3, [pc, #560]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0ed      	beq.n	8005410 <HAL_RCC_OscConfig+0x53c>
 8005434:	e015      	b.n	8005462 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005436:	f7fc f90f 	bl	8001658 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800543c:	e00a      	b.n	8005454 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543e:	f7fc f90b 	bl	8001658 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544c:	4293      	cmp	r3, r2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e151      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005454:	4b80      	ldr	r3, [pc, #512]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1ed      	bne.n	800543e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005462:	7ffb      	ldrb	r3, [r7, #31]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d105      	bne.n	8005474 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005468:	4b7b      	ldr	r3, [pc, #492]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 800546a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546c:	4a7a      	ldr	r2, [pc, #488]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 800546e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005472:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d03c      	beq.n	80054fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01c      	beq.n	80054c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005488:	4b73      	ldr	r3, [pc, #460]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 800548a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800548e:	4a72      	ldr	r2, [pc, #456]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005498:	f7fc f8de 	bl	8001658 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054a0:	f7fc f8da 	bl	8001658 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e122      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054b2:	4b69      	ldr	r3, [pc, #420]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 80054b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0ef      	beq.n	80054a0 <HAL_RCC_OscConfig+0x5cc>
 80054c0:	e01b      	b.n	80054fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054c2:	4b65      	ldr	r3, [pc, #404]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 80054c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054c8:	4a63      	ldr	r2, [pc, #396]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 80054ca:	f023 0301 	bic.w	r3, r3, #1
 80054ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d2:	f7fc f8c1 	bl	8001658 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054da:	f7fc f8bd 	bl	8001658 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e105      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054ec:	4b5a      	ldr	r3, [pc, #360]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 80054ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1ef      	bne.n	80054da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 80f9 	beq.w	80056f6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005508:	2b02      	cmp	r3, #2
 800550a:	f040 80cf 	bne.w	80056ac <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800550e:	4b52      	ldr	r3, [pc, #328]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f003 0203 	and.w	r2, r3, #3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	429a      	cmp	r2, r3
 8005520:	d12c      	bne.n	800557c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552c:	3b01      	subs	r3, #1
 800552e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005530:	429a      	cmp	r2, r3
 8005532:	d123      	bne.n	800557c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005540:	429a      	cmp	r2, r3
 8005542:	d11b      	bne.n	800557c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005550:	429a      	cmp	r2, r3
 8005552:	d113      	bne.n	800557c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555e:	085b      	lsrs	r3, r3, #1
 8005560:	3b01      	subs	r3, #1
 8005562:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d109      	bne.n	800557c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	085b      	lsrs	r3, r3, #1
 8005574:	3b01      	subs	r3, #1
 8005576:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d071      	beq.n	8005660 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b0c      	cmp	r3, #12
 8005580:	d068      	beq.n	8005654 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005582:	4b35      	ldr	r3, [pc, #212]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d105      	bne.n	800559a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800558e:	4b32      	ldr	r3, [pc, #200]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e0ac      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800559e:	4b2e      	ldr	r3, [pc, #184]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 80055a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055aa:	f7fc f855 	bl	8001658 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b2:	f7fc f851 	bl	8001658 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e099      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055c4:	4b24      	ldr	r3, [pc, #144]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1f0      	bne.n	80055b2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055d0:	4b21      	ldr	r3, [pc, #132]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	4b21      	ldr	r3, [pc, #132]	@ (800565c <HAL_RCC_OscConfig+0x788>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80055e0:	3a01      	subs	r2, #1
 80055e2:	0112      	lsls	r2, r2, #4
 80055e4:	4311      	orrs	r1, r2
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80055ea:	0212      	lsls	r2, r2, #8
 80055ec:	4311      	orrs	r1, r2
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055f2:	0852      	lsrs	r2, r2, #1
 80055f4:	3a01      	subs	r2, #1
 80055f6:	0552      	lsls	r2, r2, #21
 80055f8:	4311      	orrs	r1, r2
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80055fe:	0852      	lsrs	r2, r2, #1
 8005600:	3a01      	subs	r2, #1
 8005602:	0652      	lsls	r2, r2, #25
 8005604:	4311      	orrs	r1, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800560a:	06d2      	lsls	r2, r2, #27
 800560c:	430a      	orrs	r2, r1
 800560e:	4912      	ldr	r1, [pc, #72]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 8005610:	4313      	orrs	r3, r2
 8005612:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005614:	4b10      	ldr	r3, [pc, #64]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a0f      	ldr	r2, [pc, #60]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 800561a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800561e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005620:	4b0d      	ldr	r3, [pc, #52]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	4a0c      	ldr	r2, [pc, #48]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 8005626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800562a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800562c:	f7fc f814 	bl	8001658 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005634:	f7fc f810 	bl	8001658 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e058      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005646:	4b04      	ldr	r3, [pc, #16]	@ (8005658 <HAL_RCC_OscConfig+0x784>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f0      	beq.n	8005634 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005652:	e050      	b.n	80056f6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e04f      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
 8005658:	40021000 	.word	0x40021000
 800565c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005660:	4b27      	ldr	r3, [pc, #156]	@ (8005700 <HAL_RCC_OscConfig+0x82c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d144      	bne.n	80056f6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800566c:	4b24      	ldr	r3, [pc, #144]	@ (8005700 <HAL_RCC_OscConfig+0x82c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a23      	ldr	r2, [pc, #140]	@ (8005700 <HAL_RCC_OscConfig+0x82c>)
 8005672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005676:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005678:	4b21      	ldr	r3, [pc, #132]	@ (8005700 <HAL_RCC_OscConfig+0x82c>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a20      	ldr	r2, [pc, #128]	@ (8005700 <HAL_RCC_OscConfig+0x82c>)
 800567e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005682:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005684:	f7fb ffe8 	bl	8001658 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800568c:	f7fb ffe4 	bl	8001658 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e02c      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800569e:	4b18      	ldr	r3, [pc, #96]	@ (8005700 <HAL_RCC_OscConfig+0x82c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x7b8>
 80056aa:	e024      	b.n	80056f6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	2b0c      	cmp	r3, #12
 80056b0:	d01f      	beq.n	80056f2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b2:	4b13      	ldr	r3, [pc, #76]	@ (8005700 <HAL_RCC_OscConfig+0x82c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a12      	ldr	r2, [pc, #72]	@ (8005700 <HAL_RCC_OscConfig+0x82c>)
 80056b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fb ffcb 	bl	8001658 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c6:	f7fb ffc7 	bl	8001658 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e00f      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d8:	4b09      	ldr	r3, [pc, #36]	@ (8005700 <HAL_RCC_OscConfig+0x82c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f0      	bne.n	80056c6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80056e4:	4b06      	ldr	r3, [pc, #24]	@ (8005700 <HAL_RCC_OscConfig+0x82c>)
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	4905      	ldr	r1, [pc, #20]	@ (8005700 <HAL_RCC_OscConfig+0x82c>)
 80056ea:	4b06      	ldr	r3, [pc, #24]	@ (8005704 <HAL_RCC_OscConfig+0x830>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	60cb      	str	r3, [r1, #12]
 80056f0:	e001      	b.n	80056f6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40021000 	.word	0x40021000
 8005704:	feeefffc 	.word	0xfeeefffc

08005708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e11d      	b.n	800595c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005720:	4b90      	ldr	r3, [pc, #576]	@ (8005964 <HAL_RCC_ClockConfig+0x25c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d910      	bls.n	8005750 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572e:	4b8d      	ldr	r3, [pc, #564]	@ (8005964 <HAL_RCC_ClockConfig+0x25c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f023 020f 	bic.w	r2, r3, #15
 8005736:	498b      	ldr	r1, [pc, #556]	@ (8005964 <HAL_RCC_ClockConfig+0x25c>)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	4313      	orrs	r3, r2
 800573c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800573e:	4b89      	ldr	r3, [pc, #548]	@ (8005964 <HAL_RCC_ClockConfig+0x25c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d001      	beq.n	8005750 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e105      	b.n	800595c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d010      	beq.n	800577e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	4b81      	ldr	r3, [pc, #516]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005768:	429a      	cmp	r2, r3
 800576a:	d908      	bls.n	800577e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800576c:	4b7e      	ldr	r3, [pc, #504]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	497b      	ldr	r1, [pc, #492]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 800577a:	4313      	orrs	r3, r2
 800577c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d079      	beq.n	800587e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d11e      	bne.n	80057d0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005792:	4b75      	ldr	r3, [pc, #468]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e0dc      	b.n	800595c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80057a2:	f000 fa09 	bl	8005bb8 <RCC_GetSysClockFreqFromPLLSource>
 80057a6:	4603      	mov	r3, r0
 80057a8:	4a70      	ldr	r2, [pc, #448]	@ (800596c <HAL_RCC_ClockConfig+0x264>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d946      	bls.n	800583c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80057ae:	4b6e      	ldr	r3, [pc, #440]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d140      	bne.n	800583c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057ba:	4b6b      	ldr	r3, [pc, #428]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057c2:	4a69      	ldr	r2, [pc, #420]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 80057c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057ca:	2380      	movs	r3, #128	@ 0x80
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e035      	b.n	800583c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d107      	bne.n	80057e8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057d8:	4b63      	ldr	r3, [pc, #396]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d115      	bne.n	8005810 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0b9      	b.n	800595c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d107      	bne.n	8005800 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057f0:	4b5d      	ldr	r3, [pc, #372]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d109      	bne.n	8005810 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0ad      	b.n	800595c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005800:	4b59      	ldr	r3, [pc, #356]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0a5      	b.n	800595c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005810:	f000 f8b4 	bl	800597c <HAL_RCC_GetSysClockFreq>
 8005814:	4603      	mov	r3, r0
 8005816:	4a55      	ldr	r2, [pc, #340]	@ (800596c <HAL_RCC_ClockConfig+0x264>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d90f      	bls.n	800583c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800581c:	4b52      	ldr	r3, [pc, #328]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005828:	4b4f      	ldr	r3, [pc, #316]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005830:	4a4d      	ldr	r2, [pc, #308]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 8005832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005836:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005838:	2380      	movs	r3, #128	@ 0x80
 800583a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800583c:	4b4a      	ldr	r3, [pc, #296]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f023 0203 	bic.w	r2, r3, #3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	4947      	ldr	r1, [pc, #284]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 800584a:	4313      	orrs	r3, r2
 800584c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800584e:	f7fb ff03 	bl	8001658 <HAL_GetTick>
 8005852:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005854:	e00a      	b.n	800586c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005856:	f7fb feff 	bl	8001658 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005864:	4293      	cmp	r3, r2
 8005866:	d901      	bls.n	800586c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e077      	b.n	800595c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586c:	4b3e      	ldr	r3, [pc, #248]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 020c 	and.w	r2, r3, #12
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	429a      	cmp	r2, r3
 800587c:	d1eb      	bne.n	8005856 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b80      	cmp	r3, #128	@ 0x80
 8005882:	d105      	bne.n	8005890 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005884:	4b38      	ldr	r3, [pc, #224]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	4a37      	ldr	r2, [pc, #220]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 800588a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800588e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d010      	beq.n	80058be <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	4b31      	ldr	r3, [pc, #196]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d208      	bcs.n	80058be <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	492b      	ldr	r1, [pc, #172]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058be:	4b29      	ldr	r3, [pc, #164]	@ (8005964 <HAL_RCC_ClockConfig+0x25c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d210      	bcs.n	80058ee <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058cc:	4b25      	ldr	r3, [pc, #148]	@ (8005964 <HAL_RCC_ClockConfig+0x25c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f023 020f 	bic.w	r2, r3, #15
 80058d4:	4923      	ldr	r1, [pc, #140]	@ (8005964 <HAL_RCC_ClockConfig+0x25c>)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	4313      	orrs	r3, r2
 80058da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058dc:	4b21      	ldr	r3, [pc, #132]	@ (8005964 <HAL_RCC_ClockConfig+0x25c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d001      	beq.n	80058ee <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e036      	b.n	800595c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	4918      	ldr	r1, [pc, #96]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 8005908:	4313      	orrs	r3, r2
 800590a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005918:	4b13      	ldr	r3, [pc, #76]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	4910      	ldr	r1, [pc, #64]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 8005928:	4313      	orrs	r3, r2
 800592a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800592c:	f000 f826 	bl	800597c <HAL_RCC_GetSysClockFreq>
 8005930:	4602      	mov	r2, r0
 8005932:	4b0d      	ldr	r3, [pc, #52]	@ (8005968 <HAL_RCC_ClockConfig+0x260>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	091b      	lsrs	r3, r3, #4
 8005938:	f003 030f 	and.w	r3, r3, #15
 800593c:	490c      	ldr	r1, [pc, #48]	@ (8005970 <HAL_RCC_ClockConfig+0x268>)
 800593e:	5ccb      	ldrb	r3, [r1, r3]
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	fa22 f303 	lsr.w	r3, r2, r3
 8005948:	4a0a      	ldr	r2, [pc, #40]	@ (8005974 <HAL_RCC_ClockConfig+0x26c>)
 800594a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800594c:	4b0a      	ldr	r3, [pc, #40]	@ (8005978 <HAL_RCC_ClockConfig+0x270>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4618      	mov	r0, r3
 8005952:	f7fb fe31 	bl	80015b8 <HAL_InitTick>
 8005956:	4603      	mov	r3, r0
 8005958:	73fb      	strb	r3, [r7, #15]

  return status;
 800595a:	7bfb      	ldrb	r3, [r7, #15]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40022000 	.word	0x40022000
 8005968:	40021000 	.word	0x40021000
 800596c:	04c4b400 	.word	0x04c4b400
 8005970:	0800bfc0 	.word	0x0800bfc0
 8005974:	20000000 	.word	0x20000000
 8005978:	20000004 	.word	0x20000004

0800597c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800597c:	b480      	push	{r7}
 800597e:	b089      	sub	sp, #36	@ 0x24
 8005980:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	2300      	movs	r3, #0
 8005988:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800598a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 030c 	and.w	r3, r3, #12
 8005992:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005994:	4b3b      	ldr	r3, [pc, #236]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <HAL_RCC_GetSysClockFreq+0x34>
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b0c      	cmp	r3, #12
 80059a8:	d121      	bne.n	80059ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d11e      	bne.n	80059ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80059b0:	4b34      	ldr	r3, [pc, #208]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d107      	bne.n	80059cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80059bc:	4b31      	ldr	r3, [pc, #196]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80059be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059c2:	0a1b      	lsrs	r3, r3, #8
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	61fb      	str	r3, [r7, #28]
 80059ca:	e005      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	091b      	lsrs	r3, r3, #4
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80059d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10d      	bne.n	8005a04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059ec:	e00a      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d102      	bne.n	80059fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059f4:	4b25      	ldr	r3, [pc, #148]	@ (8005a8c <HAL_RCC_GetSysClockFreq+0x110>)
 80059f6:	61bb      	str	r3, [r7, #24]
 80059f8:	e004      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d101      	bne.n	8005a04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a00:	4b23      	ldr	r3, [pc, #140]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	2b0c      	cmp	r3, #12
 8005a08:	d134      	bne.n	8005a74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d003      	beq.n	8005a22 <HAL_RCC_GetSysClockFreq+0xa6>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d003      	beq.n	8005a28 <HAL_RCC_GetSysClockFreq+0xac>
 8005a20:	e005      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a22:	4b1a      	ldr	r3, [pc, #104]	@ (8005a8c <HAL_RCC_GetSysClockFreq+0x110>)
 8005a24:	617b      	str	r3, [r7, #20]
      break;
 8005a26:	e005      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a28:	4b19      	ldr	r3, [pc, #100]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a2a:	617b      	str	r3, [r7, #20]
      break;
 8005a2c:	e002      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	617b      	str	r3, [r7, #20]
      break;
 8005a32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a34:	4b13      	ldr	r3, [pc, #76]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	091b      	lsrs	r3, r3, #4
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	3301      	adds	r3, #1
 8005a40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a42:	4b10      	ldr	r3, [pc, #64]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	0a1b      	lsrs	r3, r3, #8
 8005a48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	fb03 f202 	mul.w	r2, r3, r2
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	0e5b      	lsrs	r3, r3, #25
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	3301      	adds	r3, #1
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a74:	69bb      	ldr	r3, [r7, #24]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3724      	adds	r7, #36	@ 0x24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40021000 	.word	0x40021000
 8005a88:	0800bfd8 	.word	0x0800bfd8
 8005a8c:	00f42400 	.word	0x00f42400
 8005a90:	007a1200 	.word	0x007a1200

08005a94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a98:	4b03      	ldr	r3, [pc, #12]	@ (8005aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	20000000 	.word	0x20000000

08005aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ab0:	f7ff fff0 	bl	8005a94 <HAL_RCC_GetHCLKFreq>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	0a1b      	lsrs	r3, r3, #8
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	4904      	ldr	r1, [pc, #16]	@ (8005ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ac2:	5ccb      	ldrb	r3, [r1, r3]
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	0800bfd0 	.word	0x0800bfd0

08005ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005adc:	f7ff ffda 	bl	8005a94 <HAL_RCC_GetHCLKFreq>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	4b06      	ldr	r3, [pc, #24]	@ (8005afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	0adb      	lsrs	r3, r3, #11
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	4904      	ldr	r1, [pc, #16]	@ (8005b00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005aee:	5ccb      	ldrb	r3, [r1, r3]
 8005af0:	f003 031f 	and.w	r3, r3, #31
 8005af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40021000 	.word	0x40021000
 8005b00:	0800bfd0 	.word	0x0800bfd0

08005b04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b10:	4b27      	ldr	r3, [pc, #156]	@ (8005bb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b1c:	f7ff f8f6 	bl	8004d0c <HAL_PWREx_GetVoltageRange>
 8005b20:	6178      	str	r0, [r7, #20]
 8005b22:	e014      	b.n	8005b4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b24:	4b22      	ldr	r3, [pc, #136]	@ (8005bb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b28:	4a21      	ldr	r2, [pc, #132]	@ (8005bb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b30:	4b1f      	ldr	r3, [pc, #124]	@ (8005bb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005b3c:	f7ff f8e6 	bl	8004d0c <HAL_PWREx_GetVoltageRange>
 8005b40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005b42:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b46:	4a1a      	ldr	r2, [pc, #104]	@ (8005bb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b54:	d10b      	bne.n	8005b6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b80      	cmp	r3, #128	@ 0x80
 8005b5a:	d913      	bls.n	8005b84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005b60:	d902      	bls.n	8005b68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b62:	2302      	movs	r3, #2
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	e00d      	b.n	8005b84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b68:	2301      	movs	r3, #1
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	e00a      	b.n	8005b84 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b72:	d902      	bls.n	8005b7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005b74:	2302      	movs	r3, #2
 8005b76:	613b      	str	r3, [r7, #16]
 8005b78:	e004      	b.n	8005b84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b70      	cmp	r3, #112	@ 0x70
 8005b7e:	d101      	bne.n	8005b84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b80:	2301      	movs	r3, #1
 8005b82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b84:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f023 020f 	bic.w	r2, r3, #15
 8005b8c:	4909      	ldr	r1, [pc, #36]	@ (8005bb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b94:	4b07      	ldr	r3, [pc, #28]	@ (8005bb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d001      	beq.n	8005ba6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	40022000 	.word	0x40022000

08005bb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8005c74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d00b      	beq.n	8005be6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d825      	bhi.n	8005c20 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d008      	beq.n	8005bec <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d11f      	bne.n	8005c20 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005be0:	4b25      	ldr	r3, [pc, #148]	@ (8005c78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005be2:	613b      	str	r3, [r7, #16]
    break;
 8005be4:	e01f      	b.n	8005c26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005be6:	4b25      	ldr	r3, [pc, #148]	@ (8005c7c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005be8:	613b      	str	r3, [r7, #16]
    break;
 8005bea:	e01c      	b.n	8005c26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005bec:	4b21      	ldr	r3, [pc, #132]	@ (8005c74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d107      	bne.n	8005c08 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8005c74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bfe:	0a1b      	lsrs	r3, r3, #8
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	e005      	b.n	8005c14 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c08:	4b1a      	ldr	r3, [pc, #104]	@ (8005c74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	091b      	lsrs	r3, r3, #4
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005c14:	4a1a      	ldr	r2, [pc, #104]	@ (8005c80 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c1c:	613b      	str	r3, [r7, #16]
    break;
 8005c1e:	e002      	b.n	8005c26 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	613b      	str	r3, [r7, #16]
    break;
 8005c24:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c26:	4b13      	ldr	r3, [pc, #76]	@ (8005c74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	091b      	lsrs	r3, r3, #4
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	3301      	adds	r3, #1
 8005c32:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c34:	4b0f      	ldr	r3, [pc, #60]	@ (8005c74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	0a1b      	lsrs	r3, r3, #8
 8005c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	fb03 f202 	mul.w	r2, r3, r2
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c4c:	4b09      	ldr	r3, [pc, #36]	@ (8005c74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	0e5b      	lsrs	r3, r3, #25
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	3301      	adds	r3, #1
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005c66:	683b      	ldr	r3, [r7, #0]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	40021000 	.word	0x40021000
 8005c78:	00f42400 	.word	0x00f42400
 8005c7c:	007a1200 	.word	0x007a1200
 8005c80:	0800bfd8 	.word	0x0800bfd8

08005c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c90:	2300      	movs	r3, #0
 8005c92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d040      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ca4:	2b80      	cmp	r3, #128	@ 0x80
 8005ca6:	d02a      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ca8:	2b80      	cmp	r3, #128	@ 0x80
 8005caa:	d825      	bhi.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005cac:	2b60      	cmp	r3, #96	@ 0x60
 8005cae:	d026      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005cb0:	2b60      	cmp	r3, #96	@ 0x60
 8005cb2:	d821      	bhi.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005cb4:	2b40      	cmp	r3, #64	@ 0x40
 8005cb6:	d006      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005cb8:	2b40      	cmp	r3, #64	@ 0x40
 8005cba:	d81d      	bhi.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	d010      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005cc4:	e018      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005cc6:	4b89      	ldr	r3, [pc, #548]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	4a88      	ldr	r2, [pc, #544]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cd0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cd2:	e015      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fb02 	bl	80062e4 <RCCEx_PLLSAI1_Config>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ce4:	e00c      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3320      	adds	r3, #32
 8005cea:	2100      	movs	r1, #0
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fbed 	bl	80064cc <RCCEx_PLLSAI2_Config>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cf6:	e003      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	74fb      	strb	r3, [r7, #19]
      break;
 8005cfc:	e000      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d00:	7cfb      	ldrb	r3, [r7, #19]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10b      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d06:	4b79      	ldr	r3, [pc, #484]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d0c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d14:	4975      	ldr	r1, [pc, #468]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005d1c:	e001      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1e:	7cfb      	ldrb	r3, [r7, #19]
 8005d20:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d047      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d36:	d030      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d3c:	d82a      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d42:	d02a      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005d44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d48:	d824      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d4e:	d008      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d54:	d81e      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d5e:	d010      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005d60:	e018      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d62:	4b62      	ldr	r3, [pc, #392]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	4a61      	ldr	r2, [pc, #388]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d6c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d6e:	e015      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3304      	adds	r3, #4
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fab4 	bl	80062e4 <RCCEx_PLLSAI1_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d80:	e00c      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3320      	adds	r3, #32
 8005d86:	2100      	movs	r1, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fb9f 	bl	80064cc <RCCEx_PLLSAI2_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d92:	e003      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	74fb      	strb	r3, [r7, #19]
      break;
 8005d98:	e000      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d9c:	7cfb      	ldrb	r3, [r7, #19]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10b      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005da2:	4b52      	ldr	r3, [pc, #328]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005da8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db0:	494e      	ldr	r1, [pc, #312]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005db8:	e001      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dba:	7cfb      	ldrb	r3, [r7, #19]
 8005dbc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 809f 	beq.w	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005dd0:	4b46      	ldr	r3, [pc, #280]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00d      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de6:	4b41      	ldr	r3, [pc, #260]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dea:	4a40      	ldr	r2, [pc, #256]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005df2:	4b3e      	ldr	r3, [pc, #248]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dfa:	60bb      	str	r3, [r7, #8]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e02:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a3a      	ldr	r2, [pc, #232]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e0e:	f7fb fc23 	bl	8001658 <HAL_GetTick>
 8005e12:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e14:	e009      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e16:	f7fb fc1f 	bl	8001658 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d902      	bls.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	74fb      	strb	r3, [r7, #19]
        break;
 8005e28:	e005      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e2a:	4b31      	ldr	r3, [pc, #196]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0ef      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005e36:	7cfb      	ldrb	r3, [r7, #19]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d15b      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e46:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d01f      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d019      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e5a:	4b24      	ldr	r3, [pc, #144]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e66:	4b21      	ldr	r3, [pc, #132]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e76:	4b1d      	ldr	r3, [pc, #116]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e86:	4a19      	ldr	r2, [pc, #100]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d016      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fb fbde 	bl	8001658 <HAL_GetTick>
 8005e9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e9e:	e00b      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea0:	f7fb fbda 	bl	8001658 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d902      	bls.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	74fb      	strb	r3, [r7, #19]
            break;
 8005eb6:	e006      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0ec      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005ec6:	7cfb      	ldrb	r3, [r7, #19]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10c      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ecc:	4b07      	ldr	r3, [pc, #28]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005edc:	4903      	ldr	r1, [pc, #12]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ee6:	7cfb      	ldrb	r3, [r7, #19]
 8005ee8:	74bb      	strb	r3, [r7, #18]
 8005eea:	e005      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef4:	7cfb      	ldrb	r3, [r7, #19]
 8005ef6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ef8:	7c7b      	ldrb	r3, [r7, #17]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d105      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005efe:	4ba0      	ldr	r3, [pc, #640]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f02:	4a9f      	ldr	r2, [pc, #636]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f16:	4b9a      	ldr	r3, [pc, #616]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f1c:	f023 0203 	bic.w	r2, r3, #3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f24:	4996      	ldr	r1, [pc, #600]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f38:	4b91      	ldr	r3, [pc, #580]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3e:	f023 020c 	bic.w	r2, r3, #12
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f46:	498e      	ldr	r1, [pc, #568]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f5a:	4b89      	ldr	r3, [pc, #548]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f68:	4985      	ldr	r1, [pc, #532]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00a      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f7c:	4b80      	ldr	r3, [pc, #512]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f8a:	497d      	ldr	r1, [pc, #500]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0310 	and.w	r3, r3, #16
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f9e:	4b78      	ldr	r3, [pc, #480]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fac:	4974      	ldr	r1, [pc, #464]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fce:	496c      	ldr	r1, [pc, #432]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fe2:	4b67      	ldr	r3, [pc, #412]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ff0:	4963      	ldr	r1, [pc, #396]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006004:	4b5e      	ldr	r3, [pc, #376]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006012:	495b      	ldr	r1, [pc, #364]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006014:	4313      	orrs	r3, r2
 8006016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006026:	4b56      	ldr	r3, [pc, #344]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006034:	4952      	ldr	r1, [pc, #328]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006036:	4313      	orrs	r3, r2
 8006038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00a      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006048:	4b4d      	ldr	r3, [pc, #308]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800604a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006056:	494a      	ldr	r1, [pc, #296]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006058:	4313      	orrs	r3, r2
 800605a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800606a:	4b45      	ldr	r3, [pc, #276]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800606c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006070:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006078:	4941      	ldr	r1, [pc, #260]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800607a:	4313      	orrs	r3, r2
 800607c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800608c:	4b3c      	ldr	r3, [pc, #240]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800608e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006092:	f023 0203 	bic.w	r2, r3, #3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800609a:	4939      	ldr	r1, [pc, #228]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d028      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060ae:	4b34      	ldr	r3, [pc, #208]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060bc:	4930      	ldr	r1, [pc, #192]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060cc:	d106      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060ce:	4b2c      	ldr	r3, [pc, #176]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	4a2b      	ldr	r2, [pc, #172]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060d8:	60d3      	str	r3, [r2, #12]
 80060da:	e011      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060e4:	d10c      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	3304      	adds	r3, #4
 80060ea:	2101      	movs	r1, #1
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 f8f9 	bl	80062e4 <RCCEx_PLLSAI1_Config>
 80060f2:	4603      	mov	r3, r0
 80060f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060f6:	7cfb      	ldrb	r3, [r7, #19]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80060fc:	7cfb      	ldrb	r3, [r7, #19]
 80060fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d04d      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006110:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006114:	d108      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006116:	4b1a      	ldr	r3, [pc, #104]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006118:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800611c:	4a18      	ldr	r2, [pc, #96]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800611e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006122:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006126:	e012      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006128:	4b15      	ldr	r3, [pc, #84]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800612a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800612e:	4a14      	ldr	r2, [pc, #80]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006130:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006134:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006138:	4b11      	ldr	r3, [pc, #68]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800613e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006146:	490e      	ldr	r1, [pc, #56]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006152:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006156:	d106      	bne.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006158:	4b09      	ldr	r3, [pc, #36]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4a08      	ldr	r2, [pc, #32]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800615e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006162:	60d3      	str	r3, [r2, #12]
 8006164:	e020      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800616a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800616e:	d109      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006170:	4b03      	ldr	r3, [pc, #12]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	4a02      	ldr	r2, [pc, #8]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800617a:	60d3      	str	r3, [r2, #12]
 800617c:	e014      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800617e:	bf00      	nop
 8006180:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006188:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800618c:	d10c      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3304      	adds	r3, #4
 8006192:	2101      	movs	r1, #1
 8006194:	4618      	mov	r0, r3
 8006196:	f000 f8a5 	bl	80062e4 <RCCEx_PLLSAI1_Config>
 800619a:	4603      	mov	r3, r0
 800619c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800619e:	7cfb      	ldrb	r3, [r7, #19]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80061a4:	7cfb      	ldrb	r3, [r7, #19]
 80061a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d028      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061b4:	4b4a      	ldr	r3, [pc, #296]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061c2:	4947      	ldr	r1, [pc, #284]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061d2:	d106      	bne.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061d4:	4b42      	ldr	r3, [pc, #264]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	4a41      	ldr	r2, [pc, #260]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061de:	60d3      	str	r3, [r2, #12]
 80061e0:	e011      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061ea:	d10c      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	2101      	movs	r1, #1
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 f876 	bl	80062e4 <RCCEx_PLLSAI1_Config>
 80061f8:	4603      	mov	r3, r0
 80061fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061fc:	7cfb      	ldrb	r3, [r7, #19]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006202:	7cfb      	ldrb	r3, [r7, #19]
 8006204:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01e      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006212:	4b33      	ldr	r3, [pc, #204]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006218:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006222:	492f      	ldr	r1, [pc, #188]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006230:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006234:	d10c      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3304      	adds	r3, #4
 800623a:	2102      	movs	r1, #2
 800623c:	4618      	mov	r0, r3
 800623e:	f000 f851 	bl	80062e4 <RCCEx_PLLSAI1_Config>
 8006242:	4603      	mov	r3, r0
 8006244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006246:	7cfb      	ldrb	r3, [r7, #19]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800624c:	7cfb      	ldrb	r3, [r7, #19]
 800624e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800625c:	4b20      	ldr	r3, [pc, #128]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800625e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006262:	f023 0204 	bic.w	r2, r3, #4
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800626c:	491c      	ldr	r1, [pc, #112]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800626e:	4313      	orrs	r3, r2
 8006270:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00b      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006280:	4b17      	ldr	r3, [pc, #92]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006286:	f023 0218 	bic.w	r2, r3, #24
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006290:	4913      	ldr	r1, [pc, #76]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d017      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80062a4:	4b0e      	ldr	r3, [pc, #56]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062b4:	490a      	ldr	r1, [pc, #40]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062c6:	d105      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062c8:	4b05      	ldr	r3, [pc, #20]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	4a04      	ldr	r2, [pc, #16]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80062d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40021000 	.word	0x40021000

080062e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062f2:	4b72      	ldr	r3, [pc, #456]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00e      	beq.n	800631c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80062fe:	4b6f      	ldr	r3, [pc, #444]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f003 0203 	and.w	r2, r3, #3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d103      	bne.n	8006316 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
       ||
 8006312:	2b00      	cmp	r3, #0
 8006314:	d142      	bne.n	800639c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	73fb      	strb	r3, [r7, #15]
 800631a:	e03f      	b.n	800639c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b03      	cmp	r3, #3
 8006322:	d018      	beq.n	8006356 <RCCEx_PLLSAI1_Config+0x72>
 8006324:	2b03      	cmp	r3, #3
 8006326:	d825      	bhi.n	8006374 <RCCEx_PLLSAI1_Config+0x90>
 8006328:	2b01      	cmp	r3, #1
 800632a:	d002      	beq.n	8006332 <RCCEx_PLLSAI1_Config+0x4e>
 800632c:	2b02      	cmp	r3, #2
 800632e:	d009      	beq.n	8006344 <RCCEx_PLLSAI1_Config+0x60>
 8006330:	e020      	b.n	8006374 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006332:	4b62      	ldr	r3, [pc, #392]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d11d      	bne.n	800637a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006342:	e01a      	b.n	800637a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006344:	4b5d      	ldr	r3, [pc, #372]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800634c:	2b00      	cmp	r3, #0
 800634e:	d116      	bne.n	800637e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006354:	e013      	b.n	800637e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006356:	4b59      	ldr	r3, [pc, #356]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10f      	bne.n	8006382 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006362:	4b56      	ldr	r3, [pc, #344]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d109      	bne.n	8006382 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006372:	e006      	b.n	8006382 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	73fb      	strb	r3, [r7, #15]
      break;
 8006378:	e004      	b.n	8006384 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800637a:	bf00      	nop
 800637c:	e002      	b.n	8006384 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800637e:	bf00      	nop
 8006380:	e000      	b.n	8006384 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006382:	bf00      	nop
    }

    if(status == HAL_OK)
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d108      	bne.n	800639c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800638a:	4b4c      	ldr	r3, [pc, #304]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f023 0203 	bic.w	r2, r3, #3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4949      	ldr	r1, [pc, #292]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006398:	4313      	orrs	r3, r2
 800639a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f040 8086 	bne.w	80064b0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80063a4:	4b45      	ldr	r3, [pc, #276]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a44      	ldr	r2, [pc, #272]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80063aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b0:	f7fb f952 	bl	8001658 <HAL_GetTick>
 80063b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063b6:	e009      	b.n	80063cc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063b8:	f7fb f94e 	bl	8001658 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d902      	bls.n	80063cc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	73fb      	strb	r3, [r7, #15]
        break;
 80063ca:	e005      	b.n	80063d8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063cc:	4b3b      	ldr	r3, [pc, #236]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1ef      	bne.n	80063b8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d168      	bne.n	80064b0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d113      	bne.n	800640c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063e4:	4b35      	ldr	r3, [pc, #212]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80063e6:	691a      	ldr	r2, [r3, #16]
 80063e8:	4b35      	ldr	r3, [pc, #212]	@ (80064c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6892      	ldr	r2, [r2, #8]
 80063f0:	0211      	lsls	r1, r2, #8
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	68d2      	ldr	r2, [r2, #12]
 80063f6:	06d2      	lsls	r2, r2, #27
 80063f8:	4311      	orrs	r1, r2
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6852      	ldr	r2, [r2, #4]
 80063fe:	3a01      	subs	r2, #1
 8006400:	0112      	lsls	r2, r2, #4
 8006402:	430a      	orrs	r2, r1
 8006404:	492d      	ldr	r1, [pc, #180]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006406:	4313      	orrs	r3, r2
 8006408:	610b      	str	r3, [r1, #16]
 800640a:	e02d      	b.n	8006468 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d115      	bne.n	800643e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006412:	4b2a      	ldr	r3, [pc, #168]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006414:	691a      	ldr	r2, [r3, #16]
 8006416:	4b2b      	ldr	r3, [pc, #172]	@ (80064c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006418:	4013      	ands	r3, r2
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6892      	ldr	r2, [r2, #8]
 800641e:	0211      	lsls	r1, r2, #8
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6912      	ldr	r2, [r2, #16]
 8006424:	0852      	lsrs	r2, r2, #1
 8006426:	3a01      	subs	r2, #1
 8006428:	0552      	lsls	r2, r2, #21
 800642a:	4311      	orrs	r1, r2
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6852      	ldr	r2, [r2, #4]
 8006430:	3a01      	subs	r2, #1
 8006432:	0112      	lsls	r2, r2, #4
 8006434:	430a      	orrs	r2, r1
 8006436:	4921      	ldr	r1, [pc, #132]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006438:	4313      	orrs	r3, r2
 800643a:	610b      	str	r3, [r1, #16]
 800643c:	e014      	b.n	8006468 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800643e:	4b1f      	ldr	r3, [pc, #124]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006440:	691a      	ldr	r2, [r3, #16]
 8006442:	4b21      	ldr	r3, [pc, #132]	@ (80064c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006444:	4013      	ands	r3, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6892      	ldr	r2, [r2, #8]
 800644a:	0211      	lsls	r1, r2, #8
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6952      	ldr	r2, [r2, #20]
 8006450:	0852      	lsrs	r2, r2, #1
 8006452:	3a01      	subs	r2, #1
 8006454:	0652      	lsls	r2, r2, #25
 8006456:	4311      	orrs	r1, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6852      	ldr	r2, [r2, #4]
 800645c:	3a01      	subs	r2, #1
 800645e:	0112      	lsls	r2, r2, #4
 8006460:	430a      	orrs	r2, r1
 8006462:	4916      	ldr	r1, [pc, #88]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006464:	4313      	orrs	r3, r2
 8006466:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006468:	4b14      	ldr	r3, [pc, #80]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a13      	ldr	r2, [pc, #76]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800646e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006472:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006474:	f7fb f8f0 	bl	8001658 <HAL_GetTick>
 8006478:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800647a:	e009      	b.n	8006490 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800647c:	f7fb f8ec 	bl	8001658 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d902      	bls.n	8006490 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	73fb      	strb	r3, [r7, #15]
          break;
 800648e:	e005      	b.n	800649c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006490:	4b0a      	ldr	r3, [pc, #40]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0ef      	beq.n	800647c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80064a2:	4b06      	ldr	r3, [pc, #24]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80064a4:	691a      	ldr	r2, [r3, #16]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	4904      	ldr	r1, [pc, #16]	@ (80064bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	40021000 	.word	0x40021000
 80064c0:	07ff800f 	.word	0x07ff800f
 80064c4:	ff9f800f 	.word	0xff9f800f
 80064c8:	f9ff800f 	.word	0xf9ff800f

080064cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064da:	4b72      	ldr	r3, [pc, #456]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00e      	beq.n	8006504 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80064e6:	4b6f      	ldr	r3, [pc, #444]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f003 0203 	and.w	r2, r3, #3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d103      	bne.n	80064fe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
       ||
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d142      	bne.n	8006584 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	73fb      	strb	r3, [r7, #15]
 8006502:	e03f      	b.n	8006584 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b03      	cmp	r3, #3
 800650a:	d018      	beq.n	800653e <RCCEx_PLLSAI2_Config+0x72>
 800650c:	2b03      	cmp	r3, #3
 800650e:	d825      	bhi.n	800655c <RCCEx_PLLSAI2_Config+0x90>
 8006510:	2b01      	cmp	r3, #1
 8006512:	d002      	beq.n	800651a <RCCEx_PLLSAI2_Config+0x4e>
 8006514:	2b02      	cmp	r3, #2
 8006516:	d009      	beq.n	800652c <RCCEx_PLLSAI2_Config+0x60>
 8006518:	e020      	b.n	800655c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800651a:	4b62      	ldr	r3, [pc, #392]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d11d      	bne.n	8006562 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800652a:	e01a      	b.n	8006562 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800652c:	4b5d      	ldr	r3, [pc, #372]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006534:	2b00      	cmp	r3, #0
 8006536:	d116      	bne.n	8006566 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800653c:	e013      	b.n	8006566 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800653e:	4b59      	ldr	r3, [pc, #356]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10f      	bne.n	800656a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800654a:	4b56      	ldr	r3, [pc, #344]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d109      	bne.n	800656a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800655a:	e006      	b.n	800656a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	73fb      	strb	r3, [r7, #15]
      break;
 8006560:	e004      	b.n	800656c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006562:	bf00      	nop
 8006564:	e002      	b.n	800656c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006566:	bf00      	nop
 8006568:	e000      	b.n	800656c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800656a:	bf00      	nop
    }

    if(status == HAL_OK)
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d108      	bne.n	8006584 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006572:	4b4c      	ldr	r3, [pc, #304]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f023 0203 	bic.w	r2, r3, #3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4949      	ldr	r1, [pc, #292]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006580:	4313      	orrs	r3, r2
 8006582:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	2b00      	cmp	r3, #0
 8006588:	f040 8086 	bne.w	8006698 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800658c:	4b45      	ldr	r3, [pc, #276]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a44      	ldr	r2, [pc, #272]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006598:	f7fb f85e 	bl	8001658 <HAL_GetTick>
 800659c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800659e:	e009      	b.n	80065b4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065a0:	f7fb f85a 	bl	8001658 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d902      	bls.n	80065b4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	73fb      	strb	r3, [r7, #15]
        break;
 80065b2:	e005      	b.n	80065c0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065b4:	4b3b      	ldr	r3, [pc, #236]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1ef      	bne.n	80065a0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d168      	bne.n	8006698 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d113      	bne.n	80065f4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065cc:	4b35      	ldr	r3, [pc, #212]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ce:	695a      	ldr	r2, [r3, #20]
 80065d0:	4b35      	ldr	r3, [pc, #212]	@ (80066a8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80065d2:	4013      	ands	r3, r2
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6892      	ldr	r2, [r2, #8]
 80065d8:	0211      	lsls	r1, r2, #8
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	68d2      	ldr	r2, [r2, #12]
 80065de:	06d2      	lsls	r2, r2, #27
 80065e0:	4311      	orrs	r1, r2
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6852      	ldr	r2, [r2, #4]
 80065e6:	3a01      	subs	r2, #1
 80065e8:	0112      	lsls	r2, r2, #4
 80065ea:	430a      	orrs	r2, r1
 80065ec:	492d      	ldr	r1, [pc, #180]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	614b      	str	r3, [r1, #20]
 80065f2:	e02d      	b.n	8006650 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d115      	bne.n	8006626 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065fa:	4b2a      	ldr	r3, [pc, #168]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065fc:	695a      	ldr	r2, [r3, #20]
 80065fe:	4b2b      	ldr	r3, [pc, #172]	@ (80066ac <RCCEx_PLLSAI2_Config+0x1e0>)
 8006600:	4013      	ands	r3, r2
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6892      	ldr	r2, [r2, #8]
 8006606:	0211      	lsls	r1, r2, #8
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6912      	ldr	r2, [r2, #16]
 800660c:	0852      	lsrs	r2, r2, #1
 800660e:	3a01      	subs	r2, #1
 8006610:	0552      	lsls	r2, r2, #21
 8006612:	4311      	orrs	r1, r2
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6852      	ldr	r2, [r2, #4]
 8006618:	3a01      	subs	r2, #1
 800661a:	0112      	lsls	r2, r2, #4
 800661c:	430a      	orrs	r2, r1
 800661e:	4921      	ldr	r1, [pc, #132]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006620:	4313      	orrs	r3, r2
 8006622:	614b      	str	r3, [r1, #20]
 8006624:	e014      	b.n	8006650 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006626:	4b1f      	ldr	r3, [pc, #124]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	4b21      	ldr	r3, [pc, #132]	@ (80066b0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800662c:	4013      	ands	r3, r2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6892      	ldr	r2, [r2, #8]
 8006632:	0211      	lsls	r1, r2, #8
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6952      	ldr	r2, [r2, #20]
 8006638:	0852      	lsrs	r2, r2, #1
 800663a:	3a01      	subs	r2, #1
 800663c:	0652      	lsls	r2, r2, #25
 800663e:	4311      	orrs	r1, r2
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6852      	ldr	r2, [r2, #4]
 8006644:	3a01      	subs	r2, #1
 8006646:	0112      	lsls	r2, r2, #4
 8006648:	430a      	orrs	r2, r1
 800664a:	4916      	ldr	r1, [pc, #88]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800664c:	4313      	orrs	r3, r2
 800664e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006650:	4b14      	ldr	r3, [pc, #80]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a13      	ldr	r2, [pc, #76]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800665a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800665c:	f7fa fffc 	bl	8001658 <HAL_GetTick>
 8006660:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006662:	e009      	b.n	8006678 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006664:	f7fa fff8 	bl	8001658 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d902      	bls.n	8006678 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	73fb      	strb	r3, [r7, #15]
          break;
 8006676:	e005      	b.n	8006684 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006678:	4b0a      	ldr	r3, [pc, #40]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0ef      	beq.n	8006664 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800668a:	4b06      	ldr	r3, [pc, #24]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	4904      	ldr	r1, [pc, #16]	@ (80066a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006694:	4313      	orrs	r3, r2
 8006696:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	40021000 	.word	0x40021000
 80066a8:	07ff800f 	.word	0x07ff800f
 80066ac:	ff9f800f 	.word	0xff9f800f
 80066b0:	f9ff800f 	.word	0xf9ff800f

080066b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e049      	b.n	800675a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d106      	bne.n	80066e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fa fd94 	bl	8001208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4619      	mov	r1, r3
 80066f2:	4610      	mov	r0, r2
 80066f4:	f000 fb02 	bl	8006cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b01      	cmp	r3, #1
 8006776:	d001      	beq.n	800677c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e047      	b.n	800680c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a23      	ldr	r2, [pc, #140]	@ (8006818 <HAL_TIM_Base_Start+0xb4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d01d      	beq.n	80067ca <HAL_TIM_Base_Start+0x66>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006796:	d018      	beq.n	80067ca <HAL_TIM_Base_Start+0x66>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a1f      	ldr	r2, [pc, #124]	@ (800681c <HAL_TIM_Base_Start+0xb8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d013      	beq.n	80067ca <HAL_TIM_Base_Start+0x66>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006820 <HAL_TIM_Base_Start+0xbc>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00e      	beq.n	80067ca <HAL_TIM_Base_Start+0x66>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006824 <HAL_TIM_Base_Start+0xc0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d009      	beq.n	80067ca <HAL_TIM_Base_Start+0x66>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006828 <HAL_TIM_Base_Start+0xc4>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d004      	beq.n	80067ca <HAL_TIM_Base_Start+0x66>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a19      	ldr	r2, [pc, #100]	@ (800682c <HAL_TIM_Base_Start+0xc8>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d115      	bne.n	80067f6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	4b17      	ldr	r3, [pc, #92]	@ (8006830 <HAL_TIM_Base_Start+0xcc>)
 80067d2:	4013      	ands	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b06      	cmp	r3, #6
 80067da:	d015      	beq.n	8006808 <HAL_TIM_Base_Start+0xa4>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e2:	d011      	beq.n	8006808 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0201 	orr.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f4:	e008      	b.n	8006808 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0201 	orr.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	e000      	b.n	800680a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006808:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	40012c00 	.word	0x40012c00
 800681c:	40000400 	.word	0x40000400
 8006820:	40000800 	.word	0x40000800
 8006824:	40000c00 	.word	0x40000c00
 8006828:	40013400 	.word	0x40013400
 800682c:	40014000 	.word	0x40014000
 8006830:	00010007 	.word	0x00010007

08006834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b01      	cmp	r3, #1
 8006846:	d001      	beq.n	800684c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e04f      	b.n	80068ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0201 	orr.w	r2, r2, #1
 8006862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a23      	ldr	r2, [pc, #140]	@ (80068f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d01d      	beq.n	80068aa <HAL_TIM_Base_Start_IT+0x76>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006876:	d018      	beq.n	80068aa <HAL_TIM_Base_Start_IT+0x76>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a1f      	ldr	r2, [pc, #124]	@ (80068fc <HAL_TIM_Base_Start_IT+0xc8>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d013      	beq.n	80068aa <HAL_TIM_Base_Start_IT+0x76>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a1e      	ldr	r2, [pc, #120]	@ (8006900 <HAL_TIM_Base_Start_IT+0xcc>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00e      	beq.n	80068aa <HAL_TIM_Base_Start_IT+0x76>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a1c      	ldr	r2, [pc, #112]	@ (8006904 <HAL_TIM_Base_Start_IT+0xd0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d009      	beq.n	80068aa <HAL_TIM_Base_Start_IT+0x76>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a1b      	ldr	r2, [pc, #108]	@ (8006908 <HAL_TIM_Base_Start_IT+0xd4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d004      	beq.n	80068aa <HAL_TIM_Base_Start_IT+0x76>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a19      	ldr	r2, [pc, #100]	@ (800690c <HAL_TIM_Base_Start_IT+0xd8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d115      	bne.n	80068d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	4b17      	ldr	r3, [pc, #92]	@ (8006910 <HAL_TIM_Base_Start_IT+0xdc>)
 80068b2:	4013      	ands	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b06      	cmp	r3, #6
 80068ba:	d015      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0xb4>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c2:	d011      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0201 	orr.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d4:	e008      	b.n	80068e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f042 0201 	orr.w	r2, r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	e000      	b.n	80068ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40012c00 	.word	0x40012c00
 80068fc:	40000400 	.word	0x40000400
 8006900:	40000800 	.word	0x40000800
 8006904:	40000c00 	.word	0x40000c00
 8006908:	40013400 	.word	0x40013400
 800690c:	40014000 	.word	0x40014000
 8006910:	00010007 	.word	0x00010007

08006914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d020      	beq.n	8006978 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01b      	beq.n	8006978 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0202 	mvn.w	r2, #2
 8006948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f9ad 	bl	8006cbe <HAL_TIM_IC_CaptureCallback>
 8006964:	e005      	b.n	8006972 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f99f 	bl	8006caa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f9b0 	bl	8006cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	d020      	beq.n	80069c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01b      	beq.n	80069c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0204 	mvn.w	r2, #4
 8006994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f987 	bl	8006cbe <HAL_TIM_IC_CaptureCallback>
 80069b0:	e005      	b.n	80069be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f979 	bl	8006caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f98a 	bl	8006cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d020      	beq.n	8006a10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01b      	beq.n	8006a10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0208 	mvn.w	r2, #8
 80069e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2204      	movs	r2, #4
 80069e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f961 	bl	8006cbe <HAL_TIM_IC_CaptureCallback>
 80069fc:	e005      	b.n	8006a0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f953 	bl	8006caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f964 	bl	8006cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f003 0310 	and.w	r3, r3, #16
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d020      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f003 0310 	and.w	r3, r3, #16
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01b      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0210 	mvn.w	r2, #16
 8006a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2208      	movs	r2, #8
 8006a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f93b 	bl	8006cbe <HAL_TIM_IC_CaptureCallback>
 8006a48:	e005      	b.n	8006a56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f92d 	bl	8006caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f93e 	bl	8006cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00c      	beq.n	8006a80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f06f 0201 	mvn.w	r2, #1
 8006a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fa f872 	bl	8000b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00c      	beq.n	8006aa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d007      	beq.n	8006aa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 faf2 	bl	8007088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00c      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 faea 	bl	800709c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00c      	beq.n	8006aec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f8fd 	bl	8006ce6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00c      	beq.n	8006b10 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d007      	beq.n	8006b10 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0220 	mvn.w	r2, #32
 8006b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fab2 	bl	8007074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b10:	bf00      	nop
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <HAL_TIM_ConfigClockSource+0x1c>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e0b6      	b.n	8006ca2 <HAL_TIM_ConfigClockSource+0x18a>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b70:	d03e      	beq.n	8006bf0 <HAL_TIM_ConfigClockSource+0xd8>
 8006b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b76:	f200 8087 	bhi.w	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b7e:	f000 8086 	beq.w	8006c8e <HAL_TIM_ConfigClockSource+0x176>
 8006b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b86:	d87f      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006b88:	2b70      	cmp	r3, #112	@ 0x70
 8006b8a:	d01a      	beq.n	8006bc2 <HAL_TIM_ConfigClockSource+0xaa>
 8006b8c:	2b70      	cmp	r3, #112	@ 0x70
 8006b8e:	d87b      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006b90:	2b60      	cmp	r3, #96	@ 0x60
 8006b92:	d050      	beq.n	8006c36 <HAL_TIM_ConfigClockSource+0x11e>
 8006b94:	2b60      	cmp	r3, #96	@ 0x60
 8006b96:	d877      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006b98:	2b50      	cmp	r3, #80	@ 0x50
 8006b9a:	d03c      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0xfe>
 8006b9c:	2b50      	cmp	r3, #80	@ 0x50
 8006b9e:	d873      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006ba0:	2b40      	cmp	r3, #64	@ 0x40
 8006ba2:	d058      	beq.n	8006c56 <HAL_TIM_ConfigClockSource+0x13e>
 8006ba4:	2b40      	cmp	r3, #64	@ 0x40
 8006ba6:	d86f      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006ba8:	2b30      	cmp	r3, #48	@ 0x30
 8006baa:	d064      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x15e>
 8006bac:	2b30      	cmp	r3, #48	@ 0x30
 8006bae:	d86b      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006bb0:	2b20      	cmp	r3, #32
 8006bb2:	d060      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x15e>
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	d867      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d05c      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x15e>
 8006bbc:	2b10      	cmp	r3, #16
 8006bbe:	d05a      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x15e>
 8006bc0:	e062      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bd2:	f000 f9a7 	bl	8006f24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006be4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	609a      	str	r2, [r3, #8]
      break;
 8006bee:	e04f      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c00:	f000 f990 	bl	8006f24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c12:	609a      	str	r2, [r3, #8]
      break;
 8006c14:	e03c      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c22:	461a      	mov	r2, r3
 8006c24:	f000 f904 	bl	8006e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2150      	movs	r1, #80	@ 0x50
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 f95d 	bl	8006eee <TIM_ITRx_SetConfig>
      break;
 8006c34:	e02c      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c42:	461a      	mov	r2, r3
 8006c44:	f000 f923 	bl	8006e8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2160      	movs	r1, #96	@ 0x60
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 f94d 	bl	8006eee <TIM_ITRx_SetConfig>
      break;
 8006c54:	e01c      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c62:	461a      	mov	r2, r3
 8006c64:	f000 f8e4 	bl	8006e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2140      	movs	r1, #64	@ 0x40
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 f93d 	bl	8006eee <TIM_ITRx_SetConfig>
      break;
 8006c74:	e00c      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4610      	mov	r0, r2
 8006c82:	f000 f934 	bl	8006eee <TIM_ITRx_SetConfig>
      break;
 8006c86:	e003      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c8c:	e000      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006c8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
	...

08006cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a40      	ldr	r2, [pc, #256]	@ (8006e10 <TIM_Base_SetConfig+0x114>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d013      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d1a:	d00f      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a3d      	ldr	r2, [pc, #244]	@ (8006e14 <TIM_Base_SetConfig+0x118>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00b      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a3c      	ldr	r2, [pc, #240]	@ (8006e18 <TIM_Base_SetConfig+0x11c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d007      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a3b      	ldr	r2, [pc, #236]	@ (8006e1c <TIM_Base_SetConfig+0x120>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d003      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a3a      	ldr	r2, [pc, #232]	@ (8006e20 <TIM_Base_SetConfig+0x124>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d108      	bne.n	8006d4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a2f      	ldr	r2, [pc, #188]	@ (8006e10 <TIM_Base_SetConfig+0x114>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d01f      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d5c:	d01b      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a2c      	ldr	r2, [pc, #176]	@ (8006e14 <TIM_Base_SetConfig+0x118>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d017      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a2b      	ldr	r2, [pc, #172]	@ (8006e18 <TIM_Base_SetConfig+0x11c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d013      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a2a      	ldr	r2, [pc, #168]	@ (8006e1c <TIM_Base_SetConfig+0x120>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00f      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a29      	ldr	r2, [pc, #164]	@ (8006e20 <TIM_Base_SetConfig+0x124>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00b      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a28      	ldr	r2, [pc, #160]	@ (8006e24 <TIM_Base_SetConfig+0x128>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d007      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a27      	ldr	r2, [pc, #156]	@ (8006e28 <TIM_Base_SetConfig+0x12c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d003      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a26      	ldr	r2, [pc, #152]	@ (8006e2c <TIM_Base_SetConfig+0x130>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d108      	bne.n	8006da8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a10      	ldr	r2, [pc, #64]	@ (8006e10 <TIM_Base_SetConfig+0x114>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00f      	beq.n	8006df4 <TIM_Base_SetConfig+0xf8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a12      	ldr	r2, [pc, #72]	@ (8006e20 <TIM_Base_SetConfig+0x124>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00b      	beq.n	8006df4 <TIM_Base_SetConfig+0xf8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a11      	ldr	r2, [pc, #68]	@ (8006e24 <TIM_Base_SetConfig+0x128>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d007      	beq.n	8006df4 <TIM_Base_SetConfig+0xf8>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a10      	ldr	r2, [pc, #64]	@ (8006e28 <TIM_Base_SetConfig+0x12c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d003      	beq.n	8006df4 <TIM_Base_SetConfig+0xf8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a0f      	ldr	r2, [pc, #60]	@ (8006e2c <TIM_Base_SetConfig+0x130>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d103      	bne.n	8006dfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	615a      	str	r2, [r3, #20]
}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40012c00 	.word	0x40012c00
 8006e14:	40000400 	.word	0x40000400
 8006e18:	40000800 	.word	0x40000800
 8006e1c:	40000c00 	.word	0x40000c00
 8006e20:	40013400 	.word	0x40013400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800

08006e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	f023 0201 	bic.w	r2, r3, #1
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	011b      	lsls	r3, r3, #4
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f023 030a 	bic.w	r3, r3, #10
 8006e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	621a      	str	r2, [r3, #32]
}
 8006e82:	bf00      	nop
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b087      	sub	sp, #28
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	f023 0210 	bic.w	r2, r3, #16
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	031b      	lsls	r3, r3, #12
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006eca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	011b      	lsls	r3, r3, #4
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	621a      	str	r2, [r3, #32]
}
 8006ee2:	bf00      	nop
 8006ee4:	371c      	adds	r7, #28
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	f043 0307 	orr.w	r3, r3, #7
 8006f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	609a      	str	r2, [r3, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	021a      	lsls	r2, r3, #8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	431a      	orrs	r2, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	609a      	str	r2, [r3, #8]
}
 8006f58:	bf00      	nop
 8006f5a:	371c      	adds	r7, #28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e068      	b.n	800704e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800705c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d004      	beq.n	8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a2d      	ldr	r2, [pc, #180]	@ (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d108      	bne.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006fb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800705c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d01d      	beq.n	8007022 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fee:	d018      	beq.n	8007022 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8007064 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d013      	beq.n	8007022 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8007068 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00e      	beq.n	8007022 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a18      	ldr	r2, [pc, #96]	@ (800706c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d009      	beq.n	8007022 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a13      	ldr	r2, [pc, #76]	@ (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d004      	beq.n	8007022 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a14      	ldr	r2, [pc, #80]	@ (8007070 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d10c      	bne.n	800703c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	4313      	orrs	r3, r2
 8007032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	40012c00 	.word	0x40012c00
 8007060:	40013400 	.word	0x40013400
 8007064:	40000400 	.word	0x40000400
 8007068:	40000800 	.word	0x40000800
 800706c:	40000c00 	.word	0x40000c00
 8007070:	40014000 	.word	0x40014000

08007074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e042      	b.n	8007148 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d106      	bne.n	80070da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7fa f987 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2224      	movs	r2, #36	@ 0x24
 80070de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f022 0201 	bic.w	r2, r2, #1
 80070f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fb24 	bl	8007748 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f825 	bl	8007150 <UART_SetConfig>
 8007106:	4603      	mov	r3, r0
 8007108:	2b01      	cmp	r3, #1
 800710a:	d101      	bne.n	8007110 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e01b      	b.n	8007148 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800711e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	689a      	ldr	r2, [r3, #8]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800712e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0201 	orr.w	r2, r2, #1
 800713e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fba3 	bl	800788c <UART_CheckIdleState>
 8007146:	4603      	mov	r3, r0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007154:	b08c      	sub	sp, #48	@ 0x30
 8007156:	af00      	add	r7, sp, #0
 8007158:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	431a      	orrs	r2, r3
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	431a      	orrs	r2, r3
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	4313      	orrs	r3, r2
 8007176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	4baa      	ldr	r3, [pc, #680]	@ (8007428 <UART_SetConfig+0x2d8>)
 8007180:	4013      	ands	r3, r2
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	6812      	ldr	r2, [r2, #0]
 8007186:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007188:	430b      	orrs	r3, r1
 800718a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a9f      	ldr	r2, [pc, #636]	@ (800742c <UART_SetConfig+0x2dc>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d004      	beq.n	80071bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071b8:	4313      	orrs	r3, r2
 80071ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80071c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071d0:	430b      	orrs	r3, r1
 80071d2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071da:	f023 010f 	bic.w	r1, r3, #15
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a90      	ldr	r2, [pc, #576]	@ (8007430 <UART_SetConfig+0x2e0>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d125      	bne.n	8007240 <UART_SetConfig+0xf0>
 80071f4:	4b8f      	ldr	r3, [pc, #572]	@ (8007434 <UART_SetConfig+0x2e4>)
 80071f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d81a      	bhi.n	8007238 <UART_SetConfig+0xe8>
 8007202:	a201      	add	r2, pc, #4	@ (adr r2, 8007208 <UART_SetConfig+0xb8>)
 8007204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007208:	08007219 	.word	0x08007219
 800720c:	08007229 	.word	0x08007229
 8007210:	08007221 	.word	0x08007221
 8007214:	08007231 	.word	0x08007231
 8007218:	2301      	movs	r3, #1
 800721a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800721e:	e116      	b.n	800744e <UART_SetConfig+0x2fe>
 8007220:	2302      	movs	r3, #2
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007226:	e112      	b.n	800744e <UART_SetConfig+0x2fe>
 8007228:	2304      	movs	r3, #4
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800722e:	e10e      	b.n	800744e <UART_SetConfig+0x2fe>
 8007230:	2308      	movs	r3, #8
 8007232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007236:	e10a      	b.n	800744e <UART_SetConfig+0x2fe>
 8007238:	2310      	movs	r3, #16
 800723a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800723e:	e106      	b.n	800744e <UART_SetConfig+0x2fe>
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a7c      	ldr	r2, [pc, #496]	@ (8007438 <UART_SetConfig+0x2e8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d138      	bne.n	80072bc <UART_SetConfig+0x16c>
 800724a:	4b7a      	ldr	r3, [pc, #488]	@ (8007434 <UART_SetConfig+0x2e4>)
 800724c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007250:	f003 030c 	and.w	r3, r3, #12
 8007254:	2b0c      	cmp	r3, #12
 8007256:	d82d      	bhi.n	80072b4 <UART_SetConfig+0x164>
 8007258:	a201      	add	r2, pc, #4	@ (adr r2, 8007260 <UART_SetConfig+0x110>)
 800725a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725e:	bf00      	nop
 8007260:	08007295 	.word	0x08007295
 8007264:	080072b5 	.word	0x080072b5
 8007268:	080072b5 	.word	0x080072b5
 800726c:	080072b5 	.word	0x080072b5
 8007270:	080072a5 	.word	0x080072a5
 8007274:	080072b5 	.word	0x080072b5
 8007278:	080072b5 	.word	0x080072b5
 800727c:	080072b5 	.word	0x080072b5
 8007280:	0800729d 	.word	0x0800729d
 8007284:	080072b5 	.word	0x080072b5
 8007288:	080072b5 	.word	0x080072b5
 800728c:	080072b5 	.word	0x080072b5
 8007290:	080072ad 	.word	0x080072ad
 8007294:	2300      	movs	r3, #0
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800729a:	e0d8      	b.n	800744e <UART_SetConfig+0x2fe>
 800729c:	2302      	movs	r3, #2
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a2:	e0d4      	b.n	800744e <UART_SetConfig+0x2fe>
 80072a4:	2304      	movs	r3, #4
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072aa:	e0d0      	b.n	800744e <UART_SetConfig+0x2fe>
 80072ac:	2308      	movs	r3, #8
 80072ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072b2:	e0cc      	b.n	800744e <UART_SetConfig+0x2fe>
 80072b4:	2310      	movs	r3, #16
 80072b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ba:	e0c8      	b.n	800744e <UART_SetConfig+0x2fe>
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a5e      	ldr	r2, [pc, #376]	@ (800743c <UART_SetConfig+0x2ec>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d125      	bne.n	8007312 <UART_SetConfig+0x1c2>
 80072c6:	4b5b      	ldr	r3, [pc, #364]	@ (8007434 <UART_SetConfig+0x2e4>)
 80072c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80072d0:	2b30      	cmp	r3, #48	@ 0x30
 80072d2:	d016      	beq.n	8007302 <UART_SetConfig+0x1b2>
 80072d4:	2b30      	cmp	r3, #48	@ 0x30
 80072d6:	d818      	bhi.n	800730a <UART_SetConfig+0x1ba>
 80072d8:	2b20      	cmp	r3, #32
 80072da:	d00a      	beq.n	80072f2 <UART_SetConfig+0x1a2>
 80072dc:	2b20      	cmp	r3, #32
 80072de:	d814      	bhi.n	800730a <UART_SetConfig+0x1ba>
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <UART_SetConfig+0x19a>
 80072e4:	2b10      	cmp	r3, #16
 80072e6:	d008      	beq.n	80072fa <UART_SetConfig+0x1aa>
 80072e8:	e00f      	b.n	800730a <UART_SetConfig+0x1ba>
 80072ea:	2300      	movs	r3, #0
 80072ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072f0:	e0ad      	b.n	800744e <UART_SetConfig+0x2fe>
 80072f2:	2302      	movs	r3, #2
 80072f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072f8:	e0a9      	b.n	800744e <UART_SetConfig+0x2fe>
 80072fa:	2304      	movs	r3, #4
 80072fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007300:	e0a5      	b.n	800744e <UART_SetConfig+0x2fe>
 8007302:	2308      	movs	r3, #8
 8007304:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007308:	e0a1      	b.n	800744e <UART_SetConfig+0x2fe>
 800730a:	2310      	movs	r3, #16
 800730c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007310:	e09d      	b.n	800744e <UART_SetConfig+0x2fe>
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a4a      	ldr	r2, [pc, #296]	@ (8007440 <UART_SetConfig+0x2f0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d125      	bne.n	8007368 <UART_SetConfig+0x218>
 800731c:	4b45      	ldr	r3, [pc, #276]	@ (8007434 <UART_SetConfig+0x2e4>)
 800731e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007322:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007326:	2bc0      	cmp	r3, #192	@ 0xc0
 8007328:	d016      	beq.n	8007358 <UART_SetConfig+0x208>
 800732a:	2bc0      	cmp	r3, #192	@ 0xc0
 800732c:	d818      	bhi.n	8007360 <UART_SetConfig+0x210>
 800732e:	2b80      	cmp	r3, #128	@ 0x80
 8007330:	d00a      	beq.n	8007348 <UART_SetConfig+0x1f8>
 8007332:	2b80      	cmp	r3, #128	@ 0x80
 8007334:	d814      	bhi.n	8007360 <UART_SetConfig+0x210>
 8007336:	2b00      	cmp	r3, #0
 8007338:	d002      	beq.n	8007340 <UART_SetConfig+0x1f0>
 800733a:	2b40      	cmp	r3, #64	@ 0x40
 800733c:	d008      	beq.n	8007350 <UART_SetConfig+0x200>
 800733e:	e00f      	b.n	8007360 <UART_SetConfig+0x210>
 8007340:	2300      	movs	r3, #0
 8007342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007346:	e082      	b.n	800744e <UART_SetConfig+0x2fe>
 8007348:	2302      	movs	r3, #2
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800734e:	e07e      	b.n	800744e <UART_SetConfig+0x2fe>
 8007350:	2304      	movs	r3, #4
 8007352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007356:	e07a      	b.n	800744e <UART_SetConfig+0x2fe>
 8007358:	2308      	movs	r3, #8
 800735a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800735e:	e076      	b.n	800744e <UART_SetConfig+0x2fe>
 8007360:	2310      	movs	r3, #16
 8007362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007366:	e072      	b.n	800744e <UART_SetConfig+0x2fe>
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a35      	ldr	r2, [pc, #212]	@ (8007444 <UART_SetConfig+0x2f4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d12a      	bne.n	80073c8 <UART_SetConfig+0x278>
 8007372:	4b30      	ldr	r3, [pc, #192]	@ (8007434 <UART_SetConfig+0x2e4>)
 8007374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007378:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800737c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007380:	d01a      	beq.n	80073b8 <UART_SetConfig+0x268>
 8007382:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007386:	d81b      	bhi.n	80073c0 <UART_SetConfig+0x270>
 8007388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800738c:	d00c      	beq.n	80073a8 <UART_SetConfig+0x258>
 800738e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007392:	d815      	bhi.n	80073c0 <UART_SetConfig+0x270>
 8007394:	2b00      	cmp	r3, #0
 8007396:	d003      	beq.n	80073a0 <UART_SetConfig+0x250>
 8007398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800739c:	d008      	beq.n	80073b0 <UART_SetConfig+0x260>
 800739e:	e00f      	b.n	80073c0 <UART_SetConfig+0x270>
 80073a0:	2300      	movs	r3, #0
 80073a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073a6:	e052      	b.n	800744e <UART_SetConfig+0x2fe>
 80073a8:	2302      	movs	r3, #2
 80073aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ae:	e04e      	b.n	800744e <UART_SetConfig+0x2fe>
 80073b0:	2304      	movs	r3, #4
 80073b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073b6:	e04a      	b.n	800744e <UART_SetConfig+0x2fe>
 80073b8:	2308      	movs	r3, #8
 80073ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073be:	e046      	b.n	800744e <UART_SetConfig+0x2fe>
 80073c0:	2310      	movs	r3, #16
 80073c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073c6:	e042      	b.n	800744e <UART_SetConfig+0x2fe>
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a17      	ldr	r2, [pc, #92]	@ (800742c <UART_SetConfig+0x2dc>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d13a      	bne.n	8007448 <UART_SetConfig+0x2f8>
 80073d2:	4b18      	ldr	r3, [pc, #96]	@ (8007434 <UART_SetConfig+0x2e4>)
 80073d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80073dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073e0:	d01a      	beq.n	8007418 <UART_SetConfig+0x2c8>
 80073e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073e6:	d81b      	bhi.n	8007420 <UART_SetConfig+0x2d0>
 80073e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073ec:	d00c      	beq.n	8007408 <UART_SetConfig+0x2b8>
 80073ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073f2:	d815      	bhi.n	8007420 <UART_SetConfig+0x2d0>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d003      	beq.n	8007400 <UART_SetConfig+0x2b0>
 80073f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073fc:	d008      	beq.n	8007410 <UART_SetConfig+0x2c0>
 80073fe:	e00f      	b.n	8007420 <UART_SetConfig+0x2d0>
 8007400:	2300      	movs	r3, #0
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007406:	e022      	b.n	800744e <UART_SetConfig+0x2fe>
 8007408:	2302      	movs	r3, #2
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800740e:	e01e      	b.n	800744e <UART_SetConfig+0x2fe>
 8007410:	2304      	movs	r3, #4
 8007412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007416:	e01a      	b.n	800744e <UART_SetConfig+0x2fe>
 8007418:	2308      	movs	r3, #8
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741e:	e016      	b.n	800744e <UART_SetConfig+0x2fe>
 8007420:	2310      	movs	r3, #16
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007426:	e012      	b.n	800744e <UART_SetConfig+0x2fe>
 8007428:	cfff69f3 	.word	0xcfff69f3
 800742c:	40008000 	.word	0x40008000
 8007430:	40013800 	.word	0x40013800
 8007434:	40021000 	.word	0x40021000
 8007438:	40004400 	.word	0x40004400
 800743c:	40004800 	.word	0x40004800
 8007440:	40004c00 	.word	0x40004c00
 8007444:	40005000 	.word	0x40005000
 8007448:	2310      	movs	r3, #16
 800744a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4aae      	ldr	r2, [pc, #696]	@ (800770c <UART_SetConfig+0x5bc>)
 8007454:	4293      	cmp	r3, r2
 8007456:	f040 8097 	bne.w	8007588 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800745a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800745e:	2b08      	cmp	r3, #8
 8007460:	d823      	bhi.n	80074aa <UART_SetConfig+0x35a>
 8007462:	a201      	add	r2, pc, #4	@ (adr r2, 8007468 <UART_SetConfig+0x318>)
 8007464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007468:	0800748d 	.word	0x0800748d
 800746c:	080074ab 	.word	0x080074ab
 8007470:	08007495 	.word	0x08007495
 8007474:	080074ab 	.word	0x080074ab
 8007478:	0800749b 	.word	0x0800749b
 800747c:	080074ab 	.word	0x080074ab
 8007480:	080074ab 	.word	0x080074ab
 8007484:	080074ab 	.word	0x080074ab
 8007488:	080074a3 	.word	0x080074a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800748c:	f7fe fb0e 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 8007490:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007492:	e010      	b.n	80074b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007494:	4b9e      	ldr	r3, [pc, #632]	@ (8007710 <UART_SetConfig+0x5c0>)
 8007496:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007498:	e00d      	b.n	80074b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800749a:	f7fe fa6f 	bl	800597c <HAL_RCC_GetSysClockFreq>
 800749e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074a0:	e009      	b.n	80074b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074a8:	e005      	b.n	80074b6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 8130 	beq.w	800771e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c2:	4a94      	ldr	r2, [pc, #592]	@ (8007714 <UART_SetConfig+0x5c4>)
 80074c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074c8:	461a      	mov	r2, r3
 80074ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80074d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	4613      	mov	r3, r2
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	4413      	add	r3, r2
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d305      	bcc.n	80074ee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d903      	bls.n	80074f6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80074f4:	e113      	b.n	800771e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f8:	2200      	movs	r2, #0
 80074fa:	60bb      	str	r3, [r7, #8]
 80074fc:	60fa      	str	r2, [r7, #12]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007502:	4a84      	ldr	r2, [pc, #528]	@ (8007714 <UART_SetConfig+0x5c4>)
 8007504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007508:	b29b      	uxth	r3, r3
 800750a:	2200      	movs	r2, #0
 800750c:	603b      	str	r3, [r7, #0]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007514:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007518:	f7f8 fe70 	bl	80001fc <__aeabi_uldivmod>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4610      	mov	r0, r2
 8007522:	4619      	mov	r1, r3
 8007524:	f04f 0200 	mov.w	r2, #0
 8007528:	f04f 0300 	mov.w	r3, #0
 800752c:	020b      	lsls	r3, r1, #8
 800752e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007532:	0202      	lsls	r2, r0, #8
 8007534:	6979      	ldr	r1, [r7, #20]
 8007536:	6849      	ldr	r1, [r1, #4]
 8007538:	0849      	lsrs	r1, r1, #1
 800753a:	2000      	movs	r0, #0
 800753c:	460c      	mov	r4, r1
 800753e:	4605      	mov	r5, r0
 8007540:	eb12 0804 	adds.w	r8, r2, r4
 8007544:	eb43 0905 	adc.w	r9, r3, r5
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	469a      	mov	sl, r3
 8007550:	4693      	mov	fp, r2
 8007552:	4652      	mov	r2, sl
 8007554:	465b      	mov	r3, fp
 8007556:	4640      	mov	r0, r8
 8007558:	4649      	mov	r1, r9
 800755a:	f7f8 fe4f 	bl	80001fc <__aeabi_uldivmod>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	4613      	mov	r3, r2
 8007564:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800756c:	d308      	bcc.n	8007580 <UART_SetConfig+0x430>
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007574:	d204      	bcs.n	8007580 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6a3a      	ldr	r2, [r7, #32]
 800757c:	60da      	str	r2, [r3, #12]
 800757e:	e0ce      	b.n	800771e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007586:	e0ca      	b.n	800771e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007590:	d166      	bne.n	8007660 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007592:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007596:	2b08      	cmp	r3, #8
 8007598:	d827      	bhi.n	80075ea <UART_SetConfig+0x49a>
 800759a:	a201      	add	r2, pc, #4	@ (adr r2, 80075a0 <UART_SetConfig+0x450>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075c5 	.word	0x080075c5
 80075a4:	080075cd 	.word	0x080075cd
 80075a8:	080075d5 	.word	0x080075d5
 80075ac:	080075eb 	.word	0x080075eb
 80075b0:	080075db 	.word	0x080075db
 80075b4:	080075eb 	.word	0x080075eb
 80075b8:	080075eb 	.word	0x080075eb
 80075bc:	080075eb 	.word	0x080075eb
 80075c0:	080075e3 	.word	0x080075e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075c4:	f7fe fa72 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 80075c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075ca:	e014      	b.n	80075f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075cc:	f7fe fa84 	bl	8005ad8 <HAL_RCC_GetPCLK2Freq>
 80075d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075d2:	e010      	b.n	80075f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075d4:	4b4e      	ldr	r3, [pc, #312]	@ (8007710 <UART_SetConfig+0x5c0>)
 80075d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075d8:	e00d      	b.n	80075f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075da:	f7fe f9cf 	bl	800597c <HAL_RCC_GetSysClockFreq>
 80075de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075e0:	e009      	b.n	80075f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075e8:	e005      	b.n	80075f6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 8090 	beq.w	800771e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007602:	4a44      	ldr	r2, [pc, #272]	@ (8007714 <UART_SetConfig+0x5c4>)
 8007604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007608:	461a      	mov	r2, r3
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007610:	005a      	lsls	r2, r3, #1
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	441a      	add	r2, r3
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007622:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	2b0f      	cmp	r3, #15
 8007628:	d916      	bls.n	8007658 <UART_SetConfig+0x508>
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007630:	d212      	bcs.n	8007658 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	b29b      	uxth	r3, r3
 8007636:	f023 030f 	bic.w	r3, r3, #15
 800763a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	b29b      	uxth	r3, r3
 8007642:	f003 0307 	and.w	r3, r3, #7
 8007646:	b29a      	uxth	r2, r3
 8007648:	8bfb      	ldrh	r3, [r7, #30]
 800764a:	4313      	orrs	r3, r2
 800764c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	8bfa      	ldrh	r2, [r7, #30]
 8007654:	60da      	str	r2, [r3, #12]
 8007656:	e062      	b.n	800771e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800765e:	e05e      	b.n	800771e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007660:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007664:	2b08      	cmp	r3, #8
 8007666:	d828      	bhi.n	80076ba <UART_SetConfig+0x56a>
 8007668:	a201      	add	r2, pc, #4	@ (adr r2, 8007670 <UART_SetConfig+0x520>)
 800766a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766e:	bf00      	nop
 8007670:	08007695 	.word	0x08007695
 8007674:	0800769d 	.word	0x0800769d
 8007678:	080076a5 	.word	0x080076a5
 800767c:	080076bb 	.word	0x080076bb
 8007680:	080076ab 	.word	0x080076ab
 8007684:	080076bb 	.word	0x080076bb
 8007688:	080076bb 	.word	0x080076bb
 800768c:	080076bb 	.word	0x080076bb
 8007690:	080076b3 	.word	0x080076b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007694:	f7fe fa0a 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 8007698:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800769a:	e014      	b.n	80076c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800769c:	f7fe fa1c 	bl	8005ad8 <HAL_RCC_GetPCLK2Freq>
 80076a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076a2:	e010      	b.n	80076c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007710 <UART_SetConfig+0x5c0>)
 80076a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076a8:	e00d      	b.n	80076c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076aa:	f7fe f967 	bl	800597c <HAL_RCC_GetSysClockFreq>
 80076ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076b0:	e009      	b.n	80076c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076b8:	e005      	b.n	80076c6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80076c4:	bf00      	nop
    }

    if (pclk != 0U)
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d028      	beq.n	800771e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d0:	4a10      	ldr	r2, [pc, #64]	@ (8007714 <UART_SetConfig+0x5c4>)
 80076d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076d6:	461a      	mov	r2, r3
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	fbb3 f2f2 	udiv	r2, r3, r2
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	085b      	lsrs	r3, r3, #1
 80076e4:	441a      	add	r2, r3
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ee:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	2b0f      	cmp	r3, #15
 80076f4:	d910      	bls.n	8007718 <UART_SetConfig+0x5c8>
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076fc:	d20c      	bcs.n	8007718 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	b29a      	uxth	r2, r3
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60da      	str	r2, [r3, #12]
 8007708:	e009      	b.n	800771e <UART_SetConfig+0x5ce>
 800770a:	bf00      	nop
 800770c:	40008000 	.word	0x40008000
 8007710:	00f42400 	.word	0x00f42400
 8007714:	0800c008 	.word	0x0800c008
      }
      else
      {
        ret = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2201      	movs	r2, #1
 8007722:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2201      	movs	r2, #1
 800772a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2200      	movs	r2, #0
 8007732:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2200      	movs	r2, #0
 8007738:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800773a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800773e:	4618      	mov	r0, r3
 8007740:	3730      	adds	r7, #48	@ 0x30
 8007742:	46bd      	mov	sp, r7
 8007744:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00a      	beq.n	8007772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077dc:	f003 0310 	and.w	r3, r3, #16
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fe:	f003 0320 	and.w	r3, r3, #32
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01a      	beq.n	800785e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007846:	d10a      	bne.n	800785e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	605a      	str	r2, [r3, #4]
  }
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b098      	sub	sp, #96	@ 0x60
 8007890:	af02      	add	r7, sp, #8
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800789c:	f7f9 fedc 	bl	8001658 <HAL_GetTick>
 80078a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0308 	and.w	r3, r3, #8
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d12f      	bne.n	8007910 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078b8:	2200      	movs	r2, #0
 80078ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f88e 	bl	80079e0 <UART_WaitOnFlagUntilTimeout>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d022      	beq.n	8007910 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d2:	e853 3f00 	ldrex	r3, [r3]
 80078d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078de:	653b      	str	r3, [r7, #80]	@ 0x50
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e6      	bne.n	80078ca <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2220      	movs	r2, #32
 8007900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e063      	b.n	80079d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b04      	cmp	r3, #4
 800791c:	d149      	bne.n	80079b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800791e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007926:	2200      	movs	r2, #0
 8007928:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f857 	bl	80079e0 <UART_WaitOnFlagUntilTimeout>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d03c      	beq.n	80079b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	623b      	str	r3, [r7, #32]
   return(result);
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800794c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007956:	633b      	str	r3, [r7, #48]	@ 0x30
 8007958:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800795c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e6      	bne.n	8007938 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	60fb      	str	r3, [r7, #12]
   return(result);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f023 0301 	bic.w	r3, r3, #1
 8007980:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3308      	adds	r3, #8
 8007988:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800798a:	61fa      	str	r2, [r7, #28]
 800798c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	69b9      	ldr	r1, [r7, #24]
 8007990:	69fa      	ldr	r2, [r7, #28]
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	617b      	str	r3, [r7, #20]
   return(result);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e5      	bne.n	800796a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e012      	b.n	80079d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3758      	adds	r7, #88	@ 0x58
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f0:	e049      	b.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079f8:	d045      	beq.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079fa:	f7f9 fe2d 	bl	8001658 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d302      	bcc.n	8007a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e048      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0304 	and.w	r3, r3, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d031      	beq.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d110      	bne.n	8007a52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2208      	movs	r2, #8
 8007a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f838 	bl	8007aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2208      	movs	r2, #8
 8007a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e029      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a60:	d111      	bne.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 f81e 	bl	8007aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e00f      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69da      	ldr	r2, [r3, #28]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4013      	ands	r3, r2
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	bf0c      	ite	eq
 8007a96:	2301      	moveq	r3, #1
 8007a98:	2300      	movne	r3, #0
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d0a6      	beq.n	80079f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b095      	sub	sp, #84	@ 0x54
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007abe:	e853 3f00 	ldrex	r3, [r3]
 8007ac2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ad4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ad6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ada:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007adc:	e841 2300 	strex	r3, r2, [r1]
 8007ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e6      	bne.n	8007ab6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007afe:	f023 0301 	bic.w	r3, r3, #1
 8007b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3308      	adds	r3, #8
 8007b0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e3      	bne.n	8007ae8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d118      	bne.n	8007b5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	e853 3f00 	ldrex	r3, [r3]
 8007b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f023 0310 	bic.w	r3, r3, #16
 8007b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b46:	61bb      	str	r3, [r7, #24]
 8007b48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	6979      	ldr	r1, [r7, #20]
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	e841 2300 	strex	r3, r2, [r1]
 8007b52:	613b      	str	r3, [r7, #16]
   return(result);
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e6      	bne.n	8007b28 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b6e:	bf00      	nop
 8007b70:	3754      	adds	r7, #84	@ 0x54
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b085      	sub	sp, #20
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d101      	bne.n	8007b90 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	e027      	b.n	8007be0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2224      	movs	r2, #36	@ 0x24
 8007b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0201 	bic.w	r2, r2, #1
 8007bb6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007bbe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e02d      	b.n	8007c60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2224      	movs	r2, #36	@ 0x24
 8007c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0201 	bic.w	r2, r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f84f 	bl	8007ce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e02d      	b.n	8007cdc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2224      	movs	r2, #36	@ 0x24
 8007c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f022 0201 	bic.w	r2, r2, #1
 8007ca6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f811 	bl	8007ce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d108      	bne.n	8007d06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d04:	e031      	b.n	8007d6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d06:	2308      	movs	r3, #8
 8007d08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d0a:	2308      	movs	r3, #8
 8007d0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	0e5b      	lsrs	r3, r3, #25
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	f003 0307 	and.w	r3, r3, #7
 8007d1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	0f5b      	lsrs	r3, r3, #29
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	7b3a      	ldrb	r2, [r7, #12]
 8007d32:	4911      	ldr	r1, [pc, #68]	@ (8007d78 <UARTEx_SetNbDataToProcess+0x94>)
 8007d34:	5c8a      	ldrb	r2, [r1, r2]
 8007d36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d3a:	7b3a      	ldrb	r2, [r7, #12]
 8007d3c:	490f      	ldr	r1, [pc, #60]	@ (8007d7c <UARTEx_SetNbDataToProcess+0x98>)
 8007d3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d40:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	7b7a      	ldrb	r2, [r7, #13]
 8007d50:	4909      	ldr	r1, [pc, #36]	@ (8007d78 <UARTEx_SetNbDataToProcess+0x94>)
 8007d52:	5c8a      	ldrb	r2, [r1, r2]
 8007d54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d58:	7b7a      	ldrb	r2, [r7, #13]
 8007d5a:	4908      	ldr	r1, [pc, #32]	@ (8007d7c <UARTEx_SetNbDataToProcess+0x98>)
 8007d5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007d6a:	bf00      	nop
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	0800c020 	.word	0x0800c020
 8007d7c:	0800c028 	.word	0x0800c028

08007d80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d80:	b084      	sub	sp, #16
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	f107 001c 	add.w	r0, r7, #28
 8007d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f001 fa1c 	bl	80091dc <USB_CoreReset>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d106      	bne.n	8007dbc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	639a      	str	r2, [r3, #56]	@ 0x38
 8007dba:	e005      	b.n	8007dc8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dd4:	b004      	add	sp, #16
 8007dd6:	4770      	bx	lr

08007dd8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b087      	sub	sp, #28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	4613      	mov	r3, r2
 8007de4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d165      	bne.n	8007eb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	4a3e      	ldr	r2, [pc, #248]	@ (8007ee8 <USB_SetTurnaroundTime+0x110>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d906      	bls.n	8007e02 <USB_SetTurnaroundTime+0x2a>
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	4a3d      	ldr	r2, [pc, #244]	@ (8007eec <USB_SetTurnaroundTime+0x114>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d202      	bcs.n	8007e02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007dfc:	230f      	movs	r3, #15
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	e05c      	b.n	8007ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	4a39      	ldr	r2, [pc, #228]	@ (8007eec <USB_SetTurnaroundTime+0x114>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d306      	bcc.n	8007e18 <USB_SetTurnaroundTime+0x40>
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	4a38      	ldr	r2, [pc, #224]	@ (8007ef0 <USB_SetTurnaroundTime+0x118>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d202      	bcs.n	8007e18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007e12:	230e      	movs	r3, #14
 8007e14:	617b      	str	r3, [r7, #20]
 8007e16:	e051      	b.n	8007ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4a35      	ldr	r2, [pc, #212]	@ (8007ef0 <USB_SetTurnaroundTime+0x118>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d306      	bcc.n	8007e2e <USB_SetTurnaroundTime+0x56>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	4a34      	ldr	r2, [pc, #208]	@ (8007ef4 <USB_SetTurnaroundTime+0x11c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d202      	bcs.n	8007e2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007e28:	230d      	movs	r3, #13
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	e046      	b.n	8007ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	4a30      	ldr	r2, [pc, #192]	@ (8007ef4 <USB_SetTurnaroundTime+0x11c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d306      	bcc.n	8007e44 <USB_SetTurnaroundTime+0x6c>
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4a2f      	ldr	r2, [pc, #188]	@ (8007ef8 <USB_SetTurnaroundTime+0x120>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d802      	bhi.n	8007e44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007e3e:	230c      	movs	r3, #12
 8007e40:	617b      	str	r3, [r7, #20]
 8007e42:	e03b      	b.n	8007ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	4a2c      	ldr	r2, [pc, #176]	@ (8007ef8 <USB_SetTurnaroundTime+0x120>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d906      	bls.n	8007e5a <USB_SetTurnaroundTime+0x82>
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4a2b      	ldr	r2, [pc, #172]	@ (8007efc <USB_SetTurnaroundTime+0x124>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d802      	bhi.n	8007e5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007e54:	230b      	movs	r3, #11
 8007e56:	617b      	str	r3, [r7, #20]
 8007e58:	e030      	b.n	8007ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	4a27      	ldr	r2, [pc, #156]	@ (8007efc <USB_SetTurnaroundTime+0x124>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d906      	bls.n	8007e70 <USB_SetTurnaroundTime+0x98>
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	4a26      	ldr	r2, [pc, #152]	@ (8007f00 <USB_SetTurnaroundTime+0x128>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d802      	bhi.n	8007e70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007e6a:	230a      	movs	r3, #10
 8007e6c:	617b      	str	r3, [r7, #20]
 8007e6e:	e025      	b.n	8007ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	4a23      	ldr	r2, [pc, #140]	@ (8007f00 <USB_SetTurnaroundTime+0x128>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d906      	bls.n	8007e86 <USB_SetTurnaroundTime+0xae>
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	4a22      	ldr	r2, [pc, #136]	@ (8007f04 <USB_SetTurnaroundTime+0x12c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d202      	bcs.n	8007e86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007e80:	2309      	movs	r3, #9
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	e01a      	b.n	8007ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	4a1e      	ldr	r2, [pc, #120]	@ (8007f04 <USB_SetTurnaroundTime+0x12c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d306      	bcc.n	8007e9c <USB_SetTurnaroundTime+0xc4>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	4a1d      	ldr	r2, [pc, #116]	@ (8007f08 <USB_SetTurnaroundTime+0x130>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d802      	bhi.n	8007e9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007e96:	2308      	movs	r3, #8
 8007e98:	617b      	str	r3, [r7, #20]
 8007e9a:	e00f      	b.n	8007ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8007f08 <USB_SetTurnaroundTime+0x130>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d906      	bls.n	8007eb2 <USB_SetTurnaroundTime+0xda>
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	4a19      	ldr	r2, [pc, #100]	@ (8007f0c <USB_SetTurnaroundTime+0x134>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d202      	bcs.n	8007eb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007eac:	2307      	movs	r3, #7
 8007eae:	617b      	str	r3, [r7, #20]
 8007eb0:	e004      	b.n	8007ebc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007eb2:	2306      	movs	r3, #6
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	e001      	b.n	8007ebc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007eb8:	2309      	movs	r3, #9
 8007eba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	029b      	lsls	r3, r3, #10
 8007ed0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	371c      	adds	r7, #28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	00d8acbf 	.word	0x00d8acbf
 8007eec:	00e4e1c0 	.word	0x00e4e1c0
 8007ef0:	00f42400 	.word	0x00f42400
 8007ef4:	01067380 	.word	0x01067380
 8007ef8:	011a499f 	.word	0x011a499f
 8007efc:	01312cff 	.word	0x01312cff
 8007f00:	014ca43f 	.word	0x014ca43f
 8007f04:	016e3600 	.word	0x016e3600
 8007f08:	01a6ab1f 	.word	0x01a6ab1f
 8007f0c:	01e84800 	.word	0x01e84800

08007f10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f043 0201 	orr.w	r2, r3, #1
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f023 0201 	bic.w	r2, r3, #1
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d115      	bne.n	8007fa2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f82:	2001      	movs	r0, #1
 8007f84:	f7f9 fb74 	bl	8001670 <HAL_Delay>
      ms++;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f001 f8ab 	bl	80090ea <USB_GetMode>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d01e      	beq.n	8007fd8 <USB_SetCurrentMode+0x84>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b31      	cmp	r3, #49	@ 0x31
 8007f9e:	d9f0      	bls.n	8007f82 <USB_SetCurrentMode+0x2e>
 8007fa0:	e01a      	b.n	8007fd8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fa2:	78fb      	ldrb	r3, [r7, #3]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d115      	bne.n	8007fd4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	f7f9 fb5b 	bl	8001670 <HAL_Delay>
      ms++;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 f892 	bl	80090ea <USB_GetMode>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <USB_SetCurrentMode+0x84>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b31      	cmp	r3, #49	@ 0x31
 8007fd0:	d9f0      	bls.n	8007fb4 <USB_SetCurrentMode+0x60>
 8007fd2:	e001      	b.n	8007fd8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e005      	b.n	8007fe4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b32      	cmp	r3, #50	@ 0x32
 8007fdc:	d101      	bne.n	8007fe2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e000      	b.n	8007fe4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fec:	b084      	sub	sp, #16
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b086      	sub	sp, #24
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007ffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008006:	2300      	movs	r3, #0
 8008008:	613b      	str	r3, [r7, #16]
 800800a:	e009      	b.n	8008020 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3340      	adds	r3, #64	@ 0x40
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	2200      	movs	r2, #0
 8008018:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	3301      	adds	r3, #1
 800801e:	613b      	str	r3, [r7, #16]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b0e      	cmp	r3, #14
 8008024:	d9f2      	bls.n	800800c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d11c      	bne.n	8008066 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800803a:	f043 0302 	orr.w	r3, r3, #2
 800803e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008044:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	e005      	b.n	8008072 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008078:	461a      	mov	r2, r3
 800807a:	2300      	movs	r3, #0
 800807c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800807e:	2103      	movs	r1, #3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f959 	bl	8008338 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008086:	2110      	movs	r1, #16
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f8f1 	bl	8008270 <USB_FlushTxFifo>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f91d 	bl	80082d8 <USB_FlushRxFifo>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080ae:	461a      	mov	r2, r3
 80080b0:	2300      	movs	r3, #0
 80080b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080ba:	461a      	mov	r2, r3
 80080bc:	2300      	movs	r3, #0
 80080be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c6:	461a      	mov	r2, r3
 80080c8:	2300      	movs	r3, #0
 80080ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080cc:	2300      	movs	r3, #0
 80080ce:	613b      	str	r3, [r7, #16]
 80080d0:	e043      	b.n	800815a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080e8:	d118      	bne.n	800811c <USB_DevInit+0x130>
    {
      if (i == 0U)
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10a      	bne.n	8008106 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080fc:	461a      	mov	r2, r3
 80080fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	e013      	b.n	800812e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008112:	461a      	mov	r2, r3
 8008114:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008118:	6013      	str	r3, [r2, #0]
 800811a:	e008      	b.n	800812e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4413      	add	r3, r2
 8008124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008128:	461a      	mov	r2, r3
 800812a:	2300      	movs	r3, #0
 800812c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800813a:	461a      	mov	r2, r3
 800813c:	2300      	movs	r3, #0
 800813e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800814c:	461a      	mov	r2, r3
 800814e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008152:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	3301      	adds	r3, #1
 8008158:	613b      	str	r3, [r7, #16]
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	429a      	cmp	r2, r3
 8008160:	d3b7      	bcc.n	80080d2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008162:	2300      	movs	r3, #0
 8008164:	613b      	str	r3, [r7, #16]
 8008166:	e043      	b.n	80081f0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800817a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800817e:	d118      	bne.n	80081b2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10a      	bne.n	800819c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4413      	add	r3, r2
 800818e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008192:	461a      	mov	r2, r3
 8008194:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	e013      	b.n	80081c4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a8:	461a      	mov	r2, r3
 80081aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	e008      	b.n	80081c4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081be:	461a      	mov	r2, r3
 80081c0:	2300      	movs	r3, #0
 80081c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d0:	461a      	mov	r2, r3
 80081d2:	2300      	movs	r3, #0
 80081d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081e2:	461a      	mov	r2, r3
 80081e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80081e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	3301      	adds	r3, #1
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d3b7      	bcc.n	8008168 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008206:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800820a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008218:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	f043 0210 	orr.w	r2, r3, #16
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	699a      	ldr	r2, [r3, #24]
 800822a:	4b10      	ldr	r3, [pc, #64]	@ (800826c <USB_DevInit+0x280>)
 800822c:	4313      	orrs	r3, r2
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d005      	beq.n	8008244 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	f043 0208 	orr.w	r2, r3, #8
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008246:	2b01      	cmp	r3, #1
 8008248:	d107      	bne.n	800825a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008252:	f043 0304 	orr.w	r3, r3, #4
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800825a:	7dfb      	ldrb	r3, [r7, #23]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008266:	b004      	add	sp, #16
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	803c3800 	.word	0x803c3800

08008270 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3301      	adds	r3, #1
 8008282:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	4a13      	ldr	r2, [pc, #76]	@ (80082d4 <USB_FlushTxFifo+0x64>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d901      	bls.n	8008290 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e01b      	b.n	80082c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	daf2      	bge.n	800827e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	019b      	lsls	r3, r3, #6
 80082a0:	f043 0220 	orr.w	r2, r3, #32
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	3301      	adds	r3, #1
 80082ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4a08      	ldr	r2, [pc, #32]	@ (80082d4 <USB_FlushTxFifo+0x64>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d901      	bls.n	80082ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e006      	b.n	80082c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	f003 0320 	and.w	r3, r3, #32
 80082c2:	2b20      	cmp	r3, #32
 80082c4:	d0f0      	beq.n	80082a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	00030d40 	.word	0x00030d40

080082d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3301      	adds	r3, #1
 80082e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4a11      	ldr	r2, [pc, #68]	@ (8008334 <USB_FlushRxFifo+0x5c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d901      	bls.n	80082f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e018      	b.n	8008328 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	daf2      	bge.n	80082e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2210      	movs	r2, #16
 8008306:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3301      	adds	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4a08      	ldr	r2, [pc, #32]	@ (8008334 <USB_FlushRxFifo+0x5c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d901      	bls.n	800831a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e006      	b.n	8008328 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0310 	and.w	r3, r3, #16
 8008322:	2b10      	cmp	r3, #16
 8008324:	d0f0      	beq.n	8008308 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	00030d40 	.word	0x00030d40

08008338 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	68f9      	ldr	r1, [r7, #12]
 8008354:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008358:	4313      	orrs	r3, r2
 800835a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800836a:	b480      	push	{r7}
 800836c:	b087      	sub	sp, #28
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f003 0306 	and.w	r3, r3, #6
 8008382:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b02      	cmp	r3, #2
 8008388:	d002      	beq.n	8008390 <USB_GetDevSpeed+0x26>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b06      	cmp	r3, #6
 800838e:	d102      	bne.n	8008396 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008390:	2302      	movs	r3, #2
 8008392:	75fb      	strb	r3, [r7, #23]
 8008394:	e001      	b.n	800839a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008396:	230f      	movs	r3, #15
 8008398:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800839a:	7dfb      	ldrb	r3, [r7, #23]
}
 800839c:	4618      	mov	r0, r3
 800839e:	371c      	adds	r7, #28
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	785b      	ldrb	r3, [r3, #1]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d13a      	bne.n	800843a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	f003 030f 	and.w	r3, r3, #15
 80083d4:	2101      	movs	r1, #1
 80083d6:	fa01 f303 	lsl.w	r3, r1, r3
 80083da:	b29b      	uxth	r3, r3
 80083dc:	68f9      	ldr	r1, [r7, #12]
 80083de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083e2:	4313      	orrs	r3, r2
 80083e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d155      	bne.n	80084a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	791b      	ldrb	r3, [r3, #4]
 8008416:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008418:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	059b      	lsls	r3, r3, #22
 800841e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008420:	4313      	orrs	r3, r2
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	0151      	lsls	r1, r2, #5
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	440a      	add	r2, r1
 800842a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800842e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	e036      	b.n	80084a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008440:	69da      	ldr	r2, [r3, #28]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	f003 030f 	and.w	r3, r3, #15
 800844a:	2101      	movs	r1, #1
 800844c:	fa01 f303 	lsl.w	r3, r1, r3
 8008450:	041b      	lsls	r3, r3, #16
 8008452:	68f9      	ldr	r1, [r7, #12]
 8008454:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008458:	4313      	orrs	r3, r2
 800845a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d11a      	bne.n	80084a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	791b      	ldrb	r3, [r3, #4]
 800848c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800848e:	430b      	orrs	r3, r1
 8008490:	4313      	orrs	r3, r2
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	0151      	lsls	r1, r2, #5
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	440a      	add	r2, r1
 800849a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800849e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
	...

080084b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	785b      	ldrb	r3, [r3, #1]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d161      	bne.n	8008598 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084ea:	d11f      	bne.n	800852c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	015a      	lsls	r2, r3, #5
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	0151      	lsls	r1, r2, #5
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	440a      	add	r2, r1
 8008502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008506:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800850a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	0151      	lsls	r1, r2, #5
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	440a      	add	r2, r1
 8008522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008526:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800852a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008532:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	f003 030f 	and.w	r3, r3, #15
 800853c:	2101      	movs	r1, #1
 800853e:	fa01 f303 	lsl.w	r3, r1, r3
 8008542:	b29b      	uxth	r3, r3
 8008544:	43db      	mvns	r3, r3
 8008546:	68f9      	ldr	r1, [r7, #12]
 8008548:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800854c:	4013      	ands	r3, r2
 800854e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008556:	69da      	ldr	r2, [r3, #28]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	f003 030f 	and.w	r3, r3, #15
 8008560:	2101      	movs	r1, #1
 8008562:	fa01 f303 	lsl.w	r3, r1, r3
 8008566:	b29b      	uxth	r3, r3
 8008568:	43db      	mvns	r3, r3
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008570:	4013      	ands	r3, r2
 8008572:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4413      	add	r3, r2
 800857c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	0159      	lsls	r1, r3, #5
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	440b      	add	r3, r1
 800858a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800858e:	4619      	mov	r1, r3
 8008590:	4b35      	ldr	r3, [pc, #212]	@ (8008668 <USB_DeactivateEndpoint+0x1b0>)
 8008592:	4013      	ands	r3, r2
 8008594:	600b      	str	r3, [r1, #0]
 8008596:	e060      	b.n	800865a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085ae:	d11f      	bne.n	80085f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68ba      	ldr	r2, [r7, #8]
 80085c0:	0151      	lsls	r1, r2, #5
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	440a      	add	r2, r1
 80085c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	0151      	lsls	r1, r2, #5
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	440a      	add	r2, r1
 80085e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	f003 030f 	and.w	r3, r3, #15
 8008600:	2101      	movs	r1, #1
 8008602:	fa01 f303 	lsl.w	r3, r1, r3
 8008606:	041b      	lsls	r3, r3, #16
 8008608:	43db      	mvns	r3, r3
 800860a:	68f9      	ldr	r1, [r7, #12]
 800860c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008610:	4013      	ands	r3, r2
 8008612:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800861a:	69da      	ldr	r2, [r3, #28]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	f003 030f 	and.w	r3, r3, #15
 8008624:	2101      	movs	r1, #1
 8008626:	fa01 f303 	lsl.w	r3, r1, r3
 800862a:	041b      	lsls	r3, r3, #16
 800862c:	43db      	mvns	r3, r3
 800862e:	68f9      	ldr	r1, [r7, #12]
 8008630:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008634:	4013      	ands	r3, r2
 8008636:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	4413      	add	r3, r2
 8008640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	0159      	lsls	r1, r3, #5
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	440b      	add	r3, r1
 800864e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008652:	4619      	mov	r1, r3
 8008654:	4b05      	ldr	r3, [pc, #20]	@ (800866c <USB_DeactivateEndpoint+0x1b4>)
 8008656:	4013      	ands	r3, r2
 8008658:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	ec337800 	.word	0xec337800
 800866c:	eff37800 	.word	0xeff37800

08008670 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	785b      	ldrb	r3, [r3, #1]
 8008688:	2b01      	cmp	r3, #1
 800868a:	f040 8128 	bne.w	80088de <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d132      	bne.n	80086fc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	4413      	add	r3, r2
 800869e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	0151      	lsls	r1, r2, #5
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	440a      	add	r2, r1
 80086ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086b0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80086b4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80086b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	0151      	lsls	r1, r2, #5
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	440a      	add	r2, r1
 80086d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	0151      	lsls	r1, r2, #5
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	440a      	add	r2, r1
 80086f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086f4:	0cdb      	lsrs	r3, r3, #19
 80086f6:	04db      	lsls	r3, r3, #19
 80086f8:	6113      	str	r3, [r2, #16]
 80086fa:	e092      	b.n	8008822 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	0151      	lsls	r1, r2, #5
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	440a      	add	r2, r1
 8008712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008716:	0cdb      	lsrs	r3, r3, #19
 8008718:	04db      	lsls	r3, r3, #19
 800871a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	0151      	lsls	r1, r2, #5
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	440a      	add	r2, r1
 8008732:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008736:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800873a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800873e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d11a      	bne.n	800877c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	691a      	ldr	r2, [r3, #16]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	429a      	cmp	r2, r3
 8008750:	d903      	bls.n	800875a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	689a      	ldr	r2, [r3, #8]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	440a      	add	r2, r1
 8008770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008774:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008778:	6113      	str	r3, [r2, #16]
 800877a:	e01b      	b.n	80087b4 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008788:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	6919      	ldr	r1, [r3, #16]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	440b      	add	r3, r1
 8008794:	1e59      	subs	r1, r3, #1
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	fbb1 f3f3 	udiv	r3, r1, r3
 800879e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80087a0:	4b8d      	ldr	r3, [pc, #564]	@ (80089d8 <USB_EPStartXfer+0x368>)
 80087a2:	400b      	ands	r3, r1
 80087a4:	6939      	ldr	r1, [r7, #16]
 80087a6:	0148      	lsls	r0, r1, #5
 80087a8:	6979      	ldr	r1, [r7, #20]
 80087aa:	4401      	add	r1, r0
 80087ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80087b0:	4313      	orrs	r3, r2
 80087b2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c0:	691a      	ldr	r2, [r3, #16]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087ca:	6939      	ldr	r1, [r7, #16]
 80087cc:	0148      	lsls	r0, r1, #5
 80087ce:	6979      	ldr	r1, [r7, #20]
 80087d0:	4401      	add	r1, r0
 80087d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80087d6:	4313      	orrs	r3, r2
 80087d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	791b      	ldrb	r3, [r3, #4]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d11f      	bne.n	8008822 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	0151      	lsls	r1, r2, #5
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	440a      	add	r2, r1
 80087f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087fc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008800:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	015a      	lsls	r2, r3, #5
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	4413      	add	r3, r2
 800880a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	0151      	lsls	r1, r2, #5
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	440a      	add	r2, r1
 8008818:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800881c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008820:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	015a      	lsls	r2, r3, #5
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	4413      	add	r3, r2
 800882a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	0151      	lsls	r1, r2, #5
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	440a      	add	r2, r1
 8008838:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800883c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008840:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	791b      	ldrb	r3, [r3, #4]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d015      	beq.n	8008876 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 8139 	beq.w	8008ac6 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800885a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	2101      	movs	r1, #1
 8008866:	fa01 f303 	lsl.w	r3, r1, r3
 800886a:	6979      	ldr	r1, [r7, #20]
 800886c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008870:	4313      	orrs	r3, r2
 8008872:	634b      	str	r3, [r1, #52]	@ 0x34
 8008874:	e127      	b.n	8008ac6 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008882:	2b00      	cmp	r3, #0
 8008884:	d110      	bne.n	80088a8 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	0151      	lsls	r1, r2, #5
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	440a      	add	r2, r1
 800889c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	e00f      	b.n	80088c8 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	0151      	lsls	r1, r2, #5
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	440a      	add	r2, r1
 80088be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088c6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	68d9      	ldr	r1, [r3, #12]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781a      	ldrb	r2, [r3, #0]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f9a6 	bl	8008c28 <USB_WritePacket>
 80088dc:	e0f3      	b.n	8008ac6 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	0151      	lsls	r1, r2, #5
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	440a      	add	r2, r1
 80088f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088f8:	0cdb      	lsrs	r3, r3, #19
 80088fa:	04db      	lsls	r3, r3, #19
 80088fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	4413      	add	r3, r2
 8008906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	0151      	lsls	r1, r2, #5
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	440a      	add	r2, r1
 8008914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008918:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800891c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008920:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d12f      	bne.n	8008988 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d003      	beq.n	8008938 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	689a      	ldr	r2, [r3, #8]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	4413      	add	r3, r2
 8008948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800894c:	691a      	ldr	r2, [r3, #16]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008956:	6939      	ldr	r1, [r7, #16]
 8008958:	0148      	lsls	r0, r1, #5
 800895a:	6979      	ldr	r1, [r7, #20]
 800895c:	4401      	add	r1, r0
 800895e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008962:	4313      	orrs	r3, r2
 8008964:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	4413      	add	r3, r2
 800896e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	0151      	lsls	r1, r2, #5
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	440a      	add	r2, r1
 800897c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008980:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008984:	6113      	str	r3, [r2, #16]
 8008986:	e061      	b.n	8008a4c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d125      	bne.n	80089dc <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	4413      	add	r3, r2
 8008998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800899c:	691a      	ldr	r2, [r3, #16]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089a6:	6939      	ldr	r1, [r7, #16]
 80089a8:	0148      	lsls	r0, r1, #5
 80089aa:	6979      	ldr	r1, [r7, #20]
 80089ac:	4401      	add	r1, r0
 80089ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80089b2:	4313      	orrs	r3, r2
 80089b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	0151      	lsls	r1, r2, #5
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	440a      	add	r2, r1
 80089cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089d4:	6113      	str	r3, [r2, #16]
 80089d6:	e039      	b.n	8008a4c <USB_EPStartXfer+0x3dc>
 80089d8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	691a      	ldr	r2, [r3, #16]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	4413      	add	r3, r2
 80089e6:	1e5a      	subs	r2, r3, #1
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f0:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	89fa      	ldrh	r2, [r7, #14]
 80089f8:	fb03 f202 	mul.w	r2, r3, r2
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a0c:	691a      	ldr	r2, [r3, #16]
 8008a0e:	89fb      	ldrh	r3, [r7, #14]
 8008a10:	04d9      	lsls	r1, r3, #19
 8008a12:	4b2f      	ldr	r3, [pc, #188]	@ (8008ad0 <USB_EPStartXfer+0x460>)
 8008a14:	400b      	ands	r3, r1
 8008a16:	6939      	ldr	r1, [r7, #16]
 8008a18:	0148      	lsls	r0, r1, #5
 8008a1a:	6979      	ldr	r1, [r7, #20]
 8008a1c:	4401      	add	r1, r0
 8008a1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a22:	4313      	orrs	r3, r2
 8008a24:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a32:	691a      	ldr	r2, [r3, #16]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a3c:	6939      	ldr	r1, [r7, #16]
 8008a3e:	0148      	lsls	r0, r1, #5
 8008a40:	6979      	ldr	r1, [r7, #20]
 8008a42:	4401      	add	r1, r0
 8008a44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	791b      	ldrb	r3, [r3, #4]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d128      	bne.n	8008aa6 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d110      	bne.n	8008a86 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	0151      	lsls	r1, r2, #5
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	440a      	add	r2, r1
 8008a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	e00f      	b.n	8008aa6 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	0151      	lsls	r1, r2, #5
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	440a      	add	r2, r1
 8008a9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008aa4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	0151      	lsls	r1, r2, #5
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	440a      	add	r2, r1
 8008abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ac0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ac4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	1ff80000 	.word	0x1ff80000

08008ad4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	785b      	ldrb	r3, [r3, #1]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d14a      	bne.n	8008b88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b0a:	f040 8086 	bne.w	8008c1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	7812      	ldrb	r2, [r2, #0]
 8008b22:	0151      	lsls	r1, r2, #5
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	440a      	add	r2, r1
 8008b28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	015a      	lsls	r2, r3, #5
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	7812      	ldrb	r2, [r2, #0]
 8008b46:	0151      	lsls	r1, r2, #5
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	440a      	add	r2, r1
 8008b4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d902      	bls.n	8008b6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	75fb      	strb	r3, [r7, #23]
          break;
 8008b6a:	e056      	b.n	8008c1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b84:	d0e7      	beq.n	8008b56 <USB_EPStopXfer+0x82>
 8008b86:	e048      	b.n	8008c1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ba0:	d13b      	bne.n	8008c1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	015a      	lsls	r2, r3, #5
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	7812      	ldrb	r2, [r2, #0]
 8008bb6:	0151      	lsls	r1, r2, #5
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	440a      	add	r2, r1
 8008bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008bc4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	7812      	ldrb	r2, [r2, #0]
 8008bda:	0151      	lsls	r1, r2, #5
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	440a      	add	r2, r1
 8008be0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008be4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008be8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3301      	adds	r3, #1
 8008bee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d902      	bls.n	8008c00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8008bfe:	e00c      	b.n	8008c1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c18:	d0e7      	beq.n	8008bea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	371c      	adds	r7, #28
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b089      	sub	sp, #36	@ 0x24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	4611      	mov	r1, r2
 8008c34:	461a      	mov	r2, r3
 8008c36:	460b      	mov	r3, r1
 8008c38:	71fb      	strb	r3, [r7, #7]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008c46:	88bb      	ldrh	r3, [r7, #4]
 8008c48:	3303      	adds	r3, #3
 8008c4a:	089b      	lsrs	r3, r3, #2
 8008c4c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61bb      	str	r3, [r7, #24]
 8008c52:	e018      	b.n	8008c86 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	031a      	lsls	r2, r3, #12
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c60:	461a      	mov	r2, r3
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	3301      	adds	r3, #1
 8008c72:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	3301      	adds	r3, #1
 8008c78:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	3301      	adds	r3, #1
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d3e2      	bcc.n	8008c54 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3724      	adds	r7, #36	@ 0x24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b08b      	sub	sp, #44	@ 0x2c
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008cb2:	88fb      	ldrh	r3, [r7, #6]
 8008cb4:	089b      	lsrs	r3, r3, #2
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008cba:	88fb      	ldrh	r3, [r7, #6]
 8008cbc:	f003 0303 	and.w	r3, r3, #3
 8008cc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	623b      	str	r3, [r7, #32]
 8008cc6:	e014      	b.n	8008cf2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd2:	601a      	str	r2, [r3, #0]
    pDest++;
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cdc:	3301      	adds	r3, #1
 8008cde:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce8:	3301      	adds	r3, #1
 8008cea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	623b      	str	r3, [r7, #32]
 8008cf2:	6a3a      	ldr	r2, [r7, #32]
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d3e6      	bcc.n	8008cc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008cfa:	8bfb      	ldrh	r3, [r7, #30]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d01e      	beq.n	8008d3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d00:	2300      	movs	r3, #0
 8008d02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f107 0310 	add.w	r3, r7, #16
 8008d10:	6812      	ldr	r2, [r2, #0]
 8008d12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	701a      	strb	r2, [r3, #0]
      i++;
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2e:	3301      	adds	r3, #1
 8008d30:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008d32:	8bfb      	ldrh	r3, [r7, #30]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d38:	8bfb      	ldrh	r3, [r7, #30]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1ea      	bne.n	8008d14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	372c      	adds	r7, #44	@ 0x2c
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	785b      	ldrb	r3, [r3, #1]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d12c      	bne.n	8008dc2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	db12      	blt.n	8008da0 <USB_EPSetStall+0x54>
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00f      	beq.n	8008da0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	0151      	lsls	r1, r2, #5
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	440a      	add	r2, r1
 8008d96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	015a      	lsls	r2, r3, #5
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	0151      	lsls	r1, r2, #5
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	440a      	add	r2, r1
 8008db6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	e02b      	b.n	8008e1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	db12      	blt.n	8008dfa <USB_EPSetStall+0xae>
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00f      	beq.n	8008dfa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	0151      	lsls	r1, r2, #5
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	440a      	add	r2, r1
 8008df0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008df4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008df8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	0151      	lsls	r1, r2, #5
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	440a      	add	r2, r1
 8008e10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	785b      	ldrb	r3, [r3, #1]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d128      	bne.n	8008e96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	791b      	ldrb	r3, [r3, #4]
 8008e68:	2b03      	cmp	r3, #3
 8008e6a:	d003      	beq.n	8008e74 <USB_EPClearStall+0x4c>
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	791b      	ldrb	r3, [r3, #4]
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d138      	bne.n	8008ee6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	0151      	lsls	r1, r2, #5
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	440a      	add	r2, r1
 8008e8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	e027      	b.n	8008ee6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	0151      	lsls	r1, r2, #5
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	440a      	add	r2, r1
 8008eac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eb0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008eb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	791b      	ldrb	r3, [r3, #4]
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d003      	beq.n	8008ec6 <USB_EPClearStall+0x9e>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	791b      	ldrb	r3, [r3, #4]
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d10f      	bne.n	8008ee6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	0151      	lsls	r1, r2, #5
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	440a      	add	r2, r1
 8008edc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ee4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f12:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008f16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	011b      	lsls	r3, r3, #4
 8008f24:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008f28:	68f9      	ldr	r1, [r7, #12]
 8008f2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f5a:	f023 0303 	bic.w	r3, r3, #3
 8008f5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f6e:	f023 0302 	bic.w	r3, r3, #2
 8008f72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b085      	sub	sp, #20
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f9c:	f023 0303 	bic.w	r3, r3, #3
 8008fa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fb0:	f043 0302 	orr.w	r3, r3, #2
 8008fb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	4013      	ands	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	4013      	ands	r3, r2
 800900c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	0c1b      	lsrs	r3, r3, #16
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800901e:	b480      	push	{r7}
 8009020:	b085      	sub	sp, #20
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	4013      	ands	r3, r2
 8009040:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	b29b      	uxth	r3, r3
}
 8009046:	4618      	mov	r0, r3
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009052:	b480      	push	{r7}
 8009054:	b085      	sub	sp, #20
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4413      	add	r3, r2
 800906a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	4013      	ands	r3, r2
 800907e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009080:	68bb      	ldr	r3, [r7, #8]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800908e:	b480      	push	{r7}
 8009090:	b087      	sub	sp, #28
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	460b      	mov	r3, r1
 8009098:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	f003 030f 	and.w	r3, r3, #15
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	fa22 f303 	lsr.w	r3, r2, r3
 80090be:	01db      	lsls	r3, r3, #7
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	4013      	ands	r3, r2
 80090da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090dc:	68bb      	ldr	r3, [r7, #8]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	371c      	adds	r7, #28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	f003 0301 	and.w	r3, r3, #1
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009106:	b480      	push	{r7}
 8009108:	b085      	sub	sp, #20
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009120:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009124:	f023 0307 	bic.w	r3, r3, #7
 8009128:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800913c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	333c      	adds	r3, #60	@ 0x3c
 800915e:	3304      	adds	r3, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	4a1c      	ldr	r2, [pc, #112]	@ (80091d8 <USB_EP0_OutStart+0x8c>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d90a      	bls.n	8009182 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009178:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800917c:	d101      	bne.n	8009182 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	e024      	b.n	80091cc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009188:	461a      	mov	r2, r3
 800918a:	2300      	movs	r3, #0
 800918c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800919c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091b0:	f043 0318 	orr.w	r3, r3, #24
 80091b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80091c8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	4f54300a 	.word	0x4f54300a

080091dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	3301      	adds	r3, #1
 80091ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	4a13      	ldr	r2, [pc, #76]	@ (8009240 <USB_CoreReset+0x64>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d901      	bls.n	80091fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e01b      	b.n	8009232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	daf2      	bge.n	80091e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	f043 0201 	orr.w	r2, r3, #1
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3301      	adds	r3, #1
 8009216:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4a09      	ldr	r2, [pc, #36]	@ (8009240 <USB_CoreReset+0x64>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d901      	bls.n	8009224 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009220:	2303      	movs	r3, #3
 8009222:	e006      	b.n	8009232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b01      	cmp	r3, #1
 800922e:	d0f0      	beq.n	8009212 <USB_CoreReset+0x36>

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	00030d40 	.word	0x00030d40

08009244 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009250:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009254:	f002 fe2c 	bl	800beb0 <USBD_static_malloc>
 8009258:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	32b0      	adds	r2, #176	@ 0xb0
 800926a:	2100      	movs	r1, #0
 800926c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009270:	2302      	movs	r3, #2
 8009272:	e0d4      	b.n	800941e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009274:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009278:	2100      	movs	r1, #0
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f002 fe36 	bl	800beec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	32b0      	adds	r2, #176	@ 0xb0
 800928a:	68f9      	ldr	r1, [r7, #12]
 800928c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	32b0      	adds	r2, #176	@ 0xb0
 800929a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	7c1b      	ldrb	r3, [r3, #16]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d138      	bne.n	800931e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80092ac:	4b5e      	ldr	r3, [pc, #376]	@ (8009428 <USBD_CDC_Init+0x1e4>)
 80092ae:	7819      	ldrb	r1, [r3, #0]
 80092b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092b4:	2202      	movs	r2, #2
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f002 fbe6 	bl	800ba88 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80092bc:	4b5a      	ldr	r3, [pc, #360]	@ (8009428 <USBD_CDC_Init+0x1e4>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	f003 020f 	and.w	r2, r3, #15
 80092c4:	6879      	ldr	r1, [r7, #4]
 80092c6:	4613      	mov	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	440b      	add	r3, r1
 80092d0:	3324      	adds	r3, #36	@ 0x24
 80092d2:	2201      	movs	r2, #1
 80092d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80092d6:	4b55      	ldr	r3, [pc, #340]	@ (800942c <USBD_CDC_Init+0x1e8>)
 80092d8:	7819      	ldrb	r1, [r3, #0]
 80092da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092de:	2202      	movs	r2, #2
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f002 fbd1 	bl	800ba88 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80092e6:	4b51      	ldr	r3, [pc, #324]	@ (800942c <USBD_CDC_Init+0x1e8>)
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	f003 020f 	and.w	r2, r3, #15
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	4613      	mov	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	440b      	add	r3, r1
 80092fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80092fe:	2201      	movs	r2, #1
 8009300:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009302:	4b4b      	ldr	r3, [pc, #300]	@ (8009430 <USBD_CDC_Init+0x1ec>)
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	f003 020f 	and.w	r2, r3, #15
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	440b      	add	r3, r1
 8009316:	3326      	adds	r3, #38	@ 0x26
 8009318:	2210      	movs	r2, #16
 800931a:	801a      	strh	r2, [r3, #0]
 800931c:	e035      	b.n	800938a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800931e:	4b42      	ldr	r3, [pc, #264]	@ (8009428 <USBD_CDC_Init+0x1e4>)
 8009320:	7819      	ldrb	r1, [r3, #0]
 8009322:	2340      	movs	r3, #64	@ 0x40
 8009324:	2202      	movs	r2, #2
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f002 fbae 	bl	800ba88 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800932c:	4b3e      	ldr	r3, [pc, #248]	@ (8009428 <USBD_CDC_Init+0x1e4>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	f003 020f 	and.w	r2, r3, #15
 8009334:	6879      	ldr	r1, [r7, #4]
 8009336:	4613      	mov	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	440b      	add	r3, r1
 8009340:	3324      	adds	r3, #36	@ 0x24
 8009342:	2201      	movs	r2, #1
 8009344:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009346:	4b39      	ldr	r3, [pc, #228]	@ (800942c <USBD_CDC_Init+0x1e8>)
 8009348:	7819      	ldrb	r1, [r3, #0]
 800934a:	2340      	movs	r3, #64	@ 0x40
 800934c:	2202      	movs	r2, #2
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f002 fb9a 	bl	800ba88 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009354:	4b35      	ldr	r3, [pc, #212]	@ (800942c <USBD_CDC_Init+0x1e8>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	f003 020f 	and.w	r2, r3, #15
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	440b      	add	r3, r1
 8009368:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800936c:	2201      	movs	r2, #1
 800936e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009370:	4b2f      	ldr	r3, [pc, #188]	@ (8009430 <USBD_CDC_Init+0x1ec>)
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	f003 020f 	and.w	r2, r3, #15
 8009378:	6879      	ldr	r1, [r7, #4]
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	440b      	add	r3, r1
 8009384:	3326      	adds	r3, #38	@ 0x26
 8009386:	2210      	movs	r2, #16
 8009388:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800938a:	4b29      	ldr	r3, [pc, #164]	@ (8009430 <USBD_CDC_Init+0x1ec>)
 800938c:	7819      	ldrb	r1, [r3, #0]
 800938e:	2308      	movs	r3, #8
 8009390:	2203      	movs	r2, #3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f002 fb78 	bl	800ba88 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009398:	4b25      	ldr	r3, [pc, #148]	@ (8009430 <USBD_CDC_Init+0x1ec>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	f003 020f 	and.w	r2, r3, #15
 80093a0:	6879      	ldr	r1, [r7, #4]
 80093a2:	4613      	mov	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	440b      	add	r3, r1
 80093ac:	3324      	adds	r3, #36	@ 0x24
 80093ae:	2201      	movs	r2, #1
 80093b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	33b0      	adds	r3, #176	@ 0xb0
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4413      	add	r3, r2
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80093e8:	2302      	movs	r3, #2
 80093ea:	e018      	b.n	800941e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	7c1b      	ldrb	r3, [r3, #16]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10a      	bne.n	800940a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093f4:	4b0d      	ldr	r3, [pc, #52]	@ (800942c <USBD_CDC_Init+0x1e8>)
 80093f6:	7819      	ldrb	r1, [r3, #0]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80093fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f002 fcba 	bl	800bd7c <USBD_LL_PrepareReceive>
 8009408:	e008      	b.n	800941c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800940a:	4b08      	ldr	r3, [pc, #32]	@ (800942c <USBD_CDC_Init+0x1e8>)
 800940c:	7819      	ldrb	r1, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009414:	2340      	movs	r3, #64	@ 0x40
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f002 fcb0 	bl	800bd7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20000093 	.word	0x20000093
 800942c:	20000094 	.word	0x20000094
 8009430:	20000095 	.word	0x20000095

08009434 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009440:	4b3a      	ldr	r3, [pc, #232]	@ (800952c <USBD_CDC_DeInit+0xf8>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	4619      	mov	r1, r3
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f002 fb5c 	bl	800bb04 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800944c:	4b37      	ldr	r3, [pc, #220]	@ (800952c <USBD_CDC_DeInit+0xf8>)
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	f003 020f 	and.w	r2, r3, #15
 8009454:	6879      	ldr	r1, [r7, #4]
 8009456:	4613      	mov	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	440b      	add	r3, r1
 8009460:	3324      	adds	r3, #36	@ 0x24
 8009462:	2200      	movs	r2, #0
 8009464:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009466:	4b32      	ldr	r3, [pc, #200]	@ (8009530 <USBD_CDC_DeInit+0xfc>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	4619      	mov	r1, r3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f002 fb49 	bl	800bb04 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009472:	4b2f      	ldr	r3, [pc, #188]	@ (8009530 <USBD_CDC_DeInit+0xfc>)
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	f003 020f 	and.w	r2, r3, #15
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	440b      	add	r3, r1
 8009486:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800948a:	2200      	movs	r2, #0
 800948c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800948e:	4b29      	ldr	r3, [pc, #164]	@ (8009534 <USBD_CDC_DeInit+0x100>)
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f002 fb35 	bl	800bb04 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800949a:	4b26      	ldr	r3, [pc, #152]	@ (8009534 <USBD_CDC_DeInit+0x100>)
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	f003 020f 	and.w	r2, r3, #15
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	4613      	mov	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	440b      	add	r3, r1
 80094ae:	3324      	adds	r3, #36	@ 0x24
 80094b0:	2200      	movs	r2, #0
 80094b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80094b4:	4b1f      	ldr	r3, [pc, #124]	@ (8009534 <USBD_CDC_DeInit+0x100>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	f003 020f 	and.w	r2, r3, #15
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	440b      	add	r3, r1
 80094c8:	3326      	adds	r3, #38	@ 0x26
 80094ca:	2200      	movs	r2, #0
 80094cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	32b0      	adds	r2, #176	@ 0xb0
 80094d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01f      	beq.n	8009520 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	33b0      	adds	r3, #176	@ 0xb0
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	32b0      	adds	r2, #176	@ 0xb0
 80094fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009502:	4618      	mov	r0, r3
 8009504:	f002 fce2 	bl	800becc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	32b0      	adds	r2, #176	@ 0xb0
 8009512:	2100      	movs	r1, #0
 8009514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20000093 	.word	0x20000093
 8009530:	20000094 	.word	0x20000094
 8009534:	20000095 	.word	0x20000095

08009538 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	32b0      	adds	r2, #176	@ 0xb0
 800954c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009550:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009552:	2300      	movs	r3, #0
 8009554:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d101      	bne.n	8009568 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009564:	2303      	movs	r3, #3
 8009566:	e0bf      	b.n	80096e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009570:	2b00      	cmp	r3, #0
 8009572:	d050      	beq.n	8009616 <USBD_CDC_Setup+0xde>
 8009574:	2b20      	cmp	r3, #32
 8009576:	f040 80af 	bne.w	80096d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	88db      	ldrh	r3, [r3, #6]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d03a      	beq.n	80095f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	b25b      	sxtb	r3, r3
 8009588:	2b00      	cmp	r3, #0
 800958a:	da1b      	bge.n	80095c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	33b0      	adds	r3, #176	@ 0xb0
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4413      	add	r3, r2
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80095a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095a4:	683a      	ldr	r2, [r7, #0]
 80095a6:	88d2      	ldrh	r2, [r2, #6]
 80095a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	88db      	ldrh	r3, [r3, #6]
 80095ae:	2b07      	cmp	r3, #7
 80095b0:	bf28      	it	cs
 80095b2:	2307      	movcs	r3, #7
 80095b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	89fa      	ldrh	r2, [r7, #14]
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 fdb1 	bl	800b124 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80095c2:	e090      	b.n	80096e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	785a      	ldrb	r2, [r3, #1]
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	88db      	ldrh	r3, [r3, #6]
 80095d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80095d4:	d803      	bhi.n	80095de <USBD_CDC_Setup+0xa6>
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	88db      	ldrh	r3, [r3, #6]
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	e000      	b.n	80095e0 <USBD_CDC_Setup+0xa8>
 80095de:	2240      	movs	r2, #64	@ 0x40
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80095e6:	6939      	ldr	r1, [r7, #16]
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80095ee:	461a      	mov	r2, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 fdc3 	bl	800b17c <USBD_CtlPrepareRx>
      break;
 80095f6:	e076      	b.n	80096e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	33b0      	adds	r3, #176	@ 0xb0
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	7850      	ldrb	r0, [r2, #1]
 800960e:	2200      	movs	r2, #0
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	4798      	blx	r3
      break;
 8009614:	e067      	b.n	80096e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	785b      	ldrb	r3, [r3, #1]
 800961a:	2b0b      	cmp	r3, #11
 800961c:	d851      	bhi.n	80096c2 <USBD_CDC_Setup+0x18a>
 800961e:	a201      	add	r2, pc, #4	@ (adr r2, 8009624 <USBD_CDC_Setup+0xec>)
 8009620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009624:	08009655 	.word	0x08009655
 8009628:	080096d1 	.word	0x080096d1
 800962c:	080096c3 	.word	0x080096c3
 8009630:	080096c3 	.word	0x080096c3
 8009634:	080096c3 	.word	0x080096c3
 8009638:	080096c3 	.word	0x080096c3
 800963c:	080096c3 	.word	0x080096c3
 8009640:	080096c3 	.word	0x080096c3
 8009644:	080096c3 	.word	0x080096c3
 8009648:	080096c3 	.word	0x080096c3
 800964c:	0800967f 	.word	0x0800967f
 8009650:	080096a9 	.word	0x080096a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b03      	cmp	r3, #3
 800965e:	d107      	bne.n	8009670 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009660:	f107 030a 	add.w	r3, r7, #10
 8009664:	2202      	movs	r2, #2
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f001 fd5b 	bl	800b124 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800966e:	e032      	b.n	80096d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 fce5 	bl	800b042 <USBD_CtlError>
            ret = USBD_FAIL;
 8009678:	2303      	movs	r3, #3
 800967a:	75fb      	strb	r3, [r7, #23]
          break;
 800967c:	e02b      	b.n	80096d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b03      	cmp	r3, #3
 8009688:	d107      	bne.n	800969a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800968a:	f107 030d 	add.w	r3, r7, #13
 800968e:	2201      	movs	r2, #1
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f001 fd46 	bl	800b124 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009698:	e01d      	b.n	80096d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f001 fcd0 	bl	800b042 <USBD_CtlError>
            ret = USBD_FAIL;
 80096a2:	2303      	movs	r3, #3
 80096a4:	75fb      	strb	r3, [r7, #23]
          break;
 80096a6:	e016      	b.n	80096d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b03      	cmp	r3, #3
 80096b2:	d00f      	beq.n	80096d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f001 fcc3 	bl	800b042 <USBD_CtlError>
            ret = USBD_FAIL;
 80096bc:	2303      	movs	r3, #3
 80096be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80096c0:	e008      	b.n	80096d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80096c2:	6839      	ldr	r1, [r7, #0]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 fcbc 	bl	800b042 <USBD_CtlError>
          ret = USBD_FAIL;
 80096ca:	2303      	movs	r3, #3
 80096cc:	75fb      	strb	r3, [r7, #23]
          break;
 80096ce:	e002      	b.n	80096d6 <USBD_CDC_Setup+0x19e>
          break;
 80096d0:	bf00      	nop
 80096d2:	e008      	b.n	80096e6 <USBD_CDC_Setup+0x1ae>
          break;
 80096d4:	bf00      	nop
      }
      break;
 80096d6:	e006      	b.n	80096e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f001 fcb1 	bl	800b042 <USBD_CtlError>
      ret = USBD_FAIL;
 80096e0:	2303      	movs	r3, #3
 80096e2:	75fb      	strb	r3, [r7, #23]
      break;
 80096e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3718      	adds	r7, #24
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009702:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	32b0      	adds	r2, #176	@ 0xb0
 800970e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009716:	2303      	movs	r3, #3
 8009718:	e065      	b.n	80097e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	32b0      	adds	r2, #176	@ 0xb0
 8009724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009728:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800972a:	78fb      	ldrb	r3, [r7, #3]
 800972c:	f003 020f 	and.w	r2, r3, #15
 8009730:	6879      	ldr	r1, [r7, #4]
 8009732:	4613      	mov	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	440b      	add	r3, r1
 800973c:	3318      	adds	r3, #24
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d02f      	beq.n	80097a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	f003 020f 	and.w	r2, r3, #15
 800974a:	6879      	ldr	r1, [r7, #4]
 800974c:	4613      	mov	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	440b      	add	r3, r1
 8009756:	3318      	adds	r3, #24
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	78fb      	ldrb	r3, [r7, #3]
 800975c:	f003 010f 	and.w	r1, r3, #15
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	460b      	mov	r3, r1
 8009764:	00db      	lsls	r3, r3, #3
 8009766:	440b      	add	r3, r1
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4403      	add	r3, r0
 800976c:	3344      	adds	r3, #68	@ 0x44
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	fbb2 f1f3 	udiv	r1, r2, r3
 8009774:	fb01 f303 	mul.w	r3, r1, r3
 8009778:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800977a:	2b00      	cmp	r3, #0
 800977c:	d112      	bne.n	80097a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800977e:	78fb      	ldrb	r3, [r7, #3]
 8009780:	f003 020f 	and.w	r2, r3, #15
 8009784:	6879      	ldr	r1, [r7, #4]
 8009786:	4613      	mov	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	440b      	add	r3, r1
 8009790:	3318      	adds	r3, #24
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009796:	78f9      	ldrb	r1, [r7, #3]
 8009798:	2300      	movs	r3, #0
 800979a:	2200      	movs	r2, #0
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f002 fab5 	bl	800bd0c <USBD_LL_Transmit>
 80097a2:	e01f      	b.n	80097e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	33b0      	adds	r3, #176	@ 0xb0
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d010      	beq.n	80097e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	33b0      	adds	r3, #176	@ 0xb0
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80097e0:	78fa      	ldrb	r2, [r7, #3]
 80097e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	32b0      	adds	r2, #176	@ 0xb0
 8009804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009808:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	32b0      	adds	r2, #176	@ 0xb0
 8009814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d101      	bne.n	8009820 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800981c:	2303      	movs	r3, #3
 800981e:	e01a      	b.n	8009856 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	4619      	mov	r1, r3
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f002 fae1 	bl	800bdec <USBD_LL_GetRxDataSize>
 800982a:	4602      	mov	r2, r0
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	33b0      	adds	r3, #176	@ 0xb0
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009850:	4611      	mov	r1, r2
 8009852:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	32b0      	adds	r2, #176	@ 0xb0
 8009870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009874:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d101      	bne.n	8009880 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800987c:	2303      	movs	r3, #3
 800987e:	e024      	b.n	80098ca <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	33b0      	adds	r3, #176	@ 0xb0
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d019      	beq.n	80098c8 <USBD_CDC_EP0_RxReady+0x6a>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800989a:	2bff      	cmp	r3, #255	@ 0xff
 800989c:	d014      	beq.n	80098c8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	33b0      	adds	r3, #176	@ 0xb0
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80098b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80098be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	22ff      	movs	r2, #255	@ 0xff
 80098c4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
	...

080098d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098dc:	2182      	movs	r1, #130	@ 0x82
 80098de:	4818      	ldr	r0, [pc, #96]	@ (8009940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098e0:	f000 fd4f 	bl	800a382 <USBD_GetEpDesc>
 80098e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098e6:	2101      	movs	r1, #1
 80098e8:	4815      	ldr	r0, [pc, #84]	@ (8009940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098ea:	f000 fd4a 	bl	800a382 <USBD_GetEpDesc>
 80098ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098f0:	2181      	movs	r1, #129	@ 0x81
 80098f2:	4813      	ldr	r0, [pc, #76]	@ (8009940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098f4:	f000 fd45 	bl	800a382 <USBD_GetEpDesc>
 80098f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2210      	movs	r2, #16
 8009904:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d006      	beq.n	800991a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	2200      	movs	r2, #0
 8009910:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009914:	711a      	strb	r2, [r3, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d006      	beq.n	800992e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009928:	711a      	strb	r2, [r3, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2243      	movs	r2, #67	@ 0x43
 8009932:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009934:	4b02      	ldr	r3, [pc, #8]	@ (8009940 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009936:	4618      	mov	r0, r3
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20000050 	.word	0x20000050

08009944 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800994c:	2182      	movs	r1, #130	@ 0x82
 800994e:	4818      	ldr	r0, [pc, #96]	@ (80099b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009950:	f000 fd17 	bl	800a382 <USBD_GetEpDesc>
 8009954:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009956:	2101      	movs	r1, #1
 8009958:	4815      	ldr	r0, [pc, #84]	@ (80099b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800995a:	f000 fd12 	bl	800a382 <USBD_GetEpDesc>
 800995e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009960:	2181      	movs	r1, #129	@ 0x81
 8009962:	4813      	ldr	r0, [pc, #76]	@ (80099b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009964:	f000 fd0d 	bl	800a382 <USBD_GetEpDesc>
 8009968:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	2210      	movs	r2, #16
 8009974:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d006      	beq.n	800998a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2200      	movs	r2, #0
 8009980:	711a      	strb	r2, [r3, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f042 0202 	orr.w	r2, r2, #2
 8009988:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d006      	beq.n	800999e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	711a      	strb	r2, [r3, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f042 0202 	orr.w	r2, r2, #2
 800999c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2243      	movs	r2, #67	@ 0x43
 80099a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80099a4:	4b02      	ldr	r3, [pc, #8]	@ (80099b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	20000050 	.word	0x20000050

080099b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80099bc:	2182      	movs	r1, #130	@ 0x82
 80099be:	4818      	ldr	r0, [pc, #96]	@ (8009a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099c0:	f000 fcdf 	bl	800a382 <USBD_GetEpDesc>
 80099c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099c6:	2101      	movs	r1, #1
 80099c8:	4815      	ldr	r0, [pc, #84]	@ (8009a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099ca:	f000 fcda 	bl	800a382 <USBD_GetEpDesc>
 80099ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099d0:	2181      	movs	r1, #129	@ 0x81
 80099d2:	4813      	ldr	r0, [pc, #76]	@ (8009a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099d4:	f000 fcd5 	bl	800a382 <USBD_GetEpDesc>
 80099d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	2210      	movs	r2, #16
 80099e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d006      	beq.n	80099fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099f4:	711a      	strb	r2, [r3, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d006      	beq.n	8009a0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a08:	711a      	strb	r2, [r3, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2243      	movs	r2, #67	@ 0x43
 8009a12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a14:	4b02      	ldr	r3, [pc, #8]	@ (8009a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	20000050 	.word	0x20000050

08009a24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	220a      	movs	r2, #10
 8009a30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009a32:	4b03      	ldr	r3, [pc, #12]	@ (8009a40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	2000000c 	.word	0x2000000c

08009a44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e009      	b.n	8009a6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	33b0      	adds	r3, #176	@ 0xb0
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	32b0      	adds	r2, #176	@ 0xb0
 8009a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a92:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d101      	bne.n	8009a9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e008      	b.n	8009ab0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	371c      	adds	r7, #28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	32b0      	adds	r2, #176	@ 0xb0
 8009ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d101      	bne.n	8009ae0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e004      	b.n	8009aea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
	...

08009af8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	32b0      	adds	r2, #176	@ 0xb0
 8009b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009b10:	2301      	movs	r3, #1
 8009b12:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d101      	bne.n	8009b1e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e025      	b.n	8009b6a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d11f      	bne.n	8009b68 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009b30:	4b10      	ldr	r3, [pc, #64]	@ (8009b74 <USBD_CDC_TransmitPacket+0x7c>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	f003 020f 	and.w	r2, r3, #15
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4403      	add	r3, r0
 8009b4a:	3318      	adds	r3, #24
 8009b4c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009b4e:	4b09      	ldr	r3, [pc, #36]	@ (8009b74 <USBD_CDC_TransmitPacket+0x7c>)
 8009b50:	7819      	ldrb	r1, [r3, #0]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f002 f8d4 	bl	800bd0c <USBD_LL_Transmit>

    ret = USBD_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20000093 	.word	0x20000093

08009b78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	32b0      	adds	r2, #176	@ 0xb0
 8009b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b8e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	32b0      	adds	r2, #176	@ 0xb0
 8009b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e018      	b.n	8009bd8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	7c1b      	ldrb	r3, [r3, #16]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10a      	bne.n	8009bc4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009bae:	4b0c      	ldr	r3, [pc, #48]	@ (8009be0 <USBD_CDC_ReceivePacket+0x68>)
 8009bb0:	7819      	ldrb	r1, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009bb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f002 f8dd 	bl	800bd7c <USBD_LL_PrepareReceive>
 8009bc2:	e008      	b.n	8009bd6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009bc4:	4b06      	ldr	r3, [pc, #24]	@ (8009be0 <USBD_CDC_ReceivePacket+0x68>)
 8009bc6:	7819      	ldrb	r1, [r3, #0]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009bce:	2340      	movs	r3, #64	@ 0x40
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f002 f8d3 	bl	800bd7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	20000094 	.word	0x20000094

08009be4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d101      	bne.n	8009bfc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e01f      	b.n	8009c3c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d003      	beq.n	8009c22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	79fa      	ldrb	r2, [r7, #7]
 8009c2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f001 feab 	bl	800b98c <USBD_LL_Init>
 8009c36:	4603      	mov	r3, r0
 8009c38:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e025      	b.n	8009ca8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	32ae      	adds	r2, #174	@ 0xae
 8009c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00f      	beq.n	8009c98 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	32ae      	adds	r2, #174	@ 0xae
 8009c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c88:	f107 020e 	add.w	r2, r7, #14
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	4798      	blx	r3
 8009c90:	4602      	mov	r2, r0
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f001 feb3 	bl	800ba24 <USBD_LL_Start>
 8009cbe:	4603      	mov	r3, r0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009cd0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d009      	beq.n	8009d0c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	78fa      	ldrb	r2, [r7, #3]
 8009d02:	4611      	mov	r1, r2
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	4798      	blx	r3
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	78fa      	ldrb	r2, [r7, #3]
 8009d30:	4611      	mov	r1, r2
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	4798      	blx	r3
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d001      	beq.n	8009d40 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b084      	sub	sp, #16
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f001 f936 	bl	800afce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009d70:	461a      	mov	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009d7e:	f003 031f 	and.w	r3, r3, #31
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	d01a      	beq.n	8009dbc <USBD_LL_SetupStage+0x72>
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d822      	bhi.n	8009dd0 <USBD_LL_SetupStage+0x86>
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d002      	beq.n	8009d94 <USBD_LL_SetupStage+0x4a>
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d00a      	beq.n	8009da8 <USBD_LL_SetupStage+0x5e>
 8009d92:	e01d      	b.n	8009dd0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fb63 	bl	800a468 <USBD_StdDevReq>
 8009da2:	4603      	mov	r3, r0
 8009da4:	73fb      	strb	r3, [r7, #15]
      break;
 8009da6:	e020      	b.n	8009dea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fbcb 	bl	800a54c <USBD_StdItfReq>
 8009db6:	4603      	mov	r3, r0
 8009db8:	73fb      	strb	r3, [r7, #15]
      break;
 8009dba:	e016      	b.n	8009dea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fc2d 	bl	800a624 <USBD_StdEPReq>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8009dce:	e00c      	b.n	8009dea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009dd6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 fec6 	bl	800bb70 <USBD_LL_StallEP>
 8009de4:	4603      	mov	r3, r0
 8009de6:	73fb      	strb	r3, [r7, #15]
      break;
 8009de8:	bf00      	nop
  }

  return ret;
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	607a      	str	r2, [r7, #4]
 8009e00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009e06:	7afb      	ldrb	r3, [r7, #11]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d16e      	bne.n	8009eea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009e12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009e1a:	2b03      	cmp	r3, #3
 8009e1c:	f040 8098 	bne.w	8009f50 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d913      	bls.n	8009e54 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	689a      	ldr	r2, [r3, #8]
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	1ad2      	subs	r2, r2, r3
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	68da      	ldr	r2, [r3, #12]
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	4293      	cmp	r3, r2
 8009e44:	bf28      	it	cs
 8009e46:	4613      	movcs	r3, r2
 8009e48:	461a      	mov	r2, r3
 8009e4a:	6879      	ldr	r1, [r7, #4]
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f001 f9b2 	bl	800b1b6 <USBD_CtlContinueRx>
 8009e52:	e07d      	b.n	8009f50 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e5a:	f003 031f 	and.w	r3, r3, #31
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d014      	beq.n	8009e8c <USBD_LL_DataOutStage+0x98>
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d81d      	bhi.n	8009ea2 <USBD_LL_DataOutStage+0xae>
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d002      	beq.n	8009e70 <USBD_LL_DataOutStage+0x7c>
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d003      	beq.n	8009e76 <USBD_LL_DataOutStage+0x82>
 8009e6e:	e018      	b.n	8009ea2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009e70:	2300      	movs	r3, #0
 8009e72:	75bb      	strb	r3, [r7, #22]
            break;
 8009e74:	e018      	b.n	8009ea8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	4619      	mov	r1, r3
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f000 fa64 	bl	800a34e <USBD_CoreFindIF>
 8009e86:	4603      	mov	r3, r0
 8009e88:	75bb      	strb	r3, [r7, #22]
            break;
 8009e8a:	e00d      	b.n	8009ea8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	4619      	mov	r1, r3
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f000 fa66 	bl	800a368 <USBD_CoreFindEP>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	75bb      	strb	r3, [r7, #22]
            break;
 8009ea0:	e002      	b.n	8009ea8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	75bb      	strb	r3, [r7, #22]
            break;
 8009ea6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009ea8:	7dbb      	ldrb	r3, [r7, #22]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d119      	bne.n	8009ee2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	d113      	bne.n	8009ee2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009eba:	7dba      	ldrb	r2, [r7, #22]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	32ae      	adds	r2, #174	@ 0xae
 8009ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00b      	beq.n	8009ee2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009eca:	7dba      	ldrb	r2, [r7, #22]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009ed2:	7dba      	ldrb	r2, [r7, #22]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	32ae      	adds	r2, #174	@ 0xae
 8009ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f001 f978 	bl	800b1d8 <USBD_CtlSendStatus>
 8009ee8:	e032      	b.n	8009f50 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009eea:	7afb      	ldrb	r3, [r7, #11]
 8009eec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f000 fa37 	bl	800a368 <USBD_CoreFindEP>
 8009efa:	4603      	mov	r3, r0
 8009efc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009efe:	7dbb      	ldrb	r3, [r7, #22]
 8009f00:	2bff      	cmp	r3, #255	@ 0xff
 8009f02:	d025      	beq.n	8009f50 <USBD_LL_DataOutStage+0x15c>
 8009f04:	7dbb      	ldrb	r3, [r7, #22]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d122      	bne.n	8009f50 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d117      	bne.n	8009f46 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009f16:	7dba      	ldrb	r2, [r7, #22]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	32ae      	adds	r2, #174	@ 0xae
 8009f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f20:	699b      	ldr	r3, [r3, #24]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00f      	beq.n	8009f46 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009f26:	7dba      	ldrb	r2, [r7, #22]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009f2e:	7dba      	ldrb	r2, [r7, #22]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	32ae      	adds	r2, #174	@ 0xae
 8009f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	7afa      	ldrb	r2, [r7, #11]
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	4798      	blx	r3
 8009f42:	4603      	mov	r3, r0
 8009f44:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009f46:	7dfb      	ldrb	r3, [r7, #23]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	e000      	b.n	8009f52 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3718      	adds	r7, #24
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b086      	sub	sp, #24
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	60f8      	str	r0, [r7, #12]
 8009f62:	460b      	mov	r3, r1
 8009f64:	607a      	str	r2, [r7, #4]
 8009f66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009f68:	7afb      	ldrb	r3, [r7, #11]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d16f      	bne.n	800a04e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3314      	adds	r3, #20
 8009f72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d15a      	bne.n	800a034 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	689a      	ldr	r2, [r3, #8]
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d914      	bls.n	8009fb4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	689a      	ldr	r2, [r3, #8]
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	1ad2      	subs	r2, r2, r3
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	6879      	ldr	r1, [r7, #4]
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f001 f8da 	bl	800b15a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	2200      	movs	r2, #0
 8009faa:	2100      	movs	r1, #0
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f001 fee5 	bl	800bd7c <USBD_LL_PrepareReceive>
 8009fb2:	e03f      	b.n	800a034 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d11c      	bne.n	8009ffa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d316      	bcc.n	8009ffa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d20f      	bcs.n	8009ffa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009fda:	2200      	movs	r2, #0
 8009fdc:	2100      	movs	r1, #0
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f001 f8bb 	bl	800b15a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fec:	2300      	movs	r3, #0
 8009fee:	2200      	movs	r2, #0
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f001 fec2 	bl	800bd7c <USBD_LL_PrepareReceive>
 8009ff8:	e01c      	b.n	800a034 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b03      	cmp	r3, #3
 800a004:	d10f      	bne.n	800a026 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d009      	beq.n	800a026 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a026:	2180      	movs	r1, #128	@ 0x80
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f001 fda1 	bl	800bb70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f001 f8e5 	bl	800b1fe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d03a      	beq.n	800a0b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f7ff fe42 	bl	8009cc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a04c:	e032      	b.n	800a0b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a04e:	7afb      	ldrb	r3, [r7, #11]
 800a050:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a054:	b2db      	uxtb	r3, r3
 800a056:	4619      	mov	r1, r3
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 f985 	bl	800a368 <USBD_CoreFindEP>
 800a05e:	4603      	mov	r3, r0
 800a060:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a062:	7dfb      	ldrb	r3, [r7, #23]
 800a064:	2bff      	cmp	r3, #255	@ 0xff
 800a066:	d025      	beq.n	800a0b4 <USBD_LL_DataInStage+0x15a>
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d122      	bne.n	800a0b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b03      	cmp	r3, #3
 800a078:	d11c      	bne.n	800a0b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a07a:	7dfa      	ldrb	r2, [r7, #23]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	32ae      	adds	r2, #174	@ 0xae
 800a080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d014      	beq.n	800a0b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a08a:	7dfa      	ldrb	r2, [r7, #23]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a092:	7dfa      	ldrb	r2, [r7, #23]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	32ae      	adds	r2, #174	@ 0xae
 800a098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	7afa      	ldrb	r2, [r7, #11]
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	4798      	blx	r3
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a0aa:	7dbb      	ldrb	r3, [r7, #22]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d001      	beq.n	800a0b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a0b0:	7dbb      	ldrb	r3, [r7, #22]
 800a0b2:	e000      	b.n	800a0b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3718      	adds	r7, #24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b084      	sub	sp, #16
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d014      	beq.n	800a124 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00e      	beq.n	800a124 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	6852      	ldr	r2, [r2, #4]
 800a112:	b2d2      	uxtb	r2, r2
 800a114:	4611      	mov	r1, r2
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	4798      	blx	r3
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a120:	2303      	movs	r3, #3
 800a122:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a124:	2340      	movs	r3, #64	@ 0x40
 800a126:	2200      	movs	r2, #0
 800a128:	2100      	movs	r1, #0
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f001 fcac 	bl	800ba88 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2240      	movs	r2, #64	@ 0x40
 800a13c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a140:	2340      	movs	r3, #64	@ 0x40
 800a142:	2200      	movs	r2, #0
 800a144:	2180      	movs	r1, #128	@ 0x80
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f001 fc9e 	bl	800ba88 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2240      	movs	r2, #64	@ 0x40
 800a156:	621a      	str	r2, [r3, #32]

  return ret;
 800a158:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a162:	b480      	push	{r7}
 800a164:	b083      	sub	sp, #12
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	78fa      	ldrb	r2, [r7, #3]
 800a172:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a182:	b480      	push	{r7}
 800a184:	b083      	sub	sp, #12
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b04      	cmp	r3, #4
 800a194:	d006      	beq.n	800a1a4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a19c:	b2da      	uxtb	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2204      	movs	r2, #4
 800a1a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b083      	sub	sp, #12
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d106      	bne.n	800a1dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b082      	sub	sp, #8
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d110      	bne.n	800a220 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00b      	beq.n	800a220 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a20e:	69db      	ldr	r3, [r3, #28]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d005      	beq.n	800a220 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a21a:	69db      	ldr	r3, [r3, #28]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b082      	sub	sp, #8
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	460b      	mov	r3, r1
 800a234:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	32ae      	adds	r2, #174	@ 0xae
 800a240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a248:	2303      	movs	r3, #3
 800a24a:	e01c      	b.n	800a286 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a252:	b2db      	uxtb	r3, r3
 800a254:	2b03      	cmp	r3, #3
 800a256:	d115      	bne.n	800a284 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	32ae      	adds	r2, #174	@ 0xae
 800a262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a266:	6a1b      	ldr	r3, [r3, #32]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00b      	beq.n	800a284 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	32ae      	adds	r2, #174	@ 0xae
 800a276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	78fa      	ldrb	r2, [r7, #3]
 800a27e:	4611      	mov	r1, r2
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b082      	sub	sp, #8
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	460b      	mov	r3, r1
 800a298:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	32ae      	adds	r2, #174	@ 0xae
 800a2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d101      	bne.n	800a2b0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e01c      	b.n	800a2ea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	2b03      	cmp	r3, #3
 800a2ba:	d115      	bne.n	800a2e8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	32ae      	adds	r2, #174	@ 0xae
 800a2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00b      	beq.n	800a2e8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	32ae      	adds	r2, #174	@ 0xae
 800a2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e0:	78fa      	ldrb	r2, [r7, #3]
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00e      	beq.n	800a344 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	6852      	ldr	r2, [r2, #4]
 800a332:	b2d2      	uxtb	r2, r2
 800a334:	4611      	mov	r1, r2
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	4798      	blx	r3
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a340:	2303      	movs	r3, #3
 800a342:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a344:	7bfb      	ldrb	r3, [r7, #15]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	460b      	mov	r3, r1
 800a358:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a35a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	460b      	mov	r3, r1
 800a372:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a374:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a376:	4618      	mov	r0, r3
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr

0800a382 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b086      	sub	sp, #24
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	460b      	mov	r3, r1
 800a38c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a396:	2300      	movs	r3, #0
 800a398:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	885b      	ldrh	r3, [r3, #2]
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	7812      	ldrb	r2, [r2, #0]
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d91f      	bls.n	800a3e8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a3ae:	e013      	b.n	800a3d8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a3b0:	f107 030a 	add.w	r3, r7, #10
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6978      	ldr	r0, [r7, #20]
 800a3b8:	f000 f81b 	bl	800a3f2 <USBD_GetNextDesc>
 800a3bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	785b      	ldrb	r3, [r3, #1]
 800a3c2:	2b05      	cmp	r3, #5
 800a3c4:	d108      	bne.n	800a3d8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	789b      	ldrb	r3, [r3, #2]
 800a3ce:	78fa      	ldrb	r2, [r7, #3]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d008      	beq.n	800a3e6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	885b      	ldrh	r3, [r3, #2]
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	897b      	ldrh	r3, [r7, #10]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d8e5      	bhi.n	800a3b0 <USBD_GetEpDesc+0x2e>
 800a3e4:	e000      	b.n	800a3e8 <USBD_GetEpDesc+0x66>
          break;
 800a3e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a3e8:	693b      	ldr	r3, [r7, #16]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3718      	adds	r7, #24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b085      	sub	sp, #20
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	881b      	ldrh	r3, [r3, #0]
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	7812      	ldrb	r2, [r2, #0]
 800a408:	4413      	add	r3, r2
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	461a      	mov	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4413      	add	r3, r2
 800a41a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a41c:	68fb      	ldr	r3, [r7, #12]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3714      	adds	r7, #20
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b087      	sub	sp, #28
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	3301      	adds	r3, #1
 800a440:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a448:	8a3b      	ldrh	r3, [r7, #16]
 800a44a:	021b      	lsls	r3, r3, #8
 800a44c:	b21a      	sxth	r2, r3
 800a44e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a452:	4313      	orrs	r3, r2
 800a454:	b21b      	sxth	r3, r3
 800a456:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a458:	89fb      	ldrh	r3, [r7, #14]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
	...

0800a468 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a472:	2300      	movs	r3, #0
 800a474:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a47e:	2b40      	cmp	r3, #64	@ 0x40
 800a480:	d005      	beq.n	800a48e <USBD_StdDevReq+0x26>
 800a482:	2b40      	cmp	r3, #64	@ 0x40
 800a484:	d857      	bhi.n	800a536 <USBD_StdDevReq+0xce>
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00f      	beq.n	800a4aa <USBD_StdDevReq+0x42>
 800a48a:	2b20      	cmp	r3, #32
 800a48c:	d153      	bne.n	800a536 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	32ae      	adds	r2, #174	@ 0xae
 800a498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	6839      	ldr	r1, [r7, #0]
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	4798      	blx	r3
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4a8:	e04a      	b.n	800a540 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	785b      	ldrb	r3, [r3, #1]
 800a4ae:	2b09      	cmp	r3, #9
 800a4b0:	d83b      	bhi.n	800a52a <USBD_StdDevReq+0xc2>
 800a4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b8 <USBD_StdDevReq+0x50>)
 800a4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b8:	0800a50d 	.word	0x0800a50d
 800a4bc:	0800a521 	.word	0x0800a521
 800a4c0:	0800a52b 	.word	0x0800a52b
 800a4c4:	0800a517 	.word	0x0800a517
 800a4c8:	0800a52b 	.word	0x0800a52b
 800a4cc:	0800a4eb 	.word	0x0800a4eb
 800a4d0:	0800a4e1 	.word	0x0800a4e1
 800a4d4:	0800a52b 	.word	0x0800a52b
 800a4d8:	0800a503 	.word	0x0800a503
 800a4dc:	0800a4f5 	.word	0x0800a4f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fa3c 	bl	800a960 <USBD_GetDescriptor>
          break;
 800a4e8:	e024      	b.n	800a534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a4ea:	6839      	ldr	r1, [r7, #0]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fbcb 	bl	800ac88 <USBD_SetAddress>
          break;
 800a4f2:	e01f      	b.n	800a534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fc0a 	bl	800ad10 <USBD_SetConfig>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	73fb      	strb	r3, [r7, #15]
          break;
 800a500:	e018      	b.n	800a534 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fcad 	bl	800ae64 <USBD_GetConfig>
          break;
 800a50a:	e013      	b.n	800a534 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a50c:	6839      	ldr	r1, [r7, #0]
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fcde 	bl	800aed0 <USBD_GetStatus>
          break;
 800a514:	e00e      	b.n	800a534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fd0d 	bl	800af38 <USBD_SetFeature>
          break;
 800a51e:	e009      	b.n	800a534 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fd31 	bl	800af8a <USBD_ClrFeature>
          break;
 800a528:	e004      	b.n	800a534 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a52a:	6839      	ldr	r1, [r7, #0]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fd88 	bl	800b042 <USBD_CtlError>
          break;
 800a532:	bf00      	nop
      }
      break;
 800a534:	e004      	b.n	800a540 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a536:	6839      	ldr	r1, [r7, #0]
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fd82 	bl	800b042 <USBD_CtlError>
      break;
 800a53e:	bf00      	nop
  }

  return ret;
 800a540:	7bfb      	ldrb	r3, [r7, #15]
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop

0800a54c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a556:	2300      	movs	r3, #0
 800a558:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a562:	2b40      	cmp	r3, #64	@ 0x40
 800a564:	d005      	beq.n	800a572 <USBD_StdItfReq+0x26>
 800a566:	2b40      	cmp	r3, #64	@ 0x40
 800a568:	d852      	bhi.n	800a610 <USBD_StdItfReq+0xc4>
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d001      	beq.n	800a572 <USBD_StdItfReq+0x26>
 800a56e:	2b20      	cmp	r3, #32
 800a570:	d14e      	bne.n	800a610 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	3b01      	subs	r3, #1
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d840      	bhi.n	800a602 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	889b      	ldrh	r3, [r3, #4]
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b01      	cmp	r3, #1
 800a588:	d836      	bhi.n	800a5f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	889b      	ldrh	r3, [r3, #4]
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	4619      	mov	r1, r3
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7ff fedb 	bl	800a34e <USBD_CoreFindIF>
 800a598:	4603      	mov	r3, r0
 800a59a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a59c:	7bbb      	ldrb	r3, [r7, #14]
 800a59e:	2bff      	cmp	r3, #255	@ 0xff
 800a5a0:	d01d      	beq.n	800a5de <USBD_StdItfReq+0x92>
 800a5a2:	7bbb      	ldrb	r3, [r7, #14]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d11a      	bne.n	800a5de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a5a8:	7bba      	ldrb	r2, [r7, #14]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	32ae      	adds	r2, #174	@ 0xae
 800a5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00f      	beq.n	800a5d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a5b8:	7bba      	ldrb	r2, [r7, #14]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a5c0:	7bba      	ldrb	r2, [r7, #14]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	32ae      	adds	r2, #174	@ 0xae
 800a5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	6839      	ldr	r1, [r7, #0]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	4798      	blx	r3
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a5d6:	e004      	b.n	800a5e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a5dc:	e001      	b.n	800a5e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	88db      	ldrh	r3, [r3, #6]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d110      	bne.n	800a60c <USBD_StdItfReq+0xc0>
 800a5ea:	7bfb      	ldrb	r3, [r7, #15]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10d      	bne.n	800a60c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fdf1 	bl	800b1d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a5f6:	e009      	b.n	800a60c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fd21 	bl	800b042 <USBD_CtlError>
          break;
 800a600:	e004      	b.n	800a60c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fd1c 	bl	800b042 <USBD_CtlError>
          break;
 800a60a:	e000      	b.n	800a60e <USBD_StdItfReq+0xc2>
          break;
 800a60c:	bf00      	nop
      }
      break;
 800a60e:	e004      	b.n	800a61a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fd15 	bl	800b042 <USBD_CtlError>
      break;
 800a618:	bf00      	nop
  }

  return ret;
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a62e:	2300      	movs	r3, #0
 800a630:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	889b      	ldrh	r3, [r3, #4]
 800a636:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a640:	2b40      	cmp	r3, #64	@ 0x40
 800a642:	d007      	beq.n	800a654 <USBD_StdEPReq+0x30>
 800a644:	2b40      	cmp	r3, #64	@ 0x40
 800a646:	f200 817f 	bhi.w	800a948 <USBD_StdEPReq+0x324>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d02a      	beq.n	800a6a4 <USBD_StdEPReq+0x80>
 800a64e:	2b20      	cmp	r3, #32
 800a650:	f040 817a 	bne.w	800a948 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a654:	7bbb      	ldrb	r3, [r7, #14]
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff fe85 	bl	800a368 <USBD_CoreFindEP>
 800a65e:	4603      	mov	r3, r0
 800a660:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a662:	7b7b      	ldrb	r3, [r7, #13]
 800a664:	2bff      	cmp	r3, #255	@ 0xff
 800a666:	f000 8174 	beq.w	800a952 <USBD_StdEPReq+0x32e>
 800a66a:	7b7b      	ldrb	r3, [r7, #13]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f040 8170 	bne.w	800a952 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a672:	7b7a      	ldrb	r2, [r7, #13]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a67a:	7b7a      	ldrb	r2, [r7, #13]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	32ae      	adds	r2, #174	@ 0xae
 800a680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 8163 	beq.w	800a952 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a68c:	7b7a      	ldrb	r2, [r7, #13]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	32ae      	adds	r2, #174	@ 0xae
 800a692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	6839      	ldr	r1, [r7, #0]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	4798      	blx	r3
 800a69e:	4603      	mov	r3, r0
 800a6a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a6a2:	e156      	b.n	800a952 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	785b      	ldrb	r3, [r3, #1]
 800a6a8:	2b03      	cmp	r3, #3
 800a6aa:	d008      	beq.n	800a6be <USBD_StdEPReq+0x9a>
 800a6ac:	2b03      	cmp	r3, #3
 800a6ae:	f300 8145 	bgt.w	800a93c <USBD_StdEPReq+0x318>
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f000 809b 	beq.w	800a7ee <USBD_StdEPReq+0x1ca>
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d03c      	beq.n	800a736 <USBD_StdEPReq+0x112>
 800a6bc:	e13e      	b.n	800a93c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d002      	beq.n	800a6d0 <USBD_StdEPReq+0xac>
 800a6ca:	2b03      	cmp	r3, #3
 800a6cc:	d016      	beq.n	800a6fc <USBD_StdEPReq+0xd8>
 800a6ce:	e02c      	b.n	800a72a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6d0:	7bbb      	ldrb	r3, [r7, #14]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00d      	beq.n	800a6f2 <USBD_StdEPReq+0xce>
 800a6d6:	7bbb      	ldrb	r3, [r7, #14]
 800a6d8:	2b80      	cmp	r3, #128	@ 0x80
 800a6da:	d00a      	beq.n	800a6f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6dc:	7bbb      	ldrb	r3, [r7, #14]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f001 fa45 	bl	800bb70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6e6:	2180      	movs	r1, #128	@ 0x80
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f001 fa41 	bl	800bb70 <USBD_LL_StallEP>
 800a6ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6f0:	e020      	b.n	800a734 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a6f2:	6839      	ldr	r1, [r7, #0]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fca4 	bl	800b042 <USBD_CtlError>
              break;
 800a6fa:	e01b      	b.n	800a734 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	885b      	ldrh	r3, [r3, #2]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10e      	bne.n	800a722 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a704:	7bbb      	ldrb	r3, [r7, #14]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00b      	beq.n	800a722 <USBD_StdEPReq+0xfe>
 800a70a:	7bbb      	ldrb	r3, [r7, #14]
 800a70c:	2b80      	cmp	r3, #128	@ 0x80
 800a70e:	d008      	beq.n	800a722 <USBD_StdEPReq+0xfe>
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	88db      	ldrh	r3, [r3, #6]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d104      	bne.n	800a722 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a718:	7bbb      	ldrb	r3, [r7, #14]
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f001 fa27 	bl	800bb70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fd58 	bl	800b1d8 <USBD_CtlSendStatus>

              break;
 800a728:	e004      	b.n	800a734 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fc88 	bl	800b042 <USBD_CtlError>
              break;
 800a732:	bf00      	nop
          }
          break;
 800a734:	e107      	b.n	800a946 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d002      	beq.n	800a748 <USBD_StdEPReq+0x124>
 800a742:	2b03      	cmp	r3, #3
 800a744:	d016      	beq.n	800a774 <USBD_StdEPReq+0x150>
 800a746:	e04b      	b.n	800a7e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a748:	7bbb      	ldrb	r3, [r7, #14]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00d      	beq.n	800a76a <USBD_StdEPReq+0x146>
 800a74e:	7bbb      	ldrb	r3, [r7, #14]
 800a750:	2b80      	cmp	r3, #128	@ 0x80
 800a752:	d00a      	beq.n	800a76a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f001 fa09 	bl	800bb70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a75e:	2180      	movs	r1, #128	@ 0x80
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 fa05 	bl	800bb70 <USBD_LL_StallEP>
 800a766:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a768:	e040      	b.n	800a7ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a76a:	6839      	ldr	r1, [r7, #0]
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 fc68 	bl	800b042 <USBD_CtlError>
              break;
 800a772:	e03b      	b.n	800a7ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	885b      	ldrh	r3, [r3, #2]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d136      	bne.n	800a7ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a782:	2b00      	cmp	r3, #0
 800a784:	d004      	beq.n	800a790 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a786:	7bbb      	ldrb	r3, [r7, #14]
 800a788:	4619      	mov	r1, r3
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f001 fa26 	bl	800bbdc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fd21 	bl	800b1d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a796:	7bbb      	ldrb	r3, [r7, #14]
 800a798:	4619      	mov	r1, r3
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff fde4 	bl	800a368 <USBD_CoreFindEP>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7a4:	7b7b      	ldrb	r3, [r7, #13]
 800a7a6:	2bff      	cmp	r3, #255	@ 0xff
 800a7a8:	d01f      	beq.n	800a7ea <USBD_StdEPReq+0x1c6>
 800a7aa:	7b7b      	ldrb	r3, [r7, #13]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d11c      	bne.n	800a7ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a7b0:	7b7a      	ldrb	r2, [r7, #13]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a7b8:	7b7a      	ldrb	r2, [r7, #13]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	32ae      	adds	r2, #174	@ 0xae
 800a7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d010      	beq.n	800a7ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a7c8:	7b7a      	ldrb	r2, [r7, #13]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	32ae      	adds	r2, #174	@ 0xae
 800a7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	6839      	ldr	r1, [r7, #0]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	4798      	blx	r3
 800a7da:	4603      	mov	r3, r0
 800a7dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a7de:	e004      	b.n	800a7ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fc2d 	bl	800b042 <USBD_CtlError>
              break;
 800a7e8:	e000      	b.n	800a7ec <USBD_StdEPReq+0x1c8>
              break;
 800a7ea:	bf00      	nop
          }
          break;
 800a7ec:	e0ab      	b.n	800a946 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d002      	beq.n	800a800 <USBD_StdEPReq+0x1dc>
 800a7fa:	2b03      	cmp	r3, #3
 800a7fc:	d032      	beq.n	800a864 <USBD_StdEPReq+0x240>
 800a7fe:	e097      	b.n	800a930 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a800:	7bbb      	ldrb	r3, [r7, #14]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d007      	beq.n	800a816 <USBD_StdEPReq+0x1f2>
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	2b80      	cmp	r3, #128	@ 0x80
 800a80a:	d004      	beq.n	800a816 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fc17 	bl	800b042 <USBD_CtlError>
                break;
 800a814:	e091      	b.n	800a93a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	da0b      	bge.n	800a836 <USBD_StdEPReq+0x212>
 800a81e:	7bbb      	ldrb	r3, [r7, #14]
 800a820:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a824:	4613      	mov	r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	3310      	adds	r3, #16
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	4413      	add	r3, r2
 800a832:	3304      	adds	r3, #4
 800a834:	e00b      	b.n	800a84e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a836:	7bbb      	ldrb	r3, [r7, #14]
 800a838:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a83c:	4613      	mov	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	4413      	add	r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	4413      	add	r3, r2
 800a84c:	3304      	adds	r3, #4
 800a84e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2202      	movs	r2, #2
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fc61 	bl	800b124 <USBD_CtlSendData>
              break;
 800a862:	e06a      	b.n	800a93a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	da11      	bge.n	800a890 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a86c:	7bbb      	ldrb	r3, [r7, #14]
 800a86e:	f003 020f 	and.w	r2, r3, #15
 800a872:	6879      	ldr	r1, [r7, #4]
 800a874:	4613      	mov	r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	4413      	add	r3, r2
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	440b      	add	r3, r1
 800a87e:	3324      	adds	r3, #36	@ 0x24
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d117      	bne.n	800a8b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a886:	6839      	ldr	r1, [r7, #0]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fbda 	bl	800b042 <USBD_CtlError>
                  break;
 800a88e:	e054      	b.n	800a93a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a890:	7bbb      	ldrb	r3, [r7, #14]
 800a892:	f003 020f 	and.w	r2, r3, #15
 800a896:	6879      	ldr	r1, [r7, #4]
 800a898:	4613      	mov	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	440b      	add	r3, r1
 800a8a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a8a6:	881b      	ldrh	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d104      	bne.n	800a8b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fbc7 	bl	800b042 <USBD_CtlError>
                  break;
 800a8b4:	e041      	b.n	800a93a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	da0b      	bge.n	800a8d6 <USBD_StdEPReq+0x2b2>
 800a8be:	7bbb      	ldrb	r3, [r7, #14]
 800a8c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	4413      	add	r3, r2
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	3310      	adds	r3, #16
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	e00b      	b.n	800a8ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8d6:	7bbb      	ldrb	r3, [r7, #14]
 800a8d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8dc:	4613      	mov	r3, r2
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4413      	add	r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	3304      	adds	r3, #4
 800a8ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a8f0:	7bbb      	ldrb	r3, [r7, #14]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <USBD_StdEPReq+0x2d8>
 800a8f6:	7bbb      	ldrb	r3, [r7, #14]
 800a8f8:	2b80      	cmp	r3, #128	@ 0x80
 800a8fa:	d103      	bne.n	800a904 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	2200      	movs	r2, #0
 800a900:	601a      	str	r2, [r3, #0]
 800a902:	e00e      	b.n	800a922 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a904:	7bbb      	ldrb	r3, [r7, #14]
 800a906:	4619      	mov	r1, r3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f001 f99d 	bl	800bc48 <USBD_LL_IsStallEP>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d003      	beq.n	800a91c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	2201      	movs	r2, #1
 800a918:	601a      	str	r2, [r3, #0]
 800a91a:	e002      	b.n	800a922 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	2200      	movs	r2, #0
 800a920:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2202      	movs	r2, #2
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fbfb 	bl	800b124 <USBD_CtlSendData>
              break;
 800a92e:	e004      	b.n	800a93a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fb85 	bl	800b042 <USBD_CtlError>
              break;
 800a938:	bf00      	nop
          }
          break;
 800a93a:	e004      	b.n	800a946 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fb7f 	bl	800b042 <USBD_CtlError>
          break;
 800a944:	bf00      	nop
      }
      break;
 800a946:	e005      	b.n	800a954 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fb79 	bl	800b042 <USBD_CtlError>
      break;
 800a950:	e000      	b.n	800a954 <USBD_StdEPReq+0x330>
      break;
 800a952:	bf00      	nop
  }

  return ret;
 800a954:	7bfb      	ldrb	r3, [r7, #15]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
	...

0800a960 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a96a:	2300      	movs	r3, #0
 800a96c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a96e:	2300      	movs	r3, #0
 800a970:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a972:	2300      	movs	r3, #0
 800a974:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	885b      	ldrh	r3, [r3, #2]
 800a97a:	0a1b      	lsrs	r3, r3, #8
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	3b01      	subs	r3, #1
 800a980:	2b0e      	cmp	r3, #14
 800a982:	f200 8152 	bhi.w	800ac2a <USBD_GetDescriptor+0x2ca>
 800a986:	a201      	add	r2, pc, #4	@ (adr r2, 800a98c <USBD_GetDescriptor+0x2c>)
 800a988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98c:	0800a9fd 	.word	0x0800a9fd
 800a990:	0800aa15 	.word	0x0800aa15
 800a994:	0800aa55 	.word	0x0800aa55
 800a998:	0800ac2b 	.word	0x0800ac2b
 800a99c:	0800ac2b 	.word	0x0800ac2b
 800a9a0:	0800abcb 	.word	0x0800abcb
 800a9a4:	0800abf7 	.word	0x0800abf7
 800a9a8:	0800ac2b 	.word	0x0800ac2b
 800a9ac:	0800ac2b 	.word	0x0800ac2b
 800a9b0:	0800ac2b 	.word	0x0800ac2b
 800a9b4:	0800ac2b 	.word	0x0800ac2b
 800a9b8:	0800ac2b 	.word	0x0800ac2b
 800a9bc:	0800ac2b 	.word	0x0800ac2b
 800a9c0:	0800ac2b 	.word	0x0800ac2b
 800a9c4:	0800a9c9 	.word	0x0800a9c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9ce:	69db      	ldr	r3, [r3, #28]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00b      	beq.n	800a9ec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9da:	69db      	ldr	r3, [r3, #28]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	7c12      	ldrb	r2, [r2, #16]
 800a9e0:	f107 0108 	add.w	r1, r7, #8
 800a9e4:	4610      	mov	r0, r2
 800a9e6:	4798      	blx	r3
 800a9e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9ea:	e126      	b.n	800ac3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fb27 	bl	800b042 <USBD_CtlError>
        err++;
 800a9f4:	7afb      	ldrb	r3, [r7, #11]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	72fb      	strb	r3, [r7, #11]
      break;
 800a9fa:	e11e      	b.n	800ac3a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	7c12      	ldrb	r2, [r2, #16]
 800aa08:	f107 0108 	add.w	r1, r7, #8
 800aa0c:	4610      	mov	r0, r2
 800aa0e:	4798      	blx	r3
 800aa10:	60f8      	str	r0, [r7, #12]
      break;
 800aa12:	e112      	b.n	800ac3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	7c1b      	ldrb	r3, [r3, #16]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10d      	bne.n	800aa38 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa24:	f107 0208 	add.w	r2, r7, #8
 800aa28:	4610      	mov	r0, r2
 800aa2a:	4798      	blx	r3
 800aa2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	3301      	adds	r3, #1
 800aa32:	2202      	movs	r2, #2
 800aa34:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aa36:	e100      	b.n	800ac3a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa40:	f107 0208 	add.w	r2, r7, #8
 800aa44:	4610      	mov	r0, r2
 800aa46:	4798      	blx	r3
 800aa48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	2202      	movs	r2, #2
 800aa50:	701a      	strb	r2, [r3, #0]
      break;
 800aa52:	e0f2      	b.n	800ac3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	885b      	ldrh	r3, [r3, #2]
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	2b05      	cmp	r3, #5
 800aa5c:	f200 80ac 	bhi.w	800abb8 <USBD_GetDescriptor+0x258>
 800aa60:	a201      	add	r2, pc, #4	@ (adr r2, 800aa68 <USBD_GetDescriptor+0x108>)
 800aa62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa66:	bf00      	nop
 800aa68:	0800aa81 	.word	0x0800aa81
 800aa6c:	0800aab5 	.word	0x0800aab5
 800aa70:	0800aae9 	.word	0x0800aae9
 800aa74:	0800ab1d 	.word	0x0800ab1d
 800aa78:	0800ab51 	.word	0x0800ab51
 800aa7c:	0800ab85 	.word	0x0800ab85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00b      	beq.n	800aaa4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	7c12      	ldrb	r2, [r2, #16]
 800aa98:	f107 0108 	add.w	r1, r7, #8
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	4798      	blx	r3
 800aaa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaa2:	e091      	b.n	800abc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 facb 	bl	800b042 <USBD_CtlError>
            err++;
 800aaac:	7afb      	ldrb	r3, [r7, #11]
 800aaae:	3301      	adds	r3, #1
 800aab0:	72fb      	strb	r3, [r7, #11]
          break;
 800aab2:	e089      	b.n	800abc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00b      	beq.n	800aad8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	7c12      	ldrb	r2, [r2, #16]
 800aacc:	f107 0108 	add.w	r1, r7, #8
 800aad0:	4610      	mov	r0, r2
 800aad2:	4798      	blx	r3
 800aad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aad6:	e077      	b.n	800abc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fab1 	bl	800b042 <USBD_CtlError>
            err++;
 800aae0:	7afb      	ldrb	r3, [r7, #11]
 800aae2:	3301      	adds	r3, #1
 800aae4:	72fb      	strb	r3, [r7, #11]
          break;
 800aae6:	e06f      	b.n	800abc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00b      	beq.n	800ab0c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	7c12      	ldrb	r2, [r2, #16]
 800ab00:	f107 0108 	add.w	r1, r7, #8
 800ab04:	4610      	mov	r0, r2
 800ab06:	4798      	blx	r3
 800ab08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab0a:	e05d      	b.n	800abc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fa97 	bl	800b042 <USBD_CtlError>
            err++;
 800ab14:	7afb      	ldrb	r3, [r7, #11]
 800ab16:	3301      	adds	r3, #1
 800ab18:	72fb      	strb	r3, [r7, #11]
          break;
 800ab1a:	e055      	b.n	800abc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00b      	beq.n	800ab40 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	7c12      	ldrb	r2, [r2, #16]
 800ab34:	f107 0108 	add.w	r1, r7, #8
 800ab38:	4610      	mov	r0, r2
 800ab3a:	4798      	blx	r3
 800ab3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab3e:	e043      	b.n	800abc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fa7d 	bl	800b042 <USBD_CtlError>
            err++;
 800ab48:	7afb      	ldrb	r3, [r7, #11]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab4e:	e03b      	b.n	800abc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab56:	695b      	ldr	r3, [r3, #20]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00b      	beq.n	800ab74 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab62:	695b      	ldr	r3, [r3, #20]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	7c12      	ldrb	r2, [r2, #16]
 800ab68:	f107 0108 	add.w	r1, r7, #8
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	4798      	blx	r3
 800ab70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab72:	e029      	b.n	800abc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fa63 	bl	800b042 <USBD_CtlError>
            err++;
 800ab7c:	7afb      	ldrb	r3, [r7, #11]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	72fb      	strb	r3, [r7, #11]
          break;
 800ab82:	e021      	b.n	800abc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00b      	beq.n	800aba8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	7c12      	ldrb	r2, [r2, #16]
 800ab9c:	f107 0108 	add.w	r1, r7, #8
 800aba0:	4610      	mov	r0, r2
 800aba2:	4798      	blx	r3
 800aba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aba6:	e00f      	b.n	800abc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fa49 	bl	800b042 <USBD_CtlError>
            err++;
 800abb0:	7afb      	ldrb	r3, [r7, #11]
 800abb2:	3301      	adds	r3, #1
 800abb4:	72fb      	strb	r3, [r7, #11]
          break;
 800abb6:	e007      	b.n	800abc8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fa41 	bl	800b042 <USBD_CtlError>
          err++;
 800abc0:	7afb      	ldrb	r3, [r7, #11]
 800abc2:	3301      	adds	r3, #1
 800abc4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800abc6:	bf00      	nop
      }
      break;
 800abc8:	e037      	b.n	800ac3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	7c1b      	ldrb	r3, [r3, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d109      	bne.n	800abe6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abda:	f107 0208 	add.w	r2, r7, #8
 800abde:	4610      	mov	r0, r2
 800abe0:	4798      	blx	r3
 800abe2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abe4:	e029      	b.n	800ac3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fa2a 	bl	800b042 <USBD_CtlError>
        err++;
 800abee:	7afb      	ldrb	r3, [r7, #11]
 800abf0:	3301      	adds	r3, #1
 800abf2:	72fb      	strb	r3, [r7, #11]
      break;
 800abf4:	e021      	b.n	800ac3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	7c1b      	ldrb	r3, [r3, #16]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10d      	bne.n	800ac1a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac06:	f107 0208 	add.w	r2, r7, #8
 800ac0a:	4610      	mov	r0, r2
 800ac0c:	4798      	blx	r3
 800ac0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	3301      	adds	r3, #1
 800ac14:	2207      	movs	r2, #7
 800ac16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac18:	e00f      	b.n	800ac3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 fa10 	bl	800b042 <USBD_CtlError>
        err++;
 800ac22:	7afb      	ldrb	r3, [r7, #11]
 800ac24:	3301      	adds	r3, #1
 800ac26:	72fb      	strb	r3, [r7, #11]
      break;
 800ac28:	e007      	b.n	800ac3a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fa08 	bl	800b042 <USBD_CtlError>
      err++;
 800ac32:	7afb      	ldrb	r3, [r7, #11]
 800ac34:	3301      	adds	r3, #1
 800ac36:	72fb      	strb	r3, [r7, #11]
      break;
 800ac38:	bf00      	nop
  }

  if (err != 0U)
 800ac3a:	7afb      	ldrb	r3, [r7, #11]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d11e      	bne.n	800ac7e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	88db      	ldrh	r3, [r3, #6]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d016      	beq.n	800ac76 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ac48:	893b      	ldrh	r3, [r7, #8]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00e      	beq.n	800ac6c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	88da      	ldrh	r2, [r3, #6]
 800ac52:	893b      	ldrh	r3, [r7, #8]
 800ac54:	4293      	cmp	r3, r2
 800ac56:	bf28      	it	cs
 800ac58:	4613      	movcs	r3, r2
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac5e:	893b      	ldrh	r3, [r7, #8]
 800ac60:	461a      	mov	r2, r3
 800ac62:	68f9      	ldr	r1, [r7, #12]
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 fa5d 	bl	800b124 <USBD_CtlSendData>
 800ac6a:	e009      	b.n	800ac80 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ac6c:	6839      	ldr	r1, [r7, #0]
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 f9e7 	bl	800b042 <USBD_CtlError>
 800ac74:	e004      	b.n	800ac80 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 faae 	bl	800b1d8 <USBD_CtlSendStatus>
 800ac7c:	e000      	b.n	800ac80 <USBD_GetDescriptor+0x320>
    return;
 800ac7e:	bf00      	nop
  }
}
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop

0800ac88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	889b      	ldrh	r3, [r3, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d131      	bne.n	800acfe <USBD_SetAddress+0x76>
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	88db      	ldrh	r3, [r3, #6]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d12d      	bne.n	800acfe <USBD_SetAddress+0x76>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	885b      	ldrh	r3, [r3, #2]
 800aca6:	2b7f      	cmp	r3, #127	@ 0x7f
 800aca8:	d829      	bhi.n	800acfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	885b      	ldrh	r3, [r3, #2]
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b03      	cmp	r3, #3
 800acc0:	d104      	bne.n	800accc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800acc2:	6839      	ldr	r1, [r7, #0]
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f9bc 	bl	800b042 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acca:	e01d      	b.n	800ad08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	7bfa      	ldrb	r2, [r7, #15]
 800acd0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	4619      	mov	r1, r3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 ffe1 	bl	800bca0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fa7a 	bl	800b1d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ace4:	7bfb      	ldrb	r3, [r7, #15]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d004      	beq.n	800acf4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2202      	movs	r2, #2
 800acee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acf2:	e009      	b.n	800ad08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acfc:	e004      	b.n	800ad08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f99e 	bl	800b042 <USBD_CtlError>
  }
}
 800ad06:	bf00      	nop
 800ad08:	bf00      	nop
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	885b      	ldrh	r3, [r3, #2]
 800ad22:	b2da      	uxtb	r2, r3
 800ad24:	4b4e      	ldr	r3, [pc, #312]	@ (800ae60 <USBD_SetConfig+0x150>)
 800ad26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad28:	4b4d      	ldr	r3, [pc, #308]	@ (800ae60 <USBD_SetConfig+0x150>)
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d905      	bls.n	800ad3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad30:	6839      	ldr	r1, [r7, #0]
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 f985 	bl	800b042 <USBD_CtlError>
    return USBD_FAIL;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e08c      	b.n	800ae56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d002      	beq.n	800ad4e <USBD_SetConfig+0x3e>
 800ad48:	2b03      	cmp	r3, #3
 800ad4a:	d029      	beq.n	800ada0 <USBD_SetConfig+0x90>
 800ad4c:	e075      	b.n	800ae3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ad4e:	4b44      	ldr	r3, [pc, #272]	@ (800ae60 <USBD_SetConfig+0x150>)
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d020      	beq.n	800ad98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ad56:	4b42      	ldr	r3, [pc, #264]	@ (800ae60 <USBD_SetConfig+0x150>)
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad60:	4b3f      	ldr	r3, [pc, #252]	@ (800ae60 <USBD_SetConfig+0x150>)
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7fe ffb9 	bl	8009cde <USBD_SetClassConfig>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d008      	beq.n	800ad88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f962 	bl	800b042 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2202      	movs	r2, #2
 800ad82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad86:	e065      	b.n	800ae54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fa25 	bl	800b1d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2203      	movs	r2, #3
 800ad92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ad96:	e05d      	b.n	800ae54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fa1d 	bl	800b1d8 <USBD_CtlSendStatus>
      break;
 800ad9e:	e059      	b.n	800ae54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ada0:	4b2f      	ldr	r3, [pc, #188]	@ (800ae60 <USBD_SetConfig+0x150>)
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d112      	bne.n	800adce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2202      	movs	r2, #2
 800adac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800adb0:	4b2b      	ldr	r3, [pc, #172]	@ (800ae60 <USBD_SetConfig+0x150>)
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	461a      	mov	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800adba:	4b29      	ldr	r3, [pc, #164]	@ (800ae60 <USBD_SetConfig+0x150>)
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	4619      	mov	r1, r3
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7fe ffa8 	bl	8009d16 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fa06 	bl	800b1d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800adcc:	e042      	b.n	800ae54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800adce:	4b24      	ldr	r3, [pc, #144]	@ (800ae60 <USBD_SetConfig+0x150>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	461a      	mov	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	429a      	cmp	r2, r3
 800adda:	d02a      	beq.n	800ae32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	4619      	mov	r1, r3
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7fe ff96 	bl	8009d16 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800adea:	4b1d      	ldr	r3, [pc, #116]	@ (800ae60 <USBD_SetConfig+0x150>)
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	461a      	mov	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800adf4:	4b1a      	ldr	r3, [pc, #104]	@ (800ae60 <USBD_SetConfig+0x150>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7fe ff6f 	bl	8009cde <USBD_SetClassConfig>
 800ae00:	4603      	mov	r3, r0
 800ae02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae04:	7bfb      	ldrb	r3, [r7, #15]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00f      	beq.n	800ae2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f918 	bl	800b042 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	4619      	mov	r1, r3
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7fe ff7b 	bl	8009d16 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2202      	movs	r2, #2
 800ae24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ae28:	e014      	b.n	800ae54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f9d4 	bl	800b1d8 <USBD_CtlSendStatus>
      break;
 800ae30:	e010      	b.n	800ae54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f9d0 	bl	800b1d8 <USBD_CtlSendStatus>
      break;
 800ae38:	e00c      	b.n	800ae54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f900 	bl	800b042 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae42:	4b07      	ldr	r3, [pc, #28]	@ (800ae60 <USBD_SetConfig+0x150>)
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f7fe ff64 	bl	8009d16 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ae4e:	2303      	movs	r3, #3
 800ae50:	73fb      	strb	r3, [r7, #15]
      break;
 800ae52:	bf00      	nop
  }

  return ret;
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	2000a568 	.word	0x2000a568

0800ae64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	88db      	ldrh	r3, [r3, #6]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d004      	beq.n	800ae80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f8e2 	bl	800b042 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ae7e:	e023      	b.n	800aec8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	dc02      	bgt.n	800ae92 <USBD_GetConfig+0x2e>
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	dc03      	bgt.n	800ae98 <USBD_GetConfig+0x34>
 800ae90:	e015      	b.n	800aebe <USBD_GetConfig+0x5a>
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d00b      	beq.n	800aeae <USBD_GetConfig+0x4a>
 800ae96:	e012      	b.n	800aebe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	3308      	adds	r3, #8
 800aea2:	2201      	movs	r2, #1
 800aea4:	4619      	mov	r1, r3
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f93c 	bl	800b124 <USBD_CtlSendData>
        break;
 800aeac:	e00c      	b.n	800aec8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f934 	bl	800b124 <USBD_CtlSendData>
        break;
 800aebc:	e004      	b.n	800aec8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f8be 	bl	800b042 <USBD_CtlError>
        break;
 800aec6:	bf00      	nop
}
 800aec8:	bf00      	nop
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	3b01      	subs	r3, #1
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	d81e      	bhi.n	800af26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	88db      	ldrh	r3, [r3, #6]
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d004      	beq.n	800aefa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aef0:	6839      	ldr	r1, [r7, #0]
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f8a5 	bl	800b042 <USBD_CtlError>
        break;
 800aef8:	e01a      	b.n	800af30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2201      	movs	r2, #1
 800aefe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800af06:	2b00      	cmp	r3, #0
 800af08:	d005      	beq.n	800af16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	f043 0202 	orr.w	r2, r3, #2
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	330c      	adds	r3, #12
 800af1a:	2202      	movs	r2, #2
 800af1c:	4619      	mov	r1, r3
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f900 	bl	800b124 <USBD_CtlSendData>
      break;
 800af24:	e004      	b.n	800af30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800af26:	6839      	ldr	r1, [r7, #0]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f88a 	bl	800b042 <USBD_CtlError>
      break;
 800af2e:	bf00      	nop
  }
}
 800af30:	bf00      	nop
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	885b      	ldrh	r3, [r3, #2]
 800af46:	2b01      	cmp	r3, #1
 800af48:	d107      	bne.n	800af5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 f940 	bl	800b1d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800af58:	e013      	b.n	800af82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	885b      	ldrh	r3, [r3, #2]
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d10b      	bne.n	800af7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	889b      	ldrh	r3, [r3, #4]
 800af66:	0a1b      	lsrs	r3, r3, #8
 800af68:	b29b      	uxth	r3, r3
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f930 	bl	800b1d8 <USBD_CtlSendStatus>
}
 800af78:	e003      	b.n	800af82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f860 	bl	800b042 <USBD_CtlError>
}
 800af82:	bf00      	nop
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b082      	sub	sp, #8
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	3b01      	subs	r3, #1
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d80b      	bhi.n	800afba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	885b      	ldrh	r3, [r3, #2]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d10c      	bne.n	800afc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f910 	bl	800b1d8 <USBD_CtlSendStatus>
      }
      break;
 800afb8:	e004      	b.n	800afc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f840 	bl	800b042 <USBD_CtlError>
      break;
 800afc2:	e000      	b.n	800afc6 <USBD_ClrFeature+0x3c>
      break;
 800afc4:	bf00      	nop
  }
}
 800afc6:	bf00      	nop
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	781a      	ldrb	r2, [r3, #0]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	3301      	adds	r3, #1
 800afe8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	781a      	ldrb	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	3301      	adds	r3, #1
 800aff6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f7ff fa16 	bl	800a42a <SWAPBYTE>
 800affe:	4603      	mov	r3, r0
 800b000:	461a      	mov	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	3301      	adds	r3, #1
 800b00a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	3301      	adds	r3, #1
 800b010:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f7ff fa09 	bl	800a42a <SWAPBYTE>
 800b018:	4603      	mov	r3, r0
 800b01a:	461a      	mov	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	3301      	adds	r3, #1
 800b024:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	3301      	adds	r3, #1
 800b02a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f7ff f9fc 	bl	800a42a <SWAPBYTE>
 800b032:	4603      	mov	r3, r0
 800b034:	461a      	mov	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	80da      	strh	r2, [r3, #6]
}
 800b03a:	bf00      	nop
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b082      	sub	sp, #8
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b04c:	2180      	movs	r1, #128	@ 0x80
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fd8e 	bl	800bb70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b054:	2100      	movs	r1, #0
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fd8a 	bl	800bb70 <USBD_LL_StallEP>
}
 800b05c:	bf00      	nop
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b070:	2300      	movs	r3, #0
 800b072:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d036      	beq.n	800b0e8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b07e:	6938      	ldr	r0, [r7, #16]
 800b080:	f000 f836 	bl	800b0f0 <USBD_GetLen>
 800b084:	4603      	mov	r3, r0
 800b086:	3301      	adds	r3, #1
 800b088:	b29b      	uxth	r3, r3
 800b08a:	005b      	lsls	r3, r3, #1
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b092:	7dfb      	ldrb	r3, [r7, #23]
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	4413      	add	r3, r2
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	7812      	ldrb	r2, [r2, #0]
 800b09c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b09e:	7dfb      	ldrb	r3, [r7, #23]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b0a4:	7dfb      	ldrb	r3, [r7, #23]
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	2203      	movs	r2, #3
 800b0ac:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0ae:	7dfb      	ldrb	r3, [r7, #23]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b0b4:	e013      	b.n	800b0de <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	693a      	ldr	r2, [r7, #16]
 800b0be:	7812      	ldrb	r2, [r2, #0]
 800b0c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	613b      	str	r3, [r7, #16]
    idx++;
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b0ce:	7dfb      	ldrb	r3, [r7, #23]
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	701a      	strb	r2, [r3, #0]
    idx++;
 800b0d8:	7dfb      	ldrb	r3, [r7, #23]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1e7      	bne.n	800b0b6 <USBD_GetString+0x52>
 800b0e6:	e000      	b.n	800b0ea <USBD_GetString+0x86>
    return;
 800b0e8:	bf00      	nop
  }
}
 800b0ea:	3718      	adds	r7, #24
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b100:	e005      	b.n	800b10e <USBD_GetLen+0x1e>
  {
    len++;
 800b102:	7bfb      	ldrb	r3, [r7, #15]
 800b104:	3301      	adds	r3, #1
 800b106:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	3301      	adds	r3, #1
 800b10c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1f5      	bne.n	800b102 <USBD_GetLen+0x12>
  }

  return len;
 800b116:	7bfb      	ldrb	r3, [r7, #15]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2202      	movs	r2, #2
 800b134:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	2100      	movs	r1, #0
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f000 fdde 	bl	800bd0c <USBD_LL_Transmit>

  return USBD_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	60f8      	str	r0, [r7, #12]
 800b162:	60b9      	str	r1, [r7, #8]
 800b164:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	68ba      	ldr	r2, [r7, #8]
 800b16a:	2100      	movs	r1, #0
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f000 fdcd 	bl	800bd0c <USBD_LL_Transmit>

  return USBD_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2203      	movs	r2, #3
 800b18c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f000 fde8 	bl	800bd7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	60f8      	str	r0, [r7, #12]
 800b1be:	60b9      	str	r1, [r7, #8]
 800b1c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f000 fdd7 	bl	800bd7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2204      	movs	r2, #4
 800b1e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fd8c 	bl	800bd0c <USBD_LL_Transmit>

  return USBD_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3708      	adds	r7, #8
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b082      	sub	sp, #8
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2205      	movs	r2, #5
 800b20a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b20e:	2300      	movs	r3, #0
 800b210:	2200      	movs	r2, #0
 800b212:	2100      	movs	r1, #0
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 fdb1 	bl	800bd7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b228:	2200      	movs	r2, #0
 800b22a:	4912      	ldr	r1, [pc, #72]	@ (800b274 <MX_USB_DEVICE_Init+0x50>)
 800b22c:	4812      	ldr	r0, [pc, #72]	@ (800b278 <MX_USB_DEVICE_Init+0x54>)
 800b22e:	f7fe fcd9 	bl	8009be4 <USBD_Init>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d001      	beq.n	800b23c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b238:	f7f5 fe61 	bl	8000efe <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b23c:	490f      	ldr	r1, [pc, #60]	@ (800b27c <MX_USB_DEVICE_Init+0x58>)
 800b23e:	480e      	ldr	r0, [pc, #56]	@ (800b278 <MX_USB_DEVICE_Init+0x54>)
 800b240:	f7fe fd00 	bl	8009c44 <USBD_RegisterClass>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d001      	beq.n	800b24e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b24a:	f7f5 fe58 	bl	8000efe <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b24e:	490c      	ldr	r1, [pc, #48]	@ (800b280 <MX_USB_DEVICE_Init+0x5c>)
 800b250:	4809      	ldr	r0, [pc, #36]	@ (800b278 <MX_USB_DEVICE_Init+0x54>)
 800b252:	f7fe fbf7 	bl	8009a44 <USBD_CDC_RegisterInterface>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b25c:	f7f5 fe4f 	bl	8000efe <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b260:	4805      	ldr	r0, [pc, #20]	@ (800b278 <MX_USB_DEVICE_Init+0x54>)
 800b262:	f7fe fd25 	bl	8009cb0 <USBD_Start>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d001      	beq.n	800b270 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b26c:	f7f5 fe47 	bl	8000efe <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b270:	bf00      	nop
 800b272:	bd80      	pop	{r7, pc}
 800b274:	200000ac 	.word	0x200000ac
 800b278:	2000a56c 	.word	0x2000a56c
 800b27c:	20000018 	.word	0x20000018
 800b280:	20000098 	.word	0x20000098

0800b284 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b288:	2200      	movs	r2, #0
 800b28a:	4905      	ldr	r1, [pc, #20]	@ (800b2a0 <CDC_Init_FS+0x1c>)
 800b28c:	4805      	ldr	r0, [pc, #20]	@ (800b2a4 <CDC_Init_FS+0x20>)
 800b28e:	f7fe fbf3 	bl	8009a78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b292:	4905      	ldr	r1, [pc, #20]	@ (800b2a8 <CDC_Init_FS+0x24>)
 800b294:	4803      	ldr	r0, [pc, #12]	@ (800b2a4 <CDC_Init_FS+0x20>)
 800b296:	f7fe fc11 	bl	8009abc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b29a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	2000b048 	.word	0x2000b048
 800b2a4:	2000a56c 	.word	0x2000a56c
 800b2a8:	2000a848 	.word	0x2000a848

0800b2ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b2b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	6039      	str	r1, [r7, #0]
 800b2c6:	71fb      	strb	r3, [r7, #7]
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b2cc:	79fb      	ldrb	r3, [r7, #7]
 800b2ce:	2b23      	cmp	r3, #35	@ 0x23
 800b2d0:	d84a      	bhi.n	800b368 <CDC_Control_FS+0xac>
 800b2d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2d8 <CDC_Control_FS+0x1c>)
 800b2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d8:	0800b369 	.word	0x0800b369
 800b2dc:	0800b369 	.word	0x0800b369
 800b2e0:	0800b369 	.word	0x0800b369
 800b2e4:	0800b369 	.word	0x0800b369
 800b2e8:	0800b369 	.word	0x0800b369
 800b2ec:	0800b369 	.word	0x0800b369
 800b2f0:	0800b369 	.word	0x0800b369
 800b2f4:	0800b369 	.word	0x0800b369
 800b2f8:	0800b369 	.word	0x0800b369
 800b2fc:	0800b369 	.word	0x0800b369
 800b300:	0800b369 	.word	0x0800b369
 800b304:	0800b369 	.word	0x0800b369
 800b308:	0800b369 	.word	0x0800b369
 800b30c:	0800b369 	.word	0x0800b369
 800b310:	0800b369 	.word	0x0800b369
 800b314:	0800b369 	.word	0x0800b369
 800b318:	0800b369 	.word	0x0800b369
 800b31c:	0800b369 	.word	0x0800b369
 800b320:	0800b369 	.word	0x0800b369
 800b324:	0800b369 	.word	0x0800b369
 800b328:	0800b369 	.word	0x0800b369
 800b32c:	0800b369 	.word	0x0800b369
 800b330:	0800b369 	.word	0x0800b369
 800b334:	0800b369 	.word	0x0800b369
 800b338:	0800b369 	.word	0x0800b369
 800b33c:	0800b369 	.word	0x0800b369
 800b340:	0800b369 	.word	0x0800b369
 800b344:	0800b369 	.word	0x0800b369
 800b348:	0800b369 	.word	0x0800b369
 800b34c:	0800b369 	.word	0x0800b369
 800b350:	0800b369 	.word	0x0800b369
 800b354:	0800b369 	.word	0x0800b369
 800b358:	0800b369 	.word	0x0800b369
 800b35c:	0800b369 	.word	0x0800b369
 800b360:	0800b369 	.word	0x0800b369
 800b364:	0800b369 	.word	0x0800b369
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b368:	bf00      	nop
  }

  return (USBD_OK);
 800b36a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b382:	6879      	ldr	r1, [r7, #4]
 800b384:	4808      	ldr	r0, [pc, #32]	@ (800b3a8 <CDC_Receive_FS+0x30>)
 800b386:	f7fe fb99 	bl	8009abc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b38a:	4807      	ldr	r0, [pc, #28]	@ (800b3a8 <CDC_Receive_FS+0x30>)
 800b38c:	f7fe fbf4 	bl	8009b78 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  USB_My_Receive(Buf, *Len);
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4619      	mov	r1, r3
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7f5 fb92 	bl	8000ac0 <USB_My_Receive>

  return (USBD_OK);
 800b39c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	2000a56c 	.word	0x2000a56c

0800b3ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800b3f4 <CDC_Transmit_FS+0x48>)
 800b3be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d001      	beq.n	800b3d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e00b      	b.n	800b3ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b3d2:	887b      	ldrh	r3, [r7, #2]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	4806      	ldr	r0, [pc, #24]	@ (800b3f4 <CDC_Transmit_FS+0x48>)
 800b3da:	f7fe fb4d 	bl	8009a78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b3de:	4805      	ldr	r0, [pc, #20]	@ (800b3f4 <CDC_Transmit_FS+0x48>)
 800b3e0:	f7fe fb8a 	bl	8009af8 <USBD_CDC_TransmitPacket>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	2000a56c 	.word	0x2000a56c

0800b3f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	4613      	mov	r3, r2
 800b404:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b406:	2300      	movs	r3, #0
 800b408:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b40a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	371c      	adds	r7, #28
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr
	...

0800b41c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	4603      	mov	r3, r0
 800b424:	6039      	str	r1, [r7, #0]
 800b426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	2212      	movs	r2, #18
 800b42c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b42e:	4b03      	ldr	r3, [pc, #12]	@ (800b43c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b430:	4618      	mov	r0, r3
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	200000cc 	.word	0x200000cc

0800b440 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	4603      	mov	r3, r0
 800b448:	6039      	str	r1, [r7, #0]
 800b44a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	2204      	movs	r2, #4
 800b450:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b452:	4b03      	ldr	r3, [pc, #12]	@ (800b460 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b454:	4618      	mov	r0, r3
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr
 800b460:	200000ec 	.word	0x200000ec

0800b464 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	6039      	str	r1, [r7, #0]
 800b46e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b470:	79fb      	ldrb	r3, [r7, #7]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d105      	bne.n	800b482 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	4907      	ldr	r1, [pc, #28]	@ (800b498 <USBD_FS_ProductStrDescriptor+0x34>)
 800b47a:	4808      	ldr	r0, [pc, #32]	@ (800b49c <USBD_FS_ProductStrDescriptor+0x38>)
 800b47c:	f7ff fdf2 	bl	800b064 <USBD_GetString>
 800b480:	e004      	b.n	800b48c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	4904      	ldr	r1, [pc, #16]	@ (800b498 <USBD_FS_ProductStrDescriptor+0x34>)
 800b486:	4805      	ldr	r0, [pc, #20]	@ (800b49c <USBD_FS_ProductStrDescriptor+0x38>)
 800b488:	f7ff fdec 	bl	800b064 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b48c:	4b02      	ldr	r3, [pc, #8]	@ (800b498 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	2000b848 	.word	0x2000b848
 800b49c:	0800bf78 	.word	0x0800bf78

0800b4a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	6039      	str	r1, [r7, #0]
 800b4aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b4ac:	683a      	ldr	r2, [r7, #0]
 800b4ae:	4904      	ldr	r1, [pc, #16]	@ (800b4c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b4b0:	4804      	ldr	r0, [pc, #16]	@ (800b4c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b4b2:	f7ff fdd7 	bl	800b064 <USBD_GetString>
  return USBD_StrDesc;
 800b4b6:	4b02      	ldr	r3, [pc, #8]	@ (800b4c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	2000b848 	.word	0x2000b848
 800b4c4:	0800bf90 	.word	0x0800bf90

0800b4c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	6039      	str	r1, [r7, #0]
 800b4d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	221a      	movs	r2, #26
 800b4d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b4da:	f000 f855 	bl	800b588 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b4de:	4b02      	ldr	r3, [pc, #8]	@ (800b4e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	200000f0 	.word	0x200000f0

0800b4ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	6039      	str	r1, [r7, #0]
 800b4f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4f8:	79fb      	ldrb	r3, [r7, #7]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d105      	bne.n	800b50a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	4907      	ldr	r1, [pc, #28]	@ (800b520 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b502:	4808      	ldr	r0, [pc, #32]	@ (800b524 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b504:	f7ff fdae 	bl	800b064 <USBD_GetString>
 800b508:	e004      	b.n	800b514 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	4904      	ldr	r1, [pc, #16]	@ (800b520 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b50e:	4805      	ldr	r0, [pc, #20]	@ (800b524 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b510:	f7ff fda8 	bl	800b064 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b514:	4b02      	ldr	r3, [pc, #8]	@ (800b520 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	2000b848 	.word	0x2000b848
 800b524:	0800bfa4 	.word	0x0800bfa4

0800b528 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	6039      	str	r1, [r7, #0]
 800b532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b534:	79fb      	ldrb	r3, [r7, #7]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d105      	bne.n	800b546 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	4907      	ldr	r1, [pc, #28]	@ (800b55c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b53e:	4808      	ldr	r0, [pc, #32]	@ (800b560 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b540:	f7ff fd90 	bl	800b064 <USBD_GetString>
 800b544:	e004      	b.n	800b550 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	4904      	ldr	r1, [pc, #16]	@ (800b55c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b54a:	4805      	ldr	r0, [pc, #20]	@ (800b560 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b54c:	f7ff fd8a 	bl	800b064 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b550:	4b02      	ldr	r3, [pc, #8]	@ (800b55c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b552:	4618      	mov	r0, r3
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	2000b848 	.word	0x2000b848
 800b560:	0800bfb0 	.word	0x0800bfb0

0800b564 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	4603      	mov	r3, r0
 800b56c:	6039      	str	r1, [r7, #0]
 800b56e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	220c      	movs	r2, #12
 800b574:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b576:	4b03      	ldr	r3, [pc, #12]	@ (800b584 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b578:	4618      	mov	r0, r3
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr
 800b584:	200000e0 	.word	0x200000e0

0800b588 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b58e:	4b0f      	ldr	r3, [pc, #60]	@ (800b5cc <Get_SerialNum+0x44>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b594:	4b0e      	ldr	r3, [pc, #56]	@ (800b5d0 <Get_SerialNum+0x48>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b59a:	4b0e      	ldr	r3, [pc, #56]	@ (800b5d4 <Get_SerialNum+0x4c>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d009      	beq.n	800b5c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b5ae:	2208      	movs	r2, #8
 800b5b0:	4909      	ldr	r1, [pc, #36]	@ (800b5d8 <Get_SerialNum+0x50>)
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f000 f814 	bl	800b5e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b5b8:	2204      	movs	r2, #4
 800b5ba:	4908      	ldr	r1, [pc, #32]	@ (800b5dc <Get_SerialNum+0x54>)
 800b5bc:	68b8      	ldr	r0, [r7, #8]
 800b5be:	f000 f80f 	bl	800b5e0 <IntToUnicode>
  }
}
 800b5c2:	bf00      	nop
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	1fff7590 	.word	0x1fff7590
 800b5d0:	1fff7594 	.word	0x1fff7594
 800b5d4:	1fff7598 	.word	0x1fff7598
 800b5d8:	200000f2 	.word	0x200000f2
 800b5dc:	20000102 	.word	0x20000102

0800b5e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b087      	sub	sp, #28
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	75fb      	strb	r3, [r7, #23]
 800b5f6:	e027      	b.n	800b648 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	0f1b      	lsrs	r3, r3, #28
 800b5fc:	2b09      	cmp	r3, #9
 800b5fe:	d80b      	bhi.n	800b618 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	0f1b      	lsrs	r3, r3, #28
 800b604:	b2da      	uxtb	r2, r3
 800b606:	7dfb      	ldrb	r3, [r7, #23]
 800b608:	005b      	lsls	r3, r3, #1
 800b60a:	4619      	mov	r1, r3
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	440b      	add	r3, r1
 800b610:	3230      	adds	r2, #48	@ 0x30
 800b612:	b2d2      	uxtb	r2, r2
 800b614:	701a      	strb	r2, [r3, #0]
 800b616:	e00a      	b.n	800b62e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	0f1b      	lsrs	r3, r3, #28
 800b61c:	b2da      	uxtb	r2, r3
 800b61e:	7dfb      	ldrb	r3, [r7, #23]
 800b620:	005b      	lsls	r3, r3, #1
 800b622:	4619      	mov	r1, r3
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	440b      	add	r3, r1
 800b628:	3237      	adds	r2, #55	@ 0x37
 800b62a:	b2d2      	uxtb	r2, r2
 800b62c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	011b      	lsls	r3, r3, #4
 800b632:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b634:	7dfb      	ldrb	r3, [r7, #23]
 800b636:	005b      	lsls	r3, r3, #1
 800b638:	3301      	adds	r3, #1
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	4413      	add	r3, r2
 800b63e:	2200      	movs	r2, #0
 800b640:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b642:	7dfb      	ldrb	r3, [r7, #23]
 800b644:	3301      	adds	r3, #1
 800b646:	75fb      	strb	r3, [r7, #23]
 800b648:	7dfa      	ldrb	r2, [r7, #23]
 800b64a:	79fb      	ldrb	r3, [r7, #7]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d3d3      	bcc.n	800b5f8 <IntToUnicode+0x18>
  }
}
 800b650:	bf00      	nop
 800b652:	bf00      	nop
 800b654:	371c      	adds	r7, #28
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
	...

0800b660 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b0b0      	sub	sp, #192	@ 0xc0
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b668:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b66c:	2200      	movs	r2, #0
 800b66e:	601a      	str	r2, [r3, #0]
 800b670:	605a      	str	r2, [r3, #4]
 800b672:	609a      	str	r2, [r3, #8]
 800b674:	60da      	str	r2, [r3, #12]
 800b676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b678:	f107 0318 	add.w	r3, r7, #24
 800b67c:	2294      	movs	r2, #148	@ 0x94
 800b67e:	2100      	movs	r1, #0
 800b680:	4618      	mov	r0, r3
 800b682:	f000 fc33 	bl	800beec <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b68e:	d174      	bne.n	800b77a <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b690:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b694:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b696:	2300      	movs	r3, #0
 800b698:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b69c:	f107 0318 	add.w	r3, r7, #24
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fa faef 	bl	8005c84 <HAL_RCCEx_PeriphCLKConfig>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d001      	beq.n	800b6b0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800b6ac:	f7f5 fc27 	bl	8000efe <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6b0:	4b34      	ldr	r3, [pc, #208]	@ (800b784 <HAL_PCD_MspInit+0x124>)
 800b6b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6b4:	4a33      	ldr	r2, [pc, #204]	@ (800b784 <HAL_PCD_MspInit+0x124>)
 800b6b6:	f043 0301 	orr.w	r3, r3, #1
 800b6ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b6bc:	4b31      	ldr	r3, [pc, #196]	@ (800b784 <HAL_PCD_MspInit+0x124>)
 800b6be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	617b      	str	r3, [r7, #20]
 800b6c6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b6c8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800b6cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b6e2:	230a      	movs	r3, #10
 800b6e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b6f2:	f7f7 ff87 	bl	8003604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b6f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b6fe:	2300      	movs	r3, #0
 800b700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b704:	2300      	movs	r3, #0
 800b706:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b70a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b70e:	4619      	mov	r1, r3
 800b710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b714:	f7f7 ff76 	bl	8003604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b718:	4b1a      	ldr	r3, [pc, #104]	@ (800b784 <HAL_PCD_MspInit+0x124>)
 800b71a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b71c:	4a19      	ldr	r2, [pc, #100]	@ (800b784 <HAL_PCD_MspInit+0x124>)
 800b71e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b724:	4b17      	ldr	r3, [pc, #92]	@ (800b784 <HAL_PCD_MspInit+0x124>)
 800b726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b728:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b72c:	613b      	str	r3, [r7, #16]
 800b72e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b730:	4b14      	ldr	r3, [pc, #80]	@ (800b784 <HAL_PCD_MspInit+0x124>)
 800b732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d114      	bne.n	800b766 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b73c:	4b11      	ldr	r3, [pc, #68]	@ (800b784 <HAL_PCD_MspInit+0x124>)
 800b73e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b740:	4a10      	ldr	r2, [pc, #64]	@ (800b784 <HAL_PCD_MspInit+0x124>)
 800b742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b746:	6593      	str	r3, [r2, #88]	@ 0x58
 800b748:	4b0e      	ldr	r3, [pc, #56]	@ (800b784 <HAL_PCD_MspInit+0x124>)
 800b74a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b74c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b750:	60fb      	str	r3, [r7, #12]
 800b752:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800b754:	f7f9 fb9e 	bl	8004e94 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b758:	4b0a      	ldr	r3, [pc, #40]	@ (800b784 <HAL_PCD_MspInit+0x124>)
 800b75a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b75c:	4a09      	ldr	r2, [pc, #36]	@ (800b784 <HAL_PCD_MspInit+0x124>)
 800b75e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b762:	6593      	str	r3, [r2, #88]	@ 0x58
 800b764:	e001      	b.n	800b76a <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b766:	f7f9 fb95 	bl	8004e94 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b76a:	2200      	movs	r2, #0
 800b76c:	2100      	movs	r1, #0
 800b76e:	2043      	movs	r0, #67	@ 0x43
 800b770:	f7f7 fc57 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b774:	2043      	movs	r0, #67	@ 0x43
 800b776:	f7f7 fc70 	bl	800305a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b77a:	bf00      	nop
 800b77c:	37c0      	adds	r7, #192	@ 0xc0
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	40021000 	.word	0x40021000

0800b788 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800b79c:	4619      	mov	r1, r3
 800b79e:	4610      	mov	r0, r2
 800b7a0:	f7fe fad3 	bl	8009d4a <USBD_LL_SetupStage>
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800b7be:	78fa      	ldrb	r2, [r7, #3]
 800b7c0:	6879      	ldr	r1, [r7, #4]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	00db      	lsls	r3, r3, #3
 800b7c6:	4413      	add	r3, r2
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	440b      	add	r3, r1
 800b7cc:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	78fb      	ldrb	r3, [r7, #3]
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	f7fe fb0d 	bl	8009df4 <USBD_LL_DataOutStage>
}
 800b7da:	bf00      	nop
 800b7dc:	3708      	adds	r7, #8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b082      	sub	sp, #8
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800b7f4:	78fa      	ldrb	r2, [r7, #3]
 800b7f6:	6879      	ldr	r1, [r7, #4]
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	4413      	add	r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	440b      	add	r3, r1
 800b802:	3348      	adds	r3, #72	@ 0x48
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	78fb      	ldrb	r3, [r7, #3]
 800b808:	4619      	mov	r1, r3
 800b80a:	f7fe fba6 	bl	8009f5a <USBD_LL_DataInStage>
}
 800b80e:	bf00      	nop
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b824:	4618      	mov	r0, r3
 800b826:	f7fe fce0 	bl	800a1ea <USBD_LL_SOF>
}
 800b82a:	bf00      	nop
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b084      	sub	sp, #16
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b83a:	2301      	movs	r3, #1
 800b83c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	2b02      	cmp	r3, #2
 800b844:	d001      	beq.n	800b84a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b846:	f7f5 fb5a 	bl	8000efe <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b850:	7bfa      	ldrb	r2, [r7, #15]
 800b852:	4611      	mov	r1, r2
 800b854:	4618      	mov	r0, r3
 800b856:	f7fe fc84 	bl	800a162 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b860:	4618      	mov	r0, r3
 800b862:	f7fe fc2c 	bl	800a0be <USBD_LL_Reset>
}
 800b866:	bf00      	nop
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
	...

0800b870 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	6812      	ldr	r2, [r2, #0]
 800b886:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b88a:	f043 0301 	orr.w	r3, r3, #1
 800b88e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b896:	4618      	mov	r0, r3
 800b898:	f7fe fc73 	bl	800a182 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6a1b      	ldr	r3, [r3, #32]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d005      	beq.n	800b8b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8a4:	4b04      	ldr	r3, [pc, #16]	@ (800b8b8 <HAL_PCD_SuspendCallback+0x48>)
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	4a03      	ldr	r2, [pc, #12]	@ (800b8b8 <HAL_PCD_SuspendCallback+0x48>)
 800b8aa:	f043 0306 	orr.w	r3, r3, #6
 800b8ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b8b0:	bf00      	nop
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	e000ed00 	.word	0xe000ed00

0800b8bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	6812      	ldr	r2, [r2, #0]
 800b8d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b8d6:	f023 0301 	bic.w	r3, r3, #1
 800b8da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6a1b      	ldr	r3, [r3, #32]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d007      	beq.n	800b8f4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8e4:	4b08      	ldr	r3, [pc, #32]	@ (800b908 <HAL_PCD_ResumeCallback+0x4c>)
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	4a07      	ldr	r2, [pc, #28]	@ (800b908 <HAL_PCD_ResumeCallback+0x4c>)
 800b8ea:	f023 0306 	bic.w	r3, r3, #6
 800b8ee:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b8f0:	f000 faf6 	bl	800bee0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fe fc5d 	bl	800a1ba <USBD_LL_Resume>
}
 800b900:	bf00      	nop
 800b902:	3708      	adds	r7, #8
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	e000ed00 	.word	0xe000ed00

0800b90c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	460b      	mov	r3, r1
 800b916:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b91e:	78fa      	ldrb	r2, [r7, #3]
 800b920:	4611      	mov	r1, r2
 800b922:	4618      	mov	r0, r3
 800b924:	f7fe fcb3 	bl	800a28e <USBD_LL_IsoOUTIncomplete>
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	460b      	mov	r3, r1
 800b93a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b942:	78fa      	ldrb	r2, [r7, #3]
 800b944:	4611      	mov	r1, r2
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe fc6f 	bl	800a22a <USBD_LL_IsoINIncomplete>
}
 800b94c:	bf00      	nop
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b962:	4618      	mov	r0, r3
 800b964:	f7fe fcc5 	bl	800a2f2 <USBD_LL_DevConnected>
}
 800b968:	bf00      	nop
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fe fcc2 	bl	800a308 <USBD_LL_DevDisconnected>
}
 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d13c      	bne.n	800ba16 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b99c:	4a20      	ldr	r2, [pc, #128]	@ (800ba20 <USBD_LL_Init+0x94>)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a1e      	ldr	r2, [pc, #120]	@ (800ba20 <USBD_LL_Init+0x94>)
 800b9a8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b9ac:	4b1c      	ldr	r3, [pc, #112]	@ (800ba20 <USBD_LL_Init+0x94>)
 800b9ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b9b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b9b4:	4b1a      	ldr	r3, [pc, #104]	@ (800ba20 <USBD_LL_Init+0x94>)
 800b9b6:	2206      	movs	r2, #6
 800b9b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b9ba:	4b19      	ldr	r3, [pc, #100]	@ (800ba20 <USBD_LL_Init+0x94>)
 800b9bc:	2202      	movs	r2, #2
 800b9be:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b9c0:	4b17      	ldr	r3, [pc, #92]	@ (800ba20 <USBD_LL_Init+0x94>)
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b9c6:	4b16      	ldr	r3, [pc, #88]	@ (800ba20 <USBD_LL_Init+0x94>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b9cc:	4b14      	ldr	r3, [pc, #80]	@ (800ba20 <USBD_LL_Init+0x94>)
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b9d2:	4b13      	ldr	r3, [pc, #76]	@ (800ba20 <USBD_LL_Init+0x94>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b9d8:	4b11      	ldr	r3, [pc, #68]	@ (800ba20 <USBD_LL_Init+0x94>)
 800b9da:	2200      	movs	r2, #0
 800b9dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b9de:	4b10      	ldr	r3, [pc, #64]	@ (800ba20 <USBD_LL_Init+0x94>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b9e4:	4b0e      	ldr	r3, [pc, #56]	@ (800ba20 <USBD_LL_Init+0x94>)
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b9ea:	480d      	ldr	r0, [pc, #52]	@ (800ba20 <USBD_LL_Init+0x94>)
 800b9ec:	f7f7 ffe6 	bl	80039bc <HAL_PCD_Init>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d001      	beq.n	800b9fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b9f6:	f7f5 fa82 	bl	8000efe <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b9fa:	2180      	movs	r1, #128	@ 0x80
 800b9fc:	4808      	ldr	r0, [pc, #32]	@ (800ba20 <USBD_LL_Init+0x94>)
 800b9fe:	f7f9 f950 	bl	8004ca2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ba02:	2240      	movs	r2, #64	@ 0x40
 800ba04:	2100      	movs	r1, #0
 800ba06:	4806      	ldr	r0, [pc, #24]	@ (800ba20 <USBD_LL_Init+0x94>)
 800ba08:	f7f9 f904 	bl	8004c14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ba0c:	2280      	movs	r2, #128	@ 0x80
 800ba0e:	2101      	movs	r1, #1
 800ba10:	4803      	ldr	r0, [pc, #12]	@ (800ba20 <USBD_LL_Init+0x94>)
 800ba12:	f7f9 f8ff 	bl	8004c14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	2000ba48 	.word	0x2000ba48

0800ba24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7f8 f8e2 	bl	8003c04 <HAL_PCD_Start>
 800ba40:	4603      	mov	r3, r0
 800ba42:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
 800ba46:	2b03      	cmp	r3, #3
 800ba48:	d816      	bhi.n	800ba78 <USBD_LL_Start+0x54>
 800ba4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba50 <USBD_LL_Start+0x2c>)
 800ba4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba50:	0800ba61 	.word	0x0800ba61
 800ba54:	0800ba67 	.word	0x0800ba67
 800ba58:	0800ba6d 	.word	0x0800ba6d
 800ba5c:	0800ba73 	.word	0x0800ba73
    case HAL_OK :
      usb_status = USBD_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	73fb      	strb	r3, [r7, #15]
    break;
 800ba64:	e00b      	b.n	800ba7e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba66:	2303      	movs	r3, #3
 800ba68:	73fb      	strb	r3, [r7, #15]
    break;
 800ba6a:	e008      	b.n	800ba7e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba70:	e005      	b.n	800ba7e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba72:	2303      	movs	r3, #3
 800ba74:	73fb      	strb	r3, [r7, #15]
    break;
 800ba76:	e002      	b.n	800ba7e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba7c:	bf00      	nop
  }
  return usb_status;
 800ba7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	4608      	mov	r0, r1
 800ba92:	4611      	mov	r1, r2
 800ba94:	461a      	mov	r2, r3
 800ba96:	4603      	mov	r3, r0
 800ba98:	70fb      	strb	r3, [r7, #3]
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	70bb      	strb	r3, [r7, #2]
 800ba9e:	4613      	mov	r3, r2
 800baa0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baa2:	2300      	movs	r3, #0
 800baa4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baa6:	2300      	movs	r3, #0
 800baa8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bab0:	78bb      	ldrb	r3, [r7, #2]
 800bab2:	883a      	ldrh	r2, [r7, #0]
 800bab4:	78f9      	ldrb	r1, [r7, #3]
 800bab6:	f7f8 fd8c 	bl	80045d2 <HAL_PCD_EP_Open>
 800baba:	4603      	mov	r3, r0
 800babc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800babe:	7bbb      	ldrb	r3, [r7, #14]
 800bac0:	2b03      	cmp	r3, #3
 800bac2:	d817      	bhi.n	800baf4 <USBD_LL_OpenEP+0x6c>
 800bac4:	a201      	add	r2, pc, #4	@ (adr r2, 800bacc <USBD_LL_OpenEP+0x44>)
 800bac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baca:	bf00      	nop
 800bacc:	0800badd 	.word	0x0800badd
 800bad0:	0800bae3 	.word	0x0800bae3
 800bad4:	0800bae9 	.word	0x0800bae9
 800bad8:	0800baef 	.word	0x0800baef
    case HAL_OK :
      usb_status = USBD_OK;
 800badc:	2300      	movs	r3, #0
 800bade:	73fb      	strb	r3, [r7, #15]
    break;
 800bae0:	e00b      	b.n	800bafa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bae2:	2303      	movs	r3, #3
 800bae4:	73fb      	strb	r3, [r7, #15]
    break;
 800bae6:	e008      	b.n	800bafa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bae8:	2301      	movs	r3, #1
 800baea:	73fb      	strb	r3, [r7, #15]
    break;
 800baec:	e005      	b.n	800bafa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800baee:	2303      	movs	r3, #3
 800baf0:	73fb      	strb	r3, [r7, #15]
    break;
 800baf2:	e002      	b.n	800bafa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800baf4:	2303      	movs	r3, #3
 800baf6:	73fb      	strb	r3, [r7, #15]
    break;
 800baf8:	bf00      	nop
  }
  return usb_status;
 800bafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb10:	2300      	movs	r3, #0
 800bb12:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb1e:	78fa      	ldrb	r2, [r7, #3]
 800bb20:	4611      	mov	r1, r2
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7f8 fdbd 	bl	80046a2 <HAL_PCD_EP_Close>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bb2c:	7bbb      	ldrb	r3, [r7, #14]
 800bb2e:	2b03      	cmp	r3, #3
 800bb30:	d816      	bhi.n	800bb60 <USBD_LL_CloseEP+0x5c>
 800bb32:	a201      	add	r2, pc, #4	@ (adr r2, 800bb38 <USBD_LL_CloseEP+0x34>)
 800bb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb38:	0800bb49 	.word	0x0800bb49
 800bb3c:	0800bb4f 	.word	0x0800bb4f
 800bb40:	0800bb55 	.word	0x0800bb55
 800bb44:	0800bb5b 	.word	0x0800bb5b
    case HAL_OK :
      usb_status = USBD_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb4c:	e00b      	b.n	800bb66 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb4e:	2303      	movs	r3, #3
 800bb50:	73fb      	strb	r3, [r7, #15]
    break;
 800bb52:	e008      	b.n	800bb66 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb54:	2301      	movs	r3, #1
 800bb56:	73fb      	strb	r3, [r7, #15]
    break;
 800bb58:	e005      	b.n	800bb66 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb5e:	e002      	b.n	800bb66 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bb60:	2303      	movs	r3, #3
 800bb62:	73fb      	strb	r3, [r7, #15]
    break;
 800bb64:	bf00      	nop
  }
  return usb_status;
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	460b      	mov	r3, r1
 800bb7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb8a:	78fa      	ldrb	r2, [r7, #3]
 800bb8c:	4611      	mov	r1, r2
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7f8 fe4c 	bl	800482c <HAL_PCD_EP_SetStall>
 800bb94:	4603      	mov	r3, r0
 800bb96:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bb98:	7bbb      	ldrb	r3, [r7, #14]
 800bb9a:	2b03      	cmp	r3, #3
 800bb9c:	d816      	bhi.n	800bbcc <USBD_LL_StallEP+0x5c>
 800bb9e:	a201      	add	r2, pc, #4	@ (adr r2, 800bba4 <USBD_LL_StallEP+0x34>)
 800bba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba4:	0800bbb5 	.word	0x0800bbb5
 800bba8:	0800bbbb 	.word	0x0800bbbb
 800bbac:	0800bbc1 	.word	0x0800bbc1
 800bbb0:	0800bbc7 	.word	0x0800bbc7
    case HAL_OK :
      usb_status = USBD_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbb8:	e00b      	b.n	800bbd2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbba:	2303      	movs	r3, #3
 800bbbc:	73fb      	strb	r3, [r7, #15]
    break;
 800bbbe:	e008      	b.n	800bbd2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc4:	e005      	b.n	800bbd2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbc6:	2303      	movs	r3, #3
 800bbc8:	73fb      	strb	r3, [r7, #15]
    break;
 800bbca:	e002      	b.n	800bbd2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bbcc:	2303      	movs	r3, #3
 800bbce:	73fb      	strb	r3, [r7, #15]
    break;
 800bbd0:	bf00      	nop
  }
  return usb_status;
 800bbd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbf6:	78fa      	ldrb	r2, [r7, #3]
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7f8 fe78 	bl	80048f0 <HAL_PCD_EP_ClrStall>
 800bc00:	4603      	mov	r3, r0
 800bc02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	2b03      	cmp	r3, #3
 800bc08:	d816      	bhi.n	800bc38 <USBD_LL_ClearStallEP+0x5c>
 800bc0a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc10 <USBD_LL_ClearStallEP+0x34>)
 800bc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc10:	0800bc21 	.word	0x0800bc21
 800bc14:	0800bc27 	.word	0x0800bc27
 800bc18:	0800bc2d 	.word	0x0800bc2d
 800bc1c:	0800bc33 	.word	0x0800bc33
    case HAL_OK :
      usb_status = USBD_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	73fb      	strb	r3, [r7, #15]
    break;
 800bc24:	e00b      	b.n	800bc3e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc26:	2303      	movs	r3, #3
 800bc28:	73fb      	strb	r3, [r7, #15]
    break;
 800bc2a:	e008      	b.n	800bc3e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc30:	e005      	b.n	800bc3e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc32:	2303      	movs	r3, #3
 800bc34:	73fb      	strb	r3, [r7, #15]
    break;
 800bc36:	e002      	b.n	800bc3e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc3c:	bf00      	nop
  }
  return usb_status;
 800bc3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	da0b      	bge.n	800bc7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc64:	78fb      	ldrb	r3, [r7, #3]
 800bc66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc6a:	68f9      	ldr	r1, [r7, #12]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	00db      	lsls	r3, r3, #3
 800bc70:	4413      	add	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	440b      	add	r3, r1
 800bc76:	333e      	adds	r3, #62	@ 0x3e
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	e00b      	b.n	800bc94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bc7c:	78fb      	ldrb	r3, [r7, #3]
 800bc7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc82:	68f9      	ldr	r1, [r7, #12]
 800bc84:	4613      	mov	r3, r2
 800bc86:	00db      	lsls	r3, r3, #3
 800bc88:	4413      	add	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	440b      	add	r3, r1
 800bc8e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800bc92:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3714      	adds	r7, #20
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcac:	2300      	movs	r3, #0
 800bcae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bcba:	78fa      	ldrb	r2, [r7, #3]
 800bcbc:	4611      	mov	r1, r2
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7f8 fc62 	bl	8004588 <HAL_PCD_SetAddress>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bcc8:	7bbb      	ldrb	r3, [r7, #14]
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d816      	bhi.n	800bcfc <USBD_LL_SetUSBAddress+0x5c>
 800bcce:	a201      	add	r2, pc, #4	@ (adr r2, 800bcd4 <USBD_LL_SetUSBAddress+0x34>)
 800bcd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd4:	0800bce5 	.word	0x0800bce5
 800bcd8:	0800bceb 	.word	0x0800bceb
 800bcdc:	0800bcf1 	.word	0x0800bcf1
 800bce0:	0800bcf7 	.word	0x0800bcf7
    case HAL_OK :
      usb_status = USBD_OK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	73fb      	strb	r3, [r7, #15]
    break;
 800bce8:	e00b      	b.n	800bd02 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcea:	2303      	movs	r3, #3
 800bcec:	73fb      	strb	r3, [r7, #15]
    break;
 800bcee:	e008      	b.n	800bd02 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf4:	e005      	b.n	800bd02 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bcfa:	e002      	b.n	800bd02 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	73fb      	strb	r3, [r7, #15]
    break;
 800bd00:	bf00      	nop
  }
  return usb_status;
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b086      	sub	sp, #24
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	607a      	str	r2, [r7, #4]
 800bd16:	603b      	str	r3, [r7, #0]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bd2a:	7af9      	ldrb	r1, [r7, #11]
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	f7f8 fd4b 	bl	80047ca <HAL_PCD_EP_Transmit>
 800bd34:	4603      	mov	r3, r0
 800bd36:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bd38:	7dbb      	ldrb	r3, [r7, #22]
 800bd3a:	2b03      	cmp	r3, #3
 800bd3c:	d816      	bhi.n	800bd6c <USBD_LL_Transmit+0x60>
 800bd3e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd44 <USBD_LL_Transmit+0x38>)
 800bd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd44:	0800bd55 	.word	0x0800bd55
 800bd48:	0800bd5b 	.word	0x0800bd5b
 800bd4c:	0800bd61 	.word	0x0800bd61
 800bd50:	0800bd67 	.word	0x0800bd67
    case HAL_OK :
      usb_status = USBD_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	75fb      	strb	r3, [r7, #23]
    break;
 800bd58:	e00b      	b.n	800bd72 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	75fb      	strb	r3, [r7, #23]
    break;
 800bd5e:	e008      	b.n	800bd72 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd60:	2301      	movs	r3, #1
 800bd62:	75fb      	strb	r3, [r7, #23]
    break;
 800bd64:	e005      	b.n	800bd72 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd66:	2303      	movs	r3, #3
 800bd68:	75fb      	strb	r3, [r7, #23]
    break;
 800bd6a:	e002      	b.n	800bd72 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bd6c:	2303      	movs	r3, #3
 800bd6e:	75fb      	strb	r3, [r7, #23]
    break;
 800bd70:	bf00      	nop
  }
  return usb_status;
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3718      	adds	r7, #24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	607a      	str	r2, [r7, #4]
 800bd86:	603b      	str	r3, [r7, #0]
 800bd88:	460b      	mov	r3, r1
 800bd8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd90:	2300      	movs	r3, #0
 800bd92:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bd9a:	7af9      	ldrb	r1, [r7, #11]
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	f7f8 fcc9 	bl	8004736 <HAL_PCD_EP_Receive>
 800bda4:	4603      	mov	r3, r0
 800bda6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bda8:	7dbb      	ldrb	r3, [r7, #22]
 800bdaa:	2b03      	cmp	r3, #3
 800bdac:	d816      	bhi.n	800bddc <USBD_LL_PrepareReceive+0x60>
 800bdae:	a201      	add	r2, pc, #4	@ (adr r2, 800bdb4 <USBD_LL_PrepareReceive+0x38>)
 800bdb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb4:	0800bdc5 	.word	0x0800bdc5
 800bdb8:	0800bdcb 	.word	0x0800bdcb
 800bdbc:	0800bdd1 	.word	0x0800bdd1
 800bdc0:	0800bdd7 	.word	0x0800bdd7
    case HAL_OK :
      usb_status = USBD_OK;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	75fb      	strb	r3, [r7, #23]
    break;
 800bdc8:	e00b      	b.n	800bde2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdca:	2303      	movs	r3, #3
 800bdcc:	75fb      	strb	r3, [r7, #23]
    break;
 800bdce:	e008      	b.n	800bde2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	75fb      	strb	r3, [r7, #23]
    break;
 800bdd4:	e005      	b.n	800bde2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	75fb      	strb	r3, [r7, #23]
    break;
 800bdda:	e002      	b.n	800bde2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bddc:	2303      	movs	r3, #3
 800bdde:	75fb      	strb	r3, [r7, #23]
    break;
 800bde0:	bf00      	nop
  }
  return usb_status;
 800bde2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3718      	adds	r7, #24
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bdfe:	78fa      	ldrb	r2, [r7, #3]
 800be00:	4611      	mov	r1, r2
 800be02:	4618      	mov	r0, r3
 800be04:	f7f8 fcc9 	bl	800479a <HAL_PCD_EP_GetRxCount>
 800be08:	4603      	mov	r3, r0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
	...

0800be14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	460b      	mov	r3, r1
 800be1e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800be20:	78fb      	ldrb	r3, [r7, #3]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d002      	beq.n	800be2c <HAL_PCDEx_LPM_Callback+0x18>
 800be26:	2b01      	cmp	r3, #1
 800be28:	d01f      	beq.n	800be6a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800be2a:	e03b      	b.n	800bea4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a1b      	ldr	r3, [r3, #32]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d007      	beq.n	800be44 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800be34:	f000 f854 	bl	800bee0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be38:	4b1c      	ldr	r3, [pc, #112]	@ (800beac <HAL_PCDEx_LPM_Callback+0x98>)
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	4a1b      	ldr	r2, [pc, #108]	@ (800beac <HAL_PCDEx_LPM_Callback+0x98>)
 800be3e:	f023 0306 	bic.w	r3, r3, #6
 800be42:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	6812      	ldr	r2, [r2, #0]
 800be52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800be56:	f023 0301 	bic.w	r3, r3, #1
 800be5a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800be62:	4618      	mov	r0, r3
 800be64:	f7fe f9a9 	bl	800a1ba <USBD_LL_Resume>
    break;
 800be68:	e01c      	b.n	800bea4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	6812      	ldr	r2, [r2, #0]
 800be78:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800be7c:	f043 0301 	orr.w	r3, r3, #1
 800be80:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800be88:	4618      	mov	r0, r3
 800be8a:	f7fe f97a 	bl	800a182 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a1b      	ldr	r3, [r3, #32]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d005      	beq.n	800bea2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be96:	4b05      	ldr	r3, [pc, #20]	@ (800beac <HAL_PCDEx_LPM_Callback+0x98>)
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	4a04      	ldr	r2, [pc, #16]	@ (800beac <HAL_PCDEx_LPM_Callback+0x98>)
 800be9c:	f043 0306 	orr.w	r3, r3, #6
 800bea0:	6113      	str	r3, [r2, #16]
    break;
 800bea2:	bf00      	nop
}
 800bea4:	bf00      	nop
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	e000ed00 	.word	0xe000ed00

0800beb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800beb8:	4b03      	ldr	r3, [pc, #12]	@ (800bec8 <USBD_static_malloc+0x18>)
}
 800beba:	4618      	mov	r0, r3
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	2000bf54 	.word	0x2000bf54

0800becc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]

}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bee4:	f7f4 ffb8 	bl	8000e58 <SystemClock_Config>
}
 800bee8:	bf00      	nop
 800beea:	bd80      	pop	{r7, pc}

0800beec <memset>:
 800beec:	4402      	add	r2, r0
 800beee:	4603      	mov	r3, r0
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d100      	bne.n	800bef6 <memset+0xa>
 800bef4:	4770      	bx	lr
 800bef6:	f803 1b01 	strb.w	r1, [r3], #1
 800befa:	e7f9      	b.n	800bef0 <memset+0x4>

0800befc <__libc_init_array>:
 800befc:	b570      	push	{r4, r5, r6, lr}
 800befe:	4d0d      	ldr	r5, [pc, #52]	@ (800bf34 <__libc_init_array+0x38>)
 800bf00:	4c0d      	ldr	r4, [pc, #52]	@ (800bf38 <__libc_init_array+0x3c>)
 800bf02:	1b64      	subs	r4, r4, r5
 800bf04:	10a4      	asrs	r4, r4, #2
 800bf06:	2600      	movs	r6, #0
 800bf08:	42a6      	cmp	r6, r4
 800bf0a:	d109      	bne.n	800bf20 <__libc_init_array+0x24>
 800bf0c:	4d0b      	ldr	r5, [pc, #44]	@ (800bf3c <__libc_init_array+0x40>)
 800bf0e:	4c0c      	ldr	r4, [pc, #48]	@ (800bf40 <__libc_init_array+0x44>)
 800bf10:	f000 f826 	bl	800bf60 <_init>
 800bf14:	1b64      	subs	r4, r4, r5
 800bf16:	10a4      	asrs	r4, r4, #2
 800bf18:	2600      	movs	r6, #0
 800bf1a:	42a6      	cmp	r6, r4
 800bf1c:	d105      	bne.n	800bf2a <__libc_init_array+0x2e>
 800bf1e:	bd70      	pop	{r4, r5, r6, pc}
 800bf20:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf24:	4798      	blx	r3
 800bf26:	3601      	adds	r6, #1
 800bf28:	e7ee      	b.n	800bf08 <__libc_init_array+0xc>
 800bf2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf2e:	4798      	blx	r3
 800bf30:	3601      	adds	r6, #1
 800bf32:	e7f2      	b.n	800bf1a <__libc_init_array+0x1e>
 800bf34:	0800c038 	.word	0x0800c038
 800bf38:	0800c038 	.word	0x0800c038
 800bf3c:	0800c038 	.word	0x0800c038
 800bf40:	0800c03c 	.word	0x0800c03c

0800bf44 <memcpy>:
 800bf44:	440a      	add	r2, r1
 800bf46:	4291      	cmp	r1, r2
 800bf48:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bf4c:	d100      	bne.n	800bf50 <memcpy+0xc>
 800bf4e:	4770      	bx	lr
 800bf50:	b510      	push	{r4, lr}
 800bf52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf5a:	4291      	cmp	r1, r2
 800bf5c:	d1f9      	bne.n	800bf52 <memcpy+0xe>
 800bf5e:	bd10      	pop	{r4, pc}

0800bf60 <_init>:
 800bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf62:	bf00      	nop
 800bf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf66:	bc08      	pop	{r3}
 800bf68:	469e      	mov	lr, r3
 800bf6a:	4770      	bx	lr

0800bf6c <_fini>:
 800bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6e:	bf00      	nop
 800bf70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf72:	bc08      	pop	{r3}
 800bf74:	469e      	mov	lr, r3
 800bf76:	4770      	bx	lr
