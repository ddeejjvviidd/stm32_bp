
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdbc  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800cf78  0800cf78  0000df78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d040  0800d040  0000f10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d040  0800d040  0000e040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d048  0800d048  0000f10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d048  0800d048  0000e048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d04c  0800d04c  0000e04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800d050  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c188  2000010c  0800d15c  0000f10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c294  0800d15c  0000f294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000242f8  00000000  00000000  0000f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cf1  00000000  00000000  00033434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c38  00000000  00000000  00038128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015c0  00000000  00000000  00039d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fd28  00000000  00000000  0003b320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000267f9  00000000  00000000  0006b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011cc9a  00000000  00000000  00091841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ae4db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076e0  00000000  00000000  001ae520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b5c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800cf60 	.word	0x0800cf60

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800cf60 	.word	0x0800cf60

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295
 800021c:	f04f 30ff 	movne.w	r0, #4294967295
 8000220:	f000 b96a 	b.w	80004f8 <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9d08      	ldr	r5, [sp, #32]
 8000242:	460c      	mov	r4, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14e      	bne.n	80002e6 <__udivmoddi4+0xaa>
 8000248:	4694      	mov	ip, r2
 800024a:	458c      	cmp	ip, r1
 800024c:	4686      	mov	lr, r0
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	d962      	bls.n	800031a <__udivmoddi4+0xde>
 8000254:	b14a      	cbz	r2, 800026a <__udivmoddi4+0x2e>
 8000256:	f1c2 0320 	rsb	r3, r2, #32
 800025a:	4091      	lsls	r1, r2
 800025c:	fa20 f303 	lsr.w	r3, r0, r3
 8000260:	fa0c fc02 	lsl.w	ip, ip, r2
 8000264:	4319      	orrs	r1, r3
 8000266:	fa00 fe02 	lsl.w	lr, r0, r2
 800026a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026e:	fa1f f68c 	uxth.w	r6, ip
 8000272:	fbb1 f4f7 	udiv	r4, r1, r7
 8000276:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027a:	fb07 1114 	mls	r1, r7, r4, r1
 800027e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000282:	fb04 f106 	mul.w	r1, r4, r6
 8000286:	4299      	cmp	r1, r3
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x64>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000292:	f080 8112 	bcs.w	80004ba <__udivmoddi4+0x27e>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 810f 	bls.w	80004ba <__udivmoddi4+0x27e>
 800029c:	3c02      	subs	r4, #2
 800029e:	4463      	add	r3, ip
 80002a0:	1a59      	subs	r1, r3, r1
 80002a2:	fa1f f38e 	uxth.w	r3, lr
 80002a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80002aa:	fb07 1110 	mls	r1, r7, r0, r1
 80002ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b2:	fb00 f606 	mul.w	r6, r0, r6
 80002b6:	429e      	cmp	r6, r3
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x94>
 80002ba:	eb1c 0303 	adds.w	r3, ip, r3
 80002be:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c2:	f080 80fc 	bcs.w	80004be <__udivmoddi4+0x282>
 80002c6:	429e      	cmp	r6, r3
 80002c8:	f240 80f9 	bls.w	80004be <__udivmoddi4+0x282>
 80002cc:	4463      	add	r3, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	1b9b      	subs	r3, r3, r6
 80002d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa6>
 80002da:	40d3      	lsrs	r3, r2
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xba>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb4>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa6>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x150>
 80002fe:	42a3      	cmp	r3, r4
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xcc>
 8000302:	4290      	cmp	r0, r2
 8000304:	f0c0 80f0 	bcc.w	80004e8 <__udivmoddi4+0x2ac>
 8000308:	1a86      	subs	r6, r0, r2
 800030a:	eb64 0303 	sbc.w	r3, r4, r3
 800030e:	2001      	movs	r0, #1
 8000310:	2d00      	cmp	r5, #0
 8000312:	d0e6      	beq.n	80002e2 <__udivmoddi4+0xa6>
 8000314:	e9c5 6300 	strd	r6, r3, [r5]
 8000318:	e7e3      	b.n	80002e2 <__udivmoddi4+0xa6>
 800031a:	2a00      	cmp	r2, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x204>
 8000320:	eba1 040c 	sub.w	r4, r1, ip
 8000324:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000328:	fa1f f78c 	uxth.w	r7, ip
 800032c:	2101      	movs	r1, #1
 800032e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000332:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000336:	fb08 4416 	mls	r4, r8, r6, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb07 f006 	mul.w	r0, r7, r6
 8000342:	4298      	cmp	r0, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x11c>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f106 34ff 	add.w	r4, r6, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x11a>
 8000350:	4298      	cmp	r0, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2b4>
 8000356:	4626      	mov	r6, r4
 8000358:	1a1c      	subs	r4, r3, r0
 800035a:	fa1f f38e 	uxth.w	r3, lr
 800035e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000362:	fb08 4410 	mls	r4, r8, r0, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb00 f707 	mul.w	r7, r0, r7
 800036e:	429f      	cmp	r7, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x148>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f100 34ff 	add.w	r4, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x146>
 800037c:	429f      	cmp	r7, r3
 800037e:	f200 80b0 	bhi.w	80004e2 <__udivmoddi4+0x2a6>
 8000382:	4620      	mov	r0, r4
 8000384:	1bdb      	subs	r3, r3, r7
 8000386:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x9c>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa20 fc06 	lsr.w	ip, r0, r6
 800039c:	fa04 f301 	lsl.w	r3, r4, r1
 80003a0:	ea43 030c 	orr.w	r3, r3, ip
 80003a4:	40f4      	lsrs	r4, r6
 80003a6:	fa00 f801 	lsl.w	r8, r0, r1
 80003aa:	0c38      	lsrs	r0, r7, #16
 80003ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b0:	fbb4 fef0 	udiv	lr, r4, r0
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	fb00 441e 	mls	r4, r0, lr, r4
 80003bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c0:	fb0e f90c 	mul.w	r9, lr, ip
 80003c4:	45a1      	cmp	r9, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x1a6>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d2:	f080 8084 	bcs.w	80004de <__udivmoddi4+0x2a2>
 80003d6:	45a1      	cmp	r9, r4
 80003d8:	f240 8081 	bls.w	80004de <__udivmoddi4+0x2a2>
 80003dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	eba4 0409 	sub.w	r4, r4, r9
 80003e6:	fa1f f983 	uxth.w	r9, r3
 80003ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ee:	fb00 4413 	mls	r4, r0, r3, r4
 80003f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x1d2>
 80003fe:	193c      	adds	r4, r7, r4
 8000400:	f103 30ff 	add.w	r0, r3, #4294967295
 8000404:	d267      	bcs.n	80004d6 <__udivmoddi4+0x29a>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d965      	bls.n	80004d6 <__udivmoddi4+0x29a>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000412:	fba0 9302 	umull	r9, r3, r0, r2
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	429c      	cmp	r4, r3
 800041c:	46ce      	mov	lr, r9
 800041e:	469c      	mov	ip, r3
 8000420:	d351      	bcc.n	80004c6 <__udivmoddi4+0x28a>
 8000422:	d04e      	beq.n	80004c2 <__udivmoddi4+0x286>
 8000424:	b155      	cbz	r5, 800043c <__udivmoddi4+0x200>
 8000426:	ebb8 030e 	subs.w	r3, r8, lr
 800042a:	eb64 040c 	sbc.w	r4, r4, ip
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	40cb      	lsrs	r3, r1
 8000434:	431e      	orrs	r6, r3
 8000436:	40cc      	lsrs	r4, r1
 8000438:	e9c5 6400 	strd	r6, r4, [r5]
 800043c:	2100      	movs	r1, #0
 800043e:	e750      	b.n	80002e2 <__udivmoddi4+0xa6>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f103 	lsr.w	r1, r0, r3
 8000448:	fa0c fc02 	lsl.w	ip, ip, r2
 800044c:	fa24 f303 	lsr.w	r3, r4, r3
 8000450:	4094      	lsls	r4, r2
 8000452:	430c      	orrs	r4, r1
 8000454:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000458:	fa00 fe02 	lsl.w	lr, r0, r2
 800045c:	fa1f f78c 	uxth.w	r7, ip
 8000460:	fbb3 f0f8 	udiv	r0, r3, r8
 8000464:	fb08 3110 	mls	r1, r8, r0, r3
 8000468:	0c23      	lsrs	r3, r4, #16
 800046a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046e:	fb00 f107 	mul.w	r1, r0, r7
 8000472:	4299      	cmp	r1, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x24c>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 36ff 	add.w	r6, r0, #4294967295
 800047e:	d22c      	bcs.n	80004da <__udivmoddi4+0x29e>
 8000480:	4299      	cmp	r1, r3
 8000482:	d92a      	bls.n	80004da <__udivmoddi4+0x29e>
 8000484:	3802      	subs	r0, #2
 8000486:	4463      	add	r3, ip
 8000488:	1a5b      	subs	r3, r3, r1
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000490:	fb08 3311 	mls	r3, r8, r1, r3
 8000494:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000498:	fb01 f307 	mul.w	r3, r1, r7
 800049c:	42a3      	cmp	r3, r4
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x276>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a8:	d213      	bcs.n	80004d2 <__udivmoddi4+0x296>
 80004aa:	42a3      	cmp	r3, r4
 80004ac:	d911      	bls.n	80004d2 <__udivmoddi4+0x296>
 80004ae:	3902      	subs	r1, #2
 80004b0:	4464      	add	r4, ip
 80004b2:	1ae4      	subs	r4, r4, r3
 80004b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b8:	e739      	b.n	800032e <__udivmoddi4+0xf2>
 80004ba:	4604      	mov	r4, r0
 80004bc:	e6f0      	b.n	80002a0 <__udivmoddi4+0x64>
 80004be:	4608      	mov	r0, r1
 80004c0:	e706      	b.n	80002d0 <__udivmoddi4+0x94>
 80004c2:	45c8      	cmp	r8, r9
 80004c4:	d2ae      	bcs.n	8000424 <__udivmoddi4+0x1e8>
 80004c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ce:	3801      	subs	r0, #1
 80004d0:	e7a8      	b.n	8000424 <__udivmoddi4+0x1e8>
 80004d2:	4631      	mov	r1, r6
 80004d4:	e7ed      	b.n	80004b2 <__udivmoddi4+0x276>
 80004d6:	4603      	mov	r3, r0
 80004d8:	e799      	b.n	800040e <__udivmoddi4+0x1d2>
 80004da:	4630      	mov	r0, r6
 80004dc:	e7d4      	b.n	8000488 <__udivmoddi4+0x24c>
 80004de:	46d6      	mov	lr, sl
 80004e0:	e77f      	b.n	80003e2 <__udivmoddi4+0x1a6>
 80004e2:	4463      	add	r3, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e74d      	b.n	8000384 <__udivmoddi4+0x148>
 80004e8:	4606      	mov	r6, r0
 80004ea:	4623      	mov	r3, r4
 80004ec:	4608      	mov	r0, r1
 80004ee:	e70f      	b.n	8000310 <__udivmoddi4+0xd4>
 80004f0:	3e02      	subs	r6, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	e730      	b.n	8000358 <__udivmoddi4+0x11c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000502:	463b      	mov	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
 8000510:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000512:	4b2a      	ldr	r3, [pc, #168]	@ (80005bc <MX_ADC1_Init+0xc0>)
 8000514:	4a2a      	ldr	r2, [pc, #168]	@ (80005c0 <MX_ADC1_Init+0xc4>)
 8000516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000518:	4b28      	ldr	r3, [pc, #160]	@ (80005bc <MX_ADC1_Init+0xc0>)
 800051a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800051e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000520:	4b26      	ldr	r3, [pc, #152]	@ (80005bc <MX_ADC1_Init+0xc0>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000526:	4b25      	ldr	r3, [pc, #148]	@ (80005bc <MX_ADC1_Init+0xc0>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800052c:	4b23      	ldr	r3, [pc, #140]	@ (80005bc <MX_ADC1_Init+0xc0>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000532:	4b22      	ldr	r3, [pc, #136]	@ (80005bc <MX_ADC1_Init+0xc0>)
 8000534:	2204      	movs	r2, #4
 8000536:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000538:	4b20      	ldr	r3, [pc, #128]	@ (80005bc <MX_ADC1_Init+0xc0>)
 800053a:	2200      	movs	r2, #0
 800053c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800053e:	4b1f      	ldr	r3, [pc, #124]	@ (80005bc <MX_ADC1_Init+0xc0>)
 8000540:	2200      	movs	r2, #0
 8000542:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000544:	4b1d      	ldr	r3, [pc, #116]	@ (80005bc <MX_ADC1_Init+0xc0>)
 8000546:	2201      	movs	r2, #1
 8000548:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800054a:	4b1c      	ldr	r3, [pc, #112]	@ (80005bc <MX_ADC1_Init+0xc0>)
 800054c:	2200      	movs	r2, #0
 800054e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000552:	4b1a      	ldr	r3, [pc, #104]	@ (80005bc <MX_ADC1_Init+0xc0>)
 8000554:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000558:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800055a:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <MX_ADC1_Init+0xc0>)
 800055c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000560:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000562:	4b16      	ldr	r3, [pc, #88]	@ (80005bc <MX_ADC1_Init+0xc0>)
 8000564:	2201      	movs	r2, #1
 8000566:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800056a:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <MX_ADC1_Init+0xc0>)
 800056c:	2200      	movs	r2, #0
 800056e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000570:	4b12      	ldr	r3, [pc, #72]	@ (80005bc <MX_ADC1_Init+0xc0>)
 8000572:	2200      	movs	r2, #0
 8000574:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000578:	4810      	ldr	r0, [pc, #64]	@ (80005bc <MX_ADC1_Init+0xc0>)
 800057a:	f001 fb91 	bl	8001ca0 <HAL_ADC_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000584:	f000 fd1b 	bl	8000fbe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000588:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <MX_ADC1_Init+0xc8>)
 800058a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800058c:	2306      	movs	r3, #6
 800058e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000594:	237f      	movs	r3, #127	@ 0x7f
 8000596:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000598:	2304      	movs	r3, #4
 800059a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a0:	463b      	mov	r3, r7
 80005a2:	4619      	mov	r1, r3
 80005a4:	4805      	ldr	r0, [pc, #20]	@ (80005bc <MX_ADC1_Init+0xc0>)
 80005a6:	f001 ff0d 	bl	80023c4 <HAL_ADC_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005b0:	f000 fd05 	bl	8000fbe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	3718      	adds	r7, #24
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000128 	.word	0x20000128
 80005c0:	50040000 	.word	0x50040000
 80005c4:	04300002 	.word	0x04300002

080005c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b0ae      	sub	sp, #184	@ 0xb8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	2294      	movs	r2, #148	@ 0x94
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f00c fc7f 	bl	800ceec <memset>
  if(adcHandle->Instance==ADC1)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a40      	ldr	r2, [pc, #256]	@ (80006f4 <HAL_ADC_MspInit+0x12c>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d179      	bne.n	80006ec <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005fe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000602:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000606:	2302      	movs	r3, #2
 8000608:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800060a:	2301      	movs	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800060e:	230c      	movs	r3, #12
 8000610:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800061e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000622:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4618      	mov	r0, r3
 800062a:	f005 fcc7 	bl	8005fbc <HAL_RCCEx_PeriphCLKConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000634:	f000 fcc3 	bl	8000fbe <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000638:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <HAL_ADC_MspInit+0x130>)
 800063a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063c:	4a2e      	ldr	r2, [pc, #184]	@ (80006f8 <HAL_ADC_MspInit+0x130>)
 800063e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000642:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000644:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <HAL_ADC_MspInit+0x130>)
 8000646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000650:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <HAL_ADC_MspInit+0x130>)
 8000652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000654:	4a28      	ldr	r2, [pc, #160]	@ (80006f8 <HAL_ADC_MspInit+0x130>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <HAL_ADC_MspInit+0x130>)
 800065e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000668:	2301      	movs	r3, #1
 800066a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800066e:	230b      	movs	r3, #11
 8000670:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800067e:	4619      	mov	r1, r3
 8000680:	481e      	ldr	r0, [pc, #120]	@ (80006fc <HAL_ADC_MspInit+0x134>)
 8000682:	f003 f95b 	bl	800393c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8000686:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <HAL_ADC_MspInit+0x138>)
 8000688:	4a1e      	ldr	r2, [pc, #120]	@ (8000704 <HAL_ADC_MspInit+0x13c>)
 800068a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800068c:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <HAL_ADC_MspInit+0x138>)
 800068e:	2205      	movs	r2, #5
 8000690:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000692:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <HAL_ADC_MspInit+0x138>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000698:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <HAL_ADC_MspInit+0x138>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <HAL_ADC_MspInit+0x138>)
 80006a0:	2280      	movs	r2, #128	@ 0x80
 80006a2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a4:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <HAL_ADC_MspInit+0x138>)
 80006a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006aa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <HAL_ADC_MspInit+0x138>)
 80006ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006b2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <HAL_ADC_MspInit+0x138>)
 80006b6:	2220      	movs	r2, #32
 80006b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <HAL_ADC_MspInit+0x138>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c0:	480f      	ldr	r0, [pc, #60]	@ (8000700 <HAL_ADC_MspInit+0x138>)
 80006c2:	f002 fdc5 	bl	8003250 <HAL_DMA_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006cc:	f000 fc77 	bl	8000fbe <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000700 <HAL_ADC_MspInit+0x138>)
 80006d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000700 <HAL_ADC_MspInit+0x138>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	2012      	movs	r0, #18
 80006e2:	f002 fd7e 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006e6:	2012      	movs	r0, #18
 80006e8:	f002 fd97 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ec:	bf00      	nop
 80006ee:	37b8      	adds	r7, #184	@ 0xb8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	50040000 	.word	0x50040000
 80006f8:	40021000 	.word	0x40021000
 80006fc:	48000800 	.word	0x48000800
 8000700:	20000190 	.word	0x20000190
 8000704:	40020030 	.word	0x40020030

08000708 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800070e:	4b37      	ldr	r3, [pc, #220]	@ (80007ec <MX_DMA_Init+0xe4>)
 8000710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000712:	4a36      	ldr	r2, [pc, #216]	@ (80007ec <MX_DMA_Init+0xe4>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6493      	str	r3, [r2, #72]	@ 0x48
 800071a:	4b34      	ldr	r3, [pc, #208]	@ (80007ec <MX_DMA_Init+0xe4>)
 800071c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000726:	4b31      	ldr	r3, [pc, #196]	@ (80007ec <MX_DMA_Init+0xe4>)
 8000728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072a:	4a30      	ldr	r2, [pc, #192]	@ (80007ec <MX_DMA_Init+0xe4>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6493      	str	r3, [r2, #72]	@ 0x48
 8000732:	4b2e      	ldr	r3, [pc, #184]	@ (80007ec <MX_DMA_Init+0xe4>)
 8000734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800073e:	4b2b      	ldr	r3, [pc, #172]	@ (80007ec <MX_DMA_Init+0xe4>)
 8000740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000742:	4a2a      	ldr	r2, [pc, #168]	@ (80007ec <MX_DMA_Init+0xe4>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6493      	str	r3, [r2, #72]	@ 0x48
 800074a:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <MX_DMA_Init+0xe4>)
 800074c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <MX_DMA_Init+0xe8>)
 8000758:	4a26      	ldr	r2, [pc, #152]	@ (80007f4 <MX_DMA_Init+0xec>)
 800075a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <MX_DMA_Init+0xe8>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <MX_DMA_Init+0xe8>)
 8000764:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000768:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 800076a:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <MX_DMA_Init+0xe8>)
 800076c:	2240      	movs	r2, #64	@ 0x40
 800076e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <MX_DMA_Init+0xe8>)
 8000772:	2280      	movs	r2, #128	@ 0x80
 8000774:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000776:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <MX_DMA_Init+0xe8>)
 8000778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800077c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <MX_DMA_Init+0xe8>)
 8000780:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000784:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_DMA_Init+0xe8>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_DMA_Init+0xe8>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8000792:	4817      	ldr	r0, [pc, #92]	@ (80007f0 <MX_DMA_Init+0xe8>)
 8000794:	f002 fd5c 	bl	8003250 <HAL_DMA_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_DMA_Init+0x9a>
  {
    Error_Handler();
 800079e:	f000 fc0e 	bl	8000fbe <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	200b      	movs	r0, #11
 80007a8:	f002 fd1b 	bl	80031e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007ac:	200b      	movs	r0, #11
 80007ae:	f002 fd34 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	200c      	movs	r0, #12
 80007b8:	f002 fd13 	bl	80031e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007bc:	200c      	movs	r0, #12
 80007be:	f002 fd2c 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	200d      	movs	r0, #13
 80007c8:	f002 fd0b 	bl	80031e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007cc:	200d      	movs	r0, #13
 80007ce:	f002 fd24 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2039      	movs	r0, #57	@ 0x39
 80007d8:	f002 fd03 	bl	80031e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80007dc:	2039      	movs	r0, #57	@ 0x39
 80007de:	f002 fd1c 	bl	800321a <HAL_NVIC_EnableIRQ>

}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000
 80007f0:	200001f0 	.word	0x200001f0
 80007f4:	4002001c 	.word	0x4002001c

080007f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	@ 0x30
 80007fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	4b55      	ldr	r3, [pc, #340]	@ (8000964 <MX_GPIO_Init+0x16c>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a54      	ldr	r2, [pc, #336]	@ (8000964 <MX_GPIO_Init+0x16c>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081a:	4b52      	ldr	r3, [pc, #328]	@ (8000964 <MX_GPIO_Init+0x16c>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	4b4f      	ldr	r3, [pc, #316]	@ (8000964 <MX_GPIO_Init+0x16c>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	4a4e      	ldr	r2, [pc, #312]	@ (8000964 <MX_GPIO_Init+0x16c>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000832:	4b4c      	ldr	r3, [pc, #304]	@ (8000964 <MX_GPIO_Init+0x16c>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b49      	ldr	r3, [pc, #292]	@ (8000964 <MX_GPIO_Init+0x16c>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	4a48      	ldr	r2, [pc, #288]	@ (8000964 <MX_GPIO_Init+0x16c>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084a:	4b46      	ldr	r3, [pc, #280]	@ (8000964 <MX_GPIO_Init+0x16c>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	4b43      	ldr	r3, [pc, #268]	@ (8000964 <MX_GPIO_Init+0x16c>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	4a42      	ldr	r2, [pc, #264]	@ (8000964 <MX_GPIO_Init+0x16c>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000862:	4b40      	ldr	r3, [pc, #256]	@ (8000964 <MX_GPIO_Init+0x16c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086e:	4b3d      	ldr	r3, [pc, #244]	@ (8000964 <MX_GPIO_Init+0x16c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	4a3c      	ldr	r2, [pc, #240]	@ (8000964 <MX_GPIO_Init+0x16c>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087a:	4b3a      	ldr	r3, [pc, #232]	@ (8000964 <MX_GPIO_Init+0x16c>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000886:	f004 fcb1 	bl	80051ec <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b36      	ldr	r3, [pc, #216]	@ (8000964 <MX_GPIO_Init+0x16c>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	4a35      	ldr	r2, [pc, #212]	@ (8000964 <MX_GPIO_Init+0x16c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000896:	4b33      	ldr	r3, [pc, #204]	@ (8000964 <MX_GPIO_Init+0x16c>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80008a8:	482f      	ldr	r0, [pc, #188]	@ (8000968 <MX_GPIO_Init+0x170>)
 80008aa:	f003 f9d9 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2140      	movs	r1, #64	@ 0x40
 80008b2:	482e      	ldr	r0, [pc, #184]	@ (800096c <MX_GPIO_Init+0x174>)
 80008b4:	f003 f9d4 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2180      	movs	r1, #128	@ 0x80
 80008bc:	482c      	ldr	r0, [pc, #176]	@ (8000970 <MX_GPIO_Init+0x178>)
 80008be:	f003 f9cf 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4825      	ldr	r0, [pc, #148]	@ (8000970 <MX_GPIO_Init+0x178>)
 80008da:	f003 f82f 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008de:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	481c      	ldr	r0, [pc, #112]	@ (8000968 <MX_GPIO_Init+0x170>)
 80008f8:	f003 f820 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008fc:	2320      	movs	r3, #32
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4817      	ldr	r0, [pc, #92]	@ (800096c <MX_GPIO_Init+0x174>)
 8000910:	f003 f814 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000914:	2340      	movs	r3, #64	@ 0x40
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4810      	ldr	r0, [pc, #64]	@ (800096c <MX_GPIO_Init+0x174>)
 800092c:	f003 f806 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000930:	2380      	movs	r3, #128	@ 0x80
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	480a      	ldr	r0, [pc, #40]	@ (8000970 <MX_GPIO_Init+0x178>)
 8000948:	f002 fff8 	bl	800393c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	2028      	movs	r0, #40	@ 0x28
 8000952:	f002 fc46 	bl	80031e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000956:	2028      	movs	r0, #40	@ 0x28
 8000958:	f002 fc5f 	bl	800321a <HAL_NVIC_EnableIRQ>

}
 800095c:	bf00      	nop
 800095e:	3730      	adds	r7, #48	@ 0x30
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40021000 	.word	0x40021000
 8000968:	48000400 	.word	0x48000400
 800096c:	48001800 	.word	0x48001800
 8000970:	48000800 	.word	0x48000800

08000974 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000984:	d119      	bne.n	80009ba <HAL_GPIO_EXTI_Callback+0x46>
		static bool previous;
		if(previous == false){
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	f083 0301 	eor.w	r3, r3, #1
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d009      	beq.n	80009a8 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099a:	480b      	ldr	r0, [pc, #44]	@ (80009c8 <HAL_GPIO_EXTI_Callback+0x54>)
 800099c:	f003 f960 	bl	8003c60 <HAL_GPIO_WritePin>
			previous = true;
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x50>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80009a6:	e008      	b.n	80009ba <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ae:	4806      	ldr	r0, [pc, #24]	@ (80009c8 <HAL_GPIO_EXTI_Callback+0x54>)
 80009b0:	f003 f956 	bl	8003c60 <HAL_GPIO_WritePin>
			previous = false;
 80009b4:	4b03      	ldr	r3, [pc, #12]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000250 	.word	0x20000250
 80009c8:	48000400 	.word	0x48000400

080009cc <DataTransmit2MTLB>:
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
extern void DataReceive_MTLB_Callback(uint16_t iD, uint32_t * xData, uint16_t nData_in_values);

// Send float or uint32 or none data
int DataTransmit2MTLB(uint16_t iD, uint8_t * xData, uint16_t nData_in_values)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	80fb      	strh	r3, [r7, #6]
 80009d8:	4613      	mov	r3, r2
 80009da:	80bb      	strh	r3, [r7, #4]
	if(s2m_Status) return -1;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a54 <DataTransmit2MTLB+0x88>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <DataTransmit2MTLB+0x1e>
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295
 80009e8:	e02f      	b.n	8000a4a <DataTransmit2MTLB+0x7e>
	if((sizeof(buf_M_TX)-4)<(nData_in_values*4)) return -2;
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80009f2:	d902      	bls.n	80009fa <DataTransmit2MTLB+0x2e>
 80009f4:	f06f 0301 	mvn.w	r3, #1
 80009f8:	e027      	b.n	8000a4a <DataTransmit2MTLB+0x7e>
	s2m_Status=1;
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <DataTransmit2MTLB+0x88>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
	((uint16_t *) buf_M_TX)[0] = iD;
 8000a00:	4a15      	ldr	r2, [pc, #84]	@ (8000a58 <DataTransmit2MTLB+0x8c>)
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	8013      	strh	r3, [r2, #0]
	((uint16_t *) buf_M_TX)[1] = nData_in_values;
 8000a06:	4a15      	ldr	r2, [pc, #84]	@ (8000a5c <DataTransmit2MTLB+0x90>)
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	8013      	strh	r3, [r2, #0]
	if(nData_in_values>0) memcpy(buf_M_TX+1, xData, nData_in_values*4);
 8000a0c:	88bb      	ldrh	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d006      	beq.n	8000a20 <DataTransmit2MTLB+0x54>
 8000a12:	4813      	ldr	r0, [pc, #76]	@ (8000a60 <DataTransmit2MTLB+0x94>)
 8000a14:	88bb      	ldrh	r3, [r7, #4]
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	461a      	mov	r2, r3
 8000a1a:	6839      	ldr	r1, [r7, #0]
 8000a1c:	f00c fa92 	bl	800cf44 <memcpy>
	s2m_Status = CDC_Transmit_FS((uint8_t*) buf_M_TX, nData_in_values*4 + 4);
 8000a20:	88bb      	ldrh	r3, [r7, #4]
 8000a22:	3301      	adds	r3, #1
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480a      	ldr	r0, [pc, #40]	@ (8000a58 <DataTransmit2MTLB+0x8c>)
 8000a2e:	f00b fcbd 	bl	800c3ac <CDC_Transmit_FS>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <DataTransmit2MTLB+0x88>)
 8000a38:	601a      	str	r2, [r3, #0]
	if(s2m_Status)
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <DataTransmit2MTLB+0x88>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <DataTransmit2MTLB+0x7c>
	{
		s2m_Status=0;//if on zero... USB busy
 8000a42:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <DataTransmit2MTLB+0x88>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
	}
	return 0;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20008258 	.word	0x20008258
 8000a58:	20000254 	.word	0x20000254
 8000a5c:	20000256 	.word	0x20000256
 8000a60:	20000258 	.word	0x20000258

08000a64 <m2s_Process>:
int SendData2MTLB(uint16_t iD, uint8_t * xData, uint16_t nData_in_values){	return DataTransmit2MTLB(iD, xData, nData_in_values);}

void m2s_Process(void)//called from inf. loop
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	if(!m2s_Status) return;//the most often ....
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <m2s_Process+0x50>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d01e      	beq.n	8000aae <m2s_Process+0x4a>
	if(m2s_Status==1)
 8000a70:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <m2s_Process+0x50>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d111      	bne.n	8000a9c <m2s_Process+0x38>
	{
		DataReceive_MTLB_Callback(m2s_ID, m2s_buf, m2s_nData_in_bytes/4);
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <m2s_Process+0x54>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	b298      	uxth	r0, r3
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <m2s_Process+0x58>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	da00      	bge.n	8000a88 <m2s_Process+0x24>
 8000a86:	3303      	adds	r3, #3
 8000a88:	109b      	asrs	r3, r3, #2
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	490c      	ldr	r1, [pc, #48]	@ (8000ac0 <m2s_Process+0x5c>)
 8000a90:	f000 f896 	bl	8000bc0 <DataReceive_MTLB_Callback>
		m2s_Status = 0;
 8000a94:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <m2s_Process+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
		return;
 8000a9a:	e009      	b.n	8000ab0 <m2s_Process+0x4c>
	}
	if(m2s_Status==2)
	{
	}

	if(m2s_Status== -1)//init receiving new message from matlab
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <m2s_Process+0x50>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d104      	bne.n	8000ab0 <m2s_Process+0x4c>
	{
		m2s_Status = 0;
 8000aa6:	4b03      	ldr	r3, [pc, #12]	@ (8000ab4 <m2s_Process+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
		return;
 8000aac:	e000      	b.n	8000ab0 <m2s_Process+0x4c>
	if(!m2s_Status) return;//the most often ....
 8000aae:	bf00      	nop
	}

}
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000825c 	.word	0x2000825c
 8000ab8:	20008260 	.word	0x20008260
 8000abc:	20008264 	.word	0x20008264
 8000ac0:	20004258 	.word	0x20004258

08000ac4 <USB_My_Receive>:
void USB_My_Receive(uint8_t* Buf, uint32_t Len)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	if(m2s_Status==0)//new message
 8000ace:	4b22      	ldr	r3, [pc, #136]	@ (8000b58 <USB_My_Receive+0x94>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10c      	bne.n	8000af0 <USB_My_Receive+0x2c>
	{
		  m2s_ID = ((uint16_t *) Buf)[0] ;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <USB_My_Receive+0x98>)
 8000ade:	601a      	str	r2, [r3, #0]
		  if(m2s_ID == 0)
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <USB_My_Receive+0x98>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d030      	beq.n	8000b4a <USB_My_Receive+0x86>
			    return;
		  m2s_Status=100;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <USB_My_Receive+0x94>)
 8000aea:	2264      	movs	r2, #100	@ 0x64
 8000aec:	601a      	str	r2, [r3, #0]
		  return;
 8000aee:	e02f      	b.n	8000b50 <USB_My_Receive+0x8c>
	}
	if(m2s_Status==100)
 8000af0:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <USB_My_Receive+0x94>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b64      	cmp	r3, #100	@ 0x64
 8000af6:	d110      	bne.n	8000b1a <USB_My_Receive+0x56>
	{
		  m2s_nData_in_bytes = ((uint16_t *) Buf)[0] *4; //
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4a18      	ldr	r2, [pc, #96]	@ (8000b60 <USB_My_Receive+0x9c>)
 8000b00:	6013      	str	r3, [r2, #0]
		  if(m2s_nData_in_bytes == 0)
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <USB_My_Receive+0x9c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d103      	bne.n	8000b12 <USB_My_Receive+0x4e>
		  {
			  m2s_Status=1;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <USB_My_Receive+0x94>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
			  return;
 8000b10:	e01e      	b.n	8000b50 <USB_My_Receive+0x8c>
		  }
		  m2s_Status=3;//wait for xData
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <USB_My_Receive+0x94>)
 8000b14:	2203      	movs	r2, #3
 8000b16:	601a      	str	r2, [r3, #0]
		  return;
 8000b18:	e01a      	b.n	8000b50 <USB_My_Receive+0x8c>
	}
	if(m2s_Status==3)//xData
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <USB_My_Receive+0x94>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d115      	bne.n	8000b4e <USB_My_Receive+0x8a>
	{
		  if(Len<m2s_nData_in_bytes)
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <USB_My_Receive+0x9c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d202      	bcs.n	8000b34 <USB_My_Receive+0x70>
			  m2s_nData_in_bytes=Len;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <USB_My_Receive+0x9c>)
 8000b32:	6013      	str	r3, [r2, #0]
		  memcpy(m2s_buf, Buf, m2s_nData_in_bytes);
 8000b34:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <USB_My_Receive+0x9c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	4809      	ldr	r0, [pc, #36]	@ (8000b64 <USB_My_Receive+0xa0>)
 8000b3e:	f00c fa01 	bl	800cf44 <memcpy>
		  m2s_Status=1;
 8000b42:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <USB_My_Receive+0x94>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	601a      	str	r2, [r3, #0]
		  return;
 8000b48:	e002      	b.n	8000b50 <USB_My_Receive+0x8c>
			    return;
 8000b4a:	bf00      	nop
 8000b4c:	e000      	b.n	8000b50 <USB_My_Receive+0x8c>
	}

	return;
 8000b4e:	bf00      	nop
}
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000825c 	.word	0x2000825c
 8000b5c:	20008260 	.word	0x20008260
 8000b60:	20008264 	.word	0x20008264
 8000b64:	20004258 	.word	0x20004258

08000b68 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  if(htim == &htim6){
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d10e      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x2e>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b78:	2180      	movs	r1, #128	@ 0x80
 8000b7a:	480a      	ldr	r0, [pc, #40]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b7c:	f003 f888 	bl	8003c90 <HAL_GPIO_TogglePin>

	// zvysovani promenne periodical a odesilani po UART
	periodical += 1;
 8000b80:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a08      	ldr	r2, [pc, #32]	@ (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b88:	6013      	str	r3, [r2, #0]
	//HAL_UART_Transmit_DMA(&hlpuart1, (const uint8_t*)&periodical, 10);
	DataTransmit2MTLB(1010, &periodical, 1);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4906      	ldr	r1, [pc, #24]	@ (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b8e:	f240 30f2 	movw	r0, #1010	@ 0x3f2
 8000b92:	f7ff ff1b 	bl	80009cc <DataTransmit2MTLB>
  }
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000a450 	.word	0x2000a450
 8000ba4:	48000400 	.word	0x48000400
 8000ba8:	200082c4 	.word	0x200082c4

08000bac <HAL_UART_RxCpltCallback>:

char testdata[10];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
//    if(huart == &hlpuart1){
//    	HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t*)testdata, 10);
//    	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t*)testdata, 10);
//    }

  }
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <DataReceive_MTLB_Callback>:

void DataReceive_MTLB_Callback(uint16_t iD, uint32_t * xData, uint16_t nData_in_values)
{//when data comes from matlab, this is called and here is the branching and processing
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	80fb      	strh	r3, [r7, #6]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2180      	movs	r1, #128	@ 0x80
 8000bd4:	4813      	ldr	r0, [pc, #76]	@ (8000c24 <DataReceive_MTLB_Callback+0x64>)
 8000bd6:	f003 f843 	bl	8003c60 <HAL_GPIO_WritePin>
	switch(iD)
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	f640 72a2 	movw	r2, #4002	@ 0xfa2
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d011      	beq.n	8000c08 <DataReceive_MTLB_Callback+0x48>
 8000be4:	f640 72a2 	movw	r2, #4002	@ 0xfa2
 8000be8:	4293      	cmp	r3, r2
 8000bea:	dc0f      	bgt.n	8000c0c <DataReceive_MTLB_Callback+0x4c>
 8000bec:	2b14      	cmp	r3, #20
 8000bee:	d004      	beq.n	8000bfa <DataReceive_MTLB_Callback+0x3a>
 8000bf0:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d00b      	beq.n	8000c10 <DataReceive_MTLB_Callback+0x50>
	// teplota[60]=nTeplota;
	// DataTransmit2MTLB(40002,(uint8_t *) teplota, 61);
	break;

	default:
	break;
 8000bf8:	e008      	b.n	8000c0c <DataReceive_MTLB_Callback+0x4c>
		DataTransmit2MTLB(20, xData, nData_in_values);
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	6839      	ldr	r1, [r7, #0]
 8000c00:	2014      	movs	r0, #20
 8000c02:	f7ff fee3 	bl	80009cc <DataTransmit2MTLB>
		break;
 8000c06:	e004      	b.n	8000c12 <DataReceive_MTLB_Callback+0x52>
	break;
 8000c08:	bf00      	nop
 8000c0a:	e002      	b.n	8000c12 <DataReceive_MTLB_Callback+0x52>
	break;
 8000c0c:	bf00      	nop
 8000c0e:	e000      	b.n	8000c12 <DataReceive_MTLB_Callback+0x52>
	break;
 8000c10:	bf00      	nop
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2180      	movs	r1, #128	@ 0x80
 8000c16:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <DataReceive_MTLB_Callback+0x64>)
 8000c18:	f003 f822 	bl	8003c60 <HAL_GPIO_WritePin>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	48000400 	.word	0x48000400

08000c28 <tx_send>:

void tx_send(){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 10; ++i) {
    	//memcpy(&OutputBuf[4+(((i+1)*4)-1)], xData[i], sizeof(char)); // prevod z uint32_t
    	OutputBuf[4+(((i+1)*4)-1)] = xData[i];
	}
	*/
	uint8_t *ptr = tx_buffer;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <tx_send+0x60>)
 8000c30:	607b      	str	r3, [r7, #4]

    // Kopírování proměnných iD a nData do tx_buffer

    memcpy(ptr, &iD, sizeof(iD));
 8000c32:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <tx_send+0x64>)
 8000c34:	881a      	ldrh	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	801a      	strh	r2, [r3, #0]
    ptr += sizeof(iD);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	607b      	str	r3, [r7, #4]

    memcpy(ptr, &nData, sizeof(nData));
 8000c40:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <tx_send+0x68>)
 8000c42:	881a      	ldrh	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	801a      	strh	r2, [r3, #0]
    ptr += sizeof(nData);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	607b      	str	r3, [r7, #4]

    memcpy(ptr, xxData, nData*sizeof(uint32_t));
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <tx_send+0x68>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	461a      	mov	r2, r3
 8000c56:	490f      	ldr	r1, [pc, #60]	@ (8000c94 <tx_send+0x6c>)
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f00c f973 	bl	800cf44 <memcpy>

	uint8_t tx_status = USBD_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	70fb      	strb	r3, [r7, #3]
    tx_status = CDC_Transmit_FS(tx_buffer, (nData*sizeof(uint32_t))+4);
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <tx_send+0x68>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <tx_send+0x60>)
 8000c72:	f00b fb9b 	bl	800c3ac <CDC_Transmit_FS>
 8000c76:	4603      	mov	r3, r0
 8000c78:	70fb      	strb	r3, [r7, #3]

    if(tx_status == USBD_OK){
 8000c7a:	78fb      	ldrb	r3, [r7, #3]
 8000c7c:	2b00      	cmp	r3, #0
    	tx_status = tx_status;
    }
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20008298 	.word	0x20008298
 8000c8c:	20008268 	.word	0x20008268
 8000c90:	2000826a 	.word	0x2000826a
 8000c94:	2000826c 	.word	0x2000826c

08000c98 <tx_process>:

	return 0;
}

void tx_process(void)//called from inf. loop
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	//if(!m2s_Status) return;//the most often ....
	if(rx_state ==3)
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <tx_process+0x1c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	d105      	bne.n	8000cb0 <tx_process+0x18>
	{
		tx_send();
 8000ca4:	f7ff ffc0 	bl	8000c28 <tx_send>
		rx_state = 0;
 8000ca8:	4b02      	ldr	r3, [pc, #8]	@ (8000cb4 <tx_process+0x1c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
		return;
 8000cae:	bf00      	nop
//	if(m2s_Status== -1)//init receiving new message from matlab
//	{
//		m2s_Status = 0;
//	return;
//	}
}
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20008294 	.word	0x20008294

08000cb8 <myDmaFunction>:



/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma){
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <myDmaFunction+0x28>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc6:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <myDmaFunction+0x2c>)
 8000cc8:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8000cca:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <myDmaFunction+0x28>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd0:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <myDmaFunction+0x30>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	2000a404 	.word	0x2000a404
 8000ce4:	200082d0 	.word	0x200082d0
 8000ce8:	200082d4 	.word	0x200082d4

08000cec <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  potenciometer = 0;
 8000cf4:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <HAL_ADC_ConvCpltCallback+0x64>)
 8000cf6:	f04f 0200 	mov.w	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]

  for(int i = 0; i < 100; i++){
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	e013      	b.n	8000d2a <HAL_ADC_ConvCpltCallback+0x3e>
	  potenciometer = potenciometer + dma_data_buffer[i+100];
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3364      	adds	r3, #100	@ 0x64
 8000d06:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <HAL_ADC_ConvCpltCallback+0x68>)
 8000d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d0c:	ee07 3a90 	vmov	s15, r3
 8000d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_ADC_ConvCpltCallback+0x64>)
 8000d16:	edd3 7a00 	vldr	s15, [r3]
 8000d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <HAL_ADC_ConvCpltCallback+0x64>)
 8000d20:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i < 100; i++){
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3301      	adds	r3, #1
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2b63      	cmp	r3, #99	@ 0x63
 8000d2e:	dde8      	ble.n	8000d02 <HAL_ADC_ConvCpltCallback+0x16>
  }
  potenciometer = potenciometer / 100;
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <HAL_ADC_ConvCpltCallback+0x64>)
 8000d32:	ed93 7a00 	vldr	s14, [r3]
 8000d36:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000d58 <HAL_ADC_ConvCpltCallback+0x6c>
 8000d3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d3e:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <HAL_ADC_ConvCpltCallback+0x64>)
 8000d40:	edc3 7a00 	vstr	s15, [r3]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	2000a3a8 	.word	0x2000a3a8
 8000d54:	2000a218 	.word	0x2000a218
 8000d58:	42c80000 	.word	0x42c80000

08000d5c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  potenciometer = 0;
 8000d64:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]

  for(int i = 0; i < 100; i++){
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	e012      	b.n	8000d98 <HAL_ADC_ConvHalfCpltCallback+0x3c>
	  potenciometer = potenciometer + dma_data_buffer[i];
 8000d72:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d7a:	ee07 3a90 	vmov	s15, r3
 8000d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8000d84:	edd3 7a00 	vldr	s15, [r3]
 8000d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8000d8e:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i < 100; i++){
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	3301      	adds	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b63      	cmp	r3, #99	@ 0x63
 8000d9c:	dde9      	ble.n	8000d72 <HAL_ADC_ConvHalfCpltCallback+0x16>
  }
  potenciometer = potenciometer / 100;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8000da0:	ed93 7a00 	vldr	s14, [r3]
 8000da4:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000dc8 <HAL_ADC_ConvHalfCpltCallback+0x6c>
 8000da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dac:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8000dae:	edc3 7a00 	vstr	s15, [r3]
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	2000a3a8 	.word	0x2000a3a8
 8000dc4:	2000a218 	.word	0x2000a218
 8000dc8:	42c80000 	.word	0x42c80000

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd2:	f000 fcb8 	bl	8001746 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd6:	f000 f89f 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dda:	f7ff fd0d 	bl	80007f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dde:	f7ff fc93 	bl	8000708 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000de2:	f000 fae5 	bl	80013b0 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000de6:	f000 fb2f 	bl	8001448 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000dea:	f000 fa53 	bl	8001294 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000dee:	f00b fa19 	bl	800c224 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8000df2:	f000 fa01 	bl	80011f8 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000df6:	f7ff fb81 	bl	80004fc <MX_ADC1_Init>
  MX_TIM3_Init();
 8000dfa:	f000 f9af 	bl	800115c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // zapnuti zelene ledky
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	4835      	ldr	r0, [pc, #212]	@ (8000ed8 <main+0x10c>)
 8000e04:	f002 ff2c 	bl	8003c60 <HAL_GPIO_WritePin>

  // volani casovace
  HAL_TIM_Base_Start_IT(&htim6);
 8000e08:	4834      	ldr	r0, [pc, #208]	@ (8000edc <main+0x110>)
 8000e0a:	f005 feaf 	bl	8006b6c <HAL_TIM_Base_Start_IT>

  char *msg = "Hello world!\n\r";
 8000e0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <main+0x114>)
 8000e10:	60bb      	str	r3, [r7, #8]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), 0xFFFF);
 8000e12:	68b8      	ldr	r0, [r7, #8]
 8000e14:	f7ff f9f2 	bl	80001fc <strlen>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	4830      	ldr	r0, [pc, #192]	@ (8000ee4 <main+0x118>)
 8000e24:	f006 fb30 	bl	8007488 <HAL_UART_Transmit>
  HAL_UART_Receive_DMA(&hlpuart1, (uint8_t*)testdata, 10);
 8000e28:	220a      	movs	r2, #10
 8000e2a:	492f      	ldr	r1, [pc, #188]	@ (8000ee8 <main+0x11c>)
 8000e2c:	482d      	ldr	r0, [pc, #180]	@ (8000ee4 <main+0x118>)
 8000e2e:	f006 fbb9 	bl	80075a4 <HAL_UART_Receive_DMA>

  //zjistovani casu potrebneho pro kopirovani mezi poli
  HAL_TIM_Base_Start(&htim5);
 8000e32:	482e      	ldr	r0, [pc, #184]	@ (8000eec <main+0x120>)
 8000e34:	f005 fe32 	bl	8006a9c <HAL_TIM_Base_Start>

  for (int i = 0; i < 1000; i++){
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	e00d      	b.n	8000e5a <main+0x8e>
	  dma[i] = i;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e48:	4a29      	ldr	r2, [pc, #164]	@ (8000ef0 <main+0x124>)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 1000; i++){
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	3301      	adds	r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e60:	dbed      	blt.n	8000e3e <main+0x72>
  }

  tic = htim5.Instance->CNT;
 8000e62:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <main+0x120>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e68:	4a22      	ldr	r2, [pc, #136]	@ (8000ef4 <main+0x128>)
 8000e6a:	6013      	str	r3, [r2, #0]

  //memcpy(cpy, dma, 500*sizeof(float));

  toc = htim5.Instance->CNT;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <main+0x120>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e72:	4a21      	ldr	r2, [pc, #132]	@ (8000ef8 <main+0x12c>)
 8000e74:	6013      	str	r3, [r2, #0]

  HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID, &myDmaFunction);
 8000e76:	4a21      	ldr	r2, [pc, #132]	@ (8000efc <main+0x130>)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4821      	ldr	r0, [pc, #132]	@ (8000f00 <main+0x134>)
 8000e7c:	f002 fc76 	bl	800376c <HAL_DMA_RegisterCallback>
 8000e80:	4603      	mov	r3, r0
 8000e82:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  tic = htim5.Instance->CNT;
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <main+0x120>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef4 <main+0x128>)
 8000e8c:	6013      	str	r3, [r2, #0]
  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 8000e8e:	4918      	ldr	r1, [pc, #96]	@ (8000ef0 <main+0x124>)
 8000e90:	4a1c      	ldr	r2, [pc, #112]	@ (8000f04 <main+0x138>)
 8000e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e96:	481a      	ldr	r0, [pc, #104]	@ (8000f00 <main+0x134>)
 8000e98:	f002 fa82 	bl	80033a0 <HAL_DMA_Start_IT>
  dma_toc = htim5.Instance->CNT;
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <main+0x120>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea2:	4a19      	ldr	r2, [pc, #100]	@ (8000f08 <main+0x13c>)
 8000ea4:	6013      	str	r3, [r2, #0]
  toc = htim5.Instance->CNT;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <main+0x120>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eac:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <main+0x12c>)
 8000eae:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start_IT(&htim3);
 8000eb0:	4816      	ldr	r0, [pc, #88]	@ (8000f0c <main+0x140>)
 8000eb2:	f005 fe5b 	bl	8006b6c <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000eb6:	217f      	movs	r1, #127	@ 0x7f
 8000eb8:	4815      	ldr	r0, [pc, #84]	@ (8000f10 <main+0x144>)
 8000eba:	f002 f825 	bl	8002f08 <HAL_ADCEx_Calibration_Start>
  HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 200);
 8000ebe:	22c8      	movs	r2, #200	@ 0xc8
 8000ec0:	4914      	ldr	r1, [pc, #80]	@ (8000f14 <main+0x148>)
 8000ec2:	4813      	ldr	r0, [pc, #76]	@ (8000f10 <main+0x144>)
 8000ec4:	f001 f832 	bl	8001f2c <HAL_ADC_Start_DMA>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71bb      	strb	r3, [r7, #6]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Transmit(&huart3, welcome_tx_buffer, 16, 10);

	  m2s_Process();
 8000ecc:	f7ff fdca 	bl	8000a64 <m2s_Process>

	  tx_process();
 8000ed0:	f7ff fee2 	bl	8000c98 <tx_process>
	  m2s_Process();
 8000ed4:	bf00      	nop
 8000ed6:	e7f9      	b.n	8000ecc <main+0x100>
 8000ed8:	48000800 	.word	0x48000800
 8000edc:	2000a450 	.word	0x2000a450
 8000ee0:	0800cf78 	.word	0x0800cf78
 8000ee4:	2000a49c 	.word	0x2000a49c
 8000ee8:	2000a3ac 	.word	0x2000a3ac
 8000eec:	2000a404 	.word	0x2000a404
 8000ef0:	200082d8 	.word	0x200082d8
 8000ef4:	200082c8 	.word	0x200082c8
 8000ef8:	200082cc 	.word	0x200082cc
 8000efc:	08000cb9 	.word	0x08000cb9
 8000f00:	200001f0 	.word	0x200001f0
 8000f04:	20009278 	.word	0x20009278
 8000f08:	200082d4 	.word	0x200082d4
 8000f0c:	2000a3b8 	.word	0x2000a3b8
 8000f10:	20000128 	.word	0x20000128
 8000f14:	2000a218 	.word	0x2000a218

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b096      	sub	sp, #88	@ 0x58
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	2244      	movs	r2, #68	@ 0x44
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f00b ffe0 	bl	800ceec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f004 f8a2 	bl	8005084 <HAL_PWREx_ControlVoltageScaling>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000f46:	f000 f83a 	bl	8000fbe <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000f4a:	2322      	movs	r3, #34	@ 0x22
 8000f4c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f54:	2301      	movs	r3, #1
 8000f56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f58:	2340      	movs	r3, #64	@ 0x40
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f60:	2302      	movs	r3, #2
 8000f62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000f68:	231e      	movs	r3, #30
 8000f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f004 f945 	bl	800520c <HAL_RCC_OscConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f88:	f000 f819 	bl	8000fbe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f90:	2303      	movs	r3, #3
 8000f92:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f004 fd4a 	bl	8005a40 <HAL_RCC_ClockConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fb2:	f000 f804 	bl	8000fbe <Error_Handler>
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3758      	adds	r7, #88	@ 0x58
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc2:	b672      	cpsid	i
}
 8000fc4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc6:	bf00      	nop
 8000fc8:	e7fd      	b.n	8000fc6 <Error_Handler+0x8>
	...

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <HAL_MspInit+0x44>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001010 <HAL_MspInit+0x44>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <HAL_MspInit+0x44>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <HAL_MspInit+0x44>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fee:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <HAL_MspInit+0x44>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <NMI_Handler+0x4>

0800101c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <HardFault_Handler+0x4>

08001024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <MemManage_Handler+0x4>

0800102c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <UsageFault_Handler+0x4>

0800103c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106a:	f000 fbc1 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001078:	4802      	ldr	r0, [pc, #8]	@ (8001084 <DMA1_Channel1_IRQHandler+0x10>)
 800107a:	f002 fac7 	bl	800360c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000a5c4 	.word	0x2000a5c4

08001088 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 800108c:	4802      	ldr	r0, [pc, #8]	@ (8001098 <DMA1_Channel2_IRQHandler+0x10>)
 800108e:	f002 fabd 	bl	800360c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001f0 	.word	0x200001f0

0800109c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <DMA1_Channel3_IRQHandler+0x10>)
 80010a2:	f002 fab3 	bl	800360c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000190 	.word	0x20000190

080010b0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010b4:	4802      	ldr	r0, [pc, #8]	@ (80010c0 <ADC1_IRQHandler+0x10>)
 80010b6:	f000 ffbd 	bl	8002034 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000128 	.word	0x20000128

080010c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <TIM3_IRQHandler+0x10>)
 80010ca:	f005 fdbf 	bl	8006c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000a3b8 	.word	0x2000a3b8

080010d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010dc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010e0:	f002 fdf0 	bl	8003cc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <TIM6_DAC_IRQHandler+0x10>)
 80010ee:	f005 fdad 	bl	8006c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000a450 	.word	0x2000a450

080010fc <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <DMA2_Channel2_IRQHandler+0x10>)
 8001102:	f002 fa83 	bl	800360c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000a624 	.word	0x2000a624

08001110 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <OTG_FS_IRQHandler+0x10>)
 8001116:	f002 ff40 	bl	8003f9a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000bb68 	.word	0x2000bb68

08001124 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <LPUART1_IRQHandler+0x10>)
 800112a:	f006 fa87 	bl	800763c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000a49c 	.word	0x2000a49c

08001138 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800117a:	4b1d      	ldr	r3, [pc, #116]	@ (80011f0 <MX_TIM3_Init+0x94>)
 800117c:	4a1d      	ldr	r2, [pc, #116]	@ (80011f4 <MX_TIM3_Init+0x98>)
 800117e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 120-1;
 8001180:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <MX_TIM3_Init+0x94>)
 8001182:	2277      	movs	r2, #119	@ 0x77
 8001184:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <MX_TIM3_Init+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800118c:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <MX_TIM3_Init+0x94>)
 800118e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001192:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <MX_TIM3_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119a:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <MX_TIM3_Init+0x94>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a0:	4813      	ldr	r0, [pc, #76]	@ (80011f0 <MX_TIM3_Init+0x94>)
 80011a2:	f005 fc23 	bl	80069ec <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011ac:	f7ff ff07 	bl	8000fbe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <MX_TIM3_Init+0x94>)
 80011be:	f005 fe47 	bl	8006e50 <HAL_TIM_ConfigClockSource>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011c8:	f7ff fef9 	bl	8000fbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011cc:	2320      	movs	r3, #32
 80011ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <MX_TIM3_Init+0x94>)
 80011da:	f006 f85f 	bl	800729c <HAL_TIMEx_MasterConfigSynchronization>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011e4:	f7ff feeb 	bl	8000fbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000a3b8 	.word	0x2000a3b8
 80011f4:	40000400 	.word	0x40000400

080011f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <MX_TIM5_Init+0x94>)
 8001218:	4a1d      	ldr	r2, [pc, #116]	@ (8001290 <MX_TIM5_Init+0x98>)
 800121a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800121c:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <MX_TIM5_Init+0x94>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <MX_TIM5_Init+0x94>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <MX_TIM5_Init+0x94>)
 800122a:	f04f 32ff 	mov.w	r2, #4294967295
 800122e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001230:	4b16      	ldr	r3, [pc, #88]	@ (800128c <MX_TIM5_Init+0x94>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <MX_TIM5_Init+0x94>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800123c:	4813      	ldr	r0, [pc, #76]	@ (800128c <MX_TIM5_Init+0x94>)
 800123e:	f005 fbd5 	bl	80069ec <HAL_TIM_Base_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001248:	f7ff feb9 	bl	8000fbe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001250:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4619      	mov	r1, r3
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <MX_TIM5_Init+0x94>)
 800125a:	f005 fdf9 	bl	8006e50 <HAL_TIM_ConfigClockSource>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001264:	f7ff feab 	bl	8000fbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_TIM5_Init+0x94>)
 8001276:	f006 f811 	bl	800729c <HAL_TIMEx_MasterConfigSynchronization>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001280:	f7ff fe9d 	bl	8000fbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000a404 	.word	0x2000a404
 8001290:	40000c00 	.word	0x40000c00

08001294 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <MX_TIM6_Init+0x68>)
 80012a6:	4a16      	ldr	r2, [pc, #88]	@ (8001300 <MX_TIM6_Init+0x6c>)
 80012a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <MX_TIM6_Init+0x68>)
 80012ac:	f242 7210 	movw	r2, #10000	@ 0x2710
 80012b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b2:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <MX_TIM6_Init+0x68>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 80012b8:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <MX_TIM6_Init+0x68>)
 80012ba:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80012be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <MX_TIM6_Init+0x68>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012c6:	480d      	ldr	r0, [pc, #52]	@ (80012fc <MX_TIM6_Init+0x68>)
 80012c8:	f005 fb90 	bl	80069ec <HAL_TIM_Base_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80012d2:	f7ff fe74 	bl	8000fbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	@ (80012fc <MX_TIM6_Init+0x68>)
 80012e4:	f005 ffda 	bl	800729c <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80012ee:	f7ff fe66 	bl	8000fbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000a450 	.word	0x2000a450
 8001300:	40001000 	.word	0x40001000

08001304 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a23      	ldr	r2, [pc, #140]	@ (80013a0 <HAL_TIM_Base_MspInit+0x9c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d114      	bne.n	8001340 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001316:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	4a22      	ldr	r2, [pc, #136]	@ (80013a4 <HAL_TIM_Base_MspInit+0xa0>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6593      	str	r3, [r2, #88]	@ 0x58
 8001322:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	201d      	movs	r0, #29
 8001334:	f001 ff55 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001338:	201d      	movs	r0, #29
 800133a:	f001 ff6e 	bl	800321a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800133e:	e02a      	b.n	8001396 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a18      	ldr	r2, [pc, #96]	@ (80013a8 <HAL_TIM_Base_MspInit+0xa4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d10c      	bne.n	8001364 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <HAL_TIM_Base_MspInit+0xa0>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134e:	4a15      	ldr	r2, [pc, #84]	@ (80013a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	6593      	str	r3, [r2, #88]	@ 0x58
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
}
 8001362:	e018      	b.n	8001396 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a10      	ldr	r2, [pc, #64]	@ (80013ac <HAL_TIM_Base_MspInit+0xa8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d113      	bne.n	8001396 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800136e:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001372:	4a0c      	ldr	r2, [pc, #48]	@ (80013a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	6593      	str	r3, [r2, #88]	@ 0x58
 800137a:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <HAL_TIM_Base_MspInit+0xa0>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2036      	movs	r0, #54	@ 0x36
 800138c:	f001 ff29 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001390:	2036      	movs	r0, #54	@ 0x36
 8001392:	f001 ff42 	bl	800321a <HAL_NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40000400 	.word	0x40000400
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40000c00 	.word	0x40000c00
 80013ac:	40001000 	.word	0x40001000

080013b0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80013b4:	4b22      	ldr	r3, [pc, #136]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 80013b6:	4a23      	ldr	r2, [pc, #140]	@ (8001444 <MX_LPUART1_UART_Init+0x94>)
 80013b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80013ba:	4b21      	ldr	r3, [pc, #132]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 80013bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 80013d6:	220c      	movs	r2, #12
 80013d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013da:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e0:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ec:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80013f2:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80013f8:	4811      	ldr	r0, [pc, #68]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 80013fa:	f005 fff5 	bl	80073e8 <HAL_UART_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001404:	f7ff fddb 	bl	8000fbe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001408:	2100      	movs	r1, #0
 800140a:	480d      	ldr	r0, [pc, #52]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 800140c:	f007 fbee 	bl	8008bec <HAL_UARTEx_SetTxFifoThreshold>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001416:	f7ff fdd2 	bl	8000fbe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141a:	2100      	movs	r1, #0
 800141c:	4808      	ldr	r0, [pc, #32]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 800141e:	f007 fc23 	bl	8008c68 <HAL_UARTEx_SetRxFifoThreshold>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001428:	f7ff fdc9 	bl	8000fbe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800142c:	4804      	ldr	r0, [pc, #16]	@ (8001440 <MX_LPUART1_UART_Init+0x90>)
 800142e:	f007 fba4 	bl	8008b7a <HAL_UARTEx_DisableFifoMode>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001438:	f7ff fdc1 	bl	8000fbe <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	2000a49c 	.word	0x2000a49c
 8001444:	40008000 	.word	0x40008000

08001448 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800144c:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 800144e:	4a23      	ldr	r2, [pc, #140]	@ (80014dc <MX_USART3_UART_Init+0x94>)
 8001450:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001466:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147e:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001484:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800148a:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001490:	4811      	ldr	r0, [pc, #68]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 8001492:	f005 ffa9 	bl	80073e8 <HAL_UART_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800149c:	f7ff fd8f 	bl	8000fbe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a0:	2100      	movs	r1, #0
 80014a2:	480d      	ldr	r0, [pc, #52]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 80014a4:	f007 fba2 	bl	8008bec <HAL_UARTEx_SetTxFifoThreshold>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014ae:	f7ff fd86 	bl	8000fbe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b2:	2100      	movs	r1, #0
 80014b4:	4808      	ldr	r0, [pc, #32]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 80014b6:	f007 fbd7 	bl	8008c68 <HAL_UARTEx_SetRxFifoThreshold>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014c0:	f7ff fd7d 	bl	8000fbe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <MX_USART3_UART_Init+0x90>)
 80014c6:	f007 fb58 	bl	8008b7a <HAL_UARTEx_DisableFifoMode>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014d0:	f7ff fd75 	bl	8000fbe <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000a530 	.word	0x2000a530
 80014dc:	40004800 	.word	0x40004800

080014e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0b0      	sub	sp, #192	@ 0xc0
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f8:	f107 0318 	add.w	r3, r7, #24
 80014fc:	2294      	movs	r2, #148	@ 0x94
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f00b fcf3 	bl	800ceec <memset>
  if(uartHandle->Instance==LPUART1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a71      	ldr	r2, [pc, #452]	@ (80016d0 <HAL_UART_MspInit+0x1f0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	f040 809a 	bne.w	8001646 <HAL_UART_MspInit+0x166>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001512:	2320      	movs	r3, #32
 8001514:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001516:	2300      	movs	r3, #0
 8001518:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800151a:	f107 0318 	add.w	r3, r7, #24
 800151e:	4618      	mov	r0, r3
 8001520:	f004 fd4c 	bl	8005fbc <HAL_RCCEx_PeriphCLKConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800152a:	f7ff fd48 	bl	8000fbe <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800152e:	4b69      	ldr	r3, [pc, #420]	@ (80016d4 <HAL_UART_MspInit+0x1f4>)
 8001530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001532:	4a68      	ldr	r2, [pc, #416]	@ (80016d4 <HAL_UART_MspInit+0x1f4>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800153a:	4b66      	ldr	r3, [pc, #408]	@ (80016d4 <HAL_UART_MspInit+0x1f4>)
 800153c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001546:	4b63      	ldr	r3, [pc, #396]	@ (80016d4 <HAL_UART_MspInit+0x1f4>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	4a62      	ldr	r2, [pc, #392]	@ (80016d4 <HAL_UART_MspInit+0x1f4>)
 800154c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001552:	4b60      	ldr	r3, [pc, #384]	@ (80016d4 <HAL_UART_MspInit+0x1f4>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 800155e:	f003 fe45 	bl	80051ec <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001562:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001566:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800157c:	2308      	movs	r3, #8
 800157e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001582:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001586:	4619      	mov	r1, r3
 8001588:	4853      	ldr	r0, [pc, #332]	@ (80016d8 <HAL_UART_MspInit+0x1f8>)
 800158a:	f002 f9d7 	bl	800393c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 800158e:	4b53      	ldr	r3, [pc, #332]	@ (80016dc <HAL_UART_MspInit+0x1fc>)
 8001590:	4a53      	ldr	r2, [pc, #332]	@ (80016e0 <HAL_UART_MspInit+0x200>)
 8001592:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001594:	4b51      	ldr	r3, [pc, #324]	@ (80016dc <HAL_UART_MspInit+0x1fc>)
 8001596:	2222      	movs	r2, #34	@ 0x22
 8001598:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159a:	4b50      	ldr	r3, [pc, #320]	@ (80016dc <HAL_UART_MspInit+0x1fc>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a0:	4b4e      	ldr	r3, [pc, #312]	@ (80016dc <HAL_UART_MspInit+0x1fc>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015a6:	4b4d      	ldr	r3, [pc, #308]	@ (80016dc <HAL_UART_MspInit+0x1fc>)
 80015a8:	2280      	movs	r2, #128	@ 0x80
 80015aa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ac:	4b4b      	ldr	r3, [pc, #300]	@ (80016dc <HAL_UART_MspInit+0x1fc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b2:	4b4a      	ldr	r3, [pc, #296]	@ (80016dc <HAL_UART_MspInit+0x1fc>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80015b8:	4b48      	ldr	r3, [pc, #288]	@ (80016dc <HAL_UART_MspInit+0x1fc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015be:	4b47      	ldr	r3, [pc, #284]	@ (80016dc <HAL_UART_MspInit+0x1fc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80015c4:	4845      	ldr	r0, [pc, #276]	@ (80016dc <HAL_UART_MspInit+0x1fc>)
 80015c6:	f001 fe43 	bl	8003250 <HAL_DMA_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80015d0:	f7ff fcf5 	bl	8000fbe <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a41      	ldr	r2, [pc, #260]	@ (80016dc <HAL_UART_MspInit+0x1fc>)
 80015d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80015dc:	4a3f      	ldr	r2, [pc, #252]	@ (80016dc <HAL_UART_MspInit+0x1fc>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA2_Channel2;
 80015e2:	4b40      	ldr	r3, [pc, #256]	@ (80016e4 <HAL_UART_MspInit+0x204>)
 80015e4:	4a40      	ldr	r2, [pc, #256]	@ (80016e8 <HAL_UART_MspInit+0x208>)
 80015e6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80015e8:	4b3e      	ldr	r3, [pc, #248]	@ (80016e4 <HAL_UART_MspInit+0x204>)
 80015ea:	2223      	movs	r2, #35	@ 0x23
 80015ec:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ee:	4b3d      	ldr	r3, [pc, #244]	@ (80016e4 <HAL_UART_MspInit+0x204>)
 80015f0:	2210      	movs	r2, #16
 80015f2:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f4:	4b3b      	ldr	r3, [pc, #236]	@ (80016e4 <HAL_UART_MspInit+0x204>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015fa:	4b3a      	ldr	r3, [pc, #232]	@ (80016e4 <HAL_UART_MspInit+0x204>)
 80015fc:	2280      	movs	r2, #128	@ 0x80
 80015fe:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001600:	4b38      	ldr	r3, [pc, #224]	@ (80016e4 <HAL_UART_MspInit+0x204>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001606:	4b37      	ldr	r3, [pc, #220]	@ (80016e4 <HAL_UART_MspInit+0x204>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800160c:	4b35      	ldr	r3, [pc, #212]	@ (80016e4 <HAL_UART_MspInit+0x204>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001612:	4b34      	ldr	r3, [pc, #208]	@ (80016e4 <HAL_UART_MspInit+0x204>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001618:	4832      	ldr	r0, [pc, #200]	@ (80016e4 <HAL_UART_MspInit+0x204>)
 800161a:	f001 fe19 	bl	8003250 <HAL_DMA_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8001624:	f7ff fccb 	bl	8000fbe <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a2e      	ldr	r2, [pc, #184]	@ (80016e4 <HAL_UART_MspInit+0x204>)
 800162c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800162e:	4a2d      	ldr	r2, [pc, #180]	@ (80016e4 <HAL_UART_MspInit+0x204>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	2046      	movs	r0, #70	@ 0x46
 800163a:	f001 fdd2 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800163e:	2046      	movs	r0, #70	@ 0x46
 8001640:	f001 fdeb 	bl	800321a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001644:	e040      	b.n	80016c8 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART3)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a28      	ldr	r2, [pc, #160]	@ (80016ec <HAL_UART_MspInit+0x20c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d13b      	bne.n	80016c8 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001650:	2304      	movs	r3, #4
 8001652:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001654:	2300      	movs	r3, #0
 8001656:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	4618      	mov	r0, r3
 800165e:	f004 fcad 	bl	8005fbc <HAL_RCCEx_PeriphCLKConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8001668:	f7ff fca9 	bl	8000fbe <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800166c:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <HAL_UART_MspInit+0x1f4>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001670:	4a18      	ldr	r2, [pc, #96]	@ (80016d4 <HAL_UART_MspInit+0x1f4>)
 8001672:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001676:	6593      	str	r3, [r2, #88]	@ 0x58
 8001678:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <HAL_UART_MspInit+0x1f4>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001684:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <HAL_UART_MspInit+0x1f4>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001688:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <HAL_UART_MspInit+0x1f4>)
 800168a:	f043 0308 	orr.w	r3, r3, #8
 800168e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001690:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <HAL_UART_MspInit+0x1f4>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800169c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016b6:	2307      	movs	r3, #7
 80016b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016bc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80016c0:	4619      	mov	r1, r3
 80016c2:	480b      	ldr	r0, [pc, #44]	@ (80016f0 <HAL_UART_MspInit+0x210>)
 80016c4:	f002 f93a 	bl	800393c <HAL_GPIO_Init>
}
 80016c8:	bf00      	nop
 80016ca:	37c0      	adds	r7, #192	@ 0xc0
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40008000 	.word	0x40008000
 80016d4:	40021000 	.word	0x40021000
 80016d8:	48001800 	.word	0x48001800
 80016dc:	2000a5c4 	.word	0x2000a5c4
 80016e0:	40020008 	.word	0x40020008
 80016e4:	2000a624 	.word	0x2000a624
 80016e8:	4002041c 	.word	0x4002041c
 80016ec:	40004800 	.word	0x40004800
 80016f0:	48000c00 	.word	0x48000c00

080016f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800172c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f8:	f7ff fd1e 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <LoopForever+0x6>)
  ldr r1, =_edata
 80016fe:	490d      	ldr	r1, [pc, #52]	@ (8001734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001700:	4a0d      	ldr	r2, [pc, #52]	@ (8001738 <LoopForever+0xe>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001712:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001714:	4c0a      	ldr	r4, [pc, #40]	@ (8001740 <LoopForever+0x16>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001722:	f00b fbeb 	bl	800cefc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001726:	f7ff fb51 	bl	8000dcc <main>

0800172a <LoopForever>:

LoopForever:
    b LoopForever
 800172a:	e7fe      	b.n	800172a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800172c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001738:	0800d050 	.word	0x0800d050
  ldr r2, =_sbss
 800173c:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001740:	2000c294 	.word	0x2000c294

08001744 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <CAN1_RX0_IRQHandler>

08001746 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f001 fd3b 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001756:	2000      	movs	r0, #0
 8001758:	f000 f80e 	bl	8001778 <HAL_InitTick>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	e001      	b.n	800176c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001768:	f7ff fc30 	bl	8000fcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800176c:	79fb      	ldrb	r3, [r7, #7]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <HAL_InitTick+0x6c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d023      	beq.n	80017d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800178c:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <HAL_InitTick+0x70>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <HAL_InitTick+0x6c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179a:	fbb3 f3f1 	udiv	r3, r3, r1
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 fd47 	bl	8003236 <HAL_SYSTICK_Config>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10f      	bne.n	80017ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d809      	bhi.n	80017c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f001 fd11 	bl	80031e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c0:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <HAL_InitTick+0x74>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e007      	b.n	80017d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e004      	b.n	80017d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	e001      	b.n	80017d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008
 8001814:	2000a684 	.word	0x2000a684

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	@ (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	2000a684 	.word	0x2000a684

08001830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff ffee 	bl	8001818 <HAL_GetTick>
 800183c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d005      	beq.n	8001856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800184a:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <HAL_Delay+0x44>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001856:	bf00      	nop
 8001858:	f7ff ffde 	bl	8001818 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	429a      	cmp	r2, r3
 8001866:	d8f7      	bhi.n	8001858 <HAL_Delay+0x28>
  {
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008

08001878 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	609a      	str	r2, [r3, #8]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3360      	adds	r3, #96	@ 0x60
 80018f2:	461a      	mov	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <LL_ADC_SetOffset+0x44>)
 8001902:	4013      	ands	r3, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	4313      	orrs	r3, r2
 8001910:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001918:	bf00      	nop
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	03fff000 	.word	0x03fff000

08001928 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3360      	adds	r3, #96	@ 0x60
 8001936:	461a      	mov	r2, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3360      	adds	r3, #96	@ 0x60
 8001964:	461a      	mov	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	615a      	str	r2, [r3, #20]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b087      	sub	sp, #28
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3330      	adds	r3, #48	@ 0x30
 80019e6:	461a      	mov	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	4413      	add	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	211f      	movs	r1, #31
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	401a      	ands	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0e9b      	lsrs	r3, r3, #26
 8001a0e:	f003 011f 	and.w	r1, r3, #31
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a22:	bf00      	nop
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3314      	adds	r3, #20
 8001a64:	461a      	mov	r2, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	0e5b      	lsrs	r3, r3, #25
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	4413      	add	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	0d1b      	lsrs	r3, r3, #20
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	2107      	movs	r1, #7
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	401a      	ands	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	0d1b      	lsrs	r3, r3, #20
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a9e:	bf00      	nop
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0318 	and.w	r3, r3, #24
 8001ace:	4908      	ldr	r1, [pc, #32]	@ (8001af0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ad0:	40d9      	lsrs	r1, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ada:	431a      	orrs	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	0007ffff 	.word	0x0007ffff

08001af4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6093      	str	r3, [r2, #8]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b2c:	d101      	bne.n	8001b32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b7c:	d101      	bne.n	8001b82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ba0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bcc:	f043 0202 	orr.w	r2, r3, #2
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <LL_ADC_IsEnabled+0x18>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <LL_ADC_IsEnabled+0x1a>
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d101      	bne.n	8001c1e <LL_ADC_IsDisableOngoing+0x18>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <LL_ADC_IsDisableOngoing+0x1a>
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c40:	f043 0204 	orr.w	r2, r3, #4
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d101      	bne.n	8001c6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d101      	bne.n	8001c92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e129      	b.n	8001f0e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d109      	bne.n	8001cdc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7fe fc7d 	bl	80005c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff19 	bl	8001b18 <LL_ADC_IsDeepPowerDownEnabled>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d004      	beq.n	8001cf6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff feff 	bl	8001af4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff34 	bl	8001b68 <LL_ADC_IsInternalRegulatorEnabled>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d115      	bne.n	8001d32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff18 	bl	8001b40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d10:	4b81      	ldr	r3, [pc, #516]	@ (8001f18 <HAL_ADC_Init+0x278>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	099b      	lsrs	r3, r3, #6
 8001d16:	4a81      	ldr	r2, [pc, #516]	@ (8001f1c <HAL_ADC_Init+0x27c>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	099b      	lsrs	r3, r3, #6
 8001d1e:	3301      	adds	r3, #1
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d24:	e002      	b.n	8001d2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f9      	bne.n	8001d26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff16 	bl	8001b68 <LL_ADC_IsInternalRegulatorEnabled>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10d      	bne.n	8001d5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d46:	f043 0210 	orr.w	r2, r3, #16
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d52:	f043 0201 	orr.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff76 	bl	8001c54 <LL_ADC_REG_IsConversionOngoing>
 8001d68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 80c2 	bne.w	8001efc <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 80be 	bne.w	8001efc <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d84:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d88:	f043 0202 	orr.w	r2, r3, #2
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff23 	bl	8001be0 <LL_ADC_IsEnabled>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10b      	bne.n	8001db8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001da0:	485f      	ldr	r0, [pc, #380]	@ (8001f20 <HAL_ADC_Init+0x280>)
 8001da2:	f7ff ff1d 	bl	8001be0 <LL_ADC_IsEnabled>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d105      	bne.n	8001db8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4619      	mov	r1, r3
 8001db2:	485c      	ldr	r0, [pc, #368]	@ (8001f24 <HAL_ADC_Init+0x284>)
 8001db4:	f7ff fd60 	bl	8001878 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7e5b      	ldrb	r3, [r3, #25]
 8001dbc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dc2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001dc8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001dce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d106      	bne.n	8001df4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dea:	3b01      	subs	r3, #1
 8001dec:	045b      	lsls	r3, r3, #17
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d009      	beq.n	8001e10 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e00:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e08:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	4b44      	ldr	r3, [pc, #272]	@ (8001f28 <HAL_ADC_Init+0x288>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	69b9      	ldr	r1, [r7, #24]
 8001e20:	430b      	orrs	r3, r1
 8001e22:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff26 	bl	8001c7a <LL_ADC_INJ_IsConversionOngoing>
 8001e2e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d140      	bne.n	8001eb8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d13d      	bne.n	8001eb8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7e1b      	ldrb	r3, [r3, #24]
 8001e44:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e46:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e4e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e5e:	f023 0306 	bic.w	r3, r3, #6
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	69b9      	ldr	r1, [r7, #24]
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d118      	bne.n	8001ea8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e8c:	4311      	orrs	r1, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	611a      	str	r2, [r3, #16]
 8001ea6:	e007      	b.n	8001eb8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d10c      	bne.n	8001eda <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f023 010f 	bic.w	r1, r3, #15
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	1e5a      	subs	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ed8:	e007      	b.n	8001eea <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 020f 	bic.w	r2, r2, #15
 8001ee8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eee:	f023 0303 	bic.w	r3, r3, #3
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001efa:	e007      	b.n	8001f0c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f00:	f043 0210 	orr.w	r2, r3, #16
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	053e2d63 	.word	0x053e2d63
 8001f20:	50040000 	.word	0x50040000
 8001f24:	50040300 	.word	0x50040300
 8001f28:	fff0c007 	.word	0xfff0c007

08001f2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fe89 	bl	8001c54 <LL_ADC_REG_IsConversionOngoing>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d167      	bne.n	8002018 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_Start_DMA+0x2a>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e063      	b.n	800201e <HAL_ADC_Start_DMA+0xf2>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 fe2c 	bl	8002bbc <ADC_Enable>
 8001f64:	4603      	mov	r3, r0
 8001f66:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d14f      	bne.n	800200e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f72:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f92:	f023 0206 	bic.w	r2, r3, #6
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f9a:	e002      	b.n	8001fa2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fa6:	4a20      	ldr	r2, [pc, #128]	@ (8002028 <HAL_ADC_Start_DMA+0xfc>)
 8001fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fae:	4a1f      	ldr	r2, [pc, #124]	@ (800202c <HAL_ADC_Start_DMA+0x100>)
 8001fb0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8002030 <HAL_ADC_Start_DMA+0x104>)
 8001fb8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	221c      	movs	r2, #28
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0210 	orr.w	r2, r2, #16
 8001fd8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	3340      	adds	r3, #64	@ 0x40
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f001 f9d1 	bl	80033a0 <HAL_DMA_Start_IT>
 8001ffe:	4603      	mov	r3, r0
 8002000:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fe10 	bl	8001c2c <LL_ADC_REG_StartConversion>
 800200c:	e006      	b.n	800201c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002016:	e001      	b.n	800201c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002018:	2302      	movs	r3, #2
 800201a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800201c:	7dfb      	ldrb	r3, [r7, #23]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	08002d87 	.word	0x08002d87
 800202c:	08002e5f 	.word	0x08002e5f
 8002030:	08002e7b 	.word	0x08002e7b

08002034 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d017      	beq.n	800208a <HAL_ADC_IRQHandler+0x56>
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d012      	beq.n	800208a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002074:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 ffcb 	bl	8003018 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2202      	movs	r2, #2
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d004      	beq.n	800209e <HAL_ADC_IRQHandler+0x6a>
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d05e      	beq.n	8002166 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d059      	beq.n	8002166 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d105      	bne.n	80020ca <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fc6e 	bl	80019b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d03e      	beq.n	8002158 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d135      	bne.n	8002158 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d12e      	bne.n	8002158 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fda8 	bl	8001c54 <LL_ADC_REG_IsConversionOngoing>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d11a      	bne.n	8002140 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 020c 	bic.w	r2, r2, #12
 8002118:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d112      	bne.n	8002158 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	659a      	str	r2, [r3, #88]	@ 0x58
 800213e:	e00b      	b.n	8002158 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002144:	f043 0210 	orr.w	r2, r3, #16
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7fe fdc7 	bl	8000cec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	220c      	movs	r2, #12
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b00      	cmp	r3, #0
 800216e:	d004      	beq.n	800217a <HAL_ADC_IRQHandler+0x146>
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002180:	2b00      	cmp	r3, #0
 8002182:	d072      	beq.n	800226a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d06d      	beq.n	800226a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fc3f 	bl	8001a2e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80021b0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fbfa 	bl	80019b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021bc:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d047      	beq.n	800225c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <HAL_ADC_IRQHandler+0x1b2>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d03f      	beq.n	800225c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d13a      	bne.n	800225c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f0:	2b40      	cmp	r3, #64	@ 0x40
 80021f2:	d133      	bne.n	800225c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d12e      	bne.n	800225c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fd39 	bl	8001c7a <LL_ADC_INJ_IsConversionOngoing>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d11a      	bne.n	8002244 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800221c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d112      	bne.n	800225c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	659a      	str	r2, [r3, #88]	@ 0x58
 8002242:	e00b      	b.n	800225c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002248:	f043 0210 	orr.w	r2, r3, #16
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002254:	f043 0201 	orr.w	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 feb3 	bl	8002fc8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2260      	movs	r2, #96	@ 0x60
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002270:	2b00      	cmp	r3, #0
 8002272:	d011      	beq.n	8002298 <HAL_ADC_IRQHandler+0x264>
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00c      	beq.n	8002298 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002282:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f886 	bl	800239c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2280      	movs	r2, #128	@ 0x80
 8002296:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d012      	beq.n	80022c8 <HAL_ADC_IRQHandler+0x294>
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00d      	beq.n	80022c8 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fe99 	bl	8002ff0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d012      	beq.n	80022f8 <HAL_ADC_IRQHandler+0x2c4>
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00d      	beq.n	80022f8 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 fe8b 	bl	8003004 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d02a      	beq.n	8002358 <HAL_ADC_IRQHandler+0x324>
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	d025      	beq.n	8002358 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002314:	2301      	movs	r3, #1
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	e008      	b.n	800232c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002328:	2301      	movs	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d10e      	bne.n	8002350 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002342:	f043 0202 	orr.w	r2, r3, #2
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f830 	bl	80023b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2210      	movs	r2, #16
 8002356:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235e:	2b00      	cmp	r3, #0
 8002360:	d018      	beq.n	8002394 <HAL_ADC_IRQHandler+0x360>
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002368:	2b00      	cmp	r3, #0
 800236a:	d013      	beq.n	8002394 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002370:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237c:	f043 0208 	orr.w	r2, r3, #8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800238c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fe24 	bl	8002fdc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002394:	bf00      	nop
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b0b6      	sub	sp, #216	@ 0xd8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x22>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e3d5      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x7ce>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fc2e 	bl	8001c54 <LL_ADC_REG_IsConversionOngoing>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 83ba 	bne.w	8002b74 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b05      	cmp	r3, #5
 800240e:	d824      	bhi.n	800245a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	3b02      	subs	r3, #2
 8002416:	2b03      	cmp	r3, #3
 8002418:	d81b      	bhi.n	8002452 <HAL_ADC_ConfigChannel+0x8e>
 800241a:	a201      	add	r2, pc, #4	@ (adr r2, 8002420 <HAL_ADC_ConfigChannel+0x5c>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	08002431 	.word	0x08002431
 8002424:	08002439 	.word	0x08002439
 8002428:	08002441 	.word	0x08002441
 800242c:	08002449 	.word	0x08002449
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002430:	230c      	movs	r3, #12
 8002432:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002436:	e010      	b.n	800245a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002438:	2312      	movs	r3, #18
 800243a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800243e:	e00c      	b.n	800245a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002440:	2318      	movs	r3, #24
 8002442:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002446:	e008      	b.n	800245a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800244c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002450:	e003      	b.n	800245a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002452:	2306      	movs	r3, #6
 8002454:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002458:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002468:	f7ff fab5 	bl	80019d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fbef 	bl	8001c54 <LL_ADC_REG_IsConversionOngoing>
 8002476:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fbfb 	bl	8001c7a <LL_ADC_INJ_IsConversionOngoing>
 8002484:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002488:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800248c:	2b00      	cmp	r3, #0
 800248e:	f040 81bf 	bne.w	8002810 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002496:	2b00      	cmp	r3, #0
 8002498:	f040 81ba 	bne.w	8002810 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024a4:	d10f      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2200      	movs	r2, #0
 80024b0:	4619      	mov	r1, r3
 80024b2:	f7ff facf 	bl	8001a54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fa63 	bl	800198a <LL_ADC_SetSamplingTimeCommonConfig>
 80024c4:	e00e      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6819      	ldr	r1, [r3, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f7ff fabe 	bl	8001a54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fa53 	bl	800198a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	08db      	lsrs	r3, r3, #3
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b04      	cmp	r3, #4
 8002504:	d00a      	beq.n	800251c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6919      	ldr	r1, [r3, #16]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002516:	f7ff f9e3 	bl	80018e0 <LL_ADC_SetOffset>
 800251a:	e179      	b.n	8002810 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fa00 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8002528:	4603      	mov	r3, r0
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10a      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x184>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff f9f5 	bl	8001928 <LL_ADC_GetOffsetChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	f003 021f 	and.w	r2, r3, #31
 8002546:	e01e      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1c2>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff f9ea 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800256a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800256e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002576:	2320      	movs	r3, #32
 8002578:	e004      	b.n	8002584 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800257a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258e:	2b00      	cmp	r3, #0
 8002590:	d105      	bne.n	800259e <HAL_ADC_ConfigChannel+0x1da>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	0e9b      	lsrs	r3, r3, #26
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	e018      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x20c>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80025b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80025ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80025c2:	2320      	movs	r3, #32
 80025c4:	e004      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80025c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d106      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2200      	movs	r2, #0
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff f9b9 	bl	8001954 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2101      	movs	r1, #1
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff f99d 	bl	8001928 <LL_ADC_GetOffsetChannel>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <HAL_ADC_ConfigChannel+0x24a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff f992 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8002604:	4603      	mov	r3, r0
 8002606:	0e9b      	lsrs	r3, r3, #26
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	e01e      	b.n	800264c <HAL_ADC_ConfigChannel+0x288>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2101      	movs	r1, #1
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff f987 	bl	8001928 <LL_ADC_GetOffsetChannel>
 800261a:	4603      	mov	r3, r0
 800261c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800262c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002630:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002634:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e004      	b.n	800264a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002640:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x2a0>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0e9b      	lsrs	r3, r3, #26
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	e018      	b.n	8002696 <HAL_ADC_ConfigChannel+0x2d2>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002678:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800267c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002680:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002688:	2320      	movs	r3, #32
 800268a:	e004      	b.n	8002696 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800268c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002696:	429a      	cmp	r2, r3
 8002698:	d106      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2200      	movs	r2, #0
 80026a0:	2101      	movs	r1, #1
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff f956 	bl	8001954 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2102      	movs	r1, #2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f93a 	bl	8001928 <LL_ADC_GetOffsetChannel>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x310>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2102      	movs	r1, #2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff f92f 	bl	8001928 <LL_ADC_GetOffsetChannel>
 80026ca:	4603      	mov	r3, r0
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	f003 021f 	and.w	r2, r3, #31
 80026d2:	e01e      	b.n	8002712 <HAL_ADC_ConfigChannel+0x34e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2102      	movs	r1, #2
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff f924 	bl	8001928 <LL_ADC_GetOffsetChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80026f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80026fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002702:	2320      	movs	r3, #32
 8002704:	e004      	b.n	8002710 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271a:	2b00      	cmp	r3, #0
 800271c:	d105      	bne.n	800272a <HAL_ADC_ConfigChannel+0x366>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	0e9b      	lsrs	r3, r3, #26
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	e014      	b.n	8002754 <HAL_ADC_ConfigChannel+0x390>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002738:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800273a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800273e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002746:	2320      	movs	r3, #32
 8002748:	e004      	b.n	8002754 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800274a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002754:	429a      	cmp	r2, r3
 8002756:	d106      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2200      	movs	r2, #0
 800275e:	2102      	movs	r1, #2
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff f8f7 	bl	8001954 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2103      	movs	r1, #3
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff f8db 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10a      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x3ce>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2103      	movs	r1, #3
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff f8d0 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	0e9b      	lsrs	r3, r3, #26
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	e017      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x3fe>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2103      	movs	r1, #3
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff f8c5 	bl	8001928 <LL_ADC_GetOffsetChannel>
 800279e:	4603      	mov	r3, r0
 80027a0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80027aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027ac:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80027ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80027b4:	2320      	movs	r3, #32
 80027b6:	e003      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80027b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d105      	bne.n	80027da <HAL_ADC_ConfigChannel+0x416>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	0e9b      	lsrs	r3, r3, #26
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	e011      	b.n	80027fe <HAL_ADC_ConfigChannel+0x43a>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80027e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80027ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80027f2:	2320      	movs	r3, #32
 80027f4:	e003      	b.n	80027fe <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80027f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027fe:	429a      	cmp	r2, r3
 8002800:	d106      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	2103      	movs	r1, #3
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff f8a2 	bl	8001954 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff f9e3 	bl	8001be0 <LL_ADC_IsEnabled>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	f040 813f 	bne.w	8002aa0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6819      	ldr	r1, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	461a      	mov	r2, r3
 8002830:	f7ff f93c 	bl	8001aac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a8e      	ldr	r2, [pc, #568]	@ (8002a74 <HAL_ADC_ConfigChannel+0x6b0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	f040 8130 	bne.w	8002aa0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x4a4>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0e9b      	lsrs	r3, r3, #26
 8002856:	3301      	adds	r3, #1
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	2b09      	cmp	r3, #9
 800285e:	bf94      	ite	ls
 8002860:	2301      	movls	r3, #1
 8002862:	2300      	movhi	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	e019      	b.n	800289c <HAL_ADC_ConfigChannel+0x4d8>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002878:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800287a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002880:	2320      	movs	r3, #32
 8002882:	e003      	b.n	800288c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002884:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2b09      	cmp	r3, #9
 8002894:	bf94      	ite	ls
 8002896:	2301      	movls	r3, #1
 8002898:	2300      	movhi	r3, #0
 800289a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800289c:	2b00      	cmp	r3, #0
 800289e:	d079      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d107      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x4f8>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0e9b      	lsrs	r3, r3, #26
 80028b2:	3301      	adds	r3, #1
 80028b4:	069b      	lsls	r3, r3, #26
 80028b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ba:	e015      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x524>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80028ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028cc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80028ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80028d4:	2320      	movs	r3, #32
 80028d6:	e003      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80028d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	3301      	adds	r3, #1
 80028e2:	069b      	lsls	r3, r3, #26
 80028e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d109      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x544>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	3301      	adds	r3, #1
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	2101      	movs	r1, #1
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	e017      	b.n	8002938 <HAL_ADC_ConfigChannel+0x574>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002918:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800291a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002920:	2320      	movs	r3, #32
 8002922:	e003      	b.n	800292c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	3301      	adds	r3, #1
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	ea42 0103 	orr.w	r1, r2, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <HAL_ADC_ConfigChannel+0x59a>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0e9b      	lsrs	r3, r3, #26
 800294e:	3301      	adds	r3, #1
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	4613      	mov	r3, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4413      	add	r3, r2
 800295a:	051b      	lsls	r3, r3, #20
 800295c:	e018      	b.n	8002990 <HAL_ADC_ConfigChannel+0x5cc>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800296c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e003      	b.n	8002982 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800297a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	3301      	adds	r3, #1
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002990:	430b      	orrs	r3, r1
 8002992:	e080      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299c:	2b00      	cmp	r3, #0
 800299e:	d107      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x5ec>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0e9b      	lsrs	r3, r3, #26
 80029a6:	3301      	adds	r3, #1
 80029a8:	069b      	lsls	r3, r3, #26
 80029aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ae:	e015      	b.n	80029dc <HAL_ADC_ConfigChannel+0x618>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80029c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80029c8:	2320      	movs	r3, #32
 80029ca:	e003      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80029cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	069b      	lsls	r3, r3, #26
 80029d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d109      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x638>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	0e9b      	lsrs	r3, r3, #26
 80029ee:	3301      	adds	r3, #1
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	2101      	movs	r1, #1
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	e017      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x668>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	61bb      	str	r3, [r7, #24]
  return result;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002a14:	2320      	movs	r3, #32
 8002a16:	e003      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	ea42 0103 	orr.w	r1, r2, r3
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10d      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x694>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	3301      	adds	r3, #1
 8002a44:	f003 021f 	and.w	r2, r3, #31
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3b1e      	subs	r3, #30
 8002a50:	051b      	lsls	r3, r3, #20
 8002a52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a56:	e01d      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x6d0>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	60fb      	str	r3, [r7, #12]
  return result;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d103      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	e005      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x6bc>
 8002a74:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	f003 021f 	and.w	r2, r3, #31
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3b1e      	subs	r3, #30
 8002a8e:	051b      	lsls	r3, r3, #20
 8002a90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a94:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f7fe ffda 	bl	8001a54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b3d      	ldr	r3, [pc, #244]	@ (8002b9c <HAL_ADC_ConfigChannel+0x7d8>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d06c      	beq.n	8002b86 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aac:	483c      	ldr	r0, [pc, #240]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002aae:	f7fe ff09 	bl	80018c4 <LL_ADC_GetCommonPathInternalCh>
 8002ab2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a3a      	ldr	r2, [pc, #232]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d127      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ac4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d121      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a35      	ldr	r2, [pc, #212]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d157      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ad6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ada:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ade:	4619      	mov	r1, r3
 8002ae0:	482f      	ldr	r0, [pc, #188]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ae2:	f7fe fedc 	bl	800189e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ae6:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <HAL_ADC_ConfigChannel+0x7e8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	4a30      	ldr	r2, [pc, #192]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	099b      	lsrs	r3, r3, #6
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b00:	e002      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f9      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b0e:	e03a      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a27      	ldr	r2, [pc, #156]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d113      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10d      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d12a      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4819      	ldr	r0, [pc, #100]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b3c:	f7fe feaf 	bl	800189e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b40:	e021      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d11c      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d116      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a12      	ldr	r2, [pc, #72]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d111      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	480c      	ldr	r0, [pc, #48]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b6e:	f7fe fe96 	bl	800189e <LL_ADC_SetCommonPathInternalCh>
 8002b72:	e008      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002b8e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	37d8      	adds	r7, #216	@ 0xd8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	80080000 	.word	0x80080000
 8002ba0:	50040300 	.word	0x50040300
 8002ba4:	c7520000 	.word	0xc7520000
 8002ba8:	50040000 	.word	0x50040000
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	053e2d63 	.word	0x053e2d63
 8002bb4:	cb840000 	.word	0xcb840000
 8002bb8:	80000001 	.word	0x80000001

08002bbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff f807 	bl	8001be0 <LL_ADC_IsEnabled>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d169      	bne.n	8002cac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	4b36      	ldr	r3, [pc, #216]	@ (8002cb8 <ADC_Enable+0xfc>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00d      	beq.n	8002c02 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bea:	f043 0210 	orr.w	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf6:	f043 0201 	orr.w	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e055      	b.n	8002cae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe ffc2 	bl	8001b90 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c0c:	482b      	ldr	r0, [pc, #172]	@ (8002cbc <ADC_Enable+0x100>)
 8002c0e:	f7fe fe59 	bl	80018c4 <LL_ADC_GetCommonPathInternalCh>
 8002c12:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c1c:	4b28      	ldr	r3, [pc, #160]	@ (8002cc0 <ADC_Enable+0x104>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	099b      	lsrs	r3, r3, #6
 8002c22:	4a28      	ldr	r2, [pc, #160]	@ (8002cc4 <ADC_Enable+0x108>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	099b      	lsrs	r3, r3, #6
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c36:	e002      	b.n	8002c3e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f9      	bne.n	8002c38 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c44:	f7fe fde8 	bl	8001818 <HAL_GetTick>
 8002c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c4a:	e028      	b.n	8002c9e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe ffc5 	bl	8001be0 <LL_ADC_IsEnabled>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d104      	bne.n	8002c66 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe ff95 	bl	8001b90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c66:	f7fe fdd7 	bl	8001818 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d914      	bls.n	8002c9e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d00d      	beq.n	8002c9e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	f043 0210 	orr.w	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e007      	b.n	8002cae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d1cf      	bne.n	8002c4c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	8000003f 	.word	0x8000003f
 8002cbc:	50040300 	.word	0x50040300
 8002cc0:	20000000 	.word	0x20000000
 8002cc4:	053e2d63 	.word	0x053e2d63

08002cc8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe ff96 	bl	8001c06 <LL_ADC_IsDisableOngoing>
 8002cda:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe ff7d 	bl	8001be0 <LL_ADC_IsEnabled>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d047      	beq.n	8002d7c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d144      	bne.n	8002d7c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 030d 	and.w	r3, r3, #13
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d10c      	bne.n	8002d1a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe ff57 	bl	8001bb8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2203      	movs	r2, #3
 8002d10:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d12:	f7fe fd81 	bl	8001818 <HAL_GetTick>
 8002d16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d18:	e029      	b.n	8002d6e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1e:	f043 0210 	orr.w	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e023      	b.n	8002d7e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d36:	f7fe fd6f 	bl	8001818 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d914      	bls.n	8002d6e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00d      	beq.n	8002d6e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d56:	f043 0210 	orr.w	r2, r3, #16
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e007      	b.n	8002d7e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1dc      	bne.n	8002d36 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d14b      	bne.n	8002e38 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d021      	beq.n	8002dfe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fdf6 	bl	80019b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d032      	beq.n	8002e30 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d12b      	bne.n	8002e30 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ddc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d11f      	bne.n	8002e30 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dfc:	e018      	b.n	8002e30 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d111      	bne.n	8002e30 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d105      	bne.n	8002e30 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e28:	f043 0201 	orr.w	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f7fd ff5b 	bl	8000cec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e36:	e00e      	b.n	8002e56 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff fab3 	bl	80023b0 <HAL_ADC_ErrorCallback>
}
 8002e4a:	e004      	b.n	8002e56 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	4798      	blx	r3
}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f7fd ff75 	bl	8000d5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e98:	f043 0204 	orr.w	r2, r3, #4
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f7ff fa85 	bl	80023b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <LL_ADC_StartCalibration>:
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002ec0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_ADC_IsCalibrationOnGoing>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ef4:	d101      	bne.n	8002efa <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADCEx_Calibration_Start+0x1c>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e04d      	b.n	8002fc0 <HAL_ADCEx_Calibration_Start+0xb8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff fecb 	bl	8002cc8 <ADC_Disable>
 8002f32:	4603      	mov	r3, r0
 8002f34:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d136      	bne.n	8002faa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f44:	f023 0302 	bic.w	r3, r3, #2
 8002f48:	f043 0202 	orr.w	r2, r3, #2
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6839      	ldr	r1, [r7, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff ffa9 	bl	8002eae <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f5c:	e014      	b.n	8002f88 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	3301      	adds	r3, #1
 8002f62:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002f6a:	d30d      	bcc.n	8002f88 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	f023 0312 	bic.w	r3, r3, #18
 8002f74:	f043 0210 	orr.w	r2, r3, #16
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e01b      	b.n	8002fc0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ffa7 	bl	8002ee0 <LL_ADC_IsCalibrationOnGoing>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e2      	bne.n	8002f5e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	f023 0303 	bic.w	r3, r3, #3
 8002fa0:	f043 0201 	orr.w	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fa8:	e005      	b.n	8002fb6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fae:	f043 0210 	orr.w	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	@ (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	@ (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4907      	ldr	r1, [pc, #28]	@ (80030c8 <__NVIC_EnableIRQ+0x38>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	@ (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	@ (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	@ 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
         );
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	@ 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003198:	d301      	bcc.n	800319e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800319a:	2301      	movs	r3, #1
 800319c:	e00f      	b.n	80031be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319e:	4a0a      	ldr	r2, [pc, #40]	@ (80031c8 <SysTick_Config+0x40>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a6:	210f      	movs	r1, #15
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	f7ff ff8e 	bl	80030cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b0:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <SysTick_Config+0x40>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b6:	4b04      	ldr	r3, [pc, #16]	@ (80031c8 <SysTick_Config+0x40>)
 80031b8:	2207      	movs	r2, #7
 80031ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	e000e010 	.word	0xe000e010

080031cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff29 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031f4:	f7ff ff3e 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	6978      	ldr	r0, [r7, #20]
 8003200:	f7ff ff8e 	bl	8003120 <NVIC_EncodePriority>
 8003204:	4602      	mov	r2, r0
 8003206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff5d 	bl	80030cc <__NVIC_SetPriority>
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff31 	bl	8003090 <__NVIC_EnableIRQ>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ffa2 	bl	8003188 <SysTick_Config>
 8003244:	4603      	mov	r3, r0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e08d      	b.n	800337e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	4b47      	ldr	r3, [pc, #284]	@ (8003388 <HAL_DMA_Init+0x138>)
 800326a:	429a      	cmp	r2, r3
 800326c:	d80f      	bhi.n	800328e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	4b45      	ldr	r3, [pc, #276]	@ (800338c <HAL_DMA_Init+0x13c>)
 8003276:	4413      	add	r3, r2
 8003278:	4a45      	ldr	r2, [pc, #276]	@ (8003390 <HAL_DMA_Init+0x140>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	009a      	lsls	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a42      	ldr	r2, [pc, #264]	@ (8003394 <HAL_DMA_Init+0x144>)
 800328a:	641a      	str	r2, [r3, #64]	@ 0x40
 800328c:	e00e      	b.n	80032ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	4b40      	ldr	r3, [pc, #256]	@ (8003398 <HAL_DMA_Init+0x148>)
 8003296:	4413      	add	r3, r2
 8003298:	4a3d      	ldr	r2, [pc, #244]	@ (8003390 <HAL_DMA_Init+0x140>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	009a      	lsls	r2, r3, #2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a3c      	ldr	r2, [pc, #240]	@ (800339c <HAL_DMA_Init+0x14c>)
 80032aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80032c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 faba 	bl	8003878 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800330c:	d102      	bne.n	8003314 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003328:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d010      	beq.n	8003354 <HAL_DMA_Init+0x104>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b04      	cmp	r3, #4
 8003338:	d80c      	bhi.n	8003354 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fada 	bl	80038f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	e008      	b.n	8003366 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40020407 	.word	0x40020407
 800338c:	bffdfff8 	.word	0xbffdfff8
 8003390:	cccccccd 	.word	0xcccccccd
 8003394:	40020000 	.word	0x40020000
 8003398:	bffdfbf8 	.word	0xbffdfbf8
 800339c:	40020400 	.word	0x40020400

080033a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_DMA_Start_IT+0x20>
 80033bc:	2302      	movs	r3, #2
 80033be:	e066      	b.n	800348e <HAL_DMA_Start_IT+0xee>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d155      	bne.n	8003480 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f9ff 	bl	80037fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 020e 	orr.w	r2, r2, #14
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	e00f      	b.n	8003438 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0204 	bic.w	r2, r2, #4
 8003426:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 020a 	orr.w	r2, r2, #10
 8003436:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003450:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003454:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003468:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800346c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e005      	b.n	800348c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003488:	2302      	movs	r3, #2
 800348a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800348c:	7dfb      	ldrb	r3, [r7, #23]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d008      	beq.n	80034c0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2204      	movs	r2, #4
 80034b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e040      	b.n	8003542 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 020e 	bic.w	r2, r2, #14
 80034ce:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034de:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f4:	f003 021c 	and.w	r2, r3, #28
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003502:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800350c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003520:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003524:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800352e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003540:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d005      	beq.n	8003572 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2204      	movs	r2, #4
 800356a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
 8003570:	e047      	b.n	8003602 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 020e 	bic.w	r2, r2, #14
 8003580:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800359c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a6:	f003 021c 	and.w	r2, r3, #28
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	2101      	movs	r1, #1
 80035b0:	fa01 f202 	lsl.w	r2, r1, r2
 80035b4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00c      	beq.n	80035e2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80035e0:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
    }
  }
  return status;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003628:	f003 031c 	and.w	r3, r3, #28
 800362c:	2204      	movs	r2, #4
 800362e:	409a      	lsls	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d026      	beq.n	8003686 <HAL_DMA_IRQHandler+0x7a>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d021      	beq.n	8003686 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d107      	bne.n	8003660 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0204 	bic.w	r2, r2, #4
 800365e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003664:	f003 021c 	and.w	r2, r3, #28
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366c:	2104      	movs	r1, #4
 800366e:	fa01 f202 	lsl.w	r2, r1, r2
 8003672:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003678:	2b00      	cmp	r3, #0
 800367a:	d071      	beq.n	8003760 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003684:	e06c      	b.n	8003760 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	f003 031c 	and.w	r3, r3, #28
 800368e:	2202      	movs	r2, #2
 8003690:	409a      	lsls	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d02e      	beq.n	80036f8 <HAL_DMA_IRQHandler+0xec>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d029      	beq.n	80036f8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10b      	bne.n	80036ca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 020a 	bic.w	r2, r2, #10
 80036c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ce:	f003 021c 	and.w	r2, r3, #28
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	2102      	movs	r1, #2
 80036d8:	fa01 f202 	lsl.w	r2, r1, r2
 80036dc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d038      	beq.n	8003760 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80036f6:	e033      	b.n	8003760 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fc:	f003 031c 	and.w	r3, r3, #28
 8003700:	2208      	movs	r2, #8
 8003702:	409a      	lsls	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02a      	beq.n	8003762 <HAL_DMA_IRQHandler+0x156>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d025      	beq.n	8003762 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 020e 	bic.w	r2, r2, #14
 8003724:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372a:	f003 021c 	and.w	r2, r3, #28
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	2101      	movs	r1, #1
 8003734:	fa01 f202 	lsl.w	r2, r1, r2
 8003738:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003754:	2b00      	cmp	r3, #0
 8003756:	d004      	beq.n	8003762 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003760:	bf00      	nop
 8003762:	bf00      	nop
}
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	460b      	mov	r3, r1
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_DMA_RegisterCallback+0x20>
 8003788:	2302      	movs	r3, #2
 800378a:	e031      	b.n	80037f0 <HAL_DMA_RegisterCallback+0x84>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	d120      	bne.n	80037e2 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 80037a0:	7afb      	ldrb	r3, [r7, #11]
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d81a      	bhi.n	80037dc <HAL_DMA_RegisterCallback+0x70>
 80037a6:	a201      	add	r2, pc, #4	@ (adr r2, 80037ac <HAL_DMA_RegisterCallback+0x40>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	080037bd 	.word	0x080037bd
 80037b0:	080037c5 	.word	0x080037c5
 80037b4:	080037cd 	.word	0x080037cd
 80037b8:	080037d5 	.word	0x080037d5
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 80037c2:	e010      	b.n	80037e6 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 80037ca:	e00c      	b.n	80037e6 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 80037d2:	e008      	b.n	80037e6 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80037da:	e004      	b.n	80037e6 <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	75fb      	strb	r3, [r7, #23]
        break;
 80037e0:	e001      	b.n	80037e6 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003812:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003824:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	f003 021c 	and.w	r2, r3, #28
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	2101      	movs	r1, #1
 8003834:	fa01 f202 	lsl.w	r2, r1, r2
 8003838:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b10      	cmp	r3, #16
 8003848:	d108      	bne.n	800385c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800385a:	e007      	b.n	800386c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	60da      	str	r2, [r3, #12]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	4b17      	ldr	r3, [pc, #92]	@ (80038e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003888:	429a      	cmp	r2, r3
 800388a:	d80a      	bhi.n	80038a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003890:	089b      	lsrs	r3, r3, #2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003898:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6493      	str	r3, [r2, #72]	@ 0x48
 80038a0:	e007      	b.n	80038b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	089b      	lsrs	r3, r3, #2
 80038a8:	009a      	lsls	r2, r3, #2
 80038aa:	4b0f      	ldr	r3, [pc, #60]	@ (80038e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80038ac:	4413      	add	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	3b08      	subs	r3, #8
 80038ba:	4a0c      	ldr	r2, [pc, #48]	@ (80038ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a0a      	ldr	r2, [pc, #40]	@ (80038f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80038c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	2201      	movs	r2, #1
 80038d2:	409a      	lsls	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	40020407 	.word	0x40020407
 80038e8:	4002081c 	.word	0x4002081c
 80038ec:	cccccccd 	.word	0xcccccccd
 80038f0:	40020880 	.word	0x40020880

080038f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4b0b      	ldr	r3, [pc, #44]	@ (8003934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	461a      	mov	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a08      	ldr	r2, [pc, #32]	@ (8003938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003916:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3b01      	subs	r3, #1
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2201      	movs	r2, #1
 8003922:	409a      	lsls	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	1000823f 	.word	0x1000823f
 8003938:	40020940 	.word	0x40020940

0800393c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800394a:	e166      	b.n	8003c1a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	2101      	movs	r1, #1
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	fa01 f303 	lsl.w	r3, r1, r3
 8003958:	4013      	ands	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8158 	beq.w	8003c14 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d005      	beq.n	800397c <HAL_GPIO_Init+0x40>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d130      	bne.n	80039de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	2203      	movs	r2, #3
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4013      	ands	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039b2:	2201      	movs	r2, #1
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 0201 	and.w	r2, r3, #1
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d017      	beq.n	8003a1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2203      	movs	r2, #3
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d123      	bne.n	8003a6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	08da      	lsrs	r2, r3, #3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3208      	adds	r2, #8
 8003a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	220f      	movs	r2, #15
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4013      	ands	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	08da      	lsrs	r2, r3, #3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3208      	adds	r2, #8
 8003a68:	6939      	ldr	r1, [r7, #16]
 8003a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	2203      	movs	r2, #3
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 0203 	and.w	r2, r3, #3
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 80b2 	beq.w	8003c14 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab0:	4b61      	ldr	r3, [pc, #388]	@ (8003c38 <HAL_GPIO_Init+0x2fc>)
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab4:	4a60      	ldr	r2, [pc, #384]	@ (8003c38 <HAL_GPIO_Init+0x2fc>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6613      	str	r3, [r2, #96]	@ 0x60
 8003abc:	4b5e      	ldr	r3, [pc, #376]	@ (8003c38 <HAL_GPIO_Init+0x2fc>)
 8003abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ac8:	4a5c      	ldr	r2, [pc, #368]	@ (8003c3c <HAL_GPIO_Init+0x300>)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	089b      	lsrs	r3, r3, #2
 8003ace:	3302      	adds	r3, #2
 8003ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	220f      	movs	r2, #15
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003af2:	d02b      	beq.n	8003b4c <HAL_GPIO_Init+0x210>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a52      	ldr	r2, [pc, #328]	@ (8003c40 <HAL_GPIO_Init+0x304>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d025      	beq.n	8003b48 <HAL_GPIO_Init+0x20c>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a51      	ldr	r2, [pc, #324]	@ (8003c44 <HAL_GPIO_Init+0x308>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d01f      	beq.n	8003b44 <HAL_GPIO_Init+0x208>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a50      	ldr	r2, [pc, #320]	@ (8003c48 <HAL_GPIO_Init+0x30c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d019      	beq.n	8003b40 <HAL_GPIO_Init+0x204>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a4f      	ldr	r2, [pc, #316]	@ (8003c4c <HAL_GPIO_Init+0x310>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <HAL_GPIO_Init+0x200>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a4e      	ldr	r2, [pc, #312]	@ (8003c50 <HAL_GPIO_Init+0x314>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00d      	beq.n	8003b38 <HAL_GPIO_Init+0x1fc>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a4d      	ldr	r2, [pc, #308]	@ (8003c54 <HAL_GPIO_Init+0x318>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d007      	beq.n	8003b34 <HAL_GPIO_Init+0x1f8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a4c      	ldr	r2, [pc, #304]	@ (8003c58 <HAL_GPIO_Init+0x31c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <HAL_GPIO_Init+0x1f4>
 8003b2c:	2307      	movs	r3, #7
 8003b2e:	e00e      	b.n	8003b4e <HAL_GPIO_Init+0x212>
 8003b30:	2308      	movs	r3, #8
 8003b32:	e00c      	b.n	8003b4e <HAL_GPIO_Init+0x212>
 8003b34:	2306      	movs	r3, #6
 8003b36:	e00a      	b.n	8003b4e <HAL_GPIO_Init+0x212>
 8003b38:	2305      	movs	r3, #5
 8003b3a:	e008      	b.n	8003b4e <HAL_GPIO_Init+0x212>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	e006      	b.n	8003b4e <HAL_GPIO_Init+0x212>
 8003b40:	2303      	movs	r3, #3
 8003b42:	e004      	b.n	8003b4e <HAL_GPIO_Init+0x212>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e002      	b.n	8003b4e <HAL_GPIO_Init+0x212>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <HAL_GPIO_Init+0x212>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	f002 0203 	and.w	r2, r2, #3
 8003b54:	0092      	lsls	r2, r2, #2
 8003b56:	4093      	lsls	r3, r2
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b5e:	4937      	ldr	r1, [pc, #220]	@ (8003c3c <HAL_GPIO_Init+0x300>)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	089b      	lsrs	r3, r3, #2
 8003b64:	3302      	adds	r3, #2
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c5c <HAL_GPIO_Init+0x320>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b90:	4a32      	ldr	r2, [pc, #200]	@ (8003c5c <HAL_GPIO_Init+0x320>)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b96:	4b31      	ldr	r3, [pc, #196]	@ (8003c5c <HAL_GPIO_Init+0x320>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bba:	4a28      	ldr	r2, [pc, #160]	@ (8003c5c <HAL_GPIO_Init+0x320>)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bc0:	4b26      	ldr	r3, [pc, #152]	@ (8003c5c <HAL_GPIO_Init+0x320>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003be4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c5c <HAL_GPIO_Init+0x320>)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003bea:	4b1c      	ldr	r3, [pc, #112]	@ (8003c5c <HAL_GPIO_Init+0x320>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c0e:	4a13      	ldr	r2, [pc, #76]	@ (8003c5c <HAL_GPIO_Init+0x320>)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	3301      	adds	r3, #1
 8003c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f47f ae91 	bne.w	800394c <HAL_GPIO_Init+0x10>
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40010000 	.word	0x40010000
 8003c40:	48000400 	.word	0x48000400
 8003c44:	48000800 	.word	0x48000800
 8003c48:	48000c00 	.word	0x48000c00
 8003c4c:	48001000 	.word	0x48001000
 8003c50:	48001400 	.word	0x48001400
 8003c54:	48001800 	.word	0x48001800
 8003c58:	48001c00 	.word	0x48001c00
 8003c5c:	40010400 	.word	0x40010400

08003c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c70:	787b      	ldrb	r3, [r7, #1]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c7c:	e002      	b.n	8003c84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c7e:	887a      	ldrh	r2, [r7, #2]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ca2:	887a      	ldrh	r2, [r7, #2]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	041a      	lsls	r2, r3, #16
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	43d9      	mvns	r1, r3
 8003cae:	887b      	ldrh	r3, [r7, #2]
 8003cb0:	400b      	ands	r3, r1
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	619a      	str	r2, [r3, #24]
}
 8003cb8:	bf00      	nop
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cce:	4b08      	ldr	r3, [pc, #32]	@ (8003cf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d006      	beq.n	8003ce8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cda:	4a05      	ldr	r2, [pc, #20]	@ (8003cf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fe46 	bl	8000974 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40010400 	.word	0x40010400

08003cf4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf6:	b08f      	sub	sp, #60	@ 0x3c
 8003cf8:	af0a      	add	r7, sp, #40	@ 0x28
 8003cfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e116      	b.n	8003f34 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d106      	bne.n	8003d26 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f008 fc9d 	bl	800c660 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2203      	movs	r2, #3
 8003d2a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f005 f8f4 	bl	8008f32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	687e      	ldr	r6, [r7, #4]
 8003d52:	466d      	mov	r5, sp
 8003d54:	f106 0410 	add.w	r4, r6, #16
 8003d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d64:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d68:	1d33      	adds	r3, r6, #4
 8003d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d6c:	6838      	ldr	r0, [r7, #0]
 8003d6e:	f005 f807 	bl	8008d80 <USB_CoreInit>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0d7      	b.n	8003f34 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f005 f8e2 	bl	8008f54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d90:	2300      	movs	r3, #0
 8003d92:	73fb      	strb	r3, [r7, #15]
 8003d94:	e04a      	b.n	8003e2c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d96:	7bfa      	ldrb	r2, [r7, #15]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	333d      	adds	r3, #61	@ 0x3d
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003daa:	7bfa      	ldrb	r2, [r7, #15]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	333c      	adds	r3, #60	@ 0x3c
 8003dba:	7bfa      	ldrb	r2, [r7, #15]
 8003dbc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003dbe:	7bfa      	ldrb	r2, [r7, #15]
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	b298      	uxth	r0, r3
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	3356      	adds	r3, #86	@ 0x56
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dd6:	7bfa      	ldrb	r2, [r7, #15]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	3340      	adds	r3, #64	@ 0x40
 8003de6:	2200      	movs	r2, #0
 8003de8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dea:	7bfa      	ldrb	r2, [r7, #15]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	3344      	adds	r3, #68	@ 0x44
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003dfe:	7bfa      	ldrb	r2, [r7, #15]
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	3348      	adds	r3, #72	@ 0x48
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e12:	7bfa      	ldrb	r2, [r7, #15]
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	334c      	adds	r3, #76	@ 0x4c
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
 8003e2c:	7bfa      	ldrb	r2, [r7, #15]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d3af      	bcc.n	8003d96 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e36:	2300      	movs	r3, #0
 8003e38:	73fb      	strb	r3, [r7, #15]
 8003e3a:	e044      	b.n	8003ec6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e3c:	7bfa      	ldrb	r2, [r7, #15]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e52:	7bfa      	ldrb	r2, [r7, #15]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e7e:	7bfa      	ldrb	r2, [r7, #15]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e94:	7bfa      	ldrb	r2, [r7, #15]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
 8003ec6:	7bfa      	ldrb	r2, [r7, #15]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d3b5      	bcc.n	8003e3c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	687e      	ldr	r6, [r7, #4]
 8003ed8:	466d      	mov	r5, sp
 8003eda:	f106 0410 	add.w	r4, r6, #16
 8003ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003eea:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eee:	1d33      	adds	r3, r6, #4
 8003ef0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ef2:	6838      	ldr	r0, [r7, #0]
 8003ef4:	f005 f87a 	bl	8008fec <USB_DevInit>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e014      	b.n	8003f34 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d102      	bne.n	8003f28 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f001 f86a 	bl	8004ffc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f006 f828 	bl	8009f82 <USB_DevDisconnect>

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_PCD_Start+0x1c>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e01c      	b.n	8003f92 <HAL_PCD_Start+0x56>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d105      	bne.n	8003f74 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f004 ffc9 	bl	8008f10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f005 ffdc 	bl	8009f40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f9a:	b590      	push	{r4, r7, lr}
 8003f9c:	b08d      	sub	sp, #52	@ 0x34
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f006 f89a 	bl	800a0ea <USB_GetMode>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f040 847e 	bne.w	80048ba <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f005 fffe 	bl	8009fc4 <USB_ReadInterrupts>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8474 	beq.w	80048b8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	0a1b      	lsrs	r3, r3, #8
 8003fda:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f005 ffeb 	bl	8009fc4 <USB_ReadInterrupts>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d107      	bne.n	8004008 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f002 0202 	and.w	r2, r2, #2
 8004006:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f005 ffd9 	bl	8009fc4 <USB_ReadInterrupts>
 8004012:	4603      	mov	r3, r0
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b10      	cmp	r3, #16
 800401a:	d161      	bne.n	80040e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0210 	bic.w	r2, r2, #16
 800402a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f003 020f 	and.w	r2, r3, #15
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	3304      	adds	r3, #4
 800404a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	0c5b      	lsrs	r3, r3, #17
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	2b02      	cmp	r3, #2
 8004056:	d124      	bne.n	80040a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d035      	beq.n	80040d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	091b      	lsrs	r3, r3, #4
 800406c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800406e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004072:	b29b      	uxth	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	6a38      	ldr	r0, [r7, #32]
 8004078:	f005 fe10 	bl	8009c9c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	091b      	lsrs	r3, r3, #4
 8004084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004088:	441a      	add	r2, r3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800409a:	441a      	add	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	615a      	str	r2, [r3, #20]
 80040a0:	e016      	b.n	80040d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	0c5b      	lsrs	r3, r3, #17
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	2b06      	cmp	r3, #6
 80040ac:	d110      	bne.n	80040d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80040b4:	2208      	movs	r2, #8
 80040b6:	4619      	mov	r1, r3
 80040b8:	6a38      	ldr	r0, [r7, #32]
 80040ba:	f005 fdef 	bl	8009c9c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040ca:	441a      	add	r2, r3
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0210 	orr.w	r2, r2, #16
 80040de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f005 ff6d 	bl	8009fc4 <USB_ReadInterrupts>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040f4:	f040 80a7 	bne.w	8004246 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f005 ff72 	bl	8009fea <USB_ReadDevAllOutEpInterrupt>
 8004106:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004108:	e099      	b.n	800423e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800410a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 808e 	beq.w	8004232 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	4611      	mov	r1, r2
 8004120:	4618      	mov	r0, r3
 8004122:	f005 ff96 	bl	800a052 <USB_ReadDevOutEPInterrupt>
 8004126:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00c      	beq.n	800414c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800413e:	461a      	mov	r2, r3
 8004140:	2301      	movs	r3, #1
 8004142:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004144:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fe7e 	bl	8004e48 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00c      	beq.n	8004170 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004162:	461a      	mov	r2, r3
 8004164:	2308      	movs	r3, #8
 8004166:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004168:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 feba 	bl	8004ee4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004186:	461a      	mov	r2, r3
 8004188:	2310      	movs	r3, #16
 800418a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d030      	beq.n	80041f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419e:	2b80      	cmp	r3, #128	@ 0x80
 80041a0:	d109      	bne.n	80041b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80041b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	4413      	add	r3, r2
 80041c8:	3304      	adds	r3, #4
 80041ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	78db      	ldrb	r3, [r3, #3]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d108      	bne.n	80041e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2200      	movs	r2, #0
 80041d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	4619      	mov	r1, r3
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f008 fb93 	bl	800c90c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f2:	461a      	mov	r2, r3
 80041f4:	2302      	movs	r3, #2
 80041f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800420e:	461a      	mov	r2, r3
 8004210:	2320      	movs	r3, #32
 8004212:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800422a:	461a      	mov	r2, r3
 800422c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004230:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	3301      	adds	r3, #1
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800423e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	f47f af62 	bne.w	800410a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f005 feba 	bl	8009fc4 <USB_ReadInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004256:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800425a:	f040 80a4 	bne.w	80043a6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f005 fedb 	bl	800a01e <USB_ReadDevAllInEpInterrupt>
 8004268:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800426e:	e096      	b.n	800439e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 808b 	beq.w	8004392 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f005 ff01 	bl	800a08e <USB_ReadDevInEPInterrupt>
 800428c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d020      	beq.n	80042da <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	2201      	movs	r2, #1
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69f9      	ldr	r1, [r7, #28]
 80042b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042b8:	4013      	ands	r3, r2
 80042ba:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80042bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c8:	461a      	mov	r2, r3
 80042ca:	2301      	movs	r3, #1
 80042cc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	4619      	mov	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f008 fa84 	bl	800c7e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f0:	461a      	mov	r2, r3
 80042f2:	2308      	movs	r3, #8
 80042f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800430c:	461a      	mov	r2, r3
 800430e:	2310      	movs	r3, #16
 8004310:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800431c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004328:	461a      	mov	r2, r3
 800432a:	2340      	movs	r3, #64	@ 0x40
 800432c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d023      	beq.n	8004380 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004338:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800433a:	6a38      	ldr	r0, [r7, #32]
 800433c:	f004 ff98 	bl	8009270 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	3338      	adds	r3, #56	@ 0x38
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	4413      	add	r3, r2
 8004350:	3304      	adds	r3, #4
 8004352:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	78db      	ldrb	r3, [r3, #3]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d108      	bne.n	800436e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2200      	movs	r2, #0
 8004360:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	b2db      	uxtb	r3, r3
 8004366:	4619      	mov	r1, r3
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f008 fae1 	bl	800c930 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800437a:	461a      	mov	r2, r3
 800437c:	2302      	movs	r3, #2
 800437e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800438a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fcd2 	bl	8004d36 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	3301      	adds	r3, #1
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f47f af65 	bne.w	8004270 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f005 fe0a 	bl	8009fc4 <USB_ReadInterrupts>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043ba:	d122      	bne.n	8004402 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043ca:	f023 0301 	bic.w	r3, r3, #1
 80043ce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d108      	bne.n	80043ec <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80043e2:	2100      	movs	r1, #0
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f008 fd15 	bl	800ce14 <HAL_PCDEx_LPM_Callback>
 80043ea:	e002      	b.n	80043f2 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f008 fa65 	bl	800c8bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004400:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f005 fddc 	bl	8009fc4 <USB_ReadInterrupts>
 800440c:	4603      	mov	r3, r0
 800440e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004412:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004416:	d112      	bne.n	800443e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b01      	cmp	r3, #1
 8004426:	d102      	bne.n	800442e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f008 fa21 	bl	800c870 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695a      	ldr	r2, [r3, #20]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800443c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f005 fdbe 	bl	8009fc4 <USB_ReadInterrupts>
 8004448:	4603      	mov	r3, r0
 800444a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800444e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004452:	d121      	bne.n	8004498 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004462:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800446a:	2b00      	cmp	r3, #0
 800446c:	d111      	bne.n	8004492 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447c:	089b      	lsrs	r3, r3, #2
 800447e:	f003 020f 	and.w	r2, r3, #15
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004488:	2101      	movs	r1, #1
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f008 fcc2 	bl	800ce14 <HAL_PCDEx_LPM_Callback>
 8004490:	e002      	b.n	8004498 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f008 f9ec 	bl	800c870 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f005 fd91 	bl	8009fc4 <USB_ReadInterrupts>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ac:	f040 80b5 	bne.w	800461a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2110      	movs	r1, #16
 80044ca:	4618      	mov	r0, r3
 80044cc:	f004 fed0 	bl	8009270 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044d0:	2300      	movs	r3, #0
 80044d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044d4:	e046      	b.n	8004564 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80044d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e2:	461a      	mov	r2, r3
 80044e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80044ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004504:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004508:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800450a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004516:	461a      	mov	r2, r3
 8004518:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800451c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800451e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800452e:	0151      	lsls	r1, r2, #5
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	440a      	add	r2, r1
 8004534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004538:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800453c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800453e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800454e:	0151      	lsls	r1, r2, #5
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	440a      	add	r2, r1
 8004554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004558:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800455c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800455e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004560:	3301      	adds	r3, #1
 8004562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800456a:	429a      	cmp	r2, r3
 800456c:	d3b3      	bcc.n	80044d6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800457c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004580:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004590:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800459a:	f043 030b 	orr.w	r3, r3, #11
 800459e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045b0:	f043 030b 	orr.w	r3, r3, #11
 80045b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80045b6:	e015      	b.n	80045e4 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80045ca:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80045ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045de:	f043 030b 	orr.w	r3, r3, #11
 80045e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80045f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f005 fda1 	bl	800a14c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695a      	ldr	r2, [r3, #20]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004618:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f005 fcd0 	bl	8009fc4 <USB_ReadInterrupts>
 8004624:	4603      	mov	r3, r0
 8004626:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800462a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800462e:	d124      	bne.n	800467a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f005 fd66 	bl	800a106 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f004 fe93 	bl	800936a <USB_GetDevSpeed>
 8004644:	4603      	mov	r3, r0
 8004646:	461a      	mov	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681c      	ldr	r4, [r3, #0]
 8004650:	f001 fbbc 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8004654:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800465a:	b2db      	uxtb	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	4620      	mov	r0, r4
 8004660:	f004 fbba 	bl	8008dd8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f008 f8e4 	bl	800c832 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695a      	ldr	r2, [r3, #20]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004678:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f005 fca0 	bl	8009fc4 <USB_ReadInterrupts>
 8004684:	4603      	mov	r3, r0
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b08      	cmp	r3, #8
 800468c:	d10a      	bne.n	80046a4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f008 f8c1 	bl	800c816 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695a      	ldr	r2, [r3, #20]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f002 0208 	and.w	r2, r2, #8
 80046a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f005 fc8b 	bl	8009fc4 <USB_ReadInterrupts>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b4:	2b80      	cmp	r3, #128	@ 0x80
 80046b6:	d122      	bne.n	80046fe <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046c4:	2301      	movs	r3, #1
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c8:	e014      	b.n	80046f4 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ce:	4613      	mov	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d105      	bne.n	80046ee <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	4619      	mov	r1, r3
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 faf3 	bl	8004cd4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	3301      	adds	r3, #1
 80046f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d3e5      	bcc.n	80046ca <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f005 fc5e 	bl	8009fc4 <USB_ReadInterrupts>
 8004708:	4603      	mov	r3, r0
 800470a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800470e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004712:	d13b      	bne.n	800478c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004714:	2301      	movs	r3, #1
 8004716:	627b      	str	r3, [r7, #36]	@ 0x24
 8004718:	e02b      	b.n	8004772 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	3340      	adds	r3, #64	@ 0x40
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d115      	bne.n	800476c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004740:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004742:	2b00      	cmp	r3, #0
 8004744:	da12      	bge.n	800476c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474a:	4613      	mov	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	333f      	adds	r3, #63	@ 0x3f
 8004756:	2201      	movs	r2, #1
 8004758:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004762:	b2db      	uxtb	r3, r3
 8004764:	4619      	mov	r1, r3
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fab4 	bl	8004cd4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	3301      	adds	r3, #1
 8004770:	627b      	str	r3, [r7, #36]	@ 0x24
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004778:	429a      	cmp	r2, r3
 800477a:	d3ce      	bcc.n	800471a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800478a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f005 fc17 	bl	8009fc4 <USB_ReadInterrupts>
 8004796:	4603      	mov	r3, r0
 8004798:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800479c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047a0:	d155      	bne.n	800484e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047a2:	2301      	movs	r3, #1
 80047a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a6:	e045      	b.n	8004834 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047bc:	4613      	mov	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d12e      	bne.n	800482e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80047d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	da2b      	bge.n	800482e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80047e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d121      	bne.n	800482e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ee:	4613      	mov	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80047fc:	2201      	movs	r2, #1
 80047fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004826:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800482a:	6053      	str	r3, [r2, #4]
            break;
 800482c:	e007      	b.n	800483e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	3301      	adds	r3, #1
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800483a:	429a      	cmp	r2, r3
 800483c:	d3b4      	bcc.n	80047a8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800484c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f005 fbb6 	bl	8009fc4 <USB_ReadInterrupts>
 8004858:	4603      	mov	r3, r0
 800485a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800485e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004862:	d10a      	bne.n	800487a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f008 f875 	bl	800c954 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f005 fba0 	bl	8009fc4 <USB_ReadInterrupts>
 8004884:	4603      	mov	r3, r0
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b04      	cmp	r3, #4
 800488c:	d115      	bne.n	80048ba <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f008 f865 	bl	800c970 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6859      	ldr	r1, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
 80048b6:	e000      	b.n	80048ba <HAL_PCD_IRQHandler+0x920>
      return;
 80048b8:	bf00      	nop
    }
  }
}
 80048ba:	3734      	adds	r7, #52	@ 0x34
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd90      	pop	{r4, r7, pc}

080048c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_PCD_SetAddress+0x1a>
 80048d6:	2302      	movs	r3, #2
 80048d8:	e013      	b.n	8004902 <HAL_PCD_SetAddress+0x42>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	78fa      	ldrb	r2, [r7, #3]
 80048e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	4611      	mov	r1, r2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f005 fafe 	bl	8009ef4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	4608      	mov	r0, r1
 8004914:	4611      	mov	r1, r2
 8004916:	461a      	mov	r2, r3
 8004918:	4603      	mov	r3, r0
 800491a:	70fb      	strb	r3, [r7, #3]
 800491c:	460b      	mov	r3, r1
 800491e:	803b      	strh	r3, [r7, #0]
 8004920:	4613      	mov	r3, r2
 8004922:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800492c:	2b00      	cmp	r3, #0
 800492e:	da0f      	bge.n	8004950 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	f003 020f 	and.w	r2, r3, #15
 8004936:	4613      	mov	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	3338      	adds	r3, #56	@ 0x38
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4413      	add	r3, r2
 8004944:	3304      	adds	r3, #4
 8004946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	705a      	strb	r2, [r3, #1]
 800494e:	e00f      	b.n	8004970 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	f003 020f 	and.w	r2, r3, #15
 8004956:	4613      	mov	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	4413      	add	r3, r2
 8004966:	3304      	adds	r3, #4
 8004968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800497c:	883a      	ldrh	r2, [r7, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	78ba      	ldrb	r2, [r7, #2]
 8004986:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	785b      	ldrb	r3, [r3, #1]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d004      	beq.n	800499a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800499a:	78bb      	ldrb	r3, [r7, #2]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d102      	bne.n	80049a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_PCD_EP_Open+0xaa>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e00e      	b.n	80049d2 <HAL_PCD_EP_Open+0xc8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68f9      	ldr	r1, [r7, #12]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f004 fcf0 	bl	80093a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80049d0:	7afb      	ldrb	r3, [r7, #11]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	460b      	mov	r3, r1
 80049e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	da0f      	bge.n	8004a0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	f003 020f 	and.w	r2, r3, #15
 80049f4:	4613      	mov	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	3338      	adds	r3, #56	@ 0x38
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4413      	add	r3, r2
 8004a02:	3304      	adds	r3, #4
 8004a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	705a      	strb	r2, [r3, #1]
 8004a0c:	e00f      	b.n	8004a2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	f003 020f 	and.w	r2, r3, #15
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4413      	add	r3, r2
 8004a24:	3304      	adds	r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_PCD_EP_Close+0x6e>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e00e      	b.n	8004a66 <HAL_PCD_EP_Close+0x8c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68f9      	ldr	r1, [r7, #12]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f004 fd2e 	bl	80094b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a7e:	7afb      	ldrb	r3, [r7, #11]
 8004a80:	f003 020f 	and.w	r2, r3, #15
 8004a84:	4613      	mov	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	3304      	adds	r3, #4
 8004a96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2200      	movs	r2, #0
 8004aae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ab0:	7afb      	ldrb	r3, [r7, #11]
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6979      	ldr	r1, [r7, #20]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f004 fdd4 	bl	8009670 <USB_EPStartXfer>

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	460b      	mov	r3, r1
 8004adc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	f003 020f 	and.w	r2, r3, #15
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004af4:	681b      	ldr	r3, [r3, #0]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b086      	sub	sp, #24
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b12:	7afb      	ldrb	r3, [r7, #11]
 8004b14:	f003 020f 	and.w	r2, r3, #15
 8004b18:	4613      	mov	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	3338      	adds	r3, #56	@ 0x38
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4413      	add	r3, r2
 8004b26:	3304      	adds	r3, #4
 8004b28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b42:	7afb      	ldrb	r3, [r7, #11]
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6979      	ldr	r1, [r7, #20]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f004 fd8b 	bl	8009670 <USB_EPStartXfer>

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	f003 020f 	and.w	r2, r3, #15
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d901      	bls.n	8004b82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e04e      	b.n	8004c20 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	da0f      	bge.n	8004baa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	f003 020f 	and.w	r2, r3, #15
 8004b90:	4613      	mov	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	3338      	adds	r3, #56	@ 0x38
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	705a      	strb	r2, [r3, #1]
 8004ba8:	e00d      	b.n	8004bc6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004baa:	78fa      	ldrb	r2, [r7, #3]
 8004bac:	4613      	mov	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	4413      	add	r3, r2
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_PCD_EP_SetStall+0x82>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e01c      	b.n	8004c20 <HAL_PCD_EP_SetStall+0xbc>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f005 f8a9 	bl	8009d4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d108      	bne.n	8004c16 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f005 fa9b 	bl	800a14c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	f003 020f 	and.w	r2, r3, #15
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d901      	bls.n	8004c46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e042      	b.n	8004ccc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	da0f      	bge.n	8004c6e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c4e:	78fb      	ldrb	r3, [r7, #3]
 8004c50:	f003 020f 	and.w	r2, r3, #15
 8004c54:	4613      	mov	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	3338      	adds	r3, #56	@ 0x38
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	4413      	add	r3, r2
 8004c62:	3304      	adds	r3, #4
 8004c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	705a      	strb	r2, [r3, #1]
 8004c6c:	e00f      	b.n	8004c8e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c6e:	78fb      	ldrb	r3, [r7, #3]
 8004c70:	f003 020f 	and.w	r2, r3, #15
 8004c74:	4613      	mov	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	4413      	add	r3, r2
 8004c84:	3304      	adds	r3, #4
 8004c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_PCD_EP_ClrStall+0x86>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e00e      	b.n	8004ccc <HAL_PCD_EP_ClrStall+0xa4>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68f9      	ldr	r1, [r7, #12]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f005 f8b3 	bl	8009e28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	da0c      	bge.n	8004d02 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	f003 020f 	and.w	r2, r3, #15
 8004cee:	4613      	mov	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	3338      	adds	r3, #56	@ 0x38
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e00c      	b.n	8004d1c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	f003 020f 	and.w	r2, r3, #15
 8004d08:	4613      	mov	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	4413      	add	r3, r2
 8004d18:	3304      	adds	r3, #4
 8004d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68f9      	ldr	r1, [r7, #12]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f004 fed6 	bl	8009ad4 <USB_EPStopXfer>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004d2c:	7afb      	ldrb	r3, [r7, #11]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b088      	sub	sp, #32
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	3338      	adds	r3, #56	@ 0x38
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	4413      	add	r3, r2
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	695a      	ldr	r2, [r3, #20]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d901      	bls.n	8004d6e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e067      	b.n	8004e3e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d902      	bls.n	8004d8a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	3303      	adds	r3, #3
 8004d8e:	089b      	lsrs	r3, r3, #2
 8004d90:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d92:	e026      	b.n	8004de2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d902      	bls.n	8004db0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	3303      	adds	r3, #3
 8004db4:	089b      	lsrs	r3, r3, #2
 8004db6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68d9      	ldr	r1, [r3, #12]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	6978      	ldr	r0, [r7, #20]
 8004dc6:	f004 ff2f 	bl	8009c28 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	441a      	add	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	441a      	add	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d809      	bhi.n	8004e0c <PCD_WriteEmptyTxFifo+0xd6>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d203      	bcs.n	8004e0c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1c3      	bne.n	8004d94 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d811      	bhi.n	8004e3c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	2201      	movs	r2, #1
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	43db      	mvns	r3, r3
 8004e32:	6939      	ldr	r1, [r7, #16]
 8004e34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e38:	4013      	ands	r3, r2
 8004e3a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	333c      	adds	r3, #60	@ 0x3c
 8004e60:	3304      	adds	r3, #4
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a19      	ldr	r2, [pc, #100]	@ (8004ee0 <PCD_EP_OutXfrComplete_int+0x98>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d124      	bne.n	8004ec8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e94:	461a      	mov	r2, r3
 8004e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e9a:	6093      	str	r3, [r2, #8]
 8004e9c:	e01a      	b.n	8004ed4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2320      	movs	r3, #32
 8004eb8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f007 fc73 	bl	800c7ac <HAL_PCD_DataOutStageCallback>
 8004ec6:	e005      	b.n	8004ed4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f007 fc6c 	bl	800c7ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	4f54310a 	.word	0x4f54310a

08004ee4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	333c      	adds	r3, #60	@ 0x3c
 8004efc:	3304      	adds	r3, #4
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4a0c      	ldr	r2, [pc, #48]	@ (8004f48 <PCD_EP_OutSetupPacket_int+0x64>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d90e      	bls.n	8004f38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f30:	461a      	mov	r2, r3
 8004f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f007 fc25 	bl	800c788 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	4f54300a 	.word	0x4f54300a

08004f4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	70fb      	strb	r3, [r7, #3]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d107      	bne.n	8004f7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f6a:	883b      	ldrh	r3, [r7, #0]
 8004f6c:	0419      	lsls	r1, r3, #16
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f78:	e028      	b.n	8004fcc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	4413      	add	r3, r2
 8004f86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73fb      	strb	r3, [r7, #15]
 8004f8c:	e00d      	b.n	8004faa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	3340      	adds	r3, #64	@ 0x40
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	7bfa      	ldrb	r2, [r7, #15]
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d3ec      	bcc.n	8004f8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004fb4:	883b      	ldrh	r3, [r7, #0]
 8004fb6:	0418      	lsls	r0, r3, #16
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6819      	ldr	r1, [r3, #0]
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	4302      	orrs	r2, r0
 8004fc4:	3340      	adds	r3, #64	@ 0x40
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	887a      	ldrh	r2, [r7, #2]
 8004fec:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800502e:	f043 0303 	orr.w	r3, r3, #3
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005048:	4b0d      	ldr	r3, [pc, #52]	@ (8005080 <HAL_PWREx_GetVoltageRange+0x3c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005054:	d102      	bne.n	800505c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800505a:	e00b      	b.n	8005074 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800505c:	4b08      	ldr	r3, [pc, #32]	@ (8005080 <HAL_PWREx_GetVoltageRange+0x3c>)
 800505e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800506a:	d102      	bne.n	8005072 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800506c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005070:	e000      	b.n	8005074 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005072:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005074:	4618      	mov	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40007000 	.word	0x40007000

08005084 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d141      	bne.n	8005116 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005092:	4b4b      	ldr	r3, [pc, #300]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800509a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509e:	d131      	bne.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050a0:	4b47      	ldr	r3, [pc, #284]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a6:	4a46      	ldr	r2, [pc, #280]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050b0:	4b43      	ldr	r3, [pc, #268]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050b8:	4a41      	ldr	r2, [pc, #260]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80050c0:	4b40      	ldr	r3, [pc, #256]	@ (80051c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2232      	movs	r2, #50	@ 0x32
 80050c6:	fb02 f303 	mul.w	r3, r2, r3
 80050ca:	4a3f      	ldr	r2, [pc, #252]	@ (80051c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	0c9b      	lsrs	r3, r3, #18
 80050d2:	3301      	adds	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050d6:	e002      	b.n	80050de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3b01      	subs	r3, #1
 80050dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050de:	4b38      	ldr	r3, [pc, #224]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ea:	d102      	bne.n	80050f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f2      	bne.n	80050d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050f2:	4b33      	ldr	r3, [pc, #204]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050fe:	d158      	bne.n	80051b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e057      	b.n	80051b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005104:	4b2e      	ldr	r3, [pc, #184]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800510a:	4a2d      	ldr	r2, [pc, #180]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005110:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005114:	e04d      	b.n	80051b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800511c:	d141      	bne.n	80051a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800511e:	4b28      	ldr	r3, [pc, #160]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800512a:	d131      	bne.n	8005190 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800512c:	4b24      	ldr	r3, [pc, #144]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005132:	4a23      	ldr	r2, [pc, #140]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005138:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800513c:	4b20      	ldr	r3, [pc, #128]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005144:	4a1e      	ldr	r2, [pc, #120]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005146:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800514a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800514c:	4b1d      	ldr	r3, [pc, #116]	@ (80051c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2232      	movs	r2, #50	@ 0x32
 8005152:	fb02 f303 	mul.w	r3, r2, r3
 8005156:	4a1c      	ldr	r2, [pc, #112]	@ (80051c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	0c9b      	lsrs	r3, r3, #18
 800515e:	3301      	adds	r3, #1
 8005160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005162:	e002      	b.n	800516a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3b01      	subs	r3, #1
 8005168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800516a:	4b15      	ldr	r3, [pc, #84]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005176:	d102      	bne.n	800517e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f2      	bne.n	8005164 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800517e:	4b10      	ldr	r3, [pc, #64]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518a:	d112      	bne.n	80051b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e011      	b.n	80051b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005190:	4b0b      	ldr	r3, [pc, #44]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005196:	4a0a      	ldr	r2, [pc, #40]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800519c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80051a0:	e007      	b.n	80051b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051a2:	4b07      	ldr	r3, [pc, #28]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051aa:	4a05      	ldr	r2, [pc, #20]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051b0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40007000 	.word	0x40007000
 80051c4:	20000000 	.word	0x20000000
 80051c8:	431bde83 	.word	0x431bde83

080051cc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80051d0:	4b05      	ldr	r3, [pc, #20]	@ (80051e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4a04      	ldr	r2, [pc, #16]	@ (80051e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80051d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051da:	6053      	str	r3, [r2, #4]
}
 80051dc:	bf00      	nop
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40007000 	.word	0x40007000

080051ec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80051f0:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <HAL_PWREx_EnableVddIO2+0x1c>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4a04      	ldr	r2, [pc, #16]	@ (8005208 <HAL_PWREx_EnableVddIO2+0x1c>)
 80051f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051fa:	6053      	str	r3, [r2, #4]
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40007000 	.word	0x40007000

0800520c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d102      	bne.n	8005220 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f000 bc08 	b.w	8005a30 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005220:	4b96      	ldr	r3, [pc, #600]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 030c 	and.w	r3, r3, #12
 8005228:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800522a:	4b94      	ldr	r3, [pc, #592]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0310 	and.w	r3, r3, #16
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80e4 	beq.w	800540a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <HAL_RCC_OscConfig+0x4c>
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	2b0c      	cmp	r3, #12
 800524c:	f040 808b 	bne.w	8005366 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2b01      	cmp	r3, #1
 8005254:	f040 8087 	bne.w	8005366 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005258:	4b88      	ldr	r3, [pc, #544]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_RCC_OscConfig+0x64>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e3df      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1a      	ldr	r2, [r3, #32]
 8005274:	4b81      	ldr	r3, [pc, #516]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	d004      	beq.n	800528a <HAL_RCC_OscConfig+0x7e>
 8005280:	4b7e      	ldr	r3, [pc, #504]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005288:	e005      	b.n	8005296 <HAL_RCC_OscConfig+0x8a>
 800528a:	4b7c      	ldr	r3, [pc, #496]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 800528c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005296:	4293      	cmp	r3, r2
 8005298:	d223      	bcs.n	80052e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fdcc 	bl	8005e3c <RCC_SetFlashLatencyFromMSIRange>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e3c0      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ae:	4b73      	ldr	r3, [pc, #460]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a72      	ldr	r2, [pc, #456]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052b4:	f043 0308 	orr.w	r3, r3, #8
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	4b70      	ldr	r3, [pc, #448]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	496d      	ldr	r1, [pc, #436]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052cc:	4b6b      	ldr	r3, [pc, #428]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	4968      	ldr	r1, [pc, #416]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	604b      	str	r3, [r1, #4]
 80052e0:	e025      	b.n	800532e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052e2:	4b66      	ldr	r3, [pc, #408]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a65      	ldr	r2, [pc, #404]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052e8:	f043 0308 	orr.w	r3, r3, #8
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	4b63      	ldr	r3, [pc, #396]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	4960      	ldr	r1, [pc, #384]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005300:	4b5e      	ldr	r3, [pc, #376]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	495b      	ldr	r1, [pc, #364]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005310:	4313      	orrs	r3, r2
 8005312:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d109      	bne.n	800532e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fd8c 	bl	8005e3c <RCC_SetFlashLatencyFromMSIRange>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e380      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800532e:	f000 fcc1 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8005332:	4602      	mov	r2, r0
 8005334:	4b51      	ldr	r3, [pc, #324]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	4950      	ldr	r1, [pc, #320]	@ (8005480 <HAL_RCC_OscConfig+0x274>)
 8005340:	5ccb      	ldrb	r3, [r1, r3]
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	fa22 f303 	lsr.w	r3, r2, r3
 800534a:	4a4e      	ldr	r2, [pc, #312]	@ (8005484 <HAL_RCC_OscConfig+0x278>)
 800534c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800534e:	4b4e      	ldr	r3, [pc, #312]	@ (8005488 <HAL_RCC_OscConfig+0x27c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fc fa10 	bl	8001778 <HAL_InitTick>
 8005358:	4603      	mov	r3, r0
 800535a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d052      	beq.n	8005408 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	e364      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d032      	beq.n	80053d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800536e:	4b43      	ldr	r3, [pc, #268]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a42      	ldr	r2, [pc, #264]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005374:	f043 0301 	orr.w	r3, r3, #1
 8005378:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800537a:	f7fc fa4d 	bl	8001818 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005382:	f7fc fa49 	bl	8001818 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e34d      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005394:	4b39      	ldr	r3, [pc, #228]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f0      	beq.n	8005382 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053a0:	4b36      	ldr	r3, [pc, #216]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a35      	ldr	r2, [pc, #212]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053a6:	f043 0308 	orr.w	r3, r3, #8
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	4b33      	ldr	r3, [pc, #204]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	4930      	ldr	r1, [pc, #192]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053be:	4b2f      	ldr	r3, [pc, #188]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	492b      	ldr	r1, [pc, #172]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	604b      	str	r3, [r1, #4]
 80053d2:	e01a      	b.n	800540a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053d4:	4b29      	ldr	r3, [pc, #164]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a28      	ldr	r2, [pc, #160]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053e0:	f7fc fa1a 	bl	8001818 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053e8:	f7fc fa16 	bl	8001818 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e31a      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053fa:	4b20      	ldr	r3, [pc, #128]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0x1dc>
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005408:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d073      	beq.n	80054fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	2b08      	cmp	r3, #8
 800541a:	d005      	beq.n	8005428 <HAL_RCC_OscConfig+0x21c>
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	2b0c      	cmp	r3, #12
 8005420:	d10e      	bne.n	8005440 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d10b      	bne.n	8005440 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005428:	4b14      	ldr	r3, [pc, #80]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d063      	beq.n	80054fc <HAL_RCC_OscConfig+0x2f0>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d15f      	bne.n	80054fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e2f7      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005448:	d106      	bne.n	8005458 <HAL_RCC_OscConfig+0x24c>
 800544a:	4b0c      	ldr	r3, [pc, #48]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a0b      	ldr	r2, [pc, #44]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	e025      	b.n	80054a4 <HAL_RCC_OscConfig+0x298>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005460:	d114      	bne.n	800548c <HAL_RCC_OscConfig+0x280>
 8005462:	4b06      	ldr	r3, [pc, #24]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a05      	ldr	r2, [pc, #20]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	4b03      	ldr	r3, [pc, #12]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a02      	ldr	r2, [pc, #8]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	e013      	b.n	80054a4 <HAL_RCC_OscConfig+0x298>
 800547c:	40021000 	.word	0x40021000
 8005480:	0800cfd0 	.word	0x0800cfd0
 8005484:	20000000 	.word	0x20000000
 8005488:	20000004 	.word	0x20000004
 800548c:	4ba0      	ldr	r3, [pc, #640]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a9f      	ldr	r2, [pc, #636]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	4b9d      	ldr	r3, [pc, #628]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a9c      	ldr	r2, [pc, #624]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800549e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d013      	beq.n	80054d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ac:	f7fc f9b4 	bl	8001818 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b4:	f7fc f9b0 	bl	8001818 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	@ 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e2b4      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054c6:	4b92      	ldr	r3, [pc, #584]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0x2a8>
 80054d2:	e014      	b.n	80054fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d4:	f7fc f9a0 	bl	8001818 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054dc:	f7fc f99c 	bl	8001818 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b64      	cmp	r3, #100	@ 0x64
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e2a0      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ee:	4b88      	ldr	r3, [pc, #544]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f0      	bne.n	80054dc <HAL_RCC_OscConfig+0x2d0>
 80054fa:	e000      	b.n	80054fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d060      	beq.n	80055cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b04      	cmp	r3, #4
 800550e:	d005      	beq.n	800551c <HAL_RCC_OscConfig+0x310>
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	2b0c      	cmp	r3, #12
 8005514:	d119      	bne.n	800554a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d116      	bne.n	800554a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800551c:	4b7c      	ldr	r3, [pc, #496]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_RCC_OscConfig+0x328>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e27d      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005534:	4b76      	ldr	r3, [pc, #472]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	061b      	lsls	r3, r3, #24
 8005542:	4973      	ldr	r1, [pc, #460]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005544:	4313      	orrs	r3, r2
 8005546:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005548:	e040      	b.n	80055cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d023      	beq.n	800559a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005552:	4b6f      	ldr	r3, [pc, #444]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a6e      	ldr	r2, [pc, #440]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800555c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555e:	f7fc f95b 	bl	8001818 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005566:	f7fc f957 	bl	8001818 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e25b      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005578:	4b65      	ldr	r3, [pc, #404]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005584:	4b62      	ldr	r3, [pc, #392]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	061b      	lsls	r3, r3, #24
 8005592:	495f      	ldr	r1, [pc, #380]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
 8005598:	e018      	b.n	80055cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800559a:	4b5d      	ldr	r3, [pc, #372]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a5c      	ldr	r2, [pc, #368]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80055a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fc f937 	bl	8001818 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ae:	f7fc f933 	bl	8001818 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e237      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055c0:	4b53      	ldr	r3, [pc, #332]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f0      	bne.n	80055ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d03c      	beq.n	8005652 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01c      	beq.n	800561a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80055e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055e6:	4a4a      	ldr	r2, [pc, #296]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fc f912 	bl	8001818 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f8:	f7fc f90e 	bl	8001818 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e212      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800560a:	4b41      	ldr	r3, [pc, #260]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800560c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0ef      	beq.n	80055f8 <HAL_RCC_OscConfig+0x3ec>
 8005618:	e01b      	b.n	8005652 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800561a:	4b3d      	ldr	r3, [pc, #244]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800561c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005620:	4a3b      	ldr	r2, [pc, #236]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562a:	f7fc f8f5 	bl	8001818 <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005632:	f7fc f8f1 	bl	8001818 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e1f5      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005644:	4b32      	ldr	r3, [pc, #200]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1ef      	bne.n	8005632 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 80a6 	beq.w	80057ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005660:	2300      	movs	r3, #0
 8005662:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005664:	4b2a      	ldr	r3, [pc, #168]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10d      	bne.n	800568c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005670:	4b27      	ldr	r3, [pc, #156]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005674:	4a26      	ldr	r2, [pc, #152]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800567a:	6593      	str	r3, [r2, #88]	@ 0x58
 800567c:	4b24      	ldr	r3, [pc, #144]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800567e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005688:	2301      	movs	r3, #1
 800568a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800568c:	4b21      	ldr	r3, [pc, #132]	@ (8005714 <HAL_RCC_OscConfig+0x508>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d118      	bne.n	80056ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005698:	4b1e      	ldr	r3, [pc, #120]	@ (8005714 <HAL_RCC_OscConfig+0x508>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1d      	ldr	r2, [pc, #116]	@ (8005714 <HAL_RCC_OscConfig+0x508>)
 800569e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056a4:	f7fc f8b8 	bl	8001818 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ac:	f7fc f8b4 	bl	8001818 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e1b8      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056be:	4b15      	ldr	r3, [pc, #84]	@ (8005714 <HAL_RCC_OscConfig+0x508>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f0      	beq.n	80056ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d108      	bne.n	80056e4 <HAL_RCC_OscConfig+0x4d8>
 80056d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056e2:	e029      	b.n	8005738 <HAL_RCC_OscConfig+0x52c>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	2b05      	cmp	r3, #5
 80056ea:	d115      	bne.n	8005718 <HAL_RCC_OscConfig+0x50c>
 80056ec:	4b08      	ldr	r3, [pc, #32]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f2:	4a07      	ldr	r2, [pc, #28]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80056f4:	f043 0304 	orr.w	r3, r3, #4
 80056f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056fc:	4b04      	ldr	r3, [pc, #16]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80056fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005702:	4a03      	ldr	r2, [pc, #12]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800570c:	e014      	b.n	8005738 <HAL_RCC_OscConfig+0x52c>
 800570e:	bf00      	nop
 8005710:	40021000 	.word	0x40021000
 8005714:	40007000 	.word	0x40007000
 8005718:	4b9d      	ldr	r3, [pc, #628]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571e:	4a9c      	ldr	r2, [pc, #624]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005728:	4b99      	ldr	r3, [pc, #612]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572e:	4a98      	ldr	r2, [pc, #608]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005730:	f023 0304 	bic.w	r3, r3, #4
 8005734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d016      	beq.n	800576e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005740:	f7fc f86a 	bl	8001818 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005746:	e00a      	b.n	800575e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005748:	f7fc f866 	bl	8001818 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005756:	4293      	cmp	r3, r2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e168      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800575e:	4b8c      	ldr	r3, [pc, #560]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0ed      	beq.n	8005748 <HAL_RCC_OscConfig+0x53c>
 800576c:	e015      	b.n	800579a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800576e:	f7fc f853 	bl	8001818 <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005774:	e00a      	b.n	800578c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005776:	f7fc f84f 	bl	8001818 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005784:	4293      	cmp	r3, r2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e151      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800578c:	4b80      	ldr	r3, [pc, #512]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 800578e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1ed      	bne.n	8005776 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800579a:	7ffb      	ldrb	r3, [r7, #31]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d105      	bne.n	80057ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80057a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a4:	4a7a      	ldr	r2, [pc, #488]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80057a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d03c      	beq.n	8005832 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01c      	beq.n	80057fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057c0:	4b73      	ldr	r3, [pc, #460]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80057c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057c6:	4a72      	ldr	r2, [pc, #456]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80057c8:	f043 0301 	orr.w	r3, r3, #1
 80057cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d0:	f7fc f822 	bl	8001818 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057d8:	f7fc f81e 	bl	8001818 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e122      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057ea:	4b69      	ldr	r3, [pc, #420]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80057ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0ef      	beq.n	80057d8 <HAL_RCC_OscConfig+0x5cc>
 80057f8:	e01b      	b.n	8005832 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057fa:	4b65      	ldr	r3, [pc, #404]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80057fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005800:	4a63      	ldr	r2, [pc, #396]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005802:	f023 0301 	bic.w	r3, r3, #1
 8005806:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580a:	f7fc f805 	bl	8001818 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005812:	f7fc f801 	bl	8001818 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e105      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005824:	4b5a      	ldr	r3, [pc, #360]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005826:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1ef      	bne.n	8005812 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 80f9 	beq.w	8005a2e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005840:	2b02      	cmp	r3, #2
 8005842:	f040 80cf 	bne.w	80059e4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005846:	4b52      	ldr	r3, [pc, #328]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f003 0203 	and.w	r2, r3, #3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005856:	429a      	cmp	r2, r3
 8005858:	d12c      	bne.n	80058b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005864:	3b01      	subs	r3, #1
 8005866:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005868:	429a      	cmp	r2, r3
 800586a:	d123      	bne.n	80058b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005876:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005878:	429a      	cmp	r2, r3
 800587a:	d11b      	bne.n	80058b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005886:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005888:	429a      	cmp	r2, r3
 800588a:	d113      	bne.n	80058b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	3b01      	subs	r3, #1
 800589a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800589c:	429a      	cmp	r2, r3
 800589e:	d109      	bne.n	80058b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	085b      	lsrs	r3, r3, #1
 80058ac:	3b01      	subs	r3, #1
 80058ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d071      	beq.n	8005998 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	2b0c      	cmp	r3, #12
 80058b8:	d068      	beq.n	800598c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80058ba:	4b35      	ldr	r3, [pc, #212]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d105      	bne.n	80058d2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80058c6:	4b32      	ldr	r3, [pc, #200]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e0ac      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058d6:	4b2e      	ldr	r3, [pc, #184]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a2d      	ldr	r2, [pc, #180]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80058dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058e2:	f7fb ff99 	bl	8001818 <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058e8:	e008      	b.n	80058fc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ea:	f7fb ff95 	bl	8001818 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e099      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058fc:	4b24      	ldr	r3, [pc, #144]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1f0      	bne.n	80058ea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005908:	4b21      	ldr	r3, [pc, #132]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	4b21      	ldr	r3, [pc, #132]	@ (8005994 <HAL_RCC_OscConfig+0x788>)
 800590e:	4013      	ands	r3, r2
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005918:	3a01      	subs	r2, #1
 800591a:	0112      	lsls	r2, r2, #4
 800591c:	4311      	orrs	r1, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005922:	0212      	lsls	r2, r2, #8
 8005924:	4311      	orrs	r1, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800592a:	0852      	lsrs	r2, r2, #1
 800592c:	3a01      	subs	r2, #1
 800592e:	0552      	lsls	r2, r2, #21
 8005930:	4311      	orrs	r1, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005936:	0852      	lsrs	r2, r2, #1
 8005938:	3a01      	subs	r2, #1
 800593a:	0652      	lsls	r2, r2, #25
 800593c:	4311      	orrs	r1, r2
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005942:	06d2      	lsls	r2, r2, #27
 8005944:	430a      	orrs	r2, r1
 8005946:	4912      	ldr	r1, [pc, #72]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005948:	4313      	orrs	r3, r2
 800594a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800594c:	4b10      	ldr	r3, [pc, #64]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a0f      	ldr	r2, [pc, #60]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005956:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005958:	4b0d      	ldr	r3, [pc, #52]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4a0c      	ldr	r2, [pc, #48]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 800595e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005962:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005964:	f7fb ff58 	bl	8001818 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800596c:	f7fb ff54 	bl	8001818 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e058      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800597e:	4b04      	ldr	r3, [pc, #16]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f0      	beq.n	800596c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800598a:	e050      	b.n	8005a2e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e04f      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
 8005990:	40021000 	.word	0x40021000
 8005994:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005998:	4b27      	ldr	r3, [pc, #156]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d144      	bne.n	8005a2e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059a4:	4b24      	ldr	r3, [pc, #144]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a23      	ldr	r2, [pc, #140]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 80059aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059b0:	4b21      	ldr	r3, [pc, #132]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	4a20      	ldr	r2, [pc, #128]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 80059b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059bc:	f7fb ff2c 	bl	8001818 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c4:	f7fb ff28 	bl	8001818 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e02c      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059d6:	4b18      	ldr	r3, [pc, #96]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0f0      	beq.n	80059c4 <HAL_RCC_OscConfig+0x7b8>
 80059e2:	e024      	b.n	8005a2e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b0c      	cmp	r3, #12
 80059e8:	d01f      	beq.n	8005a2a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ea:	4b13      	ldr	r3, [pc, #76]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a12      	ldr	r2, [pc, #72]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 80059f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f6:	f7fb ff0f 	bl	8001818 <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059fc:	e008      	b.n	8005a10 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059fe:	f7fb ff0b 	bl	8001818 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e00f      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a10:	4b09      	ldr	r3, [pc, #36]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f0      	bne.n	80059fe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005a1c:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	4905      	ldr	r1, [pc, #20]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 8005a22:	4b06      	ldr	r3, [pc, #24]	@ (8005a3c <HAL_RCC_OscConfig+0x830>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	60cb      	str	r3, [r1, #12]
 8005a28:	e001      	b.n	8005a2e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	feeefffc 	.word	0xfeeefffc

08005a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e11d      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a58:	4b90      	ldr	r3, [pc, #576]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d910      	bls.n	8005a88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a66:	4b8d      	ldr	r3, [pc, #564]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 020f 	bic.w	r2, r3, #15
 8005a6e:	498b      	ldr	r1, [pc, #556]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a76:	4b89      	ldr	r3, [pc, #548]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e105      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d010      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	4b81      	ldr	r3, [pc, #516]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d908      	bls.n	8005ab6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	497b      	ldr	r1, [pc, #492]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d079      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d11e      	bne.n	8005b08 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aca:	4b75      	ldr	r3, [pc, #468]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e0dc      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005ada:	f000 fa09 	bl	8005ef0 <RCC_GetSysClockFreqFromPLLSource>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4a70      	ldr	r2, [pc, #448]	@ (8005ca4 <HAL_RCC_ClockConfig+0x264>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d946      	bls.n	8005b74 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d140      	bne.n	8005b74 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005af2:	4b6b      	ldr	r3, [pc, #428]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005afa:	4a69      	ldr	r2, [pc, #420]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b02:	2380      	movs	r3, #128	@ 0x80
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	e035      	b.n	8005b74 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d107      	bne.n	8005b20 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b10:	4b63      	ldr	r3, [pc, #396]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d115      	bne.n	8005b48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0b9      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d107      	bne.n	8005b38 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b28:	4b5d      	ldr	r3, [pc, #372]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d109      	bne.n	8005b48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e0ad      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b38:	4b59      	ldr	r3, [pc, #356]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e0a5      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005b48:	f000 f8b4 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	4a55      	ldr	r2, [pc, #340]	@ (8005ca4 <HAL_RCC_ClockConfig+0x264>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d90f      	bls.n	8005b74 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005b54:	4b52      	ldr	r3, [pc, #328]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d109      	bne.n	8005b74 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b60:	4b4f      	ldr	r3, [pc, #316]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b68:	4a4d      	ldr	r2, [pc, #308]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b6e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b70:	2380      	movs	r3, #128	@ 0x80
 8005b72:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b74:	4b4a      	ldr	r3, [pc, #296]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f023 0203 	bic.w	r2, r3, #3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	4947      	ldr	r1, [pc, #284]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b86:	f7fb fe47 	bl	8001818 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8c:	e00a      	b.n	8005ba4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b8e:	f7fb fe43 	bl	8001818 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e077      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 020c 	and.w	r2, r3, #12
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d1eb      	bne.n	8005b8e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b80      	cmp	r3, #128	@ 0x80
 8005bba:	d105      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005bbc:	4b38      	ldr	r3, [pc, #224]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4a37      	ldr	r2, [pc, #220]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005bc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bc6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d010      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	4b31      	ldr	r3, [pc, #196]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d208      	bcs.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be4:	4b2e      	ldr	r3, [pc, #184]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	492b      	ldr	r1, [pc, #172]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bf6:	4b29      	ldr	r3, [pc, #164]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d210      	bcs.n	8005c26 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c04:	4b25      	ldr	r3, [pc, #148]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f023 020f 	bic.w	r2, r3, #15
 8005c0c:	4923      	ldr	r1, [pc, #140]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c14:	4b21      	ldr	r3, [pc, #132]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d001      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e036      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d008      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c32:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	4918      	ldr	r1, [pc, #96]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d009      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c50:	4b13      	ldr	r3, [pc, #76]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4910      	ldr	r1, [pc, #64]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c64:	f000 f826 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	091b      	lsrs	r3, r3, #4
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	490c      	ldr	r1, [pc, #48]	@ (8005ca8 <HAL_RCC_ClockConfig+0x268>)
 8005c76:	5ccb      	ldrb	r3, [r1, r3]
 8005c78:	f003 031f 	and.w	r3, r3, #31
 8005c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c80:	4a0a      	ldr	r2, [pc, #40]	@ (8005cac <HAL_RCC_ClockConfig+0x26c>)
 8005c82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c84:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb0 <HAL_RCC_ClockConfig+0x270>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fb fd75 	bl	8001778 <HAL_InitTick>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	73fb      	strb	r3, [r7, #15]

  return status;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40022000 	.word	0x40022000
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	04c4b400 	.word	0x04c4b400
 8005ca8:	0800cfd0 	.word	0x0800cfd0
 8005cac:	20000000 	.word	0x20000000
 8005cb0:	20000004 	.word	0x20000004

08005cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b089      	sub	sp, #36	@ 0x24
 8005cb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
 8005cca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	2b0c      	cmp	r3, #12
 8005ce0:	d121      	bne.n	8005d26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d11e      	bne.n	8005d26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ce8:	4b34      	ldr	r3, [pc, #208]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d107      	bne.n	8005d04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cf4:	4b31      	ldr	r3, [pc, #196]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	f003 030f 	and.w	r3, r3, #15
 8005d00:	61fb      	str	r3, [r7, #28]
 8005d02:	e005      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d04:	4b2d      	ldr	r3, [pc, #180]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	091b      	lsrs	r3, r3, #4
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005d10:	4a2b      	ldr	r2, [pc, #172]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10d      	bne.n	8005d3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d24:	e00a      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d102      	bne.n	8005d32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d2c:	4b25      	ldr	r3, [pc, #148]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d2e:	61bb      	str	r3, [r7, #24]
 8005d30:	e004      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d101      	bne.n	8005d3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d38:	4b23      	ldr	r3, [pc, #140]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2b0c      	cmp	r3, #12
 8005d40:	d134      	bne.n	8005dac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d42:	4b1e      	ldr	r3, [pc, #120]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d003      	beq.n	8005d5a <HAL_RCC_GetSysClockFreq+0xa6>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d003      	beq.n	8005d60 <HAL_RCC_GetSysClockFreq+0xac>
 8005d58:	e005      	b.n	8005d66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d5c:	617b      	str	r3, [r7, #20]
      break;
 8005d5e:	e005      	b.n	8005d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d60:	4b19      	ldr	r3, [pc, #100]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d62:	617b      	str	r3, [r7, #20]
      break;
 8005d64:	e002      	b.n	8005d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	617b      	str	r3, [r7, #20]
      break;
 8005d6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d6c:	4b13      	ldr	r3, [pc, #76]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	091b      	lsrs	r3, r3, #4
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	3301      	adds	r3, #1
 8005d78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d7a:	4b10      	ldr	r3, [pc, #64]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	0a1b      	lsrs	r3, r3, #8
 8005d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	fb03 f202 	mul.w	r2, r3, r2
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d92:	4b0a      	ldr	r3, [pc, #40]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	0e5b      	lsrs	r3, r3, #25
 8005d98:	f003 0303 	and.w	r3, r3, #3
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005daa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005dac:	69bb      	ldr	r3, [r7, #24]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3724      	adds	r7, #36	@ 0x24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	0800cfe8 	.word	0x0800cfe8
 8005dc4:	00f42400 	.word	0x00f42400
 8005dc8:	007a1200 	.word	0x007a1200

08005dcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dd0:	4b03      	ldr	r3, [pc, #12]	@ (8005de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000000 	.word	0x20000000

08005de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005de8:	f7ff fff0 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8005dec:	4602      	mov	r2, r0
 8005dee:	4b06      	ldr	r3, [pc, #24]	@ (8005e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	0a1b      	lsrs	r3, r3, #8
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	4904      	ldr	r1, [pc, #16]	@ (8005e0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dfa:	5ccb      	ldrb	r3, [r1, r3]
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	0800cfe0 	.word	0x0800cfe0

08005e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e14:	f7ff ffda 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	4b06      	ldr	r3, [pc, #24]	@ (8005e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	0adb      	lsrs	r3, r3, #11
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	4904      	ldr	r1, [pc, #16]	@ (8005e38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e26:	5ccb      	ldrb	r3, [r1, r3]
 8005e28:	f003 031f 	and.w	r3, r3, #31
 8005e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40021000 	.word	0x40021000
 8005e38:	0800cfe0 	.word	0x0800cfe0

08005e3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e44:	2300      	movs	r3, #0
 8005e46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e48:	4b27      	ldr	r3, [pc, #156]	@ (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e54:	f7ff f8f6 	bl	8005044 <HAL_PWREx_GetVoltageRange>
 8005e58:	6178      	str	r0, [r7, #20]
 8005e5a:	e014      	b.n	8005e86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e5c:	4b22      	ldr	r3, [pc, #136]	@ (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e60:	4a21      	ldr	r2, [pc, #132]	@ (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e68:	4b1f      	ldr	r3, [pc, #124]	@ (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e74:	f7ff f8e6 	bl	8005044 <HAL_PWREx_GetVoltageRange>
 8005e78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e84:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e8c:	d10b      	bne.n	8005ea6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b80      	cmp	r3, #128	@ 0x80
 8005e92:	d913      	bls.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2ba0      	cmp	r3, #160	@ 0xa0
 8005e98:	d902      	bls.n	8005ea0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	e00d      	b.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	e00a      	b.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eaa:	d902      	bls.n	8005eb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005eac:	2302      	movs	r3, #2
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	e004      	b.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b70      	cmp	r3, #112	@ 0x70
 8005eb6:	d101      	bne.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005eb8:	2301      	movs	r3, #1
 8005eba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8005eec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f023 020f 	bic.w	r2, r3, #15
 8005ec4:	4909      	ldr	r1, [pc, #36]	@ (8005eec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ecc:	4b07      	ldr	r3, [pc, #28]	@ (8005eec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d001      	beq.n	8005ede <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	40022000 	.word	0x40022000

08005ef0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8005fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d00b      	beq.n	8005f1e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d825      	bhi.n	8005f58 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d008      	beq.n	8005f24 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d11f      	bne.n	8005f58 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005f18:	4b25      	ldr	r3, [pc, #148]	@ (8005fb0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f1a:	613b      	str	r3, [r7, #16]
    break;
 8005f1c:	e01f      	b.n	8005f5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005f1e:	4b25      	ldr	r3, [pc, #148]	@ (8005fb4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005f20:	613b      	str	r3, [r7, #16]
    break;
 8005f22:	e01c      	b.n	8005f5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f24:	4b21      	ldr	r3, [pc, #132]	@ (8005fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d107      	bne.n	8005f40 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f30:	4b1e      	ldr	r3, [pc, #120]	@ (8005fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f36:	0a1b      	lsrs	r3, r3, #8
 8005f38:	f003 030f 	and.w	r3, r3, #15
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	e005      	b.n	8005f4c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f40:	4b1a      	ldr	r3, [pc, #104]	@ (8005fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	091b      	lsrs	r3, r3, #4
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f54:	613b      	str	r3, [r7, #16]
    break;
 8005f56:	e002      	b.n	8005f5e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	613b      	str	r3, [r7, #16]
    break;
 8005f5c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f5e:	4b13      	ldr	r3, [pc, #76]	@ (8005fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	091b      	lsrs	r3, r3, #4
 8005f64:	f003 030f 	and.w	r3, r3, #15
 8005f68:	3301      	adds	r3, #1
 8005f6a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8005fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	fb03 f202 	mul.w	r2, r3, r2
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f82:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f84:	4b09      	ldr	r3, [pc, #36]	@ (8005fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	0e5b      	lsrs	r3, r3, #25
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	3301      	adds	r3, #1
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005f9e:	683b      	ldr	r3, [r7, #0]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	00f42400 	.word	0x00f42400
 8005fb4:	007a1200 	.word	0x007a1200
 8005fb8:	0800cfe8 	.word	0x0800cfe8

08005fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fc8:	2300      	movs	r3, #0
 8005fca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d040      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fdc:	2b80      	cmp	r3, #128	@ 0x80
 8005fde:	d02a      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005fe0:	2b80      	cmp	r3, #128	@ 0x80
 8005fe2:	d825      	bhi.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005fe4:	2b60      	cmp	r3, #96	@ 0x60
 8005fe6:	d026      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005fe8:	2b60      	cmp	r3, #96	@ 0x60
 8005fea:	d821      	bhi.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005fec:	2b40      	cmp	r3, #64	@ 0x40
 8005fee:	d006      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005ff0:	2b40      	cmp	r3, #64	@ 0x40
 8005ff2:	d81d      	bhi.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d009      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d010      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005ffc:	e018      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ffe:	4b89      	ldr	r3, [pc, #548]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	4a88      	ldr	r2, [pc, #544]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006008:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800600a:	e015      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3304      	adds	r3, #4
 8006010:	2100      	movs	r1, #0
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fb02 	bl	800661c <RCCEx_PLLSAI1_Config>
 8006018:	4603      	mov	r3, r0
 800601a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800601c:	e00c      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3320      	adds	r3, #32
 8006022:	2100      	movs	r1, #0
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fbed 	bl	8006804 <RCCEx_PLLSAI2_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800602e:	e003      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	74fb      	strb	r3, [r7, #19]
      break;
 8006034:	e000      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006038:	7cfb      	ldrb	r3, [r7, #19]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10b      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800603e:	4b79      	ldr	r3, [pc, #484]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006040:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006044:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800604c:	4975      	ldr	r1, [pc, #468]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006054:	e001      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006056:	7cfb      	ldrb	r3, [r7, #19]
 8006058:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d047      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800606e:	d030      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006074:	d82a      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800607a:	d02a      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800607c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006080:	d824      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006082:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006086:	d008      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800608c:	d81e      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006096:	d010      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006098:	e018      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800609a:	4b62      	ldr	r3, [pc, #392]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	4a61      	ldr	r2, [pc, #388]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060a4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060a6:	e015      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fab4 	bl	800661c <RCCEx_PLLSAI1_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060b8:	e00c      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3320      	adds	r3, #32
 80060be:	2100      	movs	r1, #0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fb9f 	bl	8006804 <RCCEx_PLLSAI2_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060ca:	e003      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	74fb      	strb	r3, [r7, #19]
      break;
 80060d0:	e000      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80060d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d4:	7cfb      	ldrb	r3, [r7, #19]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10b      	bne.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060da:	4b52      	ldr	r3, [pc, #328]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e8:	494e      	ldr	r1, [pc, #312]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80060f0:	e001      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f2:	7cfb      	ldrb	r3, [r7, #19]
 80060f4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 809f 	beq.w	8006242 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006104:	2300      	movs	r3, #0
 8006106:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006108:	4b46      	ldr	r3, [pc, #280]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800610a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006118:	2300      	movs	r3, #0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00d      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800611e:	4b41      	ldr	r3, [pc, #260]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006122:	4a40      	ldr	r2, [pc, #256]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006128:	6593      	str	r3, [r2, #88]	@ 0x58
 800612a:	4b3e      	ldr	r3, [pc, #248]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800612c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006132:	60bb      	str	r3, [r7, #8]
 8006134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006136:	2301      	movs	r3, #1
 8006138:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800613a:	4b3b      	ldr	r3, [pc, #236]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a3a      	ldr	r2, [pc, #232]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006144:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006146:	f7fb fb67 	bl	8001818 <HAL_GetTick>
 800614a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800614c:	e009      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800614e:	f7fb fb63 	bl	8001818 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d902      	bls.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	74fb      	strb	r3, [r7, #19]
        break;
 8006160:	e005      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006162:	4b31      	ldr	r3, [pc, #196]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0ef      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800616e:	7cfb      	ldrb	r3, [r7, #19]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d15b      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006174:	4b2b      	ldr	r3, [pc, #172]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800617a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800617e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d01f      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	429a      	cmp	r2, r3
 8006190:	d019      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006192:	4b24      	ldr	r3, [pc, #144]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800619c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800619e:	4b21      	ldr	r3, [pc, #132]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061be:	4a19      	ldr	r2, [pc, #100]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d016      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d0:	f7fb fb22 	bl	8001818 <HAL_GetTick>
 80061d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061d6:	e00b      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d8:	f7fb fb1e 	bl	8001818 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d902      	bls.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	74fb      	strb	r3, [r7, #19]
            break;
 80061ee:	e006      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0ec      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80061fe:	7cfb      	ldrb	r3, [r7, #19]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10c      	bne.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006204:	4b07      	ldr	r3, [pc, #28]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800620a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006214:	4903      	ldr	r1, [pc, #12]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800621c:	e008      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800621e:	7cfb      	ldrb	r3, [r7, #19]
 8006220:	74bb      	strb	r3, [r7, #18]
 8006222:	e005      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006224:	40021000 	.word	0x40021000
 8006228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622c:	7cfb      	ldrb	r3, [r7, #19]
 800622e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006230:	7c7b      	ldrb	r3, [r7, #17]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d105      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006236:	4ba0      	ldr	r3, [pc, #640]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623a:	4a9f      	ldr	r2, [pc, #636]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800623c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006240:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800624e:	4b9a      	ldr	r3, [pc, #616]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006254:	f023 0203 	bic.w	r2, r3, #3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625c:	4996      	ldr	r1, [pc, #600]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006270:	4b91      	ldr	r3, [pc, #580]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006276:	f023 020c 	bic.w	r2, r3, #12
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	498e      	ldr	r1, [pc, #568]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006292:	4b89      	ldr	r3, [pc, #548]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006298:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a0:	4985      	ldr	r1, [pc, #532]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062b4:	4b80      	ldr	r3, [pc, #512]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062c2:	497d      	ldr	r1, [pc, #500]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0310 	and.w	r3, r3, #16
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062d6:	4b78      	ldr	r3, [pc, #480]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062e4:	4974      	ldr	r1, [pc, #464]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062f8:	4b6f      	ldr	r3, [pc, #444]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006306:	496c      	ldr	r1, [pc, #432]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800631a:	4b67      	ldr	r3, [pc, #412]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800631c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006320:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006328:	4963      	ldr	r1, [pc, #396]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800633c:	4b5e      	ldr	r3, [pc, #376]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800633e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006342:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800634a:	495b      	ldr	r1, [pc, #364]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800635e:	4b56      	ldr	r3, [pc, #344]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006364:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636c:	4952      	ldr	r1, [pc, #328]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006380:	4b4d      	ldr	r3, [pc, #308]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006386:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638e:	494a      	ldr	r1, [pc, #296]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063a2:	4b45      	ldr	r3, [pc, #276]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063b0:	4941      	ldr	r1, [pc, #260]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063c4:	4b3c      	ldr	r3, [pc, #240]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063ca:	f023 0203 	bic.w	r2, r3, #3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063d2:	4939      	ldr	r1, [pc, #228]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d028      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063e6:	4b34      	ldr	r3, [pc, #208]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063f4:	4930      	ldr	r1, [pc, #192]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006400:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006404:	d106      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006406:	4b2c      	ldr	r3, [pc, #176]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	4a2b      	ldr	r2, [pc, #172]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800640c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006410:	60d3      	str	r3, [r2, #12]
 8006412:	e011      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006418:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800641c:	d10c      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3304      	adds	r3, #4
 8006422:	2101      	movs	r1, #1
 8006424:	4618      	mov	r0, r3
 8006426:	f000 f8f9 	bl	800661c <RCCEx_PLLSAI1_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800642e:	7cfb      	ldrb	r3, [r7, #19]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006434:	7cfb      	ldrb	r3, [r7, #19]
 8006436:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d04d      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006448:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800644c:	d108      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800644e:	4b1a      	ldr	r3, [pc, #104]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006450:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006454:	4a18      	ldr	r2, [pc, #96]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006456:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800645a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800645e:	e012      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006460:	4b15      	ldr	r3, [pc, #84]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006462:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006466:	4a14      	ldr	r2, [pc, #80]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006468:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800646c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006470:	4b11      	ldr	r3, [pc, #68]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006476:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800647e:	490e      	ldr	r1, [pc, #56]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006480:	4313      	orrs	r3, r2
 8006482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800648a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800648e:	d106      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006490:	4b09      	ldr	r3, [pc, #36]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	4a08      	ldr	r2, [pc, #32]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800649a:	60d3      	str	r3, [r2, #12]
 800649c:	e020      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064a6:	d109      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80064a8:	4b03      	ldr	r3, [pc, #12]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4a02      	ldr	r2, [pc, #8]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b2:	60d3      	str	r3, [r2, #12]
 80064b4:	e014      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80064b6:	bf00      	nop
 80064b8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064c4:	d10c      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3304      	adds	r3, #4
 80064ca:	2101      	movs	r1, #1
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 f8a5 	bl	800661c <RCCEx_PLLSAI1_Config>
 80064d2:	4603      	mov	r3, r0
 80064d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064d6:	7cfb      	ldrb	r3, [r7, #19]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80064dc:	7cfb      	ldrb	r3, [r7, #19]
 80064de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d028      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064ec:	4b4a      	ldr	r3, [pc, #296]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064fa:	4947      	ldr	r1, [pc, #284]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006506:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800650a:	d106      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800650c:	4b42      	ldr	r3, [pc, #264]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	4a41      	ldr	r2, [pc, #260]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006516:	60d3      	str	r3, [r2, #12]
 8006518:	e011      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800651e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006522:	d10c      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3304      	adds	r3, #4
 8006528:	2101      	movs	r1, #1
 800652a:	4618      	mov	r0, r3
 800652c:	f000 f876 	bl	800661c <RCCEx_PLLSAI1_Config>
 8006530:	4603      	mov	r3, r0
 8006532:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006534:	7cfb      	ldrb	r3, [r7, #19]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800653a:	7cfb      	ldrb	r3, [r7, #19]
 800653c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d01e      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800654a:	4b33      	ldr	r3, [pc, #204]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006550:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800655a:	492f      	ldr	r1, [pc, #188]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800656c:	d10c      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	2102      	movs	r1, #2
 8006574:	4618      	mov	r0, r3
 8006576:	f000 f851 	bl	800661c <RCCEx_PLLSAI1_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800657e:	7cfb      	ldrb	r3, [r7, #19]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006584:	7cfb      	ldrb	r3, [r7, #19]
 8006586:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00b      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006594:	4b20      	ldr	r3, [pc, #128]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006596:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800659a:	f023 0204 	bic.w	r2, r3, #4
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065a4:	491c      	ldr	r1, [pc, #112]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00b      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80065b8:	4b17      	ldr	r3, [pc, #92]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065be:	f023 0218 	bic.w	r2, r3, #24
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c8:	4913      	ldr	r1, [pc, #76]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d017      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80065dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065ec:	490a      	ldr	r1, [pc, #40]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065fe:	d105      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006600:	4b05      	ldr	r3, [pc, #20]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	4a04      	ldr	r2, [pc, #16]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800660a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800660c:	7cbb      	ldrb	r3, [r7, #18]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40021000 	.word	0x40021000

0800661c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800662a:	4b72      	ldr	r3, [pc, #456]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00e      	beq.n	8006654 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006636:	4b6f      	ldr	r3, [pc, #444]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f003 0203 	and.w	r2, r3, #3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	429a      	cmp	r2, r3
 8006644:	d103      	bne.n	800664e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
       ||
 800664a:	2b00      	cmp	r3, #0
 800664c:	d142      	bne.n	80066d4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	73fb      	strb	r3, [r7, #15]
 8006652:	e03f      	b.n	80066d4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b03      	cmp	r3, #3
 800665a:	d018      	beq.n	800668e <RCCEx_PLLSAI1_Config+0x72>
 800665c:	2b03      	cmp	r3, #3
 800665e:	d825      	bhi.n	80066ac <RCCEx_PLLSAI1_Config+0x90>
 8006660:	2b01      	cmp	r3, #1
 8006662:	d002      	beq.n	800666a <RCCEx_PLLSAI1_Config+0x4e>
 8006664:	2b02      	cmp	r3, #2
 8006666:	d009      	beq.n	800667c <RCCEx_PLLSAI1_Config+0x60>
 8006668:	e020      	b.n	80066ac <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800666a:	4b62      	ldr	r3, [pc, #392]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d11d      	bne.n	80066b2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800667a:	e01a      	b.n	80066b2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800667c:	4b5d      	ldr	r3, [pc, #372]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006684:	2b00      	cmp	r3, #0
 8006686:	d116      	bne.n	80066b6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800668c:	e013      	b.n	80066b6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800668e:	4b59      	ldr	r3, [pc, #356]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10f      	bne.n	80066ba <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800669a:	4b56      	ldr	r3, [pc, #344]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066aa:	e006      	b.n	80066ba <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	73fb      	strb	r3, [r7, #15]
      break;
 80066b0:	e004      	b.n	80066bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80066b2:	bf00      	nop
 80066b4:	e002      	b.n	80066bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80066b6:	bf00      	nop
 80066b8:	e000      	b.n	80066bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80066ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d108      	bne.n	80066d4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80066c2:	4b4c      	ldr	r3, [pc, #304]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f023 0203 	bic.w	r2, r3, #3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4949      	ldr	r1, [pc, #292]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f040 8086 	bne.w	80067e8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80066dc:	4b45      	ldr	r3, [pc, #276]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a44      	ldr	r2, [pc, #272]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e8:	f7fb f896 	bl	8001818 <HAL_GetTick>
 80066ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066ee:	e009      	b.n	8006704 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066f0:	f7fb f892 	bl	8001818 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d902      	bls.n	8006704 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	73fb      	strb	r3, [r7, #15]
        break;
 8006702:	e005      	b.n	8006710 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006704:	4b3b      	ldr	r3, [pc, #236]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1ef      	bne.n	80066f0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d168      	bne.n	80067e8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d113      	bne.n	8006744 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800671c:	4b35      	ldr	r3, [pc, #212]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800671e:	691a      	ldr	r2, [r3, #16]
 8006720:	4b35      	ldr	r3, [pc, #212]	@ (80067f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006722:	4013      	ands	r3, r2
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6892      	ldr	r2, [r2, #8]
 8006728:	0211      	lsls	r1, r2, #8
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	68d2      	ldr	r2, [r2, #12]
 800672e:	06d2      	lsls	r2, r2, #27
 8006730:	4311      	orrs	r1, r2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6852      	ldr	r2, [r2, #4]
 8006736:	3a01      	subs	r2, #1
 8006738:	0112      	lsls	r2, r2, #4
 800673a:	430a      	orrs	r2, r1
 800673c:	492d      	ldr	r1, [pc, #180]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800673e:	4313      	orrs	r3, r2
 8006740:	610b      	str	r3, [r1, #16]
 8006742:	e02d      	b.n	80067a0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d115      	bne.n	8006776 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800674a:	4b2a      	ldr	r3, [pc, #168]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800674c:	691a      	ldr	r2, [r3, #16]
 800674e:	4b2b      	ldr	r3, [pc, #172]	@ (80067fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006750:	4013      	ands	r3, r2
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6892      	ldr	r2, [r2, #8]
 8006756:	0211      	lsls	r1, r2, #8
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6912      	ldr	r2, [r2, #16]
 800675c:	0852      	lsrs	r2, r2, #1
 800675e:	3a01      	subs	r2, #1
 8006760:	0552      	lsls	r2, r2, #21
 8006762:	4311      	orrs	r1, r2
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6852      	ldr	r2, [r2, #4]
 8006768:	3a01      	subs	r2, #1
 800676a:	0112      	lsls	r2, r2, #4
 800676c:	430a      	orrs	r2, r1
 800676e:	4921      	ldr	r1, [pc, #132]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006770:	4313      	orrs	r3, r2
 8006772:	610b      	str	r3, [r1, #16]
 8006774:	e014      	b.n	80067a0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006776:	4b1f      	ldr	r3, [pc, #124]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	4b21      	ldr	r3, [pc, #132]	@ (8006800 <RCCEx_PLLSAI1_Config+0x1e4>)
 800677c:	4013      	ands	r3, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6892      	ldr	r2, [r2, #8]
 8006782:	0211      	lsls	r1, r2, #8
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6952      	ldr	r2, [r2, #20]
 8006788:	0852      	lsrs	r2, r2, #1
 800678a:	3a01      	subs	r2, #1
 800678c:	0652      	lsls	r2, r2, #25
 800678e:	4311      	orrs	r1, r2
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6852      	ldr	r2, [r2, #4]
 8006794:	3a01      	subs	r2, #1
 8006796:	0112      	lsls	r2, r2, #4
 8006798:	430a      	orrs	r2, r1
 800679a:	4916      	ldr	r1, [pc, #88]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800679c:	4313      	orrs	r3, r2
 800679e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80067a0:	4b14      	ldr	r3, [pc, #80]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a13      	ldr	r2, [pc, #76]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80067aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ac:	f7fb f834 	bl	8001818 <HAL_GetTick>
 80067b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067b2:	e009      	b.n	80067c8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067b4:	f7fb f830 	bl	8001818 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d902      	bls.n	80067c8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	73fb      	strb	r3, [r7, #15]
          break;
 80067c6:	e005      	b.n	80067d4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067c8:	4b0a      	ldr	r3, [pc, #40]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0ef      	beq.n	80067b4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d106      	bne.n	80067e8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80067da:	4b06      	ldr	r3, [pc, #24]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	4904      	ldr	r1, [pc, #16]	@ (80067f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	40021000 	.word	0x40021000
 80067f8:	07ff800f 	.word	0x07ff800f
 80067fc:	ff9f800f 	.word	0xff9f800f
 8006800:	f9ff800f 	.word	0xf9ff800f

08006804 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006812:	4b72      	ldr	r3, [pc, #456]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00e      	beq.n	800683c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800681e:	4b6f      	ldr	r3, [pc, #444]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f003 0203 	and.w	r2, r3, #3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d103      	bne.n	8006836 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
       ||
 8006832:	2b00      	cmp	r3, #0
 8006834:	d142      	bne.n	80068bc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	73fb      	strb	r3, [r7, #15]
 800683a:	e03f      	b.n	80068bc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b03      	cmp	r3, #3
 8006842:	d018      	beq.n	8006876 <RCCEx_PLLSAI2_Config+0x72>
 8006844:	2b03      	cmp	r3, #3
 8006846:	d825      	bhi.n	8006894 <RCCEx_PLLSAI2_Config+0x90>
 8006848:	2b01      	cmp	r3, #1
 800684a:	d002      	beq.n	8006852 <RCCEx_PLLSAI2_Config+0x4e>
 800684c:	2b02      	cmp	r3, #2
 800684e:	d009      	beq.n	8006864 <RCCEx_PLLSAI2_Config+0x60>
 8006850:	e020      	b.n	8006894 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006852:	4b62      	ldr	r3, [pc, #392]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d11d      	bne.n	800689a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006862:	e01a      	b.n	800689a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006864:	4b5d      	ldr	r3, [pc, #372]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800686c:	2b00      	cmp	r3, #0
 800686e:	d116      	bne.n	800689e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006874:	e013      	b.n	800689e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006876:	4b59      	ldr	r3, [pc, #356]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10f      	bne.n	80068a2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006882:	4b56      	ldr	r3, [pc, #344]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d109      	bne.n	80068a2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006892:	e006      	b.n	80068a2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	73fb      	strb	r3, [r7, #15]
      break;
 8006898:	e004      	b.n	80068a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800689a:	bf00      	nop
 800689c:	e002      	b.n	80068a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800689e:	bf00      	nop
 80068a0:	e000      	b.n	80068a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80068a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d108      	bne.n	80068bc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80068aa:	4b4c      	ldr	r3, [pc, #304]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f023 0203 	bic.w	r2, r3, #3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4949      	ldr	r1, [pc, #292]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f040 8086 	bne.w	80069d0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80068c4:	4b45      	ldr	r3, [pc, #276]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a44      	ldr	r2, [pc, #272]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068d0:	f7fa ffa2 	bl	8001818 <HAL_GetTick>
 80068d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068d6:	e009      	b.n	80068ec <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068d8:	f7fa ff9e 	bl	8001818 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d902      	bls.n	80068ec <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	73fb      	strb	r3, [r7, #15]
        break;
 80068ea:	e005      	b.n	80068f8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068ec:	4b3b      	ldr	r3, [pc, #236]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1ef      	bne.n	80068d8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d168      	bne.n	80069d0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d113      	bne.n	800692c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006904:	4b35      	ldr	r3, [pc, #212]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006906:	695a      	ldr	r2, [r3, #20]
 8006908:	4b35      	ldr	r3, [pc, #212]	@ (80069e0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800690a:	4013      	ands	r3, r2
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6892      	ldr	r2, [r2, #8]
 8006910:	0211      	lsls	r1, r2, #8
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	68d2      	ldr	r2, [r2, #12]
 8006916:	06d2      	lsls	r2, r2, #27
 8006918:	4311      	orrs	r1, r2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6852      	ldr	r2, [r2, #4]
 800691e:	3a01      	subs	r2, #1
 8006920:	0112      	lsls	r2, r2, #4
 8006922:	430a      	orrs	r2, r1
 8006924:	492d      	ldr	r1, [pc, #180]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006926:	4313      	orrs	r3, r2
 8006928:	614b      	str	r3, [r1, #20]
 800692a:	e02d      	b.n	8006988 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d115      	bne.n	800695e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006932:	4b2a      	ldr	r3, [pc, #168]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006934:	695a      	ldr	r2, [r3, #20]
 8006936:	4b2b      	ldr	r3, [pc, #172]	@ (80069e4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006938:	4013      	ands	r3, r2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6892      	ldr	r2, [r2, #8]
 800693e:	0211      	lsls	r1, r2, #8
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6912      	ldr	r2, [r2, #16]
 8006944:	0852      	lsrs	r2, r2, #1
 8006946:	3a01      	subs	r2, #1
 8006948:	0552      	lsls	r2, r2, #21
 800694a:	4311      	orrs	r1, r2
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6852      	ldr	r2, [r2, #4]
 8006950:	3a01      	subs	r2, #1
 8006952:	0112      	lsls	r2, r2, #4
 8006954:	430a      	orrs	r2, r1
 8006956:	4921      	ldr	r1, [pc, #132]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006958:	4313      	orrs	r3, r2
 800695a:	614b      	str	r3, [r1, #20]
 800695c:	e014      	b.n	8006988 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800695e:	4b1f      	ldr	r3, [pc, #124]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006960:	695a      	ldr	r2, [r3, #20]
 8006962:	4b21      	ldr	r3, [pc, #132]	@ (80069e8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006964:	4013      	ands	r3, r2
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	6892      	ldr	r2, [r2, #8]
 800696a:	0211      	lsls	r1, r2, #8
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6952      	ldr	r2, [r2, #20]
 8006970:	0852      	lsrs	r2, r2, #1
 8006972:	3a01      	subs	r2, #1
 8006974:	0652      	lsls	r2, r2, #25
 8006976:	4311      	orrs	r1, r2
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6852      	ldr	r2, [r2, #4]
 800697c:	3a01      	subs	r2, #1
 800697e:	0112      	lsls	r2, r2, #4
 8006980:	430a      	orrs	r2, r1
 8006982:	4916      	ldr	r1, [pc, #88]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006984:	4313      	orrs	r3, r2
 8006986:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006988:	4b14      	ldr	r3, [pc, #80]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a13      	ldr	r2, [pc, #76]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800698e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006992:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006994:	f7fa ff40 	bl	8001818 <HAL_GetTick>
 8006998:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800699a:	e009      	b.n	80069b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800699c:	f7fa ff3c 	bl	8001818 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d902      	bls.n	80069b0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	73fb      	strb	r3, [r7, #15]
          break;
 80069ae:	e005      	b.n	80069bc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069b0:	4b0a      	ldr	r3, [pc, #40]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d0ef      	beq.n	800699c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d106      	bne.n	80069d0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80069c2:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80069c4:	695a      	ldr	r2, [r3, #20]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	4904      	ldr	r1, [pc, #16]	@ (80069dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40021000 	.word	0x40021000
 80069e0:	07ff800f 	.word	0x07ff800f
 80069e4:	ff9f800f 	.word	0xff9f800f
 80069e8:	f9ff800f 	.word	0xf9ff800f

080069ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e049      	b.n	8006a92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d106      	bne.n	8006a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fa fc76 	bl	8001304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3304      	adds	r3, #4
 8006a28:	4619      	mov	r1, r3
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	f000 fb02 	bl	8007034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d001      	beq.n	8006ab4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e047      	b.n	8006b44 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a23      	ldr	r2, [pc, #140]	@ (8006b50 <HAL_TIM_Base_Start+0xb4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d01d      	beq.n	8006b02 <HAL_TIM_Base_Start+0x66>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ace:	d018      	beq.n	8006b02 <HAL_TIM_Base_Start+0x66>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8006b54 <HAL_TIM_Base_Start+0xb8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d013      	beq.n	8006b02 <HAL_TIM_Base_Start+0x66>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1e      	ldr	r2, [pc, #120]	@ (8006b58 <HAL_TIM_Base_Start+0xbc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00e      	beq.n	8006b02 <HAL_TIM_Base_Start+0x66>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8006b5c <HAL_TIM_Base_Start+0xc0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d009      	beq.n	8006b02 <HAL_TIM_Base_Start+0x66>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b60 <HAL_TIM_Base_Start+0xc4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d004      	beq.n	8006b02 <HAL_TIM_Base_Start+0x66>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a19      	ldr	r2, [pc, #100]	@ (8006b64 <HAL_TIM_Base_Start+0xc8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d115      	bne.n	8006b2e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	4b17      	ldr	r3, [pc, #92]	@ (8006b68 <HAL_TIM_Base_Start+0xcc>)
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b06      	cmp	r3, #6
 8006b12:	d015      	beq.n	8006b40 <HAL_TIM_Base_Start+0xa4>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b1a:	d011      	beq.n	8006b40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2c:	e008      	b.n	8006b40 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e000      	b.n	8006b42 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	40012c00 	.word	0x40012c00
 8006b54:	40000400 	.word	0x40000400
 8006b58:	40000800 	.word	0x40000800
 8006b5c:	40000c00 	.word	0x40000c00
 8006b60:	40013400 	.word	0x40013400
 8006b64:	40014000 	.word	0x40014000
 8006b68:	00010007 	.word	0x00010007

08006b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d001      	beq.n	8006b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e04f      	b.n	8006c24 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a23      	ldr	r2, [pc, #140]	@ (8006c30 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d01d      	beq.n	8006be2 <HAL_TIM_Base_Start_IT+0x76>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bae:	d018      	beq.n	8006be2 <HAL_TIM_Base_Start_IT+0x76>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8006c34 <HAL_TIM_Base_Start_IT+0xc8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d013      	beq.n	8006be2 <HAL_TIM_Base_Start_IT+0x76>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8006c38 <HAL_TIM_Base_Start_IT+0xcc>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00e      	beq.n	8006be2 <HAL_TIM_Base_Start_IT+0x76>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8006c3c <HAL_TIM_Base_Start_IT+0xd0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d009      	beq.n	8006be2 <HAL_TIM_Base_Start_IT+0x76>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8006c40 <HAL_TIM_Base_Start_IT+0xd4>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <HAL_TIM_Base_Start_IT+0x76>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a19      	ldr	r2, [pc, #100]	@ (8006c44 <HAL_TIM_Base_Start_IT+0xd8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d115      	bne.n	8006c0e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	4b17      	ldr	r3, [pc, #92]	@ (8006c48 <HAL_TIM_Base_Start_IT+0xdc>)
 8006bea:	4013      	ands	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b06      	cmp	r3, #6
 8006bf2:	d015      	beq.n	8006c20 <HAL_TIM_Base_Start_IT+0xb4>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bfa:	d011      	beq.n	8006c20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c0c:	e008      	b.n	8006c20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f042 0201 	orr.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	e000      	b.n	8006c22 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	40012c00 	.word	0x40012c00
 8006c34:	40000400 	.word	0x40000400
 8006c38:	40000800 	.word	0x40000800
 8006c3c:	40000c00 	.word	0x40000c00
 8006c40:	40013400 	.word	0x40013400
 8006c44:	40014000 	.word	0x40014000
 8006c48:	00010007 	.word	0x00010007

08006c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d020      	beq.n	8006cb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d01b      	beq.n	8006cb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0202 	mvn.w	r2, #2
 8006c80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9ad 	bl	8006ff6 <HAL_TIM_IC_CaptureCallback>
 8006c9c:	e005      	b.n	8006caa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f99f 	bl	8006fe2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f9b0 	bl	800700a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f003 0304 	and.w	r3, r3, #4
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d020      	beq.n	8006cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01b      	beq.n	8006cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f06f 0204 	mvn.w	r2, #4
 8006ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f987 	bl	8006ff6 <HAL_TIM_IC_CaptureCallback>
 8006ce8:	e005      	b.n	8006cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f979 	bl	8006fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f98a 	bl	800700a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d020      	beq.n	8006d48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01b      	beq.n	8006d48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f06f 0208 	mvn.w	r2, #8
 8006d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f961 	bl	8006ff6 <HAL_TIM_IC_CaptureCallback>
 8006d34:	e005      	b.n	8006d42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f953 	bl	8006fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f964 	bl	800700a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f003 0310 	and.w	r3, r3, #16
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d020      	beq.n	8006d94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01b      	beq.n	8006d94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0210 	mvn.w	r2, #16
 8006d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2208      	movs	r2, #8
 8006d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f93b 	bl	8006ff6 <HAL_TIM_IC_CaptureCallback>
 8006d80:	e005      	b.n	8006d8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f92d 	bl	8006fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f93e 	bl	800700a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00c      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d007      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f06f 0201 	mvn.w	r2, #1
 8006db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7f9 fed8 	bl	8000b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d007      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 faf2 	bl	80073c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00c      	beq.n	8006e00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d007      	beq.n	8006e00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 faea 	bl	80073d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00c      	beq.n	8006e24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f8fd 	bl	800701e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00c      	beq.n	8006e48 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f06f 0220 	mvn.w	r2, #32
 8006e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fab2 	bl	80073ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_TIM_ConfigClockSource+0x1c>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e0b6      	b.n	8006fda <HAL_TIM_ConfigClockSource+0x18a>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ea8:	d03e      	beq.n	8006f28 <HAL_TIM_ConfigClockSource+0xd8>
 8006eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eae:	f200 8087 	bhi.w	8006fc0 <HAL_TIM_ConfigClockSource+0x170>
 8006eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb6:	f000 8086 	beq.w	8006fc6 <HAL_TIM_ConfigClockSource+0x176>
 8006eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ebe:	d87f      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x170>
 8006ec0:	2b70      	cmp	r3, #112	@ 0x70
 8006ec2:	d01a      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0xaa>
 8006ec4:	2b70      	cmp	r3, #112	@ 0x70
 8006ec6:	d87b      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x170>
 8006ec8:	2b60      	cmp	r3, #96	@ 0x60
 8006eca:	d050      	beq.n	8006f6e <HAL_TIM_ConfigClockSource+0x11e>
 8006ecc:	2b60      	cmp	r3, #96	@ 0x60
 8006ece:	d877      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x170>
 8006ed0:	2b50      	cmp	r3, #80	@ 0x50
 8006ed2:	d03c      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0xfe>
 8006ed4:	2b50      	cmp	r3, #80	@ 0x50
 8006ed6:	d873      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x170>
 8006ed8:	2b40      	cmp	r3, #64	@ 0x40
 8006eda:	d058      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x13e>
 8006edc:	2b40      	cmp	r3, #64	@ 0x40
 8006ede:	d86f      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x170>
 8006ee0:	2b30      	cmp	r3, #48	@ 0x30
 8006ee2:	d064      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x15e>
 8006ee4:	2b30      	cmp	r3, #48	@ 0x30
 8006ee6:	d86b      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x170>
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d060      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x15e>
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	d867      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x170>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d05c      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x15e>
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d05a      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x15e>
 8006ef8:	e062      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f0a:	f000 f9a7 	bl	800725c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	609a      	str	r2, [r3, #8]
      break;
 8006f26:	e04f      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f38:	f000 f990 	bl	800725c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f4a:	609a      	str	r2, [r3, #8]
      break;
 8006f4c:	e03c      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f000 f904 	bl	8007168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2150      	movs	r1, #80	@ 0x50
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 f95d 	bl	8007226 <TIM_ITRx_SetConfig>
      break;
 8006f6c:	e02c      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f000 f923 	bl	80071c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2160      	movs	r1, #96	@ 0x60
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 f94d 	bl	8007226 <TIM_ITRx_SetConfig>
      break;
 8006f8c:	e01c      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f000 f8e4 	bl	8007168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2140      	movs	r1, #64	@ 0x40
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 f93d 	bl	8007226 <TIM_ITRx_SetConfig>
      break;
 8006fac:	e00c      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f000 f934 	bl	8007226 <TIM_ITRx_SetConfig>
      break;
 8006fbe:	e003      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc4:	e000      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006fc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
	...

08007034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a40      	ldr	r2, [pc, #256]	@ (8007148 <TIM_Base_SetConfig+0x114>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d013      	beq.n	8007074 <TIM_Base_SetConfig+0x40>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007052:	d00f      	beq.n	8007074 <TIM_Base_SetConfig+0x40>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a3d      	ldr	r2, [pc, #244]	@ (800714c <TIM_Base_SetConfig+0x118>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d00b      	beq.n	8007074 <TIM_Base_SetConfig+0x40>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a3c      	ldr	r2, [pc, #240]	@ (8007150 <TIM_Base_SetConfig+0x11c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d007      	beq.n	8007074 <TIM_Base_SetConfig+0x40>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a3b      	ldr	r2, [pc, #236]	@ (8007154 <TIM_Base_SetConfig+0x120>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d003      	beq.n	8007074 <TIM_Base_SetConfig+0x40>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a3a      	ldr	r2, [pc, #232]	@ (8007158 <TIM_Base_SetConfig+0x124>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d108      	bne.n	8007086 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800707a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a2f      	ldr	r2, [pc, #188]	@ (8007148 <TIM_Base_SetConfig+0x114>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d01f      	beq.n	80070ce <TIM_Base_SetConfig+0x9a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007094:	d01b      	beq.n	80070ce <TIM_Base_SetConfig+0x9a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a2c      	ldr	r2, [pc, #176]	@ (800714c <TIM_Base_SetConfig+0x118>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d017      	beq.n	80070ce <TIM_Base_SetConfig+0x9a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a2b      	ldr	r2, [pc, #172]	@ (8007150 <TIM_Base_SetConfig+0x11c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d013      	beq.n	80070ce <TIM_Base_SetConfig+0x9a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a2a      	ldr	r2, [pc, #168]	@ (8007154 <TIM_Base_SetConfig+0x120>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d00f      	beq.n	80070ce <TIM_Base_SetConfig+0x9a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a29      	ldr	r2, [pc, #164]	@ (8007158 <TIM_Base_SetConfig+0x124>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d00b      	beq.n	80070ce <TIM_Base_SetConfig+0x9a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a28      	ldr	r2, [pc, #160]	@ (800715c <TIM_Base_SetConfig+0x128>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d007      	beq.n	80070ce <TIM_Base_SetConfig+0x9a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a27      	ldr	r2, [pc, #156]	@ (8007160 <TIM_Base_SetConfig+0x12c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d003      	beq.n	80070ce <TIM_Base_SetConfig+0x9a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a26      	ldr	r2, [pc, #152]	@ (8007164 <TIM_Base_SetConfig+0x130>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d108      	bne.n	80070e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a10      	ldr	r2, [pc, #64]	@ (8007148 <TIM_Base_SetConfig+0x114>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00f      	beq.n	800712c <TIM_Base_SetConfig+0xf8>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a12      	ldr	r2, [pc, #72]	@ (8007158 <TIM_Base_SetConfig+0x124>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00b      	beq.n	800712c <TIM_Base_SetConfig+0xf8>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a11      	ldr	r2, [pc, #68]	@ (800715c <TIM_Base_SetConfig+0x128>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d007      	beq.n	800712c <TIM_Base_SetConfig+0xf8>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a10      	ldr	r2, [pc, #64]	@ (8007160 <TIM_Base_SetConfig+0x12c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d003      	beq.n	800712c <TIM_Base_SetConfig+0xf8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a0f      	ldr	r2, [pc, #60]	@ (8007164 <TIM_Base_SetConfig+0x130>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d103      	bne.n	8007134 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	615a      	str	r2, [r3, #20]
}
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40012c00 	.word	0x40012c00
 800714c:	40000400 	.word	0x40000400
 8007150:	40000800 	.word	0x40000800
 8007154:	40000c00 	.word	0x40000c00
 8007158:	40013400 	.word	0x40013400
 800715c:	40014000 	.word	0x40014000
 8007160:	40014400 	.word	0x40014400
 8007164:	40014800 	.word	0x40014800

08007168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	f023 0201 	bic.w	r2, r3, #1
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f023 030a 	bic.w	r3, r3, #10
 80071a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	621a      	str	r2, [r3, #32]
}
 80071ba:	bf00      	nop
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b087      	sub	sp, #28
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	f023 0210 	bic.w	r2, r3, #16
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	031b      	lsls	r3, r3, #12
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007202:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	4313      	orrs	r3, r2
 800720c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	621a      	str	r2, [r3, #32]
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007226:	b480      	push	{r7}
 8007228:	b085      	sub	sp, #20
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800723c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4313      	orrs	r3, r2
 8007244:	f043 0307 	orr.w	r3, r3, #7
 8007248:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	609a      	str	r2, [r3, #8]
}
 8007250:	bf00      	nop
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	021a      	lsls	r2, r3, #8
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	431a      	orrs	r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	4313      	orrs	r3, r2
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	4313      	orrs	r3, r2
 8007288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	609a      	str	r2, [r3, #8]
}
 8007290:	bf00      	nop
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e068      	b.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d004      	beq.n	80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a2d      	ldr	r2, [pc, #180]	@ (8007398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d108      	bne.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80072ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007300:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4313      	orrs	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a1e      	ldr	r2, [pc, #120]	@ (8007394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d01d      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007326:	d018      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1b      	ldr	r2, [pc, #108]	@ (800739c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d013      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a1a      	ldr	r2, [pc, #104]	@ (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00e      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a18      	ldr	r2, [pc, #96]	@ (80073a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d009      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a13      	ldr	r2, [pc, #76]	@ (8007398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d004      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a14      	ldr	r2, [pc, #80]	@ (80073a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d10c      	bne.n	8007374 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	4313      	orrs	r3, r2
 800736a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	40012c00 	.word	0x40012c00
 8007398:	40013400 	.word	0x40013400
 800739c:	40000400 	.word	0x40000400
 80073a0:	40000800 	.word	0x40000800
 80073a4:	40000c00 	.word	0x40000c00
 80073a8:	40014000 	.word	0x40014000

080073ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e042      	b.n	8007480 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007400:	2b00      	cmp	r3, #0
 8007402:	d106      	bne.n	8007412 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7fa f867 	bl	80014e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2224      	movs	r2, #36	@ 0x24
 8007416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0201 	bic.w	r2, r2, #1
 8007428:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 ff4c 	bl	80082d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fc4d 	bl	8007cd8 <UART_SetConfig>
 800743e:	4603      	mov	r3, r0
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e01b      	b.n	8007480 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f042 0201 	orr.w	r2, r2, #1
 8007476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 ffcb 	bl	8008414 <UART_CheckIdleState>
 800747e:	4603      	mov	r3, r0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08a      	sub	sp, #40	@ 0x28
 800748c:	af02      	add	r7, sp, #8
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	603b      	str	r3, [r7, #0]
 8007494:	4613      	mov	r3, r2
 8007496:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749e:	2b20      	cmp	r3, #32
 80074a0:	d17b      	bne.n	800759a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d002      	beq.n	80074ae <HAL_UART_Transmit+0x26>
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e074      	b.n	800759c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2221      	movs	r2, #33	@ 0x21
 80074be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074c2:	f7fa f9a9 	bl	8001818 <HAL_GetTick>
 80074c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	88fa      	ldrh	r2, [r7, #6]
 80074d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074e0:	d108      	bne.n	80074f4 <HAL_UART_Transmit+0x6c>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d104      	bne.n	80074f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	e003      	b.n	80074fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074fc:	e030      	b.n	8007560 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2200      	movs	r2, #0
 8007506:	2180      	movs	r1, #128	@ 0x80
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f001 f82d 	bl	8008568 <UART_WaitOnFlagUntilTimeout>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2220      	movs	r2, #32
 8007518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e03d      	b.n	800759c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10b      	bne.n	800753e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	881a      	ldrh	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007532:	b292      	uxth	r2, r2
 8007534:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	3302      	adds	r3, #2
 800753a:	61bb      	str	r3, [r7, #24]
 800753c:	e007      	b.n	800754e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	781a      	ldrb	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	3301      	adds	r3, #1
 800754c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007554:	b29b      	uxth	r3, r3
 8007556:	3b01      	subs	r3, #1
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007566:	b29b      	uxth	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1c8      	bne.n	80074fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2200      	movs	r2, #0
 8007574:	2140      	movs	r1, #64	@ 0x40
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f000 fff6 	bl	8008568 <UART_WaitOnFlagUntilTimeout>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d005      	beq.n	800758e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e006      	b.n	800759c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2220      	movs	r2, #32
 8007592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	e000      	b.n	800759c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800759a:	2302      	movs	r3, #2
  }
}
 800759c:	4618      	mov	r0, r3
 800759e:	3720      	adds	r7, #32
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08a      	sub	sp, #40	@ 0x28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	4613      	mov	r3, r2
 80075b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	d137      	bne.n	800762c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <HAL_UART_Receive_DMA+0x24>
 80075c2:	88fb      	ldrh	r3, [r7, #6]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e030      	b.n	800762e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a18      	ldr	r2, [pc, #96]	@ (8007638 <HAL_UART_Receive_DMA+0x94>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d01f      	beq.n	800761c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d018      	beq.n	800761c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	613b      	str	r3, [r7, #16]
   return(result);
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	623b      	str	r3, [r7, #32]
 800760a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	69f9      	ldr	r1, [r7, #28]
 800760e:	6a3a      	ldr	r2, [r7, #32]
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	61bb      	str	r3, [r7, #24]
   return(result);
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e6      	bne.n	80075ea <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800761c:	88fb      	ldrh	r3, [r7, #6]
 800761e:	461a      	mov	r2, r3
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f001 f808 	bl	8008638 <UART_Start_Receive_DMA>
 8007628:	4603      	mov	r3, r0
 800762a:	e000      	b.n	800762e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800762c:	2302      	movs	r3, #2
  }
}
 800762e:	4618      	mov	r0, r3
 8007630:	3728      	adds	r7, #40	@ 0x28
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	40008000 	.word	0x40008000

0800763c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b0ba      	sub	sp, #232	@ 0xe8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007662:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007666:	f640 030f 	movw	r3, #2063	@ 0x80f
 800766a:	4013      	ands	r3, r2
 800766c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007670:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d11b      	bne.n	80076b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d015      	beq.n	80076b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d105      	bne.n	800769c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d009      	beq.n	80076b0 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 82e3 	beq.w	8007c6c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	4798      	blx	r3
      }
      return;
 80076ae:	e2dd      	b.n	8007c6c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80076b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 8123 	beq.w	8007900 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80076ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80076be:	4b8d      	ldr	r3, [pc, #564]	@ (80078f4 <HAL_UART_IRQHandler+0x2b8>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80076ca:	4b8b      	ldr	r3, [pc, #556]	@ (80078f8 <HAL_UART_IRQHandler+0x2bc>)
 80076cc:	4013      	ands	r3, r2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 8116 	beq.w	8007900 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d011      	beq.n	8007704 <HAL_UART_IRQHandler+0xc8>
 80076e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2201      	movs	r2, #1
 80076f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076fa:	f043 0201 	orr.w	r2, r3, #1
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d011      	beq.n	8007734 <HAL_UART_IRQHandler+0xf8>
 8007710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2202      	movs	r2, #2
 8007722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800772a:	f043 0204 	orr.w	r2, r3, #4
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d011      	beq.n	8007764 <HAL_UART_IRQHandler+0x128>
 8007740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00b      	beq.n	8007764 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2204      	movs	r2, #4
 8007752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800775a:	f043 0202 	orr.w	r2, r3, #2
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d017      	beq.n	80077a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	d105      	bne.n	8007788 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800777c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007780:	4b5c      	ldr	r3, [pc, #368]	@ (80078f4 <HAL_UART_IRQHandler+0x2b8>)
 8007782:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00b      	beq.n	80077a0 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2208      	movs	r2, #8
 800778e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007796:	f043 0208 	orr.w	r2, r3, #8
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d012      	beq.n	80077d2 <HAL_UART_IRQHandler+0x196>
 80077ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00c      	beq.n	80077d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c8:	f043 0220 	orr.w	r2, r3, #32
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 8249 	beq.w	8007c70 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d013      	beq.n	8007812 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ee:	f003 0320 	and.w	r3, r3, #32
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d105      	bne.n	8007802 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d007      	beq.n	8007812 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007818:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007826:	2b40      	cmp	r3, #64	@ 0x40
 8007828:	d005      	beq.n	8007836 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800782a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800782e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007832:	2b00      	cmp	r3, #0
 8007834:	d054      	beq.n	80078e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 ffe5 	bl	8008806 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007846:	2b40      	cmp	r3, #64	@ 0x40
 8007848:	d146      	bne.n	80078d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3308      	adds	r3, #8
 8007850:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007858:	e853 3f00 	ldrex	r3, [r3]
 800785c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007860:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007864:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007868:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3308      	adds	r3, #8
 8007872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007876:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800787a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800788e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1d9      	bne.n	800784a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800789c:	2b00      	cmp	r3, #0
 800789e:	d017      	beq.n	80078d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a6:	4a15      	ldr	r2, [pc, #84]	@ (80078fc <HAL_UART_IRQHandler+0x2c0>)
 80078a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fb fe4c 	bl	800354e <HAL_DMA_Abort_IT>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d019      	beq.n	80078f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80078ca:	4610      	mov	r0, r2
 80078cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ce:	e00f      	b.n	80078f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f9eb 	bl	8007cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d6:	e00b      	b.n	80078f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9e7 	bl	8007cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078de:	e007      	b.n	80078f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f9e3 	bl	8007cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80078ee:	e1bf      	b.n	8007c70 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f0:	bf00      	nop
    return;
 80078f2:	e1bd      	b.n	8007c70 <HAL_UART_IRQHandler+0x634>
 80078f4:	10000001 	.word	0x10000001
 80078f8:	04000120 	.word	0x04000120
 80078fc:	08008abd 	.word	0x08008abd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007904:	2b01      	cmp	r3, #1
 8007906:	f040 8153 	bne.w	8007bb0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800790a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800790e:	f003 0310 	and.w	r3, r3, #16
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 814c 	beq.w	8007bb0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8145 	beq.w	8007bb0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2210      	movs	r2, #16
 800792c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007938:	2b40      	cmp	r3, #64	@ 0x40
 800793a:	f040 80bb 	bne.w	8007ab4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800794c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 818f 	beq.w	8007c74 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800795c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007960:	429a      	cmp	r2, r3
 8007962:	f080 8187 	bcs.w	8007c74 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800796c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b00      	cmp	r3, #0
 8007980:	f040 8087 	bne.w	8007a92 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800799c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	461a      	mov	r2, r3
 80079aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80079ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80079c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1da      	bne.n	8007984 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3308      	adds	r3, #8
 80079d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079e0:	f023 0301 	bic.w	r3, r3, #1
 80079e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3308      	adds	r3, #8
 80079ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80079f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e1      	bne.n	80079ce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3308      	adds	r3, #8
 8007a10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e3      	bne.n	8007a0a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a60:	f023 0310 	bic.w	r3, r3, #16
 8007a64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e4      	bne.n	8007a50 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fb fd02 	bl	8003496 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2202      	movs	r2, #2
 8007a96:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f907 	bl	8007cc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ab2:	e0df      	b.n	8007c74 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 80d1 	beq.w	8007c78 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007ad6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 80cc 	beq.w	8007c78 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007af4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b04:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e4      	bne.n	8007ae0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	623b      	str	r3, [r7, #32]
   return(result);
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b2c:	f023 0301 	bic.w	r3, r3, #1
 8007b30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e1      	bne.n	8007b16 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	e853 3f00 	ldrex	r3, [r3]
 8007b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 0310 	bic.w	r3, r3, #16
 8007b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b88:	61fb      	str	r3, [r7, #28]
 8007b8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	69b9      	ldr	r1, [r7, #24]
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	617b      	str	r3, [r7, #20]
   return(result);
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e4      	bne.n	8007b66 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ba2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f889 	bl	8007cc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bae:	e063      	b.n	8007c78 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00e      	beq.n	8007bda <HAL_UART_IRQHandler+0x59e>
 8007bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d008      	beq.n	8007bda <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007bd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 ffb3 	bl	8008b3e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bd8:	e051      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d014      	beq.n	8007c10 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d105      	bne.n	8007bfe <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d008      	beq.n	8007c10 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d03a      	beq.n	8007c7c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	4798      	blx	r3
    }
    return;
 8007c0e:	e035      	b.n	8007c7c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d009      	beq.n	8007c30 <HAL_UART_IRQHandler+0x5f4>
 8007c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 ff5d 	bl	8008ae8 <UART_EndTransmit_IT>
    return;
 8007c2e:	e026      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d009      	beq.n	8007c50 <HAL_UART_IRQHandler+0x614>
 8007c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 ff8c 	bl	8008b66 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c4e:	e016      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d010      	beq.n	8007c7e <HAL_UART_IRQHandler+0x642>
 8007c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	da0c      	bge.n	8007c7e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 ff74 	bl	8008b52 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c6a:	e008      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
      return;
 8007c6c:	bf00      	nop
 8007c6e:	e006      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
    return;
 8007c70:	bf00      	nop
 8007c72:	e004      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
      return;
 8007c74:	bf00      	nop
 8007c76:	e002      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
      return;
 8007c78:	bf00      	nop
 8007c7a:	e000      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
    return;
 8007c7c:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007c7e:	37e8      	adds	r7, #232	@ 0xe8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cdc:	b08c      	sub	sp, #48	@ 0x30
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4baa      	ldr	r3, [pc, #680]	@ (8007fb0 <UART_SetConfig+0x2d8>)
 8007d08:	4013      	ands	r3, r2
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	6812      	ldr	r2, [r2, #0]
 8007d0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d10:	430b      	orrs	r3, r1
 8007d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	68da      	ldr	r2, [r3, #12]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a9f      	ldr	r2, [pc, #636]	@ (8007fb4 <UART_SetConfig+0x2dc>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d004      	beq.n	8007d44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d40:	4313      	orrs	r3, r2
 8007d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007d4e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	6812      	ldr	r2, [r2, #0]
 8007d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	f023 010f 	bic.w	r1, r3, #15
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a90      	ldr	r2, [pc, #576]	@ (8007fb8 <UART_SetConfig+0x2e0>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d125      	bne.n	8007dc8 <UART_SetConfig+0xf0>
 8007d7c:	4b8f      	ldr	r3, [pc, #572]	@ (8007fbc <UART_SetConfig+0x2e4>)
 8007d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d81a      	bhi.n	8007dc0 <UART_SetConfig+0xe8>
 8007d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d90 <UART_SetConfig+0xb8>)
 8007d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d90:	08007da1 	.word	0x08007da1
 8007d94:	08007db1 	.word	0x08007db1
 8007d98:	08007da9 	.word	0x08007da9
 8007d9c:	08007db9 	.word	0x08007db9
 8007da0:	2301      	movs	r3, #1
 8007da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007da6:	e116      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007da8:	2302      	movs	r3, #2
 8007daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dae:	e112      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007db0:	2304      	movs	r3, #4
 8007db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007db6:	e10e      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007db8:	2308      	movs	r3, #8
 8007dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dbe:	e10a      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dc6:	e106      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a7c      	ldr	r2, [pc, #496]	@ (8007fc0 <UART_SetConfig+0x2e8>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d138      	bne.n	8007e44 <UART_SetConfig+0x16c>
 8007dd2:	4b7a      	ldr	r3, [pc, #488]	@ (8007fbc <UART_SetConfig+0x2e4>)
 8007dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dd8:	f003 030c 	and.w	r3, r3, #12
 8007ddc:	2b0c      	cmp	r3, #12
 8007dde:	d82d      	bhi.n	8007e3c <UART_SetConfig+0x164>
 8007de0:	a201      	add	r2, pc, #4	@ (adr r2, 8007de8 <UART_SetConfig+0x110>)
 8007de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de6:	bf00      	nop
 8007de8:	08007e1d 	.word	0x08007e1d
 8007dec:	08007e3d 	.word	0x08007e3d
 8007df0:	08007e3d 	.word	0x08007e3d
 8007df4:	08007e3d 	.word	0x08007e3d
 8007df8:	08007e2d 	.word	0x08007e2d
 8007dfc:	08007e3d 	.word	0x08007e3d
 8007e00:	08007e3d 	.word	0x08007e3d
 8007e04:	08007e3d 	.word	0x08007e3d
 8007e08:	08007e25 	.word	0x08007e25
 8007e0c:	08007e3d 	.word	0x08007e3d
 8007e10:	08007e3d 	.word	0x08007e3d
 8007e14:	08007e3d 	.word	0x08007e3d
 8007e18:	08007e35 	.word	0x08007e35
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e22:	e0d8      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007e24:	2302      	movs	r3, #2
 8007e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e2a:	e0d4      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007e2c:	2304      	movs	r3, #4
 8007e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e32:	e0d0      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007e34:	2308      	movs	r3, #8
 8007e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e3a:	e0cc      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007e3c:	2310      	movs	r3, #16
 8007e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e42:	e0c8      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a5e      	ldr	r2, [pc, #376]	@ (8007fc4 <UART_SetConfig+0x2ec>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d125      	bne.n	8007e9a <UART_SetConfig+0x1c2>
 8007e4e:	4b5b      	ldr	r3, [pc, #364]	@ (8007fbc <UART_SetConfig+0x2e4>)
 8007e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e58:	2b30      	cmp	r3, #48	@ 0x30
 8007e5a:	d016      	beq.n	8007e8a <UART_SetConfig+0x1b2>
 8007e5c:	2b30      	cmp	r3, #48	@ 0x30
 8007e5e:	d818      	bhi.n	8007e92 <UART_SetConfig+0x1ba>
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d00a      	beq.n	8007e7a <UART_SetConfig+0x1a2>
 8007e64:	2b20      	cmp	r3, #32
 8007e66:	d814      	bhi.n	8007e92 <UART_SetConfig+0x1ba>
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <UART_SetConfig+0x19a>
 8007e6c:	2b10      	cmp	r3, #16
 8007e6e:	d008      	beq.n	8007e82 <UART_SetConfig+0x1aa>
 8007e70:	e00f      	b.n	8007e92 <UART_SetConfig+0x1ba>
 8007e72:	2300      	movs	r3, #0
 8007e74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e78:	e0ad      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e80:	e0a9      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007e82:	2304      	movs	r3, #4
 8007e84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e88:	e0a5      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007e8a:	2308      	movs	r3, #8
 8007e8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e90:	e0a1      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007e92:	2310      	movs	r3, #16
 8007e94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e98:	e09d      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a4a      	ldr	r2, [pc, #296]	@ (8007fc8 <UART_SetConfig+0x2f0>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d125      	bne.n	8007ef0 <UART_SetConfig+0x218>
 8007ea4:	4b45      	ldr	r3, [pc, #276]	@ (8007fbc <UART_SetConfig+0x2e4>)
 8007ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eaa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007eae:	2bc0      	cmp	r3, #192	@ 0xc0
 8007eb0:	d016      	beq.n	8007ee0 <UART_SetConfig+0x208>
 8007eb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007eb4:	d818      	bhi.n	8007ee8 <UART_SetConfig+0x210>
 8007eb6:	2b80      	cmp	r3, #128	@ 0x80
 8007eb8:	d00a      	beq.n	8007ed0 <UART_SetConfig+0x1f8>
 8007eba:	2b80      	cmp	r3, #128	@ 0x80
 8007ebc:	d814      	bhi.n	8007ee8 <UART_SetConfig+0x210>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d002      	beq.n	8007ec8 <UART_SetConfig+0x1f0>
 8007ec2:	2b40      	cmp	r3, #64	@ 0x40
 8007ec4:	d008      	beq.n	8007ed8 <UART_SetConfig+0x200>
 8007ec6:	e00f      	b.n	8007ee8 <UART_SetConfig+0x210>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ece:	e082      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ed6:	e07e      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007ed8:	2304      	movs	r3, #4
 8007eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ede:	e07a      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007ee0:	2308      	movs	r3, #8
 8007ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ee6:	e076      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007ee8:	2310      	movs	r3, #16
 8007eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eee:	e072      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a35      	ldr	r2, [pc, #212]	@ (8007fcc <UART_SetConfig+0x2f4>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d12a      	bne.n	8007f50 <UART_SetConfig+0x278>
 8007efa:	4b30      	ldr	r3, [pc, #192]	@ (8007fbc <UART_SetConfig+0x2e4>)
 8007efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f08:	d01a      	beq.n	8007f40 <UART_SetConfig+0x268>
 8007f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f0e:	d81b      	bhi.n	8007f48 <UART_SetConfig+0x270>
 8007f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f14:	d00c      	beq.n	8007f30 <UART_SetConfig+0x258>
 8007f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f1a:	d815      	bhi.n	8007f48 <UART_SetConfig+0x270>
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <UART_SetConfig+0x250>
 8007f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f24:	d008      	beq.n	8007f38 <UART_SetConfig+0x260>
 8007f26:	e00f      	b.n	8007f48 <UART_SetConfig+0x270>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f2e:	e052      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007f30:	2302      	movs	r3, #2
 8007f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f36:	e04e      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007f38:	2304      	movs	r3, #4
 8007f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f3e:	e04a      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007f40:	2308      	movs	r3, #8
 8007f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f46:	e046      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007f48:	2310      	movs	r3, #16
 8007f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f4e:	e042      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a17      	ldr	r2, [pc, #92]	@ (8007fb4 <UART_SetConfig+0x2dc>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d13a      	bne.n	8007fd0 <UART_SetConfig+0x2f8>
 8007f5a:	4b18      	ldr	r3, [pc, #96]	@ (8007fbc <UART_SetConfig+0x2e4>)
 8007f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f68:	d01a      	beq.n	8007fa0 <UART_SetConfig+0x2c8>
 8007f6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f6e:	d81b      	bhi.n	8007fa8 <UART_SetConfig+0x2d0>
 8007f70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f74:	d00c      	beq.n	8007f90 <UART_SetConfig+0x2b8>
 8007f76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f7a:	d815      	bhi.n	8007fa8 <UART_SetConfig+0x2d0>
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <UART_SetConfig+0x2b0>
 8007f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f84:	d008      	beq.n	8007f98 <UART_SetConfig+0x2c0>
 8007f86:	e00f      	b.n	8007fa8 <UART_SetConfig+0x2d0>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8e:	e022      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007f90:	2302      	movs	r3, #2
 8007f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f96:	e01e      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007f98:	2304      	movs	r3, #4
 8007f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f9e:	e01a      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007fa0:	2308      	movs	r3, #8
 8007fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa6:	e016      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007fa8:	2310      	movs	r3, #16
 8007faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fae:	e012      	b.n	8007fd6 <UART_SetConfig+0x2fe>
 8007fb0:	cfff69f3 	.word	0xcfff69f3
 8007fb4:	40008000 	.word	0x40008000
 8007fb8:	40013800 	.word	0x40013800
 8007fbc:	40021000 	.word	0x40021000
 8007fc0:	40004400 	.word	0x40004400
 8007fc4:	40004800 	.word	0x40004800
 8007fc8:	40004c00 	.word	0x40004c00
 8007fcc:	40005000 	.word	0x40005000
 8007fd0:	2310      	movs	r3, #16
 8007fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4aae      	ldr	r2, [pc, #696]	@ (8008294 <UART_SetConfig+0x5bc>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	f040 8097 	bne.w	8008110 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007fe2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007fe6:	2b08      	cmp	r3, #8
 8007fe8:	d823      	bhi.n	8008032 <UART_SetConfig+0x35a>
 8007fea:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff0 <UART_SetConfig+0x318>)
 8007fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff0:	08008015 	.word	0x08008015
 8007ff4:	08008033 	.word	0x08008033
 8007ff8:	0800801d 	.word	0x0800801d
 8007ffc:	08008033 	.word	0x08008033
 8008000:	08008023 	.word	0x08008023
 8008004:	08008033 	.word	0x08008033
 8008008:	08008033 	.word	0x08008033
 800800c:	08008033 	.word	0x08008033
 8008010:	0800802b 	.word	0x0800802b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008014:	f7fd fee6 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8008018:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800801a:	e010      	b.n	800803e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800801c:	4b9e      	ldr	r3, [pc, #632]	@ (8008298 <UART_SetConfig+0x5c0>)
 800801e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008020:	e00d      	b.n	800803e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008022:	f7fd fe47 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8008026:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008028:	e009      	b.n	800803e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800802a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800802e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008030:	e005      	b.n	800803e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800803c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800803e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8130 	beq.w	80082a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804a:	4a94      	ldr	r2, [pc, #592]	@ (800829c <UART_SetConfig+0x5c4>)
 800804c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008050:	461a      	mov	r2, r3
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008054:	fbb3 f3f2 	udiv	r3, r3, r2
 8008058:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	4613      	mov	r3, r2
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	4413      	add	r3, r2
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	429a      	cmp	r2, r3
 8008068:	d305      	bcc.n	8008076 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	429a      	cmp	r2, r3
 8008074:	d903      	bls.n	800807e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800807c:	e113      	b.n	80082a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800807e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008080:	2200      	movs	r2, #0
 8008082:	60bb      	str	r3, [r7, #8]
 8008084:	60fa      	str	r2, [r7, #12]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808a:	4a84      	ldr	r2, [pc, #528]	@ (800829c <UART_SetConfig+0x5c4>)
 800808c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008090:	b29b      	uxth	r3, r3
 8008092:	2200      	movs	r2, #0
 8008094:	603b      	str	r3, [r7, #0]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800809c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080a0:	f7f8 f8b4 	bl	800020c <__aeabi_uldivmod>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4610      	mov	r0, r2
 80080aa:	4619      	mov	r1, r3
 80080ac:	f04f 0200 	mov.w	r2, #0
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	020b      	lsls	r3, r1, #8
 80080b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080ba:	0202      	lsls	r2, r0, #8
 80080bc:	6979      	ldr	r1, [r7, #20]
 80080be:	6849      	ldr	r1, [r1, #4]
 80080c0:	0849      	lsrs	r1, r1, #1
 80080c2:	2000      	movs	r0, #0
 80080c4:	460c      	mov	r4, r1
 80080c6:	4605      	mov	r5, r0
 80080c8:	eb12 0804 	adds.w	r8, r2, r4
 80080cc:	eb43 0905 	adc.w	r9, r3, r5
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	469a      	mov	sl, r3
 80080d8:	4693      	mov	fp, r2
 80080da:	4652      	mov	r2, sl
 80080dc:	465b      	mov	r3, fp
 80080de:	4640      	mov	r0, r8
 80080e0:	4649      	mov	r1, r9
 80080e2:	f7f8 f893 	bl	800020c <__aeabi_uldivmod>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	4613      	mov	r3, r2
 80080ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080f4:	d308      	bcc.n	8008108 <UART_SetConfig+0x430>
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080fc:	d204      	bcs.n	8008108 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6a3a      	ldr	r2, [r7, #32]
 8008104:	60da      	str	r2, [r3, #12]
 8008106:	e0ce      	b.n	80082a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800810e:	e0ca      	b.n	80082a6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008118:	d166      	bne.n	80081e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800811a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800811e:	2b08      	cmp	r3, #8
 8008120:	d827      	bhi.n	8008172 <UART_SetConfig+0x49a>
 8008122:	a201      	add	r2, pc, #4	@ (adr r2, 8008128 <UART_SetConfig+0x450>)
 8008124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008128:	0800814d 	.word	0x0800814d
 800812c:	08008155 	.word	0x08008155
 8008130:	0800815d 	.word	0x0800815d
 8008134:	08008173 	.word	0x08008173
 8008138:	08008163 	.word	0x08008163
 800813c:	08008173 	.word	0x08008173
 8008140:	08008173 	.word	0x08008173
 8008144:	08008173 	.word	0x08008173
 8008148:	0800816b 	.word	0x0800816b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800814c:	f7fd fe4a 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8008150:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008152:	e014      	b.n	800817e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008154:	f7fd fe5c 	bl	8005e10 <HAL_RCC_GetPCLK2Freq>
 8008158:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800815a:	e010      	b.n	800817e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800815c:	4b4e      	ldr	r3, [pc, #312]	@ (8008298 <UART_SetConfig+0x5c0>)
 800815e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008160:	e00d      	b.n	800817e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008162:	f7fd fda7 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8008166:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008168:	e009      	b.n	800817e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800816a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800816e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008170:	e005      	b.n	800817e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800817c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800817e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 8090 	beq.w	80082a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800818a:	4a44      	ldr	r2, [pc, #272]	@ (800829c <UART_SetConfig+0x5c4>)
 800818c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008190:	461a      	mov	r2, r3
 8008192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008194:	fbb3 f3f2 	udiv	r3, r3, r2
 8008198:	005a      	lsls	r2, r3, #1
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	085b      	lsrs	r3, r3, #1
 80081a0:	441a      	add	r2, r3
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	2b0f      	cmp	r3, #15
 80081b0:	d916      	bls.n	80081e0 <UART_SetConfig+0x508>
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081b8:	d212      	bcs.n	80081e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	f023 030f 	bic.w	r3, r3, #15
 80081c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	085b      	lsrs	r3, r3, #1
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	f003 0307 	and.w	r3, r3, #7
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	8bfb      	ldrh	r3, [r7, #30]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	8bfa      	ldrh	r2, [r7, #30]
 80081dc:	60da      	str	r2, [r3, #12]
 80081de:	e062      	b.n	80082a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081e6:	e05e      	b.n	80082a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081ec:	2b08      	cmp	r3, #8
 80081ee:	d828      	bhi.n	8008242 <UART_SetConfig+0x56a>
 80081f0:	a201      	add	r2, pc, #4	@ (adr r2, 80081f8 <UART_SetConfig+0x520>)
 80081f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f6:	bf00      	nop
 80081f8:	0800821d 	.word	0x0800821d
 80081fc:	08008225 	.word	0x08008225
 8008200:	0800822d 	.word	0x0800822d
 8008204:	08008243 	.word	0x08008243
 8008208:	08008233 	.word	0x08008233
 800820c:	08008243 	.word	0x08008243
 8008210:	08008243 	.word	0x08008243
 8008214:	08008243 	.word	0x08008243
 8008218:	0800823b 	.word	0x0800823b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800821c:	f7fd fde2 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8008220:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008222:	e014      	b.n	800824e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008224:	f7fd fdf4 	bl	8005e10 <HAL_RCC_GetPCLK2Freq>
 8008228:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800822a:	e010      	b.n	800824e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800822c:	4b1a      	ldr	r3, [pc, #104]	@ (8008298 <UART_SetConfig+0x5c0>)
 800822e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008230:	e00d      	b.n	800824e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008232:	f7fd fd3f 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8008236:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008238:	e009      	b.n	800824e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800823a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800823e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008240:	e005      	b.n	800824e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800824c:	bf00      	nop
    }

    if (pclk != 0U)
 800824e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008250:	2b00      	cmp	r3, #0
 8008252:	d028      	beq.n	80082a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008258:	4a10      	ldr	r2, [pc, #64]	@ (800829c <UART_SetConfig+0x5c4>)
 800825a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800825e:	461a      	mov	r2, r3
 8008260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008262:	fbb3 f2f2 	udiv	r2, r3, r2
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	085b      	lsrs	r3, r3, #1
 800826c:	441a      	add	r2, r3
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	fbb2 f3f3 	udiv	r3, r2, r3
 8008276:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	2b0f      	cmp	r3, #15
 800827c:	d910      	bls.n	80082a0 <UART_SetConfig+0x5c8>
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008284:	d20c      	bcs.n	80082a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	b29a      	uxth	r2, r3
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	60da      	str	r2, [r3, #12]
 8008290:	e009      	b.n	80082a6 <UART_SetConfig+0x5ce>
 8008292:	bf00      	nop
 8008294:	40008000 	.word	0x40008000
 8008298:	00f42400 	.word	0x00f42400
 800829c:	0800d018 	.word	0x0800d018
      }
      else
      {
        ret = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2200      	movs	r2, #0
 80082ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2200      	movs	r2, #0
 80082c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80082c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3730      	adds	r7, #48	@ 0x30
 80082ca:	46bd      	mov	sp, r7
 80082cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080082d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082dc:	f003 0308 	and.w	r3, r3, #8
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00a      	beq.n	80082fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00a      	beq.n	800833e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008342:	f003 0304 	and.w	r3, r3, #4
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008364:	f003 0310 	and.w	r3, r3, #16
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00a      	beq.n	8008382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008386:	f003 0320 	and.w	r3, r3, #32
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00a      	beq.n	80083a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01a      	beq.n	80083e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083ce:	d10a      	bne.n	80083e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00a      	beq.n	8008408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	605a      	str	r2, [r3, #4]
  }
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b098      	sub	sp, #96	@ 0x60
 8008418:	af02      	add	r7, sp, #8
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008424:	f7f9 f9f8 	bl	8001818 <HAL_GetTick>
 8008428:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0308 	and.w	r3, r3, #8
 8008434:	2b08      	cmp	r3, #8
 8008436:	d12f      	bne.n	8008498 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008438:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008440:	2200      	movs	r2, #0
 8008442:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f88e 	bl	8008568 <UART_WaitOnFlagUntilTimeout>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d022      	beq.n	8008498 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845a:	e853 3f00 	ldrex	r3, [r3]
 800845e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008466:	653b      	str	r3, [r7, #80]	@ 0x50
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	461a      	mov	r2, r3
 800846e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008470:	647b      	str	r3, [r7, #68]	@ 0x44
 8008472:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008474:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008478:	e841 2300 	strex	r3, r2, [r1]
 800847c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800847e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e6      	bne.n	8008452 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2220      	movs	r2, #32
 8008488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e063      	b.n	8008560 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0304 	and.w	r3, r3, #4
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	d149      	bne.n	800853a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084ae:	2200      	movs	r2, #0
 80084b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f857 	bl	8008568 <UART_WaitOnFlagUntilTimeout>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d03c      	beq.n	800853a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	623b      	str	r3, [r7, #32]
   return(result);
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084de:	633b      	str	r3, [r7, #48]	@ 0x30
 80084e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084e6:	e841 2300 	strex	r3, r2, [r1]
 80084ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1e6      	bne.n	80084c0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3308      	adds	r3, #8
 80084f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	60fb      	str	r3, [r7, #12]
   return(result);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f023 0301 	bic.w	r3, r3, #1
 8008508:	64bb      	str	r3, [r7, #72]	@ 0x48
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3308      	adds	r3, #8
 8008510:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008512:	61fa      	str	r2, [r7, #28]
 8008514:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	69b9      	ldr	r1, [r7, #24]
 8008518:	69fa      	ldr	r2, [r7, #28]
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	617b      	str	r3, [r7, #20]
   return(result);
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e5      	bne.n	80084f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2220      	movs	r2, #32
 800852a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e012      	b.n	8008560 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2220      	movs	r2, #32
 800853e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3758      	adds	r7, #88	@ 0x58
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	4613      	mov	r3, r2
 8008576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008578:	e049      	b.n	800860e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008580:	d045      	beq.n	800860e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008582:	f7f9 f949 	bl	8001818 <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	429a      	cmp	r2, r3
 8008590:	d302      	bcc.n	8008598 <UART_WaitOnFlagUntilTimeout+0x30>
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e048      	b.n	800862e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0304 	and.w	r3, r3, #4
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d031      	beq.n	800860e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	f003 0308 	and.w	r3, r3, #8
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	d110      	bne.n	80085da <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2208      	movs	r2, #8
 80085be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 f920 	bl	8008806 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2208      	movs	r2, #8
 80085ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e029      	b.n	800862e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085e8:	d111      	bne.n	800860e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 f906 	bl	8008806 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e00f      	b.n	800862e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69da      	ldr	r2, [r3, #28]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	4013      	ands	r3, r2
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	429a      	cmp	r2, r3
 800861c:	bf0c      	ite	eq
 800861e:	2301      	moveq	r3, #1
 8008620:	2300      	movne	r3, #0
 8008622:	b2db      	uxtb	r3, r3
 8008624:	461a      	mov	r2, r3
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	429a      	cmp	r2, r3
 800862a:	d0a6      	beq.n	800857a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b096      	sub	sp, #88	@ 0x58
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	4613      	mov	r3, r2
 8008644:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	88fa      	ldrh	r2, [r7, #6]
 8008650:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2222      	movs	r2, #34	@ 0x22
 8008660:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800866a:	2b00      	cmp	r3, #0
 800866c:	d02d      	beq.n	80086ca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008674:	4a40      	ldr	r2, [pc, #256]	@ (8008778 <UART_Start_Receive_DMA+0x140>)
 8008676:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800867e:	4a3f      	ldr	r2, [pc, #252]	@ (800877c <UART_Start_Receive_DMA+0x144>)
 8008680:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008688:	4a3d      	ldr	r2, [pc, #244]	@ (8008780 <UART_Start_Receive_DMA+0x148>)
 800868a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008692:	2200      	movs	r2, #0
 8008694:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3324      	adds	r3, #36	@ 0x24
 80086a2:	4619      	mov	r1, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086a8:	461a      	mov	r2, r3
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	f7fa fe78 	bl	80033a0 <HAL_DMA_Start_IT>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d009      	beq.n	80086ca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2210      	movs	r2, #16
 80086ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2220      	movs	r2, #32
 80086c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e051      	b.n	800876e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d018      	beq.n	8008704 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	461a      	mov	r2, r3
 80086ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086f2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80086fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e6      	bne.n	80086d2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3308      	adds	r3, #8
 800870a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870e:	e853 3f00 	ldrex	r3, [r3]
 8008712:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008716:	f043 0301 	orr.w	r3, r3, #1
 800871a:	653b      	str	r3, [r7, #80]	@ 0x50
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3308      	adds	r3, #8
 8008722:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008724:	637a      	str	r2, [r7, #52]	@ 0x34
 8008726:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008728:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800872a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800872c:	e841 2300 	strex	r3, r2, [r1]
 8008730:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e5      	bne.n	8008704 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3308      	adds	r3, #8
 800873e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	e853 3f00 	ldrex	r3, [r3]
 8008746:	613b      	str	r3, [r7, #16]
   return(result);
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800874e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3308      	adds	r3, #8
 8008756:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008758:	623a      	str	r2, [r7, #32]
 800875a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875c:	69f9      	ldr	r1, [r7, #28]
 800875e:	6a3a      	ldr	r2, [r7, #32]
 8008760:	e841 2300 	strex	r3, r2, [r1]
 8008764:	61bb      	str	r3, [r7, #24]
   return(result);
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e5      	bne.n	8008738 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3758      	adds	r7, #88	@ 0x58
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	080088d3 	.word	0x080088d3
 800877c:	080089ff 	.word	0x080089ff
 8008780:	08008a3d 	.word	0x08008a3d

08008784 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008784:	b480      	push	{r7}
 8008786:	b08f      	sub	sp, #60	@ 0x3c
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	e853 3f00 	ldrex	r3, [r3]
 8008798:	61fb      	str	r3, [r7, #28]
   return(result);
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80087a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087ac:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087b2:	e841 2300 	strex	r3, r2, [r1]
 80087b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1e6      	bne.n	800878c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3308      	adds	r3, #8
 80087c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	e853 3f00 	ldrex	r3, [r3]
 80087cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80087d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3308      	adds	r3, #8
 80087dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087de:	61ba      	str	r2, [r7, #24]
 80087e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e2:	6979      	ldr	r1, [r7, #20]
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	e841 2300 	strex	r3, r2, [r1]
 80087ea:	613b      	str	r3, [r7, #16]
   return(result);
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1e5      	bne.n	80087be <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2220      	movs	r2, #32
 80087f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80087fa:	bf00      	nop
 80087fc:	373c      	adds	r7, #60	@ 0x3c
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008806:	b480      	push	{r7}
 8008808:	b095      	sub	sp, #84	@ 0x54
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800881c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800882c:	643b      	str	r3, [r7, #64]	@ 0x40
 800882e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008832:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008834:	e841 2300 	strex	r3, r2, [r1]
 8008838:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800883a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e6      	bne.n	800880e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3308      	adds	r3, #8
 8008846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	e853 3f00 	ldrex	r3, [r3]
 800884e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008856:	f023 0301 	bic.w	r3, r3, #1
 800885a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3308      	adds	r3, #8
 8008862:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008864:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008866:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008868:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800886a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800886c:	e841 2300 	strex	r3, r2, [r1]
 8008870:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1e3      	bne.n	8008840 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800887c:	2b01      	cmp	r3, #1
 800887e:	d118      	bne.n	80088b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	e853 3f00 	ldrex	r3, [r3]
 800888c:	60bb      	str	r3, [r7, #8]
   return(result);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	f023 0310 	bic.w	r3, r3, #16
 8008894:	647b      	str	r3, [r7, #68]	@ 0x44
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800889e:	61bb      	str	r3, [r7, #24]
 80088a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a2:	6979      	ldr	r1, [r7, #20]
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	e841 2300 	strex	r3, r2, [r1]
 80088aa:	613b      	str	r3, [r7, #16]
   return(result);
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1e6      	bne.n	8008880 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2220      	movs	r2, #32
 80088b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80088c6:	bf00      	nop
 80088c8:	3754      	adds	r7, #84	@ 0x54
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b09c      	sub	sp, #112	@ 0x70
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088de:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0320 	and.w	r3, r3, #32
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d171      	bne.n	80089d2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80088ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088f0:	2200      	movs	r2, #0
 80088f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088fe:	e853 3f00 	ldrex	r3, [r3]
 8008902:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008904:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008906:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800890a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800890c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	461a      	mov	r2, r3
 8008912:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008914:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008916:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008918:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800891a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800891c:	e841 2300 	strex	r3, r2, [r1]
 8008920:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e6      	bne.n	80088f6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008928:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3308      	adds	r3, #8
 800892e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008932:	e853 3f00 	ldrex	r3, [r3]
 8008936:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800893a:	f023 0301 	bic.w	r3, r3, #1
 800893e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3308      	adds	r3, #8
 8008946:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008948:	647a      	str	r2, [r7, #68]	@ 0x44
 800894a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800894e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008950:	e841 2300 	strex	r3, r2, [r1]
 8008954:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1e5      	bne.n	8008928 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800895c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3308      	adds	r3, #8
 8008962:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	623b      	str	r3, [r7, #32]
   return(result);
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008972:	663b      	str	r3, [r7, #96]	@ 0x60
 8008974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3308      	adds	r3, #8
 800897a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800897c:	633a      	str	r2, [r7, #48]	@ 0x30
 800897e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800898a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e5      	bne.n	800895c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008992:	2220      	movs	r2, #32
 8008994:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800899a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800899c:	2b01      	cmp	r3, #1
 800899e:	d118      	bne.n	80089d2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f023 0310 	bic.w	r3, r3, #16
 80089b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089be:	61fb      	str	r3, [r7, #28]
 80089c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c2:	69b9      	ldr	r1, [r7, #24]
 80089c4:	69fa      	ldr	r2, [r7, #28]
 80089c6:	e841 2300 	strex	r3, r2, [r1]
 80089ca:	617b      	str	r3, [r7, #20]
   return(result);
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1e6      	bne.n	80089a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089d4:	2200      	movs	r2, #0
 80089d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d107      	bne.n	80089f0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089e6:	4619      	mov	r1, r3
 80089e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80089ea:	f7ff f969 	bl	8007cc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089ee:	e002      	b.n	80089f6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80089f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80089f2:	f7f8 f8db 	bl	8000bac <HAL_UART_RxCpltCallback>
}
 80089f6:	bf00      	nop
 80089f8:	3770      	adds	r7, #112	@ 0x70
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d109      	bne.n	8008a2e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a20:	085b      	lsrs	r3, r3, #1
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	4619      	mov	r1, r3
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f7ff f94a 	bl	8007cc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a2c:	e002      	b.n	8008a34 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f7ff f932 	bl	8007c98 <HAL_UART_RxHalfCpltCallback>
}
 8008a34:	bf00      	nop
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a48:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a50:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a58:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a64:	2b80      	cmp	r3, #128	@ 0x80
 8008a66:	d109      	bne.n	8008a7c <UART_DMAError+0x40>
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	2b21      	cmp	r3, #33	@ 0x21
 8008a6c:	d106      	bne.n	8008a7c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008a76:	6978      	ldr	r0, [r7, #20]
 8008a78:	f7ff fe84 	bl	8008784 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a86:	2b40      	cmp	r3, #64	@ 0x40
 8008a88:	d109      	bne.n	8008a9e <UART_DMAError+0x62>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2b22      	cmp	r3, #34	@ 0x22
 8008a8e:	d106      	bne.n	8008a9e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008a98:	6978      	ldr	r0, [r7, #20]
 8008a9a:	f7ff feb4 	bl	8008806 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aa4:	f043 0210 	orr.w	r2, r3, #16
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008aae:	6978      	ldr	r0, [r7, #20]
 8008ab0:	f7ff f8fc 	bl	8007cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ab4:	bf00      	nop
 8008ab6:	3718      	adds	r7, #24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff f8e6 	bl	8007cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ae0:	bf00      	nop
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b088      	sub	sp, #32
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b04:	61fb      	str	r3, [r7, #28]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	61bb      	str	r3, [r7, #24]
 8008b10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6979      	ldr	r1, [r7, #20]
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e6      	bne.n	8008af0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7ff f8a7 	bl	8007c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b36:	bf00      	nop
 8008b38:	3720      	adds	r7, #32
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b083      	sub	sp, #12
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b46:	bf00      	nop
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008b5a:	bf00      	nop
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008b6e:	bf00      	nop
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d101      	bne.n	8008b90 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	e027      	b.n	8008be0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2224      	movs	r2, #36	@ 0x24
 8008b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f022 0201 	bic.w	r2, r2, #1
 8008bb6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008bbe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2220      	movs	r2, #32
 8008bd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c00:	2302      	movs	r3, #2
 8008c02:	e02d      	b.n	8008c60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2224      	movs	r2, #36	@ 0x24
 8008c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 0201 	bic.w	r2, r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f84f 	bl	8008ce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d101      	bne.n	8008c80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	e02d      	b.n	8008cdc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2224      	movs	r2, #36	@ 0x24
 8008c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f022 0201 	bic.w	r2, r2, #1
 8008ca6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f811 	bl	8008ce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d108      	bne.n	8008d06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d04:	e031      	b.n	8008d6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d06:	2308      	movs	r3, #8
 8008d08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d0a:	2308      	movs	r3, #8
 8008d0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	0e5b      	lsrs	r3, r3, #25
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	f003 0307 	and.w	r3, r3, #7
 8008d1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	0f5b      	lsrs	r3, r3, #29
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	f003 0307 	and.w	r3, r3, #7
 8008d2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
 8008d30:	7b3a      	ldrb	r2, [r7, #12]
 8008d32:	4911      	ldr	r1, [pc, #68]	@ (8008d78 <UARTEx_SetNbDataToProcess+0x94>)
 8008d34:	5c8a      	ldrb	r2, [r1, r2]
 8008d36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d3a:	7b3a      	ldrb	r2, [r7, #12]
 8008d3c:	490f      	ldr	r1, [pc, #60]	@ (8008d7c <UARTEx_SetNbDataToProcess+0x98>)
 8008d3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d40:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	7b7a      	ldrb	r2, [r7, #13]
 8008d50:	4909      	ldr	r1, [pc, #36]	@ (8008d78 <UARTEx_SetNbDataToProcess+0x94>)
 8008d52:	5c8a      	ldrb	r2, [r1, r2]
 8008d54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d58:	7b7a      	ldrb	r2, [r7, #13]
 8008d5a:	4908      	ldr	r1, [pc, #32]	@ (8008d7c <UARTEx_SetNbDataToProcess+0x98>)
 8008d5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008d6a:	bf00      	nop
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	0800d030 	.word	0x0800d030
 8008d7c:	0800d038 	.word	0x0800d038

08008d80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d80:	b084      	sub	sp, #16
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	f107 001c 	add.w	r0, r7, #28
 8008d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 fa1c 	bl	800a1dc <USB_CoreReset>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	639a      	str	r2, [r3, #56]	@ 0x38
 8008dba:	e005      	b.n	8008dc8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008dd4:	b004      	add	sp, #16
 8008dd6:	4770      	bx	lr

08008dd8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	4613      	mov	r3, r2
 8008de4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008de6:	79fb      	ldrb	r3, [r7, #7]
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d165      	bne.n	8008eb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	4a3e      	ldr	r2, [pc, #248]	@ (8008ee8 <USB_SetTurnaroundTime+0x110>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d906      	bls.n	8008e02 <USB_SetTurnaroundTime+0x2a>
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	4a3d      	ldr	r2, [pc, #244]	@ (8008eec <USB_SetTurnaroundTime+0x114>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d202      	bcs.n	8008e02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008dfc:	230f      	movs	r3, #15
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	e05c      	b.n	8008ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	4a39      	ldr	r2, [pc, #228]	@ (8008eec <USB_SetTurnaroundTime+0x114>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d306      	bcc.n	8008e18 <USB_SetTurnaroundTime+0x40>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	4a38      	ldr	r2, [pc, #224]	@ (8008ef0 <USB_SetTurnaroundTime+0x118>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d202      	bcs.n	8008e18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008e12:	230e      	movs	r3, #14
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	e051      	b.n	8008ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	4a35      	ldr	r2, [pc, #212]	@ (8008ef0 <USB_SetTurnaroundTime+0x118>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d306      	bcc.n	8008e2e <USB_SetTurnaroundTime+0x56>
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4a34      	ldr	r2, [pc, #208]	@ (8008ef4 <USB_SetTurnaroundTime+0x11c>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d202      	bcs.n	8008e2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008e28:	230d      	movs	r3, #13
 8008e2a:	617b      	str	r3, [r7, #20]
 8008e2c:	e046      	b.n	8008ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	4a30      	ldr	r2, [pc, #192]	@ (8008ef4 <USB_SetTurnaroundTime+0x11c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d306      	bcc.n	8008e44 <USB_SetTurnaroundTime+0x6c>
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	4a2f      	ldr	r2, [pc, #188]	@ (8008ef8 <USB_SetTurnaroundTime+0x120>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d802      	bhi.n	8008e44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008e3e:	230c      	movs	r3, #12
 8008e40:	617b      	str	r3, [r7, #20]
 8008e42:	e03b      	b.n	8008ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	4a2c      	ldr	r2, [pc, #176]	@ (8008ef8 <USB_SetTurnaroundTime+0x120>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d906      	bls.n	8008e5a <USB_SetTurnaroundTime+0x82>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	4a2b      	ldr	r2, [pc, #172]	@ (8008efc <USB_SetTurnaroundTime+0x124>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d802      	bhi.n	8008e5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008e54:	230b      	movs	r3, #11
 8008e56:	617b      	str	r3, [r7, #20]
 8008e58:	e030      	b.n	8008ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	4a27      	ldr	r2, [pc, #156]	@ (8008efc <USB_SetTurnaroundTime+0x124>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d906      	bls.n	8008e70 <USB_SetTurnaroundTime+0x98>
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	4a26      	ldr	r2, [pc, #152]	@ (8008f00 <USB_SetTurnaroundTime+0x128>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d802      	bhi.n	8008e70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008e6a:	230a      	movs	r3, #10
 8008e6c:	617b      	str	r3, [r7, #20]
 8008e6e:	e025      	b.n	8008ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	4a23      	ldr	r2, [pc, #140]	@ (8008f00 <USB_SetTurnaroundTime+0x128>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d906      	bls.n	8008e86 <USB_SetTurnaroundTime+0xae>
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	4a22      	ldr	r2, [pc, #136]	@ (8008f04 <USB_SetTurnaroundTime+0x12c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d202      	bcs.n	8008e86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008e80:	2309      	movs	r3, #9
 8008e82:	617b      	str	r3, [r7, #20]
 8008e84:	e01a      	b.n	8008ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	4a1e      	ldr	r2, [pc, #120]	@ (8008f04 <USB_SetTurnaroundTime+0x12c>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d306      	bcc.n	8008e9c <USB_SetTurnaroundTime+0xc4>
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	4a1d      	ldr	r2, [pc, #116]	@ (8008f08 <USB_SetTurnaroundTime+0x130>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d802      	bhi.n	8008e9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008e96:	2308      	movs	r3, #8
 8008e98:	617b      	str	r3, [r7, #20]
 8008e9a:	e00f      	b.n	8008ebc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8008f08 <USB_SetTurnaroundTime+0x130>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d906      	bls.n	8008eb2 <USB_SetTurnaroundTime+0xda>
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	4a19      	ldr	r2, [pc, #100]	@ (8008f0c <USB_SetTurnaroundTime+0x134>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d202      	bcs.n	8008eb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008eac:	2307      	movs	r3, #7
 8008eae:	617b      	str	r3, [r7, #20]
 8008eb0:	e004      	b.n	8008ebc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008eb2:	2306      	movs	r3, #6
 8008eb4:	617b      	str	r3, [r7, #20]
 8008eb6:	e001      	b.n	8008ebc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008eb8:	2309      	movs	r3, #9
 8008eba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	68da      	ldr	r2, [r3, #12]
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	029b      	lsls	r3, r3, #10
 8008ed0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008ed4:	431a      	orrs	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	371c      	adds	r7, #28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	00d8acbf 	.word	0x00d8acbf
 8008eec:	00e4e1c0 	.word	0x00e4e1c0
 8008ef0:	00f42400 	.word	0x00f42400
 8008ef4:	01067380 	.word	0x01067380
 8008ef8:	011a499f 	.word	0x011a499f
 8008efc:	01312cff 	.word	0x01312cff
 8008f00:	014ca43f 	.word	0x014ca43f
 8008f04:	016e3600 	.word	0x016e3600
 8008f08:	01a6ab1f 	.word	0x01a6ab1f
 8008f0c:	01e84800 	.word	0x01e84800

08008f10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f043 0201 	orr.w	r2, r3, #1
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b083      	sub	sp, #12
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f023 0201 	bic.w	r2, r3, #1
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d115      	bne.n	8008fa2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f82:	2001      	movs	r0, #1
 8008f84:	f7f8 fc54 	bl	8001830 <HAL_Delay>
      ms++;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f001 f8ab 	bl	800a0ea <USB_GetMode>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d01e      	beq.n	8008fd8 <USB_SetCurrentMode+0x84>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2b31      	cmp	r3, #49	@ 0x31
 8008f9e:	d9f0      	bls.n	8008f82 <USB_SetCurrentMode+0x2e>
 8008fa0:	e01a      	b.n	8008fd8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fa2:	78fb      	ldrb	r3, [r7, #3]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d115      	bne.n	8008fd4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fb4:	2001      	movs	r0, #1
 8008fb6:	f7f8 fc3b 	bl	8001830 <HAL_Delay>
      ms++;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f001 f892 	bl	800a0ea <USB_GetMode>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d005      	beq.n	8008fd8 <USB_SetCurrentMode+0x84>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b31      	cmp	r3, #49	@ 0x31
 8008fd0:	d9f0      	bls.n	8008fb4 <USB_SetCurrentMode+0x60>
 8008fd2:	e001      	b.n	8008fd8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e005      	b.n	8008fe4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b32      	cmp	r3, #50	@ 0x32
 8008fdc:	d101      	bne.n	8008fe2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e000      	b.n	8008fe4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fec:	b084      	sub	sp, #16
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b086      	sub	sp, #24
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008ffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009006:	2300      	movs	r3, #0
 8009008:	613b      	str	r3, [r7, #16]
 800900a:	e009      	b.n	8009020 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	3340      	adds	r3, #64	@ 0x40
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	2200      	movs	r2, #0
 8009018:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	3301      	adds	r3, #1
 800901e:	613b      	str	r3, [r7, #16]
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2b0e      	cmp	r3, #14
 8009024:	d9f2      	bls.n	800900c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009028:	2b00      	cmp	r3, #0
 800902a:	d11c      	bne.n	8009066 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800903a:	f043 0302 	orr.w	r3, r3, #2
 800903e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009044:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	e005      	b.n	8009072 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800906a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009078:	461a      	mov	r2, r3
 800907a:	2300      	movs	r3, #0
 800907c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800907e:	2103      	movs	r1, #3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f959 	bl	8009338 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009086:	2110      	movs	r1, #16
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f8f1 	bl	8009270 <USB_FlushTxFifo>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f91d 	bl	80092d8 <USB_FlushRxFifo>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ae:	461a      	mov	r2, r3
 80090b0:	2300      	movs	r3, #0
 80090b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ba:	461a      	mov	r2, r3
 80090bc:	2300      	movs	r3, #0
 80090be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090c6:	461a      	mov	r2, r3
 80090c8:	2300      	movs	r3, #0
 80090ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090cc:	2300      	movs	r3, #0
 80090ce:	613b      	str	r3, [r7, #16]
 80090d0:	e043      	b.n	800915a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090e8:	d118      	bne.n	800911c <USB_DevInit+0x130>
    {
      if (i == 0U)
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090fc:	461a      	mov	r2, r3
 80090fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009102:	6013      	str	r3, [r2, #0]
 8009104:	e013      	b.n	800912e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4413      	add	r3, r2
 800910e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009112:	461a      	mov	r2, r3
 8009114:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009118:	6013      	str	r3, [r2, #0]
 800911a:	e008      	b.n	800912e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009128:	461a      	mov	r2, r3
 800912a:	2300      	movs	r3, #0
 800912c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	015a      	lsls	r2, r3, #5
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	4413      	add	r3, r2
 8009136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800913a:	461a      	mov	r2, r3
 800913c:	2300      	movs	r3, #0
 800913e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	015a      	lsls	r2, r3, #5
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	4413      	add	r3, r2
 8009148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800914c:	461a      	mov	r2, r3
 800914e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009152:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	3301      	adds	r3, #1
 8009158:	613b      	str	r3, [r7, #16]
 800915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	429a      	cmp	r2, r3
 8009160:	d3b7      	bcc.n	80090d2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009162:	2300      	movs	r3, #0
 8009164:	613b      	str	r3, [r7, #16]
 8009166:	e043      	b.n	80091f0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4413      	add	r3, r2
 8009170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800917a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800917e:	d118      	bne.n	80091b2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10a      	bne.n	800919c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009192:	461a      	mov	r2, r3
 8009194:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009198:	6013      	str	r3, [r2, #0]
 800919a:	e013      	b.n	80091c4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091a8:	461a      	mov	r2, r3
 80091aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80091ae:	6013      	str	r3, [r2, #0]
 80091b0:	e008      	b.n	80091c4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	015a      	lsls	r2, r3, #5
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091be:	461a      	mov	r2, r3
 80091c0:	2300      	movs	r3, #0
 80091c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d0:	461a      	mov	r2, r3
 80091d2:	2300      	movs	r3, #0
 80091d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	015a      	lsls	r2, r3, #5
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091e2:	461a      	mov	r2, r3
 80091e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80091e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	3301      	adds	r3, #1
 80091ee:	613b      	str	r3, [r7, #16]
 80091f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d3b7      	bcc.n	8009168 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009206:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800920a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009218:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	f043 0210 	orr.w	r2, r3, #16
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	699a      	ldr	r2, [r3, #24]
 800922a:	4b10      	ldr	r3, [pc, #64]	@ (800926c <USB_DevInit+0x280>)
 800922c:	4313      	orrs	r3, r2
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009234:	2b00      	cmp	r3, #0
 8009236:	d005      	beq.n	8009244 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	f043 0208 	orr.w	r2, r3, #8
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009246:	2b01      	cmp	r3, #1
 8009248:	d107      	bne.n	800925a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009252:	f043 0304 	orr.w	r3, r3, #4
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800925a:	7dfb      	ldrb	r3, [r7, #23]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009266:	b004      	add	sp, #16
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	803c3800 	.word	0x803c3800

08009270 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3301      	adds	r3, #1
 8009282:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4a13      	ldr	r2, [pc, #76]	@ (80092d4 <USB_FlushTxFifo+0x64>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d901      	bls.n	8009290 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e01b      	b.n	80092c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	2b00      	cmp	r3, #0
 8009296:	daf2      	bge.n	800927e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	019b      	lsls	r3, r3, #6
 80092a0:	f043 0220 	orr.w	r2, r3, #32
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	3301      	adds	r3, #1
 80092ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4a08      	ldr	r2, [pc, #32]	@ (80092d4 <USB_FlushTxFifo+0x64>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d901      	bls.n	80092ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e006      	b.n	80092c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f003 0320 	and.w	r3, r3, #32
 80092c2:	2b20      	cmp	r3, #32
 80092c4:	d0f0      	beq.n	80092a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	00030d40 	.word	0x00030d40

080092d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092e0:	2300      	movs	r3, #0
 80092e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	3301      	adds	r3, #1
 80092e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	4a11      	ldr	r2, [pc, #68]	@ (8009334 <USB_FlushRxFifo+0x5c>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d901      	bls.n	80092f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e018      	b.n	8009328 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	daf2      	bge.n	80092e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092fe:	2300      	movs	r3, #0
 8009300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2210      	movs	r2, #16
 8009306:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	3301      	adds	r3, #1
 800930c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	4a08      	ldr	r2, [pc, #32]	@ (8009334 <USB_FlushRxFifo+0x5c>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d901      	bls.n	800931a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e006      	b.n	8009328 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	f003 0310 	and.w	r3, r3, #16
 8009322:	2b10      	cmp	r3, #16
 8009324:	d0f0      	beq.n	8009308 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	00030d40 	.word	0x00030d40

08009338 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	68f9      	ldr	r1, [r7, #12]
 8009354:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009358:	4313      	orrs	r3, r2
 800935a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800936a:	b480      	push	{r7}
 800936c:	b087      	sub	sp, #28
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f003 0306 	and.w	r3, r3, #6
 8009382:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b02      	cmp	r3, #2
 8009388:	d002      	beq.n	8009390 <USB_GetDevSpeed+0x26>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2b06      	cmp	r3, #6
 800938e:	d102      	bne.n	8009396 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009390:	2302      	movs	r3, #2
 8009392:	75fb      	strb	r3, [r7, #23]
 8009394:	e001      	b.n	800939a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009396:	230f      	movs	r3, #15
 8009398:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800939a:	7dfb      	ldrb	r3, [r7, #23]
}
 800939c:	4618      	mov	r0, r3
 800939e:	371c      	adds	r7, #28
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	785b      	ldrb	r3, [r3, #1]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d13a      	bne.n	800943a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093ca:	69da      	ldr	r2, [r3, #28]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	f003 030f 	and.w	r3, r3, #15
 80093d4:	2101      	movs	r1, #1
 80093d6:	fa01 f303 	lsl.w	r3, r1, r3
 80093da:	b29b      	uxth	r3, r3
 80093dc:	68f9      	ldr	r1, [r7, #12]
 80093de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093e2:	4313      	orrs	r3, r2
 80093e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	015a      	lsls	r2, r3, #5
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	4413      	add	r3, r2
 80093ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d155      	bne.n	80094a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	791b      	ldrb	r3, [r3, #4]
 8009416:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009418:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	059b      	lsls	r3, r3, #22
 800941e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009420:	4313      	orrs	r3, r2
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	0151      	lsls	r1, r2, #5
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	440a      	add	r2, r1
 800942a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800942e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	e036      	b.n	80094a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009440:	69da      	ldr	r2, [r3, #28]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	f003 030f 	and.w	r3, r3, #15
 800944a:	2101      	movs	r1, #1
 800944c:	fa01 f303 	lsl.w	r3, r1, r3
 8009450:	041b      	lsls	r3, r3, #16
 8009452:	68f9      	ldr	r1, [r7, #12]
 8009454:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009458:	4313      	orrs	r3, r2
 800945a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d11a      	bne.n	80094a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	015a      	lsls	r2, r3, #5
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4413      	add	r3, r2
 800947a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	791b      	ldrb	r3, [r3, #4]
 800948c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800948e:	430b      	orrs	r3, r1
 8009490:	4313      	orrs	r3, r2
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	0151      	lsls	r1, r2, #5
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	440a      	add	r2, r1
 800949a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800949e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
	...

080094b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	785b      	ldrb	r3, [r3, #1]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d161      	bne.n	8009598 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094ea:	d11f      	bne.n	800952c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	015a      	lsls	r2, r3, #5
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	0151      	lsls	r1, r2, #5
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	440a      	add	r2, r1
 8009502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009506:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800950a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4413      	add	r3, r2
 8009514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	0151      	lsls	r1, r2, #5
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	440a      	add	r2, r1
 8009522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009526:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800952a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009532:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	f003 030f 	and.w	r3, r3, #15
 800953c:	2101      	movs	r1, #1
 800953e:	fa01 f303 	lsl.w	r3, r1, r3
 8009542:	b29b      	uxth	r3, r3
 8009544:	43db      	mvns	r3, r3
 8009546:	68f9      	ldr	r1, [r7, #12]
 8009548:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800954c:	4013      	ands	r3, r2
 800954e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009556:	69da      	ldr	r2, [r3, #28]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	f003 030f 	and.w	r3, r3, #15
 8009560:	2101      	movs	r1, #1
 8009562:	fa01 f303 	lsl.w	r3, r1, r3
 8009566:	b29b      	uxth	r3, r3
 8009568:	43db      	mvns	r3, r3
 800956a:	68f9      	ldr	r1, [r7, #12]
 800956c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009570:	4013      	ands	r3, r2
 8009572:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	0159      	lsls	r1, r3, #5
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	440b      	add	r3, r1
 800958a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800958e:	4619      	mov	r1, r3
 8009590:	4b35      	ldr	r3, [pc, #212]	@ (8009668 <USB_DeactivateEndpoint+0x1b0>)
 8009592:	4013      	ands	r3, r2
 8009594:	600b      	str	r3, [r1, #0]
 8009596:	e060      	b.n	800965a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095ae:	d11f      	bne.n	80095f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	0151      	lsls	r1, r2, #5
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	440a      	add	r2, r1
 80095c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80095ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	0151      	lsls	r1, r2, #5
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	440a      	add	r2, r1
 80095e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	f003 030f 	and.w	r3, r3, #15
 8009600:	2101      	movs	r1, #1
 8009602:	fa01 f303 	lsl.w	r3, r1, r3
 8009606:	041b      	lsls	r3, r3, #16
 8009608:	43db      	mvns	r3, r3
 800960a:	68f9      	ldr	r1, [r7, #12]
 800960c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009610:	4013      	ands	r3, r2
 8009612:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800961a:	69da      	ldr	r2, [r3, #28]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	f003 030f 	and.w	r3, r3, #15
 8009624:	2101      	movs	r1, #1
 8009626:	fa01 f303 	lsl.w	r3, r1, r3
 800962a:	041b      	lsls	r3, r3, #16
 800962c:	43db      	mvns	r3, r3
 800962e:	68f9      	ldr	r1, [r7, #12]
 8009630:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009634:	4013      	ands	r3, r2
 8009636:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	015a      	lsls	r2, r3, #5
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	4413      	add	r3, r2
 8009640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	0159      	lsls	r1, r3, #5
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	440b      	add	r3, r1
 800964e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009652:	4619      	mov	r1, r3
 8009654:	4b05      	ldr	r3, [pc, #20]	@ (800966c <USB_DeactivateEndpoint+0x1b4>)
 8009656:	4013      	ands	r3, r2
 8009658:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	ec337800 	.word	0xec337800
 800966c:	eff37800 	.word	0xeff37800

08009670 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	785b      	ldrb	r3, [r3, #1]
 8009688:	2b01      	cmp	r3, #1
 800968a:	f040 8128 	bne.w	80098de <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d132      	bne.n	80096fc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	0151      	lsls	r1, r2, #5
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	440a      	add	r2, r1
 80096ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096b0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80096b4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80096b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	0151      	lsls	r1, r2, #5
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	440a      	add	r2, r1
 80096d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	0151      	lsls	r1, r2, #5
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	440a      	add	r2, r1
 80096f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096f4:	0cdb      	lsrs	r3, r3, #19
 80096f6:	04db      	lsls	r3, r3, #19
 80096f8:	6113      	str	r3, [r2, #16]
 80096fa:	e092      	b.n	8009822 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	0151      	lsls	r1, r2, #5
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	440a      	add	r2, r1
 8009712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009716:	0cdb      	lsrs	r3, r3, #19
 8009718:	04db      	lsls	r3, r3, #19
 800971a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	0151      	lsls	r1, r2, #5
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	440a      	add	r2, r1
 8009732:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009736:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800973a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800973e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d11a      	bne.n	800977c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	691a      	ldr	r2, [r3, #16]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	429a      	cmp	r2, r3
 8009750:	d903      	bls.n	800975a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	689a      	ldr	r2, [r3, #8]
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	015a      	lsls	r2, r3, #5
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	4413      	add	r3, r2
 8009762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	0151      	lsls	r1, r2, #5
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	440a      	add	r2, r1
 8009770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009774:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009778:	6113      	str	r3, [r2, #16]
 800977a:	e01b      	b.n	80097b4 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009788:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	6919      	ldr	r1, [r3, #16]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	440b      	add	r3, r1
 8009794:	1e59      	subs	r1, r3, #1
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	fbb1 f3f3 	udiv	r3, r1, r3
 800979e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80097a0:	4b8d      	ldr	r3, [pc, #564]	@ (80099d8 <USB_EPStartXfer+0x368>)
 80097a2:	400b      	ands	r3, r1
 80097a4:	6939      	ldr	r1, [r7, #16]
 80097a6:	0148      	lsls	r0, r1, #5
 80097a8:	6979      	ldr	r1, [r7, #20]
 80097aa:	4401      	add	r1, r0
 80097ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80097b0:	4313      	orrs	r3, r2
 80097b2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097c0:	691a      	ldr	r2, [r3, #16]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097ca:	6939      	ldr	r1, [r7, #16]
 80097cc:	0148      	lsls	r0, r1, #5
 80097ce:	6979      	ldr	r1, [r7, #20]
 80097d0:	4401      	add	r1, r0
 80097d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80097d6:	4313      	orrs	r3, r2
 80097d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	791b      	ldrb	r3, [r3, #4]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d11f      	bne.n	8009822 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	015a      	lsls	r2, r3, #5
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	4413      	add	r3, r2
 80097ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	0151      	lsls	r1, r2, #5
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	440a      	add	r2, r1
 80097f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097fc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009800:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	4413      	add	r3, r2
 800980a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	0151      	lsls	r1, r2, #5
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	440a      	add	r2, r1
 8009818:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800981c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009820:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	015a      	lsls	r2, r3, #5
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	4413      	add	r3, r2
 800982a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	0151      	lsls	r1, r2, #5
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	440a      	add	r2, r1
 8009838:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800983c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009840:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	791b      	ldrb	r3, [r3, #4]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d015      	beq.n	8009876 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 8139 	beq.w	8009ac6 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800985a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	f003 030f 	and.w	r3, r3, #15
 8009864:	2101      	movs	r1, #1
 8009866:	fa01 f303 	lsl.w	r3, r1, r3
 800986a:	6979      	ldr	r1, [r7, #20]
 800986c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009870:	4313      	orrs	r3, r2
 8009872:	634b      	str	r3, [r1, #52]	@ 0x34
 8009874:	e127      	b.n	8009ac6 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009882:	2b00      	cmp	r3, #0
 8009884:	d110      	bne.n	80098a8 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	4413      	add	r3, r2
 800988e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	0151      	lsls	r1, r2, #5
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	440a      	add	r2, r1
 800989c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	e00f      	b.n	80098c8 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	015a      	lsls	r2, r3, #5
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	4413      	add	r3, r2
 80098b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	0151      	lsls	r1, r2, #5
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	440a      	add	r2, r1
 80098be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098c6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	68d9      	ldr	r1, [r3, #12]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	781a      	ldrb	r2, [r3, #0]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f9a6 	bl	8009c28 <USB_WritePacket>
 80098dc:	e0f3      	b.n	8009ac6 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	0151      	lsls	r1, r2, #5
 80098f0:	697a      	ldr	r2, [r7, #20]
 80098f2:	440a      	add	r2, r1
 80098f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098f8:	0cdb      	lsrs	r3, r3, #19
 80098fa:	04db      	lsls	r3, r3, #19
 80098fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	4413      	add	r3, r2
 8009906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	0151      	lsls	r1, r2, #5
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	440a      	add	r2, r1
 8009914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009918:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800991c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009920:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d12f      	bne.n	8009988 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d003      	beq.n	8009938 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	689a      	ldr	r2, [r3, #8]
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	689a      	ldr	r2, [r3, #8]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	015a      	lsls	r2, r3, #5
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800994c:	691a      	ldr	r2, [r3, #16]
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009956:	6939      	ldr	r1, [r7, #16]
 8009958:	0148      	lsls	r0, r1, #5
 800995a:	6979      	ldr	r1, [r7, #20]
 800995c:	4401      	add	r1, r0
 800995e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009962:	4313      	orrs	r3, r2
 8009964:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	4413      	add	r3, r2
 800996e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	0151      	lsls	r1, r2, #5
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	440a      	add	r2, r1
 800997c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009980:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009984:	6113      	str	r3, [r2, #16]
 8009986:	e061      	b.n	8009a4c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d125      	bne.n	80099dc <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800999c:	691a      	ldr	r2, [r3, #16]
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099a6:	6939      	ldr	r1, [r7, #16]
 80099a8:	0148      	lsls	r0, r1, #5
 80099aa:	6979      	ldr	r1, [r7, #20]
 80099ac:	4401      	add	r1, r0
 80099ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80099b2:	4313      	orrs	r3, r2
 80099b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	693a      	ldr	r2, [r7, #16]
 80099c6:	0151      	lsls	r1, r2, #5
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	440a      	add	r2, r1
 80099cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099d4:	6113      	str	r3, [r2, #16]
 80099d6:	e039      	b.n	8009a4c <USB_EPStartXfer+0x3dc>
 80099d8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	691a      	ldr	r2, [r3, #16]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	4413      	add	r3, r2
 80099e6:	1e5a      	subs	r2, r3, #1
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f0:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	89fa      	ldrh	r2, [r7, #14]
 80099f8:	fb03 f202 	mul.w	r2, r3, r2
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a0c:	691a      	ldr	r2, [r3, #16]
 8009a0e:	89fb      	ldrh	r3, [r7, #14]
 8009a10:	04d9      	lsls	r1, r3, #19
 8009a12:	4b2f      	ldr	r3, [pc, #188]	@ (8009ad0 <USB_EPStartXfer+0x460>)
 8009a14:	400b      	ands	r3, r1
 8009a16:	6939      	ldr	r1, [r7, #16]
 8009a18:	0148      	lsls	r0, r1, #5
 8009a1a:	6979      	ldr	r1, [r7, #20]
 8009a1c:	4401      	add	r1, r0
 8009a1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009a22:	4313      	orrs	r3, r2
 8009a24:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a32:	691a      	ldr	r2, [r3, #16]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a3c:	6939      	ldr	r1, [r7, #16]
 8009a3e:	0148      	lsls	r0, r1, #5
 8009a40:	6979      	ldr	r1, [r7, #20]
 8009a42:	4401      	add	r1, r0
 8009a44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	791b      	ldrb	r3, [r3, #4]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d128      	bne.n	8009aa6 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d110      	bne.n	8009a86 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	0151      	lsls	r1, r2, #5
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	440a      	add	r2, r1
 8009a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	e00f      	b.n	8009aa6 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	0151      	lsls	r1, r2, #5
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	440a      	add	r2, r1
 8009a9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009aa4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	015a      	lsls	r2, r3, #5
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	4413      	add	r3, r2
 8009aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	0151      	lsls	r1, r2, #5
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	440a      	add	r2, r1
 8009abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ac0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009ac4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	1ff80000 	.word	0x1ff80000

08009ad4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	785b      	ldrb	r3, [r3, #1]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d14a      	bne.n	8009b88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b0a:	f040 8086 	bne.w	8009c1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	015a      	lsls	r2, r3, #5
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	4413      	add	r3, r2
 8009b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	683a      	ldr	r2, [r7, #0]
 8009b20:	7812      	ldrb	r2, [r2, #0]
 8009b22:	0151      	lsls	r1, r2, #5
 8009b24:	693a      	ldr	r2, [r7, #16]
 8009b26:	440a      	add	r2, r1
 8009b28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009b30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	7812      	ldrb	r2, [r2, #0]
 8009b46:	0151      	lsls	r1, r2, #5
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	440a      	add	r2, r1
 8009b4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d902      	bls.n	8009b6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	75fb      	strb	r3, [r7, #23]
          break;
 8009b6a:	e056      	b.n	8009c1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b84:	d0e7      	beq.n	8009b56 <USB_EPStopXfer+0x82>
 8009b86:	e048      	b.n	8009c1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ba0:	d13b      	bne.n	8009c1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	015a      	lsls	r2, r3, #5
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	4413      	add	r3, r2
 8009bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	7812      	ldrb	r2, [r2, #0]
 8009bb6:	0151      	lsls	r1, r2, #5
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	440a      	add	r2, r1
 8009bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009bc4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	015a      	lsls	r2, r3, #5
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	4413      	add	r3, r2
 8009bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	7812      	ldrb	r2, [r2, #0]
 8009bda:	0151      	lsls	r1, r2, #5
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	440a      	add	r2, r1
 8009be0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009be4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009be8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3301      	adds	r3, #1
 8009bee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d902      	bls.n	8009c00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8009bfe:	e00c      	b.n	8009c1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c18:	d0e7      	beq.n	8009bea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	371c      	adds	r7, #28
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b089      	sub	sp, #36	@ 0x24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	4611      	mov	r1, r2
 8009c34:	461a      	mov	r2, r3
 8009c36:	460b      	mov	r3, r1
 8009c38:	71fb      	strb	r3, [r7, #7]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009c46:	88bb      	ldrh	r3, [r7, #4]
 8009c48:	3303      	adds	r3, #3
 8009c4a:	089b      	lsrs	r3, r3, #2
 8009c4c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8009c4e:	2300      	movs	r3, #0
 8009c50:	61bb      	str	r3, [r7, #24]
 8009c52:	e018      	b.n	8009c86 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009c54:	79fb      	ldrb	r3, [r7, #7]
 8009c56:	031a      	lsls	r2, r3, #12
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c60:	461a      	mov	r2, r3
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	3301      	adds	r3, #1
 8009c72:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	3301      	adds	r3, #1
 8009c78:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	3301      	adds	r3, #1
 8009c84:	61bb      	str	r3, [r7, #24]
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d3e2      	bcc.n	8009c54 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3724      	adds	r7, #36	@ 0x24
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b08b      	sub	sp, #44	@ 0x2c
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009cb2:	88fb      	ldrh	r3, [r7, #6]
 8009cb4:	089b      	lsrs	r3, r3, #2
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009cba:	88fb      	ldrh	r3, [r7, #6]
 8009cbc:	f003 0303 	and.w	r3, r3, #3
 8009cc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	623b      	str	r3, [r7, #32]
 8009cc6:	e014      	b.n	8009cf2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd2:	601a      	str	r2, [r3, #0]
    pDest++;
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cdc:	3301      	adds	r3, #1
 8009cde:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce8:	3301      	adds	r3, #1
 8009cea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	623b      	str	r3, [r7, #32]
 8009cf2:	6a3a      	ldr	r2, [r7, #32]
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d3e6      	bcc.n	8009cc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009cfa:	8bfb      	ldrh	r3, [r7, #30]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d01e      	beq.n	8009d3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	f107 0310 	add.w	r3, r7, #16
 8009d10:	6812      	ldr	r2, [r2, #0]
 8009d12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	6a3b      	ldr	r3, [r7, #32]
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	00db      	lsls	r3, r3, #3
 8009d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d24:	701a      	strb	r2, [r3, #0]
      i++;
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2e:	3301      	adds	r3, #1
 8009d30:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009d32:	8bfb      	ldrh	r3, [r7, #30]
 8009d34:	3b01      	subs	r3, #1
 8009d36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009d38:	8bfb      	ldrh	r3, [r7, #30]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1ea      	bne.n	8009d14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	372c      	adds	r7, #44	@ 0x2c
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	785b      	ldrb	r3, [r3, #1]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d12c      	bne.n	8009dc2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	db12      	blt.n	8009da0 <USB_EPSetStall+0x54>
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00f      	beq.n	8009da0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	0151      	lsls	r1, r2, #5
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	440a      	add	r2, r1
 8009d96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009d9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	015a      	lsls	r2, r3, #5
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4413      	add	r3, r2
 8009da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	0151      	lsls	r1, r2, #5
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	440a      	add	r2, r1
 8009db6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	e02b      	b.n	8009e1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	015a      	lsls	r2, r3, #5
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	4413      	add	r3, r2
 8009dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	db12      	blt.n	8009dfa <USB_EPSetStall+0xae>
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00f      	beq.n	8009dfa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	0151      	lsls	r1, r2, #5
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	440a      	add	r2, r1
 8009df0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009df4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009df8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	015a      	lsls	r2, r3, #5
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	0151      	lsls	r1, r2, #5
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	440a      	add	r2, r1
 8009e10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009e18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	785b      	ldrb	r3, [r3, #1]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d128      	bne.n	8009e96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	0151      	lsls	r1, r2, #5
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	440a      	add	r2, r1
 8009e5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	791b      	ldrb	r3, [r3, #4]
 8009e68:	2b03      	cmp	r3, #3
 8009e6a:	d003      	beq.n	8009e74 <USB_EPClearStall+0x4c>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	791b      	ldrb	r3, [r3, #4]
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d138      	bne.n	8009ee6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	0151      	lsls	r1, r2, #5
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	440a      	add	r2, r1
 8009e8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	e027      	b.n	8009ee6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	015a      	lsls	r2, r3, #5
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	0151      	lsls	r1, r2, #5
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	440a      	add	r2, r1
 8009eac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009eb0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009eb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	791b      	ldrb	r3, [r3, #4]
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d003      	beq.n	8009ec6 <USB_EPClearStall+0x9e>
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	791b      	ldrb	r3, [r3, #4]
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d10f      	bne.n	8009ee6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	0151      	lsls	r1, r2, #5
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	440a      	add	r2, r1
 8009edc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ee4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	460b      	mov	r3, r1
 8009efe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f12:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009f16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	78fb      	ldrb	r3, [r7, #3]
 8009f22:	011b      	lsls	r3, r3, #4
 8009f24:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009f28:	68f9      	ldr	r1, [r7, #12]
 8009f2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009f5a:	f023 0303 	bic.w	r3, r3, #3
 8009f5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f6e:	f023 0302 	bic.w	r3, r3, #2
 8009f72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b085      	sub	sp, #20
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009f9c:	f023 0303 	bic.w	r3, r3, #3
 8009fa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009fb0:	f043 0302 	orr.w	r3, r3, #2
 8009fb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	695b      	ldr	r3, [r3, #20]
 8009fd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	4013      	ands	r3, r2
 8009fda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b085      	sub	sp, #20
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	4013      	ands	r3, r2
 800a00c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	0c1b      	lsrs	r3, r3, #16
}
 800a012:	4618      	mov	r0, r3
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a01e:	b480      	push	{r7}
 800a020:	b085      	sub	sp, #20
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a03a:	69db      	ldr	r3, [r3, #28]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	4013      	ands	r3, r2
 800a040:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	b29b      	uxth	r3, r3
}
 800a046:	4618      	mov	r0, r3
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a052:	b480      	push	{r7}
 800a054:	b085      	sub	sp, #20
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	460b      	mov	r3, r1
 800a05c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a062:	78fb      	ldrb	r3, [r7, #3]
 800a064:	015a      	lsls	r2, r3, #5
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	4413      	add	r3, r2
 800a06a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	4013      	ands	r3, r2
 800a07e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a080:	68bb      	ldr	r3, [r7, #8]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a08e:	b480      	push	{r7}
 800a090:	b087      	sub	sp, #28
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	460b      	mov	r3, r1
 800a098:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a0b2:	78fb      	ldrb	r3, [r7, #3]
 800a0b4:	f003 030f 	and.w	r3, r3, #15
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a0be:	01db      	lsls	r3, r3, #7
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a0c8:	78fb      	ldrb	r3, [r7, #3]
 800a0ca:	015a      	lsls	r2, r3, #5
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	4013      	ands	r3, r2
 800a0da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	371c      	adds	r7, #28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	695b      	ldr	r3, [r3, #20]
 800a0f6:	f003 0301 	and.w	r3, r3, #1
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	370c      	adds	r7, #12
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a106:	b480      	push	{r7}
 800a108:	b085      	sub	sp, #20
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a120:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a124:	f023 0307 	bic.w	r3, r3, #7
 800a128:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a13c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	333c      	adds	r3, #60	@ 0x3c
 800a15e:	3304      	adds	r3, #4
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	4a1c      	ldr	r2, [pc, #112]	@ (800a1d8 <USB_EP0_OutStart+0x8c>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d90a      	bls.n	800a182 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a178:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a17c:	d101      	bne.n	800a182 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	e024      	b.n	800a1cc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a188:	461a      	mov	r2, r3
 800a18a:	2300      	movs	r3, #0
 800a18c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a19c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1b0:	f043 0318 	orr.w	r3, r3, #24
 800a1b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a1c8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr
 800a1d8:	4f54300a 	.word	0x4f54300a

0800a1dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	4a13      	ldr	r2, [pc, #76]	@ (800a240 <USB_CoreReset+0x64>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d901      	bls.n	800a1fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e01b      	b.n	800a232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	daf2      	bge.n	800a1e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	f043 0201 	orr.w	r2, r3, #1
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	3301      	adds	r3, #1
 800a216:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	4a09      	ldr	r2, [pc, #36]	@ (800a240 <USB_CoreReset+0x64>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d901      	bls.n	800a224 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a220:	2303      	movs	r3, #3
 800a222:	e006      	b.n	800a232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d0f0      	beq.n	800a212 <USB_CoreReset+0x36>

  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3714      	adds	r7, #20
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	00030d40 	.word	0x00030d40

0800a244 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a250:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a254:	f002 fe2c 	bl	800ceb0 <USBD_static_malloc>
 800a258:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d109      	bne.n	800a274 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	32b0      	adds	r2, #176	@ 0xb0
 800a26a:	2100      	movs	r1, #0
 800a26c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a270:	2302      	movs	r3, #2
 800a272:	e0d4      	b.n	800a41e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a274:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a278:	2100      	movs	r1, #0
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f002 fe36 	bl	800ceec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	32b0      	adds	r2, #176	@ 0xb0
 800a28a:	68f9      	ldr	r1, [r7, #12]
 800a28c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	32b0      	adds	r2, #176	@ 0xb0
 800a29a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	7c1b      	ldrb	r3, [r3, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d138      	bne.n	800a31e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a2ac:	4b5e      	ldr	r3, [pc, #376]	@ (800a428 <USBD_CDC_Init+0x1e4>)
 800a2ae:	7819      	ldrb	r1, [r3, #0]
 800a2b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f002 fbe6 	bl	800ca88 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a2bc:	4b5a      	ldr	r3, [pc, #360]	@ (800a428 <USBD_CDC_Init+0x1e4>)
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	f003 020f 	and.w	r2, r3, #15
 800a2c4:	6879      	ldr	r1, [r7, #4]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4413      	add	r3, r2
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	440b      	add	r3, r1
 800a2d0:	3324      	adds	r3, #36	@ 0x24
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a2d6:	4b55      	ldr	r3, [pc, #340]	@ (800a42c <USBD_CDC_Init+0x1e8>)
 800a2d8:	7819      	ldrb	r1, [r3, #0]
 800a2da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2de:	2202      	movs	r2, #2
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f002 fbd1 	bl	800ca88 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a2e6:	4b51      	ldr	r3, [pc, #324]	@ (800a42c <USBD_CDC_Init+0x1e8>)
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	f003 020f 	and.w	r2, r3, #15
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	440b      	add	r3, r1
 800a2fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a2fe:	2201      	movs	r2, #1
 800a300:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a302:	4b4b      	ldr	r3, [pc, #300]	@ (800a430 <USBD_CDC_Init+0x1ec>)
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	f003 020f 	and.w	r2, r3, #15
 800a30a:	6879      	ldr	r1, [r7, #4]
 800a30c:	4613      	mov	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	440b      	add	r3, r1
 800a316:	3326      	adds	r3, #38	@ 0x26
 800a318:	2210      	movs	r2, #16
 800a31a:	801a      	strh	r2, [r3, #0]
 800a31c:	e035      	b.n	800a38a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a31e:	4b42      	ldr	r3, [pc, #264]	@ (800a428 <USBD_CDC_Init+0x1e4>)
 800a320:	7819      	ldrb	r1, [r3, #0]
 800a322:	2340      	movs	r3, #64	@ 0x40
 800a324:	2202      	movs	r2, #2
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f002 fbae 	bl	800ca88 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a32c:	4b3e      	ldr	r3, [pc, #248]	@ (800a428 <USBD_CDC_Init+0x1e4>)
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	f003 020f 	and.w	r2, r3, #15
 800a334:	6879      	ldr	r1, [r7, #4]
 800a336:	4613      	mov	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	440b      	add	r3, r1
 800a340:	3324      	adds	r3, #36	@ 0x24
 800a342:	2201      	movs	r2, #1
 800a344:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a346:	4b39      	ldr	r3, [pc, #228]	@ (800a42c <USBD_CDC_Init+0x1e8>)
 800a348:	7819      	ldrb	r1, [r3, #0]
 800a34a:	2340      	movs	r3, #64	@ 0x40
 800a34c:	2202      	movs	r2, #2
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f002 fb9a 	bl	800ca88 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a354:	4b35      	ldr	r3, [pc, #212]	@ (800a42c <USBD_CDC_Init+0x1e8>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	f003 020f 	and.w	r2, r3, #15
 800a35c:	6879      	ldr	r1, [r7, #4]
 800a35e:	4613      	mov	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	440b      	add	r3, r1
 800a368:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a36c:	2201      	movs	r2, #1
 800a36e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a370:	4b2f      	ldr	r3, [pc, #188]	@ (800a430 <USBD_CDC_Init+0x1ec>)
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	f003 020f 	and.w	r2, r3, #15
 800a378:	6879      	ldr	r1, [r7, #4]
 800a37a:	4613      	mov	r3, r2
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	4413      	add	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	440b      	add	r3, r1
 800a384:	3326      	adds	r3, #38	@ 0x26
 800a386:	2210      	movs	r2, #16
 800a388:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a38a:	4b29      	ldr	r3, [pc, #164]	@ (800a430 <USBD_CDC_Init+0x1ec>)
 800a38c:	7819      	ldrb	r1, [r3, #0]
 800a38e:	2308      	movs	r3, #8
 800a390:	2203      	movs	r2, #3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f002 fb78 	bl	800ca88 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a398:	4b25      	ldr	r3, [pc, #148]	@ (800a430 <USBD_CDC_Init+0x1ec>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	f003 020f 	and.w	r2, r3, #15
 800a3a0:	6879      	ldr	r1, [r7, #4]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	440b      	add	r3, r1
 800a3ac:	3324      	adds	r3, #36	@ 0x24
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	33b0      	adds	r3, #176	@ 0xb0
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	4413      	add	r3, r2
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d101      	bne.n	800a3ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	e018      	b.n	800a41e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	7c1b      	ldrb	r3, [r3, #16]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10a      	bne.n	800a40a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3f4:	4b0d      	ldr	r3, [pc, #52]	@ (800a42c <USBD_CDC_Init+0x1e8>)
 800a3f6:	7819      	ldrb	r1, [r3, #0]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a3fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f002 fcba 	bl	800cd7c <USBD_LL_PrepareReceive>
 800a408:	e008      	b.n	800a41c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a40a:	4b08      	ldr	r3, [pc, #32]	@ (800a42c <USBD_CDC_Init+0x1e8>)
 800a40c:	7819      	ldrb	r1, [r3, #0]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a414:	2340      	movs	r3, #64	@ 0x40
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f002 fcb0 	bl	800cd7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	20000093 	.word	0x20000093
 800a42c:	20000094 	.word	0x20000094
 800a430:	20000095 	.word	0x20000095

0800a434 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	460b      	mov	r3, r1
 800a43e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a440:	4b3a      	ldr	r3, [pc, #232]	@ (800a52c <USBD_CDC_DeInit+0xf8>)
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	4619      	mov	r1, r3
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f002 fb5c 	bl	800cb04 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a44c:	4b37      	ldr	r3, [pc, #220]	@ (800a52c <USBD_CDC_DeInit+0xf8>)
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	f003 020f 	and.w	r2, r3, #15
 800a454:	6879      	ldr	r1, [r7, #4]
 800a456:	4613      	mov	r3, r2
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4413      	add	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	440b      	add	r3, r1
 800a460:	3324      	adds	r3, #36	@ 0x24
 800a462:	2200      	movs	r2, #0
 800a464:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a466:	4b32      	ldr	r3, [pc, #200]	@ (800a530 <USBD_CDC_DeInit+0xfc>)
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f002 fb49 	bl	800cb04 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a472:	4b2f      	ldr	r3, [pc, #188]	@ (800a530 <USBD_CDC_DeInit+0xfc>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	f003 020f 	and.w	r2, r3, #15
 800a47a:	6879      	ldr	r1, [r7, #4]
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	440b      	add	r3, r1
 800a486:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a48a:	2200      	movs	r2, #0
 800a48c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a48e:	4b29      	ldr	r3, [pc, #164]	@ (800a534 <USBD_CDC_DeInit+0x100>)
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	4619      	mov	r1, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f002 fb35 	bl	800cb04 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a49a:	4b26      	ldr	r3, [pc, #152]	@ (800a534 <USBD_CDC_DeInit+0x100>)
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	f003 020f 	and.w	r2, r3, #15
 800a4a2:	6879      	ldr	r1, [r7, #4]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	440b      	add	r3, r1
 800a4ae:	3324      	adds	r3, #36	@ 0x24
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a4b4:	4b1f      	ldr	r3, [pc, #124]	@ (800a534 <USBD_CDC_DeInit+0x100>)
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	f003 020f 	and.w	r2, r3, #15
 800a4bc:	6879      	ldr	r1, [r7, #4]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4413      	add	r3, r2
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	440b      	add	r3, r1
 800a4c8:	3326      	adds	r3, #38	@ 0x26
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	32b0      	adds	r2, #176	@ 0xb0
 800a4d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d01f      	beq.n	800a520 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	33b0      	adds	r3, #176	@ 0xb0
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	4413      	add	r3, r2
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	32b0      	adds	r2, #176	@ 0xb0
 800a4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a502:	4618      	mov	r0, r3
 800a504:	f002 fce2 	bl	800cecc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	32b0      	adds	r2, #176	@ 0xb0
 800a512:	2100      	movs	r1, #0
 800a514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	20000093 	.word	0x20000093
 800a530:	20000094 	.word	0x20000094
 800a534:	20000095 	.word	0x20000095

0800a538 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	32b0      	adds	r2, #176	@ 0xb0
 800a54c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a550:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a552:	2300      	movs	r3, #0
 800a554:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a556:	2300      	movs	r3, #0
 800a558:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d101      	bne.n	800a568 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a564:	2303      	movs	r3, #3
 800a566:	e0bf      	b.n	800a6e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a570:	2b00      	cmp	r3, #0
 800a572:	d050      	beq.n	800a616 <USBD_CDC_Setup+0xde>
 800a574:	2b20      	cmp	r3, #32
 800a576:	f040 80af 	bne.w	800a6d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	88db      	ldrh	r3, [r3, #6]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d03a      	beq.n	800a5f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	b25b      	sxtb	r3, r3
 800a588:	2b00      	cmp	r3, #0
 800a58a:	da1b      	bge.n	800a5c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	33b0      	adds	r3, #176	@ 0xb0
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	4413      	add	r3, r2
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a5a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	88d2      	ldrh	r2, [r2, #6]
 800a5a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	88db      	ldrh	r3, [r3, #6]
 800a5ae:	2b07      	cmp	r3, #7
 800a5b0:	bf28      	it	cs
 800a5b2:	2307      	movcs	r3, #7
 800a5b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	89fa      	ldrh	r2, [r7, #14]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f001 fdb1 	bl	800c124 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a5c2:	e090      	b.n	800a6e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	785a      	ldrb	r2, [r3, #1]
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	88db      	ldrh	r3, [r3, #6]
 800a5d2:	2b3f      	cmp	r3, #63	@ 0x3f
 800a5d4:	d803      	bhi.n	800a5de <USBD_CDC_Setup+0xa6>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	88db      	ldrh	r3, [r3, #6]
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	e000      	b.n	800a5e0 <USBD_CDC_Setup+0xa8>
 800a5de:	2240      	movs	r2, #64	@ 0x40
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a5e6:	6939      	ldr	r1, [r7, #16]
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f001 fdc3 	bl	800c17c <USBD_CtlPrepareRx>
      break;
 800a5f6:	e076      	b.n	800a6e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	33b0      	adds	r3, #176	@ 0xb0
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	7850      	ldrb	r0, [r2, #1]
 800a60e:	2200      	movs	r2, #0
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	4798      	blx	r3
      break;
 800a614:	e067      	b.n	800a6e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	785b      	ldrb	r3, [r3, #1]
 800a61a:	2b0b      	cmp	r3, #11
 800a61c:	d851      	bhi.n	800a6c2 <USBD_CDC_Setup+0x18a>
 800a61e:	a201      	add	r2, pc, #4	@ (adr r2, 800a624 <USBD_CDC_Setup+0xec>)
 800a620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a624:	0800a655 	.word	0x0800a655
 800a628:	0800a6d1 	.word	0x0800a6d1
 800a62c:	0800a6c3 	.word	0x0800a6c3
 800a630:	0800a6c3 	.word	0x0800a6c3
 800a634:	0800a6c3 	.word	0x0800a6c3
 800a638:	0800a6c3 	.word	0x0800a6c3
 800a63c:	0800a6c3 	.word	0x0800a6c3
 800a640:	0800a6c3 	.word	0x0800a6c3
 800a644:	0800a6c3 	.word	0x0800a6c3
 800a648:	0800a6c3 	.word	0x0800a6c3
 800a64c:	0800a67f 	.word	0x0800a67f
 800a650:	0800a6a9 	.word	0x0800a6a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d107      	bne.n	800a670 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a660:	f107 030a 	add.w	r3, r7, #10
 800a664:	2202      	movs	r2, #2
 800a666:	4619      	mov	r1, r3
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f001 fd5b 	bl	800c124 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a66e:	e032      	b.n	800a6d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f001 fce5 	bl	800c042 <USBD_CtlError>
            ret = USBD_FAIL;
 800a678:	2303      	movs	r3, #3
 800a67a:	75fb      	strb	r3, [r7, #23]
          break;
 800a67c:	e02b      	b.n	800a6d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b03      	cmp	r3, #3
 800a688:	d107      	bne.n	800a69a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a68a:	f107 030d 	add.w	r3, r7, #13
 800a68e:	2201      	movs	r2, #1
 800a690:	4619      	mov	r1, r3
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f001 fd46 	bl	800c124 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a698:	e01d      	b.n	800a6d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a69a:	6839      	ldr	r1, [r7, #0]
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f001 fcd0 	bl	800c042 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a6a6:	e016      	b.n	800a6d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	2b03      	cmp	r3, #3
 800a6b2:	d00f      	beq.n	800a6d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f001 fcc3 	bl	800c042 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a6c0:	e008      	b.n	800a6d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f001 fcbc 	bl	800c042 <USBD_CtlError>
          ret = USBD_FAIL;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	75fb      	strb	r3, [r7, #23]
          break;
 800a6ce:	e002      	b.n	800a6d6 <USBD_CDC_Setup+0x19e>
          break;
 800a6d0:	bf00      	nop
 800a6d2:	e008      	b.n	800a6e6 <USBD_CDC_Setup+0x1ae>
          break;
 800a6d4:	bf00      	nop
      }
      break;
 800a6d6:	e006      	b.n	800a6e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f001 fcb1 	bl	800c042 <USBD_CtlError>
      ret = USBD_FAIL;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a6e4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a6e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3718      	adds	r7, #24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a702:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	32b0      	adds	r2, #176	@ 0xb0
 800a70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a716:	2303      	movs	r3, #3
 800a718:	e065      	b.n	800a7e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	32b0      	adds	r2, #176	@ 0xb0
 800a724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a728:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a72a:	78fb      	ldrb	r3, [r7, #3]
 800a72c:	f003 020f 	and.w	r2, r3, #15
 800a730:	6879      	ldr	r1, [r7, #4]
 800a732:	4613      	mov	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4413      	add	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	440b      	add	r3, r1
 800a73c:	3318      	adds	r3, #24
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d02f      	beq.n	800a7a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a744:	78fb      	ldrb	r3, [r7, #3]
 800a746:	f003 020f 	and.w	r2, r3, #15
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	4613      	mov	r3, r2
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	4413      	add	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	440b      	add	r3, r1
 800a756:	3318      	adds	r3, #24
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	78fb      	ldrb	r3, [r7, #3]
 800a75c:	f003 010f 	and.w	r1, r3, #15
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	460b      	mov	r3, r1
 800a764:	00db      	lsls	r3, r3, #3
 800a766:	440b      	add	r3, r1
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4403      	add	r3, r0
 800a76c:	3344      	adds	r3, #68	@ 0x44
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	fbb2 f1f3 	udiv	r1, r2, r3
 800a774:	fb01 f303 	mul.w	r3, r1, r3
 800a778:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d112      	bne.n	800a7a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a77e:	78fb      	ldrb	r3, [r7, #3]
 800a780:	f003 020f 	and.w	r2, r3, #15
 800a784:	6879      	ldr	r1, [r7, #4]
 800a786:	4613      	mov	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	4413      	add	r3, r2
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	440b      	add	r3, r1
 800a790:	3318      	adds	r3, #24
 800a792:	2200      	movs	r2, #0
 800a794:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a796:	78f9      	ldrb	r1, [r7, #3]
 800a798:	2300      	movs	r3, #0
 800a79a:	2200      	movs	r2, #0
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f002 fab5 	bl	800cd0c <USBD_LL_Transmit>
 800a7a2:	e01f      	b.n	800a7e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	33b0      	adds	r3, #176	@ 0xb0
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	4413      	add	r3, r2
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d010      	beq.n	800a7e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	33b0      	adds	r3, #176	@ 0xb0
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a7e0:	78fa      	ldrb	r2, [r7, #3]
 800a7e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	32b0      	adds	r2, #176	@ 0xb0
 800a804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a808:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	32b0      	adds	r2, #176	@ 0xb0
 800a814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d101      	bne.n	800a820 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a81c:	2303      	movs	r3, #3
 800a81e:	e01a      	b.n	800a856 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a820:	78fb      	ldrb	r3, [r7, #3]
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f002 fae1 	bl	800cdec <USBD_LL_GetRxDataSize>
 800a82a:	4602      	mov	r2, r0
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	33b0      	adds	r3, #176	@ 0xb0
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4413      	add	r3, r2
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a850:	4611      	mov	r1, r2
 800a852:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	32b0      	adds	r2, #176	@ 0xb0
 800a870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a874:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a87c:	2303      	movs	r3, #3
 800a87e:	e024      	b.n	800a8ca <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	33b0      	adds	r3, #176	@ 0xb0
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d019      	beq.n	800a8c8 <USBD_CDC_EP0_RxReady+0x6a>
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a89a:	2bff      	cmp	r3, #255	@ 0xff
 800a89c:	d014      	beq.n	800a8c8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	33b0      	adds	r3, #176	@ 0xb0
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a8b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a8be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	22ff      	movs	r2, #255	@ 0xff
 800a8c4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
	...

0800a8d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a8dc:	2182      	movs	r1, #130	@ 0x82
 800a8de:	4818      	ldr	r0, [pc, #96]	@ (800a940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a8e0:	f000 fd4f 	bl	800b382 <USBD_GetEpDesc>
 800a8e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	4815      	ldr	r0, [pc, #84]	@ (800a940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a8ea:	f000 fd4a 	bl	800b382 <USBD_GetEpDesc>
 800a8ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a8f0:	2181      	movs	r1, #129	@ 0x81
 800a8f2:	4813      	ldr	r0, [pc, #76]	@ (800a940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a8f4:	f000 fd45 	bl	800b382 <USBD_GetEpDesc>
 800a8f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	2210      	movs	r2, #16
 800a904:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d006      	beq.n	800a91a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	2200      	movs	r2, #0
 800a910:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a914:	711a      	strb	r2, [r3, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d006      	beq.n	800a92e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a928:	711a      	strb	r2, [r3, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2243      	movs	r2, #67	@ 0x43
 800a932:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a934:	4b02      	ldr	r3, [pc, #8]	@ (800a940 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a936:	4618      	mov	r0, r3
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	20000050 	.word	0x20000050

0800a944 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a94c:	2182      	movs	r1, #130	@ 0x82
 800a94e:	4818      	ldr	r0, [pc, #96]	@ (800a9b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a950:	f000 fd17 	bl	800b382 <USBD_GetEpDesc>
 800a954:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a956:	2101      	movs	r1, #1
 800a958:	4815      	ldr	r0, [pc, #84]	@ (800a9b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a95a:	f000 fd12 	bl	800b382 <USBD_GetEpDesc>
 800a95e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a960:	2181      	movs	r1, #129	@ 0x81
 800a962:	4813      	ldr	r0, [pc, #76]	@ (800a9b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a964:	f000 fd0d 	bl	800b382 <USBD_GetEpDesc>
 800a968:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	2210      	movs	r2, #16
 800a974:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d006      	beq.n	800a98a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	2200      	movs	r2, #0
 800a980:	711a      	strb	r2, [r3, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	f042 0202 	orr.w	r2, r2, #2
 800a988:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d006      	beq.n	800a99e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	711a      	strb	r2, [r3, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	f042 0202 	orr.w	r2, r2, #2
 800a99c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2243      	movs	r2, #67	@ 0x43
 800a9a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a9a4:	4b02      	ldr	r3, [pc, #8]	@ (800a9b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3718      	adds	r7, #24
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	20000050 	.word	0x20000050

0800a9b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a9bc:	2182      	movs	r1, #130	@ 0x82
 800a9be:	4818      	ldr	r0, [pc, #96]	@ (800aa20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a9c0:	f000 fcdf 	bl	800b382 <USBD_GetEpDesc>
 800a9c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	4815      	ldr	r0, [pc, #84]	@ (800aa20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a9ca:	f000 fcda 	bl	800b382 <USBD_GetEpDesc>
 800a9ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a9d0:	2181      	movs	r1, #129	@ 0x81
 800a9d2:	4813      	ldr	r0, [pc, #76]	@ (800aa20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a9d4:	f000 fcd5 	bl	800b382 <USBD_GetEpDesc>
 800a9d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d002      	beq.n	800a9e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	2210      	movs	r2, #16
 800a9e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d006      	beq.n	800a9fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9f4:	711a      	strb	r2, [r3, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d006      	beq.n	800aa0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa08:	711a      	strb	r2, [r3, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2243      	movs	r2, #67	@ 0x43
 800aa12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aa14:	4b02      	ldr	r3, [pc, #8]	@ (800aa20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20000050 	.word	0x20000050

0800aa24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	220a      	movs	r2, #10
 800aa30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aa32:	4b03      	ldr	r3, [pc, #12]	@ (800aa40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	2000000c 	.word	0x2000000c

0800aa44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d101      	bne.n	800aa58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aa54:	2303      	movs	r3, #3
 800aa56:	e009      	b.n	800aa6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	33b0      	adds	r3, #176	@ 0xb0
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4413      	add	r3, r2
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b087      	sub	sp, #28
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	32b0      	adds	r2, #176	@ 0xb0
 800aa8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa92:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e008      	b.n	800aab0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	68ba      	ldr	r2, [r7, #8]
 800aaa2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	371c      	adds	r7, #28
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	32b0      	adds	r2, #176	@ 0xb0
 800aad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aadc:	2303      	movs	r3, #3
 800aade:	e004      	b.n	800aaea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
	...

0800aaf8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	32b0      	adds	r2, #176	@ 0xb0
 800ab0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ab10:	2301      	movs	r3, #1
 800ab12:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d101      	bne.n	800ab1e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	e025      	b.n	800ab6a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d11f      	bne.n	800ab68 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ab30:	4b10      	ldr	r3, [pc, #64]	@ (800ab74 <USBD_CDC_TransmitPacket+0x7c>)
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	f003 020f 	and.w	r2, r3, #15
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	4613      	mov	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4403      	add	r3, r0
 800ab4a:	3318      	adds	r3, #24
 800ab4c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ab4e:	4b09      	ldr	r3, [pc, #36]	@ (800ab74 <USBD_CDC_TransmitPacket+0x7c>)
 800ab50:	7819      	ldrb	r1, [r3, #0]
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f002 f8d4 	bl	800cd0c <USBD_LL_Transmit>

    ret = USBD_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ab68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	20000093 	.word	0x20000093

0800ab78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	32b0      	adds	r2, #176	@ 0xb0
 800ab8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab8e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	32b0      	adds	r2, #176	@ 0xb0
 800ab9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e018      	b.n	800abd8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	7c1b      	ldrb	r3, [r3, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10a      	bne.n	800abc4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abae:	4b0c      	ldr	r3, [pc, #48]	@ (800abe0 <USBD_CDC_ReceivePacket+0x68>)
 800abb0:	7819      	ldrb	r1, [r3, #0]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800abb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f002 f8dd 	bl	800cd7c <USBD_LL_PrepareReceive>
 800abc2:	e008      	b.n	800abd6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abc4:	4b06      	ldr	r3, [pc, #24]	@ (800abe0 <USBD_CDC_ReceivePacket+0x68>)
 800abc6:	7819      	ldrb	r1, [r3, #0]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800abce:	2340      	movs	r3, #64	@ 0x40
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f002 f8d3 	bl	800cd7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	20000094 	.word	0x20000094

0800abe4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b086      	sub	sp, #24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	4613      	mov	r3, r2
 800abf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d101      	bne.n	800abfc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e01f      	b.n	800ac3c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d003      	beq.n	800ac22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	79fa      	ldrb	r2, [r7, #7]
 800ac2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f001 feab 	bl	800c98c <USBD_LL_Init>
 800ac36:	4603      	mov	r3, r0
 800ac38:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3718      	adds	r7, #24
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d101      	bne.n	800ac5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e025      	b.n	800aca8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	32ae      	adds	r2, #174	@ 0xae
 800ac6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00f      	beq.n	800ac98 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	32ae      	adds	r2, #174	@ 0xae
 800ac82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac88:	f107 020e 	add.w	r2, r7, #14
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	4798      	blx	r3
 800ac90:	4602      	mov	r2, r0
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ac9e:	1c5a      	adds	r2, r3, #1
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f001 feb3 	bl	800ca24 <USBD_LL_Start>
 800acbe:	4603      	mov	r3, r0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acd0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	370c      	adds	r7, #12
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr

0800acde <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b084      	sub	sp, #16
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	460b      	mov	r3, r1
 800ace8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800acea:	2300      	movs	r3, #0
 800acec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d009      	beq.n	800ad0c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	78fa      	ldrb	r2, [r7, #3]
 800ad02:	4611      	mov	r1, r2
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	4798      	blx	r3
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b084      	sub	sp, #16
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
 800ad1e:	460b      	mov	r3, r1
 800ad20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	78fa      	ldrb	r2, [r7, #3]
 800ad30:	4611      	mov	r1, r2
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	4798      	blx	r3
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d001      	beq.n	800ad40 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f001 f936 	bl	800bfce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ad70:	461a      	mov	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ad7e:	f003 031f 	and.w	r3, r3, #31
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d01a      	beq.n	800adbc <USBD_LL_SetupStage+0x72>
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d822      	bhi.n	800add0 <USBD_LL_SetupStage+0x86>
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d002      	beq.n	800ad94 <USBD_LL_SetupStage+0x4a>
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d00a      	beq.n	800ada8 <USBD_LL_SetupStage+0x5e>
 800ad92:	e01d      	b.n	800add0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fb63 	bl	800b468 <USBD_StdDevReq>
 800ada2:	4603      	mov	r3, r0
 800ada4:	73fb      	strb	r3, [r7, #15]
      break;
 800ada6:	e020      	b.n	800adea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800adae:	4619      	mov	r1, r3
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fbcb 	bl	800b54c <USBD_StdItfReq>
 800adb6:	4603      	mov	r3, r0
 800adb8:	73fb      	strb	r3, [r7, #15]
      break;
 800adba:	e016      	b.n	800adea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800adc2:	4619      	mov	r1, r3
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fc2d 	bl	800b624 <USBD_StdEPReq>
 800adca:	4603      	mov	r3, r0
 800adcc:	73fb      	strb	r3, [r7, #15]
      break;
 800adce:	e00c      	b.n	800adea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800add6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800adda:	b2db      	uxtb	r3, r3
 800addc:	4619      	mov	r1, r3
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f001 fec6 	bl	800cb70 <USBD_LL_StallEP>
 800ade4:	4603      	mov	r3, r0
 800ade6:	73fb      	strb	r3, [r7, #15]
      break;
 800ade8:	bf00      	nop
  }

  return ret;
 800adea:	7bfb      	ldrb	r3, [r7, #15]
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	460b      	mov	r3, r1
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae02:	2300      	movs	r3, #0
 800ae04:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ae06:	7afb      	ldrb	r3, [r7, #11]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d16e      	bne.n	800aeea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ae12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	f040 8098 	bne.w	800af50 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	689a      	ldr	r2, [r3, #8]
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d913      	bls.n	800ae54 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	689a      	ldr	r2, [r3, #8]
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	1ad2      	subs	r2, r2, r3
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	68da      	ldr	r2, [r3, #12]
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	4293      	cmp	r3, r2
 800ae44:	bf28      	it	cs
 800ae46:	4613      	movcs	r3, r2
 800ae48:	461a      	mov	r2, r3
 800ae4a:	6879      	ldr	r1, [r7, #4]
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f001 f9b2 	bl	800c1b6 <USBD_CtlContinueRx>
 800ae52:	e07d      	b.n	800af50 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ae5a:	f003 031f 	and.w	r3, r3, #31
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d014      	beq.n	800ae8c <USBD_LL_DataOutStage+0x98>
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d81d      	bhi.n	800aea2 <USBD_LL_DataOutStage+0xae>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d002      	beq.n	800ae70 <USBD_LL_DataOutStage+0x7c>
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d003      	beq.n	800ae76 <USBD_LL_DataOutStage+0x82>
 800ae6e:	e018      	b.n	800aea2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ae70:	2300      	movs	r3, #0
 800ae72:	75bb      	strb	r3, [r7, #22]
            break;
 800ae74:	e018      	b.n	800aea8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	4619      	mov	r1, r3
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f000 fa64 	bl	800b34e <USBD_CoreFindIF>
 800ae86:	4603      	mov	r3, r0
 800ae88:	75bb      	strb	r3, [r7, #22]
            break;
 800ae8a:	e00d      	b.n	800aea8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	4619      	mov	r1, r3
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f000 fa66 	bl	800b368 <USBD_CoreFindEP>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	75bb      	strb	r3, [r7, #22]
            break;
 800aea0:	e002      	b.n	800aea8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800aea2:	2300      	movs	r3, #0
 800aea4:	75bb      	strb	r3, [r7, #22]
            break;
 800aea6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aea8:	7dbb      	ldrb	r3, [r7, #22]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d119      	bne.n	800aee2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d113      	bne.n	800aee2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800aeba:	7dba      	ldrb	r2, [r7, #22]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	32ae      	adds	r2, #174	@ 0xae
 800aec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00b      	beq.n	800aee2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800aeca:	7dba      	ldrb	r2, [r7, #22]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aed2:	7dba      	ldrb	r2, [r7, #22]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	32ae      	adds	r2, #174	@ 0xae
 800aed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f001 f978 	bl	800c1d8 <USBD_CtlSendStatus>
 800aee8:	e032      	b.n	800af50 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800aeea:	7afb      	ldrb	r3, [r7, #11]
 800aeec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	4619      	mov	r1, r3
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f000 fa37 	bl	800b368 <USBD_CoreFindEP>
 800aefa:	4603      	mov	r3, r0
 800aefc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aefe:	7dbb      	ldrb	r3, [r7, #22]
 800af00:	2bff      	cmp	r3, #255	@ 0xff
 800af02:	d025      	beq.n	800af50 <USBD_LL_DataOutStage+0x15c>
 800af04:	7dbb      	ldrb	r3, [r7, #22]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d122      	bne.n	800af50 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af10:	b2db      	uxtb	r3, r3
 800af12:	2b03      	cmp	r3, #3
 800af14:	d117      	bne.n	800af46 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800af16:	7dba      	ldrb	r2, [r7, #22]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	32ae      	adds	r2, #174	@ 0xae
 800af1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00f      	beq.n	800af46 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800af26:	7dba      	ldrb	r2, [r7, #22]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800af2e:	7dba      	ldrb	r2, [r7, #22]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	32ae      	adds	r2, #174	@ 0xae
 800af34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	7afa      	ldrb	r2, [r7, #11]
 800af3c:	4611      	mov	r1, r2
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	4798      	blx	r3
 800af42:	4603      	mov	r3, r0
 800af44:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800af46:	7dfb      	ldrb	r3, [r7, #23]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d001      	beq.n	800af50 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800af4c:	7dfb      	ldrb	r3, [r7, #23]
 800af4e:	e000      	b.n	800af52 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3718      	adds	r7, #24
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b086      	sub	sp, #24
 800af5e:	af00      	add	r7, sp, #0
 800af60:	60f8      	str	r0, [r7, #12]
 800af62:	460b      	mov	r3, r1
 800af64:	607a      	str	r2, [r7, #4]
 800af66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800af68:	7afb      	ldrb	r3, [r7, #11]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d16f      	bne.n	800b04e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	3314      	adds	r3, #20
 800af72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d15a      	bne.n	800b034 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	689a      	ldr	r2, [r3, #8]
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	429a      	cmp	r2, r3
 800af88:	d914      	bls.n	800afb4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	689a      	ldr	r2, [r3, #8]
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	1ad2      	subs	r2, r2, r3
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	461a      	mov	r2, r3
 800af9e:	6879      	ldr	r1, [r7, #4]
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f001 f8da 	bl	800c15a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afa6:	2300      	movs	r3, #0
 800afa8:	2200      	movs	r2, #0
 800afaa:	2100      	movs	r1, #0
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f001 fee5 	bl	800cd7c <USBD_LL_PrepareReceive>
 800afb2:	e03f      	b.n	800b034 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	68da      	ldr	r2, [r3, #12]
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d11c      	bne.n	800affa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800afc8:	429a      	cmp	r2, r3
 800afca:	d316      	bcc.n	800affa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	685a      	ldr	r2, [r3, #4]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d20f      	bcs.n	800affa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800afda:	2200      	movs	r2, #0
 800afdc:	2100      	movs	r1, #0
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f001 f8bb 	bl	800c15a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afec:	2300      	movs	r3, #0
 800afee:	2200      	movs	r2, #0
 800aff0:	2100      	movs	r1, #0
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f001 fec2 	bl	800cd7c <USBD_LL_PrepareReceive>
 800aff8:	e01c      	b.n	800b034 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b03      	cmp	r3, #3
 800b004:	d10f      	bne.n	800b026 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d009      	beq.n	800b026 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b026:	2180      	movs	r1, #128	@ 0x80
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f001 fda1 	bl	800cb70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f001 f8e5 	bl	800c1fe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d03a      	beq.n	800b0b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f7ff fe42 	bl	800acc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2200      	movs	r2, #0
 800b048:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b04c:	e032      	b.n	800b0b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b04e:	7afb      	ldrb	r3, [r7, #11]
 800b050:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b054:	b2db      	uxtb	r3, r3
 800b056:	4619      	mov	r1, r3
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f000 f985 	bl	800b368 <USBD_CoreFindEP>
 800b05e:	4603      	mov	r3, r0
 800b060:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b062:	7dfb      	ldrb	r3, [r7, #23]
 800b064:	2bff      	cmp	r3, #255	@ 0xff
 800b066:	d025      	beq.n	800b0b4 <USBD_LL_DataInStage+0x15a>
 800b068:	7dfb      	ldrb	r3, [r7, #23]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d122      	bne.n	800b0b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b074:	b2db      	uxtb	r3, r3
 800b076:	2b03      	cmp	r3, #3
 800b078:	d11c      	bne.n	800b0b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b07a:	7dfa      	ldrb	r2, [r7, #23]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	32ae      	adds	r2, #174	@ 0xae
 800b080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d014      	beq.n	800b0b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b08a:	7dfa      	ldrb	r2, [r7, #23]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b092:	7dfa      	ldrb	r2, [r7, #23]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	32ae      	adds	r2, #174	@ 0xae
 800b098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	7afa      	ldrb	r2, [r7, #11]
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	4798      	blx	r3
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b0aa:	7dbb      	ldrb	r3, [r7, #22]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d001      	beq.n	800b0b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b0b0:	7dbb      	ldrb	r3, [r7, #22]
 800b0b2:	e000      	b.n	800b0b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3718      	adds	r7, #24
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b084      	sub	sp, #16
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d014      	beq.n	800b124 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00e      	beq.n	800b124 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	6852      	ldr	r2, [r2, #4]
 800b112:	b2d2      	uxtb	r2, r2
 800b114:	4611      	mov	r1, r2
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	4798      	blx	r3
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b120:	2303      	movs	r3, #3
 800b122:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b124:	2340      	movs	r3, #64	@ 0x40
 800b126:	2200      	movs	r2, #0
 800b128:	2100      	movs	r1, #0
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f001 fcac 	bl	800ca88 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2240      	movs	r2, #64	@ 0x40
 800b13c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b140:	2340      	movs	r3, #64	@ 0x40
 800b142:	2200      	movs	r2, #0
 800b144:	2180      	movs	r1, #128	@ 0x80
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f001 fc9e 	bl	800ca88 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2240      	movs	r2, #64	@ 0x40
 800b156:	621a      	str	r2, [r3, #32]

  return ret;
 800b158:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b162:	b480      	push	{r7}
 800b164:	b083      	sub	sp, #12
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	460b      	mov	r3, r1
 800b16c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	78fa      	ldrb	r2, [r7, #3]
 800b172:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b190:	b2db      	uxtb	r3, r3
 800b192:	2b04      	cmp	r3, #4
 800b194:	d006      	beq.n	800b1a4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b19c:	b2da      	uxtb	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2204      	movs	r2, #4
 800b1a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b083      	sub	sp, #12
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	2b04      	cmp	r3, #4
 800b1cc:	d106      	bne.n	800b1dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b1d4:	b2da      	uxtb	r2, r3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	370c      	adds	r7, #12
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b082      	sub	sp, #8
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	2b03      	cmp	r3, #3
 800b1fc:	d110      	bne.n	800b220 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00b      	beq.n	800b220 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b20e:	69db      	ldr	r3, [r3, #28]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d005      	beq.n	800b220 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b21a:	69db      	ldr	r3, [r3, #28]
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b082      	sub	sp, #8
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	460b      	mov	r3, r1
 800b234:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	32ae      	adds	r2, #174	@ 0xae
 800b240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d101      	bne.n	800b24c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b248:	2303      	movs	r3, #3
 800b24a:	e01c      	b.n	800b286 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b252:	b2db      	uxtb	r3, r3
 800b254:	2b03      	cmp	r3, #3
 800b256:	d115      	bne.n	800b284 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	32ae      	adds	r2, #174	@ 0xae
 800b262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b266:	6a1b      	ldr	r3, [r3, #32]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00b      	beq.n	800b284 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	32ae      	adds	r2, #174	@ 0xae
 800b276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27a:	6a1b      	ldr	r3, [r3, #32]
 800b27c:	78fa      	ldrb	r2, [r7, #3]
 800b27e:	4611      	mov	r1, r2
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3708      	adds	r7, #8
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b082      	sub	sp, #8
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	460b      	mov	r3, r1
 800b298:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	32ae      	adds	r2, #174	@ 0xae
 800b2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d101      	bne.n	800b2b0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	e01c      	b.n	800b2ea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	2b03      	cmp	r3, #3
 800b2ba:	d115      	bne.n	800b2e8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	32ae      	adds	r2, #174	@ 0xae
 800b2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00b      	beq.n	800b2e8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	32ae      	adds	r2, #174	@ 0xae
 800b2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2e0:	78fa      	ldrb	r2, [r7, #3]
 800b2e2:	4611      	mov	r1, r2
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b083      	sub	sp, #12
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b310:	2300      	movs	r3, #0
 800b312:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00e      	beq.n	800b344 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	6852      	ldr	r2, [r2, #4]
 800b332:	b2d2      	uxtb	r2, r2
 800b334:	4611      	mov	r1, r2
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	4798      	blx	r3
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d001      	beq.n	800b344 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b340:	2303      	movs	r3, #3
 800b342:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b344:	7bfb      	ldrb	r3, [r7, #15]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b34e:	b480      	push	{r7}
 800b350:	b083      	sub	sp, #12
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
 800b356:	460b      	mov	r3, r1
 800b358:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b35a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b374:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b376:	4618      	mov	r0, r3
 800b378:	370c      	adds	r7, #12
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b382:	b580      	push	{r7, lr}
 800b384:	b086      	sub	sp, #24
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
 800b38a:	460b      	mov	r3, r1
 800b38c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b396:	2300      	movs	r3, #0
 800b398:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	885b      	ldrh	r3, [r3, #2]
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	7812      	ldrb	r2, [r2, #0]
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d91f      	bls.n	800b3e8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b3ae:	e013      	b.n	800b3d8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b3b0:	f107 030a 	add.w	r3, r7, #10
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6978      	ldr	r0, [r7, #20]
 800b3b8:	f000 f81b 	bl	800b3f2 <USBD_GetNextDesc>
 800b3bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	785b      	ldrb	r3, [r3, #1]
 800b3c2:	2b05      	cmp	r3, #5
 800b3c4:	d108      	bne.n	800b3d8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	789b      	ldrb	r3, [r3, #2]
 800b3ce:	78fa      	ldrb	r2, [r7, #3]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d008      	beq.n	800b3e6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	885b      	ldrh	r3, [r3, #2]
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	897b      	ldrh	r3, [r7, #10]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d8e5      	bhi.n	800b3b0 <USBD_GetEpDesc+0x2e>
 800b3e4:	e000      	b.n	800b3e8 <USBD_GetEpDesc+0x66>
          break;
 800b3e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b3e8:	693b      	ldr	r3, [r7, #16]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3718      	adds	r7, #24
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	b085      	sub	sp, #20
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
 800b3fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	881b      	ldrh	r3, [r3, #0]
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	7812      	ldrb	r2, [r2, #0]
 800b408:	4413      	add	r3, r2
 800b40a:	b29a      	uxth	r2, r3
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	461a      	mov	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4413      	add	r3, r2
 800b41a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b41c:	68fb      	ldr	r3, [r7, #12]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3714      	adds	r7, #20
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b087      	sub	sp, #28
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	3301      	adds	r3, #1
 800b440:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b448:	8a3b      	ldrh	r3, [r7, #16]
 800b44a:	021b      	lsls	r3, r3, #8
 800b44c:	b21a      	sxth	r2, r3
 800b44e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b452:	4313      	orrs	r3, r2
 800b454:	b21b      	sxth	r3, r3
 800b456:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b458:	89fb      	ldrh	r3, [r7, #14]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	371c      	adds	r7, #28
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
	...

0800b468 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b472:	2300      	movs	r3, #0
 800b474:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b47e:	2b40      	cmp	r3, #64	@ 0x40
 800b480:	d005      	beq.n	800b48e <USBD_StdDevReq+0x26>
 800b482:	2b40      	cmp	r3, #64	@ 0x40
 800b484:	d857      	bhi.n	800b536 <USBD_StdDevReq+0xce>
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00f      	beq.n	800b4aa <USBD_StdDevReq+0x42>
 800b48a:	2b20      	cmp	r3, #32
 800b48c:	d153      	bne.n	800b536 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	32ae      	adds	r2, #174	@ 0xae
 800b498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	6839      	ldr	r1, [r7, #0]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	4798      	blx	r3
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4a8:	e04a      	b.n	800b540 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	785b      	ldrb	r3, [r3, #1]
 800b4ae:	2b09      	cmp	r3, #9
 800b4b0:	d83b      	bhi.n	800b52a <USBD_StdDevReq+0xc2>
 800b4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b8 <USBD_StdDevReq+0x50>)
 800b4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b8:	0800b50d 	.word	0x0800b50d
 800b4bc:	0800b521 	.word	0x0800b521
 800b4c0:	0800b52b 	.word	0x0800b52b
 800b4c4:	0800b517 	.word	0x0800b517
 800b4c8:	0800b52b 	.word	0x0800b52b
 800b4cc:	0800b4eb 	.word	0x0800b4eb
 800b4d0:	0800b4e1 	.word	0x0800b4e1
 800b4d4:	0800b52b 	.word	0x0800b52b
 800b4d8:	0800b503 	.word	0x0800b503
 800b4dc:	0800b4f5 	.word	0x0800b4f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b4e0:	6839      	ldr	r1, [r7, #0]
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fa3c 	bl	800b960 <USBD_GetDescriptor>
          break;
 800b4e8:	e024      	b.n	800b534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 fbcb 	bl	800bc88 <USBD_SetAddress>
          break;
 800b4f2:	e01f      	b.n	800b534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fc0a 	bl	800bd10 <USBD_SetConfig>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73fb      	strb	r3, [r7, #15]
          break;
 800b500:	e018      	b.n	800b534 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b502:	6839      	ldr	r1, [r7, #0]
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fcad 	bl	800be64 <USBD_GetConfig>
          break;
 800b50a:	e013      	b.n	800b534 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fcde 	bl	800bed0 <USBD_GetStatus>
          break;
 800b514:	e00e      	b.n	800b534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b516:	6839      	ldr	r1, [r7, #0]
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fd0d 	bl	800bf38 <USBD_SetFeature>
          break;
 800b51e:	e009      	b.n	800b534 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fd31 	bl	800bf8a <USBD_ClrFeature>
          break;
 800b528:	e004      	b.n	800b534 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 fd88 	bl	800c042 <USBD_CtlError>
          break;
 800b532:	bf00      	nop
      }
      break;
 800b534:	e004      	b.n	800b540 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b536:	6839      	ldr	r1, [r7, #0]
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 fd82 	bl	800c042 <USBD_CtlError>
      break;
 800b53e:	bf00      	nop
  }

  return ret;
 800b540:	7bfb      	ldrb	r3, [r7, #15]
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop

0800b54c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b556:	2300      	movs	r3, #0
 800b558:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b562:	2b40      	cmp	r3, #64	@ 0x40
 800b564:	d005      	beq.n	800b572 <USBD_StdItfReq+0x26>
 800b566:	2b40      	cmp	r3, #64	@ 0x40
 800b568:	d852      	bhi.n	800b610 <USBD_StdItfReq+0xc4>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d001      	beq.n	800b572 <USBD_StdItfReq+0x26>
 800b56e:	2b20      	cmp	r3, #32
 800b570:	d14e      	bne.n	800b610 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	3b01      	subs	r3, #1
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d840      	bhi.n	800b602 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	889b      	ldrh	r3, [r3, #4]
 800b584:	b2db      	uxtb	r3, r3
 800b586:	2b01      	cmp	r3, #1
 800b588:	d836      	bhi.n	800b5f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	889b      	ldrh	r3, [r3, #4]
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	4619      	mov	r1, r3
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7ff fedb 	bl	800b34e <USBD_CoreFindIF>
 800b598:	4603      	mov	r3, r0
 800b59a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
 800b59e:	2bff      	cmp	r3, #255	@ 0xff
 800b5a0:	d01d      	beq.n	800b5de <USBD_StdItfReq+0x92>
 800b5a2:	7bbb      	ldrb	r3, [r7, #14]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d11a      	bne.n	800b5de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b5a8:	7bba      	ldrb	r2, [r7, #14]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	32ae      	adds	r2, #174	@ 0xae
 800b5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00f      	beq.n	800b5d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b5b8:	7bba      	ldrb	r2, [r7, #14]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b5c0:	7bba      	ldrb	r2, [r7, #14]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	32ae      	adds	r2, #174	@ 0xae
 800b5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	6839      	ldr	r1, [r7, #0]
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	4798      	blx	r3
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b5d6:	e004      	b.n	800b5e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b5d8:	2303      	movs	r3, #3
 800b5da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b5dc:	e001      	b.n	800b5e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	88db      	ldrh	r3, [r3, #6]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d110      	bne.n	800b60c <USBD_StdItfReq+0xc0>
 800b5ea:	7bfb      	ldrb	r3, [r7, #15]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10d      	bne.n	800b60c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fdf1 	bl	800c1d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b5f6:	e009      	b.n	800b60c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fd21 	bl	800c042 <USBD_CtlError>
          break;
 800b600:	e004      	b.n	800b60c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fd1c 	bl	800c042 <USBD_CtlError>
          break;
 800b60a:	e000      	b.n	800b60e <USBD_StdItfReq+0xc2>
          break;
 800b60c:	bf00      	nop
      }
      break;
 800b60e:	e004      	b.n	800b61a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b610:	6839      	ldr	r1, [r7, #0]
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 fd15 	bl	800c042 <USBD_CtlError>
      break;
 800b618:	bf00      	nop
  }

  return ret;
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b62e:	2300      	movs	r3, #0
 800b630:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	889b      	ldrh	r3, [r3, #4]
 800b636:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b640:	2b40      	cmp	r3, #64	@ 0x40
 800b642:	d007      	beq.n	800b654 <USBD_StdEPReq+0x30>
 800b644:	2b40      	cmp	r3, #64	@ 0x40
 800b646:	f200 817f 	bhi.w	800b948 <USBD_StdEPReq+0x324>
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d02a      	beq.n	800b6a4 <USBD_StdEPReq+0x80>
 800b64e:	2b20      	cmp	r3, #32
 800b650:	f040 817a 	bne.w	800b948 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b654:	7bbb      	ldrb	r3, [r7, #14]
 800b656:	4619      	mov	r1, r3
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f7ff fe85 	bl	800b368 <USBD_CoreFindEP>
 800b65e:	4603      	mov	r3, r0
 800b660:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b662:	7b7b      	ldrb	r3, [r7, #13]
 800b664:	2bff      	cmp	r3, #255	@ 0xff
 800b666:	f000 8174 	beq.w	800b952 <USBD_StdEPReq+0x32e>
 800b66a:	7b7b      	ldrb	r3, [r7, #13]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f040 8170 	bne.w	800b952 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b672:	7b7a      	ldrb	r2, [r7, #13]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b67a:	7b7a      	ldrb	r2, [r7, #13]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	32ae      	adds	r2, #174	@ 0xae
 800b680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	2b00      	cmp	r3, #0
 800b688:	f000 8163 	beq.w	800b952 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b68c:	7b7a      	ldrb	r2, [r7, #13]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	32ae      	adds	r2, #174	@ 0xae
 800b692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	6839      	ldr	r1, [r7, #0]
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	4798      	blx	r3
 800b69e:	4603      	mov	r3, r0
 800b6a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b6a2:	e156      	b.n	800b952 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	785b      	ldrb	r3, [r3, #1]
 800b6a8:	2b03      	cmp	r3, #3
 800b6aa:	d008      	beq.n	800b6be <USBD_StdEPReq+0x9a>
 800b6ac:	2b03      	cmp	r3, #3
 800b6ae:	f300 8145 	bgt.w	800b93c <USBD_StdEPReq+0x318>
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f000 809b 	beq.w	800b7ee <USBD_StdEPReq+0x1ca>
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d03c      	beq.n	800b736 <USBD_StdEPReq+0x112>
 800b6bc:	e13e      	b.n	800b93c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d002      	beq.n	800b6d0 <USBD_StdEPReq+0xac>
 800b6ca:	2b03      	cmp	r3, #3
 800b6cc:	d016      	beq.n	800b6fc <USBD_StdEPReq+0xd8>
 800b6ce:	e02c      	b.n	800b72a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6d0:	7bbb      	ldrb	r3, [r7, #14]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00d      	beq.n	800b6f2 <USBD_StdEPReq+0xce>
 800b6d6:	7bbb      	ldrb	r3, [r7, #14]
 800b6d8:	2b80      	cmp	r3, #128	@ 0x80
 800b6da:	d00a      	beq.n	800b6f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b6dc:	7bbb      	ldrb	r3, [r7, #14]
 800b6de:	4619      	mov	r1, r3
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f001 fa45 	bl	800cb70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6e6:	2180      	movs	r1, #128	@ 0x80
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f001 fa41 	bl	800cb70 <USBD_LL_StallEP>
 800b6ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b6f0:	e020      	b.n	800b734 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fca4 	bl	800c042 <USBD_CtlError>
              break;
 800b6fa:	e01b      	b.n	800b734 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	885b      	ldrh	r3, [r3, #2]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10e      	bne.n	800b722 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b704:	7bbb      	ldrb	r3, [r7, #14]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00b      	beq.n	800b722 <USBD_StdEPReq+0xfe>
 800b70a:	7bbb      	ldrb	r3, [r7, #14]
 800b70c:	2b80      	cmp	r3, #128	@ 0x80
 800b70e:	d008      	beq.n	800b722 <USBD_StdEPReq+0xfe>
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	88db      	ldrh	r3, [r3, #6]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d104      	bne.n	800b722 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b718:	7bbb      	ldrb	r3, [r7, #14]
 800b71a:	4619      	mov	r1, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f001 fa27 	bl	800cb70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 fd58 	bl	800c1d8 <USBD_CtlSendStatus>

              break;
 800b728:	e004      	b.n	800b734 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b72a:	6839      	ldr	r1, [r7, #0]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fc88 	bl	800c042 <USBD_CtlError>
              break;
 800b732:	bf00      	nop
          }
          break;
 800b734:	e107      	b.n	800b946 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d002      	beq.n	800b748 <USBD_StdEPReq+0x124>
 800b742:	2b03      	cmp	r3, #3
 800b744:	d016      	beq.n	800b774 <USBD_StdEPReq+0x150>
 800b746:	e04b      	b.n	800b7e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b748:	7bbb      	ldrb	r3, [r7, #14]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00d      	beq.n	800b76a <USBD_StdEPReq+0x146>
 800b74e:	7bbb      	ldrb	r3, [r7, #14]
 800b750:	2b80      	cmp	r3, #128	@ 0x80
 800b752:	d00a      	beq.n	800b76a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b754:	7bbb      	ldrb	r3, [r7, #14]
 800b756:	4619      	mov	r1, r3
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f001 fa09 	bl	800cb70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b75e:	2180      	movs	r1, #128	@ 0x80
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f001 fa05 	bl	800cb70 <USBD_LL_StallEP>
 800b766:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b768:	e040      	b.n	800b7ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fc68 	bl	800c042 <USBD_CtlError>
              break;
 800b772:	e03b      	b.n	800b7ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	885b      	ldrh	r3, [r3, #2]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d136      	bne.n	800b7ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b77c:	7bbb      	ldrb	r3, [r7, #14]
 800b77e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b782:	2b00      	cmp	r3, #0
 800b784:	d004      	beq.n	800b790 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b786:	7bbb      	ldrb	r3, [r7, #14]
 800b788:	4619      	mov	r1, r3
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f001 fa26 	bl	800cbdc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 fd21 	bl	800c1d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b796:	7bbb      	ldrb	r3, [r7, #14]
 800b798:	4619      	mov	r1, r3
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7ff fde4 	bl	800b368 <USBD_CoreFindEP>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7a4:	7b7b      	ldrb	r3, [r7, #13]
 800b7a6:	2bff      	cmp	r3, #255	@ 0xff
 800b7a8:	d01f      	beq.n	800b7ea <USBD_StdEPReq+0x1c6>
 800b7aa:	7b7b      	ldrb	r3, [r7, #13]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d11c      	bne.n	800b7ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b7b0:	7b7a      	ldrb	r2, [r7, #13]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b7b8:	7b7a      	ldrb	r2, [r7, #13]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	32ae      	adds	r2, #174	@ 0xae
 800b7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d010      	beq.n	800b7ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b7c8:	7b7a      	ldrb	r2, [r7, #13]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	32ae      	adds	r2, #174	@ 0xae
 800b7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	6839      	ldr	r1, [r7, #0]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	4798      	blx	r3
 800b7da:	4603      	mov	r3, r0
 800b7dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b7de:	e004      	b.n	800b7ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fc2d 	bl	800c042 <USBD_CtlError>
              break;
 800b7e8:	e000      	b.n	800b7ec <USBD_StdEPReq+0x1c8>
              break;
 800b7ea:	bf00      	nop
          }
          break;
 800b7ec:	e0ab      	b.n	800b946 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d002      	beq.n	800b800 <USBD_StdEPReq+0x1dc>
 800b7fa:	2b03      	cmp	r3, #3
 800b7fc:	d032      	beq.n	800b864 <USBD_StdEPReq+0x240>
 800b7fe:	e097      	b.n	800b930 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b800:	7bbb      	ldrb	r3, [r7, #14]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d007      	beq.n	800b816 <USBD_StdEPReq+0x1f2>
 800b806:	7bbb      	ldrb	r3, [r7, #14]
 800b808:	2b80      	cmp	r3, #128	@ 0x80
 800b80a:	d004      	beq.n	800b816 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b80c:	6839      	ldr	r1, [r7, #0]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 fc17 	bl	800c042 <USBD_CtlError>
                break;
 800b814:	e091      	b.n	800b93a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	da0b      	bge.n	800b836 <USBD_StdEPReq+0x212>
 800b81e:	7bbb      	ldrb	r3, [r7, #14]
 800b820:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b824:	4613      	mov	r3, r2
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	4413      	add	r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	3310      	adds	r3, #16
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	4413      	add	r3, r2
 800b832:	3304      	adds	r3, #4
 800b834:	e00b      	b.n	800b84e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b836:	7bbb      	ldrb	r3, [r7, #14]
 800b838:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b83c:	4613      	mov	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	4413      	add	r3, r2
 800b84c:	3304      	adds	r3, #4
 800b84e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	2200      	movs	r2, #0
 800b854:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	2202      	movs	r2, #2
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 fc61 	bl	800c124 <USBD_CtlSendData>
              break;
 800b862:	e06a      	b.n	800b93a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	da11      	bge.n	800b890 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b86c:	7bbb      	ldrb	r3, [r7, #14]
 800b86e:	f003 020f 	and.w	r2, r3, #15
 800b872:	6879      	ldr	r1, [r7, #4]
 800b874:	4613      	mov	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4413      	add	r3, r2
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	440b      	add	r3, r1
 800b87e:	3324      	adds	r3, #36	@ 0x24
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d117      	bne.n	800b8b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b886:	6839      	ldr	r1, [r7, #0]
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 fbda 	bl	800c042 <USBD_CtlError>
                  break;
 800b88e:	e054      	b.n	800b93a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b890:	7bbb      	ldrb	r3, [r7, #14]
 800b892:	f003 020f 	and.w	r2, r3, #15
 800b896:	6879      	ldr	r1, [r7, #4]
 800b898:	4613      	mov	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	440b      	add	r3, r1
 800b8a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d104      	bne.n	800b8b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b8ac:	6839      	ldr	r1, [r7, #0]
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 fbc7 	bl	800c042 <USBD_CtlError>
                  break;
 800b8b4:	e041      	b.n	800b93a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	da0b      	bge.n	800b8d6 <USBD_StdEPReq+0x2b2>
 800b8be:	7bbb      	ldrb	r3, [r7, #14]
 800b8c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	4413      	add	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	3310      	adds	r3, #16
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	3304      	adds	r3, #4
 800b8d4:	e00b      	b.n	800b8ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b8d6:	7bbb      	ldrb	r3, [r7, #14]
 800b8d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8dc:	4613      	mov	r3, r2
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	4413      	add	r3, r2
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	3304      	adds	r3, #4
 800b8ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d002      	beq.n	800b8fc <USBD_StdEPReq+0x2d8>
 800b8f6:	7bbb      	ldrb	r3, [r7, #14]
 800b8f8:	2b80      	cmp	r3, #128	@ 0x80
 800b8fa:	d103      	bne.n	800b904 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	2200      	movs	r2, #0
 800b900:	601a      	str	r2, [r3, #0]
 800b902:	e00e      	b.n	800b922 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b904:	7bbb      	ldrb	r3, [r7, #14]
 800b906:	4619      	mov	r1, r3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f001 f99d 	bl	800cc48 <USBD_LL_IsStallEP>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d003      	beq.n	800b91c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	2201      	movs	r2, #1
 800b918:	601a      	str	r2, [r3, #0]
 800b91a:	e002      	b.n	800b922 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	2200      	movs	r2, #0
 800b920:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	2202      	movs	r2, #2
 800b926:	4619      	mov	r1, r3
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fbfb 	bl	800c124 <USBD_CtlSendData>
              break;
 800b92e:	e004      	b.n	800b93a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b930:	6839      	ldr	r1, [r7, #0]
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fb85 	bl	800c042 <USBD_CtlError>
              break;
 800b938:	bf00      	nop
          }
          break;
 800b93a:	e004      	b.n	800b946 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b93c:	6839      	ldr	r1, [r7, #0]
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 fb7f 	bl	800c042 <USBD_CtlError>
          break;
 800b944:	bf00      	nop
      }
      break;
 800b946:	e005      	b.n	800b954 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fb79 	bl	800c042 <USBD_CtlError>
      break;
 800b950:	e000      	b.n	800b954 <USBD_StdEPReq+0x330>
      break;
 800b952:	bf00      	nop
  }

  return ret;
 800b954:	7bfb      	ldrb	r3, [r7, #15]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
	...

0800b960 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b96a:	2300      	movs	r3, #0
 800b96c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b96e:	2300      	movs	r3, #0
 800b970:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b972:	2300      	movs	r3, #0
 800b974:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	885b      	ldrh	r3, [r3, #2]
 800b97a:	0a1b      	lsrs	r3, r3, #8
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	3b01      	subs	r3, #1
 800b980:	2b0e      	cmp	r3, #14
 800b982:	f200 8152 	bhi.w	800bc2a <USBD_GetDescriptor+0x2ca>
 800b986:	a201      	add	r2, pc, #4	@ (adr r2, 800b98c <USBD_GetDescriptor+0x2c>)
 800b988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98c:	0800b9fd 	.word	0x0800b9fd
 800b990:	0800ba15 	.word	0x0800ba15
 800b994:	0800ba55 	.word	0x0800ba55
 800b998:	0800bc2b 	.word	0x0800bc2b
 800b99c:	0800bc2b 	.word	0x0800bc2b
 800b9a0:	0800bbcb 	.word	0x0800bbcb
 800b9a4:	0800bbf7 	.word	0x0800bbf7
 800b9a8:	0800bc2b 	.word	0x0800bc2b
 800b9ac:	0800bc2b 	.word	0x0800bc2b
 800b9b0:	0800bc2b 	.word	0x0800bc2b
 800b9b4:	0800bc2b 	.word	0x0800bc2b
 800b9b8:	0800bc2b 	.word	0x0800bc2b
 800b9bc:	0800bc2b 	.word	0x0800bc2b
 800b9c0:	0800bc2b 	.word	0x0800bc2b
 800b9c4:	0800b9c9 	.word	0x0800b9c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9ce:	69db      	ldr	r3, [r3, #28]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00b      	beq.n	800b9ec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9da:	69db      	ldr	r3, [r3, #28]
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	7c12      	ldrb	r2, [r2, #16]
 800b9e0:	f107 0108 	add.w	r1, r7, #8
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	4798      	blx	r3
 800b9e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9ea:	e126      	b.n	800bc3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fb27 	bl	800c042 <USBD_CtlError>
        err++;
 800b9f4:	7afb      	ldrb	r3, [r7, #11]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	72fb      	strb	r3, [r7, #11]
      break;
 800b9fa:	e11e      	b.n	800bc3a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	7c12      	ldrb	r2, [r2, #16]
 800ba08:	f107 0108 	add.w	r1, r7, #8
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	4798      	blx	r3
 800ba10:	60f8      	str	r0, [r7, #12]
      break;
 800ba12:	e112      	b.n	800bc3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	7c1b      	ldrb	r3, [r3, #16]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10d      	bne.n	800ba38 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba24:	f107 0208 	add.w	r2, r7, #8
 800ba28:	4610      	mov	r0, r2
 800ba2a:	4798      	blx	r3
 800ba2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	3301      	adds	r3, #1
 800ba32:	2202      	movs	r2, #2
 800ba34:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ba36:	e100      	b.n	800bc3a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba40:	f107 0208 	add.w	r2, r7, #8
 800ba44:	4610      	mov	r0, r2
 800ba46:	4798      	blx	r3
 800ba48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	2202      	movs	r2, #2
 800ba50:	701a      	strb	r2, [r3, #0]
      break;
 800ba52:	e0f2      	b.n	800bc3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	885b      	ldrh	r3, [r3, #2]
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b05      	cmp	r3, #5
 800ba5c:	f200 80ac 	bhi.w	800bbb8 <USBD_GetDescriptor+0x258>
 800ba60:	a201      	add	r2, pc, #4	@ (adr r2, 800ba68 <USBD_GetDescriptor+0x108>)
 800ba62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba66:	bf00      	nop
 800ba68:	0800ba81 	.word	0x0800ba81
 800ba6c:	0800bab5 	.word	0x0800bab5
 800ba70:	0800bae9 	.word	0x0800bae9
 800ba74:	0800bb1d 	.word	0x0800bb1d
 800ba78:	0800bb51 	.word	0x0800bb51
 800ba7c:	0800bb85 	.word	0x0800bb85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00b      	beq.n	800baa4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	7c12      	ldrb	r2, [r2, #16]
 800ba98:	f107 0108 	add.w	r1, r7, #8
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	4798      	blx	r3
 800baa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800baa2:	e091      	b.n	800bbc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800baa4:	6839      	ldr	r1, [r7, #0]
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 facb 	bl	800c042 <USBD_CtlError>
            err++;
 800baac:	7afb      	ldrb	r3, [r7, #11]
 800baae:	3301      	adds	r3, #1
 800bab0:	72fb      	strb	r3, [r7, #11]
          break;
 800bab2:	e089      	b.n	800bbc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00b      	beq.n	800bad8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	7c12      	ldrb	r2, [r2, #16]
 800bacc:	f107 0108 	add.w	r1, r7, #8
 800bad0:	4610      	mov	r0, r2
 800bad2:	4798      	blx	r3
 800bad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bad6:	e077      	b.n	800bbc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 fab1 	bl	800c042 <USBD_CtlError>
            err++;
 800bae0:	7afb      	ldrb	r3, [r7, #11]
 800bae2:	3301      	adds	r3, #1
 800bae4:	72fb      	strb	r3, [r7, #11]
          break;
 800bae6:	e06f      	b.n	800bbc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00b      	beq.n	800bb0c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	7c12      	ldrb	r2, [r2, #16]
 800bb00:	f107 0108 	add.w	r1, r7, #8
 800bb04:	4610      	mov	r0, r2
 800bb06:	4798      	blx	r3
 800bb08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb0a:	e05d      	b.n	800bbc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fa97 	bl	800c042 <USBD_CtlError>
            err++;
 800bb14:	7afb      	ldrb	r3, [r7, #11]
 800bb16:	3301      	adds	r3, #1
 800bb18:	72fb      	strb	r3, [r7, #11]
          break;
 800bb1a:	e055      	b.n	800bbc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00b      	beq.n	800bb40 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	7c12      	ldrb	r2, [r2, #16]
 800bb34:	f107 0108 	add.w	r1, r7, #8
 800bb38:	4610      	mov	r0, r2
 800bb3a:	4798      	blx	r3
 800bb3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb3e:	e043      	b.n	800bbc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bb40:	6839      	ldr	r1, [r7, #0]
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fa7d 	bl	800c042 <USBD_CtlError>
            err++;
 800bb48:	7afb      	ldrb	r3, [r7, #11]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb4e:	e03b      	b.n	800bbc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb56:	695b      	ldr	r3, [r3, #20]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d00b      	beq.n	800bb74 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb62:	695b      	ldr	r3, [r3, #20]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	7c12      	ldrb	r2, [r2, #16]
 800bb68:	f107 0108 	add.w	r1, r7, #8
 800bb6c:	4610      	mov	r0, r2
 800bb6e:	4798      	blx	r3
 800bb70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb72:	e029      	b.n	800bbc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 fa63 	bl	800c042 <USBD_CtlError>
            err++;
 800bb7c:	7afb      	ldrb	r3, [r7, #11]
 800bb7e:	3301      	adds	r3, #1
 800bb80:	72fb      	strb	r3, [r7, #11]
          break;
 800bb82:	e021      	b.n	800bbc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb8a:	699b      	ldr	r3, [r3, #24]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00b      	beq.n	800bba8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb96:	699b      	ldr	r3, [r3, #24]
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	7c12      	ldrb	r2, [r2, #16]
 800bb9c:	f107 0108 	add.w	r1, r7, #8
 800bba0:	4610      	mov	r0, r2
 800bba2:	4798      	blx	r3
 800bba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bba6:	e00f      	b.n	800bbc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bba8:	6839      	ldr	r1, [r7, #0]
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fa49 	bl	800c042 <USBD_CtlError>
            err++;
 800bbb0:	7afb      	ldrb	r3, [r7, #11]
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	72fb      	strb	r3, [r7, #11]
          break;
 800bbb6:	e007      	b.n	800bbc8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fa41 	bl	800c042 <USBD_CtlError>
          err++;
 800bbc0:	7afb      	ldrb	r3, [r7, #11]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bbc6:	bf00      	nop
      }
      break;
 800bbc8:	e037      	b.n	800bc3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	7c1b      	ldrb	r3, [r3, #16]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d109      	bne.n	800bbe6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbda:	f107 0208 	add.w	r2, r7, #8
 800bbde:	4610      	mov	r0, r2
 800bbe0:	4798      	blx	r3
 800bbe2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbe4:	e029      	b.n	800bc3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fa2a 	bl	800c042 <USBD_CtlError>
        err++;
 800bbee:	7afb      	ldrb	r3, [r7, #11]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	72fb      	strb	r3, [r7, #11]
      break;
 800bbf4:	e021      	b.n	800bc3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	7c1b      	ldrb	r3, [r3, #16]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d10d      	bne.n	800bc1a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc06:	f107 0208 	add.w	r2, r7, #8
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	4798      	blx	r3
 800bc0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	3301      	adds	r3, #1
 800bc14:	2207      	movs	r2, #7
 800bc16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc18:	e00f      	b.n	800bc3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bc1a:	6839      	ldr	r1, [r7, #0]
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 fa10 	bl	800c042 <USBD_CtlError>
        err++;
 800bc22:	7afb      	ldrb	r3, [r7, #11]
 800bc24:	3301      	adds	r3, #1
 800bc26:	72fb      	strb	r3, [r7, #11]
      break;
 800bc28:	e007      	b.n	800bc3a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fa08 	bl	800c042 <USBD_CtlError>
      err++;
 800bc32:	7afb      	ldrb	r3, [r7, #11]
 800bc34:	3301      	adds	r3, #1
 800bc36:	72fb      	strb	r3, [r7, #11]
      break;
 800bc38:	bf00      	nop
  }

  if (err != 0U)
 800bc3a:	7afb      	ldrb	r3, [r7, #11]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d11e      	bne.n	800bc7e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	88db      	ldrh	r3, [r3, #6]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d016      	beq.n	800bc76 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bc48:	893b      	ldrh	r3, [r7, #8]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00e      	beq.n	800bc6c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	88da      	ldrh	r2, [r3, #6]
 800bc52:	893b      	ldrh	r3, [r7, #8]
 800bc54:	4293      	cmp	r3, r2
 800bc56:	bf28      	it	cs
 800bc58:	4613      	movcs	r3, r2
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bc5e:	893b      	ldrh	r3, [r7, #8]
 800bc60:	461a      	mov	r2, r3
 800bc62:	68f9      	ldr	r1, [r7, #12]
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 fa5d 	bl	800c124 <USBD_CtlSendData>
 800bc6a:	e009      	b.n	800bc80 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bc6c:	6839      	ldr	r1, [r7, #0]
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f9e7 	bl	800c042 <USBD_CtlError>
 800bc74:	e004      	b.n	800bc80 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 faae 	bl	800c1d8 <USBD_CtlSendStatus>
 800bc7c:	e000      	b.n	800bc80 <USBD_GetDescriptor+0x320>
    return;
 800bc7e:	bf00      	nop
  }
}
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop

0800bc88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	889b      	ldrh	r3, [r3, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d131      	bne.n	800bcfe <USBD_SetAddress+0x76>
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	88db      	ldrh	r3, [r3, #6]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d12d      	bne.n	800bcfe <USBD_SetAddress+0x76>
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	885b      	ldrh	r3, [r3, #2]
 800bca6:	2b7f      	cmp	r3, #127	@ 0x7f
 800bca8:	d829      	bhi.n	800bcfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	885b      	ldrh	r3, [r3, #2]
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	d104      	bne.n	800bccc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bcc2:	6839      	ldr	r1, [r7, #0]
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 f9bc 	bl	800c042 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcca:	e01d      	b.n	800bd08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	7bfa      	ldrb	r2, [r7, #15]
 800bcd0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 ffe1 	bl	800cca0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 fa7a 	bl	800c1d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d004      	beq.n	800bcf4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2202      	movs	r2, #2
 800bcee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcf2:	e009      	b.n	800bd08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcfc:	e004      	b.n	800bd08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bcfe:	6839      	ldr	r1, [r7, #0]
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 f99e 	bl	800c042 <USBD_CtlError>
  }
}
 800bd06:	bf00      	nop
 800bd08:	bf00      	nop
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	885b      	ldrh	r3, [r3, #2]
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	4b4e      	ldr	r3, [pc, #312]	@ (800be60 <USBD_SetConfig+0x150>)
 800bd26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bd28:	4b4d      	ldr	r3, [pc, #308]	@ (800be60 <USBD_SetConfig+0x150>)
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d905      	bls.n	800bd3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bd30:	6839      	ldr	r1, [r7, #0]
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 f985 	bl	800c042 <USBD_CtlError>
    return USBD_FAIL;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	e08c      	b.n	800be56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d002      	beq.n	800bd4e <USBD_SetConfig+0x3e>
 800bd48:	2b03      	cmp	r3, #3
 800bd4a:	d029      	beq.n	800bda0 <USBD_SetConfig+0x90>
 800bd4c:	e075      	b.n	800be3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bd4e:	4b44      	ldr	r3, [pc, #272]	@ (800be60 <USBD_SetConfig+0x150>)
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d020      	beq.n	800bd98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bd56:	4b42      	ldr	r3, [pc, #264]	@ (800be60 <USBD_SetConfig+0x150>)
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd60:	4b3f      	ldr	r3, [pc, #252]	@ (800be60 <USBD_SetConfig+0x150>)
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	4619      	mov	r1, r3
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f7fe ffb9 	bl	800acde <USBD_SetClassConfig>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bd70:	7bfb      	ldrb	r3, [r7, #15]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d008      	beq.n	800bd88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bd76:	6839      	ldr	r1, [r7, #0]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 f962 	bl	800c042 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2202      	movs	r2, #2
 800bd82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd86:	e065      	b.n	800be54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 fa25 	bl	800c1d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2203      	movs	r2, #3
 800bd92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bd96:	e05d      	b.n	800be54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 fa1d 	bl	800c1d8 <USBD_CtlSendStatus>
      break;
 800bd9e:	e059      	b.n	800be54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bda0:	4b2f      	ldr	r3, [pc, #188]	@ (800be60 <USBD_SetConfig+0x150>)
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d112      	bne.n	800bdce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2202      	movs	r2, #2
 800bdac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bdb0:	4b2b      	ldr	r3, [pc, #172]	@ (800be60 <USBD_SetConfig+0x150>)
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bdba:	4b29      	ldr	r3, [pc, #164]	@ (800be60 <USBD_SetConfig+0x150>)
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f7fe ffa8 	bl	800ad16 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fa06 	bl	800c1d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bdcc:	e042      	b.n	800be54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bdce:	4b24      	ldr	r3, [pc, #144]	@ (800be60 <USBD_SetConfig+0x150>)
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d02a      	beq.n	800be32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	4619      	mov	r1, r3
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f7fe ff96 	bl	800ad16 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bdea:	4b1d      	ldr	r3, [pc, #116]	@ (800be60 <USBD_SetConfig+0x150>)
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bdf4:	4b1a      	ldr	r3, [pc, #104]	@ (800be60 <USBD_SetConfig+0x150>)
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7fe ff6f 	bl	800acde <USBD_SetClassConfig>
 800be00:	4603      	mov	r3, r0
 800be02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800be04:	7bfb      	ldrb	r3, [r7, #15]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00f      	beq.n	800be2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800be0a:	6839      	ldr	r1, [r7, #0]
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 f918 	bl	800c042 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	b2db      	uxtb	r3, r3
 800be18:	4619      	mov	r1, r3
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f7fe ff7b 	bl	800ad16 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2202      	movs	r2, #2
 800be24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800be28:	e014      	b.n	800be54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f9d4 	bl	800c1d8 <USBD_CtlSendStatus>
      break;
 800be30:	e010      	b.n	800be54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 f9d0 	bl	800c1d8 <USBD_CtlSendStatus>
      break;
 800be38:	e00c      	b.n	800be54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 f900 	bl	800c042 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be42:	4b07      	ldr	r3, [pc, #28]	@ (800be60 <USBD_SetConfig+0x150>)
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	4619      	mov	r1, r3
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7fe ff64 	bl	800ad16 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800be4e:	2303      	movs	r3, #3
 800be50:	73fb      	strb	r3, [r7, #15]
      break;
 800be52:	bf00      	nop
  }

  return ret;
 800be54:	7bfb      	ldrb	r3, [r7, #15]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	2000a688 	.word	0x2000a688

0800be64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	88db      	ldrh	r3, [r3, #6]
 800be72:	2b01      	cmp	r3, #1
 800be74:	d004      	beq.n	800be80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 f8e2 	bl	800c042 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800be7e:	e023      	b.n	800bec8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be86:	b2db      	uxtb	r3, r3
 800be88:	2b02      	cmp	r3, #2
 800be8a:	dc02      	bgt.n	800be92 <USBD_GetConfig+0x2e>
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	dc03      	bgt.n	800be98 <USBD_GetConfig+0x34>
 800be90:	e015      	b.n	800bebe <USBD_GetConfig+0x5a>
 800be92:	2b03      	cmp	r3, #3
 800be94:	d00b      	beq.n	800beae <USBD_GetConfig+0x4a>
 800be96:	e012      	b.n	800bebe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	3308      	adds	r3, #8
 800bea2:	2201      	movs	r2, #1
 800bea4:	4619      	mov	r1, r3
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 f93c 	bl	800c124 <USBD_CtlSendData>
        break;
 800beac:	e00c      	b.n	800bec8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	3304      	adds	r3, #4
 800beb2:	2201      	movs	r2, #1
 800beb4:	4619      	mov	r1, r3
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f934 	bl	800c124 <USBD_CtlSendData>
        break;
 800bebc:	e004      	b.n	800bec8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bebe:	6839      	ldr	r1, [r7, #0]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 f8be 	bl	800c042 <USBD_CtlError>
        break;
 800bec6:	bf00      	nop
}
 800bec8:	bf00      	nop
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	3b01      	subs	r3, #1
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d81e      	bhi.n	800bf26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	88db      	ldrh	r3, [r3, #6]
 800beec:	2b02      	cmp	r3, #2
 800beee:	d004      	beq.n	800befa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bef0:	6839      	ldr	r1, [r7, #0]
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 f8a5 	bl	800c042 <USBD_CtlError>
        break;
 800bef8:	e01a      	b.n	800bf30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2201      	movs	r2, #1
 800befe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d005      	beq.n	800bf16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	f043 0202 	orr.w	r2, r3, #2
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	330c      	adds	r3, #12
 800bf1a:	2202      	movs	r2, #2
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 f900 	bl	800c124 <USBD_CtlSendData>
      break;
 800bf24:	e004      	b.n	800bf30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bf26:	6839      	ldr	r1, [r7, #0]
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 f88a 	bl	800c042 <USBD_CtlError>
      break;
 800bf2e:	bf00      	nop
  }
}
 800bf30:	bf00      	nop
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	885b      	ldrh	r3, [r3, #2]
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d107      	bne.n	800bf5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 f940 	bl	800c1d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bf58:	e013      	b.n	800bf82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	885b      	ldrh	r3, [r3, #2]
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d10b      	bne.n	800bf7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	889b      	ldrh	r3, [r3, #4]
 800bf66:	0a1b      	lsrs	r3, r3, #8
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	b2da      	uxtb	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f930 	bl	800c1d8 <USBD_CtlSendStatus>
}
 800bf78:	e003      	b.n	800bf82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bf7a:	6839      	ldr	r1, [r7, #0]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 f860 	bl	800c042 <USBD_CtlError>
}
 800bf82:	bf00      	nop
 800bf84:	3708      	adds	r7, #8
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b082      	sub	sp, #8
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	2b02      	cmp	r3, #2
 800bfa0:	d80b      	bhi.n	800bfba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	885b      	ldrh	r3, [r3, #2]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d10c      	bne.n	800bfc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 f910 	bl	800c1d8 <USBD_CtlSendStatus>
      }
      break;
 800bfb8:	e004      	b.n	800bfc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bfba:	6839      	ldr	r1, [r7, #0]
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 f840 	bl	800c042 <USBD_CtlError>
      break;
 800bfc2:	e000      	b.n	800bfc6 <USBD_ClrFeature+0x3c>
      break;
 800bfc4:	bf00      	nop
  }
}
 800bfc6:	bf00      	nop
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b084      	sub	sp, #16
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	781a      	ldrb	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	781a      	ldrb	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	3301      	adds	r3, #1
 800bff6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bff8:	68f8      	ldr	r0, [r7, #12]
 800bffa:	f7ff fa16 	bl	800b42a <SWAPBYTE>
 800bffe:	4603      	mov	r3, r0
 800c000:	461a      	mov	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	3301      	adds	r3, #1
 800c00a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	3301      	adds	r3, #1
 800c010:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f7ff fa09 	bl	800b42a <SWAPBYTE>
 800c018:	4603      	mov	r3, r0
 800c01a:	461a      	mov	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	3301      	adds	r3, #1
 800c024:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	3301      	adds	r3, #1
 800c02a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	f7ff f9fc 	bl	800b42a <SWAPBYTE>
 800c032:	4603      	mov	r3, r0
 800c034:	461a      	mov	r2, r3
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	80da      	strh	r2, [r3, #6]
}
 800c03a:	bf00      	nop
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b082      	sub	sp, #8
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c04c:	2180      	movs	r1, #128	@ 0x80
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 fd8e 	bl	800cb70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c054:	2100      	movs	r1, #0
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 fd8a 	bl	800cb70 <USBD_LL_StallEP>
}
 800c05c:	bf00      	nop
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c070:	2300      	movs	r3, #0
 800c072:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d036      	beq.n	800c0e8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c07e:	6938      	ldr	r0, [r7, #16]
 800c080:	f000 f836 	bl	800c0f0 <USBD_GetLen>
 800c084:	4603      	mov	r3, r0
 800c086:	3301      	adds	r3, #1
 800c088:	b29b      	uxth	r3, r3
 800c08a:	005b      	lsls	r3, r3, #1
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c092:	7dfb      	ldrb	r3, [r7, #23]
 800c094:	68ba      	ldr	r2, [r7, #8]
 800c096:	4413      	add	r3, r2
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	7812      	ldrb	r2, [r2, #0]
 800c09c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c09e:	7dfb      	ldrb	r3, [r7, #23]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c0a4:	7dfb      	ldrb	r3, [r7, #23]
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	4413      	add	r3, r2
 800c0aa:	2203      	movs	r2, #3
 800c0ac:	701a      	strb	r2, [r3, #0]
  idx++;
 800c0ae:	7dfb      	ldrb	r3, [r7, #23]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c0b4:	e013      	b.n	800c0de <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
 800c0b8:	68ba      	ldr	r2, [r7, #8]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	693a      	ldr	r2, [r7, #16]
 800c0be:	7812      	ldrb	r2, [r2, #0]
 800c0c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	613b      	str	r3, [r7, #16]
    idx++;
 800c0c8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
 800c0d0:	68ba      	ldr	r2, [r7, #8]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c0d8:	7dfb      	ldrb	r3, [r7, #23]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d1e7      	bne.n	800c0b6 <USBD_GetString+0x52>
 800c0e6:	e000      	b.n	800c0ea <USBD_GetString+0x86>
    return;
 800c0e8:	bf00      	nop
  }
}
 800c0ea:	3718      	adds	r7, #24
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c100:	e005      	b.n	800c10e <USBD_GetLen+0x1e>
  {
    len++;
 800c102:	7bfb      	ldrb	r3, [r7, #15]
 800c104:	3301      	adds	r3, #1
 800c106:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	3301      	adds	r3, #1
 800c10c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1f5      	bne.n	800c102 <USBD_GetLen+0x12>
  }

  return len;
 800c116:	7bfb      	ldrb	r3, [r7, #15]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3714      	adds	r7, #20
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2202      	movs	r2, #2
 800c134:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	2100      	movs	r1, #0
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f000 fdde 	bl	800cd0c <USBD_LL_Transmit>

  return USBD_OK;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b084      	sub	sp, #16
 800c15e:	af00      	add	r7, sp, #0
 800c160:	60f8      	str	r0, [r7, #12]
 800c162:	60b9      	str	r1, [r7, #8]
 800c164:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	2100      	movs	r1, #0
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f000 fdcd 	bl	800cd0c <USBD_LL_Transmit>

  return USBD_OK;
 800c172:	2300      	movs	r3, #0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2203      	movs	r2, #3
 800c18c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f000 fde8 	bl	800cd7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b084      	sub	sp, #16
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	60f8      	str	r0, [r7, #12]
 800c1be:	60b9      	str	r1, [r7, #8]
 800c1c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f000 fdd7 	bl	800cd7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2204      	movs	r2, #4
 800c1e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fd8c 	bl	800cd0c <USBD_LL_Transmit>

  return USBD_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b082      	sub	sp, #8
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2205      	movs	r2, #5
 800c20a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c20e:	2300      	movs	r3, #0
 800c210:	2200      	movs	r2, #0
 800c212:	2100      	movs	r1, #0
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fdb1 	bl	800cd7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c21a:	2300      	movs	r3, #0
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c228:	2200      	movs	r2, #0
 800c22a:	4912      	ldr	r1, [pc, #72]	@ (800c274 <MX_USB_DEVICE_Init+0x50>)
 800c22c:	4812      	ldr	r0, [pc, #72]	@ (800c278 <MX_USB_DEVICE_Init+0x54>)
 800c22e:	f7fe fcd9 	bl	800abe4 <USBD_Init>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c238:	f7f4 fec1 	bl	8000fbe <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c23c:	490f      	ldr	r1, [pc, #60]	@ (800c27c <MX_USB_DEVICE_Init+0x58>)
 800c23e:	480e      	ldr	r0, [pc, #56]	@ (800c278 <MX_USB_DEVICE_Init+0x54>)
 800c240:	f7fe fd00 	bl	800ac44 <USBD_RegisterClass>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d001      	beq.n	800c24e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c24a:	f7f4 feb8 	bl	8000fbe <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c24e:	490c      	ldr	r1, [pc, #48]	@ (800c280 <MX_USB_DEVICE_Init+0x5c>)
 800c250:	4809      	ldr	r0, [pc, #36]	@ (800c278 <MX_USB_DEVICE_Init+0x54>)
 800c252:	f7fe fbf7 	bl	800aa44 <USBD_CDC_RegisterInterface>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d001      	beq.n	800c260 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c25c:	f7f4 feaf 	bl	8000fbe <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c260:	4805      	ldr	r0, [pc, #20]	@ (800c278 <MX_USB_DEVICE_Init+0x54>)
 800c262:	f7fe fd25 	bl	800acb0 <USBD_Start>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c26c:	f7f4 fea7 	bl	8000fbe <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c270:	bf00      	nop
 800c272:	bd80      	pop	{r7, pc}
 800c274:	200000ac 	.word	0x200000ac
 800c278:	2000a68c 	.word	0x2000a68c
 800c27c:	20000018 	.word	0x20000018
 800c280:	20000098 	.word	0x20000098

0800c284 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c288:	2200      	movs	r2, #0
 800c28a:	4905      	ldr	r1, [pc, #20]	@ (800c2a0 <CDC_Init_FS+0x1c>)
 800c28c:	4805      	ldr	r0, [pc, #20]	@ (800c2a4 <CDC_Init_FS+0x20>)
 800c28e:	f7fe fbf3 	bl	800aa78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c292:	4905      	ldr	r1, [pc, #20]	@ (800c2a8 <CDC_Init_FS+0x24>)
 800c294:	4803      	ldr	r0, [pc, #12]	@ (800c2a4 <CDC_Init_FS+0x20>)
 800c296:	f7fe fc11 	bl	800aabc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c29a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	2000b168 	.word	0x2000b168
 800c2a4:	2000a68c 	.word	0x2000a68c
 800c2a8:	2000a968 	.word	0x2000a968

0800c2ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c2b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	6039      	str	r1, [r7, #0]
 800c2c6:	71fb      	strb	r3, [r7, #7]
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c2cc:	79fb      	ldrb	r3, [r7, #7]
 800c2ce:	2b23      	cmp	r3, #35	@ 0x23
 800c2d0:	d84a      	bhi.n	800c368 <CDC_Control_FS+0xac>
 800c2d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d8 <CDC_Control_FS+0x1c>)
 800c2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d8:	0800c369 	.word	0x0800c369
 800c2dc:	0800c369 	.word	0x0800c369
 800c2e0:	0800c369 	.word	0x0800c369
 800c2e4:	0800c369 	.word	0x0800c369
 800c2e8:	0800c369 	.word	0x0800c369
 800c2ec:	0800c369 	.word	0x0800c369
 800c2f0:	0800c369 	.word	0x0800c369
 800c2f4:	0800c369 	.word	0x0800c369
 800c2f8:	0800c369 	.word	0x0800c369
 800c2fc:	0800c369 	.word	0x0800c369
 800c300:	0800c369 	.word	0x0800c369
 800c304:	0800c369 	.word	0x0800c369
 800c308:	0800c369 	.word	0x0800c369
 800c30c:	0800c369 	.word	0x0800c369
 800c310:	0800c369 	.word	0x0800c369
 800c314:	0800c369 	.word	0x0800c369
 800c318:	0800c369 	.word	0x0800c369
 800c31c:	0800c369 	.word	0x0800c369
 800c320:	0800c369 	.word	0x0800c369
 800c324:	0800c369 	.word	0x0800c369
 800c328:	0800c369 	.word	0x0800c369
 800c32c:	0800c369 	.word	0x0800c369
 800c330:	0800c369 	.word	0x0800c369
 800c334:	0800c369 	.word	0x0800c369
 800c338:	0800c369 	.word	0x0800c369
 800c33c:	0800c369 	.word	0x0800c369
 800c340:	0800c369 	.word	0x0800c369
 800c344:	0800c369 	.word	0x0800c369
 800c348:	0800c369 	.word	0x0800c369
 800c34c:	0800c369 	.word	0x0800c369
 800c350:	0800c369 	.word	0x0800c369
 800c354:	0800c369 	.word	0x0800c369
 800c358:	0800c369 	.word	0x0800c369
 800c35c:	0800c369 	.word	0x0800c369
 800c360:	0800c369 	.word	0x0800c369
 800c364:	0800c369 	.word	0x0800c369
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c368:	bf00      	nop
  }

  return (USBD_OK);
 800c36a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c382:	6879      	ldr	r1, [r7, #4]
 800c384:	4808      	ldr	r0, [pc, #32]	@ (800c3a8 <CDC_Receive_FS+0x30>)
 800c386:	f7fe fb99 	bl	800aabc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c38a:	4807      	ldr	r0, [pc, #28]	@ (800c3a8 <CDC_Receive_FS+0x30>)
 800c38c:	f7fe fbf4 	bl	800ab78 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); //funkce v main.c
  USB_My_Receive(Buf, *Len);
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4619      	mov	r1, r3
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7f4 fb94 	bl	8000ac4 <USB_My_Receive>

  return (USBD_OK);
 800c39c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3708      	adds	r7, #8
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	2000a68c 	.word	0x2000a68c

0800c3ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800c3f4 <CDC_Transmit_FS+0x48>)
 800c3be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c3c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e00b      	b.n	800c3ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c3d2:	887b      	ldrh	r3, [r7, #2]
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	6879      	ldr	r1, [r7, #4]
 800c3d8:	4806      	ldr	r0, [pc, #24]	@ (800c3f4 <CDC_Transmit_FS+0x48>)
 800c3da:	f7fe fb4d 	bl	800aa78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c3de:	4805      	ldr	r0, [pc, #20]	@ (800c3f4 <CDC_Transmit_FS+0x48>)
 800c3e0:	f7fe fb8a 	bl	800aaf8 <USBD_CDC_TransmitPacket>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	2000a68c 	.word	0x2000a68c

0800c3f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b087      	sub	sp, #28
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	4613      	mov	r3, r2
 800c404:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c406:	2300      	movs	r3, #0
 800c408:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c40a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	371c      	adds	r7, #28
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr
	...

0800c41c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	4603      	mov	r3, r0
 800c424:	6039      	str	r1, [r7, #0]
 800c426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	2212      	movs	r2, #18
 800c42c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c42e:	4b03      	ldr	r3, [pc, #12]	@ (800c43c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c430:	4618      	mov	r0, r3
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	200000cc 	.word	0x200000cc

0800c440 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
 800c446:	4603      	mov	r3, r0
 800c448:	6039      	str	r1, [r7, #0]
 800c44a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	2204      	movs	r2, #4
 800c450:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c452:	4b03      	ldr	r3, [pc, #12]	@ (800c460 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c454:	4618      	mov	r0, r3
 800c456:	370c      	adds	r7, #12
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr
 800c460:	200000ec 	.word	0x200000ec

0800c464 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	4603      	mov	r3, r0
 800c46c:	6039      	str	r1, [r7, #0]
 800c46e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c470:	79fb      	ldrb	r3, [r7, #7]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d105      	bne.n	800c482 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c476:	683a      	ldr	r2, [r7, #0]
 800c478:	4907      	ldr	r1, [pc, #28]	@ (800c498 <USBD_FS_ProductStrDescriptor+0x34>)
 800c47a:	4808      	ldr	r0, [pc, #32]	@ (800c49c <USBD_FS_ProductStrDescriptor+0x38>)
 800c47c:	f7ff fdf2 	bl	800c064 <USBD_GetString>
 800c480:	e004      	b.n	800c48c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c482:	683a      	ldr	r2, [r7, #0]
 800c484:	4904      	ldr	r1, [pc, #16]	@ (800c498 <USBD_FS_ProductStrDescriptor+0x34>)
 800c486:	4805      	ldr	r0, [pc, #20]	@ (800c49c <USBD_FS_ProductStrDescriptor+0x38>)
 800c488:	f7ff fdec 	bl	800c064 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c48c:	4b02      	ldr	r3, [pc, #8]	@ (800c498 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	2000b968 	.word	0x2000b968
 800c49c:	0800cf88 	.word	0x0800cf88

0800c4a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	6039      	str	r1, [r7, #0]
 800c4aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c4ac:	683a      	ldr	r2, [r7, #0]
 800c4ae:	4904      	ldr	r1, [pc, #16]	@ (800c4c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c4b0:	4804      	ldr	r0, [pc, #16]	@ (800c4c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c4b2:	f7ff fdd7 	bl	800c064 <USBD_GetString>
  return USBD_StrDesc;
 800c4b6:	4b02      	ldr	r3, [pc, #8]	@ (800c4c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	2000b968 	.word	0x2000b968
 800c4c4:	0800cfa0 	.word	0x0800cfa0

0800c4c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	6039      	str	r1, [r7, #0]
 800c4d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	221a      	movs	r2, #26
 800c4d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c4da:	f000 f855 	bl	800c588 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c4de:	4b02      	ldr	r3, [pc, #8]	@ (800c4e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3708      	adds	r7, #8
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	200000f0 	.word	0x200000f0

0800c4ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	6039      	str	r1, [r7, #0]
 800c4f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c4f8:	79fb      	ldrb	r3, [r7, #7]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d105      	bne.n	800c50a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c4fe:	683a      	ldr	r2, [r7, #0]
 800c500:	4907      	ldr	r1, [pc, #28]	@ (800c520 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c502:	4808      	ldr	r0, [pc, #32]	@ (800c524 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c504:	f7ff fdae 	bl	800c064 <USBD_GetString>
 800c508:	e004      	b.n	800c514 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	4904      	ldr	r1, [pc, #16]	@ (800c520 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c50e:	4805      	ldr	r0, [pc, #20]	@ (800c524 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c510:	f7ff fda8 	bl	800c064 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c514:	4b02      	ldr	r3, [pc, #8]	@ (800c520 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c516:	4618      	mov	r0, r3
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	2000b968 	.word	0x2000b968
 800c524:	0800cfb4 	.word	0x0800cfb4

0800c528 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	4603      	mov	r3, r0
 800c530:	6039      	str	r1, [r7, #0]
 800c532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c534:	79fb      	ldrb	r3, [r7, #7]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d105      	bne.n	800c546 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c53a:	683a      	ldr	r2, [r7, #0]
 800c53c:	4907      	ldr	r1, [pc, #28]	@ (800c55c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c53e:	4808      	ldr	r0, [pc, #32]	@ (800c560 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c540:	f7ff fd90 	bl	800c064 <USBD_GetString>
 800c544:	e004      	b.n	800c550 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c546:	683a      	ldr	r2, [r7, #0]
 800c548:	4904      	ldr	r1, [pc, #16]	@ (800c55c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c54a:	4805      	ldr	r0, [pc, #20]	@ (800c560 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c54c:	f7ff fd8a 	bl	800c064 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c550:	4b02      	ldr	r3, [pc, #8]	@ (800c55c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c552:	4618      	mov	r0, r3
 800c554:	3708      	adds	r7, #8
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	2000b968 	.word	0x2000b968
 800c560:	0800cfc0 	.word	0x0800cfc0

0800c564 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	4603      	mov	r3, r0
 800c56c:	6039      	str	r1, [r7, #0]
 800c56e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	220c      	movs	r2, #12
 800c574:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c576:	4b03      	ldr	r3, [pc, #12]	@ (800c584 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c578:	4618      	mov	r0, r3
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr
 800c584:	200000e0 	.word	0x200000e0

0800c588 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c58e:	4b0f      	ldr	r3, [pc, #60]	@ (800c5cc <Get_SerialNum+0x44>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c594:	4b0e      	ldr	r3, [pc, #56]	@ (800c5d0 <Get_SerialNum+0x48>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c59a:	4b0e      	ldr	r3, [pc, #56]	@ (800c5d4 <Get_SerialNum+0x4c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d009      	beq.n	800c5c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c5ae:	2208      	movs	r2, #8
 800c5b0:	4909      	ldr	r1, [pc, #36]	@ (800c5d8 <Get_SerialNum+0x50>)
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f000 f814 	bl	800c5e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c5b8:	2204      	movs	r2, #4
 800c5ba:	4908      	ldr	r1, [pc, #32]	@ (800c5dc <Get_SerialNum+0x54>)
 800c5bc:	68b8      	ldr	r0, [r7, #8]
 800c5be:	f000 f80f 	bl	800c5e0 <IntToUnicode>
  }
}
 800c5c2:	bf00      	nop
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	1fff7590 	.word	0x1fff7590
 800c5d0:	1fff7594 	.word	0x1fff7594
 800c5d4:	1fff7598 	.word	0x1fff7598
 800c5d8:	200000f2 	.word	0x200000f2
 800c5dc:	20000102 	.word	0x20000102

0800c5e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b087      	sub	sp, #28
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	75fb      	strb	r3, [r7, #23]
 800c5f6:	e027      	b.n	800c648 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	0f1b      	lsrs	r3, r3, #28
 800c5fc:	2b09      	cmp	r3, #9
 800c5fe:	d80b      	bhi.n	800c618 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	0f1b      	lsrs	r3, r3, #28
 800c604:	b2da      	uxtb	r2, r3
 800c606:	7dfb      	ldrb	r3, [r7, #23]
 800c608:	005b      	lsls	r3, r3, #1
 800c60a:	4619      	mov	r1, r3
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	440b      	add	r3, r1
 800c610:	3230      	adds	r2, #48	@ 0x30
 800c612:	b2d2      	uxtb	r2, r2
 800c614:	701a      	strb	r2, [r3, #0]
 800c616:	e00a      	b.n	800c62e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	0f1b      	lsrs	r3, r3, #28
 800c61c:	b2da      	uxtb	r2, r3
 800c61e:	7dfb      	ldrb	r3, [r7, #23]
 800c620:	005b      	lsls	r3, r3, #1
 800c622:	4619      	mov	r1, r3
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	440b      	add	r3, r1
 800c628:	3237      	adds	r2, #55	@ 0x37
 800c62a:	b2d2      	uxtb	r2, r2
 800c62c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	011b      	lsls	r3, r3, #4
 800c632:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c634:	7dfb      	ldrb	r3, [r7, #23]
 800c636:	005b      	lsls	r3, r3, #1
 800c638:	3301      	adds	r3, #1
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	4413      	add	r3, r2
 800c63e:	2200      	movs	r2, #0
 800c640:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c642:	7dfb      	ldrb	r3, [r7, #23]
 800c644:	3301      	adds	r3, #1
 800c646:	75fb      	strb	r3, [r7, #23]
 800c648:	7dfa      	ldrb	r2, [r7, #23]
 800c64a:	79fb      	ldrb	r3, [r7, #7]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d3d3      	bcc.n	800c5f8 <IntToUnicode+0x18>
  }
}
 800c650:	bf00      	nop
 800c652:	bf00      	nop
 800c654:	371c      	adds	r7, #28
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr
	...

0800c660 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b0b0      	sub	sp, #192	@ 0xc0
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c668:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800c66c:	2200      	movs	r2, #0
 800c66e:	601a      	str	r2, [r3, #0]
 800c670:	605a      	str	r2, [r3, #4]
 800c672:	609a      	str	r2, [r3, #8]
 800c674:	60da      	str	r2, [r3, #12]
 800c676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c678:	f107 0318 	add.w	r3, r7, #24
 800c67c:	2294      	movs	r2, #148	@ 0x94
 800c67e:	2100      	movs	r1, #0
 800c680:	4618      	mov	r0, r3
 800c682:	f000 fc33 	bl	800ceec <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c68e:	d174      	bne.n	800c77a <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c690:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c694:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c696:	2300      	movs	r3, #0
 800c698:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c69c:	f107 0318 	add.w	r3, r7, #24
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7f9 fc8b 	bl	8005fbc <HAL_RCCEx_PeriphCLKConfig>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d001      	beq.n	800c6b0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800c6ac:	f7f4 fc87 	bl	8000fbe <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6b0:	4b34      	ldr	r3, [pc, #208]	@ (800c784 <HAL_PCD_MspInit+0x124>)
 800c6b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6b4:	4a33      	ldr	r2, [pc, #204]	@ (800c784 <HAL_PCD_MspInit+0x124>)
 800c6b6:	f043 0301 	orr.w	r3, r3, #1
 800c6ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c6bc:	4b31      	ldr	r3, [pc, #196]	@ (800c784 <HAL_PCD_MspInit+0x124>)
 800c6be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6c0:	f003 0301 	and.w	r3, r3, #1
 800c6c4:	617b      	str	r3, [r7, #20]
 800c6c6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800c6c8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800c6cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6dc:	2303      	movs	r3, #3
 800c6de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c6e2:	230a      	movs	r3, #10
 800c6e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c6f2:	f7f7 f923 	bl	800393c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800c6f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c6fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c6fe:	2300      	movs	r3, #0
 800c700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c704:	2300      	movs	r3, #0
 800c706:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c70a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800c70e:	4619      	mov	r1, r3
 800c710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c714:	f7f7 f912 	bl	800393c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c718:	4b1a      	ldr	r3, [pc, #104]	@ (800c784 <HAL_PCD_MspInit+0x124>)
 800c71a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c71c:	4a19      	ldr	r2, [pc, #100]	@ (800c784 <HAL_PCD_MspInit+0x124>)
 800c71e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c724:	4b17      	ldr	r3, [pc, #92]	@ (800c784 <HAL_PCD_MspInit+0x124>)
 800c726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c728:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c72c:	613b      	str	r3, [r7, #16]
 800c72e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c730:	4b14      	ldr	r3, [pc, #80]	@ (800c784 <HAL_PCD_MspInit+0x124>)
 800c732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d114      	bne.n	800c766 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c73c:	4b11      	ldr	r3, [pc, #68]	@ (800c784 <HAL_PCD_MspInit+0x124>)
 800c73e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c740:	4a10      	ldr	r2, [pc, #64]	@ (800c784 <HAL_PCD_MspInit+0x124>)
 800c742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c746:	6593      	str	r3, [r2, #88]	@ 0x58
 800c748:	4b0e      	ldr	r3, [pc, #56]	@ (800c784 <HAL_PCD_MspInit+0x124>)
 800c74a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c74c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c750:	60fb      	str	r3, [r7, #12]
 800c752:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800c754:	f7f8 fd3a 	bl	80051cc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c758:	4b0a      	ldr	r3, [pc, #40]	@ (800c784 <HAL_PCD_MspInit+0x124>)
 800c75a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c75c:	4a09      	ldr	r2, [pc, #36]	@ (800c784 <HAL_PCD_MspInit+0x124>)
 800c75e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c762:	6593      	str	r3, [r2, #88]	@ 0x58
 800c764:	e001      	b.n	800c76a <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800c766:	f7f8 fd31 	bl	80051cc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c76a:	2200      	movs	r2, #0
 800c76c:	2100      	movs	r1, #0
 800c76e:	2043      	movs	r0, #67	@ 0x43
 800c770:	f7f6 fd37 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c774:	2043      	movs	r0, #67	@ 0x43
 800c776:	f7f6 fd50 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c77a:	bf00      	nop
 800c77c:	37c0      	adds	r7, #192	@ 0xc0
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	40021000 	.word	0x40021000

0800c788 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800c79c:	4619      	mov	r1, r3
 800c79e:	4610      	mov	r0, r2
 800c7a0:	f7fe fad3 	bl	800ad4a <USBD_LL_SetupStage>
}
 800c7a4:	bf00      	nop
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800c7be:	78fa      	ldrb	r2, [r7, #3]
 800c7c0:	6879      	ldr	r1, [r7, #4]
 800c7c2:	4613      	mov	r3, r2
 800c7c4:	00db      	lsls	r3, r3, #3
 800c7c6:	4413      	add	r3, r2
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	440b      	add	r3, r1
 800c7cc:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	78fb      	ldrb	r3, [r7, #3]
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	f7fe fb0d 	bl	800adf4 <USBD_LL_DataOutStage>
}
 800c7da:	bf00      	nop
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b082      	sub	sp, #8
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800c7f4:	78fa      	ldrb	r2, [r7, #3]
 800c7f6:	6879      	ldr	r1, [r7, #4]
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	00db      	lsls	r3, r3, #3
 800c7fc:	4413      	add	r3, r2
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	440b      	add	r3, r1
 800c802:	3348      	adds	r3, #72	@ 0x48
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	78fb      	ldrb	r3, [r7, #3]
 800c808:	4619      	mov	r1, r3
 800c80a:	f7fe fba6 	bl	800af5a <USBD_LL_DataInStage>
}
 800c80e:	bf00      	nop
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b082      	sub	sp, #8
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c824:	4618      	mov	r0, r3
 800c826:	f7fe fce0 	bl	800b1ea <USBD_LL_SOF>
}
 800c82a:	bf00      	nop
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b084      	sub	sp, #16
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c83a:	2301      	movs	r3, #1
 800c83c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	2b02      	cmp	r3, #2
 800c844:	d001      	beq.n	800c84a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c846:	f7f4 fbba 	bl	8000fbe <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c850:	7bfa      	ldrb	r2, [r7, #15]
 800c852:	4611      	mov	r1, r2
 800c854:	4618      	mov	r0, r3
 800c856:	f7fe fc84 	bl	800b162 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c860:	4618      	mov	r0, r3
 800c862:	f7fe fc2c 	bl	800b0be <USBD_LL_Reset>
}
 800c866:	bf00      	nop
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
	...

0800c870 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	6812      	ldr	r2, [r2, #0]
 800c886:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c88a:	f043 0301 	orr.w	r3, r3, #1
 800c88e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c896:	4618      	mov	r0, r3
 800c898:	f7fe fc73 	bl	800b182 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a1b      	ldr	r3, [r3, #32]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d005      	beq.n	800c8b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8a4:	4b04      	ldr	r3, [pc, #16]	@ (800c8b8 <HAL_PCD_SuspendCallback+0x48>)
 800c8a6:	691b      	ldr	r3, [r3, #16]
 800c8a8:	4a03      	ldr	r2, [pc, #12]	@ (800c8b8 <HAL_PCD_SuspendCallback+0x48>)
 800c8aa:	f043 0306 	orr.w	r3, r3, #6
 800c8ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c8b0:	bf00      	nop
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	e000ed00 	.word	0xe000ed00

0800c8bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	6812      	ldr	r2, [r2, #0]
 800c8d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c8d6:	f023 0301 	bic.w	r3, r3, #1
 800c8da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6a1b      	ldr	r3, [r3, #32]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d007      	beq.n	800c8f4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8e4:	4b08      	ldr	r3, [pc, #32]	@ (800c908 <HAL_PCD_ResumeCallback+0x4c>)
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	4a07      	ldr	r2, [pc, #28]	@ (800c908 <HAL_PCD_ResumeCallback+0x4c>)
 800c8ea:	f023 0306 	bic.w	r3, r3, #6
 800c8ee:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c8f0:	f000 faf6 	bl	800cee0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7fe fc5d 	bl	800b1ba <USBD_LL_Resume>
}
 800c900:	bf00      	nop
 800c902:	3708      	adds	r7, #8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	e000ed00 	.word	0xe000ed00

0800c90c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	460b      	mov	r3, r1
 800c916:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c91e:	78fa      	ldrb	r2, [r7, #3]
 800c920:	4611      	mov	r1, r2
 800c922:	4618      	mov	r0, r3
 800c924:	f7fe fcb3 	bl	800b28e <USBD_LL_IsoOUTIncomplete>
}
 800c928:	bf00      	nop
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	460b      	mov	r3, r1
 800c93a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c942:	78fa      	ldrb	r2, [r7, #3]
 800c944:	4611      	mov	r1, r2
 800c946:	4618      	mov	r0, r3
 800c948:	f7fe fc6f 	bl	800b22a <USBD_LL_IsoINIncomplete>
}
 800c94c:	bf00      	nop
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c962:	4618      	mov	r0, r3
 800c964:	f7fe fcc5 	bl	800b2f2 <USBD_LL_DevConnected>
}
 800c968:	bf00      	nop
 800c96a:	3708      	adds	r7, #8
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c97e:	4618      	mov	r0, r3
 800c980:	f7fe fcc2 	bl	800b308 <USBD_LL_DevDisconnected>
}
 800c984:	bf00      	nop
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d13c      	bne.n	800ca16 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c99c:	4a20      	ldr	r2, [pc, #128]	@ (800ca20 <USBD_LL_Init+0x94>)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	4a1e      	ldr	r2, [pc, #120]	@ (800ca20 <USBD_LL_Init+0x94>)
 800c9a8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c9ac:	4b1c      	ldr	r3, [pc, #112]	@ (800ca20 <USBD_LL_Init+0x94>)
 800c9ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c9b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c9b4:	4b1a      	ldr	r3, [pc, #104]	@ (800ca20 <USBD_LL_Init+0x94>)
 800c9b6:	2206      	movs	r2, #6
 800c9b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c9ba:	4b19      	ldr	r3, [pc, #100]	@ (800ca20 <USBD_LL_Init+0x94>)
 800c9bc:	2202      	movs	r2, #2
 800c9be:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c9c0:	4b17      	ldr	r3, [pc, #92]	@ (800ca20 <USBD_LL_Init+0x94>)
 800c9c2:	2202      	movs	r2, #2
 800c9c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800c9c6:	4b16      	ldr	r3, [pc, #88]	@ (800ca20 <USBD_LL_Init+0x94>)
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c9cc:	4b14      	ldr	r3, [pc, #80]	@ (800ca20 <USBD_LL_Init+0x94>)
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c9d2:	4b13      	ldr	r3, [pc, #76]	@ (800ca20 <USBD_LL_Init+0x94>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800c9d8:	4b11      	ldr	r3, [pc, #68]	@ (800ca20 <USBD_LL_Init+0x94>)
 800c9da:	2201      	movs	r2, #1
 800c9dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c9de:	4b10      	ldr	r3, [pc, #64]	@ (800ca20 <USBD_LL_Init+0x94>)
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c9e4:	4b0e      	ldr	r3, [pc, #56]	@ (800ca20 <USBD_LL_Init+0x94>)
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c9ea:	480d      	ldr	r0, [pc, #52]	@ (800ca20 <USBD_LL_Init+0x94>)
 800c9ec:	f7f7 f982 	bl	8003cf4 <HAL_PCD_Init>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d001      	beq.n	800c9fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c9f6:	f7f4 fae2 	bl	8000fbe <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c9fa:	2180      	movs	r1, #128	@ 0x80
 800c9fc:	4808      	ldr	r0, [pc, #32]	@ (800ca20 <USBD_LL_Init+0x94>)
 800c9fe:	f7f8 faec 	bl	8004fda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ca02:	2240      	movs	r2, #64	@ 0x40
 800ca04:	2100      	movs	r1, #0
 800ca06:	4806      	ldr	r0, [pc, #24]	@ (800ca20 <USBD_LL_Init+0x94>)
 800ca08:	f7f8 faa0 	bl	8004f4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ca0c:	2280      	movs	r2, #128	@ 0x80
 800ca0e:	2101      	movs	r1, #1
 800ca10:	4803      	ldr	r0, [pc, #12]	@ (800ca20 <USBD_LL_Init+0x94>)
 800ca12:	f7f8 fa9b 	bl	8004f4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ca16:	2300      	movs	r3, #0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	2000bb68 	.word	0x2000bb68

0800ca24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca30:	2300      	movs	r3, #0
 800ca32:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7f7 fa7e 	bl	8003f3c <HAL_PCD_Start>
 800ca40:	4603      	mov	r3, r0
 800ca42:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ca44:	7bbb      	ldrb	r3, [r7, #14]
 800ca46:	2b03      	cmp	r3, #3
 800ca48:	d816      	bhi.n	800ca78 <USBD_LL_Start+0x54>
 800ca4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ca50 <USBD_LL_Start+0x2c>)
 800ca4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca50:	0800ca61 	.word	0x0800ca61
 800ca54:	0800ca67 	.word	0x0800ca67
 800ca58:	0800ca6d 	.word	0x0800ca6d
 800ca5c:	0800ca73 	.word	0x0800ca73
    case HAL_OK :
      usb_status = USBD_OK;
 800ca60:	2300      	movs	r3, #0
 800ca62:	73fb      	strb	r3, [r7, #15]
    break;
 800ca64:	e00b      	b.n	800ca7e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca66:	2303      	movs	r3, #3
 800ca68:	73fb      	strb	r3, [r7, #15]
    break;
 800ca6a:	e008      	b.n	800ca7e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca70:	e005      	b.n	800ca7e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca72:	2303      	movs	r3, #3
 800ca74:	73fb      	strb	r3, [r7, #15]
    break;
 800ca76:	e002      	b.n	800ca7e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ca78:	2303      	movs	r3, #3
 800ca7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca7c:	bf00      	nop
  }
  return usb_status;
 800ca7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	4608      	mov	r0, r1
 800ca92:	4611      	mov	r1, r2
 800ca94:	461a      	mov	r2, r3
 800ca96:	4603      	mov	r3, r0
 800ca98:	70fb      	strb	r3, [r7, #3]
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	70bb      	strb	r3, [r7, #2]
 800ca9e:	4613      	mov	r3, r2
 800caa0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cab0:	78bb      	ldrb	r3, [r7, #2]
 800cab2:	883a      	ldrh	r2, [r7, #0]
 800cab4:	78f9      	ldrb	r1, [r7, #3]
 800cab6:	f7f7 ff28 	bl	800490a <HAL_PCD_EP_Open>
 800caba:	4603      	mov	r3, r0
 800cabc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cabe:	7bbb      	ldrb	r3, [r7, #14]
 800cac0:	2b03      	cmp	r3, #3
 800cac2:	d817      	bhi.n	800caf4 <USBD_LL_OpenEP+0x6c>
 800cac4:	a201      	add	r2, pc, #4	@ (adr r2, 800cacc <USBD_LL_OpenEP+0x44>)
 800cac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caca:	bf00      	nop
 800cacc:	0800cadd 	.word	0x0800cadd
 800cad0:	0800cae3 	.word	0x0800cae3
 800cad4:	0800cae9 	.word	0x0800cae9
 800cad8:	0800caef 	.word	0x0800caef
    case HAL_OK :
      usb_status = USBD_OK;
 800cadc:	2300      	movs	r3, #0
 800cade:	73fb      	strb	r3, [r7, #15]
    break;
 800cae0:	e00b      	b.n	800cafa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cae2:	2303      	movs	r3, #3
 800cae4:	73fb      	strb	r3, [r7, #15]
    break;
 800cae6:	e008      	b.n	800cafa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cae8:	2301      	movs	r3, #1
 800caea:	73fb      	strb	r3, [r7, #15]
    break;
 800caec:	e005      	b.n	800cafa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800caee:	2303      	movs	r3, #3
 800caf0:	73fb      	strb	r3, [r7, #15]
    break;
 800caf2:	e002      	b.n	800cafa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800caf4:	2303      	movs	r3, #3
 800caf6:	73fb      	strb	r3, [r7, #15]
    break;
 800caf8:	bf00      	nop
  }
  return usb_status;
 800cafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb10:	2300      	movs	r3, #0
 800cb12:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb14:	2300      	movs	r3, #0
 800cb16:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb1e:	78fa      	ldrb	r2, [r7, #3]
 800cb20:	4611      	mov	r1, r2
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7f7 ff59 	bl	80049da <HAL_PCD_EP_Close>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb2c:	7bbb      	ldrb	r3, [r7, #14]
 800cb2e:	2b03      	cmp	r3, #3
 800cb30:	d816      	bhi.n	800cb60 <USBD_LL_CloseEP+0x5c>
 800cb32:	a201      	add	r2, pc, #4	@ (adr r2, 800cb38 <USBD_LL_CloseEP+0x34>)
 800cb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb38:	0800cb49 	.word	0x0800cb49
 800cb3c:	0800cb4f 	.word	0x0800cb4f
 800cb40:	0800cb55 	.word	0x0800cb55
 800cb44:	0800cb5b 	.word	0x0800cb5b
    case HAL_OK :
      usb_status = USBD_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb4c:	e00b      	b.n	800cb66 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb4e:	2303      	movs	r3, #3
 800cb50:	73fb      	strb	r3, [r7, #15]
    break;
 800cb52:	e008      	b.n	800cb66 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb54:	2301      	movs	r3, #1
 800cb56:	73fb      	strb	r3, [r7, #15]
    break;
 800cb58:	e005      	b.n	800cb66 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb5e:	e002      	b.n	800cb66 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cb60:	2303      	movs	r3, #3
 800cb62:	73fb      	strb	r3, [r7, #15]
    break;
 800cb64:	bf00      	nop
  }
  return usb_status;
 800cb66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	460b      	mov	r3, r1
 800cb7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb8a:	78fa      	ldrb	r2, [r7, #3]
 800cb8c:	4611      	mov	r1, r2
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7f7 ffe8 	bl	8004b64 <HAL_PCD_EP_SetStall>
 800cb94:	4603      	mov	r3, r0
 800cb96:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb98:	7bbb      	ldrb	r3, [r7, #14]
 800cb9a:	2b03      	cmp	r3, #3
 800cb9c:	d816      	bhi.n	800cbcc <USBD_LL_StallEP+0x5c>
 800cb9e:	a201      	add	r2, pc, #4	@ (adr r2, 800cba4 <USBD_LL_StallEP+0x34>)
 800cba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba4:	0800cbb5 	.word	0x0800cbb5
 800cba8:	0800cbbb 	.word	0x0800cbbb
 800cbac:	0800cbc1 	.word	0x0800cbc1
 800cbb0:	0800cbc7 	.word	0x0800cbc7
    case HAL_OK :
      usb_status = USBD_OK;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb8:	e00b      	b.n	800cbd2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbba:	2303      	movs	r3, #3
 800cbbc:	73fb      	strb	r3, [r7, #15]
    break;
 800cbbe:	e008      	b.n	800cbd2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbc4:	e005      	b.n	800cbd2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbc6:	2303      	movs	r3, #3
 800cbc8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbca:	e002      	b.n	800cbd2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cbcc:	2303      	movs	r3, #3
 800cbce:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd0:	bf00      	nop
  }
  return usb_status;
 800cbd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbec:	2300      	movs	r3, #0
 800cbee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cbf6:	78fa      	ldrb	r2, [r7, #3]
 800cbf8:	4611      	mov	r1, r2
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7f8 f814 	bl	8004c28 <HAL_PCD_EP_ClrStall>
 800cc00:	4603      	mov	r3, r0
 800cc02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc04:	7bbb      	ldrb	r3, [r7, #14]
 800cc06:	2b03      	cmp	r3, #3
 800cc08:	d816      	bhi.n	800cc38 <USBD_LL_ClearStallEP+0x5c>
 800cc0a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc10 <USBD_LL_ClearStallEP+0x34>)
 800cc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc10:	0800cc21 	.word	0x0800cc21
 800cc14:	0800cc27 	.word	0x0800cc27
 800cc18:	0800cc2d 	.word	0x0800cc2d
 800cc1c:	0800cc33 	.word	0x0800cc33
    case HAL_OK :
      usb_status = USBD_OK;
 800cc20:	2300      	movs	r3, #0
 800cc22:	73fb      	strb	r3, [r7, #15]
    break;
 800cc24:	e00b      	b.n	800cc3e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc26:	2303      	movs	r3, #3
 800cc28:	73fb      	strb	r3, [r7, #15]
    break;
 800cc2a:	e008      	b.n	800cc3e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc30:	e005      	b.n	800cc3e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc32:	2303      	movs	r3, #3
 800cc34:	73fb      	strb	r3, [r7, #15]
    break;
 800cc36:	e002      	b.n	800cc3e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc38:	2303      	movs	r3, #3
 800cc3a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc3c:	bf00      	nop
  }
  return usb_status;
 800cc3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3710      	adds	r7, #16
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	460b      	mov	r3, r1
 800cc52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	da0b      	bge.n	800cc7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc64:	78fb      	ldrb	r3, [r7, #3]
 800cc66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc6a:	68f9      	ldr	r1, [r7, #12]
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	00db      	lsls	r3, r3, #3
 800cc70:	4413      	add	r3, r2
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	440b      	add	r3, r1
 800cc76:	333e      	adds	r3, #62	@ 0x3e
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	e00b      	b.n	800cc94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cc7c:	78fb      	ldrb	r3, [r7, #3]
 800cc7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc82:	68f9      	ldr	r1, [r7, #12]
 800cc84:	4613      	mov	r3, r2
 800cc86:	00db      	lsls	r3, r3, #3
 800cc88:	4413      	add	r3, r2
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	440b      	add	r3, r1
 800cc8e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800cc92:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	460b      	mov	r3, r1
 800ccaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccac:	2300      	movs	r3, #0
 800ccae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ccba:	78fa      	ldrb	r2, [r7, #3]
 800ccbc:	4611      	mov	r1, r2
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7f7 fdfe 	bl	80048c0 <HAL_PCD_SetAddress>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ccc8:	7bbb      	ldrb	r3, [r7, #14]
 800ccca:	2b03      	cmp	r3, #3
 800cccc:	d816      	bhi.n	800ccfc <USBD_LL_SetUSBAddress+0x5c>
 800ccce:	a201      	add	r2, pc, #4	@ (adr r2, 800ccd4 <USBD_LL_SetUSBAddress+0x34>)
 800ccd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd4:	0800cce5 	.word	0x0800cce5
 800ccd8:	0800cceb 	.word	0x0800cceb
 800ccdc:	0800ccf1 	.word	0x0800ccf1
 800cce0:	0800ccf7 	.word	0x0800ccf7
    case HAL_OK :
      usb_status = USBD_OK;
 800cce4:	2300      	movs	r3, #0
 800cce6:	73fb      	strb	r3, [r7, #15]
    break;
 800cce8:	e00b      	b.n	800cd02 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccea:	2303      	movs	r3, #3
 800ccec:	73fb      	strb	r3, [r7, #15]
    break;
 800ccee:	e008      	b.n	800cd02 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf4:	e005      	b.n	800cd02 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccf6:	2303      	movs	r3, #3
 800ccf8:	73fb      	strb	r3, [r7, #15]
    break;
 800ccfa:	e002      	b.n	800cd02 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ccfc:	2303      	movs	r3, #3
 800ccfe:	73fb      	strb	r3, [r7, #15]
    break;
 800cd00:	bf00      	nop
  }
  return usb_status;
 800cd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3710      	adds	r7, #16
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b086      	sub	sp, #24
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	607a      	str	r2, [r7, #4]
 800cd16:	603b      	str	r3, [r7, #0]
 800cd18:	460b      	mov	r3, r1
 800cd1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd20:	2300      	movs	r3, #0
 800cd22:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cd2a:	7af9      	ldrb	r1, [r7, #11]
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	f7f7 fee7 	bl	8004b02 <HAL_PCD_EP_Transmit>
 800cd34:	4603      	mov	r3, r0
 800cd36:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cd38:	7dbb      	ldrb	r3, [r7, #22]
 800cd3a:	2b03      	cmp	r3, #3
 800cd3c:	d816      	bhi.n	800cd6c <USBD_LL_Transmit+0x60>
 800cd3e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd44 <USBD_LL_Transmit+0x38>)
 800cd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd44:	0800cd55 	.word	0x0800cd55
 800cd48:	0800cd5b 	.word	0x0800cd5b
 800cd4c:	0800cd61 	.word	0x0800cd61
 800cd50:	0800cd67 	.word	0x0800cd67
    case HAL_OK :
      usb_status = USBD_OK;
 800cd54:	2300      	movs	r3, #0
 800cd56:	75fb      	strb	r3, [r7, #23]
    break;
 800cd58:	e00b      	b.n	800cd72 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	75fb      	strb	r3, [r7, #23]
    break;
 800cd5e:	e008      	b.n	800cd72 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd60:	2301      	movs	r3, #1
 800cd62:	75fb      	strb	r3, [r7, #23]
    break;
 800cd64:	e005      	b.n	800cd72 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd66:	2303      	movs	r3, #3
 800cd68:	75fb      	strb	r3, [r7, #23]
    break;
 800cd6a:	e002      	b.n	800cd72 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	75fb      	strb	r3, [r7, #23]
    break;
 800cd70:	bf00      	nop
  }
  return usb_status;
 800cd72:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3718      	adds	r7, #24
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b086      	sub	sp, #24
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	607a      	str	r2, [r7, #4]
 800cd86:	603b      	str	r3, [r7, #0]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd90:	2300      	movs	r3, #0
 800cd92:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cd9a:	7af9      	ldrb	r1, [r7, #11]
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	f7f7 fe65 	bl	8004a6e <HAL_PCD_EP_Receive>
 800cda4:	4603      	mov	r3, r0
 800cda6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cda8:	7dbb      	ldrb	r3, [r7, #22]
 800cdaa:	2b03      	cmp	r3, #3
 800cdac:	d816      	bhi.n	800cddc <USBD_LL_PrepareReceive+0x60>
 800cdae:	a201      	add	r2, pc, #4	@ (adr r2, 800cdb4 <USBD_LL_PrepareReceive+0x38>)
 800cdb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb4:	0800cdc5 	.word	0x0800cdc5
 800cdb8:	0800cdcb 	.word	0x0800cdcb
 800cdbc:	0800cdd1 	.word	0x0800cdd1
 800cdc0:	0800cdd7 	.word	0x0800cdd7
    case HAL_OK :
      usb_status = USBD_OK;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	75fb      	strb	r3, [r7, #23]
    break;
 800cdc8:	e00b      	b.n	800cde2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdca:	2303      	movs	r3, #3
 800cdcc:	75fb      	strb	r3, [r7, #23]
    break;
 800cdce:	e008      	b.n	800cde2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	75fb      	strb	r3, [r7, #23]
    break;
 800cdd4:	e005      	b.n	800cde2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	75fb      	strb	r3, [r7, #23]
    break;
 800cdda:	e002      	b.n	800cde2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800cddc:	2303      	movs	r3, #3
 800cdde:	75fb      	strb	r3, [r7, #23]
    break;
 800cde0:	bf00      	nop
  }
  return usb_status;
 800cde2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3718      	adds	r7, #24
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cdfe:	78fa      	ldrb	r2, [r7, #3]
 800ce00:	4611      	mov	r1, r2
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7f7 fe65 	bl	8004ad2 <HAL_PCD_EP_GetRxCount>
 800ce08:	4603      	mov	r3, r0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3708      	adds	r7, #8
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
	...

0800ce14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ce20:	78fb      	ldrb	r3, [r7, #3]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d002      	beq.n	800ce2c <HAL_PCDEx_LPM_Callback+0x18>
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d01f      	beq.n	800ce6a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ce2a:	e03b      	b.n	800cea4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6a1b      	ldr	r3, [r3, #32]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d007      	beq.n	800ce44 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ce34:	f000 f854 	bl	800cee0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce38:	4b1c      	ldr	r3, [pc, #112]	@ (800ceac <HAL_PCDEx_LPM_Callback+0x98>)
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	4a1b      	ldr	r2, [pc, #108]	@ (800ceac <HAL_PCDEx_LPM_Callback+0x98>)
 800ce3e:	f023 0306 	bic.w	r3, r3, #6
 800ce42:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	6812      	ldr	r2, [r2, #0]
 800ce52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ce56:	f023 0301 	bic.w	r3, r3, #1
 800ce5a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fe f9a9 	bl	800b1ba <USBD_LL_Resume>
    break;
 800ce68:	e01c      	b.n	800cea4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	6812      	ldr	r2, [r2, #0]
 800ce78:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ce7c:	f043 0301 	orr.w	r3, r3, #1
 800ce80:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7fe f97a 	bl	800b182 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d005      	beq.n	800cea2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce96:	4b05      	ldr	r3, [pc, #20]	@ (800ceac <HAL_PCDEx_LPM_Callback+0x98>)
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	4a04      	ldr	r2, [pc, #16]	@ (800ceac <HAL_PCDEx_LPM_Callback+0x98>)
 800ce9c:	f043 0306 	orr.w	r3, r3, #6
 800cea0:	6113      	str	r3, [r2, #16]
    break;
 800cea2:	bf00      	nop
}
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	e000ed00 	.word	0xe000ed00

0800ceb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ceb8:	4b03      	ldr	r3, [pc, #12]	@ (800cec8 <USBD_static_malloc+0x18>)
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	370c      	adds	r7, #12
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop
 800cec8:	2000c074 	.word	0x2000c074

0800cecc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]

}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cee4:	f7f4 f818 	bl	8000f18 <SystemClock_Config>
}
 800cee8:	bf00      	nop
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <memset>:
 800ceec:	4402      	add	r2, r0
 800ceee:	4603      	mov	r3, r0
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d100      	bne.n	800cef6 <memset+0xa>
 800cef4:	4770      	bx	lr
 800cef6:	f803 1b01 	strb.w	r1, [r3], #1
 800cefa:	e7f9      	b.n	800cef0 <memset+0x4>

0800cefc <__libc_init_array>:
 800cefc:	b570      	push	{r4, r5, r6, lr}
 800cefe:	4d0d      	ldr	r5, [pc, #52]	@ (800cf34 <__libc_init_array+0x38>)
 800cf00:	4c0d      	ldr	r4, [pc, #52]	@ (800cf38 <__libc_init_array+0x3c>)
 800cf02:	1b64      	subs	r4, r4, r5
 800cf04:	10a4      	asrs	r4, r4, #2
 800cf06:	2600      	movs	r6, #0
 800cf08:	42a6      	cmp	r6, r4
 800cf0a:	d109      	bne.n	800cf20 <__libc_init_array+0x24>
 800cf0c:	4d0b      	ldr	r5, [pc, #44]	@ (800cf3c <__libc_init_array+0x40>)
 800cf0e:	4c0c      	ldr	r4, [pc, #48]	@ (800cf40 <__libc_init_array+0x44>)
 800cf10:	f000 f826 	bl	800cf60 <_init>
 800cf14:	1b64      	subs	r4, r4, r5
 800cf16:	10a4      	asrs	r4, r4, #2
 800cf18:	2600      	movs	r6, #0
 800cf1a:	42a6      	cmp	r6, r4
 800cf1c:	d105      	bne.n	800cf2a <__libc_init_array+0x2e>
 800cf1e:	bd70      	pop	{r4, r5, r6, pc}
 800cf20:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf24:	4798      	blx	r3
 800cf26:	3601      	adds	r6, #1
 800cf28:	e7ee      	b.n	800cf08 <__libc_init_array+0xc>
 800cf2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf2e:	4798      	blx	r3
 800cf30:	3601      	adds	r6, #1
 800cf32:	e7f2      	b.n	800cf1a <__libc_init_array+0x1e>
 800cf34:	0800d048 	.word	0x0800d048
 800cf38:	0800d048 	.word	0x0800d048
 800cf3c:	0800d048 	.word	0x0800d048
 800cf40:	0800d04c 	.word	0x0800d04c

0800cf44 <memcpy>:
 800cf44:	440a      	add	r2, r1
 800cf46:	4291      	cmp	r1, r2
 800cf48:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf4c:	d100      	bne.n	800cf50 <memcpy+0xc>
 800cf4e:	4770      	bx	lr
 800cf50:	b510      	push	{r4, lr}
 800cf52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf5a:	4291      	cmp	r1, r2
 800cf5c:	d1f9      	bne.n	800cf52 <memcpy+0xe>
 800cf5e:	bd10      	pop	{r4, pc}

0800cf60 <_init>:
 800cf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf62:	bf00      	nop
 800cf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf66:	bc08      	pop	{r3}
 800cf68:	469e      	mov	lr, r3
 800cf6a:	4770      	bx	lr

0800cf6c <_fini>:
 800cf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6e:	bf00      	nop
 800cf70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf72:	bc08      	pop	{r3}
 800cf74:	469e      	mov	lr, r3
 800cf76:	4770      	bx	lr
